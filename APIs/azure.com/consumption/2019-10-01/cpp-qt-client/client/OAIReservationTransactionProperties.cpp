/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationTransactionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationTransactionProperties::OAIReservationTransactionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationTransactionProperties::OAIReservationTransactionProperties() {
    this->initializeModel();
}

OAIReservationTransactionProperties::~OAIReservationTransactionProperties() {}

void OAIReservationTransactionProperties::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_owner_email_isSet = false;
    m_account_owner_email_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_arm_sku_name_isSet = false;
    m_arm_sku_name_isValid = false;

    m_billing_frequency_isSet = false;
    m_billing_frequency_isValid = false;

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_current_enrollment_isSet = false;
    m_current_enrollment_isValid = false;

    m_department_name_isSet = false;
    m_department_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_purchasing_enrollment_isSet = false;
    m_purchasing_enrollment_isValid = false;

    m_purchasing_subscription_guid_isSet = false;
    m_purchasing_subscription_guid_isValid = false;

    m_purchasing_subscription_name_isSet = false;
    m_purchasing_subscription_name_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_reservation_order_id_isSet = false;
    m_reservation_order_id_isValid = false;

    m_reservation_order_name_isSet = false;
    m_reservation_order_name_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;
}

void OAIReservationTransactionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationTransactionProperties::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_owner_email_isValid = ::OpenAPI::fromJsonValue(m_account_owner_email, json[QString("accountOwnerEmail")]);
    m_account_owner_email_isSet = !json[QString("accountOwnerEmail")].isNull() && m_account_owner_email_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_arm_sku_name_isValid = ::OpenAPI::fromJsonValue(m_arm_sku_name, json[QString("armSkuName")]);
    m_arm_sku_name_isSet = !json[QString("armSkuName")].isNull() && m_arm_sku_name_isValid;

    m_billing_frequency_isValid = ::OpenAPI::fromJsonValue(m_billing_frequency, json[QString("billingFrequency")]);
    m_billing_frequency_isSet = !json[QString("billingFrequency")].isNull() && m_billing_frequency_isValid;

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_current_enrollment_isValid = ::OpenAPI::fromJsonValue(m_current_enrollment, json[QString("currentEnrollment")]);
    m_current_enrollment_isSet = !json[QString("currentEnrollment")].isNull() && m_current_enrollment_isValid;

    m_department_name_isValid = ::OpenAPI::fromJsonValue(m_department_name, json[QString("departmentName")]);
    m_department_name_isSet = !json[QString("departmentName")].isNull() && m_department_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_purchasing_enrollment_isValid = ::OpenAPI::fromJsonValue(m_purchasing_enrollment, json[QString("purchasingEnrollment")]);
    m_purchasing_enrollment_isSet = !json[QString("purchasingEnrollment")].isNull() && m_purchasing_enrollment_isValid;

    m_purchasing_subscription_guid_isValid = ::OpenAPI::fromJsonValue(m_purchasing_subscription_guid, json[QString("purchasingSubscriptionGuid")]);
    m_purchasing_subscription_guid_isSet = !json[QString("purchasingSubscriptionGuid")].isNull() && m_purchasing_subscription_guid_isValid;

    m_purchasing_subscription_name_isValid = ::OpenAPI::fromJsonValue(m_purchasing_subscription_name, json[QString("purchasingSubscriptionName")]);
    m_purchasing_subscription_name_isSet = !json[QString("purchasingSubscriptionName")].isNull() && m_purchasing_subscription_name_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_reservation_order_id_isValid = ::OpenAPI::fromJsonValue(m_reservation_order_id, json[QString("reservationOrderId")]);
    m_reservation_order_id_isSet = !json[QString("reservationOrderId")].isNull() && m_reservation_order_id_isValid;

    m_reservation_order_name_isValid = ::OpenAPI::fromJsonValue(m_reservation_order_name, json[QString("reservationOrderName")]);
    m_reservation_order_name_isSet = !json[QString("reservationOrderName")].isNull() && m_reservation_order_name_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;
}

QString OAIReservationTransactionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationTransactionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_owner_email_isSet) {
        obj.insert(QString("accountOwnerEmail"), ::OpenAPI::toJsonValue(m_account_owner_email));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_arm_sku_name_isSet) {
        obj.insert(QString("armSkuName"), ::OpenAPI::toJsonValue(m_arm_sku_name));
    }
    if (m_billing_frequency_isSet) {
        obj.insert(QString("billingFrequency"), ::OpenAPI::toJsonValue(m_billing_frequency));
    }
    if (m_cost_center_isSet) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_current_enrollment_isSet) {
        obj.insert(QString("currentEnrollment"), ::OpenAPI::toJsonValue(m_current_enrollment));
    }
    if (m_department_name_isSet) {
        obj.insert(QString("departmentName"), ::OpenAPI::toJsonValue(m_department_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_purchasing_enrollment_isSet) {
        obj.insert(QString("purchasingEnrollment"), ::OpenAPI::toJsonValue(m_purchasing_enrollment));
    }
    if (m_purchasing_subscription_guid_isSet) {
        obj.insert(QString("purchasingSubscriptionGuid"), ::OpenAPI::toJsonValue(m_purchasing_subscription_guid));
    }
    if (m_purchasing_subscription_name_isSet) {
        obj.insert(QString("purchasingSubscriptionName"), ::OpenAPI::toJsonValue(m_purchasing_subscription_name));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_reservation_order_id_isSet) {
        obj.insert(QString("reservationOrderId"), ::OpenAPI::toJsonValue(m_reservation_order_id));
    }
    if (m_reservation_order_name_isSet) {
        obj.insert(QString("reservationOrderName"), ::OpenAPI::toJsonValue(m_reservation_order_name));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    return obj;
}

QString OAIReservationTransactionProperties::getAccountName() const {
    return m_account_name;
}
void OAIReservationTransactionProperties::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIReservationTransactionProperties::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIReservationTransactionProperties::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIReservationTransactionProperties::getAccountOwnerEmail() const {
    return m_account_owner_email;
}
void OAIReservationTransactionProperties::setAccountOwnerEmail(const QString &account_owner_email) {
    m_account_owner_email = account_owner_email;
    m_account_owner_email_isSet = true;
}

bool OAIReservationTransactionProperties::is_account_owner_email_Set() const{
    return m_account_owner_email_isSet;
}

bool OAIReservationTransactionProperties::is_account_owner_email_Valid() const{
    return m_account_owner_email_isValid;
}

double OAIReservationTransactionProperties::getAmount() const {
    return m_amount;
}
void OAIReservationTransactionProperties::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIReservationTransactionProperties::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIReservationTransactionProperties::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIReservationTransactionProperties::getArmSkuName() const {
    return m_arm_sku_name;
}
void OAIReservationTransactionProperties::setArmSkuName(const QString &arm_sku_name) {
    m_arm_sku_name = arm_sku_name;
    m_arm_sku_name_isSet = true;
}

bool OAIReservationTransactionProperties::is_arm_sku_name_Set() const{
    return m_arm_sku_name_isSet;
}

bool OAIReservationTransactionProperties::is_arm_sku_name_Valid() const{
    return m_arm_sku_name_isValid;
}

QString OAIReservationTransactionProperties::getBillingFrequency() const {
    return m_billing_frequency;
}
void OAIReservationTransactionProperties::setBillingFrequency(const QString &billing_frequency) {
    m_billing_frequency = billing_frequency;
    m_billing_frequency_isSet = true;
}

bool OAIReservationTransactionProperties::is_billing_frequency_Set() const{
    return m_billing_frequency_isSet;
}

bool OAIReservationTransactionProperties::is_billing_frequency_Valid() const{
    return m_billing_frequency_isValid;
}

QString OAIReservationTransactionProperties::getCostCenter() const {
    return m_cost_center;
}
void OAIReservationTransactionProperties::setCostCenter(const QString &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIReservationTransactionProperties::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIReservationTransactionProperties::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

QString OAIReservationTransactionProperties::getCurrency() const {
    return m_currency;
}
void OAIReservationTransactionProperties::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIReservationTransactionProperties::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIReservationTransactionProperties::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIReservationTransactionProperties::getCurrentEnrollment() const {
    return m_current_enrollment;
}
void OAIReservationTransactionProperties::setCurrentEnrollment(const QString &current_enrollment) {
    m_current_enrollment = current_enrollment;
    m_current_enrollment_isSet = true;
}

bool OAIReservationTransactionProperties::is_current_enrollment_Set() const{
    return m_current_enrollment_isSet;
}

bool OAIReservationTransactionProperties::is_current_enrollment_Valid() const{
    return m_current_enrollment_isValid;
}

QString OAIReservationTransactionProperties::getDepartmentName() const {
    return m_department_name;
}
void OAIReservationTransactionProperties::setDepartmentName(const QString &department_name) {
    m_department_name = department_name;
    m_department_name_isSet = true;
}

bool OAIReservationTransactionProperties::is_department_name_Set() const{
    return m_department_name_isSet;
}

bool OAIReservationTransactionProperties::is_department_name_Valid() const{
    return m_department_name_isValid;
}

QString OAIReservationTransactionProperties::getDescription() const {
    return m_description;
}
void OAIReservationTransactionProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReservationTransactionProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReservationTransactionProperties::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIReservationTransactionProperties::getEventDate() const {
    return m_event_date;
}
void OAIReservationTransactionProperties::setEventDate(const QDateTime &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIReservationTransactionProperties::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIReservationTransactionProperties::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QString OAIReservationTransactionProperties::getEventType() const {
    return m_event_type;
}
void OAIReservationTransactionProperties::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIReservationTransactionProperties::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIReservationTransactionProperties::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIReservationTransactionProperties::getPurchasingEnrollment() const {
    return m_purchasing_enrollment;
}
void OAIReservationTransactionProperties::setPurchasingEnrollment(const QString &purchasing_enrollment) {
    m_purchasing_enrollment = purchasing_enrollment;
    m_purchasing_enrollment_isSet = true;
}

bool OAIReservationTransactionProperties::is_purchasing_enrollment_Set() const{
    return m_purchasing_enrollment_isSet;
}

bool OAIReservationTransactionProperties::is_purchasing_enrollment_Valid() const{
    return m_purchasing_enrollment_isValid;
}

QString OAIReservationTransactionProperties::getPurchasingSubscriptionGuid() const {
    return m_purchasing_subscription_guid;
}
void OAIReservationTransactionProperties::setPurchasingSubscriptionGuid(const QString &purchasing_subscription_guid) {
    m_purchasing_subscription_guid = purchasing_subscription_guid;
    m_purchasing_subscription_guid_isSet = true;
}

bool OAIReservationTransactionProperties::is_purchasing_subscription_guid_Set() const{
    return m_purchasing_subscription_guid_isSet;
}

bool OAIReservationTransactionProperties::is_purchasing_subscription_guid_Valid() const{
    return m_purchasing_subscription_guid_isValid;
}

QString OAIReservationTransactionProperties::getPurchasingSubscriptionName() const {
    return m_purchasing_subscription_name;
}
void OAIReservationTransactionProperties::setPurchasingSubscriptionName(const QString &purchasing_subscription_name) {
    m_purchasing_subscription_name = purchasing_subscription_name;
    m_purchasing_subscription_name_isSet = true;
}

bool OAIReservationTransactionProperties::is_purchasing_subscription_name_Set() const{
    return m_purchasing_subscription_name_isSet;
}

bool OAIReservationTransactionProperties::is_purchasing_subscription_name_Valid() const{
    return m_purchasing_subscription_name_isValid;
}

double OAIReservationTransactionProperties::getQuantity() const {
    return m_quantity;
}
void OAIReservationTransactionProperties::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIReservationTransactionProperties::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIReservationTransactionProperties::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIReservationTransactionProperties::getRegion() const {
    return m_region;
}
void OAIReservationTransactionProperties::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIReservationTransactionProperties::is_region_Set() const{
    return m_region_isSet;
}

bool OAIReservationTransactionProperties::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIReservationTransactionProperties::getReservationOrderId() const {
    return m_reservation_order_id;
}
void OAIReservationTransactionProperties::setReservationOrderId(const QString &reservation_order_id) {
    m_reservation_order_id = reservation_order_id;
    m_reservation_order_id_isSet = true;
}

bool OAIReservationTransactionProperties::is_reservation_order_id_Set() const{
    return m_reservation_order_id_isSet;
}

bool OAIReservationTransactionProperties::is_reservation_order_id_Valid() const{
    return m_reservation_order_id_isValid;
}

QString OAIReservationTransactionProperties::getReservationOrderName() const {
    return m_reservation_order_name;
}
void OAIReservationTransactionProperties::setReservationOrderName(const QString &reservation_order_name) {
    m_reservation_order_name = reservation_order_name;
    m_reservation_order_name_isSet = true;
}

bool OAIReservationTransactionProperties::is_reservation_order_name_Set() const{
    return m_reservation_order_name_isSet;
}

bool OAIReservationTransactionProperties::is_reservation_order_name_Valid() const{
    return m_reservation_order_name_isValid;
}

QString OAIReservationTransactionProperties::getTerm() const {
    return m_term;
}
void OAIReservationTransactionProperties::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIReservationTransactionProperties::is_term_Set() const{
    return m_term_isSet;
}

bool OAIReservationTransactionProperties::is_term_Valid() const{
    return m_term_isValid;
}

bool OAIReservationTransactionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_owner_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arm_sku_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_enrollment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchasing_enrollment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchasing_subscription_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchasing_subscription_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_order_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationTransactionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
