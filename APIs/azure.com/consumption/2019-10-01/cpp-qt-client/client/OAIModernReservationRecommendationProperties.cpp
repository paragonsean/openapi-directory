/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModernReservationRecommendationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModernReservationRecommendationProperties::OAIModernReservationRecommendationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModernReservationRecommendationProperties::OAIModernReservationRecommendationProperties() {
    this->initializeModel();
}

OAIModernReservationRecommendationProperties::~OAIModernReservationRecommendationProperties() {}

void OAIModernReservationRecommendationProperties::initializeModel() {

    m_cost_with_no_reserved_instances_isSet = false;
    m_cost_with_no_reserved_instances_isValid = false;

    m_first_usage_date_isSet = false;
    m_first_usage_date_isValid = false;

    m_instance_flexibility_group_isSet = false;
    m_instance_flexibility_group_isValid = false;

    m_instance_flexibility_ratio_isSet = false;
    m_instance_flexibility_ratio_isValid = false;

    m_look_back_period_isSet = false;
    m_look_back_period_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_net_savings_isSet = false;
    m_net_savings_isValid = false;

    m_normalized_size_isSet = false;
    m_normalized_size_isValid = false;

    m_recommended_quantity_isSet = false;
    m_recommended_quantity_isValid = false;

    m_recommended_quantity_normalized_isSet = false;
    m_recommended_quantity_normalized_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_sku_properties_isSet = false;
    m_sku_properties_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_total_cost_with_reserved_instances_isSet = false;
    m_total_cost_with_reserved_instances_isValid = false;
}

void OAIModernReservationRecommendationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModernReservationRecommendationProperties::fromJsonObject(QJsonObject json) {

    m_cost_with_no_reserved_instances_isValid = ::OpenAPI::fromJsonValue(m_cost_with_no_reserved_instances, json[QString("costWithNoReservedInstances")]);
    m_cost_with_no_reserved_instances_isSet = !json[QString("costWithNoReservedInstances")].isNull() && m_cost_with_no_reserved_instances_isValid;

    m_first_usage_date_isValid = ::OpenAPI::fromJsonValue(m_first_usage_date, json[QString("firstUsageDate")]);
    m_first_usage_date_isSet = !json[QString("firstUsageDate")].isNull() && m_first_usage_date_isValid;

    m_instance_flexibility_group_isValid = ::OpenAPI::fromJsonValue(m_instance_flexibility_group, json[QString("instanceFlexibilityGroup")]);
    m_instance_flexibility_group_isSet = !json[QString("instanceFlexibilityGroup")].isNull() && m_instance_flexibility_group_isValid;

    m_instance_flexibility_ratio_isValid = ::OpenAPI::fromJsonValue(m_instance_flexibility_ratio, json[QString("instanceFlexibilityRatio")]);
    m_instance_flexibility_ratio_isSet = !json[QString("instanceFlexibilityRatio")].isNull() && m_instance_flexibility_ratio_isValid;

    m_look_back_period_isValid = ::OpenAPI::fromJsonValue(m_look_back_period, json[QString("lookBackPeriod")]);
    m_look_back_period_isSet = !json[QString("lookBackPeriod")].isNull() && m_look_back_period_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("meterId")]);
    m_meter_id_isSet = !json[QString("meterId")].isNull() && m_meter_id_isValid;

    m_net_savings_isValid = ::OpenAPI::fromJsonValue(m_net_savings, json[QString("netSavings")]);
    m_net_savings_isSet = !json[QString("netSavings")].isNull() && m_net_savings_isValid;

    m_normalized_size_isValid = ::OpenAPI::fromJsonValue(m_normalized_size, json[QString("normalizedSize")]);
    m_normalized_size_isSet = !json[QString("normalizedSize")].isNull() && m_normalized_size_isValid;

    m_recommended_quantity_isValid = ::OpenAPI::fromJsonValue(m_recommended_quantity, json[QString("recommendedQuantity")]);
    m_recommended_quantity_isSet = !json[QString("recommendedQuantity")].isNull() && m_recommended_quantity_isValid;

    m_recommended_quantity_normalized_isValid = ::OpenAPI::fromJsonValue(m_recommended_quantity_normalized, json[QString("recommendedQuantityNormalized")]);
    m_recommended_quantity_normalized_isSet = !json[QString("recommendedQuantityNormalized")].isNull() && m_recommended_quantity_normalized_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_sku_properties_isValid = ::OpenAPI::fromJsonValue(m_sku_properties, json[QString("skuProperties")]);
    m_sku_properties_isSet = !json[QString("skuProperties")].isNull() && m_sku_properties_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_total_cost_with_reserved_instances_isValid = ::OpenAPI::fromJsonValue(m_total_cost_with_reserved_instances, json[QString("totalCostWithReservedInstances")]);
    m_total_cost_with_reserved_instances_isSet = !json[QString("totalCostWithReservedInstances")].isNull() && m_total_cost_with_reserved_instances_isValid;
}

QString OAIModernReservationRecommendationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModernReservationRecommendationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_with_no_reserved_instances.isSet()) {
        obj.insert(QString("costWithNoReservedInstances"), ::OpenAPI::toJsonValue(m_cost_with_no_reserved_instances));
    }
    if (m_first_usage_date_isSet) {
        obj.insert(QString("firstUsageDate"), ::OpenAPI::toJsonValue(m_first_usage_date));
    }
    if (m_instance_flexibility_group_isSet) {
        obj.insert(QString("instanceFlexibilityGroup"), ::OpenAPI::toJsonValue(m_instance_flexibility_group));
    }
    if (m_instance_flexibility_ratio_isSet) {
        obj.insert(QString("instanceFlexibilityRatio"), ::OpenAPI::toJsonValue(m_instance_flexibility_ratio));
    }
    if (m_look_back_period_isSet) {
        obj.insert(QString("lookBackPeriod"), ::OpenAPI::toJsonValue(m_look_back_period));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("meterId"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_net_savings.isSet()) {
        obj.insert(QString("netSavings"), ::OpenAPI::toJsonValue(m_net_savings));
    }
    if (m_normalized_size_isSet) {
        obj.insert(QString("normalizedSize"), ::OpenAPI::toJsonValue(m_normalized_size));
    }
    if (m_recommended_quantity_isSet) {
        obj.insert(QString("recommendedQuantity"), ::OpenAPI::toJsonValue(m_recommended_quantity));
    }
    if (m_recommended_quantity_normalized_isSet) {
        obj.insert(QString("recommendedQuantityNormalized"), ::OpenAPI::toJsonValue(m_recommended_quantity_normalized));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_sku_properties.size() > 0) {
        obj.insert(QString("skuProperties"), ::OpenAPI::toJsonValue(m_sku_properties));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_total_cost_with_reserved_instances.isSet()) {
        obj.insert(QString("totalCostWithReservedInstances"), ::OpenAPI::toJsonValue(m_total_cost_with_reserved_instances));
    }
    return obj;
}

OAIAmount OAIModernReservationRecommendationProperties::getCostWithNoReservedInstances() const {
    return m_cost_with_no_reserved_instances;
}
void OAIModernReservationRecommendationProperties::setCostWithNoReservedInstances(const OAIAmount &cost_with_no_reserved_instances) {
    m_cost_with_no_reserved_instances = cost_with_no_reserved_instances;
    m_cost_with_no_reserved_instances_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_cost_with_no_reserved_instances_Set() const{
    return m_cost_with_no_reserved_instances_isSet;
}

bool OAIModernReservationRecommendationProperties::is_cost_with_no_reserved_instances_Valid() const{
    return m_cost_with_no_reserved_instances_isValid;
}

QDateTime OAIModernReservationRecommendationProperties::getFirstUsageDate() const {
    return m_first_usage_date;
}
void OAIModernReservationRecommendationProperties::setFirstUsageDate(const QDateTime &first_usage_date) {
    m_first_usage_date = first_usage_date;
    m_first_usage_date_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_first_usage_date_Set() const{
    return m_first_usage_date_isSet;
}

bool OAIModernReservationRecommendationProperties::is_first_usage_date_Valid() const{
    return m_first_usage_date_isValid;
}

QString OAIModernReservationRecommendationProperties::getInstanceFlexibilityGroup() const {
    return m_instance_flexibility_group;
}
void OAIModernReservationRecommendationProperties::setInstanceFlexibilityGroup(const QString &instance_flexibility_group) {
    m_instance_flexibility_group = instance_flexibility_group;
    m_instance_flexibility_group_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_instance_flexibility_group_Set() const{
    return m_instance_flexibility_group_isSet;
}

bool OAIModernReservationRecommendationProperties::is_instance_flexibility_group_Valid() const{
    return m_instance_flexibility_group_isValid;
}

qint32 OAIModernReservationRecommendationProperties::getInstanceFlexibilityRatio() const {
    return m_instance_flexibility_ratio;
}
void OAIModernReservationRecommendationProperties::setInstanceFlexibilityRatio(const qint32 &instance_flexibility_ratio) {
    m_instance_flexibility_ratio = instance_flexibility_ratio;
    m_instance_flexibility_ratio_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_instance_flexibility_ratio_Set() const{
    return m_instance_flexibility_ratio_isSet;
}

bool OAIModernReservationRecommendationProperties::is_instance_flexibility_ratio_Valid() const{
    return m_instance_flexibility_ratio_isValid;
}

QString OAIModernReservationRecommendationProperties::getLookBackPeriod() const {
    return m_look_back_period;
}
void OAIModernReservationRecommendationProperties::setLookBackPeriod(const QString &look_back_period) {
    m_look_back_period = look_back_period;
    m_look_back_period_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_look_back_period_Set() const{
    return m_look_back_period_isSet;
}

bool OAIModernReservationRecommendationProperties::is_look_back_period_Valid() const{
    return m_look_back_period_isValid;
}

QString OAIModernReservationRecommendationProperties::getMeterId() const {
    return m_meter_id;
}
void OAIModernReservationRecommendationProperties::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIModernReservationRecommendationProperties::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

OAIAmount OAIModernReservationRecommendationProperties::getNetSavings() const {
    return m_net_savings;
}
void OAIModernReservationRecommendationProperties::setNetSavings(const OAIAmount &net_savings) {
    m_net_savings = net_savings;
    m_net_savings_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_net_savings_Set() const{
    return m_net_savings_isSet;
}

bool OAIModernReservationRecommendationProperties::is_net_savings_Valid() const{
    return m_net_savings_isValid;
}

QString OAIModernReservationRecommendationProperties::getNormalizedSize() const {
    return m_normalized_size;
}
void OAIModernReservationRecommendationProperties::setNormalizedSize(const QString &normalized_size) {
    m_normalized_size = normalized_size;
    m_normalized_size_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_normalized_size_Set() const{
    return m_normalized_size_isSet;
}

bool OAIModernReservationRecommendationProperties::is_normalized_size_Valid() const{
    return m_normalized_size_isValid;
}

double OAIModernReservationRecommendationProperties::getRecommendedQuantity() const {
    return m_recommended_quantity;
}
void OAIModernReservationRecommendationProperties::setRecommendedQuantity(const double &recommended_quantity) {
    m_recommended_quantity = recommended_quantity;
    m_recommended_quantity_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_recommended_quantity_Set() const{
    return m_recommended_quantity_isSet;
}

bool OAIModernReservationRecommendationProperties::is_recommended_quantity_Valid() const{
    return m_recommended_quantity_isValid;
}

double OAIModernReservationRecommendationProperties::getRecommendedQuantityNormalized() const {
    return m_recommended_quantity_normalized;
}
void OAIModernReservationRecommendationProperties::setRecommendedQuantityNormalized(const double &recommended_quantity_normalized) {
    m_recommended_quantity_normalized = recommended_quantity_normalized;
    m_recommended_quantity_normalized_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_recommended_quantity_normalized_Set() const{
    return m_recommended_quantity_normalized_isSet;
}

bool OAIModernReservationRecommendationProperties::is_recommended_quantity_normalized_Valid() const{
    return m_recommended_quantity_normalized_isValid;
}

QString OAIModernReservationRecommendationProperties::getScope() const {
    return m_scope;
}
void OAIModernReservationRecommendationProperties::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIModernReservationRecommendationProperties::is_scope_Valid() const{
    return m_scope_isValid;
}

QList<OAISkuProperty> OAIModernReservationRecommendationProperties::getSkuProperties() const {
    return m_sku_properties;
}
void OAIModernReservationRecommendationProperties::setSkuProperties(const QList<OAISkuProperty> &sku_properties) {
    m_sku_properties = sku_properties;
    m_sku_properties_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_sku_properties_Set() const{
    return m_sku_properties_isSet;
}

bool OAIModernReservationRecommendationProperties::is_sku_properties_Valid() const{
    return m_sku_properties_isValid;
}

QString OAIModernReservationRecommendationProperties::getTerm() const {
    return m_term;
}
void OAIModernReservationRecommendationProperties::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_term_Set() const{
    return m_term_isSet;
}

bool OAIModernReservationRecommendationProperties::is_term_Valid() const{
    return m_term_isValid;
}

OAIAmount OAIModernReservationRecommendationProperties::getTotalCostWithReservedInstances() const {
    return m_total_cost_with_reserved_instances;
}
void OAIModernReservationRecommendationProperties::setTotalCostWithReservedInstances(const OAIAmount &total_cost_with_reserved_instances) {
    m_total_cost_with_reserved_instances = total_cost_with_reserved_instances;
    m_total_cost_with_reserved_instances_isSet = true;
}

bool OAIModernReservationRecommendationProperties::is_total_cost_with_reserved_instances_Set() const{
    return m_total_cost_with_reserved_instances_isSet;
}

bool OAIModernReservationRecommendationProperties::is_total_cost_with_reserved_instances_Valid() const{
    return m_total_cost_with_reserved_instances_isValid;
}

bool OAIModernReservationRecommendationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_with_no_reserved_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_usage_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_flexibility_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_flexibility_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_look_back_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_savings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_quantity_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_with_reserved_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModernReservationRecommendationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
