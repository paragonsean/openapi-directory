/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILotProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILotProperties::OAILotProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILotProperties::OAILotProperties() {
    this->initializeModel();
}

OAILotProperties::~OAILotProperties() {}

void OAILotProperties::initializeModel() {

    m_closed_balance_isSet = false;
    m_closed_balance_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_original_amount_isSet = false;
    m_original_amount_isValid = false;

    m_po_number_isSet = false;
    m_po_number_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAILotProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILotProperties::fromJsonObject(QJsonObject json) {

    m_closed_balance_isValid = ::OpenAPI::fromJsonValue(m_closed_balance, json[QString("closedBalance")]);
    m_closed_balance_isSet = !json[QString("closedBalance")].isNull() && m_closed_balance_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_original_amount_isValid = ::OpenAPI::fromJsonValue(m_original_amount, json[QString("originalAmount")]);
    m_original_amount_isSet = !json[QString("originalAmount")].isNull() && m_original_amount_isValid;

    m_po_number_isValid = ::OpenAPI::fromJsonValue(m_po_number, json[QString("poNumber")]);
    m_po_number_isSet = !json[QString("poNumber")].isNull() && m_po_number_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAILotProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILotProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_balance.isSet()) {
        obj.insert(QString("closedBalance"), ::OpenAPI::toJsonValue(m_closed_balance));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_original_amount.isSet()) {
        obj.insert(QString("originalAmount"), ::OpenAPI::toJsonValue(m_original_amount));
    }
    if (m_po_number_isSet) {
        obj.insert(QString("poNumber"), ::OpenAPI::toJsonValue(m_po_number));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

OAIAmount OAILotProperties::getClosedBalance() const {
    return m_closed_balance;
}
void OAILotProperties::setClosedBalance(const OAIAmount &closed_balance) {
    m_closed_balance = closed_balance;
    m_closed_balance_isSet = true;
}

bool OAILotProperties::is_closed_balance_Set() const{
    return m_closed_balance_isSet;
}

bool OAILotProperties::is_closed_balance_Valid() const{
    return m_closed_balance_isValid;
}

QDateTime OAILotProperties::getExpirationDate() const {
    return m_expiration_date;
}
void OAILotProperties::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAILotProperties::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAILotProperties::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIAmount OAILotProperties::getOriginalAmount() const {
    return m_original_amount;
}
void OAILotProperties::setOriginalAmount(const OAIAmount &original_amount) {
    m_original_amount = original_amount;
    m_original_amount_isSet = true;
}

bool OAILotProperties::is_original_amount_Set() const{
    return m_original_amount_isSet;
}

bool OAILotProperties::is_original_amount_Valid() const{
    return m_original_amount_isValid;
}

QString OAILotProperties::getPoNumber() const {
    return m_po_number;
}
void OAILotProperties::setPoNumber(const QString &po_number) {
    m_po_number = po_number;
    m_po_number_isSet = true;
}

bool OAILotProperties::is_po_number_Set() const{
    return m_po_number_isSet;
}

bool OAILotProperties::is_po_number_Valid() const{
    return m_po_number_isValid;
}

QString OAILotProperties::getSource() const {
    return m_source;
}
void OAILotProperties::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAILotProperties::is_source_Set() const{
    return m_source_isSet;
}

bool OAILotProperties::is_source_Valid() const{
    return m_source_isValid;
}

QDateTime OAILotProperties::getStartDate() const {
    return m_start_date;
}
void OAILotProperties::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAILotProperties::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAILotProperties::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAILotProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_po_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILotProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
