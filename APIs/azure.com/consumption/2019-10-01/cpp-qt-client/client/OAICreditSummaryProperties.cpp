/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditSummaryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditSummaryProperties::OAICreditSummaryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditSummaryProperties::OAICreditSummaryProperties() {
    this->initializeModel();
}

OAICreditSummaryProperties::~OAICreditSummaryProperties() {}

void OAICreditSummaryProperties::initializeModel() {

    m_balance_summary_isSet = false;
    m_balance_summary_isValid = false;

    m_expired_credit_isSet = false;
    m_expired_credit_isValid = false;

    m_pending_credit_adjustments_isSet = false;
    m_pending_credit_adjustments_isValid = false;

    m_pending_eligible_charges_isSet = false;
    m_pending_eligible_charges_isValid = false;
}

void OAICreditSummaryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditSummaryProperties::fromJsonObject(QJsonObject json) {

    m_balance_summary_isValid = ::OpenAPI::fromJsonValue(m_balance_summary, json[QString("balanceSummary")]);
    m_balance_summary_isSet = !json[QString("balanceSummary")].isNull() && m_balance_summary_isValid;

    m_expired_credit_isValid = ::OpenAPI::fromJsonValue(m_expired_credit, json[QString("expiredCredit")]);
    m_expired_credit_isSet = !json[QString("expiredCredit")].isNull() && m_expired_credit_isValid;

    m_pending_credit_adjustments_isValid = ::OpenAPI::fromJsonValue(m_pending_credit_adjustments, json[QString("pendingCreditAdjustments")]);
    m_pending_credit_adjustments_isSet = !json[QString("pendingCreditAdjustments")].isNull() && m_pending_credit_adjustments_isValid;

    m_pending_eligible_charges_isValid = ::OpenAPI::fromJsonValue(m_pending_eligible_charges, json[QString("pendingEligibleCharges")]);
    m_pending_eligible_charges_isSet = !json[QString("pendingEligibleCharges")].isNull() && m_pending_eligible_charges_isValid;
}

QString OAICreditSummaryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditSummaryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_summary.isSet()) {
        obj.insert(QString("balanceSummary"), ::OpenAPI::toJsonValue(m_balance_summary));
    }
    if (m_expired_credit.isSet()) {
        obj.insert(QString("expiredCredit"), ::OpenAPI::toJsonValue(m_expired_credit));
    }
    if (m_pending_credit_adjustments.isSet()) {
        obj.insert(QString("pendingCreditAdjustments"), ::OpenAPI::toJsonValue(m_pending_credit_adjustments));
    }
    if (m_pending_eligible_charges.isSet()) {
        obj.insert(QString("pendingEligibleCharges"), ::OpenAPI::toJsonValue(m_pending_eligible_charges));
    }
    return obj;
}

OAICreditBalanceSummary OAICreditSummaryProperties::getBalanceSummary() const {
    return m_balance_summary;
}
void OAICreditSummaryProperties::setBalanceSummary(const OAICreditBalanceSummary &balance_summary) {
    m_balance_summary = balance_summary;
    m_balance_summary_isSet = true;
}

bool OAICreditSummaryProperties::is_balance_summary_Set() const{
    return m_balance_summary_isSet;
}

bool OAICreditSummaryProperties::is_balance_summary_Valid() const{
    return m_balance_summary_isValid;
}

OAIAmount OAICreditSummaryProperties::getExpiredCredit() const {
    return m_expired_credit;
}
void OAICreditSummaryProperties::setExpiredCredit(const OAIAmount &expired_credit) {
    m_expired_credit = expired_credit;
    m_expired_credit_isSet = true;
}

bool OAICreditSummaryProperties::is_expired_credit_Set() const{
    return m_expired_credit_isSet;
}

bool OAICreditSummaryProperties::is_expired_credit_Valid() const{
    return m_expired_credit_isValid;
}

OAIAmount OAICreditSummaryProperties::getPendingCreditAdjustments() const {
    return m_pending_credit_adjustments;
}
void OAICreditSummaryProperties::setPendingCreditAdjustments(const OAIAmount &pending_credit_adjustments) {
    m_pending_credit_adjustments = pending_credit_adjustments;
    m_pending_credit_adjustments_isSet = true;
}

bool OAICreditSummaryProperties::is_pending_credit_adjustments_Set() const{
    return m_pending_credit_adjustments_isSet;
}

bool OAICreditSummaryProperties::is_pending_credit_adjustments_Valid() const{
    return m_pending_credit_adjustments_isValid;
}

OAIAmount OAICreditSummaryProperties::getPendingEligibleCharges() const {
    return m_pending_eligible_charges;
}
void OAICreditSummaryProperties::setPendingEligibleCharges(const OAIAmount &pending_eligible_charges) {
    m_pending_eligible_charges = pending_eligible_charges;
    m_pending_eligible_charges_isSet = true;
}

bool OAICreditSummaryProperties::is_pending_eligible_charges_Set() const{
    return m_pending_eligible_charges_isSet;
}

bool OAICreditSummaryProperties::is_pending_eligible_charges_Valid() const{
    return m_pending_eligible_charges_isValid;
}

bool OAICreditSummaryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_credit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_credit_adjustments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_eligible_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditSummaryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
