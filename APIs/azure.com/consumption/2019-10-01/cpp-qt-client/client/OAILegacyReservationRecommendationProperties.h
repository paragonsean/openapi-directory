/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILegacyReservationRecommendationProperties.h
 *
 * The properties of the reservation recommendation.
 */

#ifndef OAILegacyReservationRecommendationProperties_H
#define OAILegacyReservationRecommendationProperties_H

#include <QJsonObject>

#include "OAISkuProperty.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISkuProperty;

class OAILegacyReservationRecommendationProperties : public OAIObject {
public:
    OAILegacyReservationRecommendationProperties();
    OAILegacyReservationRecommendationProperties(QString json);
    ~OAILegacyReservationRecommendationProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCostWithNoReservedInstances() const;
    void setCostWithNoReservedInstances(const double &cost_with_no_reserved_instances);
    bool is_cost_with_no_reserved_instances_Set() const;
    bool is_cost_with_no_reserved_instances_Valid() const;

    QDateTime getFirstUsageDate() const;
    void setFirstUsageDate(const QDateTime &first_usage_date);
    bool is_first_usage_date_Set() const;
    bool is_first_usage_date_Valid() const;

    QString getInstanceFlexibilityGroup() const;
    void setInstanceFlexibilityGroup(const QString &instance_flexibility_group);
    bool is_instance_flexibility_group_Set() const;
    bool is_instance_flexibility_group_Valid() const;

    qint32 getInstanceFlexibilityRatio() const;
    void setInstanceFlexibilityRatio(const qint32 &instance_flexibility_ratio);
    bool is_instance_flexibility_ratio_Set() const;
    bool is_instance_flexibility_ratio_Valid() const;

    QString getLookBackPeriod() const;
    void setLookBackPeriod(const QString &look_back_period);
    bool is_look_back_period_Set() const;
    bool is_look_back_period_Valid() const;

    QString getMeterId() const;
    void setMeterId(const QString &meter_id);
    bool is_meter_id_Set() const;
    bool is_meter_id_Valid() const;

    double getNetSavings() const;
    void setNetSavings(const double &net_savings);
    bool is_net_savings_Set() const;
    bool is_net_savings_Valid() const;

    QString getNormalizedSize() const;
    void setNormalizedSize(const QString &normalized_size);
    bool is_normalized_size_Set() const;
    bool is_normalized_size_Valid() const;

    double getRecommendedQuantity() const;
    void setRecommendedQuantity(const double &recommended_quantity);
    bool is_recommended_quantity_Set() const;
    bool is_recommended_quantity_Valid() const;

    double getRecommendedQuantityNormalized() const;
    void setRecommendedQuantityNormalized(const double &recommended_quantity_normalized);
    bool is_recommended_quantity_normalized_Set() const;
    bool is_recommended_quantity_normalized_Valid() const;

    QString getScope() const;
    void setScope(const QString &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    QList<OAISkuProperty> getSkuProperties() const;
    void setSkuProperties(const QList<OAISkuProperty> &sku_properties);
    bool is_sku_properties_Set() const;
    bool is_sku_properties_Valid() const;

    QString getTerm() const;
    void setTerm(const QString &term);
    bool is_term_Set() const;
    bool is_term_Valid() const;

    double getTotalCostWithReservedInstances() const;
    void setTotalCostWithReservedInstances(const double &total_cost_with_reserved_instances);
    bool is_total_cost_with_reserved_instances_Set() const;
    bool is_total_cost_with_reserved_instances_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cost_with_no_reserved_instances;
    bool m_cost_with_no_reserved_instances_isSet;
    bool m_cost_with_no_reserved_instances_isValid;

    QDateTime m_first_usage_date;
    bool m_first_usage_date_isSet;
    bool m_first_usage_date_isValid;

    QString m_instance_flexibility_group;
    bool m_instance_flexibility_group_isSet;
    bool m_instance_flexibility_group_isValid;

    qint32 m_instance_flexibility_ratio;
    bool m_instance_flexibility_ratio_isSet;
    bool m_instance_flexibility_ratio_isValid;

    QString m_look_back_period;
    bool m_look_back_period_isSet;
    bool m_look_back_period_isValid;

    QString m_meter_id;
    bool m_meter_id_isSet;
    bool m_meter_id_isValid;

    double m_net_savings;
    bool m_net_savings_isSet;
    bool m_net_savings_isValid;

    QString m_normalized_size;
    bool m_normalized_size_isSet;
    bool m_normalized_size_isValid;

    double m_recommended_quantity;
    bool m_recommended_quantity_isSet;
    bool m_recommended_quantity_isValid;

    double m_recommended_quantity_normalized;
    bool m_recommended_quantity_normalized_isSet;
    bool m_recommended_quantity_normalized_isValid;

    QString m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    QList<OAISkuProperty> m_sku_properties;
    bool m_sku_properties_isSet;
    bool m_sku_properties_isValid;

    QString m_term;
    bool m_term_isSet;
    bool m_term_isValid;

    double m_total_cost_with_reserved_instances;
    bool m_total_cost_with_reserved_instances_isSet;
    bool m_total_cost_with_reserved_instances_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILegacyReservationRecommendationProperties)

#endif // OAILegacyReservationRecommendationProperties_H
