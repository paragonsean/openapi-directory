/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReservationTransactionProperties model module.
 * @module model/ReservationTransactionProperties
 * @version 2019-10-01
 */
class ReservationTransactionProperties {
    /**
     * Constructs a new <code>ReservationTransactionProperties</code>.
     * @alias module:model/ReservationTransactionProperties
     */
    constructor() { 
        
        ReservationTransactionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReservationTransactionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReservationTransactionProperties} obj Optional instance to populate.
     * @return {module:model/ReservationTransactionProperties} The populated <code>ReservationTransactionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReservationTransactionProperties();

            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('accountOwnerEmail')) {
                obj['accountOwnerEmail'] = ApiClient.convertToType(data['accountOwnerEmail'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('armSkuName')) {
                obj['armSkuName'] = ApiClient.convertToType(data['armSkuName'], 'String');
            }
            if (data.hasOwnProperty('billingFrequency')) {
                obj['billingFrequency'] = ApiClient.convertToType(data['billingFrequency'], 'String');
            }
            if (data.hasOwnProperty('costCenter')) {
                obj['costCenter'] = ApiClient.convertToType(data['costCenter'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('currentEnrollment')) {
                obj['currentEnrollment'] = ApiClient.convertToType(data['currentEnrollment'], 'String');
            }
            if (data.hasOwnProperty('departmentName')) {
                obj['departmentName'] = ApiClient.convertToType(data['departmentName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eventDate')) {
                obj['eventDate'] = ApiClient.convertToType(data['eventDate'], 'Date');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('purchasingEnrollment')) {
                obj['purchasingEnrollment'] = ApiClient.convertToType(data['purchasingEnrollment'], 'String');
            }
            if (data.hasOwnProperty('purchasingSubscriptionGuid')) {
                obj['purchasingSubscriptionGuid'] = ApiClient.convertToType(data['purchasingSubscriptionGuid'], 'String');
            }
            if (data.hasOwnProperty('purchasingSubscriptionName')) {
                obj['purchasingSubscriptionName'] = ApiClient.convertToType(data['purchasingSubscriptionName'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('reservationOrderId')) {
                obj['reservationOrderId'] = ApiClient.convertToType(data['reservationOrderId'], 'String');
            }
            if (data.hasOwnProperty('reservationOrderName')) {
                obj['reservationOrderName'] = ApiClient.convertToType(data['reservationOrderName'], 'String');
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = ApiClient.convertToType(data['term'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReservationTransactionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReservationTransactionProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['accountOwnerEmail'] && !(typeof data['accountOwnerEmail'] === 'string' || data['accountOwnerEmail'] instanceof String)) {
            throw new Error("Expected the field `accountOwnerEmail` to be a primitive type in the JSON string but got " + data['accountOwnerEmail']);
        }
        // ensure the json data is a string
        if (data['armSkuName'] && !(typeof data['armSkuName'] === 'string' || data['armSkuName'] instanceof String)) {
            throw new Error("Expected the field `armSkuName` to be a primitive type in the JSON string but got " + data['armSkuName']);
        }
        // ensure the json data is a string
        if (data['billingFrequency'] && !(typeof data['billingFrequency'] === 'string' || data['billingFrequency'] instanceof String)) {
            throw new Error("Expected the field `billingFrequency` to be a primitive type in the JSON string but got " + data['billingFrequency']);
        }
        // ensure the json data is a string
        if (data['costCenter'] && !(typeof data['costCenter'] === 'string' || data['costCenter'] instanceof String)) {
            throw new Error("Expected the field `costCenter` to be a primitive type in the JSON string but got " + data['costCenter']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['currentEnrollment'] && !(typeof data['currentEnrollment'] === 'string' || data['currentEnrollment'] instanceof String)) {
            throw new Error("Expected the field `currentEnrollment` to be a primitive type in the JSON string but got " + data['currentEnrollment']);
        }
        // ensure the json data is a string
        if (data['departmentName'] && !(typeof data['departmentName'] === 'string' || data['departmentName'] instanceof String)) {
            throw new Error("Expected the field `departmentName` to be a primitive type in the JSON string but got " + data['departmentName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['purchasingEnrollment'] && !(typeof data['purchasingEnrollment'] === 'string' || data['purchasingEnrollment'] instanceof String)) {
            throw new Error("Expected the field `purchasingEnrollment` to be a primitive type in the JSON string but got " + data['purchasingEnrollment']);
        }
        // ensure the json data is a string
        if (data['purchasingSubscriptionGuid'] && !(typeof data['purchasingSubscriptionGuid'] === 'string' || data['purchasingSubscriptionGuid'] instanceof String)) {
            throw new Error("Expected the field `purchasingSubscriptionGuid` to be a primitive type in the JSON string but got " + data['purchasingSubscriptionGuid']);
        }
        // ensure the json data is a string
        if (data['purchasingSubscriptionName'] && !(typeof data['purchasingSubscriptionName'] === 'string' || data['purchasingSubscriptionName'] instanceof String)) {
            throw new Error("Expected the field `purchasingSubscriptionName` to be a primitive type in the JSON string but got " + data['purchasingSubscriptionName']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['reservationOrderId'] && !(typeof data['reservationOrderId'] === 'string' || data['reservationOrderId'] instanceof String)) {
            throw new Error("Expected the field `reservationOrderId` to be a primitive type in the JSON string but got " + data['reservationOrderId']);
        }
        // ensure the json data is a string
        if (data['reservationOrderName'] && !(typeof data['reservationOrderName'] === 'string' || data['reservationOrderName'] instanceof String)) {
            throw new Error("Expected the field `reservationOrderName` to be a primitive type in the JSON string but got " + data['reservationOrderName']);
        }
        // ensure the json data is a string
        if (data['term'] && !(typeof data['term'] === 'string' || data['term'] instanceof String)) {
            throw new Error("Expected the field `term` to be a primitive type in the JSON string but got " + data['term']);
        }

        return true;
    }


}



/**
 * The name of the account that makes the transaction.
 * @member {String} accountName
 */
ReservationTransactionProperties.prototype['accountName'] = undefined;

/**
 * The email of the account owner that makes the transaction.
 * @member {String} accountOwnerEmail
 */
ReservationTransactionProperties.prototype['accountOwnerEmail'] = undefined;

/**
 * The charge of the transaction.
 * @member {Number} amount
 */
ReservationTransactionProperties.prototype['amount'] = undefined;

/**
 * This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
 * @member {String} armSkuName
 */
ReservationTransactionProperties.prototype['armSkuName'] = undefined;

/**
 * The billing frequency, which can be either one-time or recurring.
 * @member {String} billingFrequency
 */
ReservationTransactionProperties.prototype['billingFrequency'] = undefined;

/**
 * The cost center of this department if it is a department and a cost center is provided.
 * @member {String} costCenter
 */
ReservationTransactionProperties.prototype['costCenter'] = undefined;

/**
 * The ISO currency in which the transaction is charged, for example, USD.
 * @member {String} currency
 */
ReservationTransactionProperties.prototype['currency'] = undefined;

/**
 * The current enrollment.
 * @member {String} currentEnrollment
 */
ReservationTransactionProperties.prototype['currentEnrollment'] = undefined;

/**
 * The department name.
 * @member {String} departmentName
 */
ReservationTransactionProperties.prototype['departmentName'] = undefined;

/**
 * The description of the transaction.
 * @member {String} description
 */
ReservationTransactionProperties.prototype['description'] = undefined;

/**
 * The date of the transaction
 * @member {Date} eventDate
 */
ReservationTransactionProperties.prototype['eventDate'] = undefined;

/**
 * The type of the transaction (Purchase, Cancel, etc.)
 * @member {String} eventType
 */
ReservationTransactionProperties.prototype['eventType'] = undefined;

/**
 * The purchasing enrollment.
 * @member {String} purchasingEnrollment
 */
ReservationTransactionProperties.prototype['purchasingEnrollment'] = undefined;

/**
 * The subscription guid that makes the transaction.
 * @member {String} purchasingSubscriptionGuid
 */
ReservationTransactionProperties.prototype['purchasingSubscriptionGuid'] = undefined;

/**
 * The subscription name that makes the transaction.
 * @member {String} purchasingSubscriptionName
 */
ReservationTransactionProperties.prototype['purchasingSubscriptionName'] = undefined;

/**
 * The quantity of the transaction.
 * @member {Number} quantity
 */
ReservationTransactionProperties.prototype['quantity'] = undefined;

/**
 * The region of the transaction.
 * @member {String} region
 */
ReservationTransactionProperties.prototype['region'] = undefined;

/**
 * The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.
 * @member {String} reservationOrderId
 */
ReservationTransactionProperties.prototype['reservationOrderId'] = undefined;

/**
 * The name of the reservation order.
 * @member {String} reservationOrderName
 */
ReservationTransactionProperties.prototype['reservationOrderName'] = undefined;

/**
 * This is the term of the transaction.
 * @member {String} term
 */
ReservationTransactionProperties.prototype['term'] = undefined;






export default ReservationTransactionProperties;

