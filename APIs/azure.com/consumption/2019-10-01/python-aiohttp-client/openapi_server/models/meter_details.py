# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeterDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meter_category: str=None, meter_location: str=None, meter_name: str=None, meter_sub_category: str=None, pretax_standard_rate: float=None, service_name: str=None, service_tier: str=None, total_included_quantity: float=None, unit: str=None):
        """MeterDetails - a model defined in OpenAPI

        :param meter_category: The meter_category of this MeterDetails.
        :param meter_location: The meter_location of this MeterDetails.
        :param meter_name: The meter_name of this MeterDetails.
        :param meter_sub_category: The meter_sub_category of this MeterDetails.
        :param pretax_standard_rate: The pretax_standard_rate of this MeterDetails.
        :param service_name: The service_name of this MeterDetails.
        :param service_tier: The service_tier of this MeterDetails.
        :param total_included_quantity: The total_included_quantity of this MeterDetails.
        :param unit: The unit of this MeterDetails.
        """
        self.openapi_types = {
            'meter_category': str,
            'meter_location': str,
            'meter_name': str,
            'meter_sub_category': str,
            'pretax_standard_rate': float,
            'service_name': str,
            'service_tier': str,
            'total_included_quantity': float,
            'unit': str
        }

        self.attribute_map = {
            'meter_category': 'meterCategory',
            'meter_location': 'meterLocation',
            'meter_name': 'meterName',
            'meter_sub_category': 'meterSubCategory',
            'pretax_standard_rate': 'pretaxStandardRate',
            'service_name': 'serviceName',
            'service_tier': 'serviceTier',
            'total_included_quantity': 'totalIncludedQuantity',
            'unit': 'unit'
        }

        self._meter_category = meter_category
        self._meter_location = meter_location
        self._meter_name = meter_name
        self._meter_sub_category = meter_sub_category
        self._pretax_standard_rate = pretax_standard_rate
        self._service_name = service_name
        self._service_tier = service_tier
        self._total_included_quantity = total_included_quantity
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeterDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeterDetails of this MeterDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meter_category(self):
        """Gets the meter_category of this MeterDetails.

        The category of the meter, for example, 'Cloud services', 'Networking', etc..

        :return: The meter_category of this MeterDetails.
        :rtype: str
        """
        return self._meter_category

    @meter_category.setter
    def meter_category(self, meter_category):
        """Sets the meter_category of this MeterDetails.

        The category of the meter, for example, 'Cloud services', 'Networking', etc..

        :param meter_category: The meter_category of this MeterDetails.
        :type meter_category: str
        """

        self._meter_category = meter_category

    @property
    def meter_location(self):
        """Gets the meter_location of this MeterDetails.

        The location in which the Azure service is available.

        :return: The meter_location of this MeterDetails.
        :rtype: str
        """
        return self._meter_location

    @meter_location.setter
    def meter_location(self, meter_location):
        """Sets the meter_location of this MeterDetails.

        The location in which the Azure service is available.

        :param meter_location: The meter_location of this MeterDetails.
        :type meter_location: str
        """

        self._meter_location = meter_location

    @property
    def meter_name(self):
        """Gets the meter_name of this MeterDetails.

        The name of the meter, within the given meter category

        :return: The meter_name of this MeterDetails.
        :rtype: str
        """
        return self._meter_name

    @meter_name.setter
    def meter_name(self, meter_name):
        """Sets the meter_name of this MeterDetails.

        The name of the meter, within the given meter category

        :param meter_name: The meter_name of this MeterDetails.
        :type meter_name: str
        """

        self._meter_name = meter_name

    @property
    def meter_sub_category(self):
        """Gets the meter_sub_category of this MeterDetails.

        The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..

        :return: The meter_sub_category of this MeterDetails.
        :rtype: str
        """
        return self._meter_sub_category

    @meter_sub_category.setter
    def meter_sub_category(self, meter_sub_category):
        """Sets the meter_sub_category of this MeterDetails.

        The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..

        :param meter_sub_category: The meter_sub_category of this MeterDetails.
        :type meter_sub_category: str
        """

        self._meter_sub_category = meter_sub_category

    @property
    def pretax_standard_rate(self):
        """Gets the pretax_standard_rate of this MeterDetails.

        The pretax listing price.

        :return: The pretax_standard_rate of this MeterDetails.
        :rtype: float
        """
        return self._pretax_standard_rate

    @pretax_standard_rate.setter
    def pretax_standard_rate(self, pretax_standard_rate):
        """Sets the pretax_standard_rate of this MeterDetails.

        The pretax listing price.

        :param pretax_standard_rate: The pretax_standard_rate of this MeterDetails.
        :type pretax_standard_rate: float
        """

        self._pretax_standard_rate = pretax_standard_rate

    @property
    def service_name(self):
        """Gets the service_name of this MeterDetails.

        The name of the service.

        :return: The service_name of this MeterDetails.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this MeterDetails.

        The name of the service.

        :param service_name: The service_name of this MeterDetails.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def service_tier(self):
        """Gets the service_tier of this MeterDetails.

        The service tier.

        :return: The service_tier of this MeterDetails.
        :rtype: str
        """
        return self._service_tier

    @service_tier.setter
    def service_tier(self, service_tier):
        """Sets the service_tier of this MeterDetails.

        The service tier.

        :param service_tier: The service_tier of this MeterDetails.
        :type service_tier: str
        """

        self._service_tier = service_tier

    @property
    def total_included_quantity(self):
        """Gets the total_included_quantity of this MeterDetails.

        The total included quantity associated with the offer.

        :return: The total_included_quantity of this MeterDetails.
        :rtype: float
        """
        return self._total_included_quantity

    @total_included_quantity.setter
    def total_included_quantity(self, total_included_quantity):
        """Sets the total_included_quantity of this MeterDetails.

        The total included quantity associated with the offer.

        :param total_included_quantity: The total_included_quantity of this MeterDetails.
        :type total_included_quantity: float
        """

        self._total_included_quantity = total_included_quantity

    @property
    def unit(self):
        """Gets the unit of this MeterDetails.

        The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.

        :return: The unit of this MeterDetails.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this MeterDetails.

        The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.

        :param unit: The unit of this MeterDetails.
        :type unit: str
        """

        self._unit = unit
