# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.balance_properties_adjustment_details_inner import BalancePropertiesAdjustmentDetailsInner
from openapi_server.models.balance_properties_new_purchases_details_inner import BalancePropertiesNewPurchasesDetailsInner
from openapi_server import util


class BalanceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment_details: List[BalancePropertiesAdjustmentDetailsInner]=None, adjustments: float=None, azure_marketplace_service_charges: float=None, beginning_balance: float=None, billing_frequency: str=None, charges_billed_separately: float=None, currency: str=None, ending_balance: float=None, new_purchases: float=None, new_purchases_details: List[BalancePropertiesNewPurchasesDetailsInner]=None, price_hidden: bool=None, service_overage: float=None, total_overage: float=None, total_usage: float=None, utilized: float=None):
        """BalanceProperties - a model defined in OpenAPI

        :param adjustment_details: The adjustment_details of this BalanceProperties.
        :param adjustments: The adjustments of this BalanceProperties.
        :param azure_marketplace_service_charges: The azure_marketplace_service_charges of this BalanceProperties.
        :param beginning_balance: The beginning_balance of this BalanceProperties.
        :param billing_frequency: The billing_frequency of this BalanceProperties.
        :param charges_billed_separately: The charges_billed_separately of this BalanceProperties.
        :param currency: The currency of this BalanceProperties.
        :param ending_balance: The ending_balance of this BalanceProperties.
        :param new_purchases: The new_purchases of this BalanceProperties.
        :param new_purchases_details: The new_purchases_details of this BalanceProperties.
        :param price_hidden: The price_hidden of this BalanceProperties.
        :param service_overage: The service_overage of this BalanceProperties.
        :param total_overage: The total_overage of this BalanceProperties.
        :param total_usage: The total_usage of this BalanceProperties.
        :param utilized: The utilized of this BalanceProperties.
        """
        self.openapi_types = {
            'adjustment_details': List[BalancePropertiesAdjustmentDetailsInner],
            'adjustments': float,
            'azure_marketplace_service_charges': float,
            'beginning_balance': float,
            'billing_frequency': str,
            'charges_billed_separately': float,
            'currency': str,
            'ending_balance': float,
            'new_purchases': float,
            'new_purchases_details': List[BalancePropertiesNewPurchasesDetailsInner],
            'price_hidden': bool,
            'service_overage': float,
            'total_overage': float,
            'total_usage': float,
            'utilized': float
        }

        self.attribute_map = {
            'adjustment_details': 'adjustmentDetails',
            'adjustments': 'adjustments',
            'azure_marketplace_service_charges': 'azureMarketplaceServiceCharges',
            'beginning_balance': 'beginningBalance',
            'billing_frequency': 'billingFrequency',
            'charges_billed_separately': 'chargesBilledSeparately',
            'currency': 'currency',
            'ending_balance': 'endingBalance',
            'new_purchases': 'newPurchases',
            'new_purchases_details': 'newPurchasesDetails',
            'price_hidden': 'priceHidden',
            'service_overage': 'serviceOverage',
            'total_overage': 'totalOverage',
            'total_usage': 'totalUsage',
            'utilized': 'utilized'
        }

        self._adjustment_details = adjustment_details
        self._adjustments = adjustments
        self._azure_marketplace_service_charges = azure_marketplace_service_charges
        self._beginning_balance = beginning_balance
        self._billing_frequency = billing_frequency
        self._charges_billed_separately = charges_billed_separately
        self._currency = currency
        self._ending_balance = ending_balance
        self._new_purchases = new_purchases
        self._new_purchases_details = new_purchases_details
        self._price_hidden = price_hidden
        self._service_overage = service_overage
        self._total_overage = total_overage
        self._total_usage = total_usage
        self._utilized = utilized

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BalanceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BalanceProperties of this BalanceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment_details(self):
        """Gets the adjustment_details of this BalanceProperties.

        List of Adjustments (Promo credit, SIE credit etc.).

        :return: The adjustment_details of this BalanceProperties.
        :rtype: List[BalancePropertiesAdjustmentDetailsInner]
        """
        return self._adjustment_details

    @adjustment_details.setter
    def adjustment_details(self, adjustment_details):
        """Sets the adjustment_details of this BalanceProperties.

        List of Adjustments (Promo credit, SIE credit etc.).

        :param adjustment_details: The adjustment_details of this BalanceProperties.
        :type adjustment_details: List[BalancePropertiesAdjustmentDetailsInner]
        """

        self._adjustment_details = adjustment_details

    @property
    def adjustments(self):
        """Gets the adjustments of this BalanceProperties.

        Total adjustment amount.

        :return: The adjustments of this BalanceProperties.
        :rtype: float
        """
        return self._adjustments

    @adjustments.setter
    def adjustments(self, adjustments):
        """Sets the adjustments of this BalanceProperties.

        Total adjustment amount.

        :param adjustments: The adjustments of this BalanceProperties.
        :type adjustments: float
        """

        self._adjustments = adjustments

    @property
    def azure_marketplace_service_charges(self):
        """Gets the azure_marketplace_service_charges of this BalanceProperties.

        Total charges for Azure Marketplace.

        :return: The azure_marketplace_service_charges of this BalanceProperties.
        :rtype: float
        """
        return self._azure_marketplace_service_charges

    @azure_marketplace_service_charges.setter
    def azure_marketplace_service_charges(self, azure_marketplace_service_charges):
        """Sets the azure_marketplace_service_charges of this BalanceProperties.

        Total charges for Azure Marketplace.

        :param azure_marketplace_service_charges: The azure_marketplace_service_charges of this BalanceProperties.
        :type azure_marketplace_service_charges: float
        """

        self._azure_marketplace_service_charges = azure_marketplace_service_charges

    @property
    def beginning_balance(self):
        """Gets the beginning_balance of this BalanceProperties.

        The beginning balance for the billing period.

        :return: The beginning_balance of this BalanceProperties.
        :rtype: float
        """
        return self._beginning_balance

    @beginning_balance.setter
    def beginning_balance(self, beginning_balance):
        """Sets the beginning_balance of this BalanceProperties.

        The beginning balance for the billing period.

        :param beginning_balance: The beginning_balance of this BalanceProperties.
        :type beginning_balance: float
        """

        self._beginning_balance = beginning_balance

    @property
    def billing_frequency(self):
        """Gets the billing_frequency of this BalanceProperties.

        The billing frequency.

        :return: The billing_frequency of this BalanceProperties.
        :rtype: str
        """
        return self._billing_frequency

    @billing_frequency.setter
    def billing_frequency(self, billing_frequency):
        """Sets the billing_frequency of this BalanceProperties.

        The billing frequency.

        :param billing_frequency: The billing_frequency of this BalanceProperties.
        :type billing_frequency: str
        """
        allowed_values = ["Month", "Quarter", "Year"]  # noqa: E501
        if billing_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_frequency` ({0}), must be one of {1}"
                .format(billing_frequency, allowed_values)
            )

        self._billing_frequency = billing_frequency

    @property
    def charges_billed_separately(self):
        """Gets the charges_billed_separately of this BalanceProperties.

        Charges Billed separately.

        :return: The charges_billed_separately of this BalanceProperties.
        :rtype: float
        """
        return self._charges_billed_separately

    @charges_billed_separately.setter
    def charges_billed_separately(self, charges_billed_separately):
        """Sets the charges_billed_separately of this BalanceProperties.

        Charges Billed separately.

        :param charges_billed_separately: The charges_billed_separately of this BalanceProperties.
        :type charges_billed_separately: float
        """

        self._charges_billed_separately = charges_billed_separately

    @property
    def currency(self):
        """Gets the currency of this BalanceProperties.

        The ISO currency in which the meter is charged, for example, USD.

        :return: The currency of this BalanceProperties.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this BalanceProperties.

        The ISO currency in which the meter is charged, for example, USD.

        :param currency: The currency of this BalanceProperties.
        :type currency: str
        """

        self._currency = currency

    @property
    def ending_balance(self):
        """Gets the ending_balance of this BalanceProperties.

        The ending balance for the billing period (for open periods this will be updated daily).

        :return: The ending_balance of this BalanceProperties.
        :rtype: float
        """
        return self._ending_balance

    @ending_balance.setter
    def ending_balance(self, ending_balance):
        """Sets the ending_balance of this BalanceProperties.

        The ending balance for the billing period (for open periods this will be updated daily).

        :param ending_balance: The ending_balance of this BalanceProperties.
        :type ending_balance: float
        """

        self._ending_balance = ending_balance

    @property
    def new_purchases(self):
        """Gets the new_purchases of this BalanceProperties.

        Total new purchase amount.

        :return: The new_purchases of this BalanceProperties.
        :rtype: float
        """
        return self._new_purchases

    @new_purchases.setter
    def new_purchases(self, new_purchases):
        """Sets the new_purchases of this BalanceProperties.

        Total new purchase amount.

        :param new_purchases: The new_purchases of this BalanceProperties.
        :type new_purchases: float
        """

        self._new_purchases = new_purchases

    @property
    def new_purchases_details(self):
        """Gets the new_purchases_details of this BalanceProperties.

        List of new purchases.

        :return: The new_purchases_details of this BalanceProperties.
        :rtype: List[BalancePropertiesNewPurchasesDetailsInner]
        """
        return self._new_purchases_details

    @new_purchases_details.setter
    def new_purchases_details(self, new_purchases_details):
        """Sets the new_purchases_details of this BalanceProperties.

        List of new purchases.

        :param new_purchases_details: The new_purchases_details of this BalanceProperties.
        :type new_purchases_details: List[BalancePropertiesNewPurchasesDetailsInner]
        """

        self._new_purchases_details = new_purchases_details

    @property
    def price_hidden(self):
        """Gets the price_hidden of this BalanceProperties.

        Price is hidden or not.

        :return: The price_hidden of this BalanceProperties.
        :rtype: bool
        """
        return self._price_hidden

    @price_hidden.setter
    def price_hidden(self, price_hidden):
        """Sets the price_hidden of this BalanceProperties.

        Price is hidden or not.

        :param price_hidden: The price_hidden of this BalanceProperties.
        :type price_hidden: bool
        """

        self._price_hidden = price_hidden

    @property
    def service_overage(self):
        """Gets the service_overage of this BalanceProperties.

        Overage for Azure services.

        :return: The service_overage of this BalanceProperties.
        :rtype: float
        """
        return self._service_overage

    @service_overage.setter
    def service_overage(self, service_overage):
        """Sets the service_overage of this BalanceProperties.

        Overage for Azure services.

        :param service_overage: The service_overage of this BalanceProperties.
        :type service_overage: float
        """

        self._service_overage = service_overage

    @property
    def total_overage(self):
        """Gets the total_overage of this BalanceProperties.

        serviceOverage + chargesBilledSeparately.

        :return: The total_overage of this BalanceProperties.
        :rtype: float
        """
        return self._total_overage

    @total_overage.setter
    def total_overage(self, total_overage):
        """Sets the total_overage of this BalanceProperties.

        serviceOverage + chargesBilledSeparately.

        :param total_overage: The total_overage of this BalanceProperties.
        :type total_overage: float
        """

        self._total_overage = total_overage

    @property
    def total_usage(self):
        """Gets the total_usage of this BalanceProperties.

        Azure service commitment + total Overage.

        :return: The total_usage of this BalanceProperties.
        :rtype: float
        """
        return self._total_usage

    @total_usage.setter
    def total_usage(self, total_usage):
        """Sets the total_usage of this BalanceProperties.

        Azure service commitment + total Overage.

        :param total_usage: The total_usage of this BalanceProperties.
        :type total_usage: float
        """

        self._total_usage = total_usage

    @property
    def utilized(self):
        """Gets the utilized of this BalanceProperties.

        Total Commitment usage.

        :return: The utilized of this BalanceProperties.
        :rtype: float
        """
        return self._utilized

    @utilized.setter
    def utilized(self, utilized):
        """Sets the utilized of this BalanceProperties.

        Total Commitment usage.

        :param utilized: The utilized of this BalanceProperties.
        :type utilized: float
        """

        self._utilized = utilized
