/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the usage detail.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:54.368188-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModernUsageDetailProperties {
  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private String additionalInfo;

  public static final String SERIALIZED_NAME_BILLING_ACCOUNT_ID = "billingAccountId";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT_ID)
  private String billingAccountId;

  public static final String SERIALIZED_NAME_BILLING_ACCOUNT_NAME = "billingAccountName";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT_NAME)
  private String billingAccountName;

  public static final String SERIALIZED_NAME_BILLING_CURRENCY_CODE = "billingCurrencyCode";
  @SerializedName(SERIALIZED_NAME_BILLING_CURRENCY_CODE)
  private String billingCurrencyCode;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_END_DATE = "billingPeriodEndDate";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_END_DATE)
  private OffsetDateTime billingPeriodEndDate;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_START_DATE = "billingPeriodStartDate";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_START_DATE)
  private OffsetDateTime billingPeriodStartDate;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_ID = "billingProfileId";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_ID)
  private String billingProfileId;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_NAME = "billingProfileName";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_NAME)
  private String billingProfileName;

  public static final String SERIALIZED_NAME_CHARGE_TYPE = "chargeType";
  @SerializedName(SERIALIZED_NAME_CHARGE_TYPE)
  private String chargeType;

  public static final String SERIALIZED_NAME_CONSUMED_SERVICE = "consumedService";
  @SerializedName(SERIALIZED_NAME_CONSUMED_SERVICE)
  private String consumedService;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private String costCenter;

  public static final String SERIALIZED_NAME_COST_IN_BILLING_CURRENCY = "costInBillingCurrency";
  @SerializedName(SERIALIZED_NAME_COST_IN_BILLING_CURRENCY)
  private BigDecimal costInBillingCurrency;

  public static final String SERIALIZED_NAME_COST_IN_PRICING_CURRENCY = "costInPricingCurrency";
  @SerializedName(SERIALIZED_NAME_COST_IN_PRICING_CURRENCY)
  private BigDecimal costInPricingCurrency;

  public static final String SERIALIZED_NAME_COST_IN_U_S_D = "costInUSD";
  @SerializedName(SERIALIZED_NAME_COST_IN_U_S_D)
  private BigDecimal costInUSD;

  public static final String SERIALIZED_NAME_CUSTOMER_NAME = "customerName";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NAME)
  private String customerName;

  public static final String SERIALIZED_NAME_CUSTOMER_TENANT_ID = "customerTenantId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TENANT_ID)
  private String customerTenantId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private String exchangeRate;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE_DATE = "exchangeRateDate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE_DATE)
  private OffsetDateTime exchangeRateDate;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE_PRICING_TO_BILLING = "exchangeRatePricingToBilling";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE_PRICING_TO_BILLING)
  private BigDecimal exchangeRatePricingToBilling;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "instanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_ID = "invoiceSectionId";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_ID)
  private String invoiceSectionId;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_NAME = "invoiceSectionName";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_NAME)
  private String invoiceSectionName;

  public static final String SERIALIZED_NAME_IS_AZURE_CREDIT_ELIGIBLE = "isAzureCreditEligible";
  @SerializedName(SERIALIZED_NAME_IS_AZURE_CREDIT_ELIGIBLE)
  private Boolean isAzureCreditEligible;

  public static final String SERIALIZED_NAME_MARKET_PRICE = "marketPrice";
  @SerializedName(SERIALIZED_NAME_MARKET_PRICE)
  private BigDecimal marketPrice;

  public static final String SERIALIZED_NAME_METER_CATEGORY = "meterCategory";
  @SerializedName(SERIALIZED_NAME_METER_CATEGORY)
  private String meterCategory;

  public static final String SERIALIZED_NAME_METER_ID = "meterId";
  @SerializedName(SERIALIZED_NAME_METER_ID)
  private UUID meterId;

  public static final String SERIALIZED_NAME_METER_NAME = "meterName";
  @SerializedName(SERIALIZED_NAME_METER_NAME)
  private String meterName;

  public static final String SERIALIZED_NAME_METER_REGION = "meterRegion";
  @SerializedName(SERIALIZED_NAME_METER_REGION)
  private String meterRegion;

  public static final String SERIALIZED_NAME_METER_SUB_CATEGORY = "meterSubCategory";
  @SerializedName(SERIALIZED_NAME_METER_SUB_CATEGORY)
  private String meterSubCategory;

  public static final String SERIALIZED_NAME_PARTNER_EARNED_CREDIT_APPLIED = "partnerEarnedCreditApplied";
  @SerializedName(SERIALIZED_NAME_PARTNER_EARNED_CREDIT_APPLIED)
  private String partnerEarnedCreditApplied;

  public static final String SERIALIZED_NAME_PARTNER_EARNED_CREDIT_RATE = "partnerEarnedCreditRate";
  @SerializedName(SERIALIZED_NAME_PARTNER_EARNED_CREDIT_RATE)
  private BigDecimal partnerEarnedCreditRate;

  public static final String SERIALIZED_NAME_PARTNER_NAME = "partnerName";
  @SerializedName(SERIALIZED_NAME_PARTNER_NAME)
  private String partnerName;

  public static final String SERIALIZED_NAME_PARTNER_TENANT_ID = "partnerTenantId";
  @SerializedName(SERIALIZED_NAME_PARTNER_TENANT_ID)
  private String partnerTenantId;

  public static final String SERIALIZED_NAME_PAYG_COST_IN_BILLING_CURRENCY = "paygCostInBillingCurrency";
  @SerializedName(SERIALIZED_NAME_PAYG_COST_IN_BILLING_CURRENCY)
  private BigDecimal paygCostInBillingCurrency;

  public static final String SERIALIZED_NAME_PAYG_COST_IN_U_S_D = "paygCostInUSD";
  @SerializedName(SERIALIZED_NAME_PAYG_COST_IN_U_S_D)
  private BigDecimal paygCostInUSD;

  public static final String SERIALIZED_NAME_PREVIOUS_INVOICE_ID = "previousInvoiceId";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_INVOICE_ID)
  private String previousInvoiceId;

  public static final String SERIALIZED_NAME_PRICING_CURRENCY_CODE = "pricingCurrencyCode";
  @SerializedName(SERIALIZED_NAME_PRICING_CURRENCY_CODE)
  private String pricingCurrencyCode;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private String product;

  public static final String SERIALIZED_NAME_PRODUCT_IDENTIFIER = "productIdentifier";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IDENTIFIER)
  private String productIdentifier;

  public static final String SERIALIZED_NAME_PRODUCT_ORDER_ID = "productOrderId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ORDER_ID)
  private String productOrderId;

  public static final String SERIALIZED_NAME_PRODUCT_ORDER_NAME = "productOrderName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ORDER_NAME)
  private String productOrderName;

  public static final String SERIALIZED_NAME_PUBLISHER_ID = "publisherId";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_ID)
  private String publisherId;

  public static final String SERIALIZED_NAME_PUBLISHER_NAME = "publisherName";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_NAME)
  private String publisherName;

  public static final String SERIALIZED_NAME_PUBLISHER_TYPE = "publisherType";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_TYPE)
  private String publisherType;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_RESELLER_MPN_ID = "resellerMpnId";
  @SerializedName(SERIALIZED_NAME_RESELLER_MPN_ID)
  private String resellerMpnId;

  public static final String SERIALIZED_NAME_RESELLER_NAME = "resellerName";
  @SerializedName(SERIALIZED_NAME_RESELLER_NAME)
  private String resellerName;

  public static final String SERIALIZED_NAME_RESERVATION_ID = "reservationId";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ID)
  private String reservationId;

  public static final String SERIALIZED_NAME_RESERVATION_NAME = "reservationName";
  @SerializedName(SERIALIZED_NAME_RESERVATION_NAME)
  private String reservationName;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resourceGroup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  public static final String SERIALIZED_NAME_RESOURCE_LOCATION = "resourceLocation";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCATION)
  private String resourceLocation;

  public static final String SERIALIZED_NAME_RESOURCE_LOCATION_NORMALIZED = "resourceLocationNormalized";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCATION_NORMALIZED)
  private String resourceLocationNormalized;

  public static final String SERIALIZED_NAME_SERVICE_FAMILY = "serviceFamily";
  @SerializedName(SERIALIZED_NAME_SERVICE_FAMILY)
  private String serviceFamily;

  public static final String SERIALIZED_NAME_SERVICE_INFO1 = "serviceInfo1";
  @SerializedName(SERIALIZED_NAME_SERVICE_INFO1)
  private String serviceInfo1;

  public static final String SERIALIZED_NAME_SERVICE_INFO2 = "serviceInfo2";
  @SerializedName(SERIALIZED_NAME_SERVICE_INFO2)
  private String serviceInfo2;

  public static final String SERIALIZED_NAME_SERVICE_PERIOD_END_DATE = "servicePeriodEndDate";
  @SerializedName(SERIALIZED_NAME_SERVICE_PERIOD_END_DATE)
  private OffsetDateTime servicePeriodEndDate;

  public static final String SERIALIZED_NAME_SERVICE_PERIOD_START_DATE = "servicePeriodStartDate";
  @SerializedName(SERIALIZED_NAME_SERVICE_PERIOD_START_DATE)
  private OffsetDateTime servicePeriodStartDate;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_GUID = "subscriptionGuid";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_GUID)
  private String subscriptionGuid;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_NAME = "subscriptionName";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_NAME)
  private String subscriptionName;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "unitOfMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private String unitOfMeasure;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private BigDecimal unitPrice;

  public ModernUsageDetailProperties() {
  }

  public ModernUsageDetailProperties(
     String additionalInfo, 
     String billingAccountId, 
     String billingAccountName, 
     String billingCurrencyCode, 
     OffsetDateTime billingPeriodEndDate, 
     OffsetDateTime billingPeriodStartDate, 
     String billingProfileId, 
     String billingProfileName, 
     String chargeType, 
     String consumedService, 
     String costCenter, 
     BigDecimal costInBillingCurrency, 
     BigDecimal costInPricingCurrency, 
     BigDecimal costInUSD, 
     String customerName, 
     String customerTenantId, 
     OffsetDateTime date, 
     String exchangeRate, 
     OffsetDateTime exchangeRateDate, 
     BigDecimal exchangeRatePricingToBilling, 
     String frequency, 
     String instanceName, 
     String invoiceId, 
     String invoiceSectionId, 
     String invoiceSectionName, 
     Boolean isAzureCreditEligible, 
     BigDecimal marketPrice, 
     String meterCategory, 
     UUID meterId, 
     String meterName, 
     String meterRegion, 
     String meterSubCategory, 
     String partnerEarnedCreditApplied, 
     BigDecimal partnerEarnedCreditRate, 
     String partnerName, 
     String partnerTenantId, 
     BigDecimal paygCostInBillingCurrency, 
     BigDecimal paygCostInUSD, 
     String previousInvoiceId, 
     String pricingCurrencyCode, 
     String product, 
     String productIdentifier, 
     String productOrderId, 
     String productOrderName, 
     String publisherId, 
     String publisherName, 
     String publisherType, 
     BigDecimal quantity, 
     String resellerMpnId, 
     String resellerName, 
     String reservationId, 
     String reservationName, 
     String resourceGroup, 
     String resourceLocation, 
     String resourceLocationNormalized, 
     String serviceFamily, 
     String serviceInfo1, 
     String serviceInfo2, 
     OffsetDateTime servicePeriodEndDate, 
     OffsetDateTime servicePeriodStartDate, 
     String subscriptionGuid, 
     String subscriptionName, 
     String term, 
     String unitOfMeasure, 
     BigDecimal unitPrice
  ) {
    this();
    this.additionalInfo = additionalInfo;
    this.billingAccountId = billingAccountId;
    this.billingAccountName = billingAccountName;
    this.billingCurrencyCode = billingCurrencyCode;
    this.billingPeriodEndDate = billingPeriodEndDate;
    this.billingPeriodStartDate = billingPeriodStartDate;
    this.billingProfileId = billingProfileId;
    this.billingProfileName = billingProfileName;
    this.chargeType = chargeType;
    this.consumedService = consumedService;
    this.costCenter = costCenter;
    this.costInBillingCurrency = costInBillingCurrency;
    this.costInPricingCurrency = costInPricingCurrency;
    this.costInUSD = costInUSD;
    this.customerName = customerName;
    this.customerTenantId = customerTenantId;
    this.date = date;
    this.exchangeRate = exchangeRate;
    this.exchangeRateDate = exchangeRateDate;
    this.exchangeRatePricingToBilling = exchangeRatePricingToBilling;
    this.frequency = frequency;
    this.instanceName = instanceName;
    this.invoiceId = invoiceId;
    this.invoiceSectionId = invoiceSectionId;
    this.invoiceSectionName = invoiceSectionName;
    this.isAzureCreditEligible = isAzureCreditEligible;
    this.marketPrice = marketPrice;
    this.meterCategory = meterCategory;
    this.meterId = meterId;
    this.meterName = meterName;
    this.meterRegion = meterRegion;
    this.meterSubCategory = meterSubCategory;
    this.partnerEarnedCreditApplied = partnerEarnedCreditApplied;
    this.partnerEarnedCreditRate = partnerEarnedCreditRate;
    this.partnerName = partnerName;
    this.partnerTenantId = partnerTenantId;
    this.paygCostInBillingCurrency = paygCostInBillingCurrency;
    this.paygCostInUSD = paygCostInUSD;
    this.previousInvoiceId = previousInvoiceId;
    this.pricingCurrencyCode = pricingCurrencyCode;
    this.product = product;
    this.productIdentifier = productIdentifier;
    this.productOrderId = productOrderId;
    this.productOrderName = productOrderName;
    this.publisherId = publisherId;
    this.publisherName = publisherName;
    this.publisherType = publisherType;
    this.quantity = quantity;
    this.resellerMpnId = resellerMpnId;
    this.resellerName = resellerName;
    this.reservationId = reservationId;
    this.reservationName = reservationName;
    this.resourceGroup = resourceGroup;
    this.resourceLocation = resourceLocation;
    this.resourceLocationNormalized = resourceLocationNormalized;
    this.serviceFamily = serviceFamily;
    this.serviceInfo1 = serviceInfo1;
    this.serviceInfo2 = serviceInfo2;
    this.servicePeriodEndDate = servicePeriodEndDate;
    this.servicePeriodStartDate = servicePeriodStartDate;
    this.subscriptionGuid = subscriptionGuid;
    this.subscriptionName = subscriptionName;
    this.term = term;
    this.unitOfMeasure = unitOfMeasure;
    this.unitPrice = unitPrice;
  }

  /**
   * Additional details of this usage item. Use this field to get usage line item specific details such as the actual VM Size (ServiceType) or the ratio in which the reservation discount is applied.
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  public String getAdditionalInfo() {
    return additionalInfo;
  }



  /**
   * Billing Account identifier.
   * @return billingAccountId
   */
  @javax.annotation.Nullable
  public String getBillingAccountId() {
    return billingAccountId;
  }



  /**
   * Name of the Billing Account.
   * @return billingAccountName
   */
  @javax.annotation.Nullable
  public String getBillingAccountName() {
    return billingAccountName;
  }



  /**
   * The currency defining the billed cost.
   * @return billingCurrencyCode
   */
  @javax.annotation.Nullable
  public String getBillingCurrencyCode() {
    return billingCurrencyCode;
  }



  /**
   * Billing Period End Date as in the invoice.
   * @return billingPeriodEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBillingPeriodEndDate() {
    return billingPeriodEndDate;
  }



  /**
   * Billing Period Start Date as in the invoice.
   * @return billingPeriodStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBillingPeriodStartDate() {
    return billingPeriodStartDate;
  }



  /**
   * Identifier for the billing profile that groups costs across invoices in the a singular billing currency across across the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases like SaaS, Marketplace, RI, etc.
   * @return billingProfileId
   */
  @javax.annotation.Nullable
  public String getBillingProfileId() {
    return billingProfileId;
  }



  /**
   * Name of the billing profile that groups costs across invoices in the a singular billing currency across across the customers who have onboarded the Microsoft customer agreement and the customers in CSP who have made entitlement purchases like SaaS, Marketplace, RI, etc.
   * @return billingProfileName
   */
  @javax.annotation.Nullable
  public String getBillingProfileName() {
    return billingProfileName;
  }



  /**
   * Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
   * @return chargeType
   */
  @javax.annotation.Nullable
  public String getChargeType() {
    return chargeType;
  }



  /**
   * Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is not provided for marketplace usage.
   * @return consumedService
   */
  @javax.annotation.Nullable
  public String getConsumedService() {
    return consumedService;
  }



  /**
   * The cost center of this department if it is a department and a cost center is provided.
   * @return costCenter
   */
  @javax.annotation.Nullable
  public String getCostCenter() {
    return costCenter;
  }



  /**
   * ExtendedCost or blended cost before tax in billed currency.
   * @return costInBillingCurrency
   */
  @javax.annotation.Nullable
  public BigDecimal getCostInBillingCurrency() {
    return costInBillingCurrency;
  }



  /**
   * ExtendedCost or blended cost before tax in pricing currency to correlate with prices.
   * @return costInPricingCurrency
   */
  @javax.annotation.Nullable
  public BigDecimal getCostInPricingCurrency() {
    return costInPricingCurrency;
  }



  /**
   * Estimated extendedCost or blended cost before tax in USD.
   * @return costInUSD
   */
  @javax.annotation.Nullable
  public BigDecimal getCostInUSD() {
    return costInUSD;
  }



  /**
   * Name of the customer&#39;s AAD tenant.
   * @return customerName
   */
  @javax.annotation.Nullable
  public String getCustomerName() {
    return customerName;
  }



  /**
   * Identifier of the customer&#39;s AAD tenant.
   * @return customerTenantId
   */
  @javax.annotation.Nullable
  public String getCustomerTenantId() {
    return customerTenantId;
  }



  /**
   * Date for the usage record.
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }



  /**
   * Exchange rate used in conversion from pricing currency to billing currency.
   * @return exchangeRate
   */
  @javax.annotation.Nullable
  public String getExchangeRate() {
    return exchangeRate;
  }



  /**
   * Date on which exchange rate used in conversion from pricing currency to billing currency.
   * @return exchangeRateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExchangeRateDate() {
    return exchangeRateDate;
  }



  /**
   * Exchange Rate from pricing currency to billing currency.
   * @return exchangeRatePricingToBilling
   */
  @javax.annotation.Nullable
  public BigDecimal getExchangeRatePricingToBilling() {
    return exchangeRatePricingToBilling;
  }



  /**
   * Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees which recur every month, and UsageBased for charges based on how much a service is used.
   * @return frequency
   */
  @javax.annotation.Nullable
  public String getFrequency() {
    return frequency;
  }



  /**
   * Instance Name.
   * @return instanceName
   */
  @javax.annotation.Nullable
  public String getInstanceName() {
    return instanceName;
  }



  /**
   * Invoice ID as on the invoice where the specific transaction appears.
   * @return invoiceId
   */
  @javax.annotation.Nullable
  public String getInvoiceId() {
    return invoiceId;
  }



  /**
   * Identifier of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded by partners.
   * @return invoiceSectionId
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionId() {
    return invoiceSectionId;
  }



  /**
   * Name of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded by partners.
   * @return invoiceSectionName
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionName() {
    return invoiceSectionName;
  }



  /**
   * Determines if the cost is eligible to be paid for using Azure credits.
   * @return isAzureCreditEligible
   */
  @javax.annotation.Nullable
  public Boolean getIsAzureCreditEligible() {
    return isAzureCreditEligible;
  }



  /**
   * Market Price that&#39;s charged for the usage.
   * @return marketPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getMarketPrice() {
    return marketPrice;
  }



  /**
   * Identifies the top-level service for the usage.
   * @return meterCategory
   */
  @javax.annotation.Nullable
  public String getMeterCategory() {
    return meterCategory;
  }



  /**
   * The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for which the reservation was purchased. For the actual VM Size for which the reservation is purchased see productOrderName.
   * @return meterId
   */
  @javax.annotation.Nullable
  public UUID getMeterId() {
    return meterId;
  }



  /**
   * Identifies the name of the meter against which consumption is measured.
   * @return meterName
   */
  @javax.annotation.Nullable
  public String getMeterName() {
    return meterName;
  }



  /**
   * Identifies the location of the datacenter for certain services that are priced based on datacenter location.
   * @return meterRegion
   */
  @javax.annotation.Nullable
  public String getMeterRegion() {
    return meterRegion;
  }



  /**
   * Defines the type or sub-category of Azure service that can affect the rate.
   * @return meterSubCategory
   */
  @javax.annotation.Nullable
  public String getMeterSubCategory() {
    return meterSubCategory;
  }



  /**
   * Flag to indicate if partner earned credit has been applied or not.
   * @return partnerEarnedCreditApplied
   */
  @javax.annotation.Nullable
  public String getPartnerEarnedCreditApplied() {
    return partnerEarnedCreditApplied;
  }



  /**
   * Rate of discount applied if there is a partner earned credit (PEC) based on partner admin link access.
   * @return partnerEarnedCreditRate
   */
  @javax.annotation.Nullable
  public BigDecimal getPartnerEarnedCreditRate() {
    return partnerEarnedCreditRate;
  }



  /**
   * Name of the partner&#39; AAD tenant.
   * @return partnerName
   */
  @javax.annotation.Nullable
  public String getPartnerName() {
    return partnerName;
  }



  /**
   * Identifier for the partner&#39;s AAD tenant.
   * @return partnerTenantId
   */
  @javax.annotation.Nullable
  public String getPartnerTenantId() {
    return partnerTenantId;
  }



  /**
   * The amount of PayG cost before tax in billing currency.
   * @return paygCostInBillingCurrency
   */
  @javax.annotation.Nullable
  public BigDecimal getPaygCostInBillingCurrency() {
    return paygCostInBillingCurrency;
  }



  /**
   * The amount of PayG cost before tax in US Dollar currency.
   * @return paygCostInUSD
   */
  @javax.annotation.Nullable
  public BigDecimal getPaygCostInUSD() {
    return paygCostInUSD;
  }



  /**
   * Reference to an original invoice there is a refund (negative cost). This is populated only when there is a refund.
   * @return previousInvoiceId
   */
  @javax.annotation.Nullable
  public String getPreviousInvoiceId() {
    return previousInvoiceId;
  }



  /**
   * Pricing Billing Currency.
   * @return pricingCurrencyCode
   */
  @javax.annotation.Nullable
  public String getPricingCurrencyCode() {
    return pricingCurrencyCode;
  }



  /**
   * Name of the product that has accrued charges by consumption or purchase as listed in the invoice. Not available for Marketplace.
   * @return product
   */
  @javax.annotation.Nullable
  public String getProduct() {
    return product;
  }



  /**
   * Identifer for the product that has accrued charges by consumption or purchase . This is the concatenated key of productId and SKuId in partner center.
   * @return productIdentifier
   */
  @javax.annotation.Nullable
  public String getProductIdentifier() {
    return productIdentifier;
  }



  /**
   * The identifier for the asset or Azure plan name that the subscription belongs to. For example: Azure Plan. For reservations this is the Reservation Order ID.
   * @return productOrderId
   */
  @javax.annotation.Nullable
  public String getProductOrderId() {
    return productOrderId;
  }



  /**
   * Product Order Name. For reservations this is the SKU that was purchased.
   * @return productOrderName
   */
  @javax.annotation.Nullable
  public String getProductOrderName() {
    return productOrderName;
  }



  /**
   * Publisher Id.
   * @return publisherId
   */
  @javax.annotation.Nullable
  public String getPublisherId() {
    return publisherId;
  }



  /**
   * Name of the publisher of the service including Microsoft or Third Party publishers.
   * @return publisherName
   */
  @javax.annotation.Nullable
  public String getPublisherName() {
    return publisherName;
  }



  /**
   * Type of publisher that identifies if the publisher is first party, third party reseller or third party agency.
   * @return publisherType
   */
  @javax.annotation.Nullable
  public String getPublisherType() {
    return publisherType;
  }



  /**
   * Measure the quantity purchased or consumed.The amount of the meter used during the billing period.
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }



  /**
   * MPNId for the reseller associated with the subscription.
   * @return resellerMpnId
   */
  @javax.annotation.Nullable
  public String getResellerMpnId() {
    return resellerMpnId;
  }



  /**
   * Reseller Name.
   * @return resellerName
   */
  @javax.annotation.Nullable
  public String getResellerName() {
    return resellerName;
  }



  /**
   * ARM resource id of the reservation. Only applies to records relevant to reservations.
   * @return reservationId
   */
  @javax.annotation.Nullable
  public String getReservationId() {
    return reservationId;
  }



  /**
   * User provided display name of the reservation. Last known name for a particular day is populated in the daily data. Only applies to records relevant to reservations.
   * @return reservationName
   */
  @javax.annotation.Nullable
  public String getReservationName() {
    return reservationName;
  }



  /**
   * Name of the Azure resource group used for cohesive lifecycle management of resources.
   * @return resourceGroup
   */
  @javax.annotation.Nullable
  public String getResourceGroup() {
    return resourceGroup;
  }



  /**
   * Name of the resource location.
   * @return resourceLocation
   */
  @javax.annotation.Nullable
  public String getResourceLocation() {
    return resourceLocation;
  }



  /**
   * Resource Location Normalized.
   * @return resourceLocationNormalized
   */
  @javax.annotation.Nullable
  public String getResourceLocationNormalized() {
    return resourceLocationNormalized;
  }



  /**
   * List the service family for the product purchased or charged (Example: Storage ; Compute).
   * @return serviceFamily
   */
  @javax.annotation.Nullable
  public String getServiceFamily() {
    return serviceFamily;
  }



  /**
   * Service Info 1.
   * @return serviceInfo1
   */
  @javax.annotation.Nullable
  public String getServiceInfo1() {
    return serviceInfo1;
  }



  /**
   * Service Info 2.
   * @return serviceInfo2
   */
  @javax.annotation.Nullable
  public String getServiceInfo2() {
    return serviceInfo2;
  }



  /**
   * End date for the period when the service usage was rated for charges. The prices for Azure services are determined based on the rating period.
   * @return servicePeriodEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getServicePeriodEndDate() {
    return servicePeriodEndDate;
  }



  /**
   * Start date for the rating period when the service usage was rated for charges. The prices for Azure services are determined for the rating period.
   * @return servicePeriodStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getServicePeriodStartDate() {
    return servicePeriodStartDate;
  }



  /**
   * Unique Microsoft generated identifier for the Azure Subscription.
   * @return subscriptionGuid
   */
  @javax.annotation.Nullable
  public String getSubscriptionGuid() {
    return subscriptionGuid;
  }



  /**
   * Name of the Azure Subscription.
   * @return subscriptionName
   */
  @javax.annotation.Nullable
  public String getSubscriptionName() {
    return subscriptionName;
  }



  /**
   * Term (in months). Displays the term for the validity of the offer. For example. In case of reserved instances it displays 12 months for yearly term of reserved instance. For one time purchases or recurring purchases, the terms displays 1 month; This is not applicable for Azure consumption.
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }



  /**
   * Identifies the Unit that the service is charged in. For example, GB, hours, 10,000 s.
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }



  /**
   * Unit Price is the price applicable to you. (your EA or other contract price).
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getUnitPrice() {
    return unitPrice;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModernUsageDetailProperties modernUsageDetailProperties = (ModernUsageDetailProperties) o;
    return Objects.equals(this.additionalInfo, modernUsageDetailProperties.additionalInfo) &&
        Objects.equals(this.billingAccountId, modernUsageDetailProperties.billingAccountId) &&
        Objects.equals(this.billingAccountName, modernUsageDetailProperties.billingAccountName) &&
        Objects.equals(this.billingCurrencyCode, modernUsageDetailProperties.billingCurrencyCode) &&
        Objects.equals(this.billingPeriodEndDate, modernUsageDetailProperties.billingPeriodEndDate) &&
        Objects.equals(this.billingPeriodStartDate, modernUsageDetailProperties.billingPeriodStartDate) &&
        Objects.equals(this.billingProfileId, modernUsageDetailProperties.billingProfileId) &&
        Objects.equals(this.billingProfileName, modernUsageDetailProperties.billingProfileName) &&
        Objects.equals(this.chargeType, modernUsageDetailProperties.chargeType) &&
        Objects.equals(this.consumedService, modernUsageDetailProperties.consumedService) &&
        Objects.equals(this.costCenter, modernUsageDetailProperties.costCenter) &&
        Objects.equals(this.costInBillingCurrency, modernUsageDetailProperties.costInBillingCurrency) &&
        Objects.equals(this.costInPricingCurrency, modernUsageDetailProperties.costInPricingCurrency) &&
        Objects.equals(this.costInUSD, modernUsageDetailProperties.costInUSD) &&
        Objects.equals(this.customerName, modernUsageDetailProperties.customerName) &&
        Objects.equals(this.customerTenantId, modernUsageDetailProperties.customerTenantId) &&
        Objects.equals(this.date, modernUsageDetailProperties.date) &&
        Objects.equals(this.exchangeRate, modernUsageDetailProperties.exchangeRate) &&
        Objects.equals(this.exchangeRateDate, modernUsageDetailProperties.exchangeRateDate) &&
        Objects.equals(this.exchangeRatePricingToBilling, modernUsageDetailProperties.exchangeRatePricingToBilling) &&
        Objects.equals(this.frequency, modernUsageDetailProperties.frequency) &&
        Objects.equals(this.instanceName, modernUsageDetailProperties.instanceName) &&
        Objects.equals(this.invoiceId, modernUsageDetailProperties.invoiceId) &&
        Objects.equals(this.invoiceSectionId, modernUsageDetailProperties.invoiceSectionId) &&
        Objects.equals(this.invoiceSectionName, modernUsageDetailProperties.invoiceSectionName) &&
        Objects.equals(this.isAzureCreditEligible, modernUsageDetailProperties.isAzureCreditEligible) &&
        Objects.equals(this.marketPrice, modernUsageDetailProperties.marketPrice) &&
        Objects.equals(this.meterCategory, modernUsageDetailProperties.meterCategory) &&
        Objects.equals(this.meterId, modernUsageDetailProperties.meterId) &&
        Objects.equals(this.meterName, modernUsageDetailProperties.meterName) &&
        Objects.equals(this.meterRegion, modernUsageDetailProperties.meterRegion) &&
        Objects.equals(this.meterSubCategory, modernUsageDetailProperties.meterSubCategory) &&
        Objects.equals(this.partnerEarnedCreditApplied, modernUsageDetailProperties.partnerEarnedCreditApplied) &&
        Objects.equals(this.partnerEarnedCreditRate, modernUsageDetailProperties.partnerEarnedCreditRate) &&
        Objects.equals(this.partnerName, modernUsageDetailProperties.partnerName) &&
        Objects.equals(this.partnerTenantId, modernUsageDetailProperties.partnerTenantId) &&
        Objects.equals(this.paygCostInBillingCurrency, modernUsageDetailProperties.paygCostInBillingCurrency) &&
        Objects.equals(this.paygCostInUSD, modernUsageDetailProperties.paygCostInUSD) &&
        Objects.equals(this.previousInvoiceId, modernUsageDetailProperties.previousInvoiceId) &&
        Objects.equals(this.pricingCurrencyCode, modernUsageDetailProperties.pricingCurrencyCode) &&
        Objects.equals(this.product, modernUsageDetailProperties.product) &&
        Objects.equals(this.productIdentifier, modernUsageDetailProperties.productIdentifier) &&
        Objects.equals(this.productOrderId, modernUsageDetailProperties.productOrderId) &&
        Objects.equals(this.productOrderName, modernUsageDetailProperties.productOrderName) &&
        Objects.equals(this.publisherId, modernUsageDetailProperties.publisherId) &&
        Objects.equals(this.publisherName, modernUsageDetailProperties.publisherName) &&
        Objects.equals(this.publisherType, modernUsageDetailProperties.publisherType) &&
        Objects.equals(this.quantity, modernUsageDetailProperties.quantity) &&
        Objects.equals(this.resellerMpnId, modernUsageDetailProperties.resellerMpnId) &&
        Objects.equals(this.resellerName, modernUsageDetailProperties.resellerName) &&
        Objects.equals(this.reservationId, modernUsageDetailProperties.reservationId) &&
        Objects.equals(this.reservationName, modernUsageDetailProperties.reservationName) &&
        Objects.equals(this.resourceGroup, modernUsageDetailProperties.resourceGroup) &&
        Objects.equals(this.resourceLocation, modernUsageDetailProperties.resourceLocation) &&
        Objects.equals(this.resourceLocationNormalized, modernUsageDetailProperties.resourceLocationNormalized) &&
        Objects.equals(this.serviceFamily, modernUsageDetailProperties.serviceFamily) &&
        Objects.equals(this.serviceInfo1, modernUsageDetailProperties.serviceInfo1) &&
        Objects.equals(this.serviceInfo2, modernUsageDetailProperties.serviceInfo2) &&
        Objects.equals(this.servicePeriodEndDate, modernUsageDetailProperties.servicePeriodEndDate) &&
        Objects.equals(this.servicePeriodStartDate, modernUsageDetailProperties.servicePeriodStartDate) &&
        Objects.equals(this.subscriptionGuid, modernUsageDetailProperties.subscriptionGuid) &&
        Objects.equals(this.subscriptionName, modernUsageDetailProperties.subscriptionName) &&
        Objects.equals(this.term, modernUsageDetailProperties.term) &&
        Objects.equals(this.unitOfMeasure, modernUsageDetailProperties.unitOfMeasure) &&
        Objects.equals(this.unitPrice, modernUsageDetailProperties.unitPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInfo, billingAccountId, billingAccountName, billingCurrencyCode, billingPeriodEndDate, billingPeriodStartDate, billingProfileId, billingProfileName, chargeType, consumedService, costCenter, costInBillingCurrency, costInPricingCurrency, costInUSD, customerName, customerTenantId, date, exchangeRate, exchangeRateDate, exchangeRatePricingToBilling, frequency, instanceName, invoiceId, invoiceSectionId, invoiceSectionName, isAzureCreditEligible, marketPrice, meterCategory, meterId, meterName, meterRegion, meterSubCategory, partnerEarnedCreditApplied, partnerEarnedCreditRate, partnerName, partnerTenantId, paygCostInBillingCurrency, paygCostInUSD, previousInvoiceId, pricingCurrencyCode, product, productIdentifier, productOrderId, productOrderName, publisherId, publisherName, publisherType, quantity, resellerMpnId, resellerName, reservationId, reservationName, resourceGroup, resourceLocation, resourceLocationNormalized, serviceFamily, serviceInfo1, serviceInfo2, servicePeriodEndDate, servicePeriodStartDate, subscriptionGuid, subscriptionName, term, unitOfMeasure, unitPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModernUsageDetailProperties {\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    billingAccountId: ").append(toIndentedString(billingAccountId)).append("\n");
    sb.append("    billingAccountName: ").append(toIndentedString(billingAccountName)).append("\n");
    sb.append("    billingCurrencyCode: ").append(toIndentedString(billingCurrencyCode)).append("\n");
    sb.append("    billingPeriodEndDate: ").append(toIndentedString(billingPeriodEndDate)).append("\n");
    sb.append("    billingPeriodStartDate: ").append(toIndentedString(billingPeriodStartDate)).append("\n");
    sb.append("    billingProfileId: ").append(toIndentedString(billingProfileId)).append("\n");
    sb.append("    billingProfileName: ").append(toIndentedString(billingProfileName)).append("\n");
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    consumedService: ").append(toIndentedString(consumedService)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    costInBillingCurrency: ").append(toIndentedString(costInBillingCurrency)).append("\n");
    sb.append("    costInPricingCurrency: ").append(toIndentedString(costInPricingCurrency)).append("\n");
    sb.append("    costInUSD: ").append(toIndentedString(costInUSD)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    customerTenantId: ").append(toIndentedString(customerTenantId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    exchangeRateDate: ").append(toIndentedString(exchangeRateDate)).append("\n");
    sb.append("    exchangeRatePricingToBilling: ").append(toIndentedString(exchangeRatePricingToBilling)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    invoiceSectionId: ").append(toIndentedString(invoiceSectionId)).append("\n");
    sb.append("    invoiceSectionName: ").append(toIndentedString(invoiceSectionName)).append("\n");
    sb.append("    isAzureCreditEligible: ").append(toIndentedString(isAzureCreditEligible)).append("\n");
    sb.append("    marketPrice: ").append(toIndentedString(marketPrice)).append("\n");
    sb.append("    meterCategory: ").append(toIndentedString(meterCategory)).append("\n");
    sb.append("    meterId: ").append(toIndentedString(meterId)).append("\n");
    sb.append("    meterName: ").append(toIndentedString(meterName)).append("\n");
    sb.append("    meterRegion: ").append(toIndentedString(meterRegion)).append("\n");
    sb.append("    meterSubCategory: ").append(toIndentedString(meterSubCategory)).append("\n");
    sb.append("    partnerEarnedCreditApplied: ").append(toIndentedString(partnerEarnedCreditApplied)).append("\n");
    sb.append("    partnerEarnedCreditRate: ").append(toIndentedString(partnerEarnedCreditRate)).append("\n");
    sb.append("    partnerName: ").append(toIndentedString(partnerName)).append("\n");
    sb.append("    partnerTenantId: ").append(toIndentedString(partnerTenantId)).append("\n");
    sb.append("    paygCostInBillingCurrency: ").append(toIndentedString(paygCostInBillingCurrency)).append("\n");
    sb.append("    paygCostInUSD: ").append(toIndentedString(paygCostInUSD)).append("\n");
    sb.append("    previousInvoiceId: ").append(toIndentedString(previousInvoiceId)).append("\n");
    sb.append("    pricingCurrencyCode: ").append(toIndentedString(pricingCurrencyCode)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    productIdentifier: ").append(toIndentedString(productIdentifier)).append("\n");
    sb.append("    productOrderId: ").append(toIndentedString(productOrderId)).append("\n");
    sb.append("    productOrderName: ").append(toIndentedString(productOrderName)).append("\n");
    sb.append("    publisherId: ").append(toIndentedString(publisherId)).append("\n");
    sb.append("    publisherName: ").append(toIndentedString(publisherName)).append("\n");
    sb.append("    publisherType: ").append(toIndentedString(publisherType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    resellerMpnId: ").append(toIndentedString(resellerMpnId)).append("\n");
    sb.append("    resellerName: ").append(toIndentedString(resellerName)).append("\n");
    sb.append("    reservationId: ").append(toIndentedString(reservationId)).append("\n");
    sb.append("    reservationName: ").append(toIndentedString(reservationName)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    resourceLocation: ").append(toIndentedString(resourceLocation)).append("\n");
    sb.append("    resourceLocationNormalized: ").append(toIndentedString(resourceLocationNormalized)).append("\n");
    sb.append("    serviceFamily: ").append(toIndentedString(serviceFamily)).append("\n");
    sb.append("    serviceInfo1: ").append(toIndentedString(serviceInfo1)).append("\n");
    sb.append("    serviceInfo2: ").append(toIndentedString(serviceInfo2)).append("\n");
    sb.append("    servicePeriodEndDate: ").append(toIndentedString(servicePeriodEndDate)).append("\n");
    sb.append("    servicePeriodStartDate: ").append(toIndentedString(servicePeriodStartDate)).append("\n");
    sb.append("    subscriptionGuid: ").append(toIndentedString(subscriptionGuid)).append("\n");
    sb.append("    subscriptionName: ").append(toIndentedString(subscriptionName)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalInfo");
    openapiFields.add("billingAccountId");
    openapiFields.add("billingAccountName");
    openapiFields.add("billingCurrencyCode");
    openapiFields.add("billingPeriodEndDate");
    openapiFields.add("billingPeriodStartDate");
    openapiFields.add("billingProfileId");
    openapiFields.add("billingProfileName");
    openapiFields.add("chargeType");
    openapiFields.add("consumedService");
    openapiFields.add("costCenter");
    openapiFields.add("costInBillingCurrency");
    openapiFields.add("costInPricingCurrency");
    openapiFields.add("costInUSD");
    openapiFields.add("customerName");
    openapiFields.add("customerTenantId");
    openapiFields.add("date");
    openapiFields.add("exchangeRate");
    openapiFields.add("exchangeRateDate");
    openapiFields.add("exchangeRatePricingToBilling");
    openapiFields.add("frequency");
    openapiFields.add("instanceName");
    openapiFields.add("invoiceId");
    openapiFields.add("invoiceSectionId");
    openapiFields.add("invoiceSectionName");
    openapiFields.add("isAzureCreditEligible");
    openapiFields.add("marketPrice");
    openapiFields.add("meterCategory");
    openapiFields.add("meterId");
    openapiFields.add("meterName");
    openapiFields.add("meterRegion");
    openapiFields.add("meterSubCategory");
    openapiFields.add("partnerEarnedCreditApplied");
    openapiFields.add("partnerEarnedCreditRate");
    openapiFields.add("partnerName");
    openapiFields.add("partnerTenantId");
    openapiFields.add("paygCostInBillingCurrency");
    openapiFields.add("paygCostInUSD");
    openapiFields.add("previousInvoiceId");
    openapiFields.add("pricingCurrencyCode");
    openapiFields.add("product");
    openapiFields.add("productIdentifier");
    openapiFields.add("productOrderId");
    openapiFields.add("productOrderName");
    openapiFields.add("publisherId");
    openapiFields.add("publisherName");
    openapiFields.add("publisherType");
    openapiFields.add("quantity");
    openapiFields.add("resellerMpnId");
    openapiFields.add("resellerName");
    openapiFields.add("reservationId");
    openapiFields.add("reservationName");
    openapiFields.add("resourceGroup");
    openapiFields.add("resourceLocation");
    openapiFields.add("resourceLocationNormalized");
    openapiFields.add("serviceFamily");
    openapiFields.add("serviceInfo1");
    openapiFields.add("serviceInfo2");
    openapiFields.add("servicePeriodEndDate");
    openapiFields.add("servicePeriodStartDate");
    openapiFields.add("subscriptionGuid");
    openapiFields.add("subscriptionName");
    openapiFields.add("term");
    openapiFields.add("unitOfMeasure");
    openapiFields.add("unitPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModernUsageDetailProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModernUsageDetailProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModernUsageDetailProperties is not found in the empty JSON string", ModernUsageDetailProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModernUsageDetailProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModernUsageDetailProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) && !jsonObj.get("additionalInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
      }
      if ((jsonObj.get("billingAccountId") != null && !jsonObj.get("billingAccountId").isJsonNull()) && !jsonObj.get("billingAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAccountId").toString()));
      }
      if ((jsonObj.get("billingAccountName") != null && !jsonObj.get("billingAccountName").isJsonNull()) && !jsonObj.get("billingAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAccountName").toString()));
      }
      if ((jsonObj.get("billingCurrencyCode") != null && !jsonObj.get("billingCurrencyCode").isJsonNull()) && !jsonObj.get("billingCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingCurrencyCode").toString()));
      }
      if ((jsonObj.get("billingProfileId") != null && !jsonObj.get("billingProfileId").isJsonNull()) && !jsonObj.get("billingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileId").toString()));
      }
      if ((jsonObj.get("billingProfileName") != null && !jsonObj.get("billingProfileName").isJsonNull()) && !jsonObj.get("billingProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileName").toString()));
      }
      if ((jsonObj.get("chargeType") != null && !jsonObj.get("chargeType").isJsonNull()) && !jsonObj.get("chargeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargeType").toString()));
      }
      if ((jsonObj.get("consumedService") != null && !jsonObj.get("consumedService").isJsonNull()) && !jsonObj.get("consumedService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumedService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumedService").toString()));
      }
      if ((jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) && !jsonObj.get("costCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter").toString()));
      }
      if ((jsonObj.get("customerName") != null && !jsonObj.get("customerName").isJsonNull()) && !jsonObj.get("customerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerName").toString()));
      }
      if ((jsonObj.get("customerTenantId") != null && !jsonObj.get("customerTenantId").isJsonNull()) && !jsonObj.get("customerTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerTenantId").toString()));
      }
      if ((jsonObj.get("exchangeRate") != null && !jsonObj.get("exchangeRate").isJsonNull()) && !jsonObj.get("exchangeRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeRate").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if ((jsonObj.get("instanceName") != null && !jsonObj.get("instanceName").isJsonNull()) && !jsonObj.get("instanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceName").toString()));
      }
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      if ((jsonObj.get("invoiceSectionId") != null && !jsonObj.get("invoiceSectionId").isJsonNull()) && !jsonObj.get("invoiceSectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionId").toString()));
      }
      if ((jsonObj.get("invoiceSectionName") != null && !jsonObj.get("invoiceSectionName").isJsonNull()) && !jsonObj.get("invoiceSectionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionName").toString()));
      }
      if ((jsonObj.get("meterCategory") != null && !jsonObj.get("meterCategory").isJsonNull()) && !jsonObj.get("meterCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterCategory").toString()));
      }
      if ((jsonObj.get("meterId") != null && !jsonObj.get("meterId").isJsonNull()) && !jsonObj.get("meterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterId").toString()));
      }
      if ((jsonObj.get("meterName") != null && !jsonObj.get("meterName").isJsonNull()) && !jsonObj.get("meterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterName").toString()));
      }
      if ((jsonObj.get("meterRegion") != null && !jsonObj.get("meterRegion").isJsonNull()) && !jsonObj.get("meterRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterRegion").toString()));
      }
      if ((jsonObj.get("meterSubCategory") != null && !jsonObj.get("meterSubCategory").isJsonNull()) && !jsonObj.get("meterSubCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterSubCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterSubCategory").toString()));
      }
      if ((jsonObj.get("partnerEarnedCreditApplied") != null && !jsonObj.get("partnerEarnedCreditApplied").isJsonNull()) && !jsonObj.get("partnerEarnedCreditApplied").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerEarnedCreditApplied` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerEarnedCreditApplied").toString()));
      }
      if ((jsonObj.get("partnerName") != null && !jsonObj.get("partnerName").isJsonNull()) && !jsonObj.get("partnerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerName").toString()));
      }
      if ((jsonObj.get("partnerTenantId") != null && !jsonObj.get("partnerTenantId").isJsonNull()) && !jsonObj.get("partnerTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerTenantId").toString()));
      }
      if ((jsonObj.get("previousInvoiceId") != null && !jsonObj.get("previousInvoiceId").isJsonNull()) && !jsonObj.get("previousInvoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousInvoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousInvoiceId").toString()));
      }
      if ((jsonObj.get("pricingCurrencyCode") != null && !jsonObj.get("pricingCurrencyCode").isJsonNull()) && !jsonObj.get("pricingCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricingCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricingCurrencyCode").toString()));
      }
      if ((jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) && !jsonObj.get("product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
      if ((jsonObj.get("productIdentifier") != null && !jsonObj.get("productIdentifier").isJsonNull()) && !jsonObj.get("productIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productIdentifier").toString()));
      }
      if ((jsonObj.get("productOrderId") != null && !jsonObj.get("productOrderId").isJsonNull()) && !jsonObj.get("productOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productOrderId").toString()));
      }
      if ((jsonObj.get("productOrderName") != null && !jsonObj.get("productOrderName").isJsonNull()) && !jsonObj.get("productOrderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productOrderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productOrderName").toString()));
      }
      if ((jsonObj.get("publisherId") != null && !jsonObj.get("publisherId").isJsonNull()) && !jsonObj.get("publisherId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherId").toString()));
      }
      if ((jsonObj.get("publisherName") != null && !jsonObj.get("publisherName").isJsonNull()) && !jsonObj.get("publisherName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherName").toString()));
      }
      if ((jsonObj.get("publisherType") != null && !jsonObj.get("publisherType").isJsonNull()) && !jsonObj.get("publisherType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherType").toString()));
      }
      if ((jsonObj.get("resellerMpnId") != null && !jsonObj.get("resellerMpnId").isJsonNull()) && !jsonObj.get("resellerMpnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resellerMpnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resellerMpnId").toString()));
      }
      if ((jsonObj.get("resellerName") != null && !jsonObj.get("resellerName").isJsonNull()) && !jsonObj.get("resellerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resellerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resellerName").toString()));
      }
      if ((jsonObj.get("reservationId") != null && !jsonObj.get("reservationId").isJsonNull()) && !jsonObj.get("reservationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationId").toString()));
      }
      if ((jsonObj.get("reservationName") != null && !jsonObj.get("reservationName").isJsonNull()) && !jsonObj.get("reservationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationName").toString()));
      }
      if ((jsonObj.get("resourceGroup") != null && !jsonObj.get("resourceGroup").isJsonNull()) && !jsonObj.get("resourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroup").toString()));
      }
      if ((jsonObj.get("resourceLocation") != null && !jsonObj.get("resourceLocation").isJsonNull()) && !jsonObj.get("resourceLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceLocation").toString()));
      }
      if ((jsonObj.get("resourceLocationNormalized") != null && !jsonObj.get("resourceLocationNormalized").isJsonNull()) && !jsonObj.get("resourceLocationNormalized").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceLocationNormalized` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceLocationNormalized").toString()));
      }
      if ((jsonObj.get("serviceFamily") != null && !jsonObj.get("serviceFamily").isJsonNull()) && !jsonObj.get("serviceFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceFamily").toString()));
      }
      if ((jsonObj.get("serviceInfo1") != null && !jsonObj.get("serviceInfo1").isJsonNull()) && !jsonObj.get("serviceInfo1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceInfo1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceInfo1").toString()));
      }
      if ((jsonObj.get("serviceInfo2") != null && !jsonObj.get("serviceInfo2").isJsonNull()) && !jsonObj.get("serviceInfo2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceInfo2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceInfo2").toString()));
      }
      if ((jsonObj.get("subscriptionGuid") != null && !jsonObj.get("subscriptionGuid").isJsonNull()) && !jsonObj.get("subscriptionGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionGuid").toString()));
      }
      if ((jsonObj.get("subscriptionName") != null && !jsonObj.get("subscriptionName").isJsonNull()) && !jsonObj.get("subscriptionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionName").toString()));
      }
      if ((jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) && !jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
      if ((jsonObj.get("unitOfMeasure") != null && !jsonObj.get("unitOfMeasure").isJsonNull()) && !jsonObj.get("unitOfMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitOfMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitOfMeasure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModernUsageDetailProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModernUsageDetailProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModernUsageDetailProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModernUsageDetailProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ModernUsageDetailProperties>() {
           @Override
           public void write(JsonWriter out, ModernUsageDetailProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModernUsageDetailProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModernUsageDetailProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModernUsageDetailProperties
   * @throws IOException if the JSON string is invalid with respect to ModernUsageDetailProperties
   */
  public static ModernUsageDetailProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModernUsageDetailProperties.class);
  }

  /**
   * Convert an instance of ModernUsageDetailProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

