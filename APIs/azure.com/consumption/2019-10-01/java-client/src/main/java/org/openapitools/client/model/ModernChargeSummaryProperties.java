/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of modern charge summary.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:54.368188-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModernChargeSummaryProperties {
  public static final String SERIALIZED_NAME_AZURE_CHARGES = "azureCharges";
  @SerializedName(SERIALIZED_NAME_AZURE_CHARGES)
  private Amount azureCharges;

  public static final String SERIALIZED_NAME_BILLING_ACCOUNT_ID = "billingAccountId";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT_ID)
  private String billingAccountId;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_ID = "billingPeriodId";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_ID)
  private String billingPeriodId;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_ID = "billingProfileId";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_ID)
  private String billingProfileId;

  public static final String SERIALIZED_NAME_CHARGES_BILLED_SEPARATELY = "chargesBilledSeparately";
  @SerializedName(SERIALIZED_NAME_CHARGES_BILLED_SEPARATELY)
  private Amount chargesBilledSeparately;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_INVOICE_SECTION_ID = "invoiceSectionId";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION_ID)
  private String invoiceSectionId;

  public static final String SERIALIZED_NAME_IS_INVOICED = "isInvoiced";
  @SerializedName(SERIALIZED_NAME_IS_INVOICED)
  private Boolean isInvoiced;

  public static final String SERIALIZED_NAME_MARKETPLACE_CHARGES = "marketplaceCharges";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_CHARGES)
  private Amount marketplaceCharges;

  public static final String SERIALIZED_NAME_USAGE_END = "usageEnd";
  @SerializedName(SERIALIZED_NAME_USAGE_END)
  private String usageEnd;

  public static final String SERIALIZED_NAME_USAGE_START = "usageStart";
  @SerializedName(SERIALIZED_NAME_USAGE_START)
  private String usageStart;

  public ModernChargeSummaryProperties() {
  }

  public ModernChargeSummaryProperties(
     String billingAccountId, 
     String billingPeriodId, 
     String billingProfileId, 
     String customerId, 
     String invoiceSectionId, 
     Boolean isInvoiced, 
     String usageEnd, 
     String usageStart
  ) {
    this();
    this.billingAccountId = billingAccountId;
    this.billingPeriodId = billingPeriodId;
    this.billingProfileId = billingProfileId;
    this.customerId = customerId;
    this.invoiceSectionId = invoiceSectionId;
    this.isInvoiced = isInvoiced;
    this.usageEnd = usageEnd;
    this.usageStart = usageStart;
  }

  public ModernChargeSummaryProperties azureCharges(Amount azureCharges) {
    this.azureCharges = azureCharges;
    return this;
  }

  /**
   * Get azureCharges
   * @return azureCharges
   */
  @javax.annotation.Nullable
  public Amount getAzureCharges() {
    return azureCharges;
  }

  public void setAzureCharges(Amount azureCharges) {
    this.azureCharges = azureCharges;
  }


  /**
   * Billing Account Id
   * @return billingAccountId
   */
  @javax.annotation.Nullable
  public String getBillingAccountId() {
    return billingAccountId;
  }



  /**
   * The id of the billing period resource that the charge belongs to.
   * @return billingPeriodId
   */
  @javax.annotation.Nullable
  public String getBillingPeriodId() {
    return billingPeriodId;
  }



  /**
   * Billing Profile Id
   * @return billingProfileId
   */
  @javax.annotation.Nullable
  public String getBillingProfileId() {
    return billingProfileId;
  }



  public ModernChargeSummaryProperties chargesBilledSeparately(Amount chargesBilledSeparately) {
    this.chargesBilledSeparately = chargesBilledSeparately;
    return this;
  }

  /**
   * Get chargesBilledSeparately
   * @return chargesBilledSeparately
   */
  @javax.annotation.Nullable
  public Amount getChargesBilledSeparately() {
    return chargesBilledSeparately;
  }

  public void setChargesBilledSeparately(Amount chargesBilledSeparately) {
    this.chargesBilledSeparately = chargesBilledSeparately;
  }


  /**
   * Customer Id
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }



  /**
   * Invoice Section Id
   * @return invoiceSectionId
   */
  @javax.annotation.Nullable
  public String getInvoiceSectionId() {
    return invoiceSectionId;
  }



  /**
   * Is charge Invoiced
   * @return isInvoiced
   */
  @javax.annotation.Nullable
  public Boolean getIsInvoiced() {
    return isInvoiced;
  }



  public ModernChargeSummaryProperties marketplaceCharges(Amount marketplaceCharges) {
    this.marketplaceCharges = marketplaceCharges;
    return this;
  }

  /**
   * Get marketplaceCharges
   * @return marketplaceCharges
   */
  @javax.annotation.Nullable
  public Amount getMarketplaceCharges() {
    return marketplaceCharges;
  }

  public void setMarketplaceCharges(Amount marketplaceCharges) {
    this.marketplaceCharges = marketplaceCharges;
  }


  /**
   * Usage end date.
   * @return usageEnd
   */
  @javax.annotation.Nullable
  public String getUsageEnd() {
    return usageEnd;
  }



  /**
   * Usage start date.
   * @return usageStart
   */
  @javax.annotation.Nullable
  public String getUsageStart() {
    return usageStart;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModernChargeSummaryProperties modernChargeSummaryProperties = (ModernChargeSummaryProperties) o;
    return Objects.equals(this.azureCharges, modernChargeSummaryProperties.azureCharges) &&
        Objects.equals(this.billingAccountId, modernChargeSummaryProperties.billingAccountId) &&
        Objects.equals(this.billingPeriodId, modernChargeSummaryProperties.billingPeriodId) &&
        Objects.equals(this.billingProfileId, modernChargeSummaryProperties.billingProfileId) &&
        Objects.equals(this.chargesBilledSeparately, modernChargeSummaryProperties.chargesBilledSeparately) &&
        Objects.equals(this.customerId, modernChargeSummaryProperties.customerId) &&
        Objects.equals(this.invoiceSectionId, modernChargeSummaryProperties.invoiceSectionId) &&
        Objects.equals(this.isInvoiced, modernChargeSummaryProperties.isInvoiced) &&
        Objects.equals(this.marketplaceCharges, modernChargeSummaryProperties.marketplaceCharges) &&
        Objects.equals(this.usageEnd, modernChargeSummaryProperties.usageEnd) &&
        Objects.equals(this.usageStart, modernChargeSummaryProperties.usageStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureCharges, billingAccountId, billingPeriodId, billingProfileId, chargesBilledSeparately, customerId, invoiceSectionId, isInvoiced, marketplaceCharges, usageEnd, usageStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModernChargeSummaryProperties {\n");
    sb.append("    azureCharges: ").append(toIndentedString(azureCharges)).append("\n");
    sb.append("    billingAccountId: ").append(toIndentedString(billingAccountId)).append("\n");
    sb.append("    billingPeriodId: ").append(toIndentedString(billingPeriodId)).append("\n");
    sb.append("    billingProfileId: ").append(toIndentedString(billingProfileId)).append("\n");
    sb.append("    chargesBilledSeparately: ").append(toIndentedString(chargesBilledSeparately)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    invoiceSectionId: ").append(toIndentedString(invoiceSectionId)).append("\n");
    sb.append("    isInvoiced: ").append(toIndentedString(isInvoiced)).append("\n");
    sb.append("    marketplaceCharges: ").append(toIndentedString(marketplaceCharges)).append("\n");
    sb.append("    usageEnd: ").append(toIndentedString(usageEnd)).append("\n");
    sb.append("    usageStart: ").append(toIndentedString(usageStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureCharges");
    openapiFields.add("billingAccountId");
    openapiFields.add("billingPeriodId");
    openapiFields.add("billingProfileId");
    openapiFields.add("chargesBilledSeparately");
    openapiFields.add("customerId");
    openapiFields.add("invoiceSectionId");
    openapiFields.add("isInvoiced");
    openapiFields.add("marketplaceCharges");
    openapiFields.add("usageEnd");
    openapiFields.add("usageStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModernChargeSummaryProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModernChargeSummaryProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModernChargeSummaryProperties is not found in the empty JSON string", ModernChargeSummaryProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModernChargeSummaryProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModernChargeSummaryProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `azureCharges`
      if (jsonObj.get("azureCharges") != null && !jsonObj.get("azureCharges").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("azureCharges"));
      }
      if ((jsonObj.get("billingAccountId") != null && !jsonObj.get("billingAccountId").isJsonNull()) && !jsonObj.get("billingAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAccountId").toString()));
      }
      if ((jsonObj.get("billingPeriodId") != null && !jsonObj.get("billingPeriodId").isJsonNull()) && !jsonObj.get("billingPeriodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPeriodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPeriodId").toString()));
      }
      if ((jsonObj.get("billingProfileId") != null && !jsonObj.get("billingProfileId").isJsonNull()) && !jsonObj.get("billingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileId").toString()));
      }
      // validate the optional field `chargesBilledSeparately`
      if (jsonObj.get("chargesBilledSeparately") != null && !jsonObj.get("chargesBilledSeparately").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("chargesBilledSeparately"));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("invoiceSectionId") != null && !jsonObj.get("invoiceSectionId").isJsonNull()) && !jsonObj.get("invoiceSectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSectionId").toString()));
      }
      // validate the optional field `marketplaceCharges`
      if (jsonObj.get("marketplaceCharges") != null && !jsonObj.get("marketplaceCharges").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("marketplaceCharges"));
      }
      if ((jsonObj.get("usageEnd") != null && !jsonObj.get("usageEnd").isJsonNull()) && !jsonObj.get("usageEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageEnd").toString()));
      }
      if ((jsonObj.get("usageStart") != null && !jsonObj.get("usageStart").isJsonNull()) && !jsonObj.get("usageStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageStart").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModernChargeSummaryProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModernChargeSummaryProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModernChargeSummaryProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModernChargeSummaryProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ModernChargeSummaryProperties>() {
           @Override
           public void write(JsonWriter out, ModernChargeSummaryProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModernChargeSummaryProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModernChargeSummaryProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModernChargeSummaryProperties
   * @throws IOException if the JSON string is invalid with respect to ModernChargeSummaryProperties
   */
  public static ModernChargeSummaryProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModernChargeSummaryProperties.class);
  }

  /**
   * Convert an instance of ModernChargeSummaryProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

