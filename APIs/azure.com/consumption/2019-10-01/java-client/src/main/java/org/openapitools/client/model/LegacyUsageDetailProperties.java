/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.MeterDetailsResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the legacy usage detail.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:54.368188-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegacyUsageDetailProperties {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_OWNER_ID = "accountOwnerId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_OWNER_ID)
  private String accountOwnerId;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private String additionalInfo;

  public static final String SERIALIZED_NAME_BILLING_ACCOUNT_ID = "billingAccountId";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT_ID)
  private String billingAccountId;

  public static final String SERIALIZED_NAME_BILLING_ACCOUNT_NAME = "billingAccountName";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT_NAME)
  private String billingAccountName;

  public static final String SERIALIZED_NAME_BILLING_CURRENCY = "billingCurrency";
  @SerializedName(SERIALIZED_NAME_BILLING_CURRENCY)
  private String billingCurrency;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_END_DATE = "billingPeriodEndDate";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_END_DATE)
  private OffsetDateTime billingPeriodEndDate;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_START_DATE = "billingPeriodStartDate";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_START_DATE)
  private OffsetDateTime billingPeriodStartDate;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_ID = "billingProfileId";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_ID)
  private String billingProfileId;

  public static final String SERIALIZED_NAME_BILLING_PROFILE_NAME = "billingProfileName";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILE_NAME)
  private String billingProfileName;

  public static final String SERIALIZED_NAME_CHARGE_TYPE = "chargeType";
  @SerializedName(SERIALIZED_NAME_CHARGE_TYPE)
  private String chargeType;

  public static final String SERIALIZED_NAME_CONSUMED_SERVICE = "consumedService";
  @SerializedName(SERIALIZED_NAME_CONSUMED_SERVICE)
  private String consumedService;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private BigDecimal cost;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private String costCenter;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_EFFECTIVE_PRICE = "effectivePrice";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_PRICE)
  private BigDecimal effectivePrice;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_INVOICE_SECTION = "invoiceSection";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTION)
  private String invoiceSection;

  public static final String SERIALIZED_NAME_IS_AZURE_CREDIT_ELIGIBLE = "isAzureCreditEligible";
  @SerializedName(SERIALIZED_NAME_IS_AZURE_CREDIT_ELIGIBLE)
  private Boolean isAzureCreditEligible;

  public static final String SERIALIZED_NAME_METER_DETAILS = "meterDetails";
  @SerializedName(SERIALIZED_NAME_METER_DETAILS)
  private MeterDetailsResponse meterDetails;

  public static final String SERIALIZED_NAME_METER_ID = "meterId";
  @SerializedName(SERIALIZED_NAME_METER_ID)
  private UUID meterId;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_PART_NUMBER = "partNumber";
  @SerializedName(SERIALIZED_NAME_PART_NUMBER)
  private String partNumber;

  public static final String SERIALIZED_NAME_PLAN_NAME = "planName";
  @SerializedName(SERIALIZED_NAME_PLAN_NAME)
  private String planName;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private String product;

  public static final String SERIALIZED_NAME_PRODUCT_ORDER_ID = "productOrderId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ORDER_ID)
  private String productOrderId;

  public static final String SERIALIZED_NAME_PRODUCT_ORDER_NAME = "productOrderName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ORDER_NAME)
  private String productOrderName;

  public static final String SERIALIZED_NAME_PUBLISHER_NAME = "publisherName";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_NAME)
  private String publisherName;

  public static final String SERIALIZED_NAME_PUBLISHER_TYPE = "publisherType";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_TYPE)
  private String publisherType;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_RESERVATION_ID = "reservationId";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ID)
  private String reservationId;

  public static final String SERIALIZED_NAME_RESERVATION_NAME = "reservationName";
  @SerializedName(SERIALIZED_NAME_RESERVATION_NAME)
  private String reservationName;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resourceGroup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_LOCATION = "resourceLocation";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCATION)
  private String resourceLocation;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_SERVICE_INFO1 = "serviceInfo1";
  @SerializedName(SERIALIZED_NAME_SERVICE_INFO1)
  private String serviceInfo1;

  public static final String SERIALIZED_NAME_SERVICE_INFO2 = "serviceInfo2";
  @SerializedName(SERIALIZED_NAME_SERVICE_INFO2)
  private String serviceInfo2;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_NAME = "subscriptionName";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_NAME)
  private String subscriptionName;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private BigDecimal unitPrice;

  public LegacyUsageDetailProperties() {
  }

  public LegacyUsageDetailProperties(
     String accountName, 
     String accountOwnerId, 
     String additionalInfo, 
     String billingAccountId, 
     String billingAccountName, 
     String billingCurrency, 
     OffsetDateTime billingPeriodEndDate, 
     OffsetDateTime billingPeriodStartDate, 
     String billingProfileId, 
     String billingProfileName, 
     String chargeType, 
     String consumedService, 
     BigDecimal cost, 
     String costCenter, 
     OffsetDateTime date, 
     BigDecimal effectivePrice, 
     String frequency, 
     String invoiceSection, 
     Boolean isAzureCreditEligible, 
     UUID meterId, 
     String offerId, 
     String partNumber, 
     String planName, 
     String product, 
     String productOrderId, 
     String productOrderName, 
     String publisherName, 
     String publisherType, 
     BigDecimal quantity, 
     String reservationId, 
     String reservationName, 
     String resourceGroup, 
     String resourceId, 
     String resourceLocation, 
     String resourceName, 
     String serviceInfo1, 
     String serviceInfo2, 
     String subscriptionId, 
     String subscriptionName, 
     String term, 
     BigDecimal unitPrice
  ) {
    this();
    this.accountName = accountName;
    this.accountOwnerId = accountOwnerId;
    this.additionalInfo = additionalInfo;
    this.billingAccountId = billingAccountId;
    this.billingAccountName = billingAccountName;
    this.billingCurrency = billingCurrency;
    this.billingPeriodEndDate = billingPeriodEndDate;
    this.billingPeriodStartDate = billingPeriodStartDate;
    this.billingProfileId = billingProfileId;
    this.billingProfileName = billingProfileName;
    this.chargeType = chargeType;
    this.consumedService = consumedService;
    this.cost = cost;
    this.costCenter = costCenter;
    this.date = date;
    this.effectivePrice = effectivePrice;
    this.frequency = frequency;
    this.invoiceSection = invoiceSection;
    this.isAzureCreditEligible = isAzureCreditEligible;
    this.meterId = meterId;
    this.offerId = offerId;
    this.partNumber = partNumber;
    this.planName = planName;
    this.product = product;
    this.productOrderId = productOrderId;
    this.productOrderName = productOrderName;
    this.publisherName = publisherName;
    this.publisherType = publisherType;
    this.quantity = quantity;
    this.reservationId = reservationId;
    this.reservationName = reservationName;
    this.resourceGroup = resourceGroup;
    this.resourceId = resourceId;
    this.resourceLocation = resourceLocation;
    this.resourceName = resourceName;
    this.serviceInfo1 = serviceInfo1;
    this.serviceInfo2 = serviceInfo2;
    this.subscriptionId = subscriptionId;
    this.subscriptionName = subscriptionName;
    this.term = term;
    this.unitPrice = unitPrice;
  }

  /**
   * Account Name.
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }



  /**
   * Account Owner Id.
   * @return accountOwnerId
   */
  @javax.annotation.Nullable
  public String getAccountOwnerId() {
    return accountOwnerId;
  }



  /**
   * Additional details of this usage item. By default this is not populated, unless it&#39;s specified in $expand. Use this field to get usage line item specific details such as the actual VM Size (ServiceType) or the ratio in which the reservation discount is applied.
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  public String getAdditionalInfo() {
    return additionalInfo;
  }



  /**
   * Billing Account identifier.
   * @return billingAccountId
   */
  @javax.annotation.Nullable
  public String getBillingAccountId() {
    return billingAccountId;
  }



  /**
   * Billing Account Name.
   * @return billingAccountName
   */
  @javax.annotation.Nullable
  public String getBillingAccountName() {
    return billingAccountName;
  }



  /**
   * Billing Currency.
   * @return billingCurrency
   */
  @javax.annotation.Nullable
  public String getBillingCurrency() {
    return billingCurrency;
  }



  /**
   * The billing period end date.
   * @return billingPeriodEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBillingPeriodEndDate() {
    return billingPeriodEndDate;
  }



  /**
   * The billing period start date.
   * @return billingPeriodStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBillingPeriodStartDate() {
    return billingPeriodStartDate;
  }



  /**
   * Billing Profile identifier.
   * @return billingProfileId
   */
  @javax.annotation.Nullable
  public String getBillingProfileId() {
    return billingProfileId;
  }



  /**
   * Billing Profile Name.
   * @return billingProfileName
   */
  @javax.annotation.Nullable
  public String getBillingProfileName() {
    return billingProfileName;
  }



  /**
   * Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
   * @return chargeType
   */
  @javax.annotation.Nullable
  public String getChargeType() {
    return chargeType;
  }



  /**
   * Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value is not provided for marketplace usage.
   * @return consumedService
   */
  @javax.annotation.Nullable
  public String getConsumedService() {
    return consumedService;
  }



  /**
   * The amount of cost before tax.
   * @return cost
   */
  @javax.annotation.Nullable
  public BigDecimal getCost() {
    return cost;
  }



  /**
   * The cost center of this department if it is a department and a cost center is provided.
   * @return costCenter
   */
  @javax.annotation.Nullable
  public String getCostCenter() {
    return costCenter;
  }



  /**
   * Date for the usage record.
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }



  /**
   * Effective Price that&#39;s charged for the usage.
   * @return effectivePrice
   */
  @javax.annotation.Nullable
  public BigDecimal getEffectivePrice() {
    return effectivePrice;
  }



  /**
   * Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees which recur every month, and UsageBased for charges based on how much a service is used.
   * @return frequency
   */
  @javax.annotation.Nullable
  public String getFrequency() {
    return frequency;
  }



  /**
   * Invoice Section Name.
   * @return invoiceSection
   */
  @javax.annotation.Nullable
  public String getInvoiceSection() {
    return invoiceSection;
  }



  /**
   * Is Azure Credit Eligible.
   * @return isAzureCreditEligible
   */
  @javax.annotation.Nullable
  public Boolean getIsAzureCreditEligible() {
    return isAzureCreditEligible;
  }



  public LegacyUsageDetailProperties meterDetails(MeterDetailsResponse meterDetails) {
    this.meterDetails = meterDetails;
    return this;
  }

  /**
   * Get meterDetails
   * @return meterDetails
   */
  @javax.annotation.Nullable
  public MeterDetailsResponse getMeterDetails() {
    return meterDetails;
  }

  public void setMeterDetails(MeterDetailsResponse meterDetails) {
    this.meterDetails = meterDetails;
  }


  /**
   * The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter for which the reservation was purchased. For the actual VM Size for which the reservation is purchased see productOrderName.
   * @return meterId
   */
  @javax.annotation.Nullable
  public UUID getMeterId() {
    return meterId;
  }



  /**
   * Offer Id. Ex: MS-AZR-0017P, MS-AZR-0148P.
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }



  /**
   * Part Number of the service used. Can be used to join with the price sheet. Not available for marketplace.
   * @return partNumber
   */
  @javax.annotation.Nullable
  public String getPartNumber() {
    return partNumber;
  }



  /**
   * Plan Name.
   * @return planName
   */
  @javax.annotation.Nullable
  public String getPlanName() {
    return planName;
  }



  /**
   * Product name for the consumed service or purchase. Not available for Marketplace.
   * @return product
   */
  @javax.annotation.Nullable
  public String getProduct() {
    return product;
  }



  /**
   * Product Order Id. For reservations this is the Reservation Order ID.
   * @return productOrderId
   */
  @javax.annotation.Nullable
  public String getProductOrderId() {
    return productOrderId;
  }



  /**
   * Product Order Name. For reservations this is the SKU that was purchased.
   * @return productOrderName
   */
  @javax.annotation.Nullable
  public String getProductOrderName() {
    return productOrderName;
  }



  /**
   * Publisher Name.
   * @return publisherName
   */
  @javax.annotation.Nullable
  public String getPublisherName() {
    return publisherName;
  }



  /**
   * Publisher Type.
   * @return publisherType
   */
  @javax.annotation.Nullable
  public String getPublisherType() {
    return publisherType;
  }



  /**
   * The usage quantity.
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }



  /**
   * ARM resource id of the reservation. Only applies to records relevant to reservations.
   * @return reservationId
   */
  @javax.annotation.Nullable
  public String getReservationId() {
    return reservationId;
  }



  /**
   * User provided display name of the reservation. Last known name for a particular day is populated in the daily data. Only applies to records relevant to reservations.
   * @return reservationName
   */
  @javax.annotation.Nullable
  public String getReservationName() {
    return reservationName;
  }



  /**
   * Resource Group Name.
   * @return resourceGroup
   */
  @javax.annotation.Nullable
  public String getResourceGroup() {
    return resourceGroup;
  }



  /**
   * Azure resource manager resource identifier.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }



  /**
   * Resource Location.
   * @return resourceLocation
   */
  @javax.annotation.Nullable
  public String getResourceLocation() {
    return resourceLocation;
  }



  /**
   * Resource Name.
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }



  /**
   * Service Info 1.
   * @return serviceInfo1
   */
  @javax.annotation.Nullable
  public String getServiceInfo1() {
    return serviceInfo1;
  }



  /**
   * Service Info 2.
   * @return serviceInfo2
   */
  @javax.annotation.Nullable
  public String getServiceInfo2() {
    return serviceInfo2;
  }



  /**
   * Subscription guid.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }



  /**
   * Subscription name.
   * @return subscriptionName
   */
  @javax.annotation.Nullable
  public String getSubscriptionName() {
    return subscriptionName;
  }



  /**
   * Term (in months). 1 month for monthly recurring purchase. 12 months for a 1 year reservation. 36 months for a 3 year reservation.
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }



  /**
   * Unit Price is the price applicable to you. (your EA or other contract price).
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getUnitPrice() {
    return unitPrice;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegacyUsageDetailProperties legacyUsageDetailProperties = (LegacyUsageDetailProperties) o;
    return Objects.equals(this.accountName, legacyUsageDetailProperties.accountName) &&
        Objects.equals(this.accountOwnerId, legacyUsageDetailProperties.accountOwnerId) &&
        Objects.equals(this.additionalInfo, legacyUsageDetailProperties.additionalInfo) &&
        Objects.equals(this.billingAccountId, legacyUsageDetailProperties.billingAccountId) &&
        Objects.equals(this.billingAccountName, legacyUsageDetailProperties.billingAccountName) &&
        Objects.equals(this.billingCurrency, legacyUsageDetailProperties.billingCurrency) &&
        Objects.equals(this.billingPeriodEndDate, legacyUsageDetailProperties.billingPeriodEndDate) &&
        Objects.equals(this.billingPeriodStartDate, legacyUsageDetailProperties.billingPeriodStartDate) &&
        Objects.equals(this.billingProfileId, legacyUsageDetailProperties.billingProfileId) &&
        Objects.equals(this.billingProfileName, legacyUsageDetailProperties.billingProfileName) &&
        Objects.equals(this.chargeType, legacyUsageDetailProperties.chargeType) &&
        Objects.equals(this.consumedService, legacyUsageDetailProperties.consumedService) &&
        Objects.equals(this.cost, legacyUsageDetailProperties.cost) &&
        Objects.equals(this.costCenter, legacyUsageDetailProperties.costCenter) &&
        Objects.equals(this.date, legacyUsageDetailProperties.date) &&
        Objects.equals(this.effectivePrice, legacyUsageDetailProperties.effectivePrice) &&
        Objects.equals(this.frequency, legacyUsageDetailProperties.frequency) &&
        Objects.equals(this.invoiceSection, legacyUsageDetailProperties.invoiceSection) &&
        Objects.equals(this.isAzureCreditEligible, legacyUsageDetailProperties.isAzureCreditEligible) &&
        Objects.equals(this.meterDetails, legacyUsageDetailProperties.meterDetails) &&
        Objects.equals(this.meterId, legacyUsageDetailProperties.meterId) &&
        Objects.equals(this.offerId, legacyUsageDetailProperties.offerId) &&
        Objects.equals(this.partNumber, legacyUsageDetailProperties.partNumber) &&
        Objects.equals(this.planName, legacyUsageDetailProperties.planName) &&
        Objects.equals(this.product, legacyUsageDetailProperties.product) &&
        Objects.equals(this.productOrderId, legacyUsageDetailProperties.productOrderId) &&
        Objects.equals(this.productOrderName, legacyUsageDetailProperties.productOrderName) &&
        Objects.equals(this.publisherName, legacyUsageDetailProperties.publisherName) &&
        Objects.equals(this.publisherType, legacyUsageDetailProperties.publisherType) &&
        Objects.equals(this.quantity, legacyUsageDetailProperties.quantity) &&
        Objects.equals(this.reservationId, legacyUsageDetailProperties.reservationId) &&
        Objects.equals(this.reservationName, legacyUsageDetailProperties.reservationName) &&
        Objects.equals(this.resourceGroup, legacyUsageDetailProperties.resourceGroup) &&
        Objects.equals(this.resourceId, legacyUsageDetailProperties.resourceId) &&
        Objects.equals(this.resourceLocation, legacyUsageDetailProperties.resourceLocation) &&
        Objects.equals(this.resourceName, legacyUsageDetailProperties.resourceName) &&
        Objects.equals(this.serviceInfo1, legacyUsageDetailProperties.serviceInfo1) &&
        Objects.equals(this.serviceInfo2, legacyUsageDetailProperties.serviceInfo2) &&
        Objects.equals(this.subscriptionId, legacyUsageDetailProperties.subscriptionId) &&
        Objects.equals(this.subscriptionName, legacyUsageDetailProperties.subscriptionName) &&
        Objects.equals(this.term, legacyUsageDetailProperties.term) &&
        Objects.equals(this.unitPrice, legacyUsageDetailProperties.unitPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, accountOwnerId, additionalInfo, billingAccountId, billingAccountName, billingCurrency, billingPeriodEndDate, billingPeriodStartDate, billingProfileId, billingProfileName, chargeType, consumedService, cost, costCenter, date, effectivePrice, frequency, invoiceSection, isAzureCreditEligible, meterDetails, meterId, offerId, partNumber, planName, product, productOrderId, productOrderName, publisherName, publisherType, quantity, reservationId, reservationName, resourceGroup, resourceId, resourceLocation, resourceName, serviceInfo1, serviceInfo2, subscriptionId, subscriptionName, term, unitPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegacyUsageDetailProperties {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountOwnerId: ").append(toIndentedString(accountOwnerId)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    billingAccountId: ").append(toIndentedString(billingAccountId)).append("\n");
    sb.append("    billingAccountName: ").append(toIndentedString(billingAccountName)).append("\n");
    sb.append("    billingCurrency: ").append(toIndentedString(billingCurrency)).append("\n");
    sb.append("    billingPeriodEndDate: ").append(toIndentedString(billingPeriodEndDate)).append("\n");
    sb.append("    billingPeriodStartDate: ").append(toIndentedString(billingPeriodStartDate)).append("\n");
    sb.append("    billingProfileId: ").append(toIndentedString(billingProfileId)).append("\n");
    sb.append("    billingProfileName: ").append(toIndentedString(billingProfileName)).append("\n");
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    consumedService: ").append(toIndentedString(consumedService)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    effectivePrice: ").append(toIndentedString(effectivePrice)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    invoiceSection: ").append(toIndentedString(invoiceSection)).append("\n");
    sb.append("    isAzureCreditEligible: ").append(toIndentedString(isAzureCreditEligible)).append("\n");
    sb.append("    meterDetails: ").append(toIndentedString(meterDetails)).append("\n");
    sb.append("    meterId: ").append(toIndentedString(meterId)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    partNumber: ").append(toIndentedString(partNumber)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    productOrderId: ").append(toIndentedString(productOrderId)).append("\n");
    sb.append("    productOrderName: ").append(toIndentedString(productOrderName)).append("\n");
    sb.append("    publisherName: ").append(toIndentedString(publisherName)).append("\n");
    sb.append("    publisherType: ").append(toIndentedString(publisherType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    reservationId: ").append(toIndentedString(reservationId)).append("\n");
    sb.append("    reservationName: ").append(toIndentedString(reservationName)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceLocation: ").append(toIndentedString(resourceLocation)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    serviceInfo1: ").append(toIndentedString(serviceInfo1)).append("\n");
    sb.append("    serviceInfo2: ").append(toIndentedString(serviceInfo2)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    subscriptionName: ").append(toIndentedString(subscriptionName)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("accountOwnerId");
    openapiFields.add("additionalInfo");
    openapiFields.add("billingAccountId");
    openapiFields.add("billingAccountName");
    openapiFields.add("billingCurrency");
    openapiFields.add("billingPeriodEndDate");
    openapiFields.add("billingPeriodStartDate");
    openapiFields.add("billingProfileId");
    openapiFields.add("billingProfileName");
    openapiFields.add("chargeType");
    openapiFields.add("consumedService");
    openapiFields.add("cost");
    openapiFields.add("costCenter");
    openapiFields.add("date");
    openapiFields.add("effectivePrice");
    openapiFields.add("frequency");
    openapiFields.add("invoiceSection");
    openapiFields.add("isAzureCreditEligible");
    openapiFields.add("meterDetails");
    openapiFields.add("meterId");
    openapiFields.add("offerId");
    openapiFields.add("partNumber");
    openapiFields.add("planName");
    openapiFields.add("product");
    openapiFields.add("productOrderId");
    openapiFields.add("productOrderName");
    openapiFields.add("publisherName");
    openapiFields.add("publisherType");
    openapiFields.add("quantity");
    openapiFields.add("reservationId");
    openapiFields.add("reservationName");
    openapiFields.add("resourceGroup");
    openapiFields.add("resourceId");
    openapiFields.add("resourceLocation");
    openapiFields.add("resourceName");
    openapiFields.add("serviceInfo1");
    openapiFields.add("serviceInfo2");
    openapiFields.add("subscriptionId");
    openapiFields.add("subscriptionName");
    openapiFields.add("term");
    openapiFields.add("unitPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegacyUsageDetailProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegacyUsageDetailProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegacyUsageDetailProperties is not found in the empty JSON string", LegacyUsageDetailProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegacyUsageDetailProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegacyUsageDetailProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("accountOwnerId") != null && !jsonObj.get("accountOwnerId").isJsonNull()) && !jsonObj.get("accountOwnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountOwnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountOwnerId").toString()));
      }
      if ((jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) && !jsonObj.get("additionalInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
      }
      if ((jsonObj.get("billingAccountId") != null && !jsonObj.get("billingAccountId").isJsonNull()) && !jsonObj.get("billingAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAccountId").toString()));
      }
      if ((jsonObj.get("billingAccountName") != null && !jsonObj.get("billingAccountName").isJsonNull()) && !jsonObj.get("billingAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAccountName").toString()));
      }
      if ((jsonObj.get("billingCurrency") != null && !jsonObj.get("billingCurrency").isJsonNull()) && !jsonObj.get("billingCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingCurrency").toString()));
      }
      if ((jsonObj.get("billingProfileId") != null && !jsonObj.get("billingProfileId").isJsonNull()) && !jsonObj.get("billingProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileId").toString()));
      }
      if ((jsonObj.get("billingProfileName") != null && !jsonObj.get("billingProfileName").isJsonNull()) && !jsonObj.get("billingProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingProfileName").toString()));
      }
      if ((jsonObj.get("chargeType") != null && !jsonObj.get("chargeType").isJsonNull()) && !jsonObj.get("chargeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargeType").toString()));
      }
      if ((jsonObj.get("consumedService") != null && !jsonObj.get("consumedService").isJsonNull()) && !jsonObj.get("consumedService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumedService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumedService").toString()));
      }
      if ((jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) && !jsonObj.get("costCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter").toString()));
      }
      if ((jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) && !jsonObj.get("frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frequency").toString()));
      }
      if ((jsonObj.get("invoiceSection") != null && !jsonObj.get("invoiceSection").isJsonNull()) && !jsonObj.get("invoiceSection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceSection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceSection").toString()));
      }
      // validate the optional field `meterDetails`
      if (jsonObj.get("meterDetails") != null && !jsonObj.get("meterDetails").isJsonNull()) {
        MeterDetailsResponse.validateJsonElement(jsonObj.get("meterDetails"));
      }
      if ((jsonObj.get("meterId") != null && !jsonObj.get("meterId").isJsonNull()) && !jsonObj.get("meterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterId").toString()));
      }
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      if ((jsonObj.get("partNumber") != null && !jsonObj.get("partNumber").isJsonNull()) && !jsonObj.get("partNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partNumber").toString()));
      }
      if ((jsonObj.get("planName") != null && !jsonObj.get("planName").isJsonNull()) && !jsonObj.get("planName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planName").toString()));
      }
      if ((jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) && !jsonObj.get("product").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product").toString()));
      }
      if ((jsonObj.get("productOrderId") != null && !jsonObj.get("productOrderId").isJsonNull()) && !jsonObj.get("productOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productOrderId").toString()));
      }
      if ((jsonObj.get("productOrderName") != null && !jsonObj.get("productOrderName").isJsonNull()) && !jsonObj.get("productOrderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productOrderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productOrderName").toString()));
      }
      if ((jsonObj.get("publisherName") != null && !jsonObj.get("publisherName").isJsonNull()) && !jsonObj.get("publisherName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherName").toString()));
      }
      if ((jsonObj.get("publisherType") != null && !jsonObj.get("publisherType").isJsonNull()) && !jsonObj.get("publisherType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherType").toString()));
      }
      if ((jsonObj.get("reservationId") != null && !jsonObj.get("reservationId").isJsonNull()) && !jsonObj.get("reservationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationId").toString()));
      }
      if ((jsonObj.get("reservationName") != null && !jsonObj.get("reservationName").isJsonNull()) && !jsonObj.get("reservationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationName").toString()));
      }
      if ((jsonObj.get("resourceGroup") != null && !jsonObj.get("resourceGroup").isJsonNull()) && !jsonObj.get("resourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroup").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("resourceLocation") != null && !jsonObj.get("resourceLocation").isJsonNull()) && !jsonObj.get("resourceLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceLocation").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if ((jsonObj.get("serviceInfo1") != null && !jsonObj.get("serviceInfo1").isJsonNull()) && !jsonObj.get("serviceInfo1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceInfo1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceInfo1").toString()));
      }
      if ((jsonObj.get("serviceInfo2") != null && !jsonObj.get("serviceInfo2").isJsonNull()) && !jsonObj.get("serviceInfo2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceInfo2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceInfo2").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("subscriptionName") != null && !jsonObj.get("subscriptionName").isJsonNull()) && !jsonObj.get("subscriptionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionName").toString()));
      }
      if ((jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) && !jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegacyUsageDetailProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegacyUsageDetailProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegacyUsageDetailProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegacyUsageDetailProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LegacyUsageDetailProperties>() {
           @Override
           public void write(JsonWriter out, LegacyUsageDetailProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegacyUsageDetailProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegacyUsageDetailProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegacyUsageDetailProperties
   * @throws IOException if the JSON string is invalid with respect to LegacyUsageDetailProperties
   */
  public static LegacyUsageDetailProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegacyUsageDetailProperties.class);
  }

  /**
   * Convert an instance of LegacyUsageDetailProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

