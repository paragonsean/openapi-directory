/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the meter detail.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:54.368188-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeterDetailsResponse {
  public static final String SERIALIZED_NAME_METER_CATEGORY = "meterCategory";
  @SerializedName(SERIALIZED_NAME_METER_CATEGORY)
  private String meterCategory;

  public static final String SERIALIZED_NAME_METER_NAME = "meterName";
  @SerializedName(SERIALIZED_NAME_METER_NAME)
  private String meterName;

  public static final String SERIALIZED_NAME_METER_SUB_CATEGORY = "meterSubCategory";
  @SerializedName(SERIALIZED_NAME_METER_SUB_CATEGORY)
  private String meterSubCategory;

  public static final String SERIALIZED_NAME_SERVICE_FAMILY = "serviceFamily";
  @SerializedName(SERIALIZED_NAME_SERVICE_FAMILY)
  private String serviceFamily;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "unitOfMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private String unitOfMeasure;

  public MeterDetailsResponse() {
  }

  public MeterDetailsResponse(
     String meterCategory, 
     String meterName, 
     String meterSubCategory, 
     String serviceFamily, 
     String unitOfMeasure
  ) {
    this();
    this.meterCategory = meterCategory;
    this.meterName = meterName;
    this.meterSubCategory = meterSubCategory;
    this.serviceFamily = serviceFamily;
    this.unitOfMeasure = unitOfMeasure;
  }

  /**
   * The category of the meter, for example, &#39;Cloud services&#39;, &#39;Networking&#39;, etc..
   * @return meterCategory
   */
  @javax.annotation.Nullable
  public String getMeterCategory() {
    return meterCategory;
  }



  /**
   * The name of the meter, within the given meter category
   * @return meterName
   */
  @javax.annotation.Nullable
  public String getMeterName() {
    return meterName;
  }



  /**
   * The subcategory of the meter, for example, &#39;A6 Cloud services&#39;, &#39;ExpressRoute (IXP)&#39;, etc..
   * @return meterSubCategory
   */
  @javax.annotation.Nullable
  public String getMeterSubCategory() {
    return meterSubCategory;
  }



  /**
   * The service family.
   * @return serviceFamily
   */
  @javax.annotation.Nullable
  public String getServiceFamily() {
    return serviceFamily;
  }



  /**
   * The unit in which the meter consumption is charged, for example, &#39;Hours&#39;, &#39;GB&#39;, etc.
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeterDetailsResponse meterDetailsResponse = (MeterDetailsResponse) o;
    return Objects.equals(this.meterCategory, meterDetailsResponse.meterCategory) &&
        Objects.equals(this.meterName, meterDetailsResponse.meterName) &&
        Objects.equals(this.meterSubCategory, meterDetailsResponse.meterSubCategory) &&
        Objects.equals(this.serviceFamily, meterDetailsResponse.serviceFamily) &&
        Objects.equals(this.unitOfMeasure, meterDetailsResponse.unitOfMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meterCategory, meterName, meterSubCategory, serviceFamily, unitOfMeasure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeterDetailsResponse {\n");
    sb.append("    meterCategory: ").append(toIndentedString(meterCategory)).append("\n");
    sb.append("    meterName: ").append(toIndentedString(meterName)).append("\n");
    sb.append("    meterSubCategory: ").append(toIndentedString(meterSubCategory)).append("\n");
    sb.append("    serviceFamily: ").append(toIndentedString(serviceFamily)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("meterCategory");
    openapiFields.add("meterName");
    openapiFields.add("meterSubCategory");
    openapiFields.add("serviceFamily");
    openapiFields.add("unitOfMeasure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeterDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeterDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeterDetailsResponse is not found in the empty JSON string", MeterDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeterDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeterDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("meterCategory") != null && !jsonObj.get("meterCategory").isJsonNull()) && !jsonObj.get("meterCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterCategory").toString()));
      }
      if ((jsonObj.get("meterName") != null && !jsonObj.get("meterName").isJsonNull()) && !jsonObj.get("meterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterName").toString()));
      }
      if ((jsonObj.get("meterSubCategory") != null && !jsonObj.get("meterSubCategory").isJsonNull()) && !jsonObj.get("meterSubCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterSubCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterSubCategory").toString()));
      }
      if ((jsonObj.get("serviceFamily") != null && !jsonObj.get("serviceFamily").isJsonNull()) && !jsonObj.get("serviceFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceFamily").toString()));
      }
      if ((jsonObj.get("unitOfMeasure") != null && !jsonObj.get("unitOfMeasure").isJsonNull()) && !jsonObj.get("unitOfMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitOfMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitOfMeasure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeterDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeterDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeterDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeterDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MeterDetailsResponse>() {
           @Override
           public void write(JsonWriter out, MeterDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeterDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeterDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeterDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to MeterDetailsResponse
   */
  public static MeterDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeterDetailsResponse.class);
  }

  /**
   * Convert an instance of MeterDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

