/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The event properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:54.368188-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventProperties {
  public static final String SERIALIZED_NAME_ADJUSTMENTS = "adjustments";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENTS)
  private Amount adjustments;

  public static final String SERIALIZED_NAME_CHARGES = "charges";
  @SerializedName(SERIALIZED_NAME_CHARGES)
  private Amount charges;

  public static final String SERIALIZED_NAME_CLOSED_BALANCE = "closedBalance";
  @SerializedName(SERIALIZED_NAME_CLOSED_BALANCE)
  private Amount closedBalance;

  public static final String SERIALIZED_NAME_CREDIT_EXPIRED = "creditExpired";
  @SerializedName(SERIALIZED_NAME_CREDIT_EXPIRED)
  private Amount creditExpired;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The type of event.
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    SETTLED_CHARGES("SettledCharges"),
    
    PENDING_CHARGES("PendingCharges"),
    
    PENDING_ADJUSTMENTS("PendingAdjustments"),
    
    PENDING_NEW_CREDIT("PendingNewCredit"),
    
    PENDING_EXPIRED_CREDIT("PendingExpiredCredit"),
    
    UN_KNOWN("UnKnown"),
    
    NEW_CREDIT("NewCredit");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypeEnum eventType;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_NEW_CREDIT = "newCredit";
  @SerializedName(SERIALIZED_NAME_NEW_CREDIT)
  private Amount newCredit;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private OffsetDateTime transactionDate;

  public EventProperties() {
  }

  public EventProperties(
     String description, 
     String invoiceNumber, 
     OffsetDateTime transactionDate
  ) {
    this();
    this.description = description;
    this.invoiceNumber = invoiceNumber;
    this.transactionDate = transactionDate;
  }

  public EventProperties adjustments(Amount adjustments) {
    this.adjustments = adjustments;
    return this;
  }

  /**
   * Get adjustments
   * @return adjustments
   */
  @javax.annotation.Nullable
  public Amount getAdjustments() {
    return adjustments;
  }

  public void setAdjustments(Amount adjustments) {
    this.adjustments = adjustments;
  }


  public EventProperties charges(Amount charges) {
    this.charges = charges;
    return this;
  }

  /**
   * Get charges
   * @return charges
   */
  @javax.annotation.Nullable
  public Amount getCharges() {
    return charges;
  }

  public void setCharges(Amount charges) {
    this.charges = charges;
  }


  public EventProperties closedBalance(Amount closedBalance) {
    this.closedBalance = closedBalance;
    return this;
  }

  /**
   * Get closedBalance
   * @return closedBalance
   */
  @javax.annotation.Nullable
  public Amount getClosedBalance() {
    return closedBalance;
  }

  public void setClosedBalance(Amount closedBalance) {
    this.closedBalance = closedBalance;
  }


  public EventProperties creditExpired(Amount creditExpired) {
    this.creditExpired = creditExpired;
    return this;
  }

  /**
   * Get creditExpired
   * @return creditExpired
   */
  @javax.annotation.Nullable
  public Amount getCreditExpired() {
    return creditExpired;
  }

  public void setCreditExpired(Amount creditExpired) {
    this.creditExpired = creditExpired;
  }


  /**
   * Transaction description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  public EventProperties eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The type of event.
   * @return eventType
   */
  @javax.annotation.Nullable
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  /**
   * Invoice number.
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }



  public EventProperties newCredit(Amount newCredit) {
    this.newCredit = newCredit;
    return this;
  }

  /**
   * Get newCredit
   * @return newCredit
   */
  @javax.annotation.Nullable
  public Amount getNewCredit() {
    return newCredit;
  }

  public void setNewCredit(Amount newCredit) {
    this.newCredit = newCredit;
  }


  /**
   * Transaction date.
   * @return transactionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTransactionDate() {
    return transactionDate;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventProperties eventProperties = (EventProperties) o;
    return Objects.equals(this.adjustments, eventProperties.adjustments) &&
        Objects.equals(this.charges, eventProperties.charges) &&
        Objects.equals(this.closedBalance, eventProperties.closedBalance) &&
        Objects.equals(this.creditExpired, eventProperties.creditExpired) &&
        Objects.equals(this.description, eventProperties.description) &&
        Objects.equals(this.eventType, eventProperties.eventType) &&
        Objects.equals(this.invoiceNumber, eventProperties.invoiceNumber) &&
        Objects.equals(this.newCredit, eventProperties.newCredit) &&
        Objects.equals(this.transactionDate, eventProperties.transactionDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustments, charges, closedBalance, creditExpired, description, eventType, invoiceNumber, newCredit, transactionDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventProperties {\n");
    sb.append("    adjustments: ").append(toIndentedString(adjustments)).append("\n");
    sb.append("    charges: ").append(toIndentedString(charges)).append("\n");
    sb.append("    closedBalance: ").append(toIndentedString(closedBalance)).append("\n");
    sb.append("    creditExpired: ").append(toIndentedString(creditExpired)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    newCredit: ").append(toIndentedString(newCredit)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustments");
    openapiFields.add("charges");
    openapiFields.add("closedBalance");
    openapiFields.add("creditExpired");
    openapiFields.add("description");
    openapiFields.add("eventType");
    openapiFields.add("invoiceNumber");
    openapiFields.add("newCredit");
    openapiFields.add("transactionDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventProperties is not found in the empty JSON string", EventProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adjustments`
      if (jsonObj.get("adjustments") != null && !jsonObj.get("adjustments").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("adjustments"));
      }
      // validate the optional field `charges`
      if (jsonObj.get("charges") != null && !jsonObj.get("charges").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("charges"));
      }
      // validate the optional field `closedBalance`
      if (jsonObj.get("closedBalance") != null && !jsonObj.get("closedBalance").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("closedBalance"));
      }
      // validate the optional field `creditExpired`
      if (jsonObj.get("creditExpired") != null && !jsonObj.get("creditExpired").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("creditExpired"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      // validate the optional field `eventType`
      if (jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) {
        EventTypeEnum.validateJsonElement(jsonObj.get("eventType"));
      }
      if ((jsonObj.get("invoiceNumber") != null && !jsonObj.get("invoiceNumber").isJsonNull()) && !jsonObj.get("invoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceNumber").toString()));
      }
      // validate the optional field `newCredit`
      if (jsonObj.get("newCredit") != null && !jsonObj.get("newCredit").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("newCredit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EventProperties>() {
           @Override
           public void write(JsonWriter out, EventProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventProperties
   * @throws IOException if the JSON string is invalid with respect to EventProperties
   */
  public static EventProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventProperties.class);
  }

  /**
   * Convert an instance of EventProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

