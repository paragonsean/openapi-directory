/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-06-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.MeterDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the price sheet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:29.052349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PriceSheetProperties {
  public static final String SERIALIZED_NAME_BILLING_PERIOD_ID = "billingPeriodId";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_ID)
  private String billingPeriodId;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_INCLUDED_QUANTITY = "includedQuantity";
  @SerializedName(SERIALIZED_NAME_INCLUDED_QUANTITY)
  private BigDecimal includedQuantity;

  public static final String SERIALIZED_NAME_METER_DETAILS = "meterDetails";
  @SerializedName(SERIALIZED_NAME_METER_DETAILS)
  private MeterDetails meterDetails;

  public static final String SERIALIZED_NAME_METER_ID = "meterId";
  @SerializedName(SERIALIZED_NAME_METER_ID)
  private UUID meterId;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_PART_NUMBER = "partNumber";
  @SerializedName(SERIALIZED_NAME_PART_NUMBER)
  private String partNumber;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "unitOfMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private String unitOfMeasure;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private BigDecimal unitPrice;

  public PriceSheetProperties() {
  }

  public PriceSheetProperties(
     String billingPeriodId, 
     String currencyCode, 
     BigDecimal includedQuantity, 
     UUID meterId, 
     String offerId, 
     String partNumber, 
     String unitOfMeasure, 
     BigDecimal unitPrice
  ) {
    this();
    this.billingPeriodId = billingPeriodId;
    this.currencyCode = currencyCode;
    this.includedQuantity = includedQuantity;
    this.meterId = meterId;
    this.offerId = offerId;
    this.partNumber = partNumber;
    this.unitOfMeasure = unitOfMeasure;
    this.unitPrice = unitPrice;
  }

  /**
   * The id of the billing period resource that the usage belongs to.
   * @return billingPeriodId
   */
  @javax.annotation.Nullable
  public String getBillingPeriodId() {
    return billingPeriodId;
  }



  /**
   * Currency Code
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }



  /**
   * Included quality for an offer
   * @return includedQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getIncludedQuantity() {
    return includedQuantity;
  }



  public PriceSheetProperties meterDetails(MeterDetails meterDetails) {
    this.meterDetails = meterDetails;
    return this;
  }

  /**
   * Get meterDetails
   * @return meterDetails
   */
  @javax.annotation.Nullable
  public MeterDetails getMeterDetails() {
    return meterDetails;
  }

  public void setMeterDetails(MeterDetails meterDetails) {
    this.meterDetails = meterDetails;
  }


  /**
   * The meter id (GUID)
   * @return meterId
   */
  @javax.annotation.Nullable
  public UUID getMeterId() {
    return meterId;
  }



  /**
   * Offer Id
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }



  /**
   * Part Number
   * @return partNumber
   */
  @javax.annotation.Nullable
  public String getPartNumber() {
    return partNumber;
  }



  /**
   * Unit of measure
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }



  /**
   * Unit Price
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getUnitPrice() {
    return unitPrice;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PriceSheetProperties priceSheetProperties = (PriceSheetProperties) o;
    return Objects.equals(this.billingPeriodId, priceSheetProperties.billingPeriodId) &&
        Objects.equals(this.currencyCode, priceSheetProperties.currencyCode) &&
        Objects.equals(this.includedQuantity, priceSheetProperties.includedQuantity) &&
        Objects.equals(this.meterDetails, priceSheetProperties.meterDetails) &&
        Objects.equals(this.meterId, priceSheetProperties.meterId) &&
        Objects.equals(this.offerId, priceSheetProperties.offerId) &&
        Objects.equals(this.partNumber, priceSheetProperties.partNumber) &&
        Objects.equals(this.unitOfMeasure, priceSheetProperties.unitOfMeasure) &&
        Objects.equals(this.unitPrice, priceSheetProperties.unitPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingPeriodId, currencyCode, includedQuantity, meterDetails, meterId, offerId, partNumber, unitOfMeasure, unitPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PriceSheetProperties {\n");
    sb.append("    billingPeriodId: ").append(toIndentedString(billingPeriodId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    includedQuantity: ").append(toIndentedString(includedQuantity)).append("\n");
    sb.append("    meterDetails: ").append(toIndentedString(meterDetails)).append("\n");
    sb.append("    meterId: ").append(toIndentedString(meterId)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    partNumber: ").append(toIndentedString(partNumber)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingPeriodId");
    openapiFields.add("currencyCode");
    openapiFields.add("includedQuantity");
    openapiFields.add("meterDetails");
    openapiFields.add("meterId");
    openapiFields.add("offerId");
    openapiFields.add("partNumber");
    openapiFields.add("unitOfMeasure");
    openapiFields.add("unitPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PriceSheetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PriceSheetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PriceSheetProperties is not found in the empty JSON string", PriceSheetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PriceSheetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PriceSheetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingPeriodId") != null && !jsonObj.get("billingPeriodId").isJsonNull()) && !jsonObj.get("billingPeriodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPeriodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPeriodId").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the optional field `meterDetails`
      if (jsonObj.get("meterDetails") != null && !jsonObj.get("meterDetails").isJsonNull()) {
        MeterDetails.validateJsonElement(jsonObj.get("meterDetails"));
      }
      if ((jsonObj.get("meterId") != null && !jsonObj.get("meterId").isJsonNull()) && !jsonObj.get("meterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterId").toString()));
      }
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      if ((jsonObj.get("partNumber") != null && !jsonObj.get("partNumber").isJsonNull()) && !jsonObj.get("partNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partNumber").toString()));
      }
      if ((jsonObj.get("unitOfMeasure") != null && !jsonObj.get("unitOfMeasure").isJsonNull()) && !jsonObj.get("unitOfMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitOfMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitOfMeasure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PriceSheetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PriceSheetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PriceSheetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PriceSheetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PriceSheetProperties>() {
           @Override
           public void write(JsonWriter out, PriceSheetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PriceSheetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PriceSheetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PriceSheetProperties
   * @throws IOException if the JSON string is invalid with respect to PriceSheetProperties
   */
  public static PriceSheetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PriceSheetProperties.class);
  }

  /**
   * Convert an instance of PriceSheetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

