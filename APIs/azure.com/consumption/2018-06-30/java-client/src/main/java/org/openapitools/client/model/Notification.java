/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-06-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The notification associated with a budget.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:29.052349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Notification {
  public static final String SERIALIZED_NAME_CONTACT_EMAILS = "contactEmails";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAILS)
  private List<String> contactEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACT_GROUPS = "contactGroups";
  @SerializedName(SERIALIZED_NAME_CONTACT_GROUPS)
  private List<String> contactGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACT_ROLES = "contactRoles";
  @SerializedName(SERIALIZED_NAME_CONTACT_ROLES)
  private List<String> contactRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  /**
   * The comparison operator.
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    EQUAL_TO("EqualTo"),
    
    GREATER_THAN("GreaterThan"),
    
    GREATER_THAN_OR_EQUAL_TO("GreaterThanOrEqualTo");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String value) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorEnum operator;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private BigDecimal threshold;

  public Notification() {
  }

  public Notification contactEmails(List<String> contactEmails) {
    this.contactEmails = contactEmails;
    return this;
  }

  public Notification addContactEmailsItem(String contactEmailsItem) {
    if (this.contactEmails == null) {
      this.contactEmails = new ArrayList<>();
    }
    this.contactEmails.add(contactEmailsItem);
    return this;
  }

  /**
   * Email addresses to send the budget notification to when the threshold is exceeded.
   * @return contactEmails
   */
  @javax.annotation.Nonnull
  public List<String> getContactEmails() {
    return contactEmails;
  }

  public void setContactEmails(List<String> contactEmails) {
    this.contactEmails = contactEmails;
  }


  public Notification contactGroups(List<String> contactGroups) {
    this.contactGroups = contactGroups;
    return this;
  }

  public Notification addContactGroupsItem(String contactGroupsItem) {
    if (this.contactGroups == null) {
      this.contactGroups = new ArrayList<>();
    }
    this.contactGroups.add(contactGroupsItem);
    return this;
  }

  /**
   * Action groups to send the budget notification to when the threshold is exceeded.
   * @return contactGroups
   */
  @javax.annotation.Nullable
  public List<String> getContactGroups() {
    return contactGroups;
  }

  public void setContactGroups(List<String> contactGroups) {
    this.contactGroups = contactGroups;
  }


  public Notification contactRoles(List<String> contactRoles) {
    this.contactRoles = contactRoles;
    return this;
  }

  public Notification addContactRolesItem(String contactRolesItem) {
    if (this.contactRoles == null) {
      this.contactRoles = new ArrayList<>();
    }
    this.contactRoles.add(contactRolesItem);
    return this;
  }

  /**
   * Contact roles to send the budget notification to when the threshold is exceeded.
   * @return contactRoles
   */
  @javax.annotation.Nullable
  public List<String> getContactRoles() {
    return contactRoles;
  }

  public void setContactRoles(List<String> contactRoles) {
    this.contactRoles = contactRoles;
  }


  public Notification enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * The notification is enabled or not.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Notification operator(OperatorEnum operator) {
    this.operator = operator;
    return this;
  }

  /**
   * The comparison operator.
   * @return operator
   */
  @javax.annotation.Nonnull
  public OperatorEnum getOperator() {
    return operator;
  }

  public void setOperator(OperatorEnum operator) {
    this.operator = operator;
  }


  public Notification threshold(BigDecimal threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
   * @return threshold
   */
  @javax.annotation.Nonnull
  public BigDecimal getThreshold() {
    return threshold;
  }

  public void setThreshold(BigDecimal threshold) {
    this.threshold = threshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Notification notification = (Notification) o;
    return Objects.equals(this.contactEmails, notification.contactEmails) &&
        Objects.equals(this.contactGroups, notification.contactGroups) &&
        Objects.equals(this.contactRoles, notification.contactRoles) &&
        Objects.equals(this.enabled, notification.enabled) &&
        Objects.equals(this.operator, notification.operator) &&
        Objects.equals(this.threshold, notification.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactEmails, contactGroups, contactRoles, enabled, operator, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Notification {\n");
    sb.append("    contactEmails: ").append(toIndentedString(contactEmails)).append("\n");
    sb.append("    contactGroups: ").append(toIndentedString(contactGroups)).append("\n");
    sb.append("    contactRoles: ").append(toIndentedString(contactRoles)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactEmails");
    openapiFields.add("contactGroups");
    openapiFields.add("contactRoles");
    openapiFields.add("enabled");
    openapiFields.add("operator");
    openapiFields.add("threshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contactEmails");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("operator");
    openapiRequiredFields.add("threshold");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Notification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Notification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Notification is not found in the empty JSON string", Notification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Notification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Notification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Notification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("contactEmails") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("contactEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactEmails` to be an array in the JSON string but got `%s`", jsonObj.get("contactEmails").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contactGroups") != null && !jsonObj.get("contactGroups").isJsonNull() && !jsonObj.get("contactGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactGroups` to be an array in the JSON string but got `%s`", jsonObj.get("contactGroups").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contactRoles") != null && !jsonObj.get("contactRoles").isJsonNull() && !jsonObj.get("contactRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactRoles` to be an array in the JSON string but got `%s`", jsonObj.get("contactRoles").toString()));
      }
      if (!jsonObj.get("operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operator").toString()));
      }
      // validate the required field `operator`
      OperatorEnum.validateJsonElement(jsonObj.get("operator"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Notification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Notification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Notification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Notification.class));

       return (TypeAdapter<T>) new TypeAdapter<Notification>() {
           @Override
           public void write(JsonWriter out, Notification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Notification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Notification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Notification
   * @throws IOException if the JSON string is invalid with respect to Notification
   */
  public static Notification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Notification.class);
  }

  /**
   * Convert an instance of Notification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

