/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-06-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsageDetailsApi_H
#define OAI_OAIUsageDetailsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIUsageDetailsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsageDetailsApi : public QObject {
    Q_OBJECT

public:
    OAIUsageDetailsApi(const int timeOut = 0);
    ~OAIUsageDetailsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void usageDetailsList(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void usageDetailsListByBillingAccount(const QString &billing_account_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void usageDetailsListByBillingPeriod(const QString &subscription_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  department_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void usageDetailsListByDepartment(const QString &department_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void usageDetailsListByEnrollmentAccount(const QString &enrollment_account_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  management_group_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void usageDetailsListByManagementGroup(const QString &management_group_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void usageDetailsListForBillingPeriodByBillingAccount(const QString &billing_account_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  department_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void usageDetailsListForBillingPeriodByDepartment(const QString &department_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void usageDetailsListForBillingPeriodByEnrollmentAccount(const QString &enrollment_account_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  management_group_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void usageDetailsListForBillingPeriodByManagementGroup(const QString &management_group_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usageDetailsListCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListByBillingPeriodCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListByDepartmentCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListByEnrollmentAccountCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListByManagementGroupCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListForBillingPeriodByBillingAccountCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListForBillingPeriodByDepartmentCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListForBillingPeriodByEnrollmentAccountCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListForBillingPeriodByManagementGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usageDetailsListSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListByBillingAccountSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListByBillingPeriodSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListByDepartmentSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListByEnrollmentAccountSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListByManagementGroupSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListForBillingPeriodByBillingAccountSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListForBillingPeriodByDepartmentSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListForBillingPeriodByEnrollmentAccountSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListForBillingPeriodByManagementGroupSignal(OAIUsageDetailsListResult summary);


    void usageDetailsListSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListByBillingPeriodSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListByEnrollmentAccountSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListByManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListForBillingPeriodByBillingAccountSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListForBillingPeriodByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListForBillingPeriodByEnrollmentAccountSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListForBillingPeriodByManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);

    Q_DECL_DEPRECATED_X("Use usageDetailsListSignalError() instead")
    void usageDetailsListSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByBillingAccountSignalError() instead")
    void usageDetailsListByBillingAccountSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByBillingAccountSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByBillingPeriodSignalError() instead")
    void usageDetailsListByBillingPeriodSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByBillingPeriodSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByDepartmentSignalError() instead")
    void usageDetailsListByDepartmentSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByDepartmentSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByEnrollmentAccountSignalError() instead")
    void usageDetailsListByEnrollmentAccountSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByEnrollmentAccountSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByManagementGroupSignalError() instead")
    void usageDetailsListByManagementGroupSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByManagementGroupSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListForBillingPeriodByBillingAccountSignalError() instead")
    void usageDetailsListForBillingPeriodByBillingAccountSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListForBillingPeriodByBillingAccountSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListForBillingPeriodByDepartmentSignalError() instead")
    void usageDetailsListForBillingPeriodByDepartmentSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListForBillingPeriodByDepartmentSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListForBillingPeriodByEnrollmentAccountSignalError() instead")
    void usageDetailsListForBillingPeriodByEnrollmentAccountSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListForBillingPeriodByEnrollmentAccountSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListForBillingPeriodByManagementGroupSignalError() instead")
    void usageDetailsListForBillingPeriodByManagementGroupSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListForBillingPeriodByManagementGroupSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usageDetailsListSignalErrorFull() instead")
    void usageDetailsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByBillingAccountSignalErrorFull() instead")
    void usageDetailsListByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByBillingPeriodSignalErrorFull() instead")
    void usageDetailsListByBillingPeriodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByBillingPeriodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByDepartmentSignalErrorFull() instead")
    void usageDetailsListByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByEnrollmentAccountSignalErrorFull() instead")
    void usageDetailsListByEnrollmentAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByEnrollmentAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByManagementGroupSignalErrorFull() instead")
    void usageDetailsListByManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListForBillingPeriodByBillingAccountSignalErrorFull() instead")
    void usageDetailsListForBillingPeriodByBillingAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListForBillingPeriodByBillingAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListForBillingPeriodByDepartmentSignalErrorFull() instead")
    void usageDetailsListForBillingPeriodByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListForBillingPeriodByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListForBillingPeriodByEnrollmentAccountSignalErrorFull() instead")
    void usageDetailsListForBillingPeriodByEnrollmentAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListForBillingPeriodByEnrollmentAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListForBillingPeriodByManagementGroupSignalErrorFull() instead")
    void usageDetailsListForBillingPeriodByManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListForBillingPeriodByManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
