/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-06-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReservationRecommendationProperties.h
 *
 * The properties of the reservation recommendation.
 */

#ifndef OAIReservationRecommendationProperties_H
#define OAIReservationRecommendationProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReservationRecommendationProperties : public OAIObject {
public:
    OAIReservationRecommendationProperties();
    OAIReservationRecommendationProperties(QString json);
    ~OAIReservationRecommendationProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCostWithNoReservedInstances() const;
    void setCostWithNoReservedInstances(const double &cost_with_no_reserved_instances);
    bool is_cost_with_no_reserved_instances_Set() const;
    bool is_cost_with_no_reserved_instances_Valid() const;

    QDateTime getFirstUsageDate() const;
    void setFirstUsageDate(const QDateTime &first_usage_date);
    bool is_first_usage_date_Set() const;
    bool is_first_usage_date_Valid() const;

    QString getLookBackPeriod() const;
    void setLookBackPeriod(const QString &look_back_period);
    bool is_look_back_period_Set() const;
    bool is_look_back_period_Valid() const;

    QString getMeterId() const;
    void setMeterId(const QString &meter_id);
    bool is_meter_id_Set() const;
    bool is_meter_id_Valid() const;

    double getNetSavings() const;
    void setNetSavings(const double &net_savings);
    bool is_net_savings_Set() const;
    bool is_net_savings_Valid() const;

    double getRecommendedQuantity() const;
    void setRecommendedQuantity(const double &recommended_quantity);
    bool is_recommended_quantity_Set() const;
    bool is_recommended_quantity_Valid() const;

    QString getScope() const;
    void setScope(const QString &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    QString getTerm() const;
    void setTerm(const QString &term);
    bool is_term_Set() const;
    bool is_term_Valid() const;

    double getTotalCostWithReservedInstances() const;
    void setTotalCostWithReservedInstances(const double &total_cost_with_reserved_instances);
    bool is_total_cost_with_reserved_instances_Set() const;
    bool is_total_cost_with_reserved_instances_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cost_with_no_reserved_instances;
    bool m_cost_with_no_reserved_instances_isSet;
    bool m_cost_with_no_reserved_instances_isValid;

    QDateTime m_first_usage_date;
    bool m_first_usage_date_isSet;
    bool m_first_usage_date_isValid;

    QString m_look_back_period;
    bool m_look_back_period_isSet;
    bool m_look_back_period_isValid;

    QString m_meter_id;
    bool m_meter_id_isSet;
    bool m_meter_id_isValid;

    double m_net_savings;
    bool m_net_savings_isSet;
    bool m_net_savings_isValid;

    double m_recommended_quantity;
    bool m_recommended_quantity_isSet;
    bool m_recommended_quantity_isValid;

    QString m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    QString m_term;
    bool m_term_isSet;
    bool m_term_isValid;

    double m_total_cost_with_reserved_instances;
    bool m_total_cost_with_reserved_instances_isSet;
    bool m_total_cost_with_reserved_instances_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReservationRecommendationProperties)

#endif // OAIReservationRecommendationProperties_H
