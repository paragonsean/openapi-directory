# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Filters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meters: List[str]=None, resource_groups: List[str]=None, resources: List[str]=None, tags: Dict[str, List[str]]=None):
        """Filters - a model defined in OpenAPI

        :param meters: The meters of this Filters.
        :param resource_groups: The resource_groups of this Filters.
        :param resources: The resources of this Filters.
        :param tags: The tags of this Filters.
        """
        self.openapi_types = {
            'meters': List[str],
            'resource_groups': List[str],
            'resources': List[str],
            'tags': Dict[str, List[str]]
        }

        self.attribute_map = {
            'meters': 'meters',
            'resource_groups': 'resourceGroups',
            'resources': 'resources',
            'tags': 'tags'
        }

        self._meters = meters
        self._resource_groups = resource_groups
        self._resources = resources
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filters of this Filters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meters(self):
        """Gets the meters of this Filters.

        The list of filters on meters (GUID), mandatory for budgets of usage category. 

        :return: The meters of this Filters.
        :rtype: List[str]
        """
        return self._meters

    @meters.setter
    def meters(self, meters):
        """Sets the meters of this Filters.

        The list of filters on meters (GUID), mandatory for budgets of usage category. 

        :param meters: The meters of this Filters.
        :type meters: List[str]
        """
        if meters is not None and len(meters) > 10:
            raise ValueError("Invalid value for `meters`, number of items must be less than or equal to `10`")
        if meters is not None and len(meters) < 0:
            raise ValueError("Invalid value for `meters`, number of items must be greater than or equal to `0`")

        self._meters = meters

    @property
    def resource_groups(self):
        """Gets the resource_groups of this Filters.

        The list of filters on resource groups, allowed at subscription level only.

        :return: The resource_groups of this Filters.
        :rtype: List[str]
        """
        return self._resource_groups

    @resource_groups.setter
    def resource_groups(self, resource_groups):
        """Sets the resource_groups of this Filters.

        The list of filters on resource groups, allowed at subscription level only.

        :param resource_groups: The resource_groups of this Filters.
        :type resource_groups: List[str]
        """
        if resource_groups is not None and len(resource_groups) > 10:
            raise ValueError("Invalid value for `resource_groups`, number of items must be less than or equal to `10`")
        if resource_groups is not None and len(resource_groups) < 0:
            raise ValueError("Invalid value for `resource_groups`, number of items must be greater than or equal to `0`")

        self._resource_groups = resource_groups

    @property
    def resources(self):
        """Gets the resources of this Filters.

        The list of filters on resources.

        :return: The resources of this Filters.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Filters.

        The list of filters on resources.

        :param resources: The resources of this Filters.
        :type resources: List[str]
        """
        if resources is not None and len(resources) > 10:
            raise ValueError("Invalid value for `resources`, number of items must be less than or equal to `10`")
        if resources is not None and len(resources) < 0:
            raise ValueError("Invalid value for `resources`, number of items must be greater than or equal to `0`")

        self._resources = resources

    @property
    def tags(self):
        """Gets the tags of this Filters.

        The dictionary of filters on tags.

        :return: The tags of this Filters.
        :rtype: Dict[str, List[str]]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Filters.

        The dictionary of filters on tags.

        :param tags: The tags of this Filters.
        :type tags: Dict[str, List[str]]
        """

        self._tags = tags
