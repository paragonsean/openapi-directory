/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BudgetTimePeriod from './BudgetTimePeriod';
import CurrentSpend from './CurrentSpend';
import Filters from './Filters';
import Notification from './Notification';

/**
 * The BudgetProperties model module.
 * @module model/BudgetProperties
 * @version 2019-06-01
 */
class BudgetProperties {
    /**
     * Constructs a new <code>BudgetProperties</code>.
     * The properties of the budget.
     * @alias module:model/BudgetProperties
     * @param amount {Number} The total amount of cost to track with the budget
     * @param category {module:model/BudgetProperties.CategoryEnum} The category of the budget, whether the budget tracks cost or usage.
     * @param timeGrain {module:model/BudgetProperties.TimeGrainEnum} The time covered by a budget. Tracking of the amount will be reset based on the time grain.
     * @param timePeriod {module:model/BudgetTimePeriod} 
     */
    constructor(amount, category, timeGrain, timePeriod) { 
        
        BudgetProperties.initialize(this, amount, category, timeGrain, timePeriod);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, category, timeGrain, timePeriod) { 
        obj['amount'] = amount;
        obj['category'] = category;
        obj['timeGrain'] = timeGrain;
        obj['timePeriod'] = timePeriod;
    }

    /**
     * Constructs a <code>BudgetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BudgetProperties} obj Optional instance to populate.
     * @return {module:model/BudgetProperties} The populated <code>BudgetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BudgetProperties();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('currentSpend')) {
                obj['currentSpend'] = CurrentSpend.constructFromObject(data['currentSpend']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = Filters.constructFromObject(data['filters']);
            }
            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = ApiClient.convertToType(data['notifications'], {'String': Notification});
            }
            if (data.hasOwnProperty('timeGrain')) {
                obj['timeGrain'] = ApiClient.convertToType(data['timeGrain'], 'String');
            }
            if (data.hasOwnProperty('timePeriod')) {
                obj['timePeriod'] = BudgetTimePeriod.constructFromObject(data['timePeriod']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BudgetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BudgetProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BudgetProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `currentSpend`
        if (data['currentSpend']) { // data not null
          CurrentSpend.validateJSON(data['currentSpend']);
        }
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          Filters.validateJSON(data['filters']);
        }
        // ensure the json data is a string
        if (data['timeGrain'] && !(typeof data['timeGrain'] === 'string' || data['timeGrain'] instanceof String)) {
            throw new Error("Expected the field `timeGrain` to be a primitive type in the JSON string but got " + data['timeGrain']);
        }
        // validate the optional field `timePeriod`
        if (data['timePeriod']) { // data not null
          BudgetTimePeriod.validateJSON(data['timePeriod']);
        }

        return true;
    }


}

BudgetProperties.RequiredProperties = ["amount", "category", "timeGrain", "timePeriod"];

/**
 * The total amount of cost to track with the budget
 * @member {Number} amount
 */
BudgetProperties.prototype['amount'] = undefined;

/**
 * The category of the budget, whether the budget tracks cost or usage.
 * @member {module:model/BudgetProperties.CategoryEnum} category
 */
BudgetProperties.prototype['category'] = undefined;

/**
 * @member {module:model/CurrentSpend} currentSpend
 */
BudgetProperties.prototype['currentSpend'] = undefined;

/**
 * @member {module:model/Filters} filters
 */
BudgetProperties.prototype['filters'] = undefined;

/**
 * Dictionary of notifications associated with the budget. Budget can have up to five notifications.
 * @member {Object.<String, module:model/Notification>} notifications
 */
BudgetProperties.prototype['notifications'] = undefined;

/**
 * The time covered by a budget. Tracking of the amount will be reset based on the time grain.
 * @member {module:model/BudgetProperties.TimeGrainEnum} timeGrain
 */
BudgetProperties.prototype['timeGrain'] = undefined;

/**
 * @member {module:model/BudgetTimePeriod} timePeriod
 */
BudgetProperties.prototype['timePeriod'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
BudgetProperties['CategoryEnum'] = {

    /**
     * value: "Cost"
     * @const
     */
    "Cost": "Cost",

    /**
     * value: "Usage"
     * @const
     */
    "Usage": "Usage"
};


/**
 * Allowed values for the <code>timeGrain</code> property.
 * @enum {String}
 * @readonly
 */
BudgetProperties['TimeGrainEnum'] = {

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "Quarterly"
     * @const
     */
    "Quarterly": "Quarterly",

    /**
     * value: "Annually"
     * @const
     */
    "Annually": "Annually",

    /**
     * value: "BillingMonth"
     * @const
     */
    "BillingMonth": "BillingMonth",

    /**
     * value: "BillingQuarter"
     * @const
     */
    "BillingQuarter": "BillingQuarter",

    /**
     * value: "BillingAnnual"
     * @const
     */
    "BillingAnnual": "BillingAnnual"
};



export default BudgetProperties;

