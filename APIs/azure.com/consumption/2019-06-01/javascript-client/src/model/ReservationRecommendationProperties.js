/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SkuProperty from './SkuProperty';

/**
 * The ReservationRecommendationProperties model module.
 * @module model/ReservationRecommendationProperties
 * @version 2019-06-01
 */
class ReservationRecommendationProperties {
    /**
     * Constructs a new <code>ReservationRecommendationProperties</code>.
     * The properties of the reservation recommendation.
     * @alias module:model/ReservationRecommendationProperties
     */
    constructor() { 
        
        ReservationRecommendationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReservationRecommendationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReservationRecommendationProperties} obj Optional instance to populate.
     * @return {module:model/ReservationRecommendationProperties} The populated <code>ReservationRecommendationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReservationRecommendationProperties();

            if (data.hasOwnProperty('costWithNoReservedInstances')) {
                obj['costWithNoReservedInstances'] = ApiClient.convertToType(data['costWithNoReservedInstances'], 'Number');
            }
            if (data.hasOwnProperty('firstUsageDate')) {
                obj['firstUsageDate'] = ApiClient.convertToType(data['firstUsageDate'], 'Date');
            }
            if (data.hasOwnProperty('instanceFlexibilityGroup')) {
                obj['instanceFlexibilityGroup'] = ApiClient.convertToType(data['instanceFlexibilityGroup'], 'String');
            }
            if (data.hasOwnProperty('instanceFlexibilityRatio')) {
                obj['instanceFlexibilityRatio'] = ApiClient.convertToType(data['instanceFlexibilityRatio'], 'Number');
            }
            if (data.hasOwnProperty('lookBackPeriod')) {
                obj['lookBackPeriod'] = ApiClient.convertToType(data['lookBackPeriod'], 'String');
            }
            if (data.hasOwnProperty('meterId')) {
                obj['meterId'] = ApiClient.convertToType(data['meterId'], 'String');
            }
            if (data.hasOwnProperty('netSavings')) {
                obj['netSavings'] = ApiClient.convertToType(data['netSavings'], 'Number');
            }
            if (data.hasOwnProperty('normalizedSize')) {
                obj['normalizedSize'] = ApiClient.convertToType(data['normalizedSize'], 'String');
            }
            if (data.hasOwnProperty('recommendedQuantity')) {
                obj['recommendedQuantity'] = ApiClient.convertToType(data['recommendedQuantity'], 'Number');
            }
            if (data.hasOwnProperty('recommendedQuantityNormalized')) {
                obj['recommendedQuantityNormalized'] = ApiClient.convertToType(data['recommendedQuantityNormalized'], 'Number');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('skuProperties')) {
                obj['skuProperties'] = ApiClient.convertToType(data['skuProperties'], [SkuProperty]);
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = ApiClient.convertToType(data['term'], 'String');
            }
            if (data.hasOwnProperty('totalCostWithReservedInstances')) {
                obj['totalCostWithReservedInstances'] = ApiClient.convertToType(data['totalCostWithReservedInstances'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReservationRecommendationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReservationRecommendationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['instanceFlexibilityGroup'] && !(typeof data['instanceFlexibilityGroup'] === 'string' || data['instanceFlexibilityGroup'] instanceof String)) {
            throw new Error("Expected the field `instanceFlexibilityGroup` to be a primitive type in the JSON string but got " + data['instanceFlexibilityGroup']);
        }
        // ensure the json data is a string
        if (data['lookBackPeriod'] && !(typeof data['lookBackPeriod'] === 'string' || data['lookBackPeriod'] instanceof String)) {
            throw new Error("Expected the field `lookBackPeriod` to be a primitive type in the JSON string but got " + data['lookBackPeriod']);
        }
        // ensure the json data is a string
        if (data['meterId'] && !(typeof data['meterId'] === 'string' || data['meterId'] instanceof String)) {
            throw new Error("Expected the field `meterId` to be a primitive type in the JSON string but got " + data['meterId']);
        }
        // ensure the json data is a string
        if (data['normalizedSize'] && !(typeof data['normalizedSize'] === 'string' || data['normalizedSize'] instanceof String)) {
            throw new Error("Expected the field `normalizedSize` to be a primitive type in the JSON string but got " + data['normalizedSize']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        if (data['skuProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['skuProperties'])) {
                throw new Error("Expected the field `skuProperties` to be an array in the JSON data but got " + data['skuProperties']);
            }
            // validate the optional field `skuProperties` (array)
            for (const item of data['skuProperties']) {
                SkuProperty.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['term'] && !(typeof data['term'] === 'string' || data['term'] instanceof String)) {
            throw new Error("Expected the field `term` to be a primitive type in the JSON string but got " + data['term']);
        }

        return true;
    }


}



/**
 * The total amount of cost without reserved instances.
 * @member {Number} costWithNoReservedInstances
 */
ReservationRecommendationProperties.prototype['costWithNoReservedInstances'] = undefined;

/**
 * The usage date for looking back.
 * @member {Date} firstUsageDate
 */
ReservationRecommendationProperties.prototype['firstUsageDate'] = undefined;

/**
 * The instance Flexibility Group.
 * @member {String} instanceFlexibilityGroup
 */
ReservationRecommendationProperties.prototype['instanceFlexibilityGroup'] = undefined;

/**
 * The instance Flexibility Ratio.
 * @member {Number} instanceFlexibilityRatio
 */
ReservationRecommendationProperties.prototype['instanceFlexibilityRatio'] = undefined;

/**
 * The number of days of usage to look back for recommendation.
 * @member {String} lookBackPeriod
 */
ReservationRecommendationProperties.prototype['lookBackPeriod'] = undefined;

/**
 * The meter id (GUID)
 * @member {String} meterId
 */
ReservationRecommendationProperties.prototype['meterId'] = undefined;

/**
 * Total estimated savings with reserved instances.
 * @member {Number} netSavings
 */
ReservationRecommendationProperties.prototype['netSavings'] = undefined;

/**
 * The normalized Size.
 * @member {String} normalizedSize
 */
ReservationRecommendationProperties.prototype['normalizedSize'] = undefined;

/**
 * Recommended quality for reserved instances.
 * @member {Number} recommendedQuantity
 */
ReservationRecommendationProperties.prototype['recommendedQuantity'] = undefined;

/**
 * The recommended Quantity Normalized.
 * @member {Number} recommendedQuantityNormalized
 */
ReservationRecommendationProperties.prototype['recommendedQuantityNormalized'] = undefined;

/**
 * Shared or single recommendation.
 * @member {String} scope
 */
ReservationRecommendationProperties.prototype['scope'] = undefined;

/**
 * List of sku properties
 * @member {Array.<module:model/SkuProperty>} skuProperties
 */
ReservationRecommendationProperties.prototype['skuProperties'] = undefined;

/**
 * RI recommendations in one or three year terms.
 * @member {String} term
 */
ReservationRecommendationProperties.prototype['term'] = undefined;

/**
 * The total amount of cost with reserved instances.
 * @member {Number} totalCostWithReservedInstances
 */
ReservationRecommendationProperties.prototype['totalCostWithReservedInstances'] = undefined;






export default ReservationRecommendationProperties;

