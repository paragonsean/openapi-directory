/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReservationSummaryProperties model module.
 * @module model/ReservationSummaryProperties
 * @version 2019-06-01
 */
class ReservationSummaryProperties {
    /**
     * Constructs a new <code>ReservationSummaryProperties</code>.
     * The properties of the reservation summary.
     * @alias module:model/ReservationSummaryProperties
     */
    constructor() { 
        
        ReservationSummaryProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReservationSummaryProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReservationSummaryProperties} obj Optional instance to populate.
     * @return {module:model/ReservationSummaryProperties} The populated <code>ReservationSummaryProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReservationSummaryProperties();

            if (data.hasOwnProperty('avgUtilizationPercentage')) {
                obj['avgUtilizationPercentage'] = ApiClient.convertToType(data['avgUtilizationPercentage'], 'Number');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('maxUtilizationPercentage')) {
                obj['maxUtilizationPercentage'] = ApiClient.convertToType(data['maxUtilizationPercentage'], 'Number');
            }
            if (data.hasOwnProperty('minUtilizationPercentage')) {
                obj['minUtilizationPercentage'] = ApiClient.convertToType(data['minUtilizationPercentage'], 'Number');
            }
            if (data.hasOwnProperty('purchasedQuantity')) {
                obj['purchasedQuantity'] = ApiClient.convertToType(data['purchasedQuantity'], 'Number');
            }
            if (data.hasOwnProperty('remainingQuantity')) {
                obj['remainingQuantity'] = ApiClient.convertToType(data['remainingQuantity'], 'Number');
            }
            if (data.hasOwnProperty('reservationId')) {
                obj['reservationId'] = ApiClient.convertToType(data['reservationId'], 'String');
            }
            if (data.hasOwnProperty('reservationOrderId')) {
                obj['reservationOrderId'] = ApiClient.convertToType(data['reservationOrderId'], 'String');
            }
            if (data.hasOwnProperty('reservedHours')) {
                obj['reservedHours'] = ApiClient.convertToType(data['reservedHours'], 'Number');
            }
            if (data.hasOwnProperty('skuName')) {
                obj['skuName'] = ApiClient.convertToType(data['skuName'], 'String');
            }
            if (data.hasOwnProperty('totalReservedQuantity')) {
                obj['totalReservedQuantity'] = ApiClient.convertToType(data['totalReservedQuantity'], 'Number');
            }
            if (data.hasOwnProperty('usageDate')) {
                obj['usageDate'] = ApiClient.convertToType(data['usageDate'], 'Date');
            }
            if (data.hasOwnProperty('usedHours')) {
                obj['usedHours'] = ApiClient.convertToType(data['usedHours'], 'Number');
            }
            if (data.hasOwnProperty('usedQuantity')) {
                obj['usedQuantity'] = ApiClient.convertToType(data['usedQuantity'], 'Number');
            }
            if (data.hasOwnProperty('utilizedPercentage')) {
                obj['utilizedPercentage'] = ApiClient.convertToType(data['utilizedPercentage'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReservationSummaryProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReservationSummaryProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['reservationId'] && !(typeof data['reservationId'] === 'string' || data['reservationId'] instanceof String)) {
            throw new Error("Expected the field `reservationId` to be a primitive type in the JSON string but got " + data['reservationId']);
        }
        // ensure the json data is a string
        if (data['reservationOrderId'] && !(typeof data['reservationOrderId'] === 'string' || data['reservationOrderId'] instanceof String)) {
            throw new Error("Expected the field `reservationOrderId` to be a primitive type in the JSON string but got " + data['reservationOrderId']);
        }
        // ensure the json data is a string
        if (data['skuName'] && !(typeof data['skuName'] === 'string' || data['skuName'] instanceof String)) {
            throw new Error("Expected the field `skuName` to be a primitive type in the JSON string but got " + data['skuName']);
        }

        return true;
    }


}



/**
 * This is average utilization for the entire time range. (day or month depending on the grain)
 * @member {Number} avgUtilizationPercentage
 */
ReservationSummaryProperties.prototype['avgUtilizationPercentage'] = undefined;

/**
 * The reservation kind.
 * @member {String} kind
 */
ReservationSummaryProperties.prototype['kind'] = undefined;

/**
 * This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.
 * @member {Number} maxUtilizationPercentage
 */
ReservationSummaryProperties.prototype['maxUtilizationPercentage'] = undefined;

/**
 * This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day
 * @member {Number} minUtilizationPercentage
 */
ReservationSummaryProperties.prototype['minUtilizationPercentage'] = undefined;

/**
 * This is the purchased quantity for the reservationId.
 * @member {Number} purchasedQuantity
 */
ReservationSummaryProperties.prototype['purchasedQuantity'] = undefined;

/**
 * This is the remaining quantity for the reservationId.
 * @member {Number} remainingQuantity
 */
ReservationSummaryProperties.prototype['remainingQuantity'] = undefined;

/**
 * The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.
 * @member {String} reservationId
 */
ReservationSummaryProperties.prototype['reservationId'] = undefined;

/**
 * The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.
 * @member {String} reservationOrderId
 */
ReservationSummaryProperties.prototype['reservationOrderId'] = undefined;

/**
 * This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days
 * @member {Number} reservedHours
 */
ReservationSummaryProperties.prototype['reservedHours'] = undefined;

/**
 * This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
 * @member {String} skuName
 */
ReservationSummaryProperties.prototype['skuName'] = undefined;

/**
 * This is the total count of instances that are reserved for the reservationId.
 * @member {Number} totalReservedQuantity
 */
ReservationSummaryProperties.prototype['totalReservedQuantity'] = undefined;

/**
 * Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.
 * @member {Date} usageDate
 */
ReservationSummaryProperties.prototype['usageDate'] = undefined;

/**
 * Total used hours by the reservation
 * @member {Number} usedHours
 */
ReservationSummaryProperties.prototype['usedHours'] = undefined;

/**
 * This is the used quantity for the reservationId.
 * @member {Number} usedQuantity
 */
ReservationSummaryProperties.prototype['usedQuantity'] = undefined;

/**
 * This is the utilized percentage for the reservation Id.
 * @member {Number} utilizedPercentage
 */
ReservationSummaryProperties.prototype['utilizedPercentage'] = undefined;






export default ReservationSummaryProperties;

