/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeterDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeterDetailsResponse::OAIMeterDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeterDetailsResponse::OAIMeterDetailsResponse() {
    this->initializeModel();
}

OAIMeterDetailsResponse::~OAIMeterDetailsResponse() {}

void OAIMeterDetailsResponse::initializeModel() {

    m_meter_category_isSet = false;
    m_meter_category_isValid = false;

    m_meter_name_isSet = false;
    m_meter_name_isValid = false;

    m_meter_sub_category_isSet = false;
    m_meter_sub_category_isValid = false;

    m_service_family_isSet = false;
    m_service_family_isValid = false;

    m_unit_of_measure_isSet = false;
    m_unit_of_measure_isValid = false;
}

void OAIMeterDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeterDetailsResponse::fromJsonObject(QJsonObject json) {

    m_meter_category_isValid = ::OpenAPI::fromJsonValue(m_meter_category, json[QString("meterCategory")]);
    m_meter_category_isSet = !json[QString("meterCategory")].isNull() && m_meter_category_isValid;

    m_meter_name_isValid = ::OpenAPI::fromJsonValue(m_meter_name, json[QString("meterName")]);
    m_meter_name_isSet = !json[QString("meterName")].isNull() && m_meter_name_isValid;

    m_meter_sub_category_isValid = ::OpenAPI::fromJsonValue(m_meter_sub_category, json[QString("meterSubCategory")]);
    m_meter_sub_category_isSet = !json[QString("meterSubCategory")].isNull() && m_meter_sub_category_isValid;

    m_service_family_isValid = ::OpenAPI::fromJsonValue(m_service_family, json[QString("serviceFamily")]);
    m_service_family_isSet = !json[QString("serviceFamily")].isNull() && m_service_family_isValid;

    m_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_of_measure, json[QString("unitOfMeasure")]);
    m_unit_of_measure_isSet = !json[QString("unitOfMeasure")].isNull() && m_unit_of_measure_isValid;
}

QString OAIMeterDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeterDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_meter_category_isSet) {
        obj.insert(QString("meterCategory"), ::OpenAPI::toJsonValue(m_meter_category));
    }
    if (m_meter_name_isSet) {
        obj.insert(QString("meterName"), ::OpenAPI::toJsonValue(m_meter_name));
    }
    if (m_meter_sub_category_isSet) {
        obj.insert(QString("meterSubCategory"), ::OpenAPI::toJsonValue(m_meter_sub_category));
    }
    if (m_service_family_isSet) {
        obj.insert(QString("serviceFamily"), ::OpenAPI::toJsonValue(m_service_family));
    }
    if (m_unit_of_measure_isSet) {
        obj.insert(QString("unitOfMeasure"), ::OpenAPI::toJsonValue(m_unit_of_measure));
    }
    return obj;
}

QString OAIMeterDetailsResponse::getMeterCategory() const {
    return m_meter_category;
}
void OAIMeterDetailsResponse::setMeterCategory(const QString &meter_category) {
    m_meter_category = meter_category;
    m_meter_category_isSet = true;
}

bool OAIMeterDetailsResponse::is_meter_category_Set() const{
    return m_meter_category_isSet;
}

bool OAIMeterDetailsResponse::is_meter_category_Valid() const{
    return m_meter_category_isValid;
}

QString OAIMeterDetailsResponse::getMeterName() const {
    return m_meter_name;
}
void OAIMeterDetailsResponse::setMeterName(const QString &meter_name) {
    m_meter_name = meter_name;
    m_meter_name_isSet = true;
}

bool OAIMeterDetailsResponse::is_meter_name_Set() const{
    return m_meter_name_isSet;
}

bool OAIMeterDetailsResponse::is_meter_name_Valid() const{
    return m_meter_name_isValid;
}

QString OAIMeterDetailsResponse::getMeterSubCategory() const {
    return m_meter_sub_category;
}
void OAIMeterDetailsResponse::setMeterSubCategory(const QString &meter_sub_category) {
    m_meter_sub_category = meter_sub_category;
    m_meter_sub_category_isSet = true;
}

bool OAIMeterDetailsResponse::is_meter_sub_category_Set() const{
    return m_meter_sub_category_isSet;
}

bool OAIMeterDetailsResponse::is_meter_sub_category_Valid() const{
    return m_meter_sub_category_isValid;
}

QString OAIMeterDetailsResponse::getServiceFamily() const {
    return m_service_family;
}
void OAIMeterDetailsResponse::setServiceFamily(const QString &service_family) {
    m_service_family = service_family;
    m_service_family_isSet = true;
}

bool OAIMeterDetailsResponse::is_service_family_Set() const{
    return m_service_family_isSet;
}

bool OAIMeterDetailsResponse::is_service_family_Valid() const{
    return m_service_family_isValid;
}

QString OAIMeterDetailsResponse::getUnitOfMeasure() const {
    return m_unit_of_measure;
}
void OAIMeterDetailsResponse::setUnitOfMeasure(const QString &unit_of_measure) {
    m_unit_of_measure = unit_of_measure;
    m_unit_of_measure_isSet = true;
}

bool OAIMeterDetailsResponse::is_unit_of_measure_Set() const{
    return m_unit_of_measure_isSet;
}

bool OAIMeterDetailsResponse::is_unit_of_measure_Valid() const{
    return m_unit_of_measure_isValid;
}

bool OAIMeterDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_meter_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_sub_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_of_measure_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeterDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
