/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageDetailProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageDetailProperties::OAIUsageDetailProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageDetailProperties::OAIUsageDetailProperties() {
    this->initializeModel();
}

OAIUsageDetailProperties::~OAIUsageDetailProperties() {}

void OAIUsageDetailProperties::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_owner_id_isSet = false;
    m_account_owner_id_isValid = false;

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_billing_account_id_isSet = false;
    m_billing_account_id_isValid = false;

    m_billing_account_name_isSet = false;
    m_billing_account_name_isValid = false;

    m_billing_currency_isSet = false;
    m_billing_currency_isValid = false;

    m_billing_period_end_date_isSet = false;
    m_billing_period_end_date_isValid = false;

    m_billing_period_start_date_isSet = false;
    m_billing_period_start_date_isValid = false;

    m_billing_profile_id_isSet = false;
    m_billing_profile_id_isValid = false;

    m_billing_profile_name_isSet = false;
    m_billing_profile_name_isValid = false;

    m_charge_type_isSet = false;
    m_charge_type_isValid = false;

    m_consumed_service_isSet = false;
    m_consumed_service_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_effective_price_isSet = false;
    m_effective_price_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_invoice_section_isSet = false;
    m_invoice_section_isValid = false;

    m_is_azure_credit_eligible_isSet = false;
    m_is_azure_credit_eligible_isValid = false;

    m_meter_details_isSet = false;
    m_meter_details_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_part_number_isSet = false;
    m_part_number_isValid = false;

    m_plan_name_isSet = false;
    m_plan_name_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_product_order_id_isSet = false;
    m_product_order_id_isValid = false;

    m_product_order_name_isSet = false;
    m_product_order_name_isValid = false;

    m_publisher_name_isSet = false;
    m_publisher_name_isValid = false;

    m_publisher_type_isSet = false;
    m_publisher_type_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reservation_id_isSet = false;
    m_reservation_id_isValid = false;

    m_reservation_name_isSet = false;
    m_reservation_name_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_location_isSet = false;
    m_resource_location_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_service_info1_isSet = false;
    m_service_info1_isValid = false;

    m_service_info2_isSet = false;
    m_service_info2_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_subscription_name_isSet = false;
    m_subscription_name_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAIUsageDetailProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageDetailProperties::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_owner_id_isValid = ::OpenAPI::fromJsonValue(m_account_owner_id, json[QString("accountOwnerId")]);
    m_account_owner_id_isSet = !json[QString("accountOwnerId")].isNull() && m_account_owner_id_isValid;

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_billing_account_id_isValid = ::OpenAPI::fromJsonValue(m_billing_account_id, json[QString("billingAccountId")]);
    m_billing_account_id_isSet = !json[QString("billingAccountId")].isNull() && m_billing_account_id_isValid;

    m_billing_account_name_isValid = ::OpenAPI::fromJsonValue(m_billing_account_name, json[QString("billingAccountName")]);
    m_billing_account_name_isSet = !json[QString("billingAccountName")].isNull() && m_billing_account_name_isValid;

    m_billing_currency_isValid = ::OpenAPI::fromJsonValue(m_billing_currency, json[QString("billingCurrency")]);
    m_billing_currency_isSet = !json[QString("billingCurrency")].isNull() && m_billing_currency_isValid;

    m_billing_period_end_date_isValid = ::OpenAPI::fromJsonValue(m_billing_period_end_date, json[QString("billingPeriodEndDate")]);
    m_billing_period_end_date_isSet = !json[QString("billingPeriodEndDate")].isNull() && m_billing_period_end_date_isValid;

    m_billing_period_start_date_isValid = ::OpenAPI::fromJsonValue(m_billing_period_start_date, json[QString("billingPeriodStartDate")]);
    m_billing_period_start_date_isSet = !json[QString("billingPeriodStartDate")].isNull() && m_billing_period_start_date_isValid;

    m_billing_profile_id_isValid = ::OpenAPI::fromJsonValue(m_billing_profile_id, json[QString("billingProfileId")]);
    m_billing_profile_id_isSet = !json[QString("billingProfileId")].isNull() && m_billing_profile_id_isValid;

    m_billing_profile_name_isValid = ::OpenAPI::fromJsonValue(m_billing_profile_name, json[QString("billingProfileName")]);
    m_billing_profile_name_isSet = !json[QString("billingProfileName")].isNull() && m_billing_profile_name_isValid;

    m_charge_type_isValid = ::OpenAPI::fromJsonValue(m_charge_type, json[QString("chargeType")]);
    m_charge_type_isSet = !json[QString("chargeType")].isNull() && m_charge_type_isValid;

    m_consumed_service_isValid = ::OpenAPI::fromJsonValue(m_consumed_service, json[QString("consumedService")]);
    m_consumed_service_isSet = !json[QString("consumedService")].isNull() && m_consumed_service_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_effective_price_isValid = ::OpenAPI::fromJsonValue(m_effective_price, json[QString("effectivePrice")]);
    m_effective_price_isSet = !json[QString("effectivePrice")].isNull() && m_effective_price_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_invoice_section_isValid = ::OpenAPI::fromJsonValue(m_invoice_section, json[QString("invoiceSection")]);
    m_invoice_section_isSet = !json[QString("invoiceSection")].isNull() && m_invoice_section_isValid;

    m_is_azure_credit_eligible_isValid = ::OpenAPI::fromJsonValue(m_is_azure_credit_eligible, json[QString("isAzureCreditEligible")]);
    m_is_azure_credit_eligible_isSet = !json[QString("isAzureCreditEligible")].isNull() && m_is_azure_credit_eligible_isValid;

    m_meter_details_isValid = ::OpenAPI::fromJsonValue(m_meter_details, json[QString("meterDetails")]);
    m_meter_details_isSet = !json[QString("meterDetails")].isNull() && m_meter_details_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("meterId")]);
    m_meter_id_isSet = !json[QString("meterId")].isNull() && m_meter_id_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("partNumber")]);
    m_part_number_isSet = !json[QString("partNumber")].isNull() && m_part_number_isValid;

    m_plan_name_isValid = ::OpenAPI::fromJsonValue(m_plan_name, json[QString("planName")]);
    m_plan_name_isSet = !json[QString("planName")].isNull() && m_plan_name_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_product_order_id_isValid = ::OpenAPI::fromJsonValue(m_product_order_id, json[QString("productOrderId")]);
    m_product_order_id_isSet = !json[QString("productOrderId")].isNull() && m_product_order_id_isValid;

    m_product_order_name_isValid = ::OpenAPI::fromJsonValue(m_product_order_name, json[QString("productOrderName")]);
    m_product_order_name_isSet = !json[QString("productOrderName")].isNull() && m_product_order_name_isValid;

    m_publisher_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_name, json[QString("publisherName")]);
    m_publisher_name_isSet = !json[QString("publisherName")].isNull() && m_publisher_name_isValid;

    m_publisher_type_isValid = ::OpenAPI::fromJsonValue(m_publisher_type, json[QString("publisherType")]);
    m_publisher_type_isSet = !json[QString("publisherType")].isNull() && m_publisher_type_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reservation_id_isValid = ::OpenAPI::fromJsonValue(m_reservation_id, json[QString("reservationId")]);
    m_reservation_id_isSet = !json[QString("reservationId")].isNull() && m_reservation_id_isValid;

    m_reservation_name_isValid = ::OpenAPI::fromJsonValue(m_reservation_name, json[QString("reservationName")]);
    m_reservation_name_isSet = !json[QString("reservationName")].isNull() && m_reservation_name_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_location_isValid = ::OpenAPI::fromJsonValue(m_resource_location, json[QString("resourceLocation")]);
    m_resource_location_isSet = !json[QString("resourceLocation")].isNull() && m_resource_location_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_service_info1_isValid = ::OpenAPI::fromJsonValue(m_service_info1, json[QString("serviceInfo1")]);
    m_service_info1_isSet = !json[QString("serviceInfo1")].isNull() && m_service_info1_isValid;

    m_service_info2_isValid = ::OpenAPI::fromJsonValue(m_service_info2, json[QString("serviceInfo2")]);
    m_service_info2_isSet = !json[QString("serviceInfo2")].isNull() && m_service_info2_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_subscription_name_isValid = ::OpenAPI::fromJsonValue(m_subscription_name, json[QString("subscriptionName")]);
    m_subscription_name_isSet = !json[QString("subscriptionName")].isNull() && m_subscription_name_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;
}

QString OAIUsageDetailProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageDetailProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_owner_id_isSet) {
        obj.insert(QString("accountOwnerId"), ::OpenAPI::toJsonValue(m_account_owner_id));
    }
    if (m_additional_info_isSet) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_billing_account_id_isSet) {
        obj.insert(QString("billingAccountId"), ::OpenAPI::toJsonValue(m_billing_account_id));
    }
    if (m_billing_account_name_isSet) {
        obj.insert(QString("billingAccountName"), ::OpenAPI::toJsonValue(m_billing_account_name));
    }
    if (m_billing_currency_isSet) {
        obj.insert(QString("billingCurrency"), ::OpenAPI::toJsonValue(m_billing_currency));
    }
    if (m_billing_period_end_date_isSet) {
        obj.insert(QString("billingPeriodEndDate"), ::OpenAPI::toJsonValue(m_billing_period_end_date));
    }
    if (m_billing_period_start_date_isSet) {
        obj.insert(QString("billingPeriodStartDate"), ::OpenAPI::toJsonValue(m_billing_period_start_date));
    }
    if (m_billing_profile_id_isSet) {
        obj.insert(QString("billingProfileId"), ::OpenAPI::toJsonValue(m_billing_profile_id));
    }
    if (m_billing_profile_name_isSet) {
        obj.insert(QString("billingProfileName"), ::OpenAPI::toJsonValue(m_billing_profile_name));
    }
    if (m_charge_type_isSet) {
        obj.insert(QString("chargeType"), ::OpenAPI::toJsonValue(m_charge_type));
    }
    if (m_consumed_service_isSet) {
        obj.insert(QString("consumedService"), ::OpenAPI::toJsonValue(m_consumed_service));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_cost_center_isSet) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_effective_price_isSet) {
        obj.insert(QString("effectivePrice"), ::OpenAPI::toJsonValue(m_effective_price));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_invoice_section_isSet) {
        obj.insert(QString("invoiceSection"), ::OpenAPI::toJsonValue(m_invoice_section));
    }
    if (m_is_azure_credit_eligible_isSet) {
        obj.insert(QString("isAzureCreditEligible"), ::OpenAPI::toJsonValue(m_is_azure_credit_eligible));
    }
    if (m_meter_details.isSet()) {
        obj.insert(QString("meterDetails"), ::OpenAPI::toJsonValue(m_meter_details));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("meterId"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_part_number_isSet) {
        obj.insert(QString("partNumber"), ::OpenAPI::toJsonValue(m_part_number));
    }
    if (m_plan_name_isSet) {
        obj.insert(QString("planName"), ::OpenAPI::toJsonValue(m_plan_name));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_product_order_id_isSet) {
        obj.insert(QString("productOrderId"), ::OpenAPI::toJsonValue(m_product_order_id));
    }
    if (m_product_order_name_isSet) {
        obj.insert(QString("productOrderName"), ::OpenAPI::toJsonValue(m_product_order_name));
    }
    if (m_publisher_name_isSet) {
        obj.insert(QString("publisherName"), ::OpenAPI::toJsonValue(m_publisher_name));
    }
    if (m_publisher_type_isSet) {
        obj.insert(QString("publisherType"), ::OpenAPI::toJsonValue(m_publisher_type));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reservation_id_isSet) {
        obj.insert(QString("reservationId"), ::OpenAPI::toJsonValue(m_reservation_id));
    }
    if (m_reservation_name_isSet) {
        obj.insert(QString("reservationName"), ::OpenAPI::toJsonValue(m_reservation_name));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_location_isSet) {
        obj.insert(QString("resourceLocation"), ::OpenAPI::toJsonValue(m_resource_location));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_service_info1_isSet) {
        obj.insert(QString("serviceInfo1"), ::OpenAPI::toJsonValue(m_service_info1));
    }
    if (m_service_info2_isSet) {
        obj.insert(QString("serviceInfo2"), ::OpenAPI::toJsonValue(m_service_info2));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_subscription_name_isSet) {
        obj.insert(QString("subscriptionName"), ::OpenAPI::toJsonValue(m_subscription_name));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

QString OAIUsageDetailProperties::getAccountName() const {
    return m_account_name;
}
void OAIUsageDetailProperties::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIUsageDetailProperties::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIUsageDetailProperties::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIUsageDetailProperties::getAccountOwnerId() const {
    return m_account_owner_id;
}
void OAIUsageDetailProperties::setAccountOwnerId(const QString &account_owner_id) {
    m_account_owner_id = account_owner_id;
    m_account_owner_id_isSet = true;
}

bool OAIUsageDetailProperties::is_account_owner_id_Set() const{
    return m_account_owner_id_isSet;
}

bool OAIUsageDetailProperties::is_account_owner_id_Valid() const{
    return m_account_owner_id_isValid;
}

QString OAIUsageDetailProperties::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIUsageDetailProperties::setAdditionalInfo(const QString &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIUsageDetailProperties::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIUsageDetailProperties::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QString OAIUsageDetailProperties::getBillingAccountId() const {
    return m_billing_account_id;
}
void OAIUsageDetailProperties::setBillingAccountId(const QString &billing_account_id) {
    m_billing_account_id = billing_account_id;
    m_billing_account_id_isSet = true;
}

bool OAIUsageDetailProperties::is_billing_account_id_Set() const{
    return m_billing_account_id_isSet;
}

bool OAIUsageDetailProperties::is_billing_account_id_Valid() const{
    return m_billing_account_id_isValid;
}

QString OAIUsageDetailProperties::getBillingAccountName() const {
    return m_billing_account_name;
}
void OAIUsageDetailProperties::setBillingAccountName(const QString &billing_account_name) {
    m_billing_account_name = billing_account_name;
    m_billing_account_name_isSet = true;
}

bool OAIUsageDetailProperties::is_billing_account_name_Set() const{
    return m_billing_account_name_isSet;
}

bool OAIUsageDetailProperties::is_billing_account_name_Valid() const{
    return m_billing_account_name_isValid;
}

QString OAIUsageDetailProperties::getBillingCurrency() const {
    return m_billing_currency;
}
void OAIUsageDetailProperties::setBillingCurrency(const QString &billing_currency) {
    m_billing_currency = billing_currency;
    m_billing_currency_isSet = true;
}

bool OAIUsageDetailProperties::is_billing_currency_Set() const{
    return m_billing_currency_isSet;
}

bool OAIUsageDetailProperties::is_billing_currency_Valid() const{
    return m_billing_currency_isValid;
}

QDateTime OAIUsageDetailProperties::getBillingPeriodEndDate() const {
    return m_billing_period_end_date;
}
void OAIUsageDetailProperties::setBillingPeriodEndDate(const QDateTime &billing_period_end_date) {
    m_billing_period_end_date = billing_period_end_date;
    m_billing_period_end_date_isSet = true;
}

bool OAIUsageDetailProperties::is_billing_period_end_date_Set() const{
    return m_billing_period_end_date_isSet;
}

bool OAIUsageDetailProperties::is_billing_period_end_date_Valid() const{
    return m_billing_period_end_date_isValid;
}

QDateTime OAIUsageDetailProperties::getBillingPeriodStartDate() const {
    return m_billing_period_start_date;
}
void OAIUsageDetailProperties::setBillingPeriodStartDate(const QDateTime &billing_period_start_date) {
    m_billing_period_start_date = billing_period_start_date;
    m_billing_period_start_date_isSet = true;
}

bool OAIUsageDetailProperties::is_billing_period_start_date_Set() const{
    return m_billing_period_start_date_isSet;
}

bool OAIUsageDetailProperties::is_billing_period_start_date_Valid() const{
    return m_billing_period_start_date_isValid;
}

QString OAIUsageDetailProperties::getBillingProfileId() const {
    return m_billing_profile_id;
}
void OAIUsageDetailProperties::setBillingProfileId(const QString &billing_profile_id) {
    m_billing_profile_id = billing_profile_id;
    m_billing_profile_id_isSet = true;
}

bool OAIUsageDetailProperties::is_billing_profile_id_Set() const{
    return m_billing_profile_id_isSet;
}

bool OAIUsageDetailProperties::is_billing_profile_id_Valid() const{
    return m_billing_profile_id_isValid;
}

QString OAIUsageDetailProperties::getBillingProfileName() const {
    return m_billing_profile_name;
}
void OAIUsageDetailProperties::setBillingProfileName(const QString &billing_profile_name) {
    m_billing_profile_name = billing_profile_name;
    m_billing_profile_name_isSet = true;
}

bool OAIUsageDetailProperties::is_billing_profile_name_Set() const{
    return m_billing_profile_name_isSet;
}

bool OAIUsageDetailProperties::is_billing_profile_name_Valid() const{
    return m_billing_profile_name_isValid;
}

QString OAIUsageDetailProperties::getChargeType() const {
    return m_charge_type;
}
void OAIUsageDetailProperties::setChargeType(const QString &charge_type) {
    m_charge_type = charge_type;
    m_charge_type_isSet = true;
}

bool OAIUsageDetailProperties::is_charge_type_Set() const{
    return m_charge_type_isSet;
}

bool OAIUsageDetailProperties::is_charge_type_Valid() const{
    return m_charge_type_isValid;
}

QString OAIUsageDetailProperties::getConsumedService() const {
    return m_consumed_service;
}
void OAIUsageDetailProperties::setConsumedService(const QString &consumed_service) {
    m_consumed_service = consumed_service;
    m_consumed_service_isSet = true;
}

bool OAIUsageDetailProperties::is_consumed_service_Set() const{
    return m_consumed_service_isSet;
}

bool OAIUsageDetailProperties::is_consumed_service_Valid() const{
    return m_consumed_service_isValid;
}

double OAIUsageDetailProperties::getCost() const {
    return m_cost;
}
void OAIUsageDetailProperties::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIUsageDetailProperties::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIUsageDetailProperties::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIUsageDetailProperties::getCostCenter() const {
    return m_cost_center;
}
void OAIUsageDetailProperties::setCostCenter(const QString &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIUsageDetailProperties::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIUsageDetailProperties::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

QDateTime OAIUsageDetailProperties::getDate() const {
    return m_date;
}
void OAIUsageDetailProperties::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIUsageDetailProperties::is_date_Set() const{
    return m_date_isSet;
}

bool OAIUsageDetailProperties::is_date_Valid() const{
    return m_date_isValid;
}

double OAIUsageDetailProperties::getEffectivePrice() const {
    return m_effective_price;
}
void OAIUsageDetailProperties::setEffectivePrice(const double &effective_price) {
    m_effective_price = effective_price;
    m_effective_price_isSet = true;
}

bool OAIUsageDetailProperties::is_effective_price_Set() const{
    return m_effective_price_isSet;
}

bool OAIUsageDetailProperties::is_effective_price_Valid() const{
    return m_effective_price_isValid;
}

QString OAIUsageDetailProperties::getFrequency() const {
    return m_frequency;
}
void OAIUsageDetailProperties::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIUsageDetailProperties::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIUsageDetailProperties::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIUsageDetailProperties::getInvoiceSection() const {
    return m_invoice_section;
}
void OAIUsageDetailProperties::setInvoiceSection(const QString &invoice_section) {
    m_invoice_section = invoice_section;
    m_invoice_section_isSet = true;
}

bool OAIUsageDetailProperties::is_invoice_section_Set() const{
    return m_invoice_section_isSet;
}

bool OAIUsageDetailProperties::is_invoice_section_Valid() const{
    return m_invoice_section_isValid;
}

bool OAIUsageDetailProperties::isIsAzureCreditEligible() const {
    return m_is_azure_credit_eligible;
}
void OAIUsageDetailProperties::setIsAzureCreditEligible(const bool &is_azure_credit_eligible) {
    m_is_azure_credit_eligible = is_azure_credit_eligible;
    m_is_azure_credit_eligible_isSet = true;
}

bool OAIUsageDetailProperties::is_is_azure_credit_eligible_Set() const{
    return m_is_azure_credit_eligible_isSet;
}

bool OAIUsageDetailProperties::is_is_azure_credit_eligible_Valid() const{
    return m_is_azure_credit_eligible_isValid;
}

OAIMeterDetailsResponse OAIUsageDetailProperties::getMeterDetails() const {
    return m_meter_details;
}
void OAIUsageDetailProperties::setMeterDetails(const OAIMeterDetailsResponse &meter_details) {
    m_meter_details = meter_details;
    m_meter_details_isSet = true;
}

bool OAIUsageDetailProperties::is_meter_details_Set() const{
    return m_meter_details_isSet;
}

bool OAIUsageDetailProperties::is_meter_details_Valid() const{
    return m_meter_details_isValid;
}

QString OAIUsageDetailProperties::getMeterId() const {
    return m_meter_id;
}
void OAIUsageDetailProperties::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIUsageDetailProperties::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIUsageDetailProperties::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

QString OAIUsageDetailProperties::getOfferId() const {
    return m_offer_id;
}
void OAIUsageDetailProperties::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIUsageDetailProperties::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIUsageDetailProperties::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAIUsageDetailProperties::getPartNumber() const {
    return m_part_number;
}
void OAIUsageDetailProperties::setPartNumber(const QString &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIUsageDetailProperties::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIUsageDetailProperties::is_part_number_Valid() const{
    return m_part_number_isValid;
}

QString OAIUsageDetailProperties::getPlanName() const {
    return m_plan_name;
}
void OAIUsageDetailProperties::setPlanName(const QString &plan_name) {
    m_plan_name = plan_name;
    m_plan_name_isSet = true;
}

bool OAIUsageDetailProperties::is_plan_name_Set() const{
    return m_plan_name_isSet;
}

bool OAIUsageDetailProperties::is_plan_name_Valid() const{
    return m_plan_name_isValid;
}

QString OAIUsageDetailProperties::getProduct() const {
    return m_product;
}
void OAIUsageDetailProperties::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIUsageDetailProperties::is_product_Set() const{
    return m_product_isSet;
}

bool OAIUsageDetailProperties::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIUsageDetailProperties::getProductOrderId() const {
    return m_product_order_id;
}
void OAIUsageDetailProperties::setProductOrderId(const QString &product_order_id) {
    m_product_order_id = product_order_id;
    m_product_order_id_isSet = true;
}

bool OAIUsageDetailProperties::is_product_order_id_Set() const{
    return m_product_order_id_isSet;
}

bool OAIUsageDetailProperties::is_product_order_id_Valid() const{
    return m_product_order_id_isValid;
}

QString OAIUsageDetailProperties::getProductOrderName() const {
    return m_product_order_name;
}
void OAIUsageDetailProperties::setProductOrderName(const QString &product_order_name) {
    m_product_order_name = product_order_name;
    m_product_order_name_isSet = true;
}

bool OAIUsageDetailProperties::is_product_order_name_Set() const{
    return m_product_order_name_isSet;
}

bool OAIUsageDetailProperties::is_product_order_name_Valid() const{
    return m_product_order_name_isValid;
}

QString OAIUsageDetailProperties::getPublisherName() const {
    return m_publisher_name;
}
void OAIUsageDetailProperties::setPublisherName(const QString &publisher_name) {
    m_publisher_name = publisher_name;
    m_publisher_name_isSet = true;
}

bool OAIUsageDetailProperties::is_publisher_name_Set() const{
    return m_publisher_name_isSet;
}

bool OAIUsageDetailProperties::is_publisher_name_Valid() const{
    return m_publisher_name_isValid;
}

QString OAIUsageDetailProperties::getPublisherType() const {
    return m_publisher_type;
}
void OAIUsageDetailProperties::setPublisherType(const QString &publisher_type) {
    m_publisher_type = publisher_type;
    m_publisher_type_isSet = true;
}

bool OAIUsageDetailProperties::is_publisher_type_Set() const{
    return m_publisher_type_isSet;
}

bool OAIUsageDetailProperties::is_publisher_type_Valid() const{
    return m_publisher_type_isValid;
}

double OAIUsageDetailProperties::getQuantity() const {
    return m_quantity;
}
void OAIUsageDetailProperties::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIUsageDetailProperties::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIUsageDetailProperties::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIUsageDetailProperties::getReservationId() const {
    return m_reservation_id;
}
void OAIUsageDetailProperties::setReservationId(const QString &reservation_id) {
    m_reservation_id = reservation_id;
    m_reservation_id_isSet = true;
}

bool OAIUsageDetailProperties::is_reservation_id_Set() const{
    return m_reservation_id_isSet;
}

bool OAIUsageDetailProperties::is_reservation_id_Valid() const{
    return m_reservation_id_isValid;
}

QString OAIUsageDetailProperties::getReservationName() const {
    return m_reservation_name;
}
void OAIUsageDetailProperties::setReservationName(const QString &reservation_name) {
    m_reservation_name = reservation_name;
    m_reservation_name_isSet = true;
}

bool OAIUsageDetailProperties::is_reservation_name_Set() const{
    return m_reservation_name_isSet;
}

bool OAIUsageDetailProperties::is_reservation_name_Valid() const{
    return m_reservation_name_isValid;
}

QString OAIUsageDetailProperties::getResourceGroup() const {
    return m_resource_group;
}
void OAIUsageDetailProperties::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIUsageDetailProperties::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIUsageDetailProperties::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIUsageDetailProperties::getResourceId() const {
    return m_resource_id;
}
void OAIUsageDetailProperties::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIUsageDetailProperties::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIUsageDetailProperties::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIUsageDetailProperties::getResourceLocation() const {
    return m_resource_location;
}
void OAIUsageDetailProperties::setResourceLocation(const QString &resource_location) {
    m_resource_location = resource_location;
    m_resource_location_isSet = true;
}

bool OAIUsageDetailProperties::is_resource_location_Set() const{
    return m_resource_location_isSet;
}

bool OAIUsageDetailProperties::is_resource_location_Valid() const{
    return m_resource_location_isValid;
}

QString OAIUsageDetailProperties::getResourceName() const {
    return m_resource_name;
}
void OAIUsageDetailProperties::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIUsageDetailProperties::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIUsageDetailProperties::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIUsageDetailProperties::getServiceInfo1() const {
    return m_service_info1;
}
void OAIUsageDetailProperties::setServiceInfo1(const QString &service_info1) {
    m_service_info1 = service_info1;
    m_service_info1_isSet = true;
}

bool OAIUsageDetailProperties::is_service_info1_Set() const{
    return m_service_info1_isSet;
}

bool OAIUsageDetailProperties::is_service_info1_Valid() const{
    return m_service_info1_isValid;
}

QString OAIUsageDetailProperties::getServiceInfo2() const {
    return m_service_info2;
}
void OAIUsageDetailProperties::setServiceInfo2(const QString &service_info2) {
    m_service_info2 = service_info2;
    m_service_info2_isSet = true;
}

bool OAIUsageDetailProperties::is_service_info2_Set() const{
    return m_service_info2_isSet;
}

bool OAIUsageDetailProperties::is_service_info2_Valid() const{
    return m_service_info2_isValid;
}

QString OAIUsageDetailProperties::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIUsageDetailProperties::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIUsageDetailProperties::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIUsageDetailProperties::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIUsageDetailProperties::getSubscriptionName() const {
    return m_subscription_name;
}
void OAIUsageDetailProperties::setSubscriptionName(const QString &subscription_name) {
    m_subscription_name = subscription_name;
    m_subscription_name_isSet = true;
}

bool OAIUsageDetailProperties::is_subscription_name_Set() const{
    return m_subscription_name_isSet;
}

bool OAIUsageDetailProperties::is_subscription_name_Valid() const{
    return m_subscription_name_isValid;
}

QString OAIUsageDetailProperties::getTerm() const {
    return m_term;
}
void OAIUsageDetailProperties::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIUsageDetailProperties::is_term_Set() const{
    return m_term_isSet;
}

bool OAIUsageDetailProperties::is_term_Valid() const{
    return m_term_isValid;
}

double OAIUsageDetailProperties::getUnitPrice() const {
    return m_unit_price;
}
void OAIUsageDetailProperties::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIUsageDetailProperties::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIUsageDetailProperties::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAIUsageDetailProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charge_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_azure_credit_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_order_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_info1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_info2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageDetailProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
