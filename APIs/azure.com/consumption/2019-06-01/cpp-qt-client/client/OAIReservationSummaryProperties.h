/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReservationSummaryProperties.h
 *
 * The properties of the reservation summary.
 */

#ifndef OAIReservationSummaryProperties_H
#define OAIReservationSummaryProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReservationSummaryProperties : public OAIObject {
public:
    OAIReservationSummaryProperties();
    OAIReservationSummaryProperties(QString json);
    ~OAIReservationSummaryProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAvgUtilizationPercentage() const;
    void setAvgUtilizationPercentage(const double &avg_utilization_percentage);
    bool is_avg_utilization_percentage_Set() const;
    bool is_avg_utilization_percentage_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    double getMaxUtilizationPercentage() const;
    void setMaxUtilizationPercentage(const double &max_utilization_percentage);
    bool is_max_utilization_percentage_Set() const;
    bool is_max_utilization_percentage_Valid() const;

    double getMinUtilizationPercentage() const;
    void setMinUtilizationPercentage(const double &min_utilization_percentage);
    bool is_min_utilization_percentage_Set() const;
    bool is_min_utilization_percentage_Valid() const;

    double getPurchasedQuantity() const;
    void setPurchasedQuantity(const double &purchased_quantity);
    bool is_purchased_quantity_Set() const;
    bool is_purchased_quantity_Valid() const;

    double getRemainingQuantity() const;
    void setRemainingQuantity(const double &remaining_quantity);
    bool is_remaining_quantity_Set() const;
    bool is_remaining_quantity_Valid() const;

    QString getReservationId() const;
    void setReservationId(const QString &reservation_id);
    bool is_reservation_id_Set() const;
    bool is_reservation_id_Valid() const;

    QString getReservationOrderId() const;
    void setReservationOrderId(const QString &reservation_order_id);
    bool is_reservation_order_id_Set() const;
    bool is_reservation_order_id_Valid() const;

    double getReservedHours() const;
    void setReservedHours(const double &reserved_hours);
    bool is_reserved_hours_Set() const;
    bool is_reserved_hours_Valid() const;

    QString getSkuName() const;
    void setSkuName(const QString &sku_name);
    bool is_sku_name_Set() const;
    bool is_sku_name_Valid() const;

    double getTotalReservedQuantity() const;
    void setTotalReservedQuantity(const double &total_reserved_quantity);
    bool is_total_reserved_quantity_Set() const;
    bool is_total_reserved_quantity_Valid() const;

    QDateTime getUsageDate() const;
    void setUsageDate(const QDateTime &usage_date);
    bool is_usage_date_Set() const;
    bool is_usage_date_Valid() const;

    double getUsedHours() const;
    void setUsedHours(const double &used_hours);
    bool is_used_hours_Set() const;
    bool is_used_hours_Valid() const;

    double getUsedQuantity() const;
    void setUsedQuantity(const double &used_quantity);
    bool is_used_quantity_Set() const;
    bool is_used_quantity_Valid() const;

    double getUtilizedPercentage() const;
    void setUtilizedPercentage(const double &utilized_percentage);
    bool is_utilized_percentage_Set() const;
    bool is_utilized_percentage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_avg_utilization_percentage;
    bool m_avg_utilization_percentage_isSet;
    bool m_avg_utilization_percentage_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    double m_max_utilization_percentage;
    bool m_max_utilization_percentage_isSet;
    bool m_max_utilization_percentage_isValid;

    double m_min_utilization_percentage;
    bool m_min_utilization_percentage_isSet;
    bool m_min_utilization_percentage_isValid;

    double m_purchased_quantity;
    bool m_purchased_quantity_isSet;
    bool m_purchased_quantity_isValid;

    double m_remaining_quantity;
    bool m_remaining_quantity_isSet;
    bool m_remaining_quantity_isValid;

    QString m_reservation_id;
    bool m_reservation_id_isSet;
    bool m_reservation_id_isValid;

    QString m_reservation_order_id;
    bool m_reservation_order_id_isSet;
    bool m_reservation_order_id_isValid;

    double m_reserved_hours;
    bool m_reserved_hours_isSet;
    bool m_reserved_hours_isValid;

    QString m_sku_name;
    bool m_sku_name_isSet;
    bool m_sku_name_isValid;

    double m_total_reserved_quantity;
    bool m_total_reserved_quantity_isSet;
    bool m_total_reserved_quantity_isValid;

    QDateTime m_usage_date;
    bool m_usage_date_isSet;
    bool m_usage_date_isValid;

    double m_used_hours;
    bool m_used_hours_isSet;
    bool m_used_hours_isValid;

    double m_used_quantity;
    bool m_used_quantity_isSet;
    bool m_used_quantity_isValid;

    double m_utilized_percentage;
    bool m_utilized_percentage_isSet;
    bool m_utilized_percentage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReservationSummaryProperties)

#endif // OAIReservationSummaryProperties_H
