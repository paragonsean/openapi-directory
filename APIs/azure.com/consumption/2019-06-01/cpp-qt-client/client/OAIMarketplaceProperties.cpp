/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketplaceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketplaceProperties::OAIMarketplaceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketplaceProperties::OAIMarketplaceProperties() {
    this->initializeModel();
}

OAIMarketplaceProperties::~OAIMarketplaceProperties() {}

void OAIMarketplaceProperties::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_additional_properties_isSet = false;
    m_additional_properties_isValid = false;

    m_billing_period_id_isSet = false;
    m_billing_period_id_isValid = false;

    m_consumed_quantity_isSet = false;
    m_consumed_quantity_isValid = false;

    m_consumed_service_isSet = false;
    m_consumed_service_isValid = false;

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_department_name_isSet = false;
    m_department_name_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_name_isSet = false;
    m_instance_name_isValid = false;

    m_is_estimated_isSet = false;
    m_is_estimated_isValid = false;

    m_is_recurring_charge_isSet = false;
    m_is_recurring_charge_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_offer_name_isSet = false;
    m_offer_name_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_plan_name_isSet = false;
    m_plan_name_isValid = false;

    m_pretax_cost_isSet = false;
    m_pretax_cost_isValid = false;

    m_publisher_name_isSet = false;
    m_publisher_name_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_resource_rate_isSet = false;
    m_resource_rate_isValid = false;

    m_subscription_guid_isSet = false;
    m_subscription_guid_isValid = false;

    m_subscription_name_isSet = false;
    m_subscription_name_isValid = false;

    m_unit_of_measure_isSet = false;
    m_unit_of_measure_isValid = false;

    m_usage_end_isSet = false;
    m_usage_end_isValid = false;

    m_usage_start_isSet = false;
    m_usage_start_isValid = false;
}

void OAIMarketplaceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketplaceProperties::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_properties, json[QString("additionalProperties")]);
    m_additional_properties_isSet = !json[QString("additionalProperties")].isNull() && m_additional_properties_isValid;

    m_billing_period_id_isValid = ::OpenAPI::fromJsonValue(m_billing_period_id, json[QString("billingPeriodId")]);
    m_billing_period_id_isSet = !json[QString("billingPeriodId")].isNull() && m_billing_period_id_isValid;

    m_consumed_quantity_isValid = ::OpenAPI::fromJsonValue(m_consumed_quantity, json[QString("consumedQuantity")]);
    m_consumed_quantity_isSet = !json[QString("consumedQuantity")].isNull() && m_consumed_quantity_isValid;

    m_consumed_service_isValid = ::OpenAPI::fromJsonValue(m_consumed_service, json[QString("consumedService")]);
    m_consumed_service_isSet = !json[QString("consumedService")].isNull() && m_consumed_service_isValid;

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_department_name_isValid = ::OpenAPI::fromJsonValue(m_department_name, json[QString("departmentName")]);
    m_department_name_isSet = !json[QString("departmentName")].isNull() && m_department_name_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_instance_name_isValid = ::OpenAPI::fromJsonValue(m_instance_name, json[QString("instanceName")]);
    m_instance_name_isSet = !json[QString("instanceName")].isNull() && m_instance_name_isValid;

    m_is_estimated_isValid = ::OpenAPI::fromJsonValue(m_is_estimated, json[QString("isEstimated")]);
    m_is_estimated_isSet = !json[QString("isEstimated")].isNull() && m_is_estimated_isValid;

    m_is_recurring_charge_isValid = ::OpenAPI::fromJsonValue(m_is_recurring_charge, json[QString("isRecurringCharge")]);
    m_is_recurring_charge_isSet = !json[QString("isRecurringCharge")].isNull() && m_is_recurring_charge_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("meterId")]);
    m_meter_id_isSet = !json[QString("meterId")].isNull() && m_meter_id_isValid;

    m_offer_name_isValid = ::OpenAPI::fromJsonValue(m_offer_name, json[QString("offerName")]);
    m_offer_name_isSet = !json[QString("offerName")].isNull() && m_offer_name_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_plan_name_isValid = ::OpenAPI::fromJsonValue(m_plan_name, json[QString("planName")]);
    m_plan_name_isSet = !json[QString("planName")].isNull() && m_plan_name_isValid;

    m_pretax_cost_isValid = ::OpenAPI::fromJsonValue(m_pretax_cost, json[QString("pretaxCost")]);
    m_pretax_cost_isSet = !json[QString("pretaxCost")].isNull() && m_pretax_cost_isValid;

    m_publisher_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_name, json[QString("publisherName")]);
    m_publisher_name_isSet = !json[QString("publisherName")].isNull() && m_publisher_name_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_resource_rate_isValid = ::OpenAPI::fromJsonValue(m_resource_rate, json[QString("resourceRate")]);
    m_resource_rate_isSet = !json[QString("resourceRate")].isNull() && m_resource_rate_isValid;

    m_subscription_guid_isValid = ::OpenAPI::fromJsonValue(m_subscription_guid, json[QString("subscriptionGuid")]);
    m_subscription_guid_isSet = !json[QString("subscriptionGuid")].isNull() && m_subscription_guid_isValid;

    m_subscription_name_isValid = ::OpenAPI::fromJsonValue(m_subscription_name, json[QString("subscriptionName")]);
    m_subscription_name_isSet = !json[QString("subscriptionName")].isNull() && m_subscription_name_isValid;

    m_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_of_measure, json[QString("unitOfMeasure")]);
    m_unit_of_measure_isSet = !json[QString("unitOfMeasure")].isNull() && m_unit_of_measure_isValid;

    m_usage_end_isValid = ::OpenAPI::fromJsonValue(m_usage_end, json[QString("usageEnd")]);
    m_usage_end_isSet = !json[QString("usageEnd")].isNull() && m_usage_end_isValid;

    m_usage_start_isValid = ::OpenAPI::fromJsonValue(m_usage_start, json[QString("usageStart")]);
    m_usage_start_isSet = !json[QString("usageStart")].isNull() && m_usage_start_isValid;
}

QString OAIMarketplaceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketplaceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_additional_properties_isSet) {
        obj.insert(QString("additionalProperties"), ::OpenAPI::toJsonValue(m_additional_properties));
    }
    if (m_billing_period_id_isSet) {
        obj.insert(QString("billingPeriodId"), ::OpenAPI::toJsonValue(m_billing_period_id));
    }
    if (m_consumed_quantity_isSet) {
        obj.insert(QString("consumedQuantity"), ::OpenAPI::toJsonValue(m_consumed_quantity));
    }
    if (m_consumed_service_isSet) {
        obj.insert(QString("consumedService"), ::OpenAPI::toJsonValue(m_consumed_service));
    }
    if (m_cost_center_isSet) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_department_name_isSet) {
        obj.insert(QString("departmentName"), ::OpenAPI::toJsonValue(m_department_name));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_name_isSet) {
        obj.insert(QString("instanceName"), ::OpenAPI::toJsonValue(m_instance_name));
    }
    if (m_is_estimated_isSet) {
        obj.insert(QString("isEstimated"), ::OpenAPI::toJsonValue(m_is_estimated));
    }
    if (m_is_recurring_charge_isSet) {
        obj.insert(QString("isRecurringCharge"), ::OpenAPI::toJsonValue(m_is_recurring_charge));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("meterId"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_offer_name_isSet) {
        obj.insert(QString("offerName"), ::OpenAPI::toJsonValue(m_offer_name));
    }
    if (m_order_number_isSet) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_plan_name_isSet) {
        obj.insert(QString("planName"), ::OpenAPI::toJsonValue(m_plan_name));
    }
    if (m_pretax_cost_isSet) {
        obj.insert(QString("pretaxCost"), ::OpenAPI::toJsonValue(m_pretax_cost));
    }
    if (m_publisher_name_isSet) {
        obj.insert(QString("publisherName"), ::OpenAPI::toJsonValue(m_publisher_name));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_resource_rate_isSet) {
        obj.insert(QString("resourceRate"), ::OpenAPI::toJsonValue(m_resource_rate));
    }
    if (m_subscription_guid_isSet) {
        obj.insert(QString("subscriptionGuid"), ::OpenAPI::toJsonValue(m_subscription_guid));
    }
    if (m_subscription_name_isSet) {
        obj.insert(QString("subscriptionName"), ::OpenAPI::toJsonValue(m_subscription_name));
    }
    if (m_unit_of_measure_isSet) {
        obj.insert(QString("unitOfMeasure"), ::OpenAPI::toJsonValue(m_unit_of_measure));
    }
    if (m_usage_end_isSet) {
        obj.insert(QString("usageEnd"), ::OpenAPI::toJsonValue(m_usage_end));
    }
    if (m_usage_start_isSet) {
        obj.insert(QString("usageStart"), ::OpenAPI::toJsonValue(m_usage_start));
    }
    return obj;
}

QString OAIMarketplaceProperties::getAccountName() const {
    return m_account_name;
}
void OAIMarketplaceProperties::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIMarketplaceProperties::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIMarketplaceProperties::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIMarketplaceProperties::getAdditionalProperties() const {
    return m_additional_properties;
}
void OAIMarketplaceProperties::setAdditionalProperties(const QString &additional_properties) {
    m_additional_properties = additional_properties;
    m_additional_properties_isSet = true;
}

bool OAIMarketplaceProperties::is_additional_properties_Set() const{
    return m_additional_properties_isSet;
}

bool OAIMarketplaceProperties::is_additional_properties_Valid() const{
    return m_additional_properties_isValid;
}

QString OAIMarketplaceProperties::getBillingPeriodId() const {
    return m_billing_period_id;
}
void OAIMarketplaceProperties::setBillingPeriodId(const QString &billing_period_id) {
    m_billing_period_id = billing_period_id;
    m_billing_period_id_isSet = true;
}

bool OAIMarketplaceProperties::is_billing_period_id_Set() const{
    return m_billing_period_id_isSet;
}

bool OAIMarketplaceProperties::is_billing_period_id_Valid() const{
    return m_billing_period_id_isValid;
}

double OAIMarketplaceProperties::getConsumedQuantity() const {
    return m_consumed_quantity;
}
void OAIMarketplaceProperties::setConsumedQuantity(const double &consumed_quantity) {
    m_consumed_quantity = consumed_quantity;
    m_consumed_quantity_isSet = true;
}

bool OAIMarketplaceProperties::is_consumed_quantity_Set() const{
    return m_consumed_quantity_isSet;
}

bool OAIMarketplaceProperties::is_consumed_quantity_Valid() const{
    return m_consumed_quantity_isValid;
}

QString OAIMarketplaceProperties::getConsumedService() const {
    return m_consumed_service;
}
void OAIMarketplaceProperties::setConsumedService(const QString &consumed_service) {
    m_consumed_service = consumed_service;
    m_consumed_service_isSet = true;
}

bool OAIMarketplaceProperties::is_consumed_service_Set() const{
    return m_consumed_service_isSet;
}

bool OAIMarketplaceProperties::is_consumed_service_Valid() const{
    return m_consumed_service_isValid;
}

QString OAIMarketplaceProperties::getCostCenter() const {
    return m_cost_center;
}
void OAIMarketplaceProperties::setCostCenter(const QString &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIMarketplaceProperties::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIMarketplaceProperties::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

QString OAIMarketplaceProperties::getCurrency() const {
    return m_currency;
}
void OAIMarketplaceProperties::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIMarketplaceProperties::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIMarketplaceProperties::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIMarketplaceProperties::getDepartmentName() const {
    return m_department_name;
}
void OAIMarketplaceProperties::setDepartmentName(const QString &department_name) {
    m_department_name = department_name;
    m_department_name_isSet = true;
}

bool OAIMarketplaceProperties::is_department_name_Set() const{
    return m_department_name_isSet;
}

bool OAIMarketplaceProperties::is_department_name_Valid() const{
    return m_department_name_isValid;
}

QString OAIMarketplaceProperties::getInstanceId() const {
    return m_instance_id;
}
void OAIMarketplaceProperties::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIMarketplaceProperties::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIMarketplaceProperties::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIMarketplaceProperties::getInstanceName() const {
    return m_instance_name;
}
void OAIMarketplaceProperties::setInstanceName(const QString &instance_name) {
    m_instance_name = instance_name;
    m_instance_name_isSet = true;
}

bool OAIMarketplaceProperties::is_instance_name_Set() const{
    return m_instance_name_isSet;
}

bool OAIMarketplaceProperties::is_instance_name_Valid() const{
    return m_instance_name_isValid;
}

bool OAIMarketplaceProperties::isIsEstimated() const {
    return m_is_estimated;
}
void OAIMarketplaceProperties::setIsEstimated(const bool &is_estimated) {
    m_is_estimated = is_estimated;
    m_is_estimated_isSet = true;
}

bool OAIMarketplaceProperties::is_is_estimated_Set() const{
    return m_is_estimated_isSet;
}

bool OAIMarketplaceProperties::is_is_estimated_Valid() const{
    return m_is_estimated_isValid;
}

bool OAIMarketplaceProperties::isIsRecurringCharge() const {
    return m_is_recurring_charge;
}
void OAIMarketplaceProperties::setIsRecurringCharge(const bool &is_recurring_charge) {
    m_is_recurring_charge = is_recurring_charge;
    m_is_recurring_charge_isSet = true;
}

bool OAIMarketplaceProperties::is_is_recurring_charge_Set() const{
    return m_is_recurring_charge_isSet;
}

bool OAIMarketplaceProperties::is_is_recurring_charge_Valid() const{
    return m_is_recurring_charge_isValid;
}

QString OAIMarketplaceProperties::getMeterId() const {
    return m_meter_id;
}
void OAIMarketplaceProperties::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIMarketplaceProperties::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIMarketplaceProperties::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

QString OAIMarketplaceProperties::getOfferName() const {
    return m_offer_name;
}
void OAIMarketplaceProperties::setOfferName(const QString &offer_name) {
    m_offer_name = offer_name;
    m_offer_name_isSet = true;
}

bool OAIMarketplaceProperties::is_offer_name_Set() const{
    return m_offer_name_isSet;
}

bool OAIMarketplaceProperties::is_offer_name_Valid() const{
    return m_offer_name_isValid;
}

QString OAIMarketplaceProperties::getOrderNumber() const {
    return m_order_number;
}
void OAIMarketplaceProperties::setOrderNumber(const QString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIMarketplaceProperties::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIMarketplaceProperties::is_order_number_Valid() const{
    return m_order_number_isValid;
}

QString OAIMarketplaceProperties::getPlanName() const {
    return m_plan_name;
}
void OAIMarketplaceProperties::setPlanName(const QString &plan_name) {
    m_plan_name = plan_name;
    m_plan_name_isSet = true;
}

bool OAIMarketplaceProperties::is_plan_name_Set() const{
    return m_plan_name_isSet;
}

bool OAIMarketplaceProperties::is_plan_name_Valid() const{
    return m_plan_name_isValid;
}

double OAIMarketplaceProperties::getPretaxCost() const {
    return m_pretax_cost;
}
void OAIMarketplaceProperties::setPretaxCost(const double &pretax_cost) {
    m_pretax_cost = pretax_cost;
    m_pretax_cost_isSet = true;
}

bool OAIMarketplaceProperties::is_pretax_cost_Set() const{
    return m_pretax_cost_isSet;
}

bool OAIMarketplaceProperties::is_pretax_cost_Valid() const{
    return m_pretax_cost_isValid;
}

QString OAIMarketplaceProperties::getPublisherName() const {
    return m_publisher_name;
}
void OAIMarketplaceProperties::setPublisherName(const QString &publisher_name) {
    m_publisher_name = publisher_name;
    m_publisher_name_isSet = true;
}

bool OAIMarketplaceProperties::is_publisher_name_Set() const{
    return m_publisher_name_isSet;
}

bool OAIMarketplaceProperties::is_publisher_name_Valid() const{
    return m_publisher_name_isValid;
}

QString OAIMarketplaceProperties::getResourceGroup() const {
    return m_resource_group;
}
void OAIMarketplaceProperties::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIMarketplaceProperties::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIMarketplaceProperties::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

double OAIMarketplaceProperties::getResourceRate() const {
    return m_resource_rate;
}
void OAIMarketplaceProperties::setResourceRate(const double &resource_rate) {
    m_resource_rate = resource_rate;
    m_resource_rate_isSet = true;
}

bool OAIMarketplaceProperties::is_resource_rate_Set() const{
    return m_resource_rate_isSet;
}

bool OAIMarketplaceProperties::is_resource_rate_Valid() const{
    return m_resource_rate_isValid;
}

QString OAIMarketplaceProperties::getSubscriptionGuid() const {
    return m_subscription_guid;
}
void OAIMarketplaceProperties::setSubscriptionGuid(const QString &subscription_guid) {
    m_subscription_guid = subscription_guid;
    m_subscription_guid_isSet = true;
}

bool OAIMarketplaceProperties::is_subscription_guid_Set() const{
    return m_subscription_guid_isSet;
}

bool OAIMarketplaceProperties::is_subscription_guid_Valid() const{
    return m_subscription_guid_isValid;
}

QString OAIMarketplaceProperties::getSubscriptionName() const {
    return m_subscription_name;
}
void OAIMarketplaceProperties::setSubscriptionName(const QString &subscription_name) {
    m_subscription_name = subscription_name;
    m_subscription_name_isSet = true;
}

bool OAIMarketplaceProperties::is_subscription_name_Set() const{
    return m_subscription_name_isSet;
}

bool OAIMarketplaceProperties::is_subscription_name_Valid() const{
    return m_subscription_name_isValid;
}

QString OAIMarketplaceProperties::getUnitOfMeasure() const {
    return m_unit_of_measure;
}
void OAIMarketplaceProperties::setUnitOfMeasure(const QString &unit_of_measure) {
    m_unit_of_measure = unit_of_measure;
    m_unit_of_measure_isSet = true;
}

bool OAIMarketplaceProperties::is_unit_of_measure_Set() const{
    return m_unit_of_measure_isSet;
}

bool OAIMarketplaceProperties::is_unit_of_measure_Valid() const{
    return m_unit_of_measure_isValid;
}

QDateTime OAIMarketplaceProperties::getUsageEnd() const {
    return m_usage_end;
}
void OAIMarketplaceProperties::setUsageEnd(const QDateTime &usage_end) {
    m_usage_end = usage_end;
    m_usage_end_isSet = true;
}

bool OAIMarketplaceProperties::is_usage_end_Set() const{
    return m_usage_end_isSet;
}

bool OAIMarketplaceProperties::is_usage_end_Valid() const{
    return m_usage_end_isValid;
}

QDateTime OAIMarketplaceProperties::getUsageStart() const {
    return m_usage_start;
}
void OAIMarketplaceProperties::setUsageStart(const QDateTime &usage_start) {
    m_usage_start = usage_start;
    m_usage_start_isSet = true;
}

bool OAIMarketplaceProperties::is_usage_start_Set() const{
    return m_usage_start_isSet;
}

bool OAIMarketplaceProperties::is_usage_start_Valid() const{
    return m_usage_start_isValid;
}

bool OAIMarketplaceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_estimated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_recurring_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pretax_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_of_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketplaceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
