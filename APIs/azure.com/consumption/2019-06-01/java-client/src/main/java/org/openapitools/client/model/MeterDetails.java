/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the meter detail.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:47.772322-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeterDetails {
  public static final String SERIALIZED_NAME_METER_CATEGORY = "meterCategory";
  @SerializedName(SERIALIZED_NAME_METER_CATEGORY)
  private String meterCategory;

  public static final String SERIALIZED_NAME_METER_LOCATION = "meterLocation";
  @SerializedName(SERIALIZED_NAME_METER_LOCATION)
  private String meterLocation;

  public static final String SERIALIZED_NAME_METER_NAME = "meterName";
  @SerializedName(SERIALIZED_NAME_METER_NAME)
  private String meterName;

  public static final String SERIALIZED_NAME_METER_SUB_CATEGORY = "meterSubCategory";
  @SerializedName(SERIALIZED_NAME_METER_SUB_CATEGORY)
  private String meterSubCategory;

  public static final String SERIALIZED_NAME_PRETAX_STANDARD_RATE = "pretaxStandardRate";
  @SerializedName(SERIALIZED_NAME_PRETAX_STANDARD_RATE)
  private BigDecimal pretaxStandardRate;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_TIER = "serviceTier";
  @SerializedName(SERIALIZED_NAME_SERVICE_TIER)
  private String serviceTier;

  public static final String SERIALIZED_NAME_TOTAL_INCLUDED_QUANTITY = "totalIncludedQuantity";
  @SerializedName(SERIALIZED_NAME_TOTAL_INCLUDED_QUANTITY)
  private BigDecimal totalIncludedQuantity;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public MeterDetails() {
  }

  public MeterDetails(
     String meterCategory, 
     String meterLocation, 
     String meterName, 
     String meterSubCategory, 
     BigDecimal pretaxStandardRate, 
     String serviceName, 
     String serviceTier, 
     BigDecimal totalIncludedQuantity, 
     String unit
  ) {
    this();
    this.meterCategory = meterCategory;
    this.meterLocation = meterLocation;
    this.meterName = meterName;
    this.meterSubCategory = meterSubCategory;
    this.pretaxStandardRate = pretaxStandardRate;
    this.serviceName = serviceName;
    this.serviceTier = serviceTier;
    this.totalIncludedQuantity = totalIncludedQuantity;
    this.unit = unit;
  }

  /**
   * The category of the meter, for example, &#39;Cloud services&#39;, &#39;Networking&#39;, etc..
   * @return meterCategory
   */
  @javax.annotation.Nullable
  public String getMeterCategory() {
    return meterCategory;
  }



  /**
   * The location in which the Azure service is available.
   * @return meterLocation
   */
  @javax.annotation.Nullable
  public String getMeterLocation() {
    return meterLocation;
  }



  /**
   * The name of the meter, within the given meter category
   * @return meterName
   */
  @javax.annotation.Nullable
  public String getMeterName() {
    return meterName;
  }



  /**
   * The subcategory of the meter, for example, &#39;A6 Cloud services&#39;, &#39;ExpressRoute (IXP)&#39;, etc..
   * @return meterSubCategory
   */
  @javax.annotation.Nullable
  public String getMeterSubCategory() {
    return meterSubCategory;
  }



  /**
   * The pretax listing price.
   * @return pretaxStandardRate
   */
  @javax.annotation.Nullable
  public BigDecimal getPretaxStandardRate() {
    return pretaxStandardRate;
  }



  /**
   * The name of the service.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }



  /**
   * The service tier.
   * @return serviceTier
   */
  @javax.annotation.Nullable
  public String getServiceTier() {
    return serviceTier;
  }



  /**
   * The total included quantity associated with the offer.
   * @return totalIncludedQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalIncludedQuantity() {
    return totalIncludedQuantity;
  }



  /**
   * The unit in which the meter consumption is charged, for example, &#39;Hours&#39;, &#39;GB&#39;, etc.
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeterDetails meterDetails = (MeterDetails) o;
    return Objects.equals(this.meterCategory, meterDetails.meterCategory) &&
        Objects.equals(this.meterLocation, meterDetails.meterLocation) &&
        Objects.equals(this.meterName, meterDetails.meterName) &&
        Objects.equals(this.meterSubCategory, meterDetails.meterSubCategory) &&
        Objects.equals(this.pretaxStandardRate, meterDetails.pretaxStandardRate) &&
        Objects.equals(this.serviceName, meterDetails.serviceName) &&
        Objects.equals(this.serviceTier, meterDetails.serviceTier) &&
        Objects.equals(this.totalIncludedQuantity, meterDetails.totalIncludedQuantity) &&
        Objects.equals(this.unit, meterDetails.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(meterCategory, meterLocation, meterName, meterSubCategory, pretaxStandardRate, serviceName, serviceTier, totalIncludedQuantity, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeterDetails {\n");
    sb.append("    meterCategory: ").append(toIndentedString(meterCategory)).append("\n");
    sb.append("    meterLocation: ").append(toIndentedString(meterLocation)).append("\n");
    sb.append("    meterName: ").append(toIndentedString(meterName)).append("\n");
    sb.append("    meterSubCategory: ").append(toIndentedString(meterSubCategory)).append("\n");
    sb.append("    pretaxStandardRate: ").append(toIndentedString(pretaxStandardRate)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    serviceTier: ").append(toIndentedString(serviceTier)).append("\n");
    sb.append("    totalIncludedQuantity: ").append(toIndentedString(totalIncludedQuantity)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("meterCategory");
    openapiFields.add("meterLocation");
    openapiFields.add("meterName");
    openapiFields.add("meterSubCategory");
    openapiFields.add("pretaxStandardRate");
    openapiFields.add("serviceName");
    openapiFields.add("serviceTier");
    openapiFields.add("totalIncludedQuantity");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeterDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeterDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeterDetails is not found in the empty JSON string", MeterDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeterDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeterDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("meterCategory") != null && !jsonObj.get("meterCategory").isJsonNull()) && !jsonObj.get("meterCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterCategory").toString()));
      }
      if ((jsonObj.get("meterLocation") != null && !jsonObj.get("meterLocation").isJsonNull()) && !jsonObj.get("meterLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterLocation").toString()));
      }
      if ((jsonObj.get("meterName") != null && !jsonObj.get("meterName").isJsonNull()) && !jsonObj.get("meterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterName").toString()));
      }
      if ((jsonObj.get("meterSubCategory") != null && !jsonObj.get("meterSubCategory").isJsonNull()) && !jsonObj.get("meterSubCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterSubCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterSubCategory").toString()));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      if ((jsonObj.get("serviceTier") != null && !jsonObj.get("serviceTier").isJsonNull()) && !jsonObj.get("serviceTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceTier").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeterDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeterDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeterDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeterDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<MeterDetails>() {
           @Override
           public void write(JsonWriter out, MeterDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeterDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeterDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeterDetails
   * @throws IOException if the JSON string is invalid with respect to MeterDetails
   */
  public static MeterDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeterDetails.class);
  }

  /**
   * Convert an instance of MeterDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

