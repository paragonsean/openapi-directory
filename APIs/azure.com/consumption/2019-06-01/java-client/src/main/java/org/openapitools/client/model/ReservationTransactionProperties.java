/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReservationTransactionProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:47.772322-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationTransactionProperties {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_OWNER_EMAIL = "accountOwnerEmail";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_OWNER_EMAIL)
  private String accountOwnerEmail;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_ARM_SKU_NAME = "armSkuName";
  @SerializedName(SERIALIZED_NAME_ARM_SKU_NAME)
  private String armSkuName;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private String costCenter;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CURRENT_ENROLLMENT = "currentEnrollment";
  @SerializedName(SERIALIZED_NAME_CURRENT_ENROLLMENT)
  private String currentEnrollment;

  public static final String SERIALIZED_NAME_DEPARTMENT_NAME = "departmentName";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_NAME)
  private String departmentName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_DATE = "eventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_PURCHASING_ENROLLMENT = "purchasingEnrollment";
  @SerializedName(SERIALIZED_NAME_PURCHASING_ENROLLMENT)
  private String purchasingEnrollment;

  public static final String SERIALIZED_NAME_PURCHASING_SUBSCRIPTION_GUID = "purchasingSubscriptionGuid";
  @SerializedName(SERIALIZED_NAME_PURCHASING_SUBSCRIPTION_GUID)
  private UUID purchasingSubscriptionGuid;

  public static final String SERIALIZED_NAME_PURCHASING_SUBSCRIPTION_NAME = "purchasingSubscriptionName";
  @SerializedName(SERIALIZED_NAME_PURCHASING_SUBSCRIPTION_NAME)
  private String purchasingSubscriptionName;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RESERVATION_ORDER_ID = "reservationOrderId";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ORDER_ID)
  private String reservationOrderId;

  public static final String SERIALIZED_NAME_RESERVATION_ORDER_NAME = "reservationOrderName";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ORDER_NAME)
  private String reservationOrderName;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public ReservationTransactionProperties() {
  }

  public ReservationTransactionProperties(
     String accountName, 
     String accountOwnerEmail, 
     BigDecimal amount, 
     String armSkuName, 
     String costCenter, 
     String currency, 
     String currentEnrollment, 
     String departmentName, 
     String description, 
     OffsetDateTime eventDate, 
     String eventType, 
     String purchasingEnrollment, 
     UUID purchasingSubscriptionGuid, 
     String purchasingSubscriptionName, 
     BigDecimal quantity, 
     String region, 
     String reservationOrderId, 
     String reservationOrderName, 
     String term
  ) {
    this();
    this.accountName = accountName;
    this.accountOwnerEmail = accountOwnerEmail;
    this.amount = amount;
    this.armSkuName = armSkuName;
    this.costCenter = costCenter;
    this.currency = currency;
    this.currentEnrollment = currentEnrollment;
    this.departmentName = departmentName;
    this.description = description;
    this.eventDate = eventDate;
    this.eventType = eventType;
    this.purchasingEnrollment = purchasingEnrollment;
    this.purchasingSubscriptionGuid = purchasingSubscriptionGuid;
    this.purchasingSubscriptionName = purchasingSubscriptionName;
    this.quantity = quantity;
    this.region = region;
    this.reservationOrderId = reservationOrderId;
    this.reservationOrderName = reservationOrderName;
    this.term = term;
  }

  /**
   * The name of the account that makes the transaction.
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }



  /**
   * The email of the account owner that makes the transaction.
   * @return accountOwnerEmail
   */
  @javax.annotation.Nullable
  public String getAccountOwnerEmail() {
    return accountOwnerEmail;
  }



  /**
   * The charge of the transaction.
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }



  /**
   * This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
   * @return armSkuName
   */
  @javax.annotation.Nullable
  public String getArmSkuName() {
    return armSkuName;
  }



  /**
   * The cost center of this department if it is a department and a cost center is provided.
   * @return costCenter
   */
  @javax.annotation.Nullable
  public String getCostCenter() {
    return costCenter;
  }



  /**
   * The ISO currency in which the transaction is charged, for example, USD.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }



  /**
   * The current enrollment.
   * @return currentEnrollment
   */
  @javax.annotation.Nullable
  public String getCurrentEnrollment() {
    return currentEnrollment;
  }



  /**
   * The department name.
   * @return departmentName
   */
  @javax.annotation.Nullable
  public String getDepartmentName() {
    return departmentName;
  }



  /**
   * The description of the transaction.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * The date of the transaction
   * @return eventDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventDate() {
    return eventDate;
  }



  /**
   * The type of the transaction (Purchase, Cancel, etc.)
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }



  /**
   * The purchasing enrollment.
   * @return purchasingEnrollment
   */
  @javax.annotation.Nullable
  public String getPurchasingEnrollment() {
    return purchasingEnrollment;
  }



  /**
   * The subscription guid that makes the transaction.
   * @return purchasingSubscriptionGuid
   */
  @javax.annotation.Nullable
  public UUID getPurchasingSubscriptionGuid() {
    return purchasingSubscriptionGuid;
  }



  /**
   * The subscription name that makes the transaction.
   * @return purchasingSubscriptionName
   */
  @javax.annotation.Nullable
  public String getPurchasingSubscriptionName() {
    return purchasingSubscriptionName;
  }



  /**
   * The quantity of the transaction.
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }



  /**
   * The region of the transaction.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }



  /**
   * The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.
   * @return reservationOrderId
   */
  @javax.annotation.Nullable
  public String getReservationOrderId() {
    return reservationOrderId;
  }



  /**
   * The name of the reservation order.
   * @return reservationOrderName
   */
  @javax.annotation.Nullable
  public String getReservationOrderName() {
    return reservationOrderName;
  }



  /**
   * This is the term of the transaction.
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationTransactionProperties reservationTransactionProperties = (ReservationTransactionProperties) o;
    return Objects.equals(this.accountName, reservationTransactionProperties.accountName) &&
        Objects.equals(this.accountOwnerEmail, reservationTransactionProperties.accountOwnerEmail) &&
        Objects.equals(this.amount, reservationTransactionProperties.amount) &&
        Objects.equals(this.armSkuName, reservationTransactionProperties.armSkuName) &&
        Objects.equals(this.costCenter, reservationTransactionProperties.costCenter) &&
        Objects.equals(this.currency, reservationTransactionProperties.currency) &&
        Objects.equals(this.currentEnrollment, reservationTransactionProperties.currentEnrollment) &&
        Objects.equals(this.departmentName, reservationTransactionProperties.departmentName) &&
        Objects.equals(this.description, reservationTransactionProperties.description) &&
        Objects.equals(this.eventDate, reservationTransactionProperties.eventDate) &&
        Objects.equals(this.eventType, reservationTransactionProperties.eventType) &&
        Objects.equals(this.purchasingEnrollment, reservationTransactionProperties.purchasingEnrollment) &&
        Objects.equals(this.purchasingSubscriptionGuid, reservationTransactionProperties.purchasingSubscriptionGuid) &&
        Objects.equals(this.purchasingSubscriptionName, reservationTransactionProperties.purchasingSubscriptionName) &&
        Objects.equals(this.quantity, reservationTransactionProperties.quantity) &&
        Objects.equals(this.region, reservationTransactionProperties.region) &&
        Objects.equals(this.reservationOrderId, reservationTransactionProperties.reservationOrderId) &&
        Objects.equals(this.reservationOrderName, reservationTransactionProperties.reservationOrderName) &&
        Objects.equals(this.term, reservationTransactionProperties.term);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, accountOwnerEmail, amount, armSkuName, costCenter, currency, currentEnrollment, departmentName, description, eventDate, eventType, purchasingEnrollment, purchasingSubscriptionGuid, purchasingSubscriptionName, quantity, region, reservationOrderId, reservationOrderName, term);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationTransactionProperties {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountOwnerEmail: ").append(toIndentedString(accountOwnerEmail)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    armSkuName: ").append(toIndentedString(armSkuName)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currentEnrollment: ").append(toIndentedString(currentEnrollment)).append("\n");
    sb.append("    departmentName: ").append(toIndentedString(departmentName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    purchasingEnrollment: ").append(toIndentedString(purchasingEnrollment)).append("\n");
    sb.append("    purchasingSubscriptionGuid: ").append(toIndentedString(purchasingSubscriptionGuid)).append("\n");
    sb.append("    purchasingSubscriptionName: ").append(toIndentedString(purchasingSubscriptionName)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    reservationOrderId: ").append(toIndentedString(reservationOrderId)).append("\n");
    sb.append("    reservationOrderName: ").append(toIndentedString(reservationOrderName)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("accountOwnerEmail");
    openapiFields.add("amount");
    openapiFields.add("armSkuName");
    openapiFields.add("costCenter");
    openapiFields.add("currency");
    openapiFields.add("currentEnrollment");
    openapiFields.add("departmentName");
    openapiFields.add("description");
    openapiFields.add("eventDate");
    openapiFields.add("eventType");
    openapiFields.add("purchasingEnrollment");
    openapiFields.add("purchasingSubscriptionGuid");
    openapiFields.add("purchasingSubscriptionName");
    openapiFields.add("quantity");
    openapiFields.add("region");
    openapiFields.add("reservationOrderId");
    openapiFields.add("reservationOrderName");
    openapiFields.add("term");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationTransactionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationTransactionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationTransactionProperties is not found in the empty JSON string", ReservationTransactionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationTransactionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationTransactionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("accountOwnerEmail") != null && !jsonObj.get("accountOwnerEmail").isJsonNull()) && !jsonObj.get("accountOwnerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountOwnerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountOwnerEmail").toString()));
      }
      if ((jsonObj.get("armSkuName") != null && !jsonObj.get("armSkuName").isJsonNull()) && !jsonObj.get("armSkuName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `armSkuName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("armSkuName").toString()));
      }
      if ((jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) && !jsonObj.get("costCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("currentEnrollment") != null && !jsonObj.get("currentEnrollment").isJsonNull()) && !jsonObj.get("currentEnrollment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentEnrollment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentEnrollment").toString()));
      }
      if ((jsonObj.get("departmentName") != null && !jsonObj.get("departmentName").isJsonNull()) && !jsonObj.get("departmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departmentName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("purchasingEnrollment") != null && !jsonObj.get("purchasingEnrollment").isJsonNull()) && !jsonObj.get("purchasingEnrollment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchasingEnrollment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchasingEnrollment").toString()));
      }
      if ((jsonObj.get("purchasingSubscriptionGuid") != null && !jsonObj.get("purchasingSubscriptionGuid").isJsonNull()) && !jsonObj.get("purchasingSubscriptionGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchasingSubscriptionGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchasingSubscriptionGuid").toString()));
      }
      if ((jsonObj.get("purchasingSubscriptionName") != null && !jsonObj.get("purchasingSubscriptionName").isJsonNull()) && !jsonObj.get("purchasingSubscriptionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchasingSubscriptionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchasingSubscriptionName").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("reservationOrderId") != null && !jsonObj.get("reservationOrderId").isJsonNull()) && !jsonObj.get("reservationOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationOrderId").toString()));
      }
      if ((jsonObj.get("reservationOrderName") != null && !jsonObj.get("reservationOrderName").isJsonNull()) && !jsonObj.get("reservationOrderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationOrderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationOrderName").toString()));
      }
      if ((jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) && !jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationTransactionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationTransactionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationTransactionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationTransactionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationTransactionProperties>() {
           @Override
           public void write(JsonWriter out, ReservationTransactionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationTransactionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationTransactionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationTransactionProperties
   * @throws IOException if the JSON string is invalid with respect to ReservationTransactionProperties
   */
  public static ReservationTransactionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationTransactionProperties.class);
  }

  /**
   * Convert an instance of ReservationTransactionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

