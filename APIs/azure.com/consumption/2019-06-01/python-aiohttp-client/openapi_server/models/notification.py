# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_emails: List[str]=None, contact_groups: List[str]=None, contact_roles: List[str]=None, enabled: bool=None, operator: str=None, threshold: float=None):
        """Notification - a model defined in OpenAPI

        :param contact_emails: The contact_emails of this Notification.
        :param contact_groups: The contact_groups of this Notification.
        :param contact_roles: The contact_roles of this Notification.
        :param enabled: The enabled of this Notification.
        :param operator: The operator of this Notification.
        :param threshold: The threshold of this Notification.
        """
        self.openapi_types = {
            'contact_emails': List[str],
            'contact_groups': List[str],
            'contact_roles': List[str],
            'enabled': bool,
            'operator': str,
            'threshold': float
        }

        self.attribute_map = {
            'contact_emails': 'contactEmails',
            'contact_groups': 'contactGroups',
            'contact_roles': 'contactRoles',
            'enabled': 'enabled',
            'operator': 'operator',
            'threshold': 'threshold'
        }

        self._contact_emails = contact_emails
        self._contact_groups = contact_groups
        self._contact_roles = contact_roles
        self._enabled = enabled
        self._operator = operator
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_emails(self):
        """Gets the contact_emails of this Notification.

        Email addresses to send the budget notification to when the threshold is exceeded.

        :return: The contact_emails of this Notification.
        :rtype: List[str]
        """
        return self._contact_emails

    @contact_emails.setter
    def contact_emails(self, contact_emails):
        """Sets the contact_emails of this Notification.

        Email addresses to send the budget notification to when the threshold is exceeded.

        :param contact_emails: The contact_emails of this Notification.
        :type contact_emails: List[str]
        """
        if contact_emails is None:
            raise ValueError("Invalid value for `contact_emails`, must not be `None`")
        if contact_emails is not None and len(contact_emails) > 50:
            raise ValueError("Invalid value for `contact_emails`, number of items must be less than or equal to `50`")
        if contact_emails is not None and len(contact_emails) < 1:
            raise ValueError("Invalid value for `contact_emails`, number of items must be greater than or equal to `1`")

        self._contact_emails = contact_emails

    @property
    def contact_groups(self):
        """Gets the contact_groups of this Notification.

        Action groups to send the budget notification to when the threshold is exceeded.

        :return: The contact_groups of this Notification.
        :rtype: List[str]
        """
        return self._contact_groups

    @contact_groups.setter
    def contact_groups(self, contact_groups):
        """Sets the contact_groups of this Notification.

        Action groups to send the budget notification to when the threshold is exceeded.

        :param contact_groups: The contact_groups of this Notification.
        :type contact_groups: List[str]
        """
        if contact_groups is not None and len(contact_groups) > 50:
            raise ValueError("Invalid value for `contact_groups`, number of items must be less than or equal to `50`")
        if contact_groups is not None and len(contact_groups) < 0:
            raise ValueError("Invalid value for `contact_groups`, number of items must be greater than or equal to `0`")

        self._contact_groups = contact_groups

    @property
    def contact_roles(self):
        """Gets the contact_roles of this Notification.

        Contact roles to send the budget notification to when the threshold is exceeded.

        :return: The contact_roles of this Notification.
        :rtype: List[str]
        """
        return self._contact_roles

    @contact_roles.setter
    def contact_roles(self, contact_roles):
        """Sets the contact_roles of this Notification.

        Contact roles to send the budget notification to when the threshold is exceeded.

        :param contact_roles: The contact_roles of this Notification.
        :type contact_roles: List[str]
        """

        self._contact_roles = contact_roles

    @property
    def enabled(self):
        """Gets the enabled of this Notification.

        The notification is enabled or not.

        :return: The enabled of this Notification.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Notification.

        The notification is enabled or not.

        :param enabled: The enabled of this Notification.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def operator(self):
        """Gets the operator of this Notification.

        The comparison operator.

        :return: The operator of this Notification.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Notification.

        The comparison operator.

        :param operator: The operator of this Notification.
        :type operator: str
        """
        allowed_values = ["EqualTo", "GreaterThan", "GreaterThanOrEqualTo"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def threshold(self):
        """Gets the threshold of this Notification.

        Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.

        :return: The threshold of this Notification.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this Notification.

        Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.

        :param threshold: The threshold of this Notification.
        :type threshold: float
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")

        self._threshold = threshold
