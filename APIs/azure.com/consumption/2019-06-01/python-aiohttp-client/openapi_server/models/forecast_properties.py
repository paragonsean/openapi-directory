# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forecast_properties_confidence_levels_inner import ForecastPropertiesConfidenceLevelsInner
from openapi_server import util


class ForecastProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, charge: float=None, charge_type: str=None, confidence_levels: List[ForecastPropertiesConfidenceLevelsInner]=None, currency: str=None, grain: str=None, usage_date: str=None):
        """ForecastProperties - a model defined in OpenAPI

        :param charge: The charge of this ForecastProperties.
        :param charge_type: The charge_type of this ForecastProperties.
        :param confidence_levels: The confidence_levels of this ForecastProperties.
        :param currency: The currency of this ForecastProperties.
        :param grain: The grain of this ForecastProperties.
        :param usage_date: The usage_date of this ForecastProperties.
        """
        self.openapi_types = {
            'charge': float,
            'charge_type': str,
            'confidence_levels': List[ForecastPropertiesConfidenceLevelsInner],
            'currency': str,
            'grain': str,
            'usage_date': str
        }

        self.attribute_map = {
            'charge': 'charge',
            'charge_type': 'chargeType',
            'confidence_levels': 'confidenceLevels',
            'currency': 'currency',
            'grain': 'grain',
            'usage_date': 'usageDate'
        }

        self._charge = charge
        self._charge_type = charge_type
        self._confidence_levels = confidence_levels
        self._currency = currency
        self._grain = grain
        self._usage_date = usage_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForecastProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForecastProperties of this ForecastProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def charge(self):
        """Gets the charge of this ForecastProperties.

        The amount of charge

        :return: The charge of this ForecastProperties.
        :rtype: float
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this ForecastProperties.

        The amount of charge

        :param charge: The charge of this ForecastProperties.
        :type charge: float
        """

        self._charge = charge

    @property
    def charge_type(self):
        """Gets the charge_type of this ForecastProperties.

        The type of the charge. Could be actual or forecast

        :return: The charge_type of this ForecastProperties.
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this ForecastProperties.

        The type of the charge. Could be actual or forecast

        :param charge_type: The charge_type of this ForecastProperties.
        :type charge_type: str
        """
        allowed_values = ["Actual", "Forecast"]  # noqa: E501
        if charge_type not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_type` ({0}), must be one of {1}"
                .format(charge_type, allowed_values)
            )

        self._charge_type = charge_type

    @property
    def confidence_levels(self):
        """Gets the confidence_levels of this ForecastProperties.

        The details about the forecast confidence levels. This is populated only when chargeType is Forecast.

        :return: The confidence_levels of this ForecastProperties.
        :rtype: List[ForecastPropertiesConfidenceLevelsInner]
        """
        return self._confidence_levels

    @confidence_levels.setter
    def confidence_levels(self, confidence_levels):
        """Sets the confidence_levels of this ForecastProperties.

        The details about the forecast confidence levels. This is populated only when chargeType is Forecast.

        :param confidence_levels: The confidence_levels of this ForecastProperties.
        :type confidence_levels: List[ForecastPropertiesConfidenceLevelsInner]
        """

        self._confidence_levels = confidence_levels

    @property
    def currency(self):
        """Gets the currency of this ForecastProperties.

        The ISO currency in which the meter is charged, for example, USD.

        :return: The currency of this ForecastProperties.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ForecastProperties.

        The ISO currency in which the meter is charged, for example, USD.

        :param currency: The currency of this ForecastProperties.
        :type currency: str
        """

        self._currency = currency

    @property
    def grain(self):
        """Gets the grain of this ForecastProperties.

        The granularity of forecast.

        :return: The grain of this ForecastProperties.
        :rtype: str
        """
        return self._grain

    @grain.setter
    def grain(self, grain):
        """Sets the grain of this ForecastProperties.

        The granularity of forecast.

        :param grain: The grain of this ForecastProperties.
        :type grain: str
        """
        allowed_values = ["Daily", "Monthly", "Yearly"]  # noqa: E501
        if grain not in allowed_values:
            raise ValueError(
                "Invalid value for `grain` ({0}), must be one of {1}"
                .format(grain, allowed_values)
            )

        self._grain = grain

    @property
    def usage_date(self):
        """Gets the usage_date of this ForecastProperties.

        The usage date of the forecast.

        :return: The usage_date of this ForecastProperties.
        :rtype: str
        """
        return self._usage_date

    @usage_date.setter
    def usage_date(self, usage_date):
        """Sets the usage_date of this ForecastProperties.

        The usage date of the forecast.

        :param usage_date: The usage_date of this ForecastProperties.
        :type usage_date: str
        """

        self._usage_date = usage_date
