# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MeterDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meter_category: str=None, meter_name: str=None, meter_sub_category: str=None, service_family: str=None, unit_of_measure: str=None):
        """MeterDetailsResponse - a model defined in OpenAPI

        :param meter_category: The meter_category of this MeterDetailsResponse.
        :param meter_name: The meter_name of this MeterDetailsResponse.
        :param meter_sub_category: The meter_sub_category of this MeterDetailsResponse.
        :param service_family: The service_family of this MeterDetailsResponse.
        :param unit_of_measure: The unit_of_measure of this MeterDetailsResponse.
        """
        self.openapi_types = {
            'meter_category': str,
            'meter_name': str,
            'meter_sub_category': str,
            'service_family': str,
            'unit_of_measure': str
        }

        self.attribute_map = {
            'meter_category': 'meterCategory',
            'meter_name': 'meterName',
            'meter_sub_category': 'meterSubCategory',
            'service_family': 'serviceFamily',
            'unit_of_measure': 'unitOfMeasure'
        }

        self._meter_category = meter_category
        self._meter_name = meter_name
        self._meter_sub_category = meter_sub_category
        self._service_family = service_family
        self._unit_of_measure = unit_of_measure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeterDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeterDetailsResponse of this MeterDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meter_category(self):
        """Gets the meter_category of this MeterDetailsResponse.

        The category of the meter, for example, 'Cloud services', 'Networking', etc..

        :return: The meter_category of this MeterDetailsResponse.
        :rtype: str
        """
        return self._meter_category

    @meter_category.setter
    def meter_category(self, meter_category):
        """Sets the meter_category of this MeterDetailsResponse.

        The category of the meter, for example, 'Cloud services', 'Networking', etc..

        :param meter_category: The meter_category of this MeterDetailsResponse.
        :type meter_category: str
        """

        self._meter_category = meter_category

    @property
    def meter_name(self):
        """Gets the meter_name of this MeterDetailsResponse.

        The name of the meter, within the given meter category

        :return: The meter_name of this MeterDetailsResponse.
        :rtype: str
        """
        return self._meter_name

    @meter_name.setter
    def meter_name(self, meter_name):
        """Sets the meter_name of this MeterDetailsResponse.

        The name of the meter, within the given meter category

        :param meter_name: The meter_name of this MeterDetailsResponse.
        :type meter_name: str
        """

        self._meter_name = meter_name

    @property
    def meter_sub_category(self):
        """Gets the meter_sub_category of this MeterDetailsResponse.

        The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..

        :return: The meter_sub_category of this MeterDetailsResponse.
        :rtype: str
        """
        return self._meter_sub_category

    @meter_sub_category.setter
    def meter_sub_category(self, meter_sub_category):
        """Sets the meter_sub_category of this MeterDetailsResponse.

        The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..

        :param meter_sub_category: The meter_sub_category of this MeterDetailsResponse.
        :type meter_sub_category: str
        """

        self._meter_sub_category = meter_sub_category

    @property
    def service_family(self):
        """Gets the service_family of this MeterDetailsResponse.

        The service family.

        :return: The service_family of this MeterDetailsResponse.
        :rtype: str
        """
        return self._service_family

    @service_family.setter
    def service_family(self, service_family):
        """Sets the service_family of this MeterDetailsResponse.

        The service family.

        :param service_family: The service_family of this MeterDetailsResponse.
        :type service_family: str
        """

        self._service_family = service_family

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this MeterDetailsResponse.

        The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.

        :return: The unit_of_measure of this MeterDetailsResponse.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this MeterDetailsResponse.

        The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.

        :param unit_of_measure: The unit_of_measure of this MeterDetailsResponse.
        :type unit_of_measure: str
        """

        self._unit_of_measure = unit_of_measure
