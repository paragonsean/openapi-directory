/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-08-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the charge summary.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:32.664578-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChargeSummaryProperties {
  public static final String SERIALIZED_NAME_AZURE_CHARGES = "azureCharges";
  @SerializedName(SERIALIZED_NAME_AZURE_CHARGES)
  private BigDecimal azureCharges;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_ID = "billingPeriodId";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_ID)
  private String billingPeriodId;

  public static final String SERIALIZED_NAME_CHARGES_BILLED_SEPARATELY = "chargesBilledSeparately";
  @SerializedName(SERIALIZED_NAME_CHARGES_BILLED_SEPARATELY)
  private BigDecimal chargesBilledSeparately;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_MARKETPLACE_CHARGES = "marketplaceCharges";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_CHARGES)
  private BigDecimal marketplaceCharges;

  public static final String SERIALIZED_NAME_USAGE_END = "usageEnd";
  @SerializedName(SERIALIZED_NAME_USAGE_END)
  private String usageEnd;

  public static final String SERIALIZED_NAME_USAGE_START = "usageStart";
  @SerializedName(SERIALIZED_NAME_USAGE_START)
  private String usageStart;

  public ChargeSummaryProperties() {
  }

  public ChargeSummaryProperties(
     BigDecimal azureCharges, 
     String billingPeriodId, 
     BigDecimal chargesBilledSeparately, 
     String currency, 
     BigDecimal marketplaceCharges, 
     String usageEnd, 
     String usageStart
  ) {
    this();
    this.azureCharges = azureCharges;
    this.billingPeriodId = billingPeriodId;
    this.chargesBilledSeparately = chargesBilledSeparately;
    this.currency = currency;
    this.marketplaceCharges = marketplaceCharges;
    this.usageEnd = usageEnd;
    this.usageStart = usageStart;
  }

  /**
   * Azure Charges.
   * @return azureCharges
   */
  @javax.annotation.Nullable
  public BigDecimal getAzureCharges() {
    return azureCharges;
  }



  /**
   * The id of the billing period resource that the charge belongs to.
   * @return billingPeriodId
   */
  @javax.annotation.Nullable
  public String getBillingPeriodId() {
    return billingPeriodId;
  }



  /**
   * Charges Billed separately.
   * @return chargesBilledSeparately
   */
  @javax.annotation.Nullable
  public BigDecimal getChargesBilledSeparately() {
    return chargesBilledSeparately;
  }



  /**
   * Currency Code
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }



  /**
   * Marketplace Charges.
   * @return marketplaceCharges
   */
  @javax.annotation.Nullable
  public BigDecimal getMarketplaceCharges() {
    return marketplaceCharges;
  }



  /**
   *  Usage end date.
   * @return usageEnd
   */
  @javax.annotation.Nullable
  public String getUsageEnd() {
    return usageEnd;
  }



  /**
   * Usage start date.
   * @return usageStart
   */
  @javax.annotation.Nullable
  public String getUsageStart() {
    return usageStart;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargeSummaryProperties chargeSummaryProperties = (ChargeSummaryProperties) o;
    return Objects.equals(this.azureCharges, chargeSummaryProperties.azureCharges) &&
        Objects.equals(this.billingPeriodId, chargeSummaryProperties.billingPeriodId) &&
        Objects.equals(this.chargesBilledSeparately, chargeSummaryProperties.chargesBilledSeparately) &&
        Objects.equals(this.currency, chargeSummaryProperties.currency) &&
        Objects.equals(this.marketplaceCharges, chargeSummaryProperties.marketplaceCharges) &&
        Objects.equals(this.usageEnd, chargeSummaryProperties.usageEnd) &&
        Objects.equals(this.usageStart, chargeSummaryProperties.usageStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureCharges, billingPeriodId, chargesBilledSeparately, currency, marketplaceCharges, usageEnd, usageStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargeSummaryProperties {\n");
    sb.append("    azureCharges: ").append(toIndentedString(azureCharges)).append("\n");
    sb.append("    billingPeriodId: ").append(toIndentedString(billingPeriodId)).append("\n");
    sb.append("    chargesBilledSeparately: ").append(toIndentedString(chargesBilledSeparately)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    marketplaceCharges: ").append(toIndentedString(marketplaceCharges)).append("\n");
    sb.append("    usageEnd: ").append(toIndentedString(usageEnd)).append("\n");
    sb.append("    usageStart: ").append(toIndentedString(usageStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureCharges");
    openapiFields.add("billingPeriodId");
    openapiFields.add("chargesBilledSeparately");
    openapiFields.add("currency");
    openapiFields.add("marketplaceCharges");
    openapiFields.add("usageEnd");
    openapiFields.add("usageStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChargeSummaryProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChargeSummaryProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChargeSummaryProperties is not found in the empty JSON string", ChargeSummaryProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChargeSummaryProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChargeSummaryProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingPeriodId") != null && !jsonObj.get("billingPeriodId").isJsonNull()) && !jsonObj.get("billingPeriodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPeriodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPeriodId").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("usageEnd") != null && !jsonObj.get("usageEnd").isJsonNull()) && !jsonObj.get("usageEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageEnd").toString()));
      }
      if ((jsonObj.get("usageStart") != null && !jsonObj.get("usageStart").isJsonNull()) && !jsonObj.get("usageStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageStart").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChargeSummaryProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChargeSummaryProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChargeSummaryProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChargeSummaryProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ChargeSummaryProperties>() {
           @Override
           public void write(JsonWriter out, ChargeSummaryProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChargeSummaryProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChargeSummaryProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChargeSummaryProperties
   * @throws IOException if the JSON string is invalid with respect to ChargeSummaryProperties
   */
  public static ChargeSummaryProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChargeSummaryProperties.class);
  }

  /**
   * Convert an instance of ChargeSummaryProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

