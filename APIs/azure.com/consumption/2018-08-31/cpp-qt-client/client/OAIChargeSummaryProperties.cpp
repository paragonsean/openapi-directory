/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-08-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChargeSummaryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChargeSummaryProperties::OAIChargeSummaryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChargeSummaryProperties::OAIChargeSummaryProperties() {
    this->initializeModel();
}

OAIChargeSummaryProperties::~OAIChargeSummaryProperties() {}

void OAIChargeSummaryProperties::initializeModel() {

    m_azure_charges_isSet = false;
    m_azure_charges_isValid = false;

    m_billing_period_id_isSet = false;
    m_billing_period_id_isValid = false;

    m_charges_billed_separately_isSet = false;
    m_charges_billed_separately_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_marketplace_charges_isSet = false;
    m_marketplace_charges_isValid = false;

    m_usage_end_isSet = false;
    m_usage_end_isValid = false;

    m_usage_start_isSet = false;
    m_usage_start_isValid = false;
}

void OAIChargeSummaryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChargeSummaryProperties::fromJsonObject(QJsonObject json) {

    m_azure_charges_isValid = ::OpenAPI::fromJsonValue(m_azure_charges, json[QString("azureCharges")]);
    m_azure_charges_isSet = !json[QString("azureCharges")].isNull() && m_azure_charges_isValid;

    m_billing_period_id_isValid = ::OpenAPI::fromJsonValue(m_billing_period_id, json[QString("billingPeriodId")]);
    m_billing_period_id_isSet = !json[QString("billingPeriodId")].isNull() && m_billing_period_id_isValid;

    m_charges_billed_separately_isValid = ::OpenAPI::fromJsonValue(m_charges_billed_separately, json[QString("chargesBilledSeparately")]);
    m_charges_billed_separately_isSet = !json[QString("chargesBilledSeparately")].isNull() && m_charges_billed_separately_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_marketplace_charges_isValid = ::OpenAPI::fromJsonValue(m_marketplace_charges, json[QString("marketplaceCharges")]);
    m_marketplace_charges_isSet = !json[QString("marketplaceCharges")].isNull() && m_marketplace_charges_isValid;

    m_usage_end_isValid = ::OpenAPI::fromJsonValue(m_usage_end, json[QString("usageEnd")]);
    m_usage_end_isSet = !json[QString("usageEnd")].isNull() && m_usage_end_isValid;

    m_usage_start_isValid = ::OpenAPI::fromJsonValue(m_usage_start, json[QString("usageStart")]);
    m_usage_start_isSet = !json[QString("usageStart")].isNull() && m_usage_start_isValid;
}

QString OAIChargeSummaryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChargeSummaryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_charges_isSet) {
        obj.insert(QString("azureCharges"), ::OpenAPI::toJsonValue(m_azure_charges));
    }
    if (m_billing_period_id_isSet) {
        obj.insert(QString("billingPeriodId"), ::OpenAPI::toJsonValue(m_billing_period_id));
    }
    if (m_charges_billed_separately_isSet) {
        obj.insert(QString("chargesBilledSeparately"), ::OpenAPI::toJsonValue(m_charges_billed_separately));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_marketplace_charges_isSet) {
        obj.insert(QString("marketplaceCharges"), ::OpenAPI::toJsonValue(m_marketplace_charges));
    }
    if (m_usage_end_isSet) {
        obj.insert(QString("usageEnd"), ::OpenAPI::toJsonValue(m_usage_end));
    }
    if (m_usage_start_isSet) {
        obj.insert(QString("usageStart"), ::OpenAPI::toJsonValue(m_usage_start));
    }
    return obj;
}

double OAIChargeSummaryProperties::getAzureCharges() const {
    return m_azure_charges;
}
void OAIChargeSummaryProperties::setAzureCharges(const double &azure_charges) {
    m_azure_charges = azure_charges;
    m_azure_charges_isSet = true;
}

bool OAIChargeSummaryProperties::is_azure_charges_Set() const{
    return m_azure_charges_isSet;
}

bool OAIChargeSummaryProperties::is_azure_charges_Valid() const{
    return m_azure_charges_isValid;
}

QString OAIChargeSummaryProperties::getBillingPeriodId() const {
    return m_billing_period_id;
}
void OAIChargeSummaryProperties::setBillingPeriodId(const QString &billing_period_id) {
    m_billing_period_id = billing_period_id;
    m_billing_period_id_isSet = true;
}

bool OAIChargeSummaryProperties::is_billing_period_id_Set() const{
    return m_billing_period_id_isSet;
}

bool OAIChargeSummaryProperties::is_billing_period_id_Valid() const{
    return m_billing_period_id_isValid;
}

double OAIChargeSummaryProperties::getChargesBilledSeparately() const {
    return m_charges_billed_separately;
}
void OAIChargeSummaryProperties::setChargesBilledSeparately(const double &charges_billed_separately) {
    m_charges_billed_separately = charges_billed_separately;
    m_charges_billed_separately_isSet = true;
}

bool OAIChargeSummaryProperties::is_charges_billed_separately_Set() const{
    return m_charges_billed_separately_isSet;
}

bool OAIChargeSummaryProperties::is_charges_billed_separately_Valid() const{
    return m_charges_billed_separately_isValid;
}

QString OAIChargeSummaryProperties::getCurrency() const {
    return m_currency;
}
void OAIChargeSummaryProperties::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIChargeSummaryProperties::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIChargeSummaryProperties::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIChargeSummaryProperties::getMarketplaceCharges() const {
    return m_marketplace_charges;
}
void OAIChargeSummaryProperties::setMarketplaceCharges(const double &marketplace_charges) {
    m_marketplace_charges = marketplace_charges;
    m_marketplace_charges_isSet = true;
}

bool OAIChargeSummaryProperties::is_marketplace_charges_Set() const{
    return m_marketplace_charges_isSet;
}

bool OAIChargeSummaryProperties::is_marketplace_charges_Valid() const{
    return m_marketplace_charges_isValid;
}

QString OAIChargeSummaryProperties::getUsageEnd() const {
    return m_usage_end;
}
void OAIChargeSummaryProperties::setUsageEnd(const QString &usage_end) {
    m_usage_end = usage_end;
    m_usage_end_isSet = true;
}

bool OAIChargeSummaryProperties::is_usage_end_Set() const{
    return m_usage_end_isSet;
}

bool OAIChargeSummaryProperties::is_usage_end_Valid() const{
    return m_usage_end_isValid;
}

QString OAIChargeSummaryProperties::getUsageStart() const {
    return m_usage_start;
}
void OAIChargeSummaryProperties::setUsageStart(const QString &usage_start) {
    m_usage_start = usage_start;
    m_usage_start_isSet = true;
}

bool OAIChargeSummaryProperties::is_usage_start_Set() const{
    return m_usage_start_isSet;
}

bool OAIChargeSummaryProperties::is_usage_start_Valid() const{
    return m_usage_start_isValid;
}

bool OAIChargeSummaryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charges_billed_separately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChargeSummaryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
