/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-08-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastProperties_confidenceLevels_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastProperties_confidenceLevels_inner::OAIForecastProperties_confidenceLevels_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastProperties_confidenceLevels_inner::OAIForecastProperties_confidenceLevels_inner() {
    this->initializeModel();
}

OAIForecastProperties_confidenceLevels_inner::~OAIForecastProperties_confidenceLevels_inner() {}

void OAIForecastProperties_confidenceLevels_inner::initializeModel() {

    m_bound_isSet = false;
    m_bound_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIForecastProperties_confidenceLevels_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastProperties_confidenceLevels_inner::fromJsonObject(QJsonObject json) {

    m_bound_isValid = ::OpenAPI::fromJsonValue(m_bound, json[QString("bound")]);
    m_bound_isSet = !json[QString("bound")].isNull() && m_bound_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIForecastProperties_confidenceLevels_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastProperties_confidenceLevels_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_bound_isSet) {
        obj.insert(QString("bound"), ::OpenAPI::toJsonValue(m_bound));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIForecastProperties_confidenceLevels_inner::getBound() const {
    return m_bound;
}
void OAIForecastProperties_confidenceLevels_inner::setBound(const QString &bound) {
    m_bound = bound;
    m_bound_isSet = true;
}

bool OAIForecastProperties_confidenceLevels_inner::is_bound_Set() const{
    return m_bound_isSet;
}

bool OAIForecastProperties_confidenceLevels_inner::is_bound_Valid() const{
    return m_bound_isValid;
}

double OAIForecastProperties_confidenceLevels_inner::getPercentage() const {
    return m_percentage;
}
void OAIForecastProperties_confidenceLevels_inner::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIForecastProperties_confidenceLevels_inner::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIForecastProperties_confidenceLevels_inner::is_percentage_Valid() const{
    return m_percentage_isValid;
}

double OAIForecastProperties_confidenceLevels_inner::getValue() const {
    return m_value;
}
void OAIForecastProperties_confidenceLevels_inner::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIForecastProperties_confidenceLevels_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIForecastProperties_confidenceLevels_inner::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIForecastProperties_confidenceLevels_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastProperties_confidenceLevels_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
