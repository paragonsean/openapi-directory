/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-03-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import UsageDetailsListResult from '../model/UsageDetailsListResult';

/**
* UsageDetails service.
* @module api/UsageDetailsApi
* @version 2018-03-31
*/
export default class UsageDetailsApi {

    /**
    * Constructs a new UsageDetailsApi. 
    * @alias module:api/UsageDetailsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usageDetailsByBillingAccountList operation.
     * @callback module:api/UsageDetailsApi~usageDetailsByBillingAccountListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageDetailsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the usage details by billingAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.
     * @param {String} billingAccountId BillingAccount ID
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-03-31.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
     * @param {String} [filter] May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {String} [skiptoken] Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param {Number} [top] May be used to limit the number of results to the most recent N usageDetails.
     * @param {String} [apply] OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
     * @param {module:api/UsageDetailsApi~usageDetailsByBillingAccountListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageDetailsListResult}
     */
    usageDetailsByBillingAccountList(billingAccountId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'billingAccountId' is set
      if (billingAccountId === undefined || billingAccountId === null) {
        throw new Error("Missing the required parameter 'billingAccountId' when calling usageDetailsByBillingAccountList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usageDetailsByBillingAccountList");
      }

      let pathParams = {
        'billingAccountId': billingAccountId
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$skiptoken': opts['skiptoken'],
        '$top': opts['top'],
        '$apply': opts['apply'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageDetailsListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Consumption/usageDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usageDetailsByBillingAccountListByBillingPeriod operation.
     * @callback module:api/UsageDetailsApi~usageDetailsByBillingAccountListByBillingPeriodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageDetailsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the usage details based on billingAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.
     * @param {String} billingAccountId BillingAccount ID
     * @param {String} billingPeriodName Billing Period Name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-03-31.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
     * @param {String} [filter] May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {String} [apply] OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
     * @param {String} [skiptoken] Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param {Number} [top] May be used to limit the number of results to the most recent N usageDetails.
     * @param {module:api/UsageDetailsApi~usageDetailsByBillingAccountListByBillingPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageDetailsListResult}
     */
    usageDetailsByBillingAccountListByBillingPeriod(billingAccountId, billingPeriodName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'billingAccountId' is set
      if (billingAccountId === undefined || billingAccountId === null) {
        throw new Error("Missing the required parameter 'billingAccountId' when calling usageDetailsByBillingAccountListByBillingPeriod");
      }
      // verify the required parameter 'billingPeriodName' is set
      if (billingPeriodName === undefined || billingPeriodName === null) {
        throw new Error("Missing the required parameter 'billingPeriodName' when calling usageDetailsByBillingAccountListByBillingPeriod");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usageDetailsByBillingAccountListByBillingPeriod");
      }

      let pathParams = {
        'billingAccountId': billingAccountId,
        'billingPeriodName': billingPeriodName
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$apply': opts['apply'],
        '$skiptoken': opts['skiptoken'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageDetailsListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usageDetailsByDepartmentList operation.
     * @callback module:api/UsageDetailsApi~usageDetailsByDepartmentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageDetailsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the usage details by departmentId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.
     * @param {String} departmentId Department ID
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-03-31.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
     * @param {String} [filter] May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {String} [skiptoken] Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param {Number} [top] May be used to limit the number of results to the most recent N usageDetails.
     * @param {String} [apply] OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
     * @param {module:api/UsageDetailsApi~usageDetailsByDepartmentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageDetailsListResult}
     */
    usageDetailsByDepartmentList(departmentId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'departmentId' is set
      if (departmentId === undefined || departmentId === null) {
        throw new Error("Missing the required parameter 'departmentId' when calling usageDetailsByDepartmentList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usageDetailsByDepartmentList");
      }

      let pathParams = {
        'departmentId': departmentId
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$skiptoken': opts['skiptoken'],
        '$top': opts['top'],
        '$apply': opts['apply'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageDetailsListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Consumption/usageDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usageDetailsByDepartmentListByBillingPeriod operation.
     * @callback module:api/UsageDetailsApi~usageDetailsByDepartmentListByBillingPeriodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageDetailsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the usage details  based on departmentId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.
     * @param {String} departmentId Department ID
     * @param {String} billingPeriodName Billing Period Name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-03-31.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
     * @param {String} [filter] May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {String} [apply] OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
     * @param {String} [skiptoken] Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param {Number} [top] May be used to limit the number of results to the most recent N usageDetails.
     * @param {module:api/UsageDetailsApi~usageDetailsByDepartmentListByBillingPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageDetailsListResult}
     */
    usageDetailsByDepartmentListByBillingPeriod(departmentId, billingPeriodName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'departmentId' is set
      if (departmentId === undefined || departmentId === null) {
        throw new Error("Missing the required parameter 'departmentId' when calling usageDetailsByDepartmentListByBillingPeriod");
      }
      // verify the required parameter 'billingPeriodName' is set
      if (billingPeriodName === undefined || billingPeriodName === null) {
        throw new Error("Missing the required parameter 'billingPeriodName' when calling usageDetailsByDepartmentListByBillingPeriod");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usageDetailsByDepartmentListByBillingPeriod");
      }

      let pathParams = {
        'departmentId': departmentId,
        'billingPeriodName': billingPeriodName
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$apply': opts['apply'],
        '$skiptoken': opts['skiptoken'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageDetailsListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usageDetailsByEnrollmentAccountList operation.
     * @callback module:api/UsageDetailsApi~usageDetailsByEnrollmentAccountListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageDetailsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the usage details by enrollmentAccountId for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.
     * @param {String} enrollmentAccountId EnrollmentAccount ID
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-03-31.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
     * @param {String} [filter] May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {String} [skiptoken] Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param {Number} [top] May be used to limit the number of results to the most recent N usageDetails.
     * @param {String} [apply] OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
     * @param {module:api/UsageDetailsApi~usageDetailsByEnrollmentAccountListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageDetailsListResult}
     */
    usageDetailsByEnrollmentAccountList(enrollmentAccountId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'enrollmentAccountId' is set
      if (enrollmentAccountId === undefined || enrollmentAccountId === null) {
        throw new Error("Missing the required parameter 'enrollmentAccountId' when calling usageDetailsByEnrollmentAccountList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usageDetailsByEnrollmentAccountList");
      }

      let pathParams = {
        'enrollmentAccountId': enrollmentAccountId
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$skiptoken': opts['skiptoken'],
        '$top': opts['top'],
        '$apply': opts['apply'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageDetailsListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Consumption/usageDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usageDetailsByEnrollmentAccountListByBillingPeriod operation.
     * @callback module:api/UsageDetailsApi~usageDetailsByEnrollmentAccountListByBillingPeriodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageDetailsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the usage details based on enrollmentAccountId for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.
     * @param {String} enrollmentAccountId EnrollmentAccount ID
     * @param {String} billingPeriodName Billing Period Name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-03-31.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
     * @param {String} [filter] May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {String} [apply] OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
     * @param {String} [skiptoken] Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param {Number} [top] May be used to limit the number of results to the most recent N usageDetails.
     * @param {module:api/UsageDetailsApi~usageDetailsByEnrollmentAccountListByBillingPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageDetailsListResult}
     */
    usageDetailsByEnrollmentAccountListByBillingPeriod(enrollmentAccountId, billingPeriodName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'enrollmentAccountId' is set
      if (enrollmentAccountId === undefined || enrollmentAccountId === null) {
        throw new Error("Missing the required parameter 'enrollmentAccountId' when calling usageDetailsByEnrollmentAccountListByBillingPeriod");
      }
      // verify the required parameter 'billingPeriodName' is set
      if (billingPeriodName === undefined || billingPeriodName === null) {
        throw new Error("Missing the required parameter 'billingPeriodName' when calling usageDetailsByEnrollmentAccountListByBillingPeriod");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usageDetailsByEnrollmentAccountListByBillingPeriod");
      }

      let pathParams = {
        'enrollmentAccountId': enrollmentAccountId,
        'billingPeriodName': billingPeriodName
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$apply': opts['apply'],
        '$skiptoken': opts['skiptoken'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageDetailsListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usageDetailsList operation.
     * @callback module:api/UsageDetailsApi~usageDetailsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageDetailsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the usage details for a scope by current billing period. Usage details are available via this API only for May 1, 2014 or later.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-03-31.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
     * @param {String} [filter] May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName, properties/instanceId or tags. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {String} [skiptoken] Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param {Number} [top] May be used to limit the number of results to the most recent N usageDetails.
     * @param {String} [apply] OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart)
     * @param {module:api/UsageDetailsApi~usageDetailsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageDetailsListResult}
     */
    usageDetailsList(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling usageDetailsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usageDetailsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$skiptoken': opts['skiptoken'],
        '$top': opts['top'],
        '$apply': opts['apply'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageDetailsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/usageDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usageDetailsListByBillingPeriod operation.
     * @callback module:api/UsageDetailsApi~usageDetailsListByBillingPeriodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageDetailsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the usage details for a scope by billing period. Usage details are available via this API only for May 1, 2014 or later.
     * @param {String} subscriptionId Azure Subscription ID.
     * @param {String} billingPeriodName Billing Period Name.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-03-31.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] May be used to expand the properties/additionalProperties or properties/meterDetails within a list of usage details. By default, these fields are not included when listing usage details.
     * @param {String} [filter] May be used to filter usageDetails by properties/usageEnd (Utc time), properties/usageStart (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
     * @param {String} [apply] OData apply expression to aggregate usageDetails by tags or (tags and properties/usageStart) for specified billing period
     * @param {String} [skiptoken] Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.
     * @param {Number} [top] May be used to limit the number of results to the most recent N usageDetails.
     * @param {module:api/UsageDetailsApi~usageDetailsListByBillingPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageDetailsListResult}
     */
    usageDetailsListByBillingPeriod(subscriptionId, billingPeriodName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling usageDetailsListByBillingPeriod");
      }
      // verify the required parameter 'billingPeriodName' is set
      if (billingPeriodName === undefined || billingPeriodName === null) {
        throw new Error("Missing the required parameter 'billingPeriodName' when calling usageDetailsListByBillingPeriod");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usageDetailsListByBillingPeriod");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'billingPeriodName': billingPeriodName
      };
      let queryParams = {
        '$expand': opts['expand'],
        '$filter': opts['filter'],
        '$apply': opts['apply'],
        '$skiptoken': opts['skiptoken'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsageDetailsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/usageDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
