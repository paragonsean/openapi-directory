/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-03-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationRecommendationsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationRecommendationsProperties::OAIReservationRecommendationsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationRecommendationsProperties::OAIReservationRecommendationsProperties() {
    this->initializeModel();
}

OAIReservationRecommendationsProperties::~OAIReservationRecommendationsProperties() {}

void OAIReservationRecommendationsProperties::initializeModel() {

    m_cost_with_no_reserved_instances_isSet = false;
    m_cost_with_no_reserved_instances_isValid = false;

    m_first_usage_date_isSet = false;
    m_first_usage_date_isValid = false;

    m_look_back_period_isSet = false;
    m_look_back_period_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_net_savings_isSet = false;
    m_net_savings_isValid = false;

    m_recommended_quantity_isSet = false;
    m_recommended_quantity_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_total_cost_with_reserved_instances_isSet = false;
    m_total_cost_with_reserved_instances_isValid = false;
}

void OAIReservationRecommendationsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationRecommendationsProperties::fromJsonObject(QJsonObject json) {

    m_cost_with_no_reserved_instances_isValid = ::OpenAPI::fromJsonValue(m_cost_with_no_reserved_instances, json[QString("costWithNoReservedInstances")]);
    m_cost_with_no_reserved_instances_isSet = !json[QString("costWithNoReservedInstances")].isNull() && m_cost_with_no_reserved_instances_isValid;

    m_first_usage_date_isValid = ::OpenAPI::fromJsonValue(m_first_usage_date, json[QString("firstUsageDate")]);
    m_first_usage_date_isSet = !json[QString("firstUsageDate")].isNull() && m_first_usage_date_isValid;

    m_look_back_period_isValid = ::OpenAPI::fromJsonValue(m_look_back_period, json[QString("lookBackPeriod")]);
    m_look_back_period_isSet = !json[QString("lookBackPeriod")].isNull() && m_look_back_period_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("meterId")]);
    m_meter_id_isSet = !json[QString("meterId")].isNull() && m_meter_id_isValid;

    m_net_savings_isValid = ::OpenAPI::fromJsonValue(m_net_savings, json[QString("netSavings")]);
    m_net_savings_isSet = !json[QString("netSavings")].isNull() && m_net_savings_isValid;

    m_recommended_quantity_isValid = ::OpenAPI::fromJsonValue(m_recommended_quantity, json[QString("recommendedQuantity")]);
    m_recommended_quantity_isSet = !json[QString("recommendedQuantity")].isNull() && m_recommended_quantity_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_total_cost_with_reserved_instances_isValid = ::OpenAPI::fromJsonValue(m_total_cost_with_reserved_instances, json[QString("totalCostWithReservedInstances")]);
    m_total_cost_with_reserved_instances_isSet = !json[QString("totalCostWithReservedInstances")].isNull() && m_total_cost_with_reserved_instances_isValid;
}

QString OAIReservationRecommendationsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationRecommendationsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_with_no_reserved_instances_isSet) {
        obj.insert(QString("costWithNoReservedInstances"), ::OpenAPI::toJsonValue(m_cost_with_no_reserved_instances));
    }
    if (m_first_usage_date_isSet) {
        obj.insert(QString("firstUsageDate"), ::OpenAPI::toJsonValue(m_first_usage_date));
    }
    if (m_look_back_period_isSet) {
        obj.insert(QString("lookBackPeriod"), ::OpenAPI::toJsonValue(m_look_back_period));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("meterId"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_net_savings_isSet) {
        obj.insert(QString("netSavings"), ::OpenAPI::toJsonValue(m_net_savings));
    }
    if (m_recommended_quantity_isSet) {
        obj.insert(QString("recommendedQuantity"), ::OpenAPI::toJsonValue(m_recommended_quantity));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_total_cost_with_reserved_instances_isSet) {
        obj.insert(QString("totalCostWithReservedInstances"), ::OpenAPI::toJsonValue(m_total_cost_with_reserved_instances));
    }
    return obj;
}

double OAIReservationRecommendationsProperties::getCostWithNoReservedInstances() const {
    return m_cost_with_no_reserved_instances;
}
void OAIReservationRecommendationsProperties::setCostWithNoReservedInstances(const double &cost_with_no_reserved_instances) {
    m_cost_with_no_reserved_instances = cost_with_no_reserved_instances;
    m_cost_with_no_reserved_instances_isSet = true;
}

bool OAIReservationRecommendationsProperties::is_cost_with_no_reserved_instances_Set() const{
    return m_cost_with_no_reserved_instances_isSet;
}

bool OAIReservationRecommendationsProperties::is_cost_with_no_reserved_instances_Valid() const{
    return m_cost_with_no_reserved_instances_isValid;
}

QDateTime OAIReservationRecommendationsProperties::getFirstUsageDate() const {
    return m_first_usage_date;
}
void OAIReservationRecommendationsProperties::setFirstUsageDate(const QDateTime &first_usage_date) {
    m_first_usage_date = first_usage_date;
    m_first_usage_date_isSet = true;
}

bool OAIReservationRecommendationsProperties::is_first_usage_date_Set() const{
    return m_first_usage_date_isSet;
}

bool OAIReservationRecommendationsProperties::is_first_usage_date_Valid() const{
    return m_first_usage_date_isValid;
}

QString OAIReservationRecommendationsProperties::getLookBackPeriod() const {
    return m_look_back_period;
}
void OAIReservationRecommendationsProperties::setLookBackPeriod(const QString &look_back_period) {
    m_look_back_period = look_back_period;
    m_look_back_period_isSet = true;
}

bool OAIReservationRecommendationsProperties::is_look_back_period_Set() const{
    return m_look_back_period_isSet;
}

bool OAIReservationRecommendationsProperties::is_look_back_period_Valid() const{
    return m_look_back_period_isValid;
}

QString OAIReservationRecommendationsProperties::getMeterId() const {
    return m_meter_id;
}
void OAIReservationRecommendationsProperties::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIReservationRecommendationsProperties::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIReservationRecommendationsProperties::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

double OAIReservationRecommendationsProperties::getNetSavings() const {
    return m_net_savings;
}
void OAIReservationRecommendationsProperties::setNetSavings(const double &net_savings) {
    m_net_savings = net_savings;
    m_net_savings_isSet = true;
}

bool OAIReservationRecommendationsProperties::is_net_savings_Set() const{
    return m_net_savings_isSet;
}

bool OAIReservationRecommendationsProperties::is_net_savings_Valid() const{
    return m_net_savings_isValid;
}

double OAIReservationRecommendationsProperties::getRecommendedQuantity() const {
    return m_recommended_quantity;
}
void OAIReservationRecommendationsProperties::setRecommendedQuantity(const double &recommended_quantity) {
    m_recommended_quantity = recommended_quantity;
    m_recommended_quantity_isSet = true;
}

bool OAIReservationRecommendationsProperties::is_recommended_quantity_Set() const{
    return m_recommended_quantity_isSet;
}

bool OAIReservationRecommendationsProperties::is_recommended_quantity_Valid() const{
    return m_recommended_quantity_isValid;
}

QString OAIReservationRecommendationsProperties::getScope() const {
    return m_scope;
}
void OAIReservationRecommendationsProperties::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIReservationRecommendationsProperties::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIReservationRecommendationsProperties::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIReservationRecommendationsProperties::getTerm() const {
    return m_term;
}
void OAIReservationRecommendationsProperties::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIReservationRecommendationsProperties::is_term_Set() const{
    return m_term_isSet;
}

bool OAIReservationRecommendationsProperties::is_term_Valid() const{
    return m_term_isValid;
}

double OAIReservationRecommendationsProperties::getTotalCostWithReservedInstances() const {
    return m_total_cost_with_reserved_instances;
}
void OAIReservationRecommendationsProperties::setTotalCostWithReservedInstances(const double &total_cost_with_reserved_instances) {
    m_total_cost_with_reserved_instances = total_cost_with_reserved_instances;
    m_total_cost_with_reserved_instances_isSet = true;
}

bool OAIReservationRecommendationsProperties::is_total_cost_with_reserved_instances_Set() const{
    return m_total_cost_with_reserved_instances_isSet;
}

bool OAIReservationRecommendationsProperties::is_total_cost_with_reserved_instances_Valid() const{
    return m_total_cost_with_reserved_instances_isValid;
}

bool OAIReservationRecommendationsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_with_no_reserved_instances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_usage_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_look_back_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_savings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cost_with_reserved_instances_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationRecommendationsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
