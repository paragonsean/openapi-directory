/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-03-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsageDetailsApi_H
#define OAI_OAIUsageDetailsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIUsageDetailsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsageDetailsApi : public QObject {
    Q_OBJECT

public:
    OAIUsageDetailsApi(const int timeOut = 0);
    ~OAIUsageDetailsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  billing_account_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void usageDetailsByBillingAccountList(const QString &billing_account_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void usageDetailsByBillingAccountListByBillingPeriod(const QString &billing_account_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  department_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void usageDetailsByDepartmentList(const QString &department_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  department_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void usageDetailsByDepartmentListByBillingPeriod(const QString &department_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void usageDetailsByEnrollmentAccountList(const QString &enrollment_account_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void usageDetailsByEnrollmentAccountListByBillingPeriod(const QString &enrollment_account_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void usageDetailsList(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    * @param[in]  skiptoken QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void usageDetailsListByBillingPeriod(const QString &subscription_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usageDetailsByBillingAccountListCallback(OAIHttpRequestWorker *worker);
    void usageDetailsByBillingAccountListByBillingPeriodCallback(OAIHttpRequestWorker *worker);
    void usageDetailsByDepartmentListCallback(OAIHttpRequestWorker *worker);
    void usageDetailsByDepartmentListByBillingPeriodCallback(OAIHttpRequestWorker *worker);
    void usageDetailsByEnrollmentAccountListCallback(OAIHttpRequestWorker *worker);
    void usageDetailsByEnrollmentAccountListByBillingPeriodCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListCallback(OAIHttpRequestWorker *worker);
    void usageDetailsListByBillingPeriodCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usageDetailsByBillingAccountListSignal(OAIUsageDetailsListResult summary);
    void usageDetailsByBillingAccountListByBillingPeriodSignal(OAIUsageDetailsListResult summary);
    void usageDetailsByDepartmentListSignal(OAIUsageDetailsListResult summary);
    void usageDetailsByDepartmentListByBillingPeriodSignal(OAIUsageDetailsListResult summary);
    void usageDetailsByEnrollmentAccountListSignal(OAIUsageDetailsListResult summary);
    void usageDetailsByEnrollmentAccountListByBillingPeriodSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListSignal(OAIUsageDetailsListResult summary);
    void usageDetailsListByBillingPeriodSignal(OAIUsageDetailsListResult summary);


    void usageDetailsByBillingAccountListSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsByBillingAccountListByBillingPeriodSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsByDepartmentListSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsByDepartmentListByBillingPeriodSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsByEnrollmentAccountListSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsByEnrollmentAccountListByBillingPeriodSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);
    void usageDetailsListByBillingPeriodSignalFull(OAIHttpRequestWorker *worker, OAIUsageDetailsListResult summary);

    Q_DECL_DEPRECATED_X("Use usageDetailsByBillingAccountListSignalError() instead")
    void usageDetailsByBillingAccountListSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByBillingAccountListSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsByBillingAccountListByBillingPeriodSignalError() instead")
    void usageDetailsByBillingAccountListByBillingPeriodSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByBillingAccountListByBillingPeriodSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsByDepartmentListSignalError() instead")
    void usageDetailsByDepartmentListSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByDepartmentListSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsByDepartmentListByBillingPeriodSignalError() instead")
    void usageDetailsByDepartmentListByBillingPeriodSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByDepartmentListByBillingPeriodSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsByEnrollmentAccountListSignalError() instead")
    void usageDetailsByEnrollmentAccountListSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByEnrollmentAccountListSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsByEnrollmentAccountListByBillingPeriodSignalError() instead")
    void usageDetailsByEnrollmentAccountListByBillingPeriodSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByEnrollmentAccountListByBillingPeriodSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListSignalError() instead")
    void usageDetailsListSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByBillingPeriodSignalError() instead")
    void usageDetailsListByBillingPeriodSignalE(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByBillingPeriodSignalError(OAIUsageDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usageDetailsByBillingAccountListSignalErrorFull() instead")
    void usageDetailsByBillingAccountListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByBillingAccountListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsByBillingAccountListByBillingPeriodSignalErrorFull() instead")
    void usageDetailsByBillingAccountListByBillingPeriodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByBillingAccountListByBillingPeriodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsByDepartmentListSignalErrorFull() instead")
    void usageDetailsByDepartmentListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByDepartmentListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsByDepartmentListByBillingPeriodSignalErrorFull() instead")
    void usageDetailsByDepartmentListByBillingPeriodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByDepartmentListByBillingPeriodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsByEnrollmentAccountListSignalErrorFull() instead")
    void usageDetailsByEnrollmentAccountListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByEnrollmentAccountListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsByEnrollmentAccountListByBillingPeriodSignalErrorFull() instead")
    void usageDetailsByEnrollmentAccountListByBillingPeriodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsByEnrollmentAccountListByBillingPeriodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListSignalErrorFull() instead")
    void usageDetailsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usageDetailsListByBillingPeriodSignalErrorFull() instead")
    void usageDetailsListByBillingPeriodSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usageDetailsListByBillingPeriodSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
