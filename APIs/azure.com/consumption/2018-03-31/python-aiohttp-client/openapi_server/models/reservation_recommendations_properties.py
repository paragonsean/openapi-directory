# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReservationRecommendationsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_with_no_reserved_instances: float=None, first_usage_date: datetime=None, look_back_period: str=None, meter_id: str=None, net_savings: float=None, recommended_quantity: float=None, scope: str=None, term: str=None, total_cost_with_reserved_instances: float=None):
        """ReservationRecommendationsProperties - a model defined in OpenAPI

        :param cost_with_no_reserved_instances: The cost_with_no_reserved_instances of this ReservationRecommendationsProperties.
        :param first_usage_date: The first_usage_date of this ReservationRecommendationsProperties.
        :param look_back_period: The look_back_period of this ReservationRecommendationsProperties.
        :param meter_id: The meter_id of this ReservationRecommendationsProperties.
        :param net_savings: The net_savings of this ReservationRecommendationsProperties.
        :param recommended_quantity: The recommended_quantity of this ReservationRecommendationsProperties.
        :param scope: The scope of this ReservationRecommendationsProperties.
        :param term: The term of this ReservationRecommendationsProperties.
        :param total_cost_with_reserved_instances: The total_cost_with_reserved_instances of this ReservationRecommendationsProperties.
        """
        self.openapi_types = {
            'cost_with_no_reserved_instances': float,
            'first_usage_date': datetime,
            'look_back_period': str,
            'meter_id': str,
            'net_savings': float,
            'recommended_quantity': float,
            'scope': str,
            'term': str,
            'total_cost_with_reserved_instances': float
        }

        self.attribute_map = {
            'cost_with_no_reserved_instances': 'costWithNoReservedInstances',
            'first_usage_date': 'firstUsageDate',
            'look_back_period': 'lookBackPeriod',
            'meter_id': 'meterId',
            'net_savings': 'netSavings',
            'recommended_quantity': 'recommendedQuantity',
            'scope': 'scope',
            'term': 'term',
            'total_cost_with_reserved_instances': 'totalCostWithReservedInstances'
        }

        self._cost_with_no_reserved_instances = cost_with_no_reserved_instances
        self._first_usage_date = first_usage_date
        self._look_back_period = look_back_period
        self._meter_id = meter_id
        self._net_savings = net_savings
        self._recommended_quantity = recommended_quantity
        self._scope = scope
        self._term = term
        self._total_cost_with_reserved_instances = total_cost_with_reserved_instances

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReservationRecommendationsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReservationRecommendationsProperties of this ReservationRecommendationsProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_with_no_reserved_instances(self):
        """Gets the cost_with_no_reserved_instances of this ReservationRecommendationsProperties.

        The total amount of cost without reserved instances.

        :return: The cost_with_no_reserved_instances of this ReservationRecommendationsProperties.
        :rtype: float
        """
        return self._cost_with_no_reserved_instances

    @cost_with_no_reserved_instances.setter
    def cost_with_no_reserved_instances(self, cost_with_no_reserved_instances):
        """Sets the cost_with_no_reserved_instances of this ReservationRecommendationsProperties.

        The total amount of cost without reserved instances.

        :param cost_with_no_reserved_instances: The cost_with_no_reserved_instances of this ReservationRecommendationsProperties.
        :type cost_with_no_reserved_instances: float
        """

        self._cost_with_no_reserved_instances = cost_with_no_reserved_instances

    @property
    def first_usage_date(self):
        """Gets the first_usage_date of this ReservationRecommendationsProperties.

        The usage date for looking back.

        :return: The first_usage_date of this ReservationRecommendationsProperties.
        :rtype: datetime
        """
        return self._first_usage_date

    @first_usage_date.setter
    def first_usage_date(self, first_usage_date):
        """Sets the first_usage_date of this ReservationRecommendationsProperties.

        The usage date for looking back.

        :param first_usage_date: The first_usage_date of this ReservationRecommendationsProperties.
        :type first_usage_date: datetime
        """

        self._first_usage_date = first_usage_date

    @property
    def look_back_period(self):
        """Gets the look_back_period of this ReservationRecommendationsProperties.

        The number of days of usage to look back for recommendations.

        :return: The look_back_period of this ReservationRecommendationsProperties.
        :rtype: str
        """
        return self._look_back_period

    @look_back_period.setter
    def look_back_period(self, look_back_period):
        """Sets the look_back_period of this ReservationRecommendationsProperties.

        The number of days of usage to look back for recommendations.

        :param look_back_period: The look_back_period of this ReservationRecommendationsProperties.
        :type look_back_period: str
        """

        self._look_back_period = look_back_period

    @property
    def meter_id(self):
        """Gets the meter_id of this ReservationRecommendationsProperties.

        The meter id (GUID)

        :return: The meter_id of this ReservationRecommendationsProperties.
        :rtype: str
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this ReservationRecommendationsProperties.

        The meter id (GUID)

        :param meter_id: The meter_id of this ReservationRecommendationsProperties.
        :type meter_id: str
        """

        self._meter_id = meter_id

    @property
    def net_savings(self):
        """Gets the net_savings of this ReservationRecommendationsProperties.

        Total estimated savings with reserved instances.

        :return: The net_savings of this ReservationRecommendationsProperties.
        :rtype: float
        """
        return self._net_savings

    @net_savings.setter
    def net_savings(self, net_savings):
        """Sets the net_savings of this ReservationRecommendationsProperties.

        Total estimated savings with reserved instances.

        :param net_savings: The net_savings of this ReservationRecommendationsProperties.
        :type net_savings: float
        """

        self._net_savings = net_savings

    @property
    def recommended_quantity(self):
        """Gets the recommended_quantity of this ReservationRecommendationsProperties.

        Recommended quality for reserved instances.

        :return: The recommended_quantity of this ReservationRecommendationsProperties.
        :rtype: float
        """
        return self._recommended_quantity

    @recommended_quantity.setter
    def recommended_quantity(self, recommended_quantity):
        """Sets the recommended_quantity of this ReservationRecommendationsProperties.

        Recommended quality for reserved instances.

        :param recommended_quantity: The recommended_quantity of this ReservationRecommendationsProperties.
        :type recommended_quantity: float
        """

        self._recommended_quantity = recommended_quantity

    @property
    def scope(self):
        """Gets the scope of this ReservationRecommendationsProperties.

        Shared or single recommendation.

        :return: The scope of this ReservationRecommendationsProperties.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ReservationRecommendationsProperties.

        Shared or single recommendation.

        :param scope: The scope of this ReservationRecommendationsProperties.
        :type scope: str
        """

        self._scope = scope

    @property
    def term(self):
        """Gets the term of this ReservationRecommendationsProperties.

        RI recommendations in one or three year terms.

        :return: The term of this ReservationRecommendationsProperties.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this ReservationRecommendationsProperties.

        RI recommendations in one or three year terms.

        :param term: The term of this ReservationRecommendationsProperties.
        :type term: str
        """

        self._term = term

    @property
    def total_cost_with_reserved_instances(self):
        """Gets the total_cost_with_reserved_instances of this ReservationRecommendationsProperties.

        The total amount of cost with reserved instances.

        :return: The total_cost_with_reserved_instances of this ReservationRecommendationsProperties.
        :rtype: float
        """
        return self._total_cost_with_reserved_instances

    @total_cost_with_reserved_instances.setter
    def total_cost_with_reserved_instances(self, total_cost_with_reserved_instances):
        """Sets the total_cost_with_reserved_instances of this ReservationRecommendationsProperties.

        The total amount of cost with reserved instances.

        :param total_cost_with_reserved_instances: The total_cost_with_reserved_instances of this ReservationRecommendationsProperties.
        :type total_cost_with_reserved_instances: float
        """

        self._total_cost_with_reserved_instances = total_cost_with_reserved_instances
