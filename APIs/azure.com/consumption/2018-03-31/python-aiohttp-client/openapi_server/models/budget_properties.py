# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.budget_time_period import BudgetTimePeriod
from openapi_server.models.current_spend import CurrentSpend
from openapi_server.models.filters import Filters
from openapi_server.models.notification import Notification
from openapi_server import util


class BudgetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, category: str=None, current_spend: CurrentSpend=None, filters: Filters=None, notifications: Dict[str, Notification]=None, time_grain: str=None, time_period: BudgetTimePeriod=None):
        """BudgetProperties - a model defined in OpenAPI

        :param amount: The amount of this BudgetProperties.
        :param category: The category of this BudgetProperties.
        :param current_spend: The current_spend of this BudgetProperties.
        :param filters: The filters of this BudgetProperties.
        :param notifications: The notifications of this BudgetProperties.
        :param time_grain: The time_grain of this BudgetProperties.
        :param time_period: The time_period of this BudgetProperties.
        """
        self.openapi_types = {
            'amount': float,
            'category': str,
            'current_spend': CurrentSpend,
            'filters': Filters,
            'notifications': Dict[str, Notification],
            'time_grain': str,
            'time_period': BudgetTimePeriod
        }

        self.attribute_map = {
            'amount': 'amount',
            'category': 'category',
            'current_spend': 'currentSpend',
            'filters': 'filters',
            'notifications': 'notifications',
            'time_grain': 'timeGrain',
            'time_period': 'timePeriod'
        }

        self._amount = amount
        self._category = category
        self._current_spend = current_spend
        self._filters = filters
        self._notifications = notifications
        self._time_grain = time_grain
        self._time_period = time_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BudgetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BudgetProperties of this BudgetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this BudgetProperties.

        The total amount of cost to track with the budget

        :return: The amount of this BudgetProperties.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BudgetProperties.

        The total amount of cost to track with the budget

        :param amount: The amount of this BudgetProperties.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def category(self):
        """Gets the category of this BudgetProperties.

        The category of the budget, whether the budget tracks cost or usage.

        :return: The category of this BudgetProperties.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BudgetProperties.

        The category of the budget, whether the budget tracks cost or usage.

        :param category: The category of this BudgetProperties.
        :type category: str
        """
        allowed_values = ["Cost", "Usage"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def current_spend(self):
        """Gets the current_spend of this BudgetProperties.


        :return: The current_spend of this BudgetProperties.
        :rtype: CurrentSpend
        """
        return self._current_spend

    @current_spend.setter
    def current_spend(self, current_spend):
        """Sets the current_spend of this BudgetProperties.


        :param current_spend: The current_spend of this BudgetProperties.
        :type current_spend: CurrentSpend
        """

        self._current_spend = current_spend

    @property
    def filters(self):
        """Gets the filters of this BudgetProperties.


        :return: The filters of this BudgetProperties.
        :rtype: Filters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this BudgetProperties.


        :param filters: The filters of this BudgetProperties.
        :type filters: Filters
        """

        self._filters = filters

    @property
    def notifications(self):
        """Gets the notifications of this BudgetProperties.

        Dictionary of notifications associated with the budget. Budget can have up to five notifications.

        :return: The notifications of this BudgetProperties.
        :rtype: Dict[str, Notification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this BudgetProperties.

        Dictionary of notifications associated with the budget. Budget can have up to five notifications.

        :param notifications: The notifications of this BudgetProperties.
        :type notifications: Dict[str, Notification]
        """

        self._notifications = notifications

    @property
    def time_grain(self):
        """Gets the time_grain of this BudgetProperties.

        The time covered by a budget. Tracking of the amount will be reset based on the time grain.

        :return: The time_grain of this BudgetProperties.
        :rtype: str
        """
        return self._time_grain

    @time_grain.setter
    def time_grain(self, time_grain):
        """Sets the time_grain of this BudgetProperties.

        The time covered by a budget. Tracking of the amount will be reset based on the time grain.

        :param time_grain: The time_grain of this BudgetProperties.
        :type time_grain: str
        """
        allowed_values = ["Monthly", "Quarterly", "Annually"]  # noqa: E501
        if time_grain not in allowed_values:
            raise ValueError(
                "Invalid value for `time_grain` ({0}), must be one of {1}"
                .format(time_grain, allowed_values)
            )

        self._time_grain = time_grain

    @property
    def time_period(self):
        """Gets the time_period of this BudgetProperties.


        :return: The time_period of this BudgetProperties.
        :rtype: BudgetTimePeriod
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this BudgetProperties.


        :param time_period: The time_period of this BudgetProperties.
        :type time_period: BudgetTimePeriod
        """
        if time_period is None:
            raise ValueError("Invalid value for `time_period`, must not be `None`")

        self._time_period = time_period
