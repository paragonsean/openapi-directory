/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the reservation recommendation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:38.919180-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationRecommendationProperties {
  public static final String SERIALIZED_NAME_COST_WITH_NO_RESERVED_INSTANCES = "costWithNoReservedInstances";
  @SerializedName(SERIALIZED_NAME_COST_WITH_NO_RESERVED_INSTANCES)
  private BigDecimal costWithNoReservedInstances;

  public static final String SERIALIZED_NAME_FIRST_USAGE_DATE = "firstUsageDate";
  @SerializedName(SERIALIZED_NAME_FIRST_USAGE_DATE)
  private OffsetDateTime firstUsageDate;

  public static final String SERIALIZED_NAME_LOOK_BACK_PERIOD = "lookBackPeriod";
  @SerializedName(SERIALIZED_NAME_LOOK_BACK_PERIOD)
  private String lookBackPeriod;

  public static final String SERIALIZED_NAME_METER_ID = "meterId";
  @SerializedName(SERIALIZED_NAME_METER_ID)
  private UUID meterId;

  public static final String SERIALIZED_NAME_NET_SAVINGS = "netSavings";
  @SerializedName(SERIALIZED_NAME_NET_SAVINGS)
  private BigDecimal netSavings;

  public static final String SERIALIZED_NAME_RECOMMENDED_QUANTITY = "recommendedQuantity";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_QUANTITY)
  private BigDecimal recommendedQuantity;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public static final String SERIALIZED_NAME_TOTAL_COST_WITH_RESERVED_INSTANCES = "totalCostWithReservedInstances";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST_WITH_RESERVED_INSTANCES)
  private BigDecimal totalCostWithReservedInstances;

  public ReservationRecommendationProperties() {
  }

  public ReservationRecommendationProperties(
     BigDecimal costWithNoReservedInstances, 
     OffsetDateTime firstUsageDate, 
     String lookBackPeriod, 
     UUID meterId, 
     BigDecimal netSavings, 
     BigDecimal recommendedQuantity, 
     String scope, 
     String term, 
     BigDecimal totalCostWithReservedInstances
  ) {
    this();
    this.costWithNoReservedInstances = costWithNoReservedInstances;
    this.firstUsageDate = firstUsageDate;
    this.lookBackPeriod = lookBackPeriod;
    this.meterId = meterId;
    this.netSavings = netSavings;
    this.recommendedQuantity = recommendedQuantity;
    this.scope = scope;
    this.term = term;
    this.totalCostWithReservedInstances = totalCostWithReservedInstances;
  }

  /**
   * The total amount of cost without reserved instances.
   * @return costWithNoReservedInstances
   */
  @javax.annotation.Nullable
  public BigDecimal getCostWithNoReservedInstances() {
    return costWithNoReservedInstances;
  }



  /**
   * The usage date for looking back.
   * @return firstUsageDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstUsageDate() {
    return firstUsageDate;
  }



  /**
   * The number of days of usage to look back for recommendation.
   * @return lookBackPeriod
   */
  @javax.annotation.Nullable
  public String getLookBackPeriod() {
    return lookBackPeriod;
  }



  /**
   * The meter id (GUID)
   * @return meterId
   */
  @javax.annotation.Nullable
  public UUID getMeterId() {
    return meterId;
  }



  /**
   * Total estimated savings with reserved instances.
   * @return netSavings
   */
  @javax.annotation.Nullable
  public BigDecimal getNetSavings() {
    return netSavings;
  }



  /**
   * Recommended quality for reserved instances.
   * @return recommendedQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getRecommendedQuantity() {
    return recommendedQuantity;
  }



  /**
   * Shared or single recommendation.
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }



  /**
   * RI recommendations in one or three year terms.
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }



  /**
   * The total amount of cost with reserved instances.
   * @return totalCostWithReservedInstances
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalCostWithReservedInstances() {
    return totalCostWithReservedInstances;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationRecommendationProperties reservationRecommendationProperties = (ReservationRecommendationProperties) o;
    return Objects.equals(this.costWithNoReservedInstances, reservationRecommendationProperties.costWithNoReservedInstances) &&
        Objects.equals(this.firstUsageDate, reservationRecommendationProperties.firstUsageDate) &&
        Objects.equals(this.lookBackPeriod, reservationRecommendationProperties.lookBackPeriod) &&
        Objects.equals(this.meterId, reservationRecommendationProperties.meterId) &&
        Objects.equals(this.netSavings, reservationRecommendationProperties.netSavings) &&
        Objects.equals(this.recommendedQuantity, reservationRecommendationProperties.recommendedQuantity) &&
        Objects.equals(this.scope, reservationRecommendationProperties.scope) &&
        Objects.equals(this.term, reservationRecommendationProperties.term) &&
        Objects.equals(this.totalCostWithReservedInstances, reservationRecommendationProperties.totalCostWithReservedInstances);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costWithNoReservedInstances, firstUsageDate, lookBackPeriod, meterId, netSavings, recommendedQuantity, scope, term, totalCostWithReservedInstances);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationRecommendationProperties {\n");
    sb.append("    costWithNoReservedInstances: ").append(toIndentedString(costWithNoReservedInstances)).append("\n");
    sb.append("    firstUsageDate: ").append(toIndentedString(firstUsageDate)).append("\n");
    sb.append("    lookBackPeriod: ").append(toIndentedString(lookBackPeriod)).append("\n");
    sb.append("    meterId: ").append(toIndentedString(meterId)).append("\n");
    sb.append("    netSavings: ").append(toIndentedString(netSavings)).append("\n");
    sb.append("    recommendedQuantity: ").append(toIndentedString(recommendedQuantity)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    totalCostWithReservedInstances: ").append(toIndentedString(totalCostWithReservedInstances)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costWithNoReservedInstances");
    openapiFields.add("firstUsageDate");
    openapiFields.add("lookBackPeriod");
    openapiFields.add("meterId");
    openapiFields.add("netSavings");
    openapiFields.add("recommendedQuantity");
    openapiFields.add("scope");
    openapiFields.add("term");
    openapiFields.add("totalCostWithReservedInstances");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationRecommendationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationRecommendationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationRecommendationProperties is not found in the empty JSON string", ReservationRecommendationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationRecommendationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationRecommendationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lookBackPeriod") != null && !jsonObj.get("lookBackPeriod").isJsonNull()) && !jsonObj.get("lookBackPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lookBackPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lookBackPeriod").toString()));
      }
      if ((jsonObj.get("meterId") != null && !jsonObj.get("meterId").isJsonNull()) && !jsonObj.get("meterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterId").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) && !jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationRecommendationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationRecommendationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationRecommendationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationRecommendationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationRecommendationProperties>() {
           @Override
           public void write(JsonWriter out, ReservationRecommendationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationRecommendationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationRecommendationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationRecommendationProperties
   * @throws IOException if the JSON string is invalid with respect to ReservationRecommendationProperties
   */
  public static ReservationRecommendationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationRecommendationProperties.class);
  }

  /**
   * Convert an instance of ReservationRecommendationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

