/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BalancePropertiesAdjustmentDetailsInner;
import org.openapitools.client.model.BalancePropertiesNewPurchasesDetailsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the balance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:38.919180-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BalanceProperties {
  public static final String SERIALIZED_NAME_ADJUSTMENT_DETAILS = "adjustmentDetails";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT_DETAILS)
  private List<BalancePropertiesAdjustmentDetailsInner> adjustmentDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADJUSTMENTS = "adjustments";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENTS)
  private BigDecimal adjustments;

  public static final String SERIALIZED_NAME_AZURE_MARKETPLACE_SERVICE_CHARGES = "azureMarketplaceServiceCharges";
  @SerializedName(SERIALIZED_NAME_AZURE_MARKETPLACE_SERVICE_CHARGES)
  private BigDecimal azureMarketplaceServiceCharges;

  public static final String SERIALIZED_NAME_BEGINNING_BALANCE = "beginningBalance";
  @SerializedName(SERIALIZED_NAME_BEGINNING_BALANCE)
  private BigDecimal beginningBalance;

  /**
   * The billing frequency.
   */
  @JsonAdapter(BillingFrequencyEnum.Adapter.class)
  public enum BillingFrequencyEnum {
    MONTH("Month"),
    
    QUARTER("Quarter"),
    
    YEAR("Year");

    private String value;

    BillingFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingFrequencyEnum fromValue(String value) {
      for (BillingFrequencyEnum b : BillingFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BillingFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BillingFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BillingFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BILLING_FREQUENCY = "billingFrequency";
  @SerializedName(SERIALIZED_NAME_BILLING_FREQUENCY)
  private BillingFrequencyEnum billingFrequency;

  public static final String SERIALIZED_NAME_CHARGES_BILLED_SEPARATELY = "chargesBilledSeparately";
  @SerializedName(SERIALIZED_NAME_CHARGES_BILLED_SEPARATELY)
  private BigDecimal chargesBilledSeparately;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_ENDING_BALANCE = "endingBalance";
  @SerializedName(SERIALIZED_NAME_ENDING_BALANCE)
  private BigDecimal endingBalance;

  public static final String SERIALIZED_NAME_NEW_PURCHASES = "newPurchases";
  @SerializedName(SERIALIZED_NAME_NEW_PURCHASES)
  private BigDecimal newPurchases;

  public static final String SERIALIZED_NAME_NEW_PURCHASES_DETAILS = "newPurchasesDetails";
  @SerializedName(SERIALIZED_NAME_NEW_PURCHASES_DETAILS)
  private List<BalancePropertiesNewPurchasesDetailsInner> newPurchasesDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_HIDDEN = "priceHidden";
  @SerializedName(SERIALIZED_NAME_PRICE_HIDDEN)
  private Boolean priceHidden;

  public static final String SERIALIZED_NAME_SERVICE_OVERAGE = "serviceOverage";
  @SerializedName(SERIALIZED_NAME_SERVICE_OVERAGE)
  private BigDecimal serviceOverage;

  public static final String SERIALIZED_NAME_TOTAL_OVERAGE = "totalOverage";
  @SerializedName(SERIALIZED_NAME_TOTAL_OVERAGE)
  private BigDecimal totalOverage;

  public static final String SERIALIZED_NAME_TOTAL_USAGE = "totalUsage";
  @SerializedName(SERIALIZED_NAME_TOTAL_USAGE)
  private BigDecimal totalUsage;

  public static final String SERIALIZED_NAME_UTILIZED = "utilized";
  @SerializedName(SERIALIZED_NAME_UTILIZED)
  private BigDecimal utilized;

  public BalanceProperties() {
  }

  public BalanceProperties(
     List<BalancePropertiesAdjustmentDetailsInner> adjustmentDetails, 
     BigDecimal adjustments, 
     BigDecimal azureMarketplaceServiceCharges, 
     BigDecimal beginningBalance, 
     BigDecimal chargesBilledSeparately, 
     String currency, 
     BigDecimal endingBalance, 
     BigDecimal newPurchases, 
     List<BalancePropertiesNewPurchasesDetailsInner> newPurchasesDetails, 
     Boolean priceHidden, 
     BigDecimal serviceOverage, 
     BigDecimal totalOverage, 
     BigDecimal totalUsage, 
     BigDecimal utilized
  ) {
    this();
    this.adjustmentDetails = adjustmentDetails;
    this.adjustments = adjustments;
    this.azureMarketplaceServiceCharges = azureMarketplaceServiceCharges;
    this.beginningBalance = beginningBalance;
    this.chargesBilledSeparately = chargesBilledSeparately;
    this.currency = currency;
    this.endingBalance = endingBalance;
    this.newPurchases = newPurchases;
    this.newPurchasesDetails = newPurchasesDetails;
    this.priceHidden = priceHidden;
    this.serviceOverage = serviceOverage;
    this.totalOverage = totalOverage;
    this.totalUsage = totalUsage;
    this.utilized = utilized;
  }

  /**
   * List of Adjustments (Promo credit, SIE credit etc.).
   * @return adjustmentDetails
   */
  @javax.annotation.Nullable
  public List<BalancePropertiesAdjustmentDetailsInner> getAdjustmentDetails() {
    return adjustmentDetails;
  }



  /**
   * Total adjustment amount.
   * @return adjustments
   */
  @javax.annotation.Nullable
  public BigDecimal getAdjustments() {
    return adjustments;
  }



  /**
   * Total charges for Azure Marketplace.
   * @return azureMarketplaceServiceCharges
   */
  @javax.annotation.Nullable
  public BigDecimal getAzureMarketplaceServiceCharges() {
    return azureMarketplaceServiceCharges;
  }



  /**
   * The beginning balance for the billing period.
   * @return beginningBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getBeginningBalance() {
    return beginningBalance;
  }



  public BalanceProperties billingFrequency(BillingFrequencyEnum billingFrequency) {
    this.billingFrequency = billingFrequency;
    return this;
  }

  /**
   * The billing frequency.
   * @return billingFrequency
   */
  @javax.annotation.Nullable
  public BillingFrequencyEnum getBillingFrequency() {
    return billingFrequency;
  }

  public void setBillingFrequency(BillingFrequencyEnum billingFrequency) {
    this.billingFrequency = billingFrequency;
  }


  /**
   * Charges Billed separately.
   * @return chargesBilledSeparately
   */
  @javax.annotation.Nullable
  public BigDecimal getChargesBilledSeparately() {
    return chargesBilledSeparately;
  }



  /**
   * The ISO currency in which the meter is charged, for example, USD.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }



  /**
   * The ending balance for the billing period (for open periods this will be updated daily).
   * @return endingBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getEndingBalance() {
    return endingBalance;
  }



  /**
   * Total new purchase amount.
   * @return newPurchases
   */
  @javax.annotation.Nullable
  public BigDecimal getNewPurchases() {
    return newPurchases;
  }



  /**
   * List of new purchases.
   * @return newPurchasesDetails
   */
  @javax.annotation.Nullable
  public List<BalancePropertiesNewPurchasesDetailsInner> getNewPurchasesDetails() {
    return newPurchasesDetails;
  }



  /**
   * Price is hidden or not.
   * @return priceHidden
   */
  @javax.annotation.Nullable
  public Boolean getPriceHidden() {
    return priceHidden;
  }



  /**
   * Overage for Azure services.
   * @return serviceOverage
   */
  @javax.annotation.Nullable
  public BigDecimal getServiceOverage() {
    return serviceOverage;
  }



  /**
   * serviceOverage + chargesBilledSeparately.
   * @return totalOverage
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalOverage() {
    return totalOverage;
  }



  /**
   * Azure service commitment + total Overage.
   * @return totalUsage
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalUsage() {
    return totalUsage;
  }



  /**
   * Total Commitment usage.
   * @return utilized
   */
  @javax.annotation.Nullable
  public BigDecimal getUtilized() {
    return utilized;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BalanceProperties balanceProperties = (BalanceProperties) o;
    return Objects.equals(this.adjustmentDetails, balanceProperties.adjustmentDetails) &&
        Objects.equals(this.adjustments, balanceProperties.adjustments) &&
        Objects.equals(this.azureMarketplaceServiceCharges, balanceProperties.azureMarketplaceServiceCharges) &&
        Objects.equals(this.beginningBalance, balanceProperties.beginningBalance) &&
        Objects.equals(this.billingFrequency, balanceProperties.billingFrequency) &&
        Objects.equals(this.chargesBilledSeparately, balanceProperties.chargesBilledSeparately) &&
        Objects.equals(this.currency, balanceProperties.currency) &&
        Objects.equals(this.endingBalance, balanceProperties.endingBalance) &&
        Objects.equals(this.newPurchases, balanceProperties.newPurchases) &&
        Objects.equals(this.newPurchasesDetails, balanceProperties.newPurchasesDetails) &&
        Objects.equals(this.priceHidden, balanceProperties.priceHidden) &&
        Objects.equals(this.serviceOverage, balanceProperties.serviceOverage) &&
        Objects.equals(this.totalOverage, balanceProperties.totalOverage) &&
        Objects.equals(this.totalUsage, balanceProperties.totalUsage) &&
        Objects.equals(this.utilized, balanceProperties.utilized);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustmentDetails, adjustments, azureMarketplaceServiceCharges, beginningBalance, billingFrequency, chargesBilledSeparately, currency, endingBalance, newPurchases, newPurchasesDetails, priceHidden, serviceOverage, totalOverage, totalUsage, utilized);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BalanceProperties {\n");
    sb.append("    adjustmentDetails: ").append(toIndentedString(adjustmentDetails)).append("\n");
    sb.append("    adjustments: ").append(toIndentedString(adjustments)).append("\n");
    sb.append("    azureMarketplaceServiceCharges: ").append(toIndentedString(azureMarketplaceServiceCharges)).append("\n");
    sb.append("    beginningBalance: ").append(toIndentedString(beginningBalance)).append("\n");
    sb.append("    billingFrequency: ").append(toIndentedString(billingFrequency)).append("\n");
    sb.append("    chargesBilledSeparately: ").append(toIndentedString(chargesBilledSeparately)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    endingBalance: ").append(toIndentedString(endingBalance)).append("\n");
    sb.append("    newPurchases: ").append(toIndentedString(newPurchases)).append("\n");
    sb.append("    newPurchasesDetails: ").append(toIndentedString(newPurchasesDetails)).append("\n");
    sb.append("    priceHidden: ").append(toIndentedString(priceHidden)).append("\n");
    sb.append("    serviceOverage: ").append(toIndentedString(serviceOverage)).append("\n");
    sb.append("    totalOverage: ").append(toIndentedString(totalOverage)).append("\n");
    sb.append("    totalUsage: ").append(toIndentedString(totalUsage)).append("\n");
    sb.append("    utilized: ").append(toIndentedString(utilized)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustmentDetails");
    openapiFields.add("adjustments");
    openapiFields.add("azureMarketplaceServiceCharges");
    openapiFields.add("beginningBalance");
    openapiFields.add("billingFrequency");
    openapiFields.add("chargesBilledSeparately");
    openapiFields.add("currency");
    openapiFields.add("endingBalance");
    openapiFields.add("newPurchases");
    openapiFields.add("newPurchasesDetails");
    openapiFields.add("priceHidden");
    openapiFields.add("serviceOverage");
    openapiFields.add("totalOverage");
    openapiFields.add("totalUsage");
    openapiFields.add("utilized");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BalanceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BalanceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BalanceProperties is not found in the empty JSON string", BalanceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BalanceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BalanceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("adjustmentDetails") != null && !jsonObj.get("adjustmentDetails").isJsonNull()) {
        JsonArray jsonArrayadjustmentDetails = jsonObj.getAsJsonArray("adjustmentDetails");
        if (jsonArrayadjustmentDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("adjustmentDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `adjustmentDetails` to be an array in the JSON string but got `%s`", jsonObj.get("adjustmentDetails").toString()));
          }

          // validate the optional field `adjustmentDetails` (array)
          for (int i = 0; i < jsonArrayadjustmentDetails.size(); i++) {
            BalancePropertiesAdjustmentDetailsInner.validateJsonElement(jsonArrayadjustmentDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("billingFrequency") != null && !jsonObj.get("billingFrequency").isJsonNull()) && !jsonObj.get("billingFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingFrequency").toString()));
      }
      // validate the optional field `billingFrequency`
      if (jsonObj.get("billingFrequency") != null && !jsonObj.get("billingFrequency").isJsonNull()) {
        BillingFrequencyEnum.validateJsonElement(jsonObj.get("billingFrequency"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (jsonObj.get("newPurchasesDetails") != null && !jsonObj.get("newPurchasesDetails").isJsonNull()) {
        JsonArray jsonArraynewPurchasesDetails = jsonObj.getAsJsonArray("newPurchasesDetails");
        if (jsonArraynewPurchasesDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("newPurchasesDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `newPurchasesDetails` to be an array in the JSON string but got `%s`", jsonObj.get("newPurchasesDetails").toString()));
          }

          // validate the optional field `newPurchasesDetails` (array)
          for (int i = 0; i < jsonArraynewPurchasesDetails.size(); i++) {
            BalancePropertiesNewPurchasesDetailsInner.validateJsonElement(jsonArraynewPurchasesDetails.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BalanceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BalanceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BalanceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BalanceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BalanceProperties>() {
           @Override
           public void write(JsonWriter out, BalanceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BalanceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BalanceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BalanceProperties
   * @throws IOException if the JSON string is invalid with respect to BalanceProperties
   */
  public static BalanceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BalanceProperties.class);
  }

  /**
   * Convert an instance of BalanceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

