/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReservedInstancesApi_H
#define OAI_OAIReservedInstancesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIReservationDetailsListResult.h"
#include "OAIReservationSummariesListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReservedInstancesApi : public QObject {
    Q_OBJECT

public:
    OAIReservedInstancesApi(const int timeOut = 0);
    ~OAIReservedInstancesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  reservation_order_id QString [required]
    * @param[in]  filter QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void reservationsDetailsListByReservationOrder(const QString &reservation_order_id, const QString &filter, const QString &api_version);

    /**
    * @param[in]  reservation_order_id QString [required]
    * @param[in]  reservation_id QString [required]
    * @param[in]  filter QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void reservationsDetailsListByReservationOrderAndReservation(const QString &reservation_order_id, const QString &reservation_id, const QString &filter, const QString &api_version);

    /**
    * @param[in]  reservation_order_id QString [required]
    * @param[in]  grain QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void reservationsSummariesListByReservationOrder(const QString &reservation_order_id, const QString &grain, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  reservation_order_id QString [required]
    * @param[in]  reservation_id QString [required]
    * @param[in]  grain QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void reservationsSummariesListByReservationOrderAndReservation(const QString &reservation_order_id, const QString &reservation_id, const QString &grain, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reservationsDetailsListByReservationOrderCallback(OAIHttpRequestWorker *worker);
    void reservationsDetailsListByReservationOrderAndReservationCallback(OAIHttpRequestWorker *worker);
    void reservationsSummariesListByReservationOrderCallback(OAIHttpRequestWorker *worker);
    void reservationsSummariesListByReservationOrderAndReservationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reservationsDetailsListByReservationOrderSignal(OAIReservationDetailsListResult summary);
    void reservationsDetailsListByReservationOrderAndReservationSignal(OAIReservationDetailsListResult summary);
    void reservationsSummariesListByReservationOrderSignal(OAIReservationSummariesListResult summary);
    void reservationsSummariesListByReservationOrderAndReservationSignal(OAIReservationSummariesListResult summary);


    void reservationsDetailsListByReservationOrderSignalFull(OAIHttpRequestWorker *worker, OAIReservationDetailsListResult summary);
    void reservationsDetailsListByReservationOrderAndReservationSignalFull(OAIHttpRequestWorker *worker, OAIReservationDetailsListResult summary);
    void reservationsSummariesListByReservationOrderSignalFull(OAIHttpRequestWorker *worker, OAIReservationSummariesListResult summary);
    void reservationsSummariesListByReservationOrderAndReservationSignalFull(OAIHttpRequestWorker *worker, OAIReservationSummariesListResult summary);

    Q_DECL_DEPRECATED_X("Use reservationsDetailsListByReservationOrderSignalError() instead")
    void reservationsDetailsListByReservationOrderSignalE(OAIReservationDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationsDetailsListByReservationOrderSignalError(OAIReservationDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reservationsDetailsListByReservationOrderAndReservationSignalError() instead")
    void reservationsDetailsListByReservationOrderAndReservationSignalE(OAIReservationDetailsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationsDetailsListByReservationOrderAndReservationSignalError(OAIReservationDetailsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reservationsSummariesListByReservationOrderSignalError() instead")
    void reservationsSummariesListByReservationOrderSignalE(OAIReservationSummariesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationsSummariesListByReservationOrderSignalError(OAIReservationSummariesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reservationsSummariesListByReservationOrderAndReservationSignalError() instead")
    void reservationsSummariesListByReservationOrderAndReservationSignalE(OAIReservationSummariesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationsSummariesListByReservationOrderAndReservationSignalError(OAIReservationSummariesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reservationsDetailsListByReservationOrderSignalErrorFull() instead")
    void reservationsDetailsListByReservationOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationsDetailsListByReservationOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reservationsDetailsListByReservationOrderAndReservationSignalErrorFull() instead")
    void reservationsDetailsListByReservationOrderAndReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationsDetailsListByReservationOrderAndReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reservationsSummariesListByReservationOrderSignalErrorFull() instead")
    void reservationsSummariesListByReservationOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationsSummariesListByReservationOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reservationsSummariesListByReservationOrderAndReservationSignalErrorFull() instead")
    void reservationsSummariesListByReservationOrderAndReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationsSummariesListByReservationOrderAndReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
