/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationDetailProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationDetailProperties::OAIReservationDetailProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationDetailProperties::OAIReservationDetailProperties() {
    this->initializeModel();
}

OAIReservationDetailProperties::~OAIReservationDetailProperties() {}

void OAIReservationDetailProperties::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_reservation_id_isSet = false;
    m_reservation_id_isValid = false;

    m_reservation_order_id_isSet = false;
    m_reservation_order_id_isValid = false;

    m_reserved_hours_isSet = false;
    m_reserved_hours_isValid = false;

    m_sku_name_isSet = false;
    m_sku_name_isValid = false;

    m_total_reserved_quantity_isSet = false;
    m_total_reserved_quantity_isValid = false;

    m_usage_date_isSet = false;
    m_usage_date_isValid = false;

    m_used_hours_isSet = false;
    m_used_hours_isValid = false;
}

void OAIReservationDetailProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationDetailProperties::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_reservation_id_isValid = ::OpenAPI::fromJsonValue(m_reservation_id, json[QString("reservationId")]);
    m_reservation_id_isSet = !json[QString("reservationId")].isNull() && m_reservation_id_isValid;

    m_reservation_order_id_isValid = ::OpenAPI::fromJsonValue(m_reservation_order_id, json[QString("reservationOrderId")]);
    m_reservation_order_id_isSet = !json[QString("reservationOrderId")].isNull() && m_reservation_order_id_isValid;

    m_reserved_hours_isValid = ::OpenAPI::fromJsonValue(m_reserved_hours, json[QString("reservedHours")]);
    m_reserved_hours_isSet = !json[QString("reservedHours")].isNull() && m_reserved_hours_isValid;

    m_sku_name_isValid = ::OpenAPI::fromJsonValue(m_sku_name, json[QString("skuName")]);
    m_sku_name_isSet = !json[QString("skuName")].isNull() && m_sku_name_isValid;

    m_total_reserved_quantity_isValid = ::OpenAPI::fromJsonValue(m_total_reserved_quantity, json[QString("totalReservedQuantity")]);
    m_total_reserved_quantity_isSet = !json[QString("totalReservedQuantity")].isNull() && m_total_reserved_quantity_isValid;

    m_usage_date_isValid = ::OpenAPI::fromJsonValue(m_usage_date, json[QString("usageDate")]);
    m_usage_date_isSet = !json[QString("usageDate")].isNull() && m_usage_date_isValid;

    m_used_hours_isValid = ::OpenAPI::fromJsonValue(m_used_hours, json[QString("usedHours")]);
    m_used_hours_isSet = !json[QString("usedHours")].isNull() && m_used_hours_isValid;
}

QString OAIReservationDetailProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationDetailProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_reservation_id_isSet) {
        obj.insert(QString("reservationId"), ::OpenAPI::toJsonValue(m_reservation_id));
    }
    if (m_reservation_order_id_isSet) {
        obj.insert(QString("reservationOrderId"), ::OpenAPI::toJsonValue(m_reservation_order_id));
    }
    if (m_reserved_hours_isSet) {
        obj.insert(QString("reservedHours"), ::OpenAPI::toJsonValue(m_reserved_hours));
    }
    if (m_sku_name_isSet) {
        obj.insert(QString("skuName"), ::OpenAPI::toJsonValue(m_sku_name));
    }
    if (m_total_reserved_quantity_isSet) {
        obj.insert(QString("totalReservedQuantity"), ::OpenAPI::toJsonValue(m_total_reserved_quantity));
    }
    if (m_usage_date_isSet) {
        obj.insert(QString("usageDate"), ::OpenAPI::toJsonValue(m_usage_date));
    }
    if (m_used_hours_isSet) {
        obj.insert(QString("usedHours"), ::OpenAPI::toJsonValue(m_used_hours));
    }
    return obj;
}

QString OAIReservationDetailProperties::getInstanceId() const {
    return m_instance_id;
}
void OAIReservationDetailProperties::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIReservationDetailProperties::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIReservationDetailProperties::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIReservationDetailProperties::getReservationId() const {
    return m_reservation_id;
}
void OAIReservationDetailProperties::setReservationId(const QString &reservation_id) {
    m_reservation_id = reservation_id;
    m_reservation_id_isSet = true;
}

bool OAIReservationDetailProperties::is_reservation_id_Set() const{
    return m_reservation_id_isSet;
}

bool OAIReservationDetailProperties::is_reservation_id_Valid() const{
    return m_reservation_id_isValid;
}

QString OAIReservationDetailProperties::getReservationOrderId() const {
    return m_reservation_order_id;
}
void OAIReservationDetailProperties::setReservationOrderId(const QString &reservation_order_id) {
    m_reservation_order_id = reservation_order_id;
    m_reservation_order_id_isSet = true;
}

bool OAIReservationDetailProperties::is_reservation_order_id_Set() const{
    return m_reservation_order_id_isSet;
}

bool OAIReservationDetailProperties::is_reservation_order_id_Valid() const{
    return m_reservation_order_id_isValid;
}

double OAIReservationDetailProperties::getReservedHours() const {
    return m_reserved_hours;
}
void OAIReservationDetailProperties::setReservedHours(const double &reserved_hours) {
    m_reserved_hours = reserved_hours;
    m_reserved_hours_isSet = true;
}

bool OAIReservationDetailProperties::is_reserved_hours_Set() const{
    return m_reserved_hours_isSet;
}

bool OAIReservationDetailProperties::is_reserved_hours_Valid() const{
    return m_reserved_hours_isValid;
}

QString OAIReservationDetailProperties::getSkuName() const {
    return m_sku_name;
}
void OAIReservationDetailProperties::setSkuName(const QString &sku_name) {
    m_sku_name = sku_name;
    m_sku_name_isSet = true;
}

bool OAIReservationDetailProperties::is_sku_name_Set() const{
    return m_sku_name_isSet;
}

bool OAIReservationDetailProperties::is_sku_name_Valid() const{
    return m_sku_name_isValid;
}

double OAIReservationDetailProperties::getTotalReservedQuantity() const {
    return m_total_reserved_quantity;
}
void OAIReservationDetailProperties::setTotalReservedQuantity(const double &total_reserved_quantity) {
    m_total_reserved_quantity = total_reserved_quantity;
    m_total_reserved_quantity_isSet = true;
}

bool OAIReservationDetailProperties::is_total_reserved_quantity_Set() const{
    return m_total_reserved_quantity_isSet;
}

bool OAIReservationDetailProperties::is_total_reserved_quantity_Valid() const{
    return m_total_reserved_quantity_isValid;
}

QDateTime OAIReservationDetailProperties::getUsageDate() const {
    return m_usage_date;
}
void OAIReservationDetailProperties::setUsageDate(const QDateTime &usage_date) {
    m_usage_date = usage_date;
    m_usage_date_isSet = true;
}

bool OAIReservationDetailProperties::is_usage_date_Set() const{
    return m_usage_date_isSet;
}

bool OAIReservationDetailProperties::is_usage_date_Valid() const{
    return m_usage_date_isValid;
}

double OAIReservationDetailProperties::getUsedHours() const {
    return m_used_hours;
}
void OAIReservationDetailProperties::setUsedHours(const double &used_hours) {
    m_used_hours = used_hours;
    m_used_hours_isSet = true;
}

bool OAIReservationDetailProperties::is_used_hours_Set() const{
    return m_used_hours_isSet;
}

bool OAIReservationDetailProperties::is_used_hours_Valid() const{
    return m_used_hours_isValid;
}

bool OAIReservationDetailProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_reserved_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_hours_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationDetailProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
