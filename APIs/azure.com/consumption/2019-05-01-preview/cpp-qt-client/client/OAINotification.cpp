/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotification::OAINotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotification::OAINotification() {
    this->initializeModel();
}

OAINotification::~OAINotification() {}

void OAINotification::initializeModel() {

    m_contact_emails_isSet = false;
    m_contact_emails_isValid = false;

    m_contact_groups_isSet = false;
    m_contact_groups_isValid = false;

    m_contact_roles_isSet = false;
    m_contact_roles_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;
}

void OAINotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotification::fromJsonObject(QJsonObject json) {

    m_contact_emails_isValid = ::OpenAPI::fromJsonValue(m_contact_emails, json[QString("contactEmails")]);
    m_contact_emails_isSet = !json[QString("contactEmails")].isNull() && m_contact_emails_isValid;

    m_contact_groups_isValid = ::OpenAPI::fromJsonValue(m_contact_groups, json[QString("contactGroups")]);
    m_contact_groups_isSet = !json[QString("contactGroups")].isNull() && m_contact_groups_isValid;

    m_contact_roles_isValid = ::OpenAPI::fromJsonValue(m_contact_roles, json[QString("contactRoles")]);
    m_contact_roles_isSet = !json[QString("contactRoles")].isNull() && m_contact_roles_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;
}

QString OAINotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotification::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_emails.size() > 0) {
        obj.insert(QString("contactEmails"), ::OpenAPI::toJsonValue(m_contact_emails));
    }
    if (m_contact_groups.size() > 0) {
        obj.insert(QString("contactGroups"), ::OpenAPI::toJsonValue(m_contact_groups));
    }
    if (m_contact_roles.size() > 0) {
        obj.insert(QString("contactRoles"), ::OpenAPI::toJsonValue(m_contact_roles));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    return obj;
}

QList<QString> OAINotification::getContactEmails() const {
    return m_contact_emails;
}
void OAINotification::setContactEmails(const QList<QString> &contact_emails) {
    m_contact_emails = contact_emails;
    m_contact_emails_isSet = true;
}

bool OAINotification::is_contact_emails_Set() const{
    return m_contact_emails_isSet;
}

bool OAINotification::is_contact_emails_Valid() const{
    return m_contact_emails_isValid;
}

QList<QString> OAINotification::getContactGroups() const {
    return m_contact_groups;
}
void OAINotification::setContactGroups(const QList<QString> &contact_groups) {
    m_contact_groups = contact_groups;
    m_contact_groups_isSet = true;
}

bool OAINotification::is_contact_groups_Set() const{
    return m_contact_groups_isSet;
}

bool OAINotification::is_contact_groups_Valid() const{
    return m_contact_groups_isValid;
}

QList<QString> OAINotification::getContactRoles() const {
    return m_contact_roles;
}
void OAINotification::setContactRoles(const QList<QString> &contact_roles) {
    m_contact_roles = contact_roles;
    m_contact_roles_isSet = true;
}

bool OAINotification::is_contact_roles_Set() const{
    return m_contact_roles_isSet;
}

bool OAINotification::is_contact_roles_Valid() const{
    return m_contact_roles_isValid;
}

bool OAINotification::isEnabled() const {
    return m_enabled;
}
void OAINotification::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAINotification::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAINotification::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAINotification::getROperator() const {
    return m_r_operator;
}
void OAINotification::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAINotification::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAINotification::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

double OAINotification::getThreshold() const {
    return m_threshold;
}
void OAINotification::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAINotification::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAINotification::is_threshold_Valid() const{
    return m_threshold_isValid;
}

bool OAINotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_emails_isValid && m_enabled_isValid && m_r_operator_isValid && m_threshold_isValid && true;
}

} // namespace OpenAPI
