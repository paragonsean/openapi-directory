/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastProperties::OAIForecastProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastProperties::OAIForecastProperties() {
    this->initializeModel();
}

OAIForecastProperties::~OAIForecastProperties() {}

void OAIForecastProperties::initializeModel() {

    m_charge_isSet = false;
    m_charge_isValid = false;

    m_charge_type_isSet = false;
    m_charge_type_isValid = false;

    m_confidence_levels_isSet = false;
    m_confidence_levels_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_grain_isSet = false;
    m_grain_isValid = false;

    m_usage_date_isSet = false;
    m_usage_date_isValid = false;
}

void OAIForecastProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastProperties::fromJsonObject(QJsonObject json) {

    m_charge_isValid = ::OpenAPI::fromJsonValue(m_charge, json[QString("charge")]);
    m_charge_isSet = !json[QString("charge")].isNull() && m_charge_isValid;

    m_charge_type_isValid = ::OpenAPI::fromJsonValue(m_charge_type, json[QString("chargeType")]);
    m_charge_type_isSet = !json[QString("chargeType")].isNull() && m_charge_type_isValid;

    m_confidence_levels_isValid = ::OpenAPI::fromJsonValue(m_confidence_levels, json[QString("confidenceLevels")]);
    m_confidence_levels_isSet = !json[QString("confidenceLevels")].isNull() && m_confidence_levels_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_grain_isValid = ::OpenAPI::fromJsonValue(m_grain, json[QString("grain")]);
    m_grain_isSet = !json[QString("grain")].isNull() && m_grain_isValid;

    m_usage_date_isValid = ::OpenAPI::fromJsonValue(m_usage_date, json[QString("usageDate")]);
    m_usage_date_isSet = !json[QString("usageDate")].isNull() && m_usage_date_isValid;
}

QString OAIForecastProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_charge_isSet) {
        obj.insert(QString("charge"), ::OpenAPI::toJsonValue(m_charge));
    }
    if (m_charge_type_isSet) {
        obj.insert(QString("chargeType"), ::OpenAPI::toJsonValue(m_charge_type));
    }
    if (m_confidence_levels.size() > 0) {
        obj.insert(QString("confidenceLevels"), ::OpenAPI::toJsonValue(m_confidence_levels));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_grain_isSet) {
        obj.insert(QString("grain"), ::OpenAPI::toJsonValue(m_grain));
    }
    if (m_usage_date_isSet) {
        obj.insert(QString("usageDate"), ::OpenAPI::toJsonValue(m_usage_date));
    }
    return obj;
}

double OAIForecastProperties::getCharge() const {
    return m_charge;
}
void OAIForecastProperties::setCharge(const double &charge) {
    m_charge = charge;
    m_charge_isSet = true;
}

bool OAIForecastProperties::is_charge_Set() const{
    return m_charge_isSet;
}

bool OAIForecastProperties::is_charge_Valid() const{
    return m_charge_isValid;
}

QString OAIForecastProperties::getChargeType() const {
    return m_charge_type;
}
void OAIForecastProperties::setChargeType(const QString &charge_type) {
    m_charge_type = charge_type;
    m_charge_type_isSet = true;
}

bool OAIForecastProperties::is_charge_type_Set() const{
    return m_charge_type_isSet;
}

bool OAIForecastProperties::is_charge_type_Valid() const{
    return m_charge_type_isValid;
}

QList<OAIForecastProperties_confidenceLevels_inner> OAIForecastProperties::getConfidenceLevels() const {
    return m_confidence_levels;
}
void OAIForecastProperties::setConfidenceLevels(const QList<OAIForecastProperties_confidenceLevels_inner> &confidence_levels) {
    m_confidence_levels = confidence_levels;
    m_confidence_levels_isSet = true;
}

bool OAIForecastProperties::is_confidence_levels_Set() const{
    return m_confidence_levels_isSet;
}

bool OAIForecastProperties::is_confidence_levels_Valid() const{
    return m_confidence_levels_isValid;
}

QString OAIForecastProperties::getCurrency() const {
    return m_currency;
}
void OAIForecastProperties::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIForecastProperties::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIForecastProperties::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIForecastProperties::getGrain() const {
    return m_grain;
}
void OAIForecastProperties::setGrain(const QString &grain) {
    m_grain = grain;
    m_grain_isSet = true;
}

bool OAIForecastProperties::is_grain_Set() const{
    return m_grain_isSet;
}

bool OAIForecastProperties::is_grain_Valid() const{
    return m_grain_isValid;
}

QString OAIForecastProperties::getUsageDate() const {
    return m_usage_date;
}
void OAIForecastProperties::setUsageDate(const QString &usage_date) {
    m_usage_date = usage_date;
    m_usage_date_isSet = true;
}

bool OAIForecastProperties::is_usage_date_Set() const{
    return m_usage_date_isSet;
}

bool OAIForecastProperties::is_usage_date_Valid() const{
    return m_usage_date_isValid;
}

bool OAIForecastProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charge_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
