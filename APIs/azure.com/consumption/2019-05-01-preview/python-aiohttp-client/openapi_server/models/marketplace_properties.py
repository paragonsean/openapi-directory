# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MarketplaceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, additional_properties: str=None, billing_period_id: str=None, consumed_quantity: float=None, consumed_service: str=None, cost_center: str=None, currency: str=None, department_name: str=None, instance_id: str=None, instance_name: str=None, is_estimated: bool=None, is_recurring_charge: bool=None, meter_id: str=None, offer_name: str=None, order_number: str=None, plan_name: str=None, pretax_cost: float=None, publisher_name: str=None, resource_group: str=None, resource_rate: float=None, subscription_guid: str=None, subscription_name: str=None, unit_of_measure: str=None, usage_end: datetime=None, usage_start: datetime=None):
        """MarketplaceProperties - a model defined in OpenAPI

        :param account_name: The account_name of this MarketplaceProperties.
        :param additional_properties: The additional_properties of this MarketplaceProperties.
        :param billing_period_id: The billing_period_id of this MarketplaceProperties.
        :param consumed_quantity: The consumed_quantity of this MarketplaceProperties.
        :param consumed_service: The consumed_service of this MarketplaceProperties.
        :param cost_center: The cost_center of this MarketplaceProperties.
        :param currency: The currency of this MarketplaceProperties.
        :param department_name: The department_name of this MarketplaceProperties.
        :param instance_id: The instance_id of this MarketplaceProperties.
        :param instance_name: The instance_name of this MarketplaceProperties.
        :param is_estimated: The is_estimated of this MarketplaceProperties.
        :param is_recurring_charge: The is_recurring_charge of this MarketplaceProperties.
        :param meter_id: The meter_id of this MarketplaceProperties.
        :param offer_name: The offer_name of this MarketplaceProperties.
        :param order_number: The order_number of this MarketplaceProperties.
        :param plan_name: The plan_name of this MarketplaceProperties.
        :param pretax_cost: The pretax_cost of this MarketplaceProperties.
        :param publisher_name: The publisher_name of this MarketplaceProperties.
        :param resource_group: The resource_group of this MarketplaceProperties.
        :param resource_rate: The resource_rate of this MarketplaceProperties.
        :param subscription_guid: The subscription_guid of this MarketplaceProperties.
        :param subscription_name: The subscription_name of this MarketplaceProperties.
        :param unit_of_measure: The unit_of_measure of this MarketplaceProperties.
        :param usage_end: The usage_end of this MarketplaceProperties.
        :param usage_start: The usage_start of this MarketplaceProperties.
        """
        self.openapi_types = {
            'account_name': str,
            'additional_properties': str,
            'billing_period_id': str,
            'consumed_quantity': float,
            'consumed_service': str,
            'cost_center': str,
            'currency': str,
            'department_name': str,
            'instance_id': str,
            'instance_name': str,
            'is_estimated': bool,
            'is_recurring_charge': bool,
            'meter_id': str,
            'offer_name': str,
            'order_number': str,
            'plan_name': str,
            'pretax_cost': float,
            'publisher_name': str,
            'resource_group': str,
            'resource_rate': float,
            'subscription_guid': str,
            'subscription_name': str,
            'unit_of_measure': str,
            'usage_end': datetime,
            'usage_start': datetime
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'additional_properties': 'additionalProperties',
            'billing_period_id': 'billingPeriodId',
            'consumed_quantity': 'consumedQuantity',
            'consumed_service': 'consumedService',
            'cost_center': 'costCenter',
            'currency': 'currency',
            'department_name': 'departmentName',
            'instance_id': 'instanceId',
            'instance_name': 'instanceName',
            'is_estimated': 'isEstimated',
            'is_recurring_charge': 'isRecurringCharge',
            'meter_id': 'meterId',
            'offer_name': 'offerName',
            'order_number': 'orderNumber',
            'plan_name': 'planName',
            'pretax_cost': 'pretaxCost',
            'publisher_name': 'publisherName',
            'resource_group': 'resourceGroup',
            'resource_rate': 'resourceRate',
            'subscription_guid': 'subscriptionGuid',
            'subscription_name': 'subscriptionName',
            'unit_of_measure': 'unitOfMeasure',
            'usage_end': 'usageEnd',
            'usage_start': 'usageStart'
        }

        self._account_name = account_name
        self._additional_properties = additional_properties
        self._billing_period_id = billing_period_id
        self._consumed_quantity = consumed_quantity
        self._consumed_service = consumed_service
        self._cost_center = cost_center
        self._currency = currency
        self._department_name = department_name
        self._instance_id = instance_id
        self._instance_name = instance_name
        self._is_estimated = is_estimated
        self._is_recurring_charge = is_recurring_charge
        self._meter_id = meter_id
        self._offer_name = offer_name
        self._order_number = order_number
        self._plan_name = plan_name
        self._pretax_cost = pretax_cost
        self._publisher_name = publisher_name
        self._resource_group = resource_group
        self._resource_rate = resource_rate
        self._subscription_guid = subscription_guid
        self._subscription_name = subscription_name
        self._unit_of_measure = unit_of_measure
        self._usage_end = usage_end
        self._usage_start = usage_start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MarketplaceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MarketplaceProperties of this MarketplaceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this MarketplaceProperties.

        Account name.

        :return: The account_name of this MarketplaceProperties.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this MarketplaceProperties.

        Account name.

        :param account_name: The account_name of this MarketplaceProperties.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def additional_properties(self):
        """Gets the additional_properties of this MarketplaceProperties.

        Additional details of this usage item. By default this is not populated, unless it's specified in $expand.

        :return: The additional_properties of this MarketplaceProperties.
        :rtype: str
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this MarketplaceProperties.

        Additional details of this usage item. By default this is not populated, unless it's specified in $expand.

        :param additional_properties: The additional_properties of this MarketplaceProperties.
        :type additional_properties: str
        """

        self._additional_properties = additional_properties

    @property
    def billing_period_id(self):
        """Gets the billing_period_id of this MarketplaceProperties.

        The id of the billing period resource that the usage belongs to.

        :return: The billing_period_id of this MarketplaceProperties.
        :rtype: str
        """
        return self._billing_period_id

    @billing_period_id.setter
    def billing_period_id(self, billing_period_id):
        """Sets the billing_period_id of this MarketplaceProperties.

        The id of the billing period resource that the usage belongs to.

        :param billing_period_id: The billing_period_id of this MarketplaceProperties.
        :type billing_period_id: str
        """

        self._billing_period_id = billing_period_id

    @property
    def consumed_quantity(self):
        """Gets the consumed_quantity of this MarketplaceProperties.

        The quantity of usage.

        :return: The consumed_quantity of this MarketplaceProperties.
        :rtype: float
        """
        return self._consumed_quantity

    @consumed_quantity.setter
    def consumed_quantity(self, consumed_quantity):
        """Sets the consumed_quantity of this MarketplaceProperties.

        The quantity of usage.

        :param consumed_quantity: The consumed_quantity of this MarketplaceProperties.
        :type consumed_quantity: float
        """

        self._consumed_quantity = consumed_quantity

    @property
    def consumed_service(self):
        """Gets the consumed_service of this MarketplaceProperties.

        Consumed service name.

        :return: The consumed_service of this MarketplaceProperties.
        :rtype: str
        """
        return self._consumed_service

    @consumed_service.setter
    def consumed_service(self, consumed_service):
        """Sets the consumed_service of this MarketplaceProperties.

        Consumed service name.

        :param consumed_service: The consumed_service of this MarketplaceProperties.
        :type consumed_service: str
        """

        self._consumed_service = consumed_service

    @property
    def cost_center(self):
        """Gets the cost_center of this MarketplaceProperties.

        The cost center of this department if it is a department and a costcenter exists

        :return: The cost_center of this MarketplaceProperties.
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this MarketplaceProperties.

        The cost center of this department if it is a department and a costcenter exists

        :param cost_center: The cost_center of this MarketplaceProperties.
        :type cost_center: str
        """

        self._cost_center = cost_center

    @property
    def currency(self):
        """Gets the currency of this MarketplaceProperties.

        The ISO currency in which the meter is charged, for example, USD.

        :return: The currency of this MarketplaceProperties.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this MarketplaceProperties.

        The ISO currency in which the meter is charged, for example, USD.

        :param currency: The currency of this MarketplaceProperties.
        :type currency: str
        """

        self._currency = currency

    @property
    def department_name(self):
        """Gets the department_name of this MarketplaceProperties.

        Department name.

        :return: The department_name of this MarketplaceProperties.
        :rtype: str
        """
        return self._department_name

    @department_name.setter
    def department_name(self, department_name):
        """Sets the department_name of this MarketplaceProperties.

        Department name.

        :param department_name: The department_name of this MarketplaceProperties.
        :type department_name: str
        """

        self._department_name = department_name

    @property
    def instance_id(self):
        """Gets the instance_id of this MarketplaceProperties.

        The uri of the resource instance that the usage is about.

        :return: The instance_id of this MarketplaceProperties.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this MarketplaceProperties.

        The uri of the resource instance that the usage is about.

        :param instance_id: The instance_id of this MarketplaceProperties.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def instance_name(self):
        """Gets the instance_name of this MarketplaceProperties.

        The name of the resource instance that the usage is about.

        :return: The instance_name of this MarketplaceProperties.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this MarketplaceProperties.

        The name of the resource instance that the usage is about.

        :param instance_name: The instance_name of this MarketplaceProperties.
        :type instance_name: str
        """

        self._instance_name = instance_name

    @property
    def is_estimated(self):
        """Gets the is_estimated of this MarketplaceProperties.

        The estimated usage is subject to change.

        :return: The is_estimated of this MarketplaceProperties.
        :rtype: bool
        """
        return self._is_estimated

    @is_estimated.setter
    def is_estimated(self, is_estimated):
        """Sets the is_estimated of this MarketplaceProperties.

        The estimated usage is subject to change.

        :param is_estimated: The is_estimated of this MarketplaceProperties.
        :type is_estimated: bool
        """

        self._is_estimated = is_estimated

    @property
    def is_recurring_charge(self):
        """Gets the is_recurring_charge of this MarketplaceProperties.

        Flag indicating whether this is a recurring charge or not.

        :return: The is_recurring_charge of this MarketplaceProperties.
        :rtype: bool
        """
        return self._is_recurring_charge

    @is_recurring_charge.setter
    def is_recurring_charge(self, is_recurring_charge):
        """Sets the is_recurring_charge of this MarketplaceProperties.

        Flag indicating whether this is a recurring charge or not.

        :param is_recurring_charge: The is_recurring_charge of this MarketplaceProperties.
        :type is_recurring_charge: bool
        """

        self._is_recurring_charge = is_recurring_charge

    @property
    def meter_id(self):
        """Gets the meter_id of this MarketplaceProperties.

        The meter id (GUID).

        :return: The meter_id of this MarketplaceProperties.
        :rtype: str
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this MarketplaceProperties.

        The meter id (GUID).

        :param meter_id: The meter_id of this MarketplaceProperties.
        :type meter_id: str
        """

        self._meter_id = meter_id

    @property
    def offer_name(self):
        """Gets the offer_name of this MarketplaceProperties.

        The type of offer.

        :return: The offer_name of this MarketplaceProperties.
        :rtype: str
        """
        return self._offer_name

    @offer_name.setter
    def offer_name(self, offer_name):
        """Sets the offer_name of this MarketplaceProperties.

        The type of offer.

        :param offer_name: The offer_name of this MarketplaceProperties.
        :type offer_name: str
        """

        self._offer_name = offer_name

    @property
    def order_number(self):
        """Gets the order_number of this MarketplaceProperties.

        The order number.

        :return: The order_number of this MarketplaceProperties.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this MarketplaceProperties.

        The order number.

        :param order_number: The order_number of this MarketplaceProperties.
        :type order_number: str
        """

        self._order_number = order_number

    @property
    def plan_name(self):
        """Gets the plan_name of this MarketplaceProperties.

        The name of plan.

        :return: The plan_name of this MarketplaceProperties.
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this MarketplaceProperties.

        The name of plan.

        :param plan_name: The plan_name of this MarketplaceProperties.
        :type plan_name: str
        """

        self._plan_name = plan_name

    @property
    def pretax_cost(self):
        """Gets the pretax_cost of this MarketplaceProperties.

        The amount of cost before tax.

        :return: The pretax_cost of this MarketplaceProperties.
        :rtype: float
        """
        return self._pretax_cost

    @pretax_cost.setter
    def pretax_cost(self, pretax_cost):
        """Sets the pretax_cost of this MarketplaceProperties.

        The amount of cost before tax.

        :param pretax_cost: The pretax_cost of this MarketplaceProperties.
        :type pretax_cost: float
        """

        self._pretax_cost = pretax_cost

    @property
    def publisher_name(self):
        """Gets the publisher_name of this MarketplaceProperties.

        The name of publisher.

        :return: The publisher_name of this MarketplaceProperties.
        :rtype: str
        """
        return self._publisher_name

    @publisher_name.setter
    def publisher_name(self, publisher_name):
        """Sets the publisher_name of this MarketplaceProperties.

        The name of publisher.

        :param publisher_name: The publisher_name of this MarketplaceProperties.
        :type publisher_name: str
        """

        self._publisher_name = publisher_name

    @property
    def resource_group(self):
        """Gets the resource_group of this MarketplaceProperties.

        The name of resource group.

        :return: The resource_group of this MarketplaceProperties.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this MarketplaceProperties.

        The name of resource group.

        :param resource_group: The resource_group of this MarketplaceProperties.
        :type resource_group: str
        """

        self._resource_group = resource_group

    @property
    def resource_rate(self):
        """Gets the resource_rate of this MarketplaceProperties.

        The marketplace resource rate.

        :return: The resource_rate of this MarketplaceProperties.
        :rtype: float
        """
        return self._resource_rate

    @resource_rate.setter
    def resource_rate(self, resource_rate):
        """Sets the resource_rate of this MarketplaceProperties.

        The marketplace resource rate.

        :param resource_rate: The resource_rate of this MarketplaceProperties.
        :type resource_rate: float
        """

        self._resource_rate = resource_rate

    @property
    def subscription_guid(self):
        """Gets the subscription_guid of this MarketplaceProperties.

        Subscription guid.

        :return: The subscription_guid of this MarketplaceProperties.
        :rtype: str
        """
        return self._subscription_guid

    @subscription_guid.setter
    def subscription_guid(self, subscription_guid):
        """Sets the subscription_guid of this MarketplaceProperties.

        Subscription guid.

        :param subscription_guid: The subscription_guid of this MarketplaceProperties.
        :type subscription_guid: str
        """

        self._subscription_guid = subscription_guid

    @property
    def subscription_name(self):
        """Gets the subscription_name of this MarketplaceProperties.

        Subscription name.

        :return: The subscription_name of this MarketplaceProperties.
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this MarketplaceProperties.

        Subscription name.

        :param subscription_name: The subscription_name of this MarketplaceProperties.
        :type subscription_name: str
        """

        self._subscription_name = subscription_name

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this MarketplaceProperties.

        The unit of measure.

        :return: The unit_of_measure of this MarketplaceProperties.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this MarketplaceProperties.

        The unit of measure.

        :param unit_of_measure: The unit_of_measure of this MarketplaceProperties.
        :type unit_of_measure: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def usage_end(self):
        """Gets the usage_end of this MarketplaceProperties.

        The end of the date time range covered by the usage detail.

        :return: The usage_end of this MarketplaceProperties.
        :rtype: datetime
        """
        return self._usage_end

    @usage_end.setter
    def usage_end(self, usage_end):
        """Sets the usage_end of this MarketplaceProperties.

        The end of the date time range covered by the usage detail.

        :param usage_end: The usage_end of this MarketplaceProperties.
        :type usage_end: datetime
        """

        self._usage_end = usage_end

    @property
    def usage_start(self):
        """Gets the usage_start of this MarketplaceProperties.

        The start of the date time range covered by the usage detail.

        :return: The usage_start of this MarketplaceProperties.
        :rtype: datetime
        """
        return self._usage_start

    @usage_start.setter
    def usage_start(self, usage_start):
        """Sets the usage_start of this MarketplaceProperties.

        The start of the date time range covered by the usage detail.

        :param usage_start: The usage_start of this MarketplaceProperties.
        :type usage_start: datetime
        """

        self._usage_start = usage_start
