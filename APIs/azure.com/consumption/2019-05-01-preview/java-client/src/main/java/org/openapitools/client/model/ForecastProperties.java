/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ForecastPropertiesConfidenceLevelsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the forecast charge.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:33.319765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ForecastProperties {
  public static final String SERIALIZED_NAME_CHARGE = "charge";
  @SerializedName(SERIALIZED_NAME_CHARGE)
  private BigDecimal charge;

  /**
   * The type of the charge. Could be actual or forecast
   */
  @JsonAdapter(ChargeTypeEnum.Adapter.class)
  public enum ChargeTypeEnum {
    ACTUAL("Actual"),
    
    FORECAST("Forecast");

    private String value;

    ChargeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargeTypeEnum fromValue(String value) {
      for (ChargeTypeEnum b : ChargeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChargeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChargeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChargeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHARGE_TYPE = "chargeType";
  @SerializedName(SERIALIZED_NAME_CHARGE_TYPE)
  private ChargeTypeEnum chargeType;

  public static final String SERIALIZED_NAME_CONFIDENCE_LEVELS = "confidenceLevels";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_LEVELS)
  private List<ForecastPropertiesConfidenceLevelsInner> confidenceLevels = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  /**
   * The granularity of forecast.
   */
  @JsonAdapter(GrainEnum.Adapter.class)
  public enum GrainEnum {
    DAILY("Daily"),
    
    MONTHLY("Monthly"),
    
    YEARLY("Yearly");

    private String value;

    GrainEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrainEnum fromValue(String value) {
      for (GrainEnum b : GrainEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrainEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrainEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrainEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrainEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GrainEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRAIN = "grain";
  @SerializedName(SERIALIZED_NAME_GRAIN)
  private GrainEnum grain;

  public static final String SERIALIZED_NAME_USAGE_DATE = "usageDate";
  @SerializedName(SERIALIZED_NAME_USAGE_DATE)
  private String usageDate;

  public ForecastProperties() {
  }

  public ForecastProperties(
     BigDecimal charge, 
     List<ForecastPropertiesConfidenceLevelsInner> confidenceLevels, 
     String currency, 
     String usageDate
  ) {
    this();
    this.charge = charge;
    this.confidenceLevels = confidenceLevels;
    this.currency = currency;
    this.usageDate = usageDate;
  }

  /**
   * The amount of charge
   * @return charge
   */
  @javax.annotation.Nullable
  public BigDecimal getCharge() {
    return charge;
  }



  public ForecastProperties chargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
    return this;
  }

  /**
   * The type of the charge. Could be actual or forecast
   * @return chargeType
   */
  @javax.annotation.Nullable
  public ChargeTypeEnum getChargeType() {
    return chargeType;
  }

  public void setChargeType(ChargeTypeEnum chargeType) {
    this.chargeType = chargeType;
  }


  /**
   * The details about the forecast confidence levels. This is populated only when chargeType is Forecast.
   * @return confidenceLevels
   */
  @javax.annotation.Nullable
  public List<ForecastPropertiesConfidenceLevelsInner> getConfidenceLevels() {
    return confidenceLevels;
  }



  /**
   * The ISO currency in which the meter is charged, for example, USD.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }



  public ForecastProperties grain(GrainEnum grain) {
    this.grain = grain;
    return this;
  }

  /**
   * The granularity of forecast.
   * @return grain
   */
  @javax.annotation.Nullable
  public GrainEnum getGrain() {
    return grain;
  }

  public void setGrain(GrainEnum grain) {
    this.grain = grain;
  }


  /**
   * The usage date of the forecast.
   * @return usageDate
   */
  @javax.annotation.Nullable
  public String getUsageDate() {
    return usageDate;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastProperties forecastProperties = (ForecastProperties) o;
    return Objects.equals(this.charge, forecastProperties.charge) &&
        Objects.equals(this.chargeType, forecastProperties.chargeType) &&
        Objects.equals(this.confidenceLevels, forecastProperties.confidenceLevels) &&
        Objects.equals(this.currency, forecastProperties.currency) &&
        Objects.equals(this.grain, forecastProperties.grain) &&
        Objects.equals(this.usageDate, forecastProperties.usageDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charge, chargeType, confidenceLevels, currency, grain, usageDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastProperties {\n");
    sb.append("    charge: ").append(toIndentedString(charge)).append("\n");
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    confidenceLevels: ").append(toIndentedString(confidenceLevels)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    grain: ").append(toIndentedString(grain)).append("\n");
    sb.append("    usageDate: ").append(toIndentedString(usageDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("charge");
    openapiFields.add("chargeType");
    openapiFields.add("confidenceLevels");
    openapiFields.add("currency");
    openapiFields.add("grain");
    openapiFields.add("usageDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForecastProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForecastProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForecastProperties is not found in the empty JSON string", ForecastProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForecastProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForecastProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("chargeType") != null && !jsonObj.get("chargeType").isJsonNull()) && !jsonObj.get("chargeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chargeType").toString()));
      }
      // validate the optional field `chargeType`
      if (jsonObj.get("chargeType") != null && !jsonObj.get("chargeType").isJsonNull()) {
        ChargeTypeEnum.validateJsonElement(jsonObj.get("chargeType"));
      }
      if (jsonObj.get("confidenceLevels") != null && !jsonObj.get("confidenceLevels").isJsonNull()) {
        JsonArray jsonArrayconfidenceLevels = jsonObj.getAsJsonArray("confidenceLevels");
        if (jsonArrayconfidenceLevels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("confidenceLevels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `confidenceLevels` to be an array in the JSON string but got `%s`", jsonObj.get("confidenceLevels").toString()));
          }

          // validate the optional field `confidenceLevels` (array)
          for (int i = 0; i < jsonArrayconfidenceLevels.size(); i++) {
            ForecastPropertiesConfidenceLevelsInner.validateJsonElement(jsonArrayconfidenceLevels.get(i));
          };
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("grain") != null && !jsonObj.get("grain").isJsonNull()) && !jsonObj.get("grain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grain").toString()));
      }
      // validate the optional field `grain`
      if (jsonObj.get("grain") != null && !jsonObj.get("grain").isJsonNull()) {
        GrainEnum.validateJsonElement(jsonObj.get("grain"));
      }
      if ((jsonObj.get("usageDate") != null && !jsonObj.get("usageDate").isJsonNull()) && !jsonObj.get("usageDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForecastProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForecastProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForecastProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForecastProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ForecastProperties>() {
           @Override
           public void write(JsonWriter out, ForecastProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForecastProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForecastProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForecastProperties
   * @throws IOException if the JSON string is invalid with respect to ForecastProperties
   */
  public static ForecastProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForecastProperties.class);
  }

  /**
   * Convert an instance of ForecastProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

