/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBudgetsApi_H
#define OAI_OAIBudgetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBudget.h"
#include "OAIBudgetsListResult.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBudgetsApi : public QObject {
    Q_OBJECT

public:
    OAIBudgetsApi(const int timeOut = 0);
    ~OAIBudgetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  budget_name QString [required]
    * @param[in]  parameters OAIBudget [required]
    */
    virtual void budgetsCreateOrUpdate(const QString &scope, const QString &api_version, const QString &budget_name, const OAIBudget &parameters);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  budget_name QString [required]
    */
    virtual void budgetsDelete(const QString &scope, const QString &api_version, const QString &budget_name);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  budget_name QString [required]
    */
    virtual void budgetsGet(const QString &scope, const QString &api_version, const QString &budget_name);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void budgetsList(const QString &scope, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void budgetsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void budgetsDeleteCallback(OAIHttpRequestWorker *worker);
    void budgetsGetCallback(OAIHttpRequestWorker *worker);
    void budgetsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void budgetsCreateOrUpdateSignal(OAIBudget summary);
    void budgetsDeleteSignal();
    void budgetsGetSignal(OAIBudget summary);
    void budgetsListSignal(OAIBudgetsListResult summary);


    void budgetsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBudget summary);
    void budgetsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void budgetsGetSignalFull(OAIHttpRequestWorker *worker, OAIBudget summary);
    void budgetsListSignalFull(OAIHttpRequestWorker *worker, OAIBudgetsListResult summary);

    Q_DECL_DEPRECATED_X("Use budgetsCreateOrUpdateSignalError() instead")
    void budgetsCreateOrUpdateSignalE(OAIBudget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void budgetsCreateOrUpdateSignalError(OAIBudget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use budgetsDeleteSignalError() instead")
    void budgetsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void budgetsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use budgetsGetSignalError() instead")
    void budgetsGetSignalE(OAIBudget summary, QNetworkReply::NetworkError error_type, QString error_str);
    void budgetsGetSignalError(OAIBudget summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use budgetsListSignalError() instead")
    void budgetsListSignalE(OAIBudgetsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void budgetsListSignalError(OAIBudgetsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use budgetsCreateOrUpdateSignalErrorFull() instead")
    void budgetsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void budgetsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use budgetsDeleteSignalErrorFull() instead")
    void budgetsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void budgetsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use budgetsGetSignalErrorFull() instead")
    void budgetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void budgetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use budgetsListSignalErrorFull() instead")
    void budgetsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void budgetsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
