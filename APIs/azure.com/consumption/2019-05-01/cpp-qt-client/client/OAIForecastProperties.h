/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIForecastProperties.h
 *
 * The properties of the forecast charge.
 */

#ifndef OAIForecastProperties_H
#define OAIForecastProperties_H

#include <QJsonObject>

#include "OAIForecastProperties_confidenceLevels_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIForecastProperties_confidenceLevels_inner;

class OAIForecastProperties : public OAIObject {
public:
    OAIForecastProperties();
    OAIForecastProperties(QString json);
    ~OAIForecastProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCharge() const;
    void setCharge(const double &charge);
    bool is_charge_Set() const;
    bool is_charge_Valid() const;

    QString getChargeType() const;
    void setChargeType(const QString &charge_type);
    bool is_charge_type_Set() const;
    bool is_charge_type_Valid() const;

    QList<OAIForecastProperties_confidenceLevels_inner> getConfidenceLevels() const;
    void setConfidenceLevels(const QList<OAIForecastProperties_confidenceLevels_inner> &confidence_levels);
    bool is_confidence_levels_Set() const;
    bool is_confidence_levels_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getGrain() const;
    void setGrain(const QString &grain);
    bool is_grain_Set() const;
    bool is_grain_Valid() const;

    QString getUsageDate() const;
    void setUsageDate(const QString &usage_date);
    bool is_usage_date_Set() const;
    bool is_usage_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_charge;
    bool m_charge_isSet;
    bool m_charge_isValid;

    QString m_charge_type;
    bool m_charge_type_isSet;
    bool m_charge_type_isValid;

    QList<OAIForecastProperties_confidenceLevels_inner> m_confidence_levels;
    bool m_confidence_levels_isSet;
    bool m_confidence_levels_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_grain;
    bool m_grain_isSet;
    bool m_grain_isValid;

    QString m_usage_date;
    bool m_usage_date_isSet;
    bool m_usage_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIForecastProperties)

#endif // OAIForecastProperties_H
