/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalanceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalanceProperties::OAIBalanceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalanceProperties::OAIBalanceProperties() {
    this->initializeModel();
}

OAIBalanceProperties::~OAIBalanceProperties() {}

void OAIBalanceProperties::initializeModel() {

    m_adjustment_details_isSet = false;
    m_adjustment_details_isValid = false;

    m_adjustments_isSet = false;
    m_adjustments_isValid = false;

    m_azure_marketplace_service_charges_isSet = false;
    m_azure_marketplace_service_charges_isValid = false;

    m_beginning_balance_isSet = false;
    m_beginning_balance_isValid = false;

    m_billing_frequency_isSet = false;
    m_billing_frequency_isValid = false;

    m_charges_billed_separately_isSet = false;
    m_charges_billed_separately_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_ending_balance_isSet = false;
    m_ending_balance_isValid = false;

    m_new_purchases_isSet = false;
    m_new_purchases_isValid = false;

    m_new_purchases_details_isSet = false;
    m_new_purchases_details_isValid = false;

    m_price_hidden_isSet = false;
    m_price_hidden_isValid = false;

    m_service_overage_isSet = false;
    m_service_overage_isValid = false;

    m_total_overage_isSet = false;
    m_total_overage_isValid = false;

    m_total_usage_isSet = false;
    m_total_usage_isValid = false;

    m_utilized_isSet = false;
    m_utilized_isValid = false;
}

void OAIBalanceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalanceProperties::fromJsonObject(QJsonObject json) {

    m_adjustment_details_isValid = ::OpenAPI::fromJsonValue(m_adjustment_details, json[QString("adjustmentDetails")]);
    m_adjustment_details_isSet = !json[QString("adjustmentDetails")].isNull() && m_adjustment_details_isValid;

    m_adjustments_isValid = ::OpenAPI::fromJsonValue(m_adjustments, json[QString("adjustments")]);
    m_adjustments_isSet = !json[QString("adjustments")].isNull() && m_adjustments_isValid;

    m_azure_marketplace_service_charges_isValid = ::OpenAPI::fromJsonValue(m_azure_marketplace_service_charges, json[QString("azureMarketplaceServiceCharges")]);
    m_azure_marketplace_service_charges_isSet = !json[QString("azureMarketplaceServiceCharges")].isNull() && m_azure_marketplace_service_charges_isValid;

    m_beginning_balance_isValid = ::OpenAPI::fromJsonValue(m_beginning_balance, json[QString("beginningBalance")]);
    m_beginning_balance_isSet = !json[QString("beginningBalance")].isNull() && m_beginning_balance_isValid;

    m_billing_frequency_isValid = ::OpenAPI::fromJsonValue(m_billing_frequency, json[QString("billingFrequency")]);
    m_billing_frequency_isSet = !json[QString("billingFrequency")].isNull() && m_billing_frequency_isValid;

    m_charges_billed_separately_isValid = ::OpenAPI::fromJsonValue(m_charges_billed_separately, json[QString("chargesBilledSeparately")]);
    m_charges_billed_separately_isSet = !json[QString("chargesBilledSeparately")].isNull() && m_charges_billed_separately_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_ending_balance_isValid = ::OpenAPI::fromJsonValue(m_ending_balance, json[QString("endingBalance")]);
    m_ending_balance_isSet = !json[QString("endingBalance")].isNull() && m_ending_balance_isValid;

    m_new_purchases_isValid = ::OpenAPI::fromJsonValue(m_new_purchases, json[QString("newPurchases")]);
    m_new_purchases_isSet = !json[QString("newPurchases")].isNull() && m_new_purchases_isValid;

    m_new_purchases_details_isValid = ::OpenAPI::fromJsonValue(m_new_purchases_details, json[QString("newPurchasesDetails")]);
    m_new_purchases_details_isSet = !json[QString("newPurchasesDetails")].isNull() && m_new_purchases_details_isValid;

    m_price_hidden_isValid = ::OpenAPI::fromJsonValue(m_price_hidden, json[QString("priceHidden")]);
    m_price_hidden_isSet = !json[QString("priceHidden")].isNull() && m_price_hidden_isValid;

    m_service_overage_isValid = ::OpenAPI::fromJsonValue(m_service_overage, json[QString("serviceOverage")]);
    m_service_overage_isSet = !json[QString("serviceOverage")].isNull() && m_service_overage_isValid;

    m_total_overage_isValid = ::OpenAPI::fromJsonValue(m_total_overage, json[QString("totalOverage")]);
    m_total_overage_isSet = !json[QString("totalOverage")].isNull() && m_total_overage_isValid;

    m_total_usage_isValid = ::OpenAPI::fromJsonValue(m_total_usage, json[QString("totalUsage")]);
    m_total_usage_isSet = !json[QString("totalUsage")].isNull() && m_total_usage_isValid;

    m_utilized_isValid = ::OpenAPI::fromJsonValue(m_utilized, json[QString("utilized")]);
    m_utilized_isSet = !json[QString("utilized")].isNull() && m_utilized_isValid;
}

QString OAIBalanceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalanceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment_details.size() > 0) {
        obj.insert(QString("adjustmentDetails"), ::OpenAPI::toJsonValue(m_adjustment_details));
    }
    if (m_adjustments_isSet) {
        obj.insert(QString("adjustments"), ::OpenAPI::toJsonValue(m_adjustments));
    }
    if (m_azure_marketplace_service_charges_isSet) {
        obj.insert(QString("azureMarketplaceServiceCharges"), ::OpenAPI::toJsonValue(m_azure_marketplace_service_charges));
    }
    if (m_beginning_balance_isSet) {
        obj.insert(QString("beginningBalance"), ::OpenAPI::toJsonValue(m_beginning_balance));
    }
    if (m_billing_frequency_isSet) {
        obj.insert(QString("billingFrequency"), ::OpenAPI::toJsonValue(m_billing_frequency));
    }
    if (m_charges_billed_separately_isSet) {
        obj.insert(QString("chargesBilledSeparately"), ::OpenAPI::toJsonValue(m_charges_billed_separately));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_ending_balance_isSet) {
        obj.insert(QString("endingBalance"), ::OpenAPI::toJsonValue(m_ending_balance));
    }
    if (m_new_purchases_isSet) {
        obj.insert(QString("newPurchases"), ::OpenAPI::toJsonValue(m_new_purchases));
    }
    if (m_new_purchases_details.size() > 0) {
        obj.insert(QString("newPurchasesDetails"), ::OpenAPI::toJsonValue(m_new_purchases_details));
    }
    if (m_price_hidden_isSet) {
        obj.insert(QString("priceHidden"), ::OpenAPI::toJsonValue(m_price_hidden));
    }
    if (m_service_overage_isSet) {
        obj.insert(QString("serviceOverage"), ::OpenAPI::toJsonValue(m_service_overage));
    }
    if (m_total_overage_isSet) {
        obj.insert(QString("totalOverage"), ::OpenAPI::toJsonValue(m_total_overage));
    }
    if (m_total_usage_isSet) {
        obj.insert(QString("totalUsage"), ::OpenAPI::toJsonValue(m_total_usage));
    }
    if (m_utilized_isSet) {
        obj.insert(QString("utilized"), ::OpenAPI::toJsonValue(m_utilized));
    }
    return obj;
}

QList<OAIBalanceProperties_adjustmentDetails_inner> OAIBalanceProperties::getAdjustmentDetails() const {
    return m_adjustment_details;
}
void OAIBalanceProperties::setAdjustmentDetails(const QList<OAIBalanceProperties_adjustmentDetails_inner> &adjustment_details) {
    m_adjustment_details = adjustment_details;
    m_adjustment_details_isSet = true;
}

bool OAIBalanceProperties::is_adjustment_details_Set() const{
    return m_adjustment_details_isSet;
}

bool OAIBalanceProperties::is_adjustment_details_Valid() const{
    return m_adjustment_details_isValid;
}

double OAIBalanceProperties::getAdjustments() const {
    return m_adjustments;
}
void OAIBalanceProperties::setAdjustments(const double &adjustments) {
    m_adjustments = adjustments;
    m_adjustments_isSet = true;
}

bool OAIBalanceProperties::is_adjustments_Set() const{
    return m_adjustments_isSet;
}

bool OAIBalanceProperties::is_adjustments_Valid() const{
    return m_adjustments_isValid;
}

double OAIBalanceProperties::getAzureMarketplaceServiceCharges() const {
    return m_azure_marketplace_service_charges;
}
void OAIBalanceProperties::setAzureMarketplaceServiceCharges(const double &azure_marketplace_service_charges) {
    m_azure_marketplace_service_charges = azure_marketplace_service_charges;
    m_azure_marketplace_service_charges_isSet = true;
}

bool OAIBalanceProperties::is_azure_marketplace_service_charges_Set() const{
    return m_azure_marketplace_service_charges_isSet;
}

bool OAIBalanceProperties::is_azure_marketplace_service_charges_Valid() const{
    return m_azure_marketplace_service_charges_isValid;
}

double OAIBalanceProperties::getBeginningBalance() const {
    return m_beginning_balance;
}
void OAIBalanceProperties::setBeginningBalance(const double &beginning_balance) {
    m_beginning_balance = beginning_balance;
    m_beginning_balance_isSet = true;
}

bool OAIBalanceProperties::is_beginning_balance_Set() const{
    return m_beginning_balance_isSet;
}

bool OAIBalanceProperties::is_beginning_balance_Valid() const{
    return m_beginning_balance_isValid;
}

QString OAIBalanceProperties::getBillingFrequency() const {
    return m_billing_frequency;
}
void OAIBalanceProperties::setBillingFrequency(const QString &billing_frequency) {
    m_billing_frequency = billing_frequency;
    m_billing_frequency_isSet = true;
}

bool OAIBalanceProperties::is_billing_frequency_Set() const{
    return m_billing_frequency_isSet;
}

bool OAIBalanceProperties::is_billing_frequency_Valid() const{
    return m_billing_frequency_isValid;
}

double OAIBalanceProperties::getChargesBilledSeparately() const {
    return m_charges_billed_separately;
}
void OAIBalanceProperties::setChargesBilledSeparately(const double &charges_billed_separately) {
    m_charges_billed_separately = charges_billed_separately;
    m_charges_billed_separately_isSet = true;
}

bool OAIBalanceProperties::is_charges_billed_separately_Set() const{
    return m_charges_billed_separately_isSet;
}

bool OAIBalanceProperties::is_charges_billed_separately_Valid() const{
    return m_charges_billed_separately_isValid;
}

QString OAIBalanceProperties::getCurrency() const {
    return m_currency;
}
void OAIBalanceProperties::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIBalanceProperties::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIBalanceProperties::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIBalanceProperties::getEndingBalance() const {
    return m_ending_balance;
}
void OAIBalanceProperties::setEndingBalance(const double &ending_balance) {
    m_ending_balance = ending_balance;
    m_ending_balance_isSet = true;
}

bool OAIBalanceProperties::is_ending_balance_Set() const{
    return m_ending_balance_isSet;
}

bool OAIBalanceProperties::is_ending_balance_Valid() const{
    return m_ending_balance_isValid;
}

double OAIBalanceProperties::getNewPurchases() const {
    return m_new_purchases;
}
void OAIBalanceProperties::setNewPurchases(const double &new_purchases) {
    m_new_purchases = new_purchases;
    m_new_purchases_isSet = true;
}

bool OAIBalanceProperties::is_new_purchases_Set() const{
    return m_new_purchases_isSet;
}

bool OAIBalanceProperties::is_new_purchases_Valid() const{
    return m_new_purchases_isValid;
}

QList<OAIBalanceProperties_newPurchasesDetails_inner> OAIBalanceProperties::getNewPurchasesDetails() const {
    return m_new_purchases_details;
}
void OAIBalanceProperties::setNewPurchasesDetails(const QList<OAIBalanceProperties_newPurchasesDetails_inner> &new_purchases_details) {
    m_new_purchases_details = new_purchases_details;
    m_new_purchases_details_isSet = true;
}

bool OAIBalanceProperties::is_new_purchases_details_Set() const{
    return m_new_purchases_details_isSet;
}

bool OAIBalanceProperties::is_new_purchases_details_Valid() const{
    return m_new_purchases_details_isValid;
}

bool OAIBalanceProperties::isPriceHidden() const {
    return m_price_hidden;
}
void OAIBalanceProperties::setPriceHidden(const bool &price_hidden) {
    m_price_hidden = price_hidden;
    m_price_hidden_isSet = true;
}

bool OAIBalanceProperties::is_price_hidden_Set() const{
    return m_price_hidden_isSet;
}

bool OAIBalanceProperties::is_price_hidden_Valid() const{
    return m_price_hidden_isValid;
}

double OAIBalanceProperties::getServiceOverage() const {
    return m_service_overage;
}
void OAIBalanceProperties::setServiceOverage(const double &service_overage) {
    m_service_overage = service_overage;
    m_service_overage_isSet = true;
}

bool OAIBalanceProperties::is_service_overage_Set() const{
    return m_service_overage_isSet;
}

bool OAIBalanceProperties::is_service_overage_Valid() const{
    return m_service_overage_isValid;
}

double OAIBalanceProperties::getTotalOverage() const {
    return m_total_overage;
}
void OAIBalanceProperties::setTotalOverage(const double &total_overage) {
    m_total_overage = total_overage;
    m_total_overage_isSet = true;
}

bool OAIBalanceProperties::is_total_overage_Set() const{
    return m_total_overage_isSet;
}

bool OAIBalanceProperties::is_total_overage_Valid() const{
    return m_total_overage_isValid;
}

double OAIBalanceProperties::getTotalUsage() const {
    return m_total_usage;
}
void OAIBalanceProperties::setTotalUsage(const double &total_usage) {
    m_total_usage = total_usage;
    m_total_usage_isSet = true;
}

bool OAIBalanceProperties::is_total_usage_Set() const{
    return m_total_usage_isSet;
}

bool OAIBalanceProperties::is_total_usage_Valid() const{
    return m_total_usage_isValid;
}

double OAIBalanceProperties::getUtilized() const {
    return m_utilized;
}
void OAIBalanceProperties::setUtilized(const double &utilized) {
    m_utilized = utilized;
    m_utilized_isSet = true;
}

bool OAIBalanceProperties::is_utilized_Set() const{
    return m_utilized_isSet;
}

bool OAIBalanceProperties::is_utilized_Valid() const{
    return m_utilized_isValid;
}

bool OAIBalanceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adjustments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_marketplace_service_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beginning_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charges_billed_separately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ending_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_purchases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_purchases_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_overage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_overage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utilized_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalanceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
