/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ForecastPropertiesConfidenceLevelsInner from './ForecastPropertiesConfidenceLevelsInner';

/**
 * The ForecastProperties model module.
 * @module model/ForecastProperties
 * @version 2019-05-01
 */
class ForecastProperties {
    /**
     * Constructs a new <code>ForecastProperties</code>.
     * The properties of the forecast charge.
     * @alias module:model/ForecastProperties
     */
    constructor() { 
        
        ForecastProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ForecastProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ForecastProperties} obj Optional instance to populate.
     * @return {module:model/ForecastProperties} The populated <code>ForecastProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ForecastProperties();

            if (data.hasOwnProperty('charge')) {
                obj['charge'] = ApiClient.convertToType(data['charge'], 'Number');
            }
            if (data.hasOwnProperty('chargeType')) {
                obj['chargeType'] = ApiClient.convertToType(data['chargeType'], 'String');
            }
            if (data.hasOwnProperty('confidenceLevels')) {
                obj['confidenceLevels'] = ApiClient.convertToType(data['confidenceLevels'], [ForecastPropertiesConfidenceLevelsInner]);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('grain')) {
                obj['grain'] = ApiClient.convertToType(data['grain'], 'String');
            }
            if (data.hasOwnProperty('usageDate')) {
                obj['usageDate'] = ApiClient.convertToType(data['usageDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ForecastProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ForecastProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['chargeType'] && !(typeof data['chargeType'] === 'string' || data['chargeType'] instanceof String)) {
            throw new Error("Expected the field `chargeType` to be a primitive type in the JSON string but got " + data['chargeType']);
        }
        if (data['confidenceLevels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['confidenceLevels'])) {
                throw new Error("Expected the field `confidenceLevels` to be an array in the JSON data but got " + data['confidenceLevels']);
            }
            // validate the optional field `confidenceLevels` (array)
            for (const item of data['confidenceLevels']) {
                ForecastPropertiesConfidenceLevelsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['grain'] && !(typeof data['grain'] === 'string' || data['grain'] instanceof String)) {
            throw new Error("Expected the field `grain` to be a primitive type in the JSON string but got " + data['grain']);
        }
        // ensure the json data is a string
        if (data['usageDate'] && !(typeof data['usageDate'] === 'string' || data['usageDate'] instanceof String)) {
            throw new Error("Expected the field `usageDate` to be a primitive type in the JSON string but got " + data['usageDate']);
        }

        return true;
    }


}



/**
 * The amount of charge
 * @member {Number} charge
 */
ForecastProperties.prototype['charge'] = undefined;

/**
 * The type of the charge. Could be actual or forecast
 * @member {module:model/ForecastProperties.ChargeTypeEnum} chargeType
 */
ForecastProperties.prototype['chargeType'] = undefined;

/**
 * The details about the forecast confidence levels. This is populated only when chargeType is Forecast.
 * @member {Array.<module:model/ForecastPropertiesConfidenceLevelsInner>} confidenceLevels
 */
ForecastProperties.prototype['confidenceLevels'] = undefined;

/**
 * The ISO currency in which the meter is charged, for example, USD.
 * @member {String} currency
 */
ForecastProperties.prototype['currency'] = undefined;

/**
 * The granularity of forecast.
 * @member {module:model/ForecastProperties.GrainEnum} grain
 */
ForecastProperties.prototype['grain'] = undefined;

/**
 * The usage date of the forecast.
 * @member {String} usageDate
 */
ForecastProperties.prototype['usageDate'] = undefined;





/**
 * Allowed values for the <code>chargeType</code> property.
 * @enum {String}
 * @readonly
 */
ForecastProperties['ChargeTypeEnum'] = {

    /**
     * value: "Actual"
     * @const
     */
    "Actual": "Actual",

    /**
     * value: "Forecast"
     * @const
     */
    "Forecast": "Forecast"
};


/**
 * Allowed values for the <code>grain</code> property.
 * @enum {String}
 * @readonly
 */
ForecastProperties['GrainEnum'] = {

    /**
     * value: "Daily"
     * @const
     */
    "Daily": "Daily",

    /**
     * value: "Monthly"
     * @const
     */
    "Monthly": "Monthly",

    /**
     * value: "Yearly"
     * @const
     */
    "Yearly": "Yearly"
};



export default ForecastProperties;

