/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Filters model module.
 * @module model/Filters
 * @version 2019-05-01
 */
class Filters {
    /**
     * Constructs a new <code>Filters</code>.
     * May be used to filter budgets by resource group, resource, or meter.
     * @alias module:model/Filters
     */
    constructor() { 
        
        Filters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Filters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filters} obj Optional instance to populate.
     * @return {module:model/Filters} The populated <code>Filters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filters();

            if (data.hasOwnProperty('meters')) {
                obj['meters'] = ApiClient.convertToType(data['meters'], ['String']);
            }
            if (data.hasOwnProperty('resourceGroups')) {
                obj['resourceGroups'] = ApiClient.convertToType(data['resourceGroups'], ['String']);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': ['String']});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['meters'])) {
            throw new Error("Expected the field `meters` to be an array in the JSON data but got " + data['meters']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resourceGroups'])) {
            throw new Error("Expected the field `resourceGroups` to be an array in the JSON data but got " + data['resourceGroups']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resources'])) {
            throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
        }

        return true;
    }


}



/**
 * The list of filters on meters (GUID), mandatory for budgets of usage category. 
 * @member {Array.<String>} meters
 */
Filters.prototype['meters'] = undefined;

/**
 * The list of filters on resource groups, allowed at subscription level only.
 * @member {Array.<String>} resourceGroups
 */
Filters.prototype['resourceGroups'] = undefined;

/**
 * The list of filters on resources.
 * @member {Array.<String>} resources
 */
Filters.prototype['resources'] = undefined;

/**
 * The dictionary of filters on tags.
 * @member {Object.<String, Array.<String>>} tags
 */
Filters.prototype['tags'] = undefined;






export default Filters;

