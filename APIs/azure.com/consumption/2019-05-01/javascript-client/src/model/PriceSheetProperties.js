/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeterDetails from './MeterDetails';

/**
 * The PriceSheetProperties model module.
 * @module model/PriceSheetProperties
 * @version 2019-05-01
 */
class PriceSheetProperties {
    /**
     * Constructs a new <code>PriceSheetProperties</code>.
     * The properties of the price sheet.
     * @alias module:model/PriceSheetProperties
     */
    constructor() { 
        
        PriceSheetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PriceSheetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PriceSheetProperties} obj Optional instance to populate.
     * @return {module:model/PriceSheetProperties} The populated <code>PriceSheetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PriceSheetProperties();

            if (data.hasOwnProperty('billingPeriodId')) {
                obj['billingPeriodId'] = ApiClient.convertToType(data['billingPeriodId'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('includedQuantity')) {
                obj['includedQuantity'] = ApiClient.convertToType(data['includedQuantity'], 'Number');
            }
            if (data.hasOwnProperty('meterDetails')) {
                obj['meterDetails'] = MeterDetails.constructFromObject(data['meterDetails']);
            }
            if (data.hasOwnProperty('meterId')) {
                obj['meterId'] = ApiClient.convertToType(data['meterId'], 'String');
            }
            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('partNumber')) {
                obj['partNumber'] = ApiClient.convertToType(data['partNumber'], 'String');
            }
            if (data.hasOwnProperty('unitOfMeasure')) {
                obj['unitOfMeasure'] = ApiClient.convertToType(data['unitOfMeasure'], 'String');
            }
            if (data.hasOwnProperty('unitPrice')) {
                obj['unitPrice'] = ApiClient.convertToType(data['unitPrice'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PriceSheetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PriceSheetProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billingPeriodId'] && !(typeof data['billingPeriodId'] === 'string' || data['billingPeriodId'] instanceof String)) {
            throw new Error("Expected the field `billingPeriodId` to be a primitive type in the JSON string but got " + data['billingPeriodId']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // validate the optional field `meterDetails`
        if (data['meterDetails']) { // data not null
          MeterDetails.validateJSON(data['meterDetails']);
        }
        // ensure the json data is a string
        if (data['meterId'] && !(typeof data['meterId'] === 'string' || data['meterId'] instanceof String)) {
            throw new Error("Expected the field `meterId` to be a primitive type in the JSON string but got " + data['meterId']);
        }
        // ensure the json data is a string
        if (data['offerId'] && !(typeof data['offerId'] === 'string' || data['offerId'] instanceof String)) {
            throw new Error("Expected the field `offerId` to be a primitive type in the JSON string but got " + data['offerId']);
        }
        // ensure the json data is a string
        if (data['partNumber'] && !(typeof data['partNumber'] === 'string' || data['partNumber'] instanceof String)) {
            throw new Error("Expected the field `partNumber` to be a primitive type in the JSON string but got " + data['partNumber']);
        }
        // ensure the json data is a string
        if (data['unitOfMeasure'] && !(typeof data['unitOfMeasure'] === 'string' || data['unitOfMeasure'] instanceof String)) {
            throw new Error("Expected the field `unitOfMeasure` to be a primitive type in the JSON string but got " + data['unitOfMeasure']);
        }

        return true;
    }


}



/**
 * The id of the billing period resource that the usage belongs to.
 * @member {String} billingPeriodId
 */
PriceSheetProperties.prototype['billingPeriodId'] = undefined;

/**
 * Currency Code
 * @member {String} currencyCode
 */
PriceSheetProperties.prototype['currencyCode'] = undefined;

/**
 * Included quality for an offer
 * @member {Number} includedQuantity
 */
PriceSheetProperties.prototype['includedQuantity'] = undefined;

/**
 * @member {module:model/MeterDetails} meterDetails
 */
PriceSheetProperties.prototype['meterDetails'] = undefined;

/**
 * The meter id (GUID)
 * @member {String} meterId
 */
PriceSheetProperties.prototype['meterId'] = undefined;

/**
 * Offer Id
 * @member {String} offerId
 */
PriceSheetProperties.prototype['offerId'] = undefined;

/**
 * Part Number
 * @member {String} partNumber
 */
PriceSheetProperties.prototype['partNumber'] = undefined;

/**
 * Unit of measure
 * @member {String} unitOfMeasure
 */
PriceSheetProperties.prototype['unitOfMeasure'] = undefined;

/**
 * Unit Price
 * @member {Number} unitPrice
 */
PriceSheetProperties.prototype['unitPrice'] = undefined;






export default PriceSheetProperties;

