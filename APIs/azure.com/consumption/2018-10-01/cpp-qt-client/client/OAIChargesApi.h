/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChargesApi_H
#define OAI_OAIChargesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChargeSummary.h"
#include "OAIChargesListResult.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChargesApi : public QObject {
    Q_OBJECT

public:
    OAIChargesApi(const int timeOut = 0);
    ~OAIChargesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  billing_account_id QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void chargesListByDepartment(const QString &billing_account_id, const QString &department_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_id QString [required]
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void chargesListByEnrollmentAccount(const QString &billing_account_id, const QString &enrollment_account_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_id QString [required]
    * @param[in]  department_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void chargesListForBillingPeriodByDepartment(const QString &billing_account_id, const QString &department_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  billing_account_id QString [required]
    * @param[in]  enrollment_account_id QString [required]
    * @param[in]  billing_period_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void chargesListForBillingPeriodByEnrollmentAccount(const QString &billing_account_id, const QString &enrollment_account_id, const QString &billing_period_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void chargesListByDepartmentCallback(OAIHttpRequestWorker *worker);
    void chargesListByEnrollmentAccountCallback(OAIHttpRequestWorker *worker);
    void chargesListForBillingPeriodByDepartmentCallback(OAIHttpRequestWorker *worker);
    void chargesListForBillingPeriodByEnrollmentAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void chargesListByDepartmentSignal(OAIChargesListResult summary);
    void chargesListByEnrollmentAccountSignal(OAIChargesListResult summary);
    void chargesListForBillingPeriodByDepartmentSignal(OAIChargeSummary summary);
    void chargesListForBillingPeriodByEnrollmentAccountSignal(OAIChargeSummary summary);


    void chargesListByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIChargesListResult summary);
    void chargesListByEnrollmentAccountSignalFull(OAIHttpRequestWorker *worker, OAIChargesListResult summary);
    void chargesListForBillingPeriodByDepartmentSignalFull(OAIHttpRequestWorker *worker, OAIChargeSummary summary);
    void chargesListForBillingPeriodByEnrollmentAccountSignalFull(OAIHttpRequestWorker *worker, OAIChargeSummary summary);

    Q_DECL_DEPRECATED_X("Use chargesListByDepartmentSignalError() instead")
    void chargesListByDepartmentSignalE(OAIChargesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chargesListByDepartmentSignalError(OAIChargesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chargesListByEnrollmentAccountSignalError() instead")
    void chargesListByEnrollmentAccountSignalE(OAIChargesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chargesListByEnrollmentAccountSignalError(OAIChargesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chargesListForBillingPeriodByDepartmentSignalError() instead")
    void chargesListForBillingPeriodByDepartmentSignalE(OAIChargeSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chargesListForBillingPeriodByDepartmentSignalError(OAIChargeSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chargesListForBillingPeriodByEnrollmentAccountSignalError() instead")
    void chargesListForBillingPeriodByEnrollmentAccountSignalE(OAIChargeSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chargesListForBillingPeriodByEnrollmentAccountSignalError(OAIChargeSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use chargesListByDepartmentSignalErrorFull() instead")
    void chargesListByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chargesListByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chargesListByEnrollmentAccountSignalErrorFull() instead")
    void chargesListByEnrollmentAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chargesListByEnrollmentAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chargesListForBillingPeriodByDepartmentSignalErrorFull() instead")
    void chargesListForBillingPeriodByDepartmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chargesListForBillingPeriodByDepartmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chargesListForBillingPeriodByEnrollmentAccountSignalErrorFull() instead")
    void chargesListForBillingPeriodByEnrollmentAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chargesListForBillingPeriodByEnrollmentAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
