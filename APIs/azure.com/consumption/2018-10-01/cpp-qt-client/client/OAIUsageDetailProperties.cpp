/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageDetailProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageDetailProperties::OAIUsageDetailProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageDetailProperties::OAIUsageDetailProperties() {
    this->initializeModel();
}

OAIUsageDetailProperties::~OAIUsageDetailProperties() {}

void OAIUsageDetailProperties::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_additional_properties_isSet = false;
    m_additional_properties_isValid = false;

    m_billable_quantity_isSet = false;
    m_billable_quantity_isValid = false;

    m_billing_period_id_isSet = false;
    m_billing_period_id_isValid = false;

    m_charges_billed_separately_isSet = false;
    m_charges_billed_separately_isValid = false;

    m_consumed_service_isSet = false;
    m_consumed_service_isValid = false;

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_department_name_isSet = false;
    m_department_name_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_location_isSet = false;
    m_instance_location_isValid = false;

    m_instance_name_isSet = false;
    m_instance_name_isValid = false;

    m_invoice_id_isSet = false;
    m_invoice_id_isValid = false;

    m_is_estimated_isSet = false;
    m_is_estimated_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_meter_details_isSet = false;
    m_meter_details_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_part_number_isSet = false;
    m_part_number_isValid = false;

    m_pretax_cost_isSet = false;
    m_pretax_cost_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;

    m_subscription_guid_isSet = false;
    m_subscription_guid_isValid = false;

    m_subscription_name_isSet = false;
    m_subscription_name_isValid = false;

    m_usage_end_isSet = false;
    m_usage_end_isValid = false;

    m_usage_quantity_isSet = false;
    m_usage_quantity_isValid = false;

    m_usage_start_isSet = false;
    m_usage_start_isValid = false;
}

void OAIUsageDetailProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageDetailProperties::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_properties, json[QString("additionalProperties")]);
    m_additional_properties_isSet = !json[QString("additionalProperties")].isNull() && m_additional_properties_isValid;

    m_billable_quantity_isValid = ::OpenAPI::fromJsonValue(m_billable_quantity, json[QString("billableQuantity")]);
    m_billable_quantity_isSet = !json[QString("billableQuantity")].isNull() && m_billable_quantity_isValid;

    m_billing_period_id_isValid = ::OpenAPI::fromJsonValue(m_billing_period_id, json[QString("billingPeriodId")]);
    m_billing_period_id_isSet = !json[QString("billingPeriodId")].isNull() && m_billing_period_id_isValid;

    m_charges_billed_separately_isValid = ::OpenAPI::fromJsonValue(m_charges_billed_separately, json[QString("chargesBilledSeparately")]);
    m_charges_billed_separately_isSet = !json[QString("chargesBilledSeparately")].isNull() && m_charges_billed_separately_isValid;

    m_consumed_service_isValid = ::OpenAPI::fromJsonValue(m_consumed_service, json[QString("consumedService")]);
    m_consumed_service_isSet = !json[QString("consumedService")].isNull() && m_consumed_service_isValid;

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_department_name_isValid = ::OpenAPI::fromJsonValue(m_department_name, json[QString("departmentName")]);
    m_department_name_isSet = !json[QString("departmentName")].isNull() && m_department_name_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_instance_location_isValid = ::OpenAPI::fromJsonValue(m_instance_location, json[QString("instanceLocation")]);
    m_instance_location_isSet = !json[QString("instanceLocation")].isNull() && m_instance_location_isValid;

    m_instance_name_isValid = ::OpenAPI::fromJsonValue(m_instance_name, json[QString("instanceName")]);
    m_instance_name_isSet = !json[QString("instanceName")].isNull() && m_instance_name_isValid;

    m_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_id, json[QString("invoiceId")]);
    m_invoice_id_isSet = !json[QString("invoiceId")].isNull() && m_invoice_id_isValid;

    m_is_estimated_isValid = ::OpenAPI::fromJsonValue(m_is_estimated, json[QString("isEstimated")]);
    m_is_estimated_isSet = !json[QString("isEstimated")].isNull() && m_is_estimated_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_meter_details_isValid = ::OpenAPI::fromJsonValue(m_meter_details, json[QString("meterDetails")]);
    m_meter_details_isSet = !json[QString("meterDetails")].isNull() && m_meter_details_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("meterId")]);
    m_meter_id_isSet = !json[QString("meterId")].isNull() && m_meter_id_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("partNumber")]);
    m_part_number_isSet = !json[QString("partNumber")].isNull() && m_part_number_isValid;

    m_pretax_cost_isValid = ::OpenAPI::fromJsonValue(m_pretax_cost, json[QString("pretaxCost")]);
    m_pretax_cost_isSet = !json[QString("pretaxCost")].isNull() && m_pretax_cost_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;

    m_subscription_guid_isValid = ::OpenAPI::fromJsonValue(m_subscription_guid, json[QString("subscriptionGuid")]);
    m_subscription_guid_isSet = !json[QString("subscriptionGuid")].isNull() && m_subscription_guid_isValid;

    m_subscription_name_isValid = ::OpenAPI::fromJsonValue(m_subscription_name, json[QString("subscriptionName")]);
    m_subscription_name_isSet = !json[QString("subscriptionName")].isNull() && m_subscription_name_isValid;

    m_usage_end_isValid = ::OpenAPI::fromJsonValue(m_usage_end, json[QString("usageEnd")]);
    m_usage_end_isSet = !json[QString("usageEnd")].isNull() && m_usage_end_isValid;

    m_usage_quantity_isValid = ::OpenAPI::fromJsonValue(m_usage_quantity, json[QString("usageQuantity")]);
    m_usage_quantity_isSet = !json[QString("usageQuantity")].isNull() && m_usage_quantity_isValid;

    m_usage_start_isValid = ::OpenAPI::fromJsonValue(m_usage_start, json[QString("usageStart")]);
    m_usage_start_isSet = !json[QString("usageStart")].isNull() && m_usage_start_isValid;
}

QString OAIUsageDetailProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageDetailProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_additional_properties_isSet) {
        obj.insert(QString("additionalProperties"), ::OpenAPI::toJsonValue(m_additional_properties));
    }
    if (m_billable_quantity_isSet) {
        obj.insert(QString("billableQuantity"), ::OpenAPI::toJsonValue(m_billable_quantity));
    }
    if (m_billing_period_id_isSet) {
        obj.insert(QString("billingPeriodId"), ::OpenAPI::toJsonValue(m_billing_period_id));
    }
    if (m_charges_billed_separately_isSet) {
        obj.insert(QString("chargesBilledSeparately"), ::OpenAPI::toJsonValue(m_charges_billed_separately));
    }
    if (m_consumed_service_isSet) {
        obj.insert(QString("consumedService"), ::OpenAPI::toJsonValue(m_consumed_service));
    }
    if (m_cost_center_isSet) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_department_name_isSet) {
        obj.insert(QString("departmentName"), ::OpenAPI::toJsonValue(m_department_name));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_location_isSet) {
        obj.insert(QString("instanceLocation"), ::OpenAPI::toJsonValue(m_instance_location));
    }
    if (m_instance_name_isSet) {
        obj.insert(QString("instanceName"), ::OpenAPI::toJsonValue(m_instance_name));
    }
    if (m_invoice_id_isSet) {
        obj.insert(QString("invoiceId"), ::OpenAPI::toJsonValue(m_invoice_id));
    }
    if (m_is_estimated_isSet) {
        obj.insert(QString("isEstimated"), ::OpenAPI::toJsonValue(m_is_estimated));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_meter_details.isSet()) {
        obj.insert(QString("meterDetails"), ::OpenAPI::toJsonValue(m_meter_details));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("meterId"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_part_number_isSet) {
        obj.insert(QString("partNumber"), ::OpenAPI::toJsonValue(m_part_number));
    }
    if (m_pretax_cost_isSet) {
        obj.insert(QString("pretaxCost"), ::OpenAPI::toJsonValue(m_pretax_cost));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    if (m_subscription_guid_isSet) {
        obj.insert(QString("subscriptionGuid"), ::OpenAPI::toJsonValue(m_subscription_guid));
    }
    if (m_subscription_name_isSet) {
        obj.insert(QString("subscriptionName"), ::OpenAPI::toJsonValue(m_subscription_name));
    }
    if (m_usage_end_isSet) {
        obj.insert(QString("usageEnd"), ::OpenAPI::toJsonValue(m_usage_end));
    }
    if (m_usage_quantity_isSet) {
        obj.insert(QString("usageQuantity"), ::OpenAPI::toJsonValue(m_usage_quantity));
    }
    if (m_usage_start_isSet) {
        obj.insert(QString("usageStart"), ::OpenAPI::toJsonValue(m_usage_start));
    }
    return obj;
}

QString OAIUsageDetailProperties::getAccountName() const {
    return m_account_name;
}
void OAIUsageDetailProperties::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIUsageDetailProperties::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIUsageDetailProperties::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIUsageDetailProperties::getAdditionalProperties() const {
    return m_additional_properties;
}
void OAIUsageDetailProperties::setAdditionalProperties(const QString &additional_properties) {
    m_additional_properties = additional_properties;
    m_additional_properties_isSet = true;
}

bool OAIUsageDetailProperties::is_additional_properties_Set() const{
    return m_additional_properties_isSet;
}

bool OAIUsageDetailProperties::is_additional_properties_Valid() const{
    return m_additional_properties_isValid;
}

double OAIUsageDetailProperties::getBillableQuantity() const {
    return m_billable_quantity;
}
void OAIUsageDetailProperties::setBillableQuantity(const double &billable_quantity) {
    m_billable_quantity = billable_quantity;
    m_billable_quantity_isSet = true;
}

bool OAIUsageDetailProperties::is_billable_quantity_Set() const{
    return m_billable_quantity_isSet;
}

bool OAIUsageDetailProperties::is_billable_quantity_Valid() const{
    return m_billable_quantity_isValid;
}

QString OAIUsageDetailProperties::getBillingPeriodId() const {
    return m_billing_period_id;
}
void OAIUsageDetailProperties::setBillingPeriodId(const QString &billing_period_id) {
    m_billing_period_id = billing_period_id;
    m_billing_period_id_isSet = true;
}

bool OAIUsageDetailProperties::is_billing_period_id_Set() const{
    return m_billing_period_id_isSet;
}

bool OAIUsageDetailProperties::is_billing_period_id_Valid() const{
    return m_billing_period_id_isValid;
}

bool OAIUsageDetailProperties::isChargesBilledSeparately() const {
    return m_charges_billed_separately;
}
void OAIUsageDetailProperties::setChargesBilledSeparately(const bool &charges_billed_separately) {
    m_charges_billed_separately = charges_billed_separately;
    m_charges_billed_separately_isSet = true;
}

bool OAIUsageDetailProperties::is_charges_billed_separately_Set() const{
    return m_charges_billed_separately_isSet;
}

bool OAIUsageDetailProperties::is_charges_billed_separately_Valid() const{
    return m_charges_billed_separately_isValid;
}

QString OAIUsageDetailProperties::getConsumedService() const {
    return m_consumed_service;
}
void OAIUsageDetailProperties::setConsumedService(const QString &consumed_service) {
    m_consumed_service = consumed_service;
    m_consumed_service_isSet = true;
}

bool OAIUsageDetailProperties::is_consumed_service_Set() const{
    return m_consumed_service_isSet;
}

bool OAIUsageDetailProperties::is_consumed_service_Valid() const{
    return m_consumed_service_isValid;
}

QString OAIUsageDetailProperties::getCostCenter() const {
    return m_cost_center;
}
void OAIUsageDetailProperties::setCostCenter(const QString &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIUsageDetailProperties::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIUsageDetailProperties::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

QString OAIUsageDetailProperties::getCurrency() const {
    return m_currency;
}
void OAIUsageDetailProperties::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIUsageDetailProperties::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIUsageDetailProperties::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIUsageDetailProperties::getDepartmentName() const {
    return m_department_name;
}
void OAIUsageDetailProperties::setDepartmentName(const QString &department_name) {
    m_department_name = department_name;
    m_department_name_isSet = true;
}

bool OAIUsageDetailProperties::is_department_name_Set() const{
    return m_department_name_isSet;
}

bool OAIUsageDetailProperties::is_department_name_Valid() const{
    return m_department_name_isValid;
}

QString OAIUsageDetailProperties::getInstanceId() const {
    return m_instance_id;
}
void OAIUsageDetailProperties::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIUsageDetailProperties::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIUsageDetailProperties::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIUsageDetailProperties::getInstanceLocation() const {
    return m_instance_location;
}
void OAIUsageDetailProperties::setInstanceLocation(const QString &instance_location) {
    m_instance_location = instance_location;
    m_instance_location_isSet = true;
}

bool OAIUsageDetailProperties::is_instance_location_Set() const{
    return m_instance_location_isSet;
}

bool OAIUsageDetailProperties::is_instance_location_Valid() const{
    return m_instance_location_isValid;
}

QString OAIUsageDetailProperties::getInstanceName() const {
    return m_instance_name;
}
void OAIUsageDetailProperties::setInstanceName(const QString &instance_name) {
    m_instance_name = instance_name;
    m_instance_name_isSet = true;
}

bool OAIUsageDetailProperties::is_instance_name_Set() const{
    return m_instance_name_isSet;
}

bool OAIUsageDetailProperties::is_instance_name_Valid() const{
    return m_instance_name_isValid;
}

QString OAIUsageDetailProperties::getInvoiceId() const {
    return m_invoice_id;
}
void OAIUsageDetailProperties::setInvoiceId(const QString &invoice_id) {
    m_invoice_id = invoice_id;
    m_invoice_id_isSet = true;
}

bool OAIUsageDetailProperties::is_invoice_id_Set() const{
    return m_invoice_id_isSet;
}

bool OAIUsageDetailProperties::is_invoice_id_Valid() const{
    return m_invoice_id_isValid;
}

bool OAIUsageDetailProperties::isIsEstimated() const {
    return m_is_estimated;
}
void OAIUsageDetailProperties::setIsEstimated(const bool &is_estimated) {
    m_is_estimated = is_estimated;
    m_is_estimated_isSet = true;
}

bool OAIUsageDetailProperties::is_is_estimated_Set() const{
    return m_is_estimated_isSet;
}

bool OAIUsageDetailProperties::is_is_estimated_Valid() const{
    return m_is_estimated_isValid;
}

QString OAIUsageDetailProperties::getLocation() const {
    return m_location;
}
void OAIUsageDetailProperties::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUsageDetailProperties::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUsageDetailProperties::is_location_Valid() const{
    return m_location_isValid;
}

OAIMeterDetails OAIUsageDetailProperties::getMeterDetails() const {
    return m_meter_details;
}
void OAIUsageDetailProperties::setMeterDetails(const OAIMeterDetails &meter_details) {
    m_meter_details = meter_details;
    m_meter_details_isSet = true;
}

bool OAIUsageDetailProperties::is_meter_details_Set() const{
    return m_meter_details_isSet;
}

bool OAIUsageDetailProperties::is_meter_details_Valid() const{
    return m_meter_details_isValid;
}

QString OAIUsageDetailProperties::getMeterId() const {
    return m_meter_id;
}
void OAIUsageDetailProperties::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIUsageDetailProperties::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIUsageDetailProperties::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

QString OAIUsageDetailProperties::getOfferId() const {
    return m_offer_id;
}
void OAIUsageDetailProperties::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIUsageDetailProperties::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIUsageDetailProperties::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAIUsageDetailProperties::getPartNumber() const {
    return m_part_number;
}
void OAIUsageDetailProperties::setPartNumber(const QString &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIUsageDetailProperties::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIUsageDetailProperties::is_part_number_Valid() const{
    return m_part_number_isValid;
}

double OAIUsageDetailProperties::getPretaxCost() const {
    return m_pretax_cost;
}
void OAIUsageDetailProperties::setPretaxCost(const double &pretax_cost) {
    m_pretax_cost = pretax_cost;
    m_pretax_cost_isSet = true;
}

bool OAIUsageDetailProperties::is_pretax_cost_Set() const{
    return m_pretax_cost_isSet;
}

bool OAIUsageDetailProperties::is_pretax_cost_Valid() const{
    return m_pretax_cost_isValid;
}

QString OAIUsageDetailProperties::getProduct() const {
    return m_product;
}
void OAIUsageDetailProperties::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIUsageDetailProperties::is_product_Set() const{
    return m_product_isSet;
}

bool OAIUsageDetailProperties::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIUsageDetailProperties::getResourceGuid() const {
    return m_resource_guid;
}
void OAIUsageDetailProperties::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAIUsageDetailProperties::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAIUsageDetailProperties::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

QString OAIUsageDetailProperties::getSubscriptionGuid() const {
    return m_subscription_guid;
}
void OAIUsageDetailProperties::setSubscriptionGuid(const QString &subscription_guid) {
    m_subscription_guid = subscription_guid;
    m_subscription_guid_isSet = true;
}

bool OAIUsageDetailProperties::is_subscription_guid_Set() const{
    return m_subscription_guid_isSet;
}

bool OAIUsageDetailProperties::is_subscription_guid_Valid() const{
    return m_subscription_guid_isValid;
}

QString OAIUsageDetailProperties::getSubscriptionName() const {
    return m_subscription_name;
}
void OAIUsageDetailProperties::setSubscriptionName(const QString &subscription_name) {
    m_subscription_name = subscription_name;
    m_subscription_name_isSet = true;
}

bool OAIUsageDetailProperties::is_subscription_name_Set() const{
    return m_subscription_name_isSet;
}

bool OAIUsageDetailProperties::is_subscription_name_Valid() const{
    return m_subscription_name_isValid;
}

QDateTime OAIUsageDetailProperties::getUsageEnd() const {
    return m_usage_end;
}
void OAIUsageDetailProperties::setUsageEnd(const QDateTime &usage_end) {
    m_usage_end = usage_end;
    m_usage_end_isSet = true;
}

bool OAIUsageDetailProperties::is_usage_end_Set() const{
    return m_usage_end_isSet;
}

bool OAIUsageDetailProperties::is_usage_end_Valid() const{
    return m_usage_end_isValid;
}

double OAIUsageDetailProperties::getUsageQuantity() const {
    return m_usage_quantity;
}
void OAIUsageDetailProperties::setUsageQuantity(const double &usage_quantity) {
    m_usage_quantity = usage_quantity;
    m_usage_quantity_isSet = true;
}

bool OAIUsageDetailProperties::is_usage_quantity_Set() const{
    return m_usage_quantity_isSet;
}

bool OAIUsageDetailProperties::is_usage_quantity_Valid() const{
    return m_usage_quantity_isValid;
}

QDateTime OAIUsageDetailProperties::getUsageStart() const {
    return m_usage_start;
}
void OAIUsageDetailProperties::setUsageStart(const QDateTime &usage_start) {
    m_usage_start = usage_start;
    m_usage_start_isSet = true;
}

bool OAIUsageDetailProperties::is_usage_start_Set() const{
    return m_usage_start_isSet;
}

bool OAIUsageDetailProperties::is_usage_start_Valid() const{
    return m_usage_start_isValid;
}

bool OAIUsageDetailProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billable_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charges_billed_separately_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_estimated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pretax_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageDetailProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
