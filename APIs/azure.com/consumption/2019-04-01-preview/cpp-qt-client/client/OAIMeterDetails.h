/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMeterDetails.h
 *
 * The properties of the meter detail.
 */

#ifndef OAIMeterDetails_H
#define OAIMeterDetails_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMeterDetails : public OAIObject {
public:
    OAIMeterDetails();
    OAIMeterDetails(QString json);
    ~OAIMeterDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMeterCategory() const;
    void setMeterCategory(const QString &meter_category);
    bool is_meter_category_Set() const;
    bool is_meter_category_Valid() const;

    QString getMeterLocation() const;
    void setMeterLocation(const QString &meter_location);
    bool is_meter_location_Set() const;
    bool is_meter_location_Valid() const;

    QString getMeterName() const;
    void setMeterName(const QString &meter_name);
    bool is_meter_name_Set() const;
    bool is_meter_name_Valid() const;

    QString getMeterSubCategory() const;
    void setMeterSubCategory(const QString &meter_sub_category);
    bool is_meter_sub_category_Set() const;
    bool is_meter_sub_category_Valid() const;

    double getPretaxStandardRate() const;
    void setPretaxStandardRate(const double &pretax_standard_rate);
    bool is_pretax_standard_rate_Set() const;
    bool is_pretax_standard_rate_Valid() const;

    QString getServiceName() const;
    void setServiceName(const QString &service_name);
    bool is_service_name_Set() const;
    bool is_service_name_Valid() const;

    QString getServiceTier() const;
    void setServiceTier(const QString &service_tier);
    bool is_service_tier_Set() const;
    bool is_service_tier_Valid() const;

    double getTotalIncludedQuantity() const;
    void setTotalIncludedQuantity(const double &total_included_quantity);
    bool is_total_included_quantity_Set() const;
    bool is_total_included_quantity_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_meter_category;
    bool m_meter_category_isSet;
    bool m_meter_category_isValid;

    QString m_meter_location;
    bool m_meter_location_isSet;
    bool m_meter_location_isValid;

    QString m_meter_name;
    bool m_meter_name_isSet;
    bool m_meter_name_isValid;

    QString m_meter_sub_category;
    bool m_meter_sub_category_isSet;
    bool m_meter_sub_category_isValid;

    double m_pretax_standard_rate;
    bool m_pretax_standard_rate_isSet;
    bool m_pretax_standard_rate_isValid;

    QString m_service_name;
    bool m_service_name_isSet;
    bool m_service_name_isValid;

    QString m_service_tier;
    bool m_service_tier_isSet;
    bool m_service_tier_isValid;

    double m_total_included_quantity;
    bool m_total_included_quantity_isSet;
    bool m_total_included_quantity_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMeterDetails)

#endif // OAIMeterDetails_H
