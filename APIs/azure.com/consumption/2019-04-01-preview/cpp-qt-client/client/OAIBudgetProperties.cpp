/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBudgetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBudgetProperties::OAIBudgetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBudgetProperties::OAIBudgetProperties() {
    this->initializeModel();
}

OAIBudgetProperties::~OAIBudgetProperties() {}

void OAIBudgetProperties::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_current_spend_isSet = false;
    m_current_spend_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_time_grain_isSet = false;
    m_time_grain_isValid = false;

    m_time_period_isSet = false;
    m_time_period_isValid = false;
}

void OAIBudgetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBudgetProperties::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_current_spend_isValid = ::OpenAPI::fromJsonValue(m_current_spend, json[QString("currentSpend")]);
    m_current_spend_isSet = !json[QString("currentSpend")].isNull() && m_current_spend_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_time_grain_isValid = ::OpenAPI::fromJsonValue(m_time_grain, json[QString("timeGrain")]);
    m_time_grain_isSet = !json[QString("timeGrain")].isNull() && m_time_grain_isValid;

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("timePeriod")]);
    m_time_period_isSet = !json[QString("timePeriod")].isNull() && m_time_period_isValid;
}

QString OAIBudgetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBudgetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_current_spend.isSet()) {
        obj.insert(QString("currentSpend"), ::OpenAPI::toJsonValue(m_current_spend));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_time_grain_isSet) {
        obj.insert(QString("timeGrain"), ::OpenAPI::toJsonValue(m_time_grain));
    }
    if (m_time_period.isSet()) {
        obj.insert(QString("timePeriod"), ::OpenAPI::toJsonValue(m_time_period));
    }
    return obj;
}

double OAIBudgetProperties::getAmount() const {
    return m_amount;
}
void OAIBudgetProperties::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIBudgetProperties::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIBudgetProperties::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIBudgetProperties::getCategory() const {
    return m_category;
}
void OAIBudgetProperties::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIBudgetProperties::is_category_Set() const{
    return m_category_isSet;
}

bool OAIBudgetProperties::is_category_Valid() const{
    return m_category_isValid;
}

OAICurrentSpend OAIBudgetProperties::getCurrentSpend() const {
    return m_current_spend;
}
void OAIBudgetProperties::setCurrentSpend(const OAICurrentSpend &current_spend) {
    m_current_spend = current_spend;
    m_current_spend_isSet = true;
}

bool OAIBudgetProperties::is_current_spend_Set() const{
    return m_current_spend_isSet;
}

bool OAIBudgetProperties::is_current_spend_Valid() const{
    return m_current_spend_isValid;
}

OAIFilters OAIBudgetProperties::getFilters() const {
    return m_filters;
}
void OAIBudgetProperties::setFilters(const OAIFilters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIBudgetProperties::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIBudgetProperties::is_filters_Valid() const{
    return m_filters_isValid;
}

QMap<QString, OAINotification> OAIBudgetProperties::getNotifications() const {
    return m_notifications;
}
void OAIBudgetProperties::setNotifications(const QMap<QString, OAINotification> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIBudgetProperties::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIBudgetProperties::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QString OAIBudgetProperties::getTimeGrain() const {
    return m_time_grain;
}
void OAIBudgetProperties::setTimeGrain(const QString &time_grain) {
    m_time_grain = time_grain;
    m_time_grain_isSet = true;
}

bool OAIBudgetProperties::is_time_grain_Set() const{
    return m_time_grain_isSet;
}

bool OAIBudgetProperties::is_time_grain_Valid() const{
    return m_time_grain_isValid;
}

OAIBudgetTimePeriod OAIBudgetProperties::getTimePeriod() const {
    return m_time_period;
}
void OAIBudgetProperties::setTimePeriod(const OAIBudgetTimePeriod &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIBudgetProperties::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIBudgetProperties::is_time_period_Valid() const{
    return m_time_period_isValid;
}

bool OAIBudgetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_spend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_grain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBudgetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_category_isValid && m_time_grain_isValid && m_time_period_isValid && true;
}

} // namespace OpenAPI
