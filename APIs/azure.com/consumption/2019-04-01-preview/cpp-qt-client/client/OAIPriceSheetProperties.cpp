/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPriceSheetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPriceSheetProperties::OAIPriceSheetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPriceSheetProperties::OAIPriceSheetProperties() {
    this->initializeModel();
}

OAIPriceSheetProperties::~OAIPriceSheetProperties() {}

void OAIPriceSheetProperties::initializeModel() {

    m_billing_period_id_isSet = false;
    m_billing_period_id_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_included_quantity_isSet = false;
    m_included_quantity_isValid = false;

    m_meter_details_isSet = false;
    m_meter_details_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_part_number_isSet = false;
    m_part_number_isValid = false;

    m_unit_of_measure_isSet = false;
    m_unit_of_measure_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAIPriceSheetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPriceSheetProperties::fromJsonObject(QJsonObject json) {

    m_billing_period_id_isValid = ::OpenAPI::fromJsonValue(m_billing_period_id, json[QString("billingPeriodId")]);
    m_billing_period_id_isSet = !json[QString("billingPeriodId")].isNull() && m_billing_period_id_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_included_quantity_isValid = ::OpenAPI::fromJsonValue(m_included_quantity, json[QString("includedQuantity")]);
    m_included_quantity_isSet = !json[QString("includedQuantity")].isNull() && m_included_quantity_isValid;

    m_meter_details_isValid = ::OpenAPI::fromJsonValue(m_meter_details, json[QString("meterDetails")]);
    m_meter_details_isSet = !json[QString("meterDetails")].isNull() && m_meter_details_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("meterId")]);
    m_meter_id_isSet = !json[QString("meterId")].isNull() && m_meter_id_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("partNumber")]);
    m_part_number_isSet = !json[QString("partNumber")].isNull() && m_part_number_isValid;

    m_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_of_measure, json[QString("unitOfMeasure")]);
    m_unit_of_measure_isSet = !json[QString("unitOfMeasure")].isNull() && m_unit_of_measure_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;
}

QString OAIPriceSheetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPriceSheetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_period_id_isSet) {
        obj.insert(QString("billingPeriodId"), ::OpenAPI::toJsonValue(m_billing_period_id));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_included_quantity_isSet) {
        obj.insert(QString("includedQuantity"), ::OpenAPI::toJsonValue(m_included_quantity));
    }
    if (m_meter_details.isSet()) {
        obj.insert(QString("meterDetails"), ::OpenAPI::toJsonValue(m_meter_details));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("meterId"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_part_number_isSet) {
        obj.insert(QString("partNumber"), ::OpenAPI::toJsonValue(m_part_number));
    }
    if (m_unit_of_measure_isSet) {
        obj.insert(QString("unitOfMeasure"), ::OpenAPI::toJsonValue(m_unit_of_measure));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

QString OAIPriceSheetProperties::getBillingPeriodId() const {
    return m_billing_period_id;
}
void OAIPriceSheetProperties::setBillingPeriodId(const QString &billing_period_id) {
    m_billing_period_id = billing_period_id;
    m_billing_period_id_isSet = true;
}

bool OAIPriceSheetProperties::is_billing_period_id_Set() const{
    return m_billing_period_id_isSet;
}

bool OAIPriceSheetProperties::is_billing_period_id_Valid() const{
    return m_billing_period_id_isValid;
}

QString OAIPriceSheetProperties::getCurrencyCode() const {
    return m_currency_code;
}
void OAIPriceSheetProperties::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIPriceSheetProperties::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIPriceSheetProperties::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

double OAIPriceSheetProperties::getIncludedQuantity() const {
    return m_included_quantity;
}
void OAIPriceSheetProperties::setIncludedQuantity(const double &included_quantity) {
    m_included_quantity = included_quantity;
    m_included_quantity_isSet = true;
}

bool OAIPriceSheetProperties::is_included_quantity_Set() const{
    return m_included_quantity_isSet;
}

bool OAIPriceSheetProperties::is_included_quantity_Valid() const{
    return m_included_quantity_isValid;
}

OAIMeterDetails OAIPriceSheetProperties::getMeterDetails() const {
    return m_meter_details;
}
void OAIPriceSheetProperties::setMeterDetails(const OAIMeterDetails &meter_details) {
    m_meter_details = meter_details;
    m_meter_details_isSet = true;
}

bool OAIPriceSheetProperties::is_meter_details_Set() const{
    return m_meter_details_isSet;
}

bool OAIPriceSheetProperties::is_meter_details_Valid() const{
    return m_meter_details_isValid;
}

QString OAIPriceSheetProperties::getMeterId() const {
    return m_meter_id;
}
void OAIPriceSheetProperties::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIPriceSheetProperties::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIPriceSheetProperties::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

QString OAIPriceSheetProperties::getOfferId() const {
    return m_offer_id;
}
void OAIPriceSheetProperties::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIPriceSheetProperties::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIPriceSheetProperties::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAIPriceSheetProperties::getPartNumber() const {
    return m_part_number;
}
void OAIPriceSheetProperties::setPartNumber(const QString &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIPriceSheetProperties::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIPriceSheetProperties::is_part_number_Valid() const{
    return m_part_number_isValid;
}

QString OAIPriceSheetProperties::getUnitOfMeasure() const {
    return m_unit_of_measure;
}
void OAIPriceSheetProperties::setUnitOfMeasure(const QString &unit_of_measure) {
    m_unit_of_measure = unit_of_measure;
    m_unit_of_measure_isSet = true;
}

bool OAIPriceSheetProperties::is_unit_of_measure_Set() const{
    return m_unit_of_measure_isSet;
}

bool OAIPriceSheetProperties::is_unit_of_measure_Valid() const{
    return m_unit_of_measure_isValid;
}

double OAIPriceSheetProperties::getUnitPrice() const {
    return m_unit_price;
}
void OAIPriceSheetProperties::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIPriceSheetProperties::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIPriceSheetProperties::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAIPriceSheetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_period_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_of_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPriceSheetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
