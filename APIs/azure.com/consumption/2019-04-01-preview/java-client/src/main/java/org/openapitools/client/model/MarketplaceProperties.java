/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the marketplace usage detail.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:20.108232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MarketplaceProperties {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  private String additionalProperties;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_ID = "billingPeriodId";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_ID)
  private String billingPeriodId;

  public static final String SERIALIZED_NAME_CONSUMED_QUANTITY = "consumedQuantity";
  @SerializedName(SERIALIZED_NAME_CONSUMED_QUANTITY)
  private BigDecimal consumedQuantity;

  public static final String SERIALIZED_NAME_CONSUMED_SERVICE = "consumedService";
  @SerializedName(SERIALIZED_NAME_CONSUMED_SERVICE)
  private String consumedService;

  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private String costCenter;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DEPARTMENT_NAME = "departmentName";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_NAME)
  private String departmentName;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "instanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName;

  public static final String SERIALIZED_NAME_IS_ESTIMATED = "isEstimated";
  @SerializedName(SERIALIZED_NAME_IS_ESTIMATED)
  private Boolean isEstimated;

  public static final String SERIALIZED_NAME_IS_RECURRING_CHARGE = "isRecurringCharge";
  @SerializedName(SERIALIZED_NAME_IS_RECURRING_CHARGE)
  private Boolean isRecurringCharge;

  public static final String SERIALIZED_NAME_METER_ID = "meterId";
  @SerializedName(SERIALIZED_NAME_METER_ID)
  private UUID meterId;

  public static final String SERIALIZED_NAME_OFFER_NAME = "offerName";
  @SerializedName(SERIALIZED_NAME_OFFER_NAME)
  private String offerName;

  public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";
  @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
  private String orderNumber;

  public static final String SERIALIZED_NAME_PLAN_NAME = "planName";
  @SerializedName(SERIALIZED_NAME_PLAN_NAME)
  private String planName;

  public static final String SERIALIZED_NAME_PRETAX_COST = "pretaxCost";
  @SerializedName(SERIALIZED_NAME_PRETAX_COST)
  private BigDecimal pretaxCost;

  public static final String SERIALIZED_NAME_PUBLISHER_NAME = "publisherName";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_NAME)
  private String publisherName;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resourceGroup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  public static final String SERIALIZED_NAME_RESOURCE_RATE = "resourceRate";
  @SerializedName(SERIALIZED_NAME_RESOURCE_RATE)
  private BigDecimal resourceRate;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_GUID = "subscriptionGuid";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_GUID)
  private UUID subscriptionGuid;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_NAME = "subscriptionName";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_NAME)
  private String subscriptionName;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "unitOfMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private String unitOfMeasure;

  public static final String SERIALIZED_NAME_USAGE_END = "usageEnd";
  @SerializedName(SERIALIZED_NAME_USAGE_END)
  private OffsetDateTime usageEnd;

  public static final String SERIALIZED_NAME_USAGE_START = "usageStart";
  @SerializedName(SERIALIZED_NAME_USAGE_START)
  private OffsetDateTime usageStart;

  public MarketplaceProperties() {
  }

  public MarketplaceProperties(
     String accountName, 
     String additionalProperties, 
     String billingPeriodId, 
     BigDecimal consumedQuantity, 
     String consumedService, 
     String costCenter, 
     String currency, 
     String departmentName, 
     String instanceId, 
     String instanceName, 
     Boolean isEstimated, 
     Boolean isRecurringCharge, 
     UUID meterId, 
     String offerName, 
     String orderNumber, 
     String planName, 
     BigDecimal pretaxCost, 
     String publisherName, 
     String resourceGroup, 
     BigDecimal resourceRate, 
     UUID subscriptionGuid, 
     String subscriptionName, 
     String unitOfMeasure, 
     OffsetDateTime usageEnd, 
     OffsetDateTime usageStart
  ) {
    this();
    this.accountName = accountName;
    this.additionalProperties = additionalProperties;
    this.billingPeriodId = billingPeriodId;
    this.consumedQuantity = consumedQuantity;
    this.consumedService = consumedService;
    this.costCenter = costCenter;
    this.currency = currency;
    this.departmentName = departmentName;
    this.instanceId = instanceId;
    this.instanceName = instanceName;
    this.isEstimated = isEstimated;
    this.isRecurringCharge = isRecurringCharge;
    this.meterId = meterId;
    this.offerName = offerName;
    this.orderNumber = orderNumber;
    this.planName = planName;
    this.pretaxCost = pretaxCost;
    this.publisherName = publisherName;
    this.resourceGroup = resourceGroup;
    this.resourceRate = resourceRate;
    this.subscriptionGuid = subscriptionGuid;
    this.subscriptionName = subscriptionName;
    this.unitOfMeasure = unitOfMeasure;
    this.usageEnd = usageEnd;
    this.usageStart = usageStart;
  }

  /**
   * Account name.
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }



  /**
   * Additional details of this usage item. By default this is not populated, unless it&#39;s specified in $expand.
   * @return additionalProperties
   */
  @javax.annotation.Nullable
  public String getAdditionalProperties() {
    return additionalProperties;
  }



  /**
   * The id of the billing period resource that the usage belongs to.
   * @return billingPeriodId
   */
  @javax.annotation.Nullable
  public String getBillingPeriodId() {
    return billingPeriodId;
  }



  /**
   * The quantity of usage.
   * @return consumedQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getConsumedQuantity() {
    return consumedQuantity;
  }



  /**
   * Consumed service name.
   * @return consumedService
   */
  @javax.annotation.Nullable
  public String getConsumedService() {
    return consumedService;
  }



  /**
   * The cost center of this department if it is a department and a costcenter exists
   * @return costCenter
   */
  @javax.annotation.Nullable
  public String getCostCenter() {
    return costCenter;
  }



  /**
   * The ISO currency in which the meter is charged, for example, USD.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }



  /**
   * Department name.
   * @return departmentName
   */
  @javax.annotation.Nullable
  public String getDepartmentName() {
    return departmentName;
  }



  /**
   * The uri of the resource instance that the usage is about.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }



  /**
   * The name of the resource instance that the usage is about.
   * @return instanceName
   */
  @javax.annotation.Nullable
  public String getInstanceName() {
    return instanceName;
  }



  /**
   * The estimated usage is subject to change.
   * @return isEstimated
   */
  @javax.annotation.Nullable
  public Boolean getIsEstimated() {
    return isEstimated;
  }



  /**
   * Flag indicating whether this is a recurring charge or not.
   * @return isRecurringCharge
   */
  @javax.annotation.Nullable
  public Boolean getIsRecurringCharge() {
    return isRecurringCharge;
  }



  /**
   * The meter id (GUID).
   * @return meterId
   */
  @javax.annotation.Nullable
  public UUID getMeterId() {
    return meterId;
  }



  /**
   * The type of offer.
   * @return offerName
   */
  @javax.annotation.Nullable
  public String getOfferName() {
    return offerName;
  }



  /**
   * The order number.
   * @return orderNumber
   */
  @javax.annotation.Nullable
  public String getOrderNumber() {
    return orderNumber;
  }



  /**
   * The name of plan.
   * @return planName
   */
  @javax.annotation.Nullable
  public String getPlanName() {
    return planName;
  }



  /**
   * The amount of cost before tax.
   * @return pretaxCost
   */
  @javax.annotation.Nullable
  public BigDecimal getPretaxCost() {
    return pretaxCost;
  }



  /**
   * The name of publisher.
   * @return publisherName
   */
  @javax.annotation.Nullable
  public String getPublisherName() {
    return publisherName;
  }



  /**
   * The name of resource group.
   * @return resourceGroup
   */
  @javax.annotation.Nullable
  public String getResourceGroup() {
    return resourceGroup;
  }



  /**
   * The marketplace resource rate.
   * @return resourceRate
   */
  @javax.annotation.Nullable
  public BigDecimal getResourceRate() {
    return resourceRate;
  }



  /**
   * Subscription guid.
   * @return subscriptionGuid
   */
  @javax.annotation.Nullable
  public UUID getSubscriptionGuid() {
    return subscriptionGuid;
  }



  /**
   * Subscription name.
   * @return subscriptionName
   */
  @javax.annotation.Nullable
  public String getSubscriptionName() {
    return subscriptionName;
  }



  /**
   * The unit of measure.
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }



  /**
   * The end of the date time range covered by the usage detail.
   * @return usageEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageEnd() {
    return usageEnd;
  }



  /**
   * The start of the date time range covered by the usage detail.
   * @return usageStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageStart() {
    return usageStart;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketplaceProperties marketplaceProperties = (MarketplaceProperties) o;
    return Objects.equals(this.accountName, marketplaceProperties.accountName) &&
        Objects.equals(this.additionalProperties, marketplaceProperties.additionalProperties) &&
        Objects.equals(this.billingPeriodId, marketplaceProperties.billingPeriodId) &&
        Objects.equals(this.consumedQuantity, marketplaceProperties.consumedQuantity) &&
        Objects.equals(this.consumedService, marketplaceProperties.consumedService) &&
        Objects.equals(this.costCenter, marketplaceProperties.costCenter) &&
        Objects.equals(this.currency, marketplaceProperties.currency) &&
        Objects.equals(this.departmentName, marketplaceProperties.departmentName) &&
        Objects.equals(this.instanceId, marketplaceProperties.instanceId) &&
        Objects.equals(this.instanceName, marketplaceProperties.instanceName) &&
        Objects.equals(this.isEstimated, marketplaceProperties.isEstimated) &&
        Objects.equals(this.isRecurringCharge, marketplaceProperties.isRecurringCharge) &&
        Objects.equals(this.meterId, marketplaceProperties.meterId) &&
        Objects.equals(this.offerName, marketplaceProperties.offerName) &&
        Objects.equals(this.orderNumber, marketplaceProperties.orderNumber) &&
        Objects.equals(this.planName, marketplaceProperties.planName) &&
        Objects.equals(this.pretaxCost, marketplaceProperties.pretaxCost) &&
        Objects.equals(this.publisherName, marketplaceProperties.publisherName) &&
        Objects.equals(this.resourceGroup, marketplaceProperties.resourceGroup) &&
        Objects.equals(this.resourceRate, marketplaceProperties.resourceRate) &&
        Objects.equals(this.subscriptionGuid, marketplaceProperties.subscriptionGuid) &&
        Objects.equals(this.subscriptionName, marketplaceProperties.subscriptionName) &&
        Objects.equals(this.unitOfMeasure, marketplaceProperties.unitOfMeasure) &&
        Objects.equals(this.usageEnd, marketplaceProperties.usageEnd) &&
        Objects.equals(this.usageStart, marketplaceProperties.usageStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, additionalProperties, billingPeriodId, consumedQuantity, consumedService, costCenter, currency, departmentName, instanceId, instanceName, isEstimated, isRecurringCharge, meterId, offerName, orderNumber, planName, pretaxCost, publisherName, resourceGroup, resourceRate, subscriptionGuid, subscriptionName, unitOfMeasure, usageEnd, usageStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketplaceProperties {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    billingPeriodId: ").append(toIndentedString(billingPeriodId)).append("\n");
    sb.append("    consumedQuantity: ").append(toIndentedString(consumedQuantity)).append("\n");
    sb.append("    consumedService: ").append(toIndentedString(consumedService)).append("\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    departmentName: ").append(toIndentedString(departmentName)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    isEstimated: ").append(toIndentedString(isEstimated)).append("\n");
    sb.append("    isRecurringCharge: ").append(toIndentedString(isRecurringCharge)).append("\n");
    sb.append("    meterId: ").append(toIndentedString(meterId)).append("\n");
    sb.append("    offerName: ").append(toIndentedString(offerName)).append("\n");
    sb.append("    orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    pretaxCost: ").append(toIndentedString(pretaxCost)).append("\n");
    sb.append("    publisherName: ").append(toIndentedString(publisherName)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    resourceRate: ").append(toIndentedString(resourceRate)).append("\n");
    sb.append("    subscriptionGuid: ").append(toIndentedString(subscriptionGuid)).append("\n");
    sb.append("    subscriptionName: ").append(toIndentedString(subscriptionName)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    usageEnd: ").append(toIndentedString(usageEnd)).append("\n");
    sb.append("    usageStart: ").append(toIndentedString(usageStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("additionalProperties");
    openapiFields.add("billingPeriodId");
    openapiFields.add("consumedQuantity");
    openapiFields.add("consumedService");
    openapiFields.add("costCenter");
    openapiFields.add("currency");
    openapiFields.add("departmentName");
    openapiFields.add("instanceId");
    openapiFields.add("instanceName");
    openapiFields.add("isEstimated");
    openapiFields.add("isRecurringCharge");
    openapiFields.add("meterId");
    openapiFields.add("offerName");
    openapiFields.add("orderNumber");
    openapiFields.add("planName");
    openapiFields.add("pretaxCost");
    openapiFields.add("publisherName");
    openapiFields.add("resourceGroup");
    openapiFields.add("resourceRate");
    openapiFields.add("subscriptionGuid");
    openapiFields.add("subscriptionName");
    openapiFields.add("unitOfMeasure");
    openapiFields.add("usageEnd");
    openapiFields.add("usageStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MarketplaceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MarketplaceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MarketplaceProperties is not found in the empty JSON string", MarketplaceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MarketplaceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MarketplaceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("additionalProperties") != null && !jsonObj.get("additionalProperties").isJsonNull()) && !jsonObj.get("additionalProperties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalProperties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalProperties").toString()));
      }
      if ((jsonObj.get("billingPeriodId") != null && !jsonObj.get("billingPeriodId").isJsonNull()) && !jsonObj.get("billingPeriodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPeriodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPeriodId").toString()));
      }
      if ((jsonObj.get("consumedService") != null && !jsonObj.get("consumedService").isJsonNull()) && !jsonObj.get("consumedService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumedService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumedService").toString()));
      }
      if ((jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) && !jsonObj.get("costCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("departmentName") != null && !jsonObj.get("departmentName").isJsonNull()) && !jsonObj.get("departmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departmentName").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("instanceName") != null && !jsonObj.get("instanceName").isJsonNull()) && !jsonObj.get("instanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceName").toString()));
      }
      if ((jsonObj.get("meterId") != null && !jsonObj.get("meterId").isJsonNull()) && !jsonObj.get("meterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterId").toString()));
      }
      if ((jsonObj.get("offerName") != null && !jsonObj.get("offerName").isJsonNull()) && !jsonObj.get("offerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerName").toString()));
      }
      if ((jsonObj.get("orderNumber") != null && !jsonObj.get("orderNumber").isJsonNull()) && !jsonObj.get("orderNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderNumber").toString()));
      }
      if ((jsonObj.get("planName") != null && !jsonObj.get("planName").isJsonNull()) && !jsonObj.get("planName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planName").toString()));
      }
      if ((jsonObj.get("publisherName") != null && !jsonObj.get("publisherName").isJsonNull()) && !jsonObj.get("publisherName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherName").toString()));
      }
      if ((jsonObj.get("resourceGroup") != null && !jsonObj.get("resourceGroup").isJsonNull()) && !jsonObj.get("resourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroup").toString()));
      }
      if ((jsonObj.get("subscriptionGuid") != null && !jsonObj.get("subscriptionGuid").isJsonNull()) && !jsonObj.get("subscriptionGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionGuid").toString()));
      }
      if ((jsonObj.get("subscriptionName") != null && !jsonObj.get("subscriptionName").isJsonNull()) && !jsonObj.get("subscriptionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionName").toString()));
      }
      if ((jsonObj.get("unitOfMeasure") != null && !jsonObj.get("unitOfMeasure").isJsonNull()) && !jsonObj.get("unitOfMeasure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unitOfMeasure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unitOfMeasure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MarketplaceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MarketplaceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MarketplaceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MarketplaceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MarketplaceProperties>() {
           @Override
           public void write(JsonWriter out, MarketplaceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MarketplaceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MarketplaceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MarketplaceProperties
   * @throws IOException if the JSON string is invalid with respect to MarketplaceProperties
   */
  public static MarketplaceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MarketplaceProperties.class);
  }

  /**
   * Convert an instance of MarketplaceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

