/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.BudgetTimePeriod;
import org.openapitools.client.model.CurrentSpend;
import org.openapitools.client.model.Filters;
import org.openapitools.client.model.Notification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the budget.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:20.108232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BudgetProperties {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  /**
   * The category of the budget, whether the budget tracks cost or usage.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    COST("Cost"),
    
    USAGE("Usage");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CURRENT_SPEND = "currentSpend";
  @SerializedName(SERIALIZED_NAME_CURRENT_SPEND)
  private CurrentSpend currentSpend;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private Filters filters;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private Map<String, Notification> notifications = new HashMap<>();

  /**
   * The time covered by a budget. Tracking of the amount will be reset based on the time grain.
   */
  @JsonAdapter(TimeGrainEnum.Adapter.class)
  public enum TimeGrainEnum {
    MONTHLY("Monthly"),
    
    QUARTERLY("Quarterly"),
    
    ANNUALLY("Annually");

    private String value;

    TimeGrainEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeGrainEnum fromValue(String value) {
      for (TimeGrainEnum b : TimeGrainEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeGrainEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeGrainEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeGrainEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeGrainEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeGrainEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_GRAIN = "timeGrain";
  @SerializedName(SERIALIZED_NAME_TIME_GRAIN)
  private TimeGrainEnum timeGrain;

  public static final String SERIALIZED_NAME_TIME_PERIOD = "timePeriod";
  @SerializedName(SERIALIZED_NAME_TIME_PERIOD)
  private BudgetTimePeriod timePeriod;

  public BudgetProperties() {
  }

  public BudgetProperties amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The total amount of cost to track with the budget
   * @return amount
   */
  @javax.annotation.Nonnull
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public BudgetProperties category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * The category of the budget, whether the budget tracks cost or usage.
   * @return category
   */
  @javax.annotation.Nonnull
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public BudgetProperties currentSpend(CurrentSpend currentSpend) {
    this.currentSpend = currentSpend;
    return this;
  }

  /**
   * Get currentSpend
   * @return currentSpend
   */
  @javax.annotation.Nullable
  public CurrentSpend getCurrentSpend() {
    return currentSpend;
  }

  public void setCurrentSpend(CurrentSpend currentSpend) {
    this.currentSpend = currentSpend;
  }


  public BudgetProperties filters(Filters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public Filters getFilters() {
    return filters;
  }

  public void setFilters(Filters filters) {
    this.filters = filters;
  }


  public BudgetProperties notifications(Map<String, Notification> notifications) {
    this.notifications = notifications;
    return this;
  }

  public BudgetProperties putNotificationsItem(String key, Notification notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new HashMap<>();
    }
    this.notifications.put(key, notificationsItem);
    return this;
  }

  /**
   * Dictionary of notifications associated with the budget. Budget can have up to five notifications.
   * @return notifications
   */
  @javax.annotation.Nullable
  public Map<String, Notification> getNotifications() {
    return notifications;
  }

  public void setNotifications(Map<String, Notification> notifications) {
    this.notifications = notifications;
  }


  public BudgetProperties timeGrain(TimeGrainEnum timeGrain) {
    this.timeGrain = timeGrain;
    return this;
  }

  /**
   * The time covered by a budget. Tracking of the amount will be reset based on the time grain.
   * @return timeGrain
   */
  @javax.annotation.Nonnull
  public TimeGrainEnum getTimeGrain() {
    return timeGrain;
  }

  public void setTimeGrain(TimeGrainEnum timeGrain) {
    this.timeGrain = timeGrain;
  }


  public BudgetProperties timePeriod(BudgetTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
    return this;
  }

  /**
   * Get timePeriod
   * @return timePeriod
   */
  @javax.annotation.Nonnull
  public BudgetTimePeriod getTimePeriod() {
    return timePeriod;
  }

  public void setTimePeriod(BudgetTimePeriod timePeriod) {
    this.timePeriod = timePeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetProperties budgetProperties = (BudgetProperties) o;
    return Objects.equals(this.amount, budgetProperties.amount) &&
        Objects.equals(this.category, budgetProperties.category) &&
        Objects.equals(this.currentSpend, budgetProperties.currentSpend) &&
        Objects.equals(this.filters, budgetProperties.filters) &&
        Objects.equals(this.notifications, budgetProperties.notifications) &&
        Objects.equals(this.timeGrain, budgetProperties.timeGrain) &&
        Objects.equals(this.timePeriod, budgetProperties.timePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, category, currentSpend, filters, notifications, timeGrain, timePeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetProperties {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    currentSpend: ").append(toIndentedString(currentSpend)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    timeGrain: ").append(toIndentedString(timeGrain)).append("\n");
    sb.append("    timePeriod: ").append(toIndentedString(timePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("category");
    openapiFields.add("currentSpend");
    openapiFields.add("filters");
    openapiFields.add("notifications");
    openapiFields.add("timeGrain");
    openapiFields.add("timePeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("timeGrain");
    openapiRequiredFields.add("timePeriod");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BudgetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BudgetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetProperties is not found in the empty JSON string", BudgetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BudgetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BudgetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BudgetProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the required field `category`
      CategoryEnum.validateJsonElement(jsonObj.get("category"));
      // validate the optional field `currentSpend`
      if (jsonObj.get("currentSpend") != null && !jsonObj.get("currentSpend").isJsonNull()) {
        CurrentSpend.validateJsonElement(jsonObj.get("currentSpend"));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        Filters.validateJsonElement(jsonObj.get("filters"));
      }
      if (!jsonObj.get("timeGrain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeGrain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeGrain").toString()));
      }
      // validate the required field `timeGrain`
      TimeGrainEnum.validateJsonElement(jsonObj.get("timeGrain"));
      // validate the required field `timePeriod`
      BudgetTimePeriod.validateJsonElement(jsonObj.get("timePeriod"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetProperties>() {
           @Override
           public void write(JsonWriter out, BudgetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BudgetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BudgetProperties
   * @throws IOException if the JSON string is invalid with respect to BudgetProperties
   */
  public static BudgetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetProperties.class);
  }

  /**
   * Convert an instance of BudgetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

