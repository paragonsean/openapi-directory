/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnrollment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnrollment::OAIEnrollment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnrollment::OAIEnrollment() {
    this->initializeModel();
}

OAIEnrollment::~OAIEnrollment() {}

void OAIEnrollment::initializeModel() {

    m_billing_cycle_isSet = false;
    m_billing_cycle_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIEnrollment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnrollment::fromJsonObject(QJsonObject json) {

    m_billing_cycle_isValid = ::OpenAPI::fromJsonValue(m_billing_cycle, json[QString("billingCycle")]);
    m_billing_cycle_isSet = !json[QString("billingCycle")].isNull() && m_billing_cycle_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIEnrollment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnrollment::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_cycle_isSet) {
        obj.insert(QString("billingCycle"), ::OpenAPI::toJsonValue(m_billing_cycle));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_policies.isSet()) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIEnrollment::getBillingCycle() const {
    return m_billing_cycle;
}
void OAIEnrollment::setBillingCycle(const QString &billing_cycle) {
    m_billing_cycle = billing_cycle;
    m_billing_cycle_isSet = true;
}

bool OAIEnrollment::is_billing_cycle_Set() const{
    return m_billing_cycle_isSet;
}

bool OAIEnrollment::is_billing_cycle_Valid() const{
    return m_billing_cycle_isValid;
}

QString OAIEnrollment::getChannel() const {
    return m_channel;
}
void OAIEnrollment::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIEnrollment::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIEnrollment::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIEnrollment::getCountryCode() const {
    return m_country_code;
}
void OAIEnrollment::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIEnrollment::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIEnrollment::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIEnrollment::getCurrency() const {
    return m_currency;
}
void OAIEnrollment::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIEnrollment::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIEnrollment::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIEnrollment::getEndDate() const {
    return m_end_date;
}
void OAIEnrollment::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIEnrollment::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIEnrollment::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIEnrollment::getLanguage() const {
    return m_language;
}
void OAIEnrollment::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIEnrollment::is_language_Set() const{
    return m_language_isSet;
}

bool OAIEnrollment::is_language_Valid() const{
    return m_language_isValid;
}

OAIEnrollmentPolicies OAIEnrollment::getPolicies() const {
    return m_policies;
}
void OAIEnrollment::setPolicies(const OAIEnrollmentPolicies &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIEnrollment::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIEnrollment::is_policies_Valid() const{
    return m_policies_isValid;
}

QDateTime OAIEnrollment::getStartDate() const {
    return m_start_date;
}
void OAIEnrollment::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIEnrollment::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIEnrollment::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIEnrollment::getStatus() const {
    return m_status;
}
void OAIEnrollment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEnrollment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEnrollment::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIEnrollment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnrollment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
