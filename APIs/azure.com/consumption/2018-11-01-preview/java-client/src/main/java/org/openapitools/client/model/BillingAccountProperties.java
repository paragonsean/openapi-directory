/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.BillingProfile;
import org.openapitools.client.model.Department;
import org.openapitools.client.model.Enrollment;
import org.openapitools.client.model.EnrollmentAccount;
import org.openapitools.client.model.InvoiceSection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the billing account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:14.397029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillingAccountProperties {
  /**
   * The billing account Type.
   */
  @JsonAdapter(AccountTypeEnum.Adapter.class)
  public enum AccountTypeEnum {
    COMMERCE_ROOT("CommerceRoot"),
    
    ENROLLMENT("Enrollment");

    private String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountTypeEnum fromValue(String value) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private AccountTypeEnum accountType;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_AGREEMENTS = "agreements";
  @SerializedName(SERIALIZED_NAME_AGREEMENTS)
  private String agreements;

  public static final String SERIALIZED_NAME_BILLING_PROFILES = "billingProfiles";
  @SerializedName(SERIALIZED_NAME_BILLING_PROFILES)
  private List<BillingProfile> billingProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DEFAULT_CURRENCY = "defaultCurrency";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CURRENCY)
  private String defaultCurrency;

  public static final String SERIALIZED_NAME_DEPARTMENTS = "departments";
  @SerializedName(SERIALIZED_NAME_DEPARTMENTS)
  private List<Department> departments = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENROLLMENT_ACCOUNTS = "enrollmentAccounts";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_ACCOUNTS)
  private List<EnrollmentAccount> enrollmentAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENROLLMENT_DETAILS = "enrollmentDetails";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_DETAILS)
  private Enrollment enrollmentDetails;

  public static final String SERIALIZED_NAME_INVOICE_SECTIONS = "invoiceSections";
  @SerializedName(SERIALIZED_NAME_INVOICE_SECTIONS)
  private List<InvoiceSection> invoiceSections = new ArrayList<>();

  public BillingAccountProperties() {
  }

  public BillingAccountProperties(
     AccountTypeEnum accountType, 
     String agreements, 
     List<BillingProfile> billingProfiles, 
     String company, 
     String country, 
     String defaultCurrency, 
     List<Department> departments, 
     List<EnrollmentAccount> enrollmentAccounts, 
     List<InvoiceSection> invoiceSections
  ) {
    this();
    this.accountType = accountType;
    this.agreements = agreements;
    this.billingProfiles = billingProfiles;
    this.company = company;
    this.country = country;
    this.defaultCurrency = defaultCurrency;
    this.departments = departments;
    this.enrollmentAccounts = enrollmentAccounts;
    this.invoiceSections = invoiceSections;
  }

  /**
   * The billing account Type.
   * @return accountType
   */
  @javax.annotation.Nullable
  public AccountTypeEnum getAccountType() {
    return accountType;
  }



  public BillingAccountProperties address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  /**
   * Agreements associated with billing account
   * @return agreements
   */
  @javax.annotation.Nullable
  public String getAgreements() {
    return agreements;
  }



  /**
   * The billing profiles associated to the billing account.
   * @return billingProfiles
   */
  @javax.annotation.Nullable
  public List<BillingProfile> getBillingProfiles() {
    return billingProfiles;
  }



  /**
   * The Company this billing account belongs to.
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }



  /**
   * The country associated with billing account.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }



  /**
   * The ISO currency, for example, USD.
   * @return defaultCurrency
   */
  @javax.annotation.Nullable
  public String getDefaultCurrency() {
    return defaultCurrency;
  }



  /**
   * The departments associated to the enrollment.
   * @return departments
   */
  @javax.annotation.Nullable
  public List<Department> getDepartments() {
    return departments;
  }



  /**
   * The accounts associated to the enrollment.
   * @return enrollmentAccounts
   */
  @javax.annotation.Nullable
  public List<EnrollmentAccount> getEnrollmentAccounts() {
    return enrollmentAccounts;
  }



  public BillingAccountProperties enrollmentDetails(Enrollment enrollmentDetails) {
    this.enrollmentDetails = enrollmentDetails;
    return this;
  }

  /**
   * Get enrollmentDetails
   * @return enrollmentDetails
   */
  @javax.annotation.Nullable
  public Enrollment getEnrollmentDetails() {
    return enrollmentDetails;
  }

  public void setEnrollmentDetails(Enrollment enrollmentDetails) {
    this.enrollmentDetails = enrollmentDetails;
  }


  /**
   * The invoiceSections associated to the billing account.
   * @return invoiceSections
   */
  @javax.annotation.Nullable
  public List<InvoiceSection> getInvoiceSections() {
    return invoiceSections;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingAccountProperties billingAccountProperties = (BillingAccountProperties) o;
    return Objects.equals(this.accountType, billingAccountProperties.accountType) &&
        Objects.equals(this.address, billingAccountProperties.address) &&
        Objects.equals(this.agreements, billingAccountProperties.agreements) &&
        Objects.equals(this.billingProfiles, billingAccountProperties.billingProfiles) &&
        Objects.equals(this.company, billingAccountProperties.company) &&
        Objects.equals(this.country, billingAccountProperties.country) &&
        Objects.equals(this.defaultCurrency, billingAccountProperties.defaultCurrency) &&
        Objects.equals(this.departments, billingAccountProperties.departments) &&
        Objects.equals(this.enrollmentAccounts, billingAccountProperties.enrollmentAccounts) &&
        Objects.equals(this.enrollmentDetails, billingAccountProperties.enrollmentDetails) &&
        Objects.equals(this.invoiceSections, billingAccountProperties.invoiceSections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, address, agreements, billingProfiles, company, country, defaultCurrency, departments, enrollmentAccounts, enrollmentDetails, invoiceSections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingAccountProperties {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    agreements: ").append(toIndentedString(agreements)).append("\n");
    sb.append("    billingProfiles: ").append(toIndentedString(billingProfiles)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    defaultCurrency: ").append(toIndentedString(defaultCurrency)).append("\n");
    sb.append("    departments: ").append(toIndentedString(departments)).append("\n");
    sb.append("    enrollmentAccounts: ").append(toIndentedString(enrollmentAccounts)).append("\n");
    sb.append("    enrollmentDetails: ").append(toIndentedString(enrollmentDetails)).append("\n");
    sb.append("    invoiceSections: ").append(toIndentedString(invoiceSections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountType");
    openapiFields.add("address");
    openapiFields.add("agreements");
    openapiFields.add("billingProfiles");
    openapiFields.add("company");
    openapiFields.add("country");
    openapiFields.add("defaultCurrency");
    openapiFields.add("departments");
    openapiFields.add("enrollmentAccounts");
    openapiFields.add("enrollmentDetails");
    openapiFields.add("invoiceSections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingAccountProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingAccountProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingAccountProperties is not found in the empty JSON string", BillingAccountProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingAccountProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingAccountProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      // validate the optional field `accountType`
      if (jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) {
        AccountTypeEnum.validateJsonElement(jsonObj.get("accountType"));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("agreements") != null && !jsonObj.get("agreements").isJsonNull()) && !jsonObj.get("agreements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agreements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agreements").toString()));
      }
      if (jsonObj.get("billingProfiles") != null && !jsonObj.get("billingProfiles").isJsonNull()) {
        JsonArray jsonArraybillingProfiles = jsonObj.getAsJsonArray("billingProfiles");
        if (jsonArraybillingProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("billingProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `billingProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("billingProfiles").toString()));
          }

          // validate the optional field `billingProfiles` (array)
          for (int i = 0; i < jsonArraybillingProfiles.size(); i++) {
            BillingProfile.validateJsonElement(jsonArraybillingProfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("defaultCurrency") != null && !jsonObj.get("defaultCurrency").isJsonNull()) && !jsonObj.get("defaultCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultCurrency").toString()));
      }
      if (jsonObj.get("departments") != null && !jsonObj.get("departments").isJsonNull()) {
        JsonArray jsonArraydepartments = jsonObj.getAsJsonArray("departments");
        if (jsonArraydepartments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("departments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `departments` to be an array in the JSON string but got `%s`", jsonObj.get("departments").toString()));
          }

          // validate the optional field `departments` (array)
          for (int i = 0; i < jsonArraydepartments.size(); i++) {
            Department.validateJsonElement(jsonArraydepartments.get(i));
          };
        }
      }
      if (jsonObj.get("enrollmentAccounts") != null && !jsonObj.get("enrollmentAccounts").isJsonNull()) {
        JsonArray jsonArrayenrollmentAccounts = jsonObj.getAsJsonArray("enrollmentAccounts");
        if (jsonArrayenrollmentAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enrollmentAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enrollmentAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("enrollmentAccounts").toString()));
          }

          // validate the optional field `enrollmentAccounts` (array)
          for (int i = 0; i < jsonArrayenrollmentAccounts.size(); i++) {
            EnrollmentAccount.validateJsonElement(jsonArrayenrollmentAccounts.get(i));
          };
        }
      }
      // validate the optional field `enrollmentDetails`
      if (jsonObj.get("enrollmentDetails") != null && !jsonObj.get("enrollmentDetails").isJsonNull()) {
        Enrollment.validateJsonElement(jsonObj.get("enrollmentDetails"));
      }
      if (jsonObj.get("invoiceSections") != null && !jsonObj.get("invoiceSections").isJsonNull()) {
        JsonArray jsonArrayinvoiceSections = jsonObj.getAsJsonArray("invoiceSections");
        if (jsonArrayinvoiceSections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invoiceSections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invoiceSections` to be an array in the JSON string but got `%s`", jsonObj.get("invoiceSections").toString()));
          }

          // validate the optional field `invoiceSections` (array)
          for (int i = 0; i < jsonArrayinvoiceSections.size(); i++) {
            InvoiceSection.validateJsonElement(jsonArrayinvoiceSections.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingAccountProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingAccountProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingAccountProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingAccountProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingAccountProperties>() {
           @Override
           public void write(JsonWriter out, BillingAccountProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingAccountProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingAccountProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingAccountProperties
   * @throws IOException if the JSON string is invalid with respect to BillingAccountProperties
   */
  public static BillingAccountProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingAccountProperties.class);
  }

  /**
   * Convert an instance of BillingAccountProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

