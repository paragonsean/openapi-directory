/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the billing profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:14.397029-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillingProfileProperties {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_BILLING_CONTACT = "billingContact";
  @SerializedName(SERIALIZED_NAME_BILLING_CONTACT)
  private String billingContact;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL_INVOICE = "emailInvoice";
  @SerializedName(SERIALIZED_NAME_EMAIL_INVOICE)
  private Boolean emailInvoice;

  public static final String SERIALIZED_NAME_INVOICE_DAY = "invoiceDay";
  @SerializedName(SERIALIZED_NAME_INVOICE_DAY)
  private Integer invoiceDay;

  public static final String SERIALIZED_NAME_PO_NUMBER = "poNumber";
  @SerializedName(SERIALIZED_NAME_PO_NUMBER)
  private String poNumber;

  public BillingProfileProperties() {
  }

  public BillingProfileProperties(
     String billingContact, 
     String currency, 
     Boolean emailInvoice, 
     Integer invoiceDay
  ) {
    this();
    this.billingContact = billingContact;
    this.currency = currency;
    this.emailInvoice = emailInvoice;
    this.invoiceDay = invoiceDay;
  }

  public BillingProfileProperties billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  /**
   * Billing contact.
   * @return billingContact
   */
  @javax.annotation.Nullable
  public String getBillingContact() {
    return billingContact;
  }



  /**
   * Currency on the billing profile.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }



  public BillingProfileProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The billing profile name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Email invoice.
   * @return emailInvoice
   */
  @javax.annotation.Nullable
  public Boolean getEmailInvoice() {
    return emailInvoice;
  }



  /**
   * Invoice day.
   * @return invoiceDay
   */
  @javax.annotation.Nullable
  public Integer getInvoiceDay() {
    return invoiceDay;
  }



  public BillingProfileProperties poNumber(String poNumber) {
    this.poNumber = poNumber;
    return this;
  }

  /**
   * Purchase order number.
   * @return poNumber
   */
  @javax.annotation.Nullable
  public String getPoNumber() {
    return poNumber;
  }

  public void setPoNumber(String poNumber) {
    this.poNumber = poNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingProfileProperties billingProfileProperties = (BillingProfileProperties) o;
    return Objects.equals(this.billingAddress, billingProfileProperties.billingAddress) &&
        Objects.equals(this.billingContact, billingProfileProperties.billingContact) &&
        Objects.equals(this.currency, billingProfileProperties.currency) &&
        Objects.equals(this.displayName, billingProfileProperties.displayName) &&
        Objects.equals(this.emailInvoice, billingProfileProperties.emailInvoice) &&
        Objects.equals(this.invoiceDay, billingProfileProperties.invoiceDay) &&
        Objects.equals(this.poNumber, billingProfileProperties.poNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddress, billingContact, currency, displayName, emailInvoice, invoiceDay, poNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingProfileProperties {\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    billingContact: ").append(toIndentedString(billingContact)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    emailInvoice: ").append(toIndentedString(emailInvoice)).append("\n");
    sb.append("    invoiceDay: ").append(toIndentedString(invoiceDay)).append("\n");
    sb.append("    poNumber: ").append(toIndentedString(poNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingAddress");
    openapiFields.add("billingContact");
    openapiFields.add("currency");
    openapiFields.add("displayName");
    openapiFields.add("emailInvoice");
    openapiFields.add("invoiceDay");
    openapiFields.add("poNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingProfileProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingProfileProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingProfileProperties is not found in the empty JSON string", BillingProfileProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingProfileProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingProfileProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingAddress`
      if (jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("billingAddress"));
      }
      if ((jsonObj.get("billingContact") != null && !jsonObj.get("billingContact").isJsonNull()) && !jsonObj.get("billingContact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingContact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingContact").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("poNumber") != null && !jsonObj.get("poNumber").isJsonNull()) && !jsonObj.get("poNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingProfileProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingProfileProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingProfileProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingProfileProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingProfileProperties>() {
           @Override
           public void write(JsonWriter out, BillingProfileProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingProfileProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingProfileProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingProfileProperties
   * @throws IOException if the JSON string is invalid with respect to BillingProfileProperties
   */
  public static BillingProfileProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingProfileProperties.class);
  }

  /**
   * Convert an instance of BillingProfileProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

