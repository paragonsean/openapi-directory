/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The EventProperties model module.
 * @module model/EventProperties
 * @version 2018-11-01-preview
 */
class EventProperties {
    /**
     * Constructs a new <code>EventProperties</code>.
     * The event properties.
     * @alias module:model/EventProperties
     */
    constructor() { 
        
        EventProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventProperties} obj Optional instance to populate.
     * @return {module:model/EventProperties} The populated <code>EventProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventProperties();

            if (data.hasOwnProperty('adjustments')) {
                obj['adjustments'] = Amount.constructFromObject(data['adjustments']);
            }
            if (data.hasOwnProperty('charges')) {
                obj['charges'] = Amount.constructFromObject(data['charges']);
            }
            if (data.hasOwnProperty('closedBalance')) {
                obj['closedBalance'] = Amount.constructFromObject(data['closedBalance']);
            }
            if (data.hasOwnProperty('creditExpired')) {
                obj['creditExpired'] = Amount.constructFromObject(data['creditExpired']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('invoiceNumber')) {
                obj['invoiceNumber'] = ApiClient.convertToType(data['invoiceNumber'], 'String');
            }
            if (data.hasOwnProperty('newCredit')) {
                obj['newCredit'] = Amount.constructFromObject(data['newCredit']);
            }
            if (data.hasOwnProperty('transactionDate')) {
                obj['transactionDate'] = ApiClient.convertToType(data['transactionDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `adjustments`
        if (data['adjustments']) { // data not null
          Amount.validateJSON(data['adjustments']);
        }
        // validate the optional field `charges`
        if (data['charges']) { // data not null
          Amount.validateJSON(data['charges']);
        }
        // validate the optional field `closedBalance`
        if (data['closedBalance']) { // data not null
          Amount.validateJSON(data['closedBalance']);
        }
        // validate the optional field `creditExpired`
        if (data['creditExpired']) { // data not null
          Amount.validateJSON(data['creditExpired']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['invoiceNumber'] && !(typeof data['invoiceNumber'] === 'string' || data['invoiceNumber'] instanceof String)) {
            throw new Error("Expected the field `invoiceNumber` to be a primitive type in the JSON string but got " + data['invoiceNumber']);
        }
        // validate the optional field `newCredit`
        if (data['newCredit']) { // data not null
          Amount.validateJSON(data['newCredit']);
        }

        return true;
    }


}



/**
 * @member {module:model/Amount} adjustments
 */
EventProperties.prototype['adjustments'] = undefined;

/**
 * @member {module:model/Amount} charges
 */
EventProperties.prototype['charges'] = undefined;

/**
 * @member {module:model/Amount} closedBalance
 */
EventProperties.prototype['closedBalance'] = undefined;

/**
 * @member {module:model/Amount} creditExpired
 */
EventProperties.prototype['creditExpired'] = undefined;

/**
 * Transaction description.
 * @member {String} description
 */
EventProperties.prototype['description'] = undefined;

/**
 * The type of event.
 * @member {module:model/EventProperties.EventTypeEnum} eventType
 */
EventProperties.prototype['eventType'] = undefined;

/**
 * Invoice Number.
 * @member {String} invoiceNumber
 */
EventProperties.prototype['invoiceNumber'] = undefined;

/**
 * @member {module:model/Amount} newCredit
 */
EventProperties.prototype['newCredit'] = undefined;

/**
 * Transaction Date.
 * @member {Date} transactionDate
 */
EventProperties.prototype['transactionDate'] = undefined;





/**
 * Allowed values for the <code>eventType</code> property.
 * @enum {String}
 * @readonly
 */
EventProperties['EventTypeEnum'] = {

    /**
     * value: "NewCredit"
     * @const
     */
    "NewCredit": "NewCredit",

    /**
     * value: "ExpiredCredit"
     * @const
     */
    "ExpiredCredit": "ExpiredCredit",

    /**
     * value: "SettledCharges"
     * @const
     */
    "SettledCharges": "SettledCharges"
};



export default EventProperties;

