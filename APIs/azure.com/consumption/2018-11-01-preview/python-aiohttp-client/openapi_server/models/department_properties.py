# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enrollment_account import EnrollmentAccount
from openapi_server import util


class DepartmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_center: str=None, department_name: str=None, enrollment_accounts: List[EnrollmentAccount]=None, status: str=None):
        """DepartmentProperties - a model defined in OpenAPI

        :param cost_center: The cost_center of this DepartmentProperties.
        :param department_name: The department_name of this DepartmentProperties.
        :param enrollment_accounts: The enrollment_accounts of this DepartmentProperties.
        :param status: The status of this DepartmentProperties.
        """
        self.openapi_types = {
            'cost_center': str,
            'department_name': str,
            'enrollment_accounts': List[EnrollmentAccount],
            'status': str
        }

        self.attribute_map = {
            'cost_center': 'costCenter',
            'department_name': 'departmentName',
            'enrollment_accounts': 'enrollmentAccounts',
            'status': 'status'
        }

        self._cost_center = cost_center
        self._department_name = department_name
        self._enrollment_accounts = enrollment_accounts
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DepartmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DepartmentProperties of this DepartmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_center(self):
        """Gets the cost_center of this DepartmentProperties.

        The cost center name.

        :return: The cost_center of this DepartmentProperties.
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this DepartmentProperties.

        The cost center name.

        :param cost_center: The cost_center of this DepartmentProperties.
        :type cost_center: str
        """

        self._cost_center = cost_center

    @property
    def department_name(self):
        """Gets the department_name of this DepartmentProperties.

        The name for department.

        :return: The department_name of this DepartmentProperties.
        :rtype: str
        """
        return self._department_name

    @department_name.setter
    def department_name(self, department_name):
        """Sets the department_name of this DepartmentProperties.

        The name for department.

        :param department_name: The department_name of this DepartmentProperties.
        :type department_name: str
        """

        self._department_name = department_name

    @property
    def enrollment_accounts(self):
        """Gets the enrollment_accounts of this DepartmentProperties.

        Associated enrollment accounts. By default this is not populated, unless it's specified in $expand.

        :return: The enrollment_accounts of this DepartmentProperties.
        :rtype: List[EnrollmentAccount]
        """
        return self._enrollment_accounts

    @enrollment_accounts.setter
    def enrollment_accounts(self, enrollment_accounts):
        """Sets the enrollment_accounts of this DepartmentProperties.

        Associated enrollment accounts. By default this is not populated, unless it's specified in $expand.

        :param enrollment_accounts: The enrollment_accounts of this DepartmentProperties.
        :type enrollment_accounts: List[EnrollmentAccount]
        """

        self._enrollment_accounts = enrollment_accounts

    @property
    def status(self):
        """Gets the status of this DepartmentProperties.

        The status for department.

        :return: The status of this DepartmentProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DepartmentProperties.

        The status for department.

        :param status: The status of this DepartmentProperties.
        :type status: str
        """

        self._status = status
