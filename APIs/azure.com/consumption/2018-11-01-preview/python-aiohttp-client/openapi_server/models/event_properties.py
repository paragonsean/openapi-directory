# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class EventProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustments: Amount=None, charges: Amount=None, closed_balance: Amount=None, credit_expired: Amount=None, description: str=None, event_type: str=None, invoice_number: str=None, new_credit: Amount=None, transaction_date: datetime=None):
        """EventProperties - a model defined in OpenAPI

        :param adjustments: The adjustments of this EventProperties.
        :param charges: The charges of this EventProperties.
        :param closed_balance: The closed_balance of this EventProperties.
        :param credit_expired: The credit_expired of this EventProperties.
        :param description: The description of this EventProperties.
        :param event_type: The event_type of this EventProperties.
        :param invoice_number: The invoice_number of this EventProperties.
        :param new_credit: The new_credit of this EventProperties.
        :param transaction_date: The transaction_date of this EventProperties.
        """
        self.openapi_types = {
            'adjustments': Amount,
            'charges': Amount,
            'closed_balance': Amount,
            'credit_expired': Amount,
            'description': str,
            'event_type': str,
            'invoice_number': str,
            'new_credit': Amount,
            'transaction_date': datetime
        }

        self.attribute_map = {
            'adjustments': 'adjustments',
            'charges': 'charges',
            'closed_balance': 'closedBalance',
            'credit_expired': 'creditExpired',
            'description': 'description',
            'event_type': 'eventType',
            'invoice_number': 'invoiceNumber',
            'new_credit': 'newCredit',
            'transaction_date': 'transactionDate'
        }

        self._adjustments = adjustments
        self._charges = charges
        self._closed_balance = closed_balance
        self._credit_expired = credit_expired
        self._description = description
        self._event_type = event_type
        self._invoice_number = invoice_number
        self._new_credit = new_credit
        self._transaction_date = transaction_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventProperties of this EventProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustments(self):
        """Gets the adjustments of this EventProperties.


        :return: The adjustments of this EventProperties.
        :rtype: Amount
        """
        return self._adjustments

    @adjustments.setter
    def adjustments(self, adjustments):
        """Sets the adjustments of this EventProperties.


        :param adjustments: The adjustments of this EventProperties.
        :type adjustments: Amount
        """

        self._adjustments = adjustments

    @property
    def charges(self):
        """Gets the charges of this EventProperties.


        :return: The charges of this EventProperties.
        :rtype: Amount
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this EventProperties.


        :param charges: The charges of this EventProperties.
        :type charges: Amount
        """

        self._charges = charges

    @property
    def closed_balance(self):
        """Gets the closed_balance of this EventProperties.


        :return: The closed_balance of this EventProperties.
        :rtype: Amount
        """
        return self._closed_balance

    @closed_balance.setter
    def closed_balance(self, closed_balance):
        """Sets the closed_balance of this EventProperties.


        :param closed_balance: The closed_balance of this EventProperties.
        :type closed_balance: Amount
        """

        self._closed_balance = closed_balance

    @property
    def credit_expired(self):
        """Gets the credit_expired of this EventProperties.


        :return: The credit_expired of this EventProperties.
        :rtype: Amount
        """
        return self._credit_expired

    @credit_expired.setter
    def credit_expired(self, credit_expired):
        """Sets the credit_expired of this EventProperties.


        :param credit_expired: The credit_expired of this EventProperties.
        :type credit_expired: Amount
        """

        self._credit_expired = credit_expired

    @property
    def description(self):
        """Gets the description of this EventProperties.

        Transaction description.

        :return: The description of this EventProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventProperties.

        Transaction description.

        :param description: The description of this EventProperties.
        :type description: str
        """

        self._description = description

    @property
    def event_type(self):
        """Gets the event_type of this EventProperties.

        The type of event.

        :return: The event_type of this EventProperties.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventProperties.

        The type of event.

        :param event_type: The event_type of this EventProperties.
        :type event_type: str
        """
        allowed_values = ["NewCredit", "ExpiredCredit", "SettledCharges"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def invoice_number(self):
        """Gets the invoice_number of this EventProperties.

        Invoice Number.

        :return: The invoice_number of this EventProperties.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this EventProperties.

        Invoice Number.

        :param invoice_number: The invoice_number of this EventProperties.
        :type invoice_number: str
        """

        self._invoice_number = invoice_number

    @property
    def new_credit(self):
        """Gets the new_credit of this EventProperties.


        :return: The new_credit of this EventProperties.
        :rtype: Amount
        """
        return self._new_credit

    @new_credit.setter
    def new_credit(self, new_credit):
        """Sets the new_credit of this EventProperties.


        :param new_credit: The new_credit of this EventProperties.
        :type new_credit: Amount
        """

        self._new_credit = new_credit

    @property
    def transaction_date(self):
        """Gets the transaction_date of this EventProperties.

        Transaction Date.

        :return: The transaction_date of this EventProperties.
        :rtype: datetime
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this EventProperties.

        Transaction Date.

        :param transaction_date: The transaction_date of this EventProperties.
        :type transaction_date: datetime
        """

        self._transaction_date = transaction_date
