/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2017-11-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the reservation summaries.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:48.491737-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationSummariesProperties {
  public static final String SERIALIZED_NAME_AVG_UTILIZATION_PERCENTAGE = "avgUtilizationPercentage";
  @SerializedName(SERIALIZED_NAME_AVG_UTILIZATION_PERCENTAGE)
  private BigDecimal avgUtilizationPercentage;

  public static final String SERIALIZED_NAME_MAX_UTILIZATION_PERCENTAGE = "maxUtilizationPercentage";
  @SerializedName(SERIALIZED_NAME_MAX_UTILIZATION_PERCENTAGE)
  private BigDecimal maxUtilizationPercentage;

  public static final String SERIALIZED_NAME_MIN_UTILIZATION_PERCENTAGE = "minUtilizationPercentage";
  @SerializedName(SERIALIZED_NAME_MIN_UTILIZATION_PERCENTAGE)
  private BigDecimal minUtilizationPercentage;

  public static final String SERIALIZED_NAME_RESERVATION_ID = "reservationId";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ID)
  private String reservationId;

  public static final String SERIALIZED_NAME_RESERVATION_ORDER_ID = "reservationOrderId";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ORDER_ID)
  private String reservationOrderId;

  public static final String SERIALIZED_NAME_RESERVED_HOURS = "reservedHours";
  @SerializedName(SERIALIZED_NAME_RESERVED_HOURS)
  private BigDecimal reservedHours;

  public static final String SERIALIZED_NAME_SKU_NAME = "skuName";
  @SerializedName(SERIALIZED_NAME_SKU_NAME)
  private String skuName;

  public static final String SERIALIZED_NAME_USAGE_DATE = "usageDate";
  @SerializedName(SERIALIZED_NAME_USAGE_DATE)
  private OffsetDateTime usageDate;

  public static final String SERIALIZED_NAME_USED_HOURS = "usedHours";
  @SerializedName(SERIALIZED_NAME_USED_HOURS)
  private BigDecimal usedHours;

  public ReservationSummariesProperties() {
  }

  public ReservationSummariesProperties(
     BigDecimal avgUtilizationPercentage, 
     BigDecimal maxUtilizationPercentage, 
     BigDecimal minUtilizationPercentage, 
     String reservationId, 
     String reservationOrderId, 
     BigDecimal reservedHours, 
     String skuName, 
     OffsetDateTime usageDate, 
     BigDecimal usedHours
  ) {
    this();
    this.avgUtilizationPercentage = avgUtilizationPercentage;
    this.maxUtilizationPercentage = maxUtilizationPercentage;
    this.minUtilizationPercentage = minUtilizationPercentage;
    this.reservationId = reservationId;
    this.reservationOrderId = reservationOrderId;
    this.reservedHours = reservedHours;
    this.skuName = skuName;
    this.usageDate = usageDate;
    this.usedHours = usedHours;
  }

  /**
   * This is average utilization for the entire time range. (day or month depending on the grain)
   * @return avgUtilizationPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getAvgUtilizationPercentage() {
    return avgUtilizationPercentage;
  }



  /**
   * This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100% for that day.
   * @return maxUtilizationPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxUtilizationPercentage() {
    return maxUtilizationPercentage;
  }



  /**
   * This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10% for that day
   * @return minUtilizationPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getMinUtilizationPercentage() {
    return minUtilizationPercentage;
  }



  /**
   * The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping for applying the benefit scope and also specifies the number of instances to which the reservation benefit can be applied to.
   * @return reservationId
   */
  @javax.annotation.Nullable
  public String getReservationId() {
    return reservationId;
  }



  /**
   * The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents a single purchase transaction. A reservation order contains reservations. The reservation order specifies the VM size and region for the reservations.
   * @return reservationOrderId
   */
  @javax.annotation.Nullable
  public String getReservationOrderId() {
    return reservationOrderId;
  }



  /**
   * This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours for that day and 24 hours from subsequent days
   * @return reservedHours
   */
  @javax.annotation.Nullable
  public BigDecimal getReservedHours() {
    return reservedHours;
  }



  /**
   * This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
   * @return skuName
   */
  @javax.annotation.Nullable
  public String getSkuName() {
    return skuName;
  }



  /**
   * Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.
   * @return usageDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageDate() {
    return usageDate;
  }



  /**
   * Total used hours by the reservation
   * @return usedHours
   */
  @javax.annotation.Nullable
  public BigDecimal getUsedHours() {
    return usedHours;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationSummariesProperties reservationSummariesProperties = (ReservationSummariesProperties) o;
    return Objects.equals(this.avgUtilizationPercentage, reservationSummariesProperties.avgUtilizationPercentage) &&
        Objects.equals(this.maxUtilizationPercentage, reservationSummariesProperties.maxUtilizationPercentage) &&
        Objects.equals(this.minUtilizationPercentage, reservationSummariesProperties.minUtilizationPercentage) &&
        Objects.equals(this.reservationId, reservationSummariesProperties.reservationId) &&
        Objects.equals(this.reservationOrderId, reservationSummariesProperties.reservationOrderId) &&
        Objects.equals(this.reservedHours, reservationSummariesProperties.reservedHours) &&
        Objects.equals(this.skuName, reservationSummariesProperties.skuName) &&
        Objects.equals(this.usageDate, reservationSummariesProperties.usageDate) &&
        Objects.equals(this.usedHours, reservationSummariesProperties.usedHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgUtilizationPercentage, maxUtilizationPercentage, minUtilizationPercentage, reservationId, reservationOrderId, reservedHours, skuName, usageDate, usedHours);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationSummariesProperties {\n");
    sb.append("    avgUtilizationPercentage: ").append(toIndentedString(avgUtilizationPercentage)).append("\n");
    sb.append("    maxUtilizationPercentage: ").append(toIndentedString(maxUtilizationPercentage)).append("\n");
    sb.append("    minUtilizationPercentage: ").append(toIndentedString(minUtilizationPercentage)).append("\n");
    sb.append("    reservationId: ").append(toIndentedString(reservationId)).append("\n");
    sb.append("    reservationOrderId: ").append(toIndentedString(reservationOrderId)).append("\n");
    sb.append("    reservedHours: ").append(toIndentedString(reservedHours)).append("\n");
    sb.append("    skuName: ").append(toIndentedString(skuName)).append("\n");
    sb.append("    usageDate: ").append(toIndentedString(usageDate)).append("\n");
    sb.append("    usedHours: ").append(toIndentedString(usedHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avgUtilizationPercentage");
    openapiFields.add("maxUtilizationPercentage");
    openapiFields.add("minUtilizationPercentage");
    openapiFields.add("reservationId");
    openapiFields.add("reservationOrderId");
    openapiFields.add("reservedHours");
    openapiFields.add("skuName");
    openapiFields.add("usageDate");
    openapiFields.add("usedHours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationSummariesProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationSummariesProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationSummariesProperties is not found in the empty JSON string", ReservationSummariesProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationSummariesProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationSummariesProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reservationId") != null && !jsonObj.get("reservationId").isJsonNull()) && !jsonObj.get("reservationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationId").toString()));
      }
      if ((jsonObj.get("reservationOrderId") != null && !jsonObj.get("reservationOrderId").isJsonNull()) && !jsonObj.get("reservationOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationOrderId").toString()));
      }
      if ((jsonObj.get("skuName") != null && !jsonObj.get("skuName").isJsonNull()) && !jsonObj.get("skuName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationSummariesProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationSummariesProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationSummariesProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationSummariesProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationSummariesProperties>() {
           @Override
           public void write(JsonWriter out, ReservationSummariesProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationSummariesProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationSummariesProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationSummariesProperties
   * @throws IOException if the JSON string is invalid with respect to ReservationSummariesProperties
   */
  public static ReservationSummariesProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationSummariesProperties.class);
  }

  /**
   * Convert an instance of ReservationSummariesProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

