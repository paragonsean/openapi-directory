/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2017-11-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MeterDetails model module.
 * @module model/MeterDetails
 * @version 2017-11-30
 */
class MeterDetails {
    /**
     * Constructs a new <code>MeterDetails</code>.
     * The properties of the meter detail.
     * @alias module:model/MeterDetails
     */
    constructor() { 
        
        MeterDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MeterDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeterDetails} obj Optional instance to populate.
     * @return {module:model/MeterDetails} The populated <code>MeterDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeterDetails();

            if (data.hasOwnProperty('meterCategory')) {
                obj['meterCategory'] = ApiClient.convertToType(data['meterCategory'], 'String');
            }
            if (data.hasOwnProperty('meterLocation')) {
                obj['meterLocation'] = ApiClient.convertToType(data['meterLocation'], 'String');
            }
            if (data.hasOwnProperty('meterName')) {
                obj['meterName'] = ApiClient.convertToType(data['meterName'], 'String');
            }
            if (data.hasOwnProperty('meterSubCategory')) {
                obj['meterSubCategory'] = ApiClient.convertToType(data['meterSubCategory'], 'String');
            }
            if (data.hasOwnProperty('pretaxStandardRate')) {
                obj['pretaxStandardRate'] = ApiClient.convertToType(data['pretaxStandardRate'], 'Number');
            }
            if (data.hasOwnProperty('totalIncludedQuantity')) {
                obj['totalIncludedQuantity'] = ApiClient.convertToType(data['totalIncludedQuantity'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeterDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeterDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['meterCategory'] && !(typeof data['meterCategory'] === 'string' || data['meterCategory'] instanceof String)) {
            throw new Error("Expected the field `meterCategory` to be a primitive type in the JSON string but got " + data['meterCategory']);
        }
        // ensure the json data is a string
        if (data['meterLocation'] && !(typeof data['meterLocation'] === 'string' || data['meterLocation'] instanceof String)) {
            throw new Error("Expected the field `meterLocation` to be a primitive type in the JSON string but got " + data['meterLocation']);
        }
        // ensure the json data is a string
        if (data['meterName'] && !(typeof data['meterName'] === 'string' || data['meterName'] instanceof String)) {
            throw new Error("Expected the field `meterName` to be a primitive type in the JSON string but got " + data['meterName']);
        }
        // ensure the json data is a string
        if (data['meterSubCategory'] && !(typeof data['meterSubCategory'] === 'string' || data['meterSubCategory'] instanceof String)) {
            throw new Error("Expected the field `meterSubCategory` to be a primitive type in the JSON string but got " + data['meterSubCategory']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * The category of the meter, for example, 'Cloud services', 'Networking', etc..
 * @member {String} meterCategory
 */
MeterDetails.prototype['meterCategory'] = undefined;

/**
 * The location in which the Azure service is available.
 * @member {String} meterLocation
 */
MeterDetails.prototype['meterLocation'] = undefined;

/**
 * The name of the meter, within the given meter category
 * @member {String} meterName
 */
MeterDetails.prototype['meterName'] = undefined;

/**
 * The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
 * @member {String} meterSubCategory
 */
MeterDetails.prototype['meterSubCategory'] = undefined;

/**
 * The pretax listing price.
 * @member {Number} pretaxStandardRate
 */
MeterDetails.prototype['pretaxStandardRate'] = undefined;

/**
 * The total included quantity associated with the offer.
 * @member {Number} totalIncludedQuantity
 */
MeterDetails.prototype['totalIncludedQuantity'] = undefined;

/**
 * The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
 * @member {String} unit
 */
MeterDetails.prototype['unit'] = undefined;






export default MeterDetails;

