/**
 * FeatureClient
 * Azure Feature Exposure Control (AFEC) provides a mechanism for the resource providers to control feature exposure to users. Resource providers typically use this mechanism to provide public/private preview for new features prior to making them generally available. Users need to explicitly register for AFEC features to get access to such functionality.
 *
 * The version of the OpenAPI document: 2015-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFeaturesApi_H
#define OAI_OAIFeaturesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFeatureOperationsListResult.h"
#include "OAIFeatureResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFeaturesApi : public QObject {
    Q_OBJECT

public:
    OAIFeaturesApi(const int timeOut = 0);
    ~OAIFeaturesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void featuresGet(const QString &resource_provider_namespace, const QString &feature_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void featuresList(const QString &resource_provider_namespace, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void featuresListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void featuresRegister(const QString &resource_provider_namespace, const QString &feature_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void featuresGetCallback(OAIHttpRequestWorker *worker);
    void featuresListCallback(OAIHttpRequestWorker *worker);
    void featuresListAllCallback(OAIHttpRequestWorker *worker);
    void featuresRegisterCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void featuresGetSignal(OAIFeatureResult summary);
    void featuresListSignal(OAIFeatureOperationsListResult summary);
    void featuresListAllSignal(OAIFeatureOperationsListResult summary);
    void featuresRegisterSignal(OAIFeatureResult summary);


    void featuresGetSignalFull(OAIHttpRequestWorker *worker, OAIFeatureResult summary);
    void featuresListSignalFull(OAIHttpRequestWorker *worker, OAIFeatureOperationsListResult summary);
    void featuresListAllSignalFull(OAIHttpRequestWorker *worker, OAIFeatureOperationsListResult summary);
    void featuresRegisterSignalFull(OAIHttpRequestWorker *worker, OAIFeatureResult summary);

    Q_DECL_DEPRECATED_X("Use featuresGetSignalError() instead")
    void featuresGetSignalE(OAIFeatureResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresGetSignalError(OAIFeatureResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresListSignalError() instead")
    void featuresListSignalE(OAIFeatureOperationsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresListSignalError(OAIFeatureOperationsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresListAllSignalError() instead")
    void featuresListAllSignalE(OAIFeatureOperationsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresListAllSignalError(OAIFeatureOperationsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresRegisterSignalError() instead")
    void featuresRegisterSignalE(OAIFeatureResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresRegisterSignalError(OAIFeatureResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use featuresGetSignalErrorFull() instead")
    void featuresGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresListSignalErrorFull() instead")
    void featuresListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresListAllSignalErrorFull() instead")
    void featuresListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use featuresRegisterSignalErrorFull() instead")
    void featuresRegisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void featuresRegisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
