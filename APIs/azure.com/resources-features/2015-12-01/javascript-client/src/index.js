/**
 * FeatureClient
 * Azure Feature Exposure Control (AFEC) provides a mechanism for the resource providers to control feature exposure to users. Resource providers typically use this mechanism to provide public/private preview for new features prior to making them generally available. Users need to explicitly register for AFEC features to get access to such functionality.
 *
 * The version of the OpenAPI document: 2015-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import FeatureOperationsListResult from './model/FeatureOperationsListResult';
import FeatureProperties from './model/FeatureProperties';
import FeatureResult from './model/FeatureResult';
import Operation from './model/Operation';
import OperationDisplay from './model/OperationDisplay';
import OperationListResult from './model/OperationListResult';
import FeaturesApi from './api/FeaturesApi';
import OperationsApi from './api/OperationsApi';


/**
* Azure Feature Exposure Control (AFEC) provides a mechanism for the resource providers to control feature exposure to users. Resource providers typically use this mechanism to provide public/private preview for new features prior to making them generally available. Users need to explicitly register for AFEC features to get access to such functionality..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FeatureClient = require('index'); // See note below*.
* var xxxSvc = new FeatureClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FeatureClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FeatureClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FeatureClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2015-12-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The FeatureOperationsListResult model constructor.
     * @property {module:model/FeatureOperationsListResult}
     */
    FeatureOperationsListResult,

    /**
     * The FeatureProperties model constructor.
     * @property {module:model/FeatureProperties}
     */
    FeatureProperties,

    /**
     * The FeatureResult model constructor.
     * @property {module:model/FeatureResult}
     */
    FeatureResult,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The OperationDisplay model constructor.
     * @property {module:model/OperationDisplay}
     */
    OperationDisplay,

    /**
     * The OperationListResult model constructor.
     * @property {module:model/OperationListResult}
     */
    OperationListResult,

    /**
    * The FeaturesApi service constructor.
    * @property {module:api/FeaturesApi}
    */
    FeaturesApi,

    /**
    * The OperationsApi service constructor.
    * @property {module:api/OperationsApi}
    */
    OperationsApi
};
