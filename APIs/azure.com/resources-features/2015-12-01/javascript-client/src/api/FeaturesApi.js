/**
 * FeatureClient
 * Azure Feature Exposure Control (AFEC) provides a mechanism for the resource providers to control feature exposure to users. Resource providers typically use this mechanism to provide public/private preview for new features prior to making them generally available. Users need to explicitly register for AFEC features to get access to such functionality.
 *
 * The version of the OpenAPI document: 2015-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FeatureOperationsListResult from '../model/FeatureOperationsListResult';
import FeatureResult from '../model/FeatureResult';

/**
* Features service.
* @module api/FeaturesApi
* @version 2015-12-01
*/
export default class FeaturesApi {

    /**
    * Constructs a new FeaturesApi. 
    * @alias module:api/FeaturesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the featuresGet operation.
     * @callback module:api/FeaturesApi~featuresGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the preview feature with the specified name.
     * @param {String} resourceProviderNamespace The resource provider namespace for the feature.
     * @param {String} featureName The name of the feature to get.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/FeaturesApi~featuresGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureResult}
     */
    featuresGet(resourceProviderNamespace, featureName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling featuresGet");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling featuresGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling featuresGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling featuresGet");
      }

      let pathParams = {
        'resourceProviderNamespace': resourceProviderNamespace,
        'featureName': featureName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = FeatureResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresList operation.
     * @callback module:api/FeaturesApi~featuresListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureOperationsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the preview features in a provider namespace that are available through AFEC for the subscription.
     * @param {String} resourceProviderNamespace The namespace of the resource provider for getting features.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/FeaturesApi~featuresListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureOperationsListResult}
     */
    featuresList(resourceProviderNamespace, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling featuresList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling featuresList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling featuresList");
      }

      let pathParams = {
        'resourceProviderNamespace': resourceProviderNamespace,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = FeatureOperationsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresListAll operation.
     * @callback module:api/FeaturesApi~featuresListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureOperationsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the preview features that are available through AFEC for the subscription.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/FeaturesApi~featuresListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureOperationsListResult}
     */
    featuresListAll(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling featuresListAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling featuresListAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = FeatureOperationsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Features/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the featuresRegister operation.
     * @callback module:api/FeaturesApi~featuresRegisterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers the preview feature for the subscription.
     * @param {String} resourceProviderNamespace The namespace of the resource provider.
     * @param {String} featureName The name of the feature to register.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/FeaturesApi~featuresRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureResult}
     */
    featuresRegister(resourceProviderNamespace, featureName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling featuresRegister");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling featuresRegister");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling featuresRegister");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling featuresRegister");
      }

      let pathParams = {
        'resourceProviderNamespace': resourceProviderNamespace,
        'featureName': featureName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = FeatureResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
