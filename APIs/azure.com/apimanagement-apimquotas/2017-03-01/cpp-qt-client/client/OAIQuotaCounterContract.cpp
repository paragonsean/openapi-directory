/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Quota entity associated with your Azure API Management deployment. To configure call rate limit and quota policies refer to [how to configure call rate limit and quota](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-product-with-rules#a-namepolicies-ato-configure-call-rate-limit-and-quota-policies).
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaCounterContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaCounterContract::OAIQuotaCounterContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaCounterContract::OAIQuotaCounterContract() {
    this->initializeModel();
}

OAIQuotaCounterContract::~OAIQuotaCounterContract() {}

void OAIQuotaCounterContract::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_counter_key_isSet = false;
    m_counter_key_isValid = false;

    m_period_end_time_isSet = false;
    m_period_end_time_isValid = false;

    m_period_key_isSet = false;
    m_period_key_isValid = false;

    m_period_start_time_isSet = false;
    m_period_start_time_isValid = false;
}

void OAIQuotaCounterContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaCounterContract::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_counter_key_isValid = ::OpenAPI::fromJsonValue(m_counter_key, json[QString("counterKey")]);
    m_counter_key_isSet = !json[QString("counterKey")].isNull() && m_counter_key_isValid;

    m_period_end_time_isValid = ::OpenAPI::fromJsonValue(m_period_end_time, json[QString("periodEndTime")]);
    m_period_end_time_isSet = !json[QString("periodEndTime")].isNull() && m_period_end_time_isValid;

    m_period_key_isValid = ::OpenAPI::fromJsonValue(m_period_key, json[QString("periodKey")]);
    m_period_key_isSet = !json[QString("periodKey")].isNull() && m_period_key_isValid;

    m_period_start_time_isValid = ::OpenAPI::fromJsonValue(m_period_start_time, json[QString("periodStartTime")]);
    m_period_start_time_isSet = !json[QString("periodStartTime")].isNull() && m_period_start_time_isValid;
}

QString OAIQuotaCounterContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaCounterContract::asJsonObject() const {
    QJsonObject obj;
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_counter_key_isSet) {
        obj.insert(QString("counterKey"), ::OpenAPI::toJsonValue(m_counter_key));
    }
    if (m_period_end_time_isSet) {
        obj.insert(QString("periodEndTime"), ::OpenAPI::toJsonValue(m_period_end_time));
    }
    if (m_period_key_isSet) {
        obj.insert(QString("periodKey"), ::OpenAPI::toJsonValue(m_period_key));
    }
    if (m_period_start_time_isSet) {
        obj.insert(QString("periodStartTime"), ::OpenAPI::toJsonValue(m_period_start_time));
    }
    return obj;
}

OAIQuotaCounterValueContractProperties OAIQuotaCounterContract::getValue() const {
    return m_value;
}
void OAIQuotaCounterContract::setValue(const OAIQuotaCounterValueContractProperties &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIQuotaCounterContract::is_value_Set() const{
    return m_value_isSet;
}

bool OAIQuotaCounterContract::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIQuotaCounterContract::getCounterKey() const {
    return m_counter_key;
}
void OAIQuotaCounterContract::setCounterKey(const QString &counter_key) {
    m_counter_key = counter_key;
    m_counter_key_isSet = true;
}

bool OAIQuotaCounterContract::is_counter_key_Set() const{
    return m_counter_key_isSet;
}

bool OAIQuotaCounterContract::is_counter_key_Valid() const{
    return m_counter_key_isValid;
}

QDateTime OAIQuotaCounterContract::getPeriodEndTime() const {
    return m_period_end_time;
}
void OAIQuotaCounterContract::setPeriodEndTime(const QDateTime &period_end_time) {
    m_period_end_time = period_end_time;
    m_period_end_time_isSet = true;
}

bool OAIQuotaCounterContract::is_period_end_time_Set() const{
    return m_period_end_time_isSet;
}

bool OAIQuotaCounterContract::is_period_end_time_Valid() const{
    return m_period_end_time_isValid;
}

QString OAIQuotaCounterContract::getPeriodKey() const {
    return m_period_key;
}
void OAIQuotaCounterContract::setPeriodKey(const QString &period_key) {
    m_period_key = period_key;
    m_period_key_isSet = true;
}

bool OAIQuotaCounterContract::is_period_key_Set() const{
    return m_period_key_isSet;
}

bool OAIQuotaCounterContract::is_period_key_Valid() const{
    return m_period_key_isValid;
}

QDateTime OAIQuotaCounterContract::getPeriodStartTime() const {
    return m_period_start_time;
}
void OAIQuotaCounterContract::setPeriodStartTime(const QDateTime &period_start_time) {
    m_period_start_time = period_start_time;
    m_period_start_time_isSet = true;
}

bool OAIQuotaCounterContract::is_period_start_time_Set() const{
    return m_period_start_time_isSet;
}

bool OAIQuotaCounterContract::is_period_start_time_Valid() const{
    return m_period_start_time_isValid;
}

bool OAIQuotaCounterContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaCounterContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_counter_key_isValid && m_period_end_time_isValid && m_period_key_isValid && m_period_start_time_isValid && true;
}

} // namespace OpenAPI
