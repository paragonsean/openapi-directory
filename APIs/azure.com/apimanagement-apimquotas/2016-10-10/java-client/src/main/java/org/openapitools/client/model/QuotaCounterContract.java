/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Quota entity associated with your Azure API Management deployment. To configure call rate limit and quota policies refer to [how to configure call rate limit and quota](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-product-with-rules#a-namepolicies-ato-configure-call-rate-limit-and-quota-policies).
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Quota counter details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:46:02.292611-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuotaCounterContract {
  public static final String SERIALIZED_NAME_COUNTER_KEY = "counterKey";
  @SerializedName(SERIALIZED_NAME_COUNTER_KEY)
  private String counterKey;

  public static final String SERIALIZED_NAME_PERIOD_END_TIME = "periodEndTime";
  @SerializedName(SERIALIZED_NAME_PERIOD_END_TIME)
  private OffsetDateTime periodEndTime;

  public static final String SERIALIZED_NAME_PERIOD_KEY = "periodKey";
  @SerializedName(SERIALIZED_NAME_PERIOD_KEY)
  private String periodKey;

  public static final String SERIALIZED_NAME_PERIOD_START_TIME = "periodStartTime";
  @SerializedName(SERIALIZED_NAME_PERIOD_START_TIME)
  private OffsetDateTime periodStartTime;

  public static final String SERIALIZED_NAME_CALLS_COUNT = "callsCount";
  @SerializedName(SERIALIZED_NAME_CALLS_COUNT)
  private Integer callsCount;

  public static final String SERIALIZED_NAME_KB_TRANSFERRED = "kbTransferred";
  @SerializedName(SERIALIZED_NAME_KB_TRANSFERRED)
  private Double kbTransferred;

  public QuotaCounterContract() {
  }

  public QuotaCounterContract counterKey(String counterKey) {
    this.counterKey = counterKey;
    return this;
  }

  /**
   * The Key value of the Counter. Must not be empty.
   * @return counterKey
   */
  @javax.annotation.Nonnull
  public String getCounterKey() {
    return counterKey;
  }

  public void setCounterKey(String counterKey) {
    this.counterKey = counterKey;
  }


  public QuotaCounterContract periodEndTime(OffsetDateTime periodEndTime) {
    this.periodEndTime = periodEndTime;
    return this;
  }

  /**
   * The date of the end of Counter Period. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return periodEndTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getPeriodEndTime() {
    return periodEndTime;
  }

  public void setPeriodEndTime(OffsetDateTime periodEndTime) {
    this.periodEndTime = periodEndTime;
  }


  public QuotaCounterContract periodKey(String periodKey) {
    this.periodKey = periodKey;
    return this;
  }

  /**
   * Identifier of the Period for which the counter was collected. Must not be empty.
   * @return periodKey
   */
  @javax.annotation.Nonnull
  public String getPeriodKey() {
    return periodKey;
  }

  public void setPeriodKey(String periodKey) {
    this.periodKey = periodKey;
  }


  public QuotaCounterContract periodStartTime(OffsetDateTime periodStartTime) {
    this.periodStartTime = periodStartTime;
    return this;
  }

  /**
   * The date of the start of Counter Period. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return periodStartTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getPeriodStartTime() {
    return periodStartTime;
  }

  public void setPeriodStartTime(OffsetDateTime periodStartTime) {
    this.periodStartTime = periodStartTime;
  }


  public QuotaCounterContract callsCount(Integer callsCount) {
    this.callsCount = callsCount;
    return this;
  }

  /**
   * Number of times Counter was called.
   * @return callsCount
   */
  @javax.annotation.Nullable
  public Integer getCallsCount() {
    return callsCount;
  }

  public void setCallsCount(Integer callsCount) {
    this.callsCount = callsCount;
  }


  public QuotaCounterContract kbTransferred(Double kbTransferred) {
    this.kbTransferred = kbTransferred;
    return this;
  }

  /**
   * Data Transferred in KiloBytes.
   * @return kbTransferred
   */
  @javax.annotation.Nullable
  public Double getKbTransferred() {
    return kbTransferred;
  }

  public void setKbTransferred(Double kbTransferred) {
    this.kbTransferred = kbTransferred;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuotaCounterContract quotaCounterContract = (QuotaCounterContract) o;
    return Objects.equals(this.counterKey, quotaCounterContract.counterKey) &&
        Objects.equals(this.periodEndTime, quotaCounterContract.periodEndTime) &&
        Objects.equals(this.periodKey, quotaCounterContract.periodKey) &&
        Objects.equals(this.periodStartTime, quotaCounterContract.periodStartTime) &&
        Objects.equals(this.callsCount, quotaCounterContract.callsCount) &&
        Objects.equals(this.kbTransferred, quotaCounterContract.kbTransferred);
  }

  @Override
  public int hashCode() {
    return Objects.hash(counterKey, periodEndTime, periodKey, periodStartTime, callsCount, kbTransferred);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuotaCounterContract {\n");
    sb.append("    counterKey: ").append(toIndentedString(counterKey)).append("\n");
    sb.append("    periodEndTime: ").append(toIndentedString(periodEndTime)).append("\n");
    sb.append("    periodKey: ").append(toIndentedString(periodKey)).append("\n");
    sb.append("    periodStartTime: ").append(toIndentedString(periodStartTime)).append("\n");
    sb.append("    callsCount: ").append(toIndentedString(callsCount)).append("\n");
    sb.append("    kbTransferred: ").append(toIndentedString(kbTransferred)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callsCount");
    openapiFields.add("kbTransferred");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("counterKey");
    openapiRequiredFields.add("periodEndTime");
    openapiRequiredFields.add("periodKey");
    openapiRequiredFields.add("periodStartTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuotaCounterContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuotaCounterContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuotaCounterContract is not found in the empty JSON string", QuotaCounterContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuotaCounterContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuotaCounterContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QuotaCounterContract.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("counterKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `counterKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("counterKey").toString()));
      }
      if (!jsonObj.get("periodKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `periodKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("periodKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuotaCounterContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuotaCounterContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuotaCounterContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuotaCounterContract.class));

       return (TypeAdapter<T>) new TypeAdapter<QuotaCounterContract>() {
           @Override
           public void write(JsonWriter out, QuotaCounterContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuotaCounterContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuotaCounterContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuotaCounterContract
   * @throws IOException if the JSON string is invalid with respect to QuotaCounterContract
   */
  public static QuotaCounterContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuotaCounterContract.class);
  }

  /**
   * Convert an instance of QuotaCounterContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

