/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Quota entity associated with your Azure API Management deployment. To configure call rate limit and quota policies refer to [how to configure call rate limit and quota](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-product-with-rules#a-namepolicies-ato-configure-call-rate-limit-and-quota-policies).
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQuotaByPeriodKeysApi_H
#define OAI_OAIQuotaByPeriodKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIQuotaByCounterKeys_ListByService_default_response.h"
#include "OAIQuotaCounterContract.h"
#include "OAIQuotaCounterValueContractProperties.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQuotaByPeriodKeysApi : public QObject {
    Q_OBJECT

public:
    OAIQuotaByPeriodKeysApi(const int timeOut = 0);
    ~OAIQuotaByPeriodKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  quota_counter_key QString [required]
    * @param[in]  quota_period_key QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void quotaByPeriodKeysGet(const QString &subscription_id, const QString &resource_group_name, const QString &service_name, const QString &quota_counter_key, const QString &quota_period_key, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  quota_counter_key QString [required]
    * @param[in]  quota_period_key QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIQuotaCounterValueContractProperties [required]
    */
    virtual void quotaByPeriodKeysUpdate(const QString &resource_group_name, const QString &service_name, const QString &quota_counter_key, const QString &quota_period_key, const QString &api_version, const QString &subscription_id, const OAIQuotaCounterValueContractProperties &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void quotaByPeriodKeysGetCallback(OAIHttpRequestWorker *worker);
    void quotaByPeriodKeysUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void quotaByPeriodKeysGetSignal(OAIQuotaCounterContract summary);
    void quotaByPeriodKeysUpdateSignal();


    void quotaByPeriodKeysGetSignalFull(OAIHttpRequestWorker *worker, OAIQuotaCounterContract summary);
    void quotaByPeriodKeysUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use quotaByPeriodKeysGetSignalError() instead")
    void quotaByPeriodKeysGetSignalE(OAIQuotaCounterContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quotaByPeriodKeysGetSignalError(OAIQuotaCounterContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotaByPeriodKeysUpdateSignalError() instead")
    void quotaByPeriodKeysUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quotaByPeriodKeysUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use quotaByPeriodKeysGetSignalErrorFull() instead")
    void quotaByPeriodKeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quotaByPeriodKeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotaByPeriodKeysUpdateSignalErrorFull() instead")
    void quotaByPeriodKeysUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quotaByPeriodKeysUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
