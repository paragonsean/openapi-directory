/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Quota entity associated with your Azure API Management deployment. To configure call rate limit and quota policies refer to [how to configure call rate limit and quota](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-product-with-rules#a-namepolicies-ato-configure-call-rate-limit-and-quota-policies).
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaCounterValueContractProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaCounterValueContractProperties::OAIQuotaCounterValueContractProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaCounterValueContractProperties::OAIQuotaCounterValueContractProperties() {
    this->initializeModel();
}

OAIQuotaCounterValueContractProperties::~OAIQuotaCounterValueContractProperties() {}

void OAIQuotaCounterValueContractProperties::initializeModel() {

    m_calls_count_isSet = false;
    m_calls_count_isValid = false;

    m_kb_transferred_isSet = false;
    m_kb_transferred_isValid = false;
}

void OAIQuotaCounterValueContractProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaCounterValueContractProperties::fromJsonObject(QJsonObject json) {

    m_calls_count_isValid = ::OpenAPI::fromJsonValue(m_calls_count, json[QString("callsCount")]);
    m_calls_count_isSet = !json[QString("callsCount")].isNull() && m_calls_count_isValid;

    m_kb_transferred_isValid = ::OpenAPI::fromJsonValue(m_kb_transferred, json[QString("kbTransferred")]);
    m_kb_transferred_isSet = !json[QString("kbTransferred")].isNull() && m_kb_transferred_isValid;
}

QString OAIQuotaCounterValueContractProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaCounterValueContractProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_calls_count_isSet) {
        obj.insert(QString("callsCount"), ::OpenAPI::toJsonValue(m_calls_count));
    }
    if (m_kb_transferred_isSet) {
        obj.insert(QString("kbTransferred"), ::OpenAPI::toJsonValue(m_kb_transferred));
    }
    return obj;
}

qint32 OAIQuotaCounterValueContractProperties::getCallsCount() const {
    return m_calls_count;
}
void OAIQuotaCounterValueContractProperties::setCallsCount(const qint32 &calls_count) {
    m_calls_count = calls_count;
    m_calls_count_isSet = true;
}

bool OAIQuotaCounterValueContractProperties::is_calls_count_Set() const{
    return m_calls_count_isSet;
}

bool OAIQuotaCounterValueContractProperties::is_calls_count_Valid() const{
    return m_calls_count_isValid;
}

double OAIQuotaCounterValueContractProperties::getKbTransferred() const {
    return m_kb_transferred;
}
void OAIQuotaCounterValueContractProperties::setKbTransferred(const double &kb_transferred) {
    m_kb_transferred = kb_transferred;
    m_kb_transferred_isSet = true;
}

bool OAIQuotaCounterValueContractProperties::is_kb_transferred_Set() const{
    return m_kb_transferred_isSet;
}

bool OAIQuotaCounterValueContractProperties::is_kb_transferred_Valid() const{
    return m_kb_transferred_isValid;
}

bool OAIQuotaCounterValueContractProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calls_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kb_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaCounterValueContractProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
