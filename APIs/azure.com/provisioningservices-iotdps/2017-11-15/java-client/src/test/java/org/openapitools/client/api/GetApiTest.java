/*
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-11-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AsyncOperationResult;
import org.openapitools.client.model.CertificateListDescription;
import org.openapitools.client.model.CertificateResponse;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.IotDpsSkuDefinitionListResult;
import org.openapitools.client.model.ProvisioningServiceDescription;
import org.openapitools.client.model.ProvisioningServiceDescriptionListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GetApi
 */
@Disabled
public class GetApiTest {

    private final GetApi api = new GetApi();

    /**
     * Get the certificate from the provisioning service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dpsCertificateGetTest() throws ApiException {
        String certificateName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String provisioningServiceName = null;
        String apiVersion = null;
        String ifMatch = null;
        CertificateResponse response = api.dpsCertificateGet(certificateName, subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, ifMatch);
        // TODO: test validations
    }

    /**
     * Get all the certificates tied to the provisioning service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dpsCertificatesListTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String provisioningServiceName = null;
        String apiVersion = null;
        CertificateListDescription response = api.dpsCertificatesList(subscriptionId, resourceGroupName, provisioningServiceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the non-security related metadata of the provisioning service.
     *
     * Get the metadata of the provisioning service without SAS keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotDpsResourceGetTest() throws ApiException {
        String provisioningServiceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        ProvisioningServiceDescription response = api.iotDpsResourceGet(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the status of a long running operation, such as create, update or delete a provisioning service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotDpsResourceGetOperationResultTest() throws ApiException {
        String operationId = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String provisioningServiceName = null;
        String asyncinfo = null;
        String apiVersion = null;
        AsyncOperationResult response = api.iotDpsResourceGetOperationResult(operationId, subscriptionId, resourceGroupName, provisioningServiceName, asyncinfo, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a list of all provisioning services in the given resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotDpsResourceListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        ProvisioningServiceDescriptionListResult response = api.iotDpsResourceListByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all the provisioning services in a subscription.
     *
     * List all the provisioning services for a given subscription id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotDpsResourceListBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ProvisioningServiceDescriptionListResult response = api.iotDpsResourceListBySubscription(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the list of valid SKUs for a provisioning service.
     *
     * Gets the list of valid SKUs and tiers for a provisioning service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotDpsResourceListValidSkusTest() throws ApiException {
        String provisioningServiceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        IotDpsSkuDefinitionListResult response = api.iotDpsResourceListValidSkus(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

}
