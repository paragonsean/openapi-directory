/*
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-11-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorDetails;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeleteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeleteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeleteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dpsCertificateDelete
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param ifMatch ETag of the certificate (required)
     * @param provisioningServiceName The name of the provisioning service. (required)
     * @param certificateName This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by. (required)
     * @param apiVersion The version of the API. (required)
     * @param certificateName2 This is optional, and it is the Common Name of the certificate. (optional)
     * @param certificateRawBytes Raw data within the certificate. (optional)
     * @param certificateIsVerified Indicates if certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose A description that mentions the purpose of the certificate. (optional)
     * @param certificateCreated Time the certificate is created. (optional)
     * @param certificateLastUpdated Time the certificate is last updated. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains a private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dpsCertificateDeleteCall(String subscriptionId, String resourceGroupName, String ifMatch, String provisioningServiceName, String certificateName, String apiVersion, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (certificateName2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.name", certificateName2));
        }

        if (certificateRawBytes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.rawBytes", certificateRawBytes));
        }

        if (certificateIsVerified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.isVerified", certificateIsVerified));
        }

        if (certificatePurpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.purpose", certificatePurpose));
        }

        if (certificateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.created", certificateCreated));
        }

        if (certificateLastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.lastUpdated", certificateLastUpdated));
        }

        if (certificateHasPrivateKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.hasPrivateKey", certificateHasPrivateKey));
        }

        if (certificateNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate.nonce", certificateNonce));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dpsCertificateDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String ifMatch, String provisioningServiceName, String certificateName, String apiVersion, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dpsCertificateDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dpsCertificateDelete(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling dpsCertificateDelete(Async)");
        }

        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateDelete(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling dpsCertificateDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dpsCertificateDelete(Async)");
        }

        return dpsCertificateDeleteCall(subscriptionId, resourceGroupName, ifMatch, provisioningServiceName, certificateName, apiVersion, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, _callback);

    }

    /**
     * Delete the Provisioning Service Certificate.
     * Deletes the specified certificate assosciated with the Provisioning Service
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param ifMatch ETag of the certificate (required)
     * @param provisioningServiceName The name of the provisioning service. (required)
     * @param certificateName This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by. (required)
     * @param apiVersion The version of the API. (required)
     * @param certificateName2 This is optional, and it is the Common Name of the certificate. (optional)
     * @param certificateRawBytes Raw data within the certificate. (optional)
     * @param certificateIsVerified Indicates if certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose A description that mentions the purpose of the certificate. (optional)
     * @param certificateCreated Time the certificate is created. (optional)
     * @param certificateLastUpdated Time the certificate is last updated. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains a private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public void dpsCertificateDelete(String subscriptionId, String resourceGroupName, String ifMatch, String provisioningServiceName, String certificateName, String apiVersion, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce) throws ApiException {
        dpsCertificateDeleteWithHttpInfo(subscriptionId, resourceGroupName, ifMatch, provisioningServiceName, certificateName, apiVersion, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce);
    }

    /**
     * Delete the Provisioning Service Certificate.
     * Deletes the specified certificate assosciated with the Provisioning Service
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param ifMatch ETag of the certificate (required)
     * @param provisioningServiceName The name of the provisioning service. (required)
     * @param certificateName This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by. (required)
     * @param apiVersion The version of the API. (required)
     * @param certificateName2 This is optional, and it is the Common Name of the certificate. (optional)
     * @param certificateRawBytes Raw data within the certificate. (optional)
     * @param certificateIsVerified Indicates if certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose A description that mentions the purpose of the certificate. (optional)
     * @param certificateCreated Time the certificate is created. (optional)
     * @param certificateLastUpdated Time the certificate is last updated. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains a private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dpsCertificateDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String ifMatch, String provisioningServiceName, String certificateName, String apiVersion, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce) throws ApiException {
        okhttp3.Call localVarCall = dpsCertificateDeleteValidateBeforeCall(subscriptionId, resourceGroupName, ifMatch, provisioningServiceName, certificateName, apiVersion, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the Provisioning Service Certificate. (asynchronously)
     * Deletes the specified certificate assosciated with the Provisioning Service
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param ifMatch ETag of the certificate (required)
     * @param provisioningServiceName The name of the provisioning service. (required)
     * @param certificateName This is a mandatory field, and is the logical name of the certificate that the provisioning service will access by. (required)
     * @param apiVersion The version of the API. (required)
     * @param certificateName2 This is optional, and it is the Common Name of the certificate. (optional)
     * @param certificateRawBytes Raw data within the certificate. (optional)
     * @param certificateIsVerified Indicates if certificate has been verified by owner of the private key. (optional)
     * @param certificatePurpose A description that mentions the purpose of the certificate. (optional)
     * @param certificateCreated Time the certificate is created. (optional)
     * @param certificateLastUpdated Time the certificate is last updated. (optional)
     * @param certificateHasPrivateKey Indicates if the certificate contains a private key. (optional)
     * @param certificateNonce Random number generated to indicate Proof of Possession. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dpsCertificateDeleteAsync(String subscriptionId, String resourceGroupName, String ifMatch, String provisioningServiceName, String certificateName, String apiVersion, String certificateName2, byte[] certificateRawBytes, Boolean certificateIsVerified, String certificatePurpose, OffsetDateTime certificateCreated, OffsetDateTime certificateLastUpdated, Boolean certificateHasPrivateKey, String certificateNonce, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dpsCertificateDeleteValidateBeforeCall(subscriptionId, resourceGroupName, ifMatch, provisioningServiceName, certificateName, apiVersion, certificateName2, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotDpsResourceDelete
     * @param provisioningServiceName Name of provisioning service to delete. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The provisioning service resource provider always returns a 202 Accepted status code with valid Location and Retry-After headers. The resource provider also sets the Azure-AsyncOperation header with a URL that points to the operation resource for this operation. Subsequent GET attempts on the resource after a DELETE operation return a resource representation that indicates a transitional provisioning state (such as Terminating). To retrieve the status of the operation, a client can either poll the URL returned in the Location header after the Retry-After interval, get the provisioning service status directly, or query the operation resource. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Once the long running delete operation completes successfully, a 204 No Content status code is returned when the status polling request finds the provisioning service metadata in the service and the status of the delete operation is set to a completed state. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> After the long running delete operation completes successfully, a 404 Not Found is returned when the status polling request no longer finds the provisioning service metadata in the service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceDeleteCall(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}"
            .replace("{" + "provisioningServiceName" + "}", localVarApiClient.escapeString(provisioningServiceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotDpsResourceDeleteValidateBeforeCall(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisioningServiceName' is set
        if (provisioningServiceName == null) {
            throw new ApiException("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotDpsResourceDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotDpsResourceDelete(Async)");
        }

        return iotDpsResourceDeleteCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Delete the Provisioning Service
     * Deletes the Provisioning Service.
     * @param provisioningServiceName Name of provisioning service to delete. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The provisioning service resource provider always returns a 202 Accepted status code with valid Location and Retry-After headers. The resource provider also sets the Azure-AsyncOperation header with a URL that points to the operation resource for this operation. Subsequent GET attempts on the resource after a DELETE operation return a resource representation that indicates a transitional provisioning state (such as Terminating). To retrieve the status of the operation, a client can either poll the URL returned in the Location header after the Retry-After interval, get the provisioning service status directly, or query the operation resource. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Once the long running delete operation completes successfully, a 204 No Content status code is returned when the status polling request finds the provisioning service metadata in the service and the status of the delete operation is set to a completed state. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> After the long running delete operation completes successfully, a 404 Not Found is returned when the status polling request no longer finds the provisioning service metadata in the service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public void iotDpsResourceDelete(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        iotDpsResourceDeleteWithHttpInfo(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion);
    }

    /**
     * Delete the Provisioning Service
     * Deletes the Provisioning Service.
     * @param provisioningServiceName Name of provisioning service to delete. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The provisioning service resource provider always returns a 202 Accepted status code with valid Location and Retry-After headers. The resource provider also sets the Azure-AsyncOperation header with a URL that points to the operation resource for this operation. Subsequent GET attempts on the resource after a DELETE operation return a resource representation that indicates a transitional provisioning state (such as Terminating). To retrieve the status of the operation, a client can either poll the URL returned in the Location header after the Retry-After interval, get the provisioning service status directly, or query the operation resource. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Once the long running delete operation completes successfully, a 204 No Content status code is returned when the status polling request finds the provisioning service metadata in the service and the status of the delete operation is set to a completed state. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> After the long running delete operation completes successfully, a 404 Not Found is returned when the status polling request no longer finds the provisioning service metadata in the service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iotDpsResourceDeleteWithHttpInfo(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = iotDpsResourceDeleteValidateBeforeCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the Provisioning Service (asynchronously)
     * Deletes the Provisioning Service.
     * @param provisioningServiceName Name of provisioning service to delete. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName Resource group identifier. (required)
     * @param apiVersion The version of the API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The provisioning service resource provider always returns a 202 Accepted status code with valid Location and Retry-After headers. The resource provider also sets the Azure-AsyncOperation header with a URL that points to the operation resource for this operation. Subsequent GET attempts on the resource after a DELETE operation return a resource representation that indicates a transitional provisioning state (such as Terminating). To retrieve the status of the operation, a client can either poll the URL returned in the Location header after the Retry-After interval, get the provisioning service status directly, or query the operation resource. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Once the long running delete operation completes successfully, a 204 No Content status code is returned when the status polling request finds the provisioning service metadata in the service and the status of the delete operation is set to a completed state. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> After the long running delete operation completes successfully, a 404 Not Found is returned when the status polling request no longer finds the provisioning service metadata in the service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotDpsResourceDeleteAsync(String provisioningServiceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotDpsResourceDeleteValidateBeforeCall(provisioningServiceName, subscriptionId, resourceGroupName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
