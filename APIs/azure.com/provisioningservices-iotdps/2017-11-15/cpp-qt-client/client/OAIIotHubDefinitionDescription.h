/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-11-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIotHubDefinitionDescription.h
 *
 * Description of the IoT hub.
 */

#ifndef OAIIotHubDefinitionDescription_H
#define OAIIotHubDefinitionDescription_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIotHubDefinitionDescription : public OAIObject {
public:
    OAIIotHubDefinitionDescription();
    OAIIotHubDefinitionDescription(QString json);
    ~OAIIotHubDefinitionDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAllocationWeight() const;
    void setAllocationWeight(const qint32 &allocation_weight);
    bool is_allocation_weight_Set() const;
    bool is_allocation_weight_Valid() const;

    bool isApplyAllocationPolicy() const;
    void setApplyAllocationPolicy(const bool &apply_allocation_policy);
    bool is_apply_allocation_policy_Set() const;
    bool is_apply_allocation_policy_Valid() const;

    QString getConnectionString() const;
    void setConnectionString(const QString &connection_string);
    bool is_connection_string_Set() const;
    bool is_connection_string_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_allocation_weight;
    bool m_allocation_weight_isSet;
    bool m_allocation_weight_isValid;

    bool m_apply_allocation_policy;
    bool m_apply_allocation_policy_isSet;
    bool m_apply_allocation_policy_isValid;

    QString m_connection_string;
    bool m_connection_string_isSet;
    bool m_connection_string_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIotHubDefinitionDescription)

#endif // OAIIotHubDefinitionDescription_H
