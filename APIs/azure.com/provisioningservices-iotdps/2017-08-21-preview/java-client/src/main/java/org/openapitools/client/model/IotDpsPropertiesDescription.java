/*
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-08-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IotHubDefinitionDescription;
import org.openapitools.client.model.SharedAccessSignatureAuthorizationRuleAccessRightsDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IotDpsPropertiesDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:09.894118-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IotDpsPropertiesDescription {
  /**
   * Allocation policy to be used by this provisioning service.
   */
  @JsonAdapter(AllocationPolicyEnum.Adapter.class)
  public enum AllocationPolicyEnum {
    HASHED("Hashed"),
    
    GEO_LATENCY("GeoLatency"),
    
    STATIC("Static");

    private String value;

    AllocationPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllocationPolicyEnum fromValue(String value) {
      for (AllocationPolicyEnum b : AllocationPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllocationPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllocationPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllocationPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllocationPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllocationPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOCATION_POLICY = "allocationPolicy";
  @SerializedName(SERIALIZED_NAME_ALLOCATION_POLICY)
  private AllocationPolicyEnum allocationPolicy;

  public static final String SERIALIZED_NAME_AUTHORIZATION_POLICIES = "authorizationPolicies";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_POLICIES)
  private List<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> authorizationPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVICE_PROVISIONING_HOST_NAME = "deviceProvisioningHostName";
  @SerializedName(SERIALIZED_NAME_DEVICE_PROVISIONING_HOST_NAME)
  private String deviceProvisioningHostName;

  public static final String SERIALIZED_NAME_ID_SCOPE = "idScope";
  @SerializedName(SERIALIZED_NAME_ID_SCOPE)
  private String idScope;

  public static final String SERIALIZED_NAME_IOT_HUBS = "iotHubs";
  @SerializedName(SERIALIZED_NAME_IOT_HUBS)
  private List<IotHubDefinitionDescription> iotHubs = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SERVICE_OPERATIONS_HOST_NAME = "serviceOperationsHostName";
  @SerializedName(SERIALIZED_NAME_SERVICE_OPERATIONS_HOST_NAME)
  private String serviceOperationsHostName;

  /**
   * Current state of the provisioning service.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVATING("Activating"),
    
    ACTIVE("Active"),
    
    DELETING("Deleting"),
    
    DELETED("Deleted"),
    
    ACTIVATION_FAILED("ActivationFailed"),
    
    DELETION_FAILED("DeletionFailed"),
    
    TRANSITIONING("Transitioning"),
    
    SUSPENDING("Suspending"),
    
    SUSPENDED("Suspended"),
    
    RESUMING("Resuming"),
    
    FAILING_OVER("FailingOver"),
    
    FAILOVER_FAILED("FailoverFailed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public IotDpsPropertiesDescription() {
  }

  public IotDpsPropertiesDescription(
     String deviceProvisioningHostName, 
     String idScope, 
     String serviceOperationsHostName
  ) {
    this();
    this.deviceProvisioningHostName = deviceProvisioningHostName;
    this.idScope = idScope;
    this.serviceOperationsHostName = serviceOperationsHostName;
  }

  public IotDpsPropertiesDescription allocationPolicy(AllocationPolicyEnum allocationPolicy) {
    this.allocationPolicy = allocationPolicy;
    return this;
  }

  /**
   * Allocation policy to be used by this provisioning service.
   * @return allocationPolicy
   */
  @javax.annotation.Nullable
  public AllocationPolicyEnum getAllocationPolicy() {
    return allocationPolicy;
  }

  public void setAllocationPolicy(AllocationPolicyEnum allocationPolicy) {
    this.allocationPolicy = allocationPolicy;
  }


  public IotDpsPropertiesDescription authorizationPolicies(List<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> authorizationPolicies) {
    this.authorizationPolicies = authorizationPolicies;
    return this;
  }

  public IotDpsPropertiesDescription addAuthorizationPoliciesItem(SharedAccessSignatureAuthorizationRuleAccessRightsDescription authorizationPoliciesItem) {
    if (this.authorizationPolicies == null) {
      this.authorizationPolicies = new ArrayList<>();
    }
    this.authorizationPolicies.add(authorizationPoliciesItem);
    return this;
  }

  /**
   * Get authorizationPolicies
   * @return authorizationPolicies
   */
  @javax.annotation.Nullable
  public List<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> getAuthorizationPolicies() {
    return authorizationPolicies;
  }

  public void setAuthorizationPolicies(List<SharedAccessSignatureAuthorizationRuleAccessRightsDescription> authorizationPolicies) {
    this.authorizationPolicies = authorizationPolicies;
  }


  /**
   * Device endpoint for this provisioning service.
   * @return deviceProvisioningHostName
   */
  @javax.annotation.Nullable
  public String getDeviceProvisioningHostName() {
    return deviceProvisioningHostName;
  }



  /**
   * Unique identifier of this provisioning service.
   * @return idScope
   */
  @javax.annotation.Nullable
  public String getIdScope() {
    return idScope;
  }



  public IotDpsPropertiesDescription iotHubs(List<IotHubDefinitionDescription> iotHubs) {
    this.iotHubs = iotHubs;
    return this;
  }

  public IotDpsPropertiesDescription addIotHubsItem(IotHubDefinitionDescription iotHubsItem) {
    if (this.iotHubs == null) {
      this.iotHubs = new ArrayList<>();
    }
    this.iotHubs.add(iotHubsItem);
    return this;
  }

  /**
   * List of IoT hubs assosciated with this provisioning service.
   * @return iotHubs
   */
  @javax.annotation.Nullable
  public List<IotHubDefinitionDescription> getIotHubs() {
    return iotHubs;
  }

  public void setIotHubs(List<IotHubDefinitionDescription> iotHubs) {
    this.iotHubs = iotHubs;
  }


  public IotDpsPropertiesDescription provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The ARM provisioning state of the provisioning service.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  /**
   * Service endpoint for provisioning service.
   * @return serviceOperationsHostName
   */
  @javax.annotation.Nullable
  public String getServiceOperationsHostName() {
    return serviceOperationsHostName;
  }



  public IotDpsPropertiesDescription state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Current state of the provisioning service.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IotDpsPropertiesDescription iotDpsPropertiesDescription = (IotDpsPropertiesDescription) o;
    return Objects.equals(this.allocationPolicy, iotDpsPropertiesDescription.allocationPolicy) &&
        Objects.equals(this.authorizationPolicies, iotDpsPropertiesDescription.authorizationPolicies) &&
        Objects.equals(this.deviceProvisioningHostName, iotDpsPropertiesDescription.deviceProvisioningHostName) &&
        Objects.equals(this.idScope, iotDpsPropertiesDescription.idScope) &&
        Objects.equals(this.iotHubs, iotDpsPropertiesDescription.iotHubs) &&
        Objects.equals(this.provisioningState, iotDpsPropertiesDescription.provisioningState) &&
        Objects.equals(this.serviceOperationsHostName, iotDpsPropertiesDescription.serviceOperationsHostName) &&
        Objects.equals(this.state, iotDpsPropertiesDescription.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocationPolicy, authorizationPolicies, deviceProvisioningHostName, idScope, iotHubs, provisioningState, serviceOperationsHostName, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IotDpsPropertiesDescription {\n");
    sb.append("    allocationPolicy: ").append(toIndentedString(allocationPolicy)).append("\n");
    sb.append("    authorizationPolicies: ").append(toIndentedString(authorizationPolicies)).append("\n");
    sb.append("    deviceProvisioningHostName: ").append(toIndentedString(deviceProvisioningHostName)).append("\n");
    sb.append("    idScope: ").append(toIndentedString(idScope)).append("\n");
    sb.append("    iotHubs: ").append(toIndentedString(iotHubs)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    serviceOperationsHostName: ").append(toIndentedString(serviceOperationsHostName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocationPolicy");
    openapiFields.add("authorizationPolicies");
    openapiFields.add("deviceProvisioningHostName");
    openapiFields.add("idScope");
    openapiFields.add("iotHubs");
    openapiFields.add("provisioningState");
    openapiFields.add("serviceOperationsHostName");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IotDpsPropertiesDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IotDpsPropertiesDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IotDpsPropertiesDescription is not found in the empty JSON string", IotDpsPropertiesDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IotDpsPropertiesDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IotDpsPropertiesDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allocationPolicy") != null && !jsonObj.get("allocationPolicy").isJsonNull()) && !jsonObj.get("allocationPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocationPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allocationPolicy").toString()));
      }
      // validate the optional field `allocationPolicy`
      if (jsonObj.get("allocationPolicy") != null && !jsonObj.get("allocationPolicy").isJsonNull()) {
        AllocationPolicyEnum.validateJsonElement(jsonObj.get("allocationPolicy"));
      }
      if (jsonObj.get("authorizationPolicies") != null && !jsonObj.get("authorizationPolicies").isJsonNull()) {
        JsonArray jsonArrayauthorizationPolicies = jsonObj.getAsJsonArray("authorizationPolicies");
        if (jsonArrayauthorizationPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizationPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizationPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("authorizationPolicies").toString()));
          }

          // validate the optional field `authorizationPolicies` (array)
          for (int i = 0; i < jsonArrayauthorizationPolicies.size(); i++) {
            SharedAccessSignatureAuthorizationRuleAccessRightsDescription.validateJsonElement(jsonArrayauthorizationPolicies.get(i));
          };
        }
      }
      if ((jsonObj.get("deviceProvisioningHostName") != null && !jsonObj.get("deviceProvisioningHostName").isJsonNull()) && !jsonObj.get("deviceProvisioningHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceProvisioningHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceProvisioningHostName").toString()));
      }
      if ((jsonObj.get("idScope") != null && !jsonObj.get("idScope").isJsonNull()) && !jsonObj.get("idScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idScope").toString()));
      }
      if (jsonObj.get("iotHubs") != null && !jsonObj.get("iotHubs").isJsonNull()) {
        JsonArray jsonArrayiotHubs = jsonObj.getAsJsonArray("iotHubs");
        if (jsonArrayiotHubs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("iotHubs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `iotHubs` to be an array in the JSON string but got `%s`", jsonObj.get("iotHubs").toString()));
          }

          // validate the optional field `iotHubs` (array)
          for (int i = 0; i < jsonArrayiotHubs.size(); i++) {
            IotHubDefinitionDescription.validateJsonElement(jsonArrayiotHubs.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("serviceOperationsHostName") != null && !jsonObj.get("serviceOperationsHostName").isJsonNull()) && !jsonObj.get("serviceOperationsHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceOperationsHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceOperationsHostName").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IotDpsPropertiesDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IotDpsPropertiesDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IotDpsPropertiesDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IotDpsPropertiesDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<IotDpsPropertiesDescription>() {
           @Override
           public void write(JsonWriter out, IotDpsPropertiesDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IotDpsPropertiesDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IotDpsPropertiesDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IotDpsPropertiesDescription
   * @throws IOException if the JSON string is invalid with respect to IotDpsPropertiesDescription
   */
  public static IotDpsPropertiesDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IotDpsPropertiesDescription.class);
  }

  /**
   * Convert an instance of IotDpsPropertiesDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

