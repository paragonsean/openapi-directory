/*
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-08-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CertificateBodyDescription;
import org.openapitools.client.model.CertificateResponse;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.ProvisioningServiceDescription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PutApi
 */
@Disabled
public class PutApiTest {

    private final PutApi api = new PutApi();

    /**
     * Upload the certificate to the provisioning service.
     *
     * Add new certificate or update an existing certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dpsCertificateCreateOrUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String provisioningServiceName = null;
        String certificateName = null;
        CertificateBodyDescription certificateDescription = null;
        String ifMatch = null;
        CertificateResponse response = api.dpsCertificateCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, provisioningServiceName, certificateName, certificateDescription, ifMatch);
        // TODO: test validations
    }

    /**
     * Create or update the metadata of the provisioning service.
     *
     * Create or update the metadata of the provisioning service. The usual pattern to modify a property is to retrieve the provisioning service metadata and security metadata, and then combine them with the modified values in a new body to update the provisioning service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotDpsResourceCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String provisioningServiceName = null;
        String apiVersion = null;
        ProvisioningServiceDescription iotDpsDescription = null;
        ProvisioningServiceDescription response = api.iotDpsResourceCreateOrUpdate(subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, iotDpsDescription);
        // TODO: test validations
    }

}
