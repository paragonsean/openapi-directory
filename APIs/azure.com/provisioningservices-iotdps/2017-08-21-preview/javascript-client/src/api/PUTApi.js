/**
 * iotDpsClient
 * API for using the Azure IoT Hub Device Provisioning Service features.
 *
 * The version of the OpenAPI document: 2017-08-21-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertificateBodyDescription from '../model/CertificateBodyDescription';
import CertificateResponse from '../model/CertificateResponse';
import ErrorDetails from '../model/ErrorDetails';
import ProvisioningServiceDescription from '../model/ProvisioningServiceDescription';

/**
* PUT service.
* @module api/PUTApi
* @version 2017-08-21-preview
*/
export default class PUTApi {

    /**
    * Constructs a new PUTApi. 
    * @alias module:api/PUTApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dpsCertificateCreateOrUpdate operation.
     * @callback module:api/PUTApi~dpsCertificateCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload the certificate to the provisioning service.
     * Add new certificate or update an existing certificate.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Resource group identifier.
     * @param {String} provisioningServiceName The name of the provisioning service.
     * @param {String} certificateName The name of the certificate create or update.
     * @param {module:model/CertificateBodyDescription} certificateDescription The certificate body.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate.
     * @param {module:api/PUTApi~dpsCertificateCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateResponse}
     */
    dpsCertificateCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, provisioningServiceName, certificateName, certificateDescription, opts, callback) {
      opts = opts || {};
      let postBody = certificateDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dpsCertificateCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dpsCertificateCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dpsCertificateCreateOrUpdate");
      }
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling dpsCertificateCreateOrUpdate");
      }
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling dpsCertificateCreateOrUpdate");
      }
      // verify the required parameter 'certificateDescription' is set
      if (certificateDescription === undefined || certificateDescription === null) {
        throw new Error("Missing the required parameter 'certificateDescription' when calling dpsCertificateCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'provisioningServiceName': provisioningServiceName,
        'certificateName': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotDpsResourceCreateOrUpdate operation.
     * @callback module:api/PUTApi~iotDpsResourceCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvisioningServiceDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the metadata of the provisioning service.
     * Create or update the metadata of the provisioning service. The usual pattern to modify a property is to retrieve the provisioning service metadata and security metadata, and then combine them with the modified values in a new body to update the provisioning service.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Resource group identifier.
     * @param {String} provisioningServiceName Name of provisioning service to create or update.
     * @param {String} apiVersion The version of the API.
     * @param {module:model/ProvisioningServiceDescription} iotDpsDescription Description of the provisioning service to create or update.
     * @param {module:api/PUTApi~iotDpsResourceCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvisioningServiceDescription}
     */
    iotDpsResourceCreateOrUpdate(subscriptionId, resourceGroupName, provisioningServiceName, apiVersion, iotDpsDescription, callback) {
      let postBody = iotDpsDescription;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotDpsResourceCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotDpsResourceCreateOrUpdate");
      }
      // verify the required parameter 'provisioningServiceName' is set
      if (provisioningServiceName === undefined || provisioningServiceName === null) {
        throw new Error("Missing the required parameter 'provisioningServiceName' when calling iotDpsResourceCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotDpsResourceCreateOrUpdate");
      }
      // verify the required parameter 'iotDpsDescription' is set
      if (iotDpsDescription === undefined || iotDpsDescription === null) {
        throw new Error("Missing the required parameter 'iotDpsDescription' when calling iotDpsResourceCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'provisioningServiceName': provisioningServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProvisioningServiceDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
