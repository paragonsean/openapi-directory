# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryStatisticProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_function: str=None, database_names: List[str]=None, end_time: datetime=None, metric_display_name: str=None, metric_name: str=None, metric_value: float=None, metric_value_unit: str=None, query_execution_count: int=None, query_id: str=None, start_time: datetime=None):
        """QueryStatisticProperties - a model defined in OpenAPI

        :param aggregation_function: The aggregation_function of this QueryStatisticProperties.
        :param database_names: The database_names of this QueryStatisticProperties.
        :param end_time: The end_time of this QueryStatisticProperties.
        :param metric_display_name: The metric_display_name of this QueryStatisticProperties.
        :param metric_name: The metric_name of this QueryStatisticProperties.
        :param metric_value: The metric_value of this QueryStatisticProperties.
        :param metric_value_unit: The metric_value_unit of this QueryStatisticProperties.
        :param query_execution_count: The query_execution_count of this QueryStatisticProperties.
        :param query_id: The query_id of this QueryStatisticProperties.
        :param start_time: The start_time of this QueryStatisticProperties.
        """
        self.openapi_types = {
            'aggregation_function': str,
            'database_names': List[str],
            'end_time': datetime,
            'metric_display_name': str,
            'metric_name': str,
            'metric_value': float,
            'metric_value_unit': str,
            'query_execution_count': int,
            'query_id': str,
            'start_time': datetime
        }

        self.attribute_map = {
            'aggregation_function': 'aggregationFunction',
            'database_names': 'databaseNames',
            'end_time': 'endTime',
            'metric_display_name': 'metricDisplayName',
            'metric_name': 'metricName',
            'metric_value': 'metricValue',
            'metric_value_unit': 'metricValueUnit',
            'query_execution_count': 'queryExecutionCount',
            'query_id': 'queryId',
            'start_time': 'startTime'
        }

        self._aggregation_function = aggregation_function
        self._database_names = database_names
        self._end_time = end_time
        self._metric_display_name = metric_display_name
        self._metric_name = metric_name
        self._metric_value = metric_value
        self._metric_value_unit = metric_value_unit
        self._query_execution_count = query_execution_count
        self._query_id = query_id
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryStatisticProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryStatisticProperties of this QueryStatisticProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_function(self):
        """Gets the aggregation_function of this QueryStatisticProperties.

        Aggregation function name.

        :return: The aggregation_function of this QueryStatisticProperties.
        :rtype: str
        """
        return self._aggregation_function

    @aggregation_function.setter
    def aggregation_function(self, aggregation_function):
        """Sets the aggregation_function of this QueryStatisticProperties.

        Aggregation function name.

        :param aggregation_function: The aggregation_function of this QueryStatisticProperties.
        :type aggregation_function: str
        """

        self._aggregation_function = aggregation_function

    @property
    def database_names(self):
        """Gets the database_names of this QueryStatisticProperties.

        The list of database names.

        :return: The database_names of this QueryStatisticProperties.
        :rtype: List[str]
        """
        return self._database_names

    @database_names.setter
    def database_names(self, database_names):
        """Sets the database_names of this QueryStatisticProperties.

        The list of database names.

        :param database_names: The database_names of this QueryStatisticProperties.
        :type database_names: List[str]
        """

        self._database_names = database_names

    @property
    def end_time(self):
        """Gets the end_time of this QueryStatisticProperties.

        Observation end time.

        :return: The end_time of this QueryStatisticProperties.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this QueryStatisticProperties.

        Observation end time.

        :param end_time: The end_time of this QueryStatisticProperties.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def metric_display_name(self):
        """Gets the metric_display_name of this QueryStatisticProperties.

        Metric display name.

        :return: The metric_display_name of this QueryStatisticProperties.
        :rtype: str
        """
        return self._metric_display_name

    @metric_display_name.setter
    def metric_display_name(self, metric_display_name):
        """Sets the metric_display_name of this QueryStatisticProperties.

        Metric display name.

        :param metric_display_name: The metric_display_name of this QueryStatisticProperties.
        :type metric_display_name: str
        """

        self._metric_display_name = metric_display_name

    @property
    def metric_name(self):
        """Gets the metric_name of this QueryStatisticProperties.

        Metric name.

        :return: The metric_name of this QueryStatisticProperties.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this QueryStatisticProperties.

        Metric name.

        :param metric_name: The metric_name of this QueryStatisticProperties.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def metric_value(self):
        """Gets the metric_value of this QueryStatisticProperties.

        Metric value.

        :return: The metric_value of this QueryStatisticProperties.
        :rtype: float
        """
        return self._metric_value

    @metric_value.setter
    def metric_value(self, metric_value):
        """Sets the metric_value of this QueryStatisticProperties.

        Metric value.

        :param metric_value: The metric_value of this QueryStatisticProperties.
        :type metric_value: float
        """

        self._metric_value = metric_value

    @property
    def metric_value_unit(self):
        """Gets the metric_value_unit of this QueryStatisticProperties.

        Metric value unit.

        :return: The metric_value_unit of this QueryStatisticProperties.
        :rtype: str
        """
        return self._metric_value_unit

    @metric_value_unit.setter
    def metric_value_unit(self, metric_value_unit):
        """Sets the metric_value_unit of this QueryStatisticProperties.

        Metric value unit.

        :param metric_value_unit: The metric_value_unit of this QueryStatisticProperties.
        :type metric_value_unit: str
        """

        self._metric_value_unit = metric_value_unit

    @property
    def query_execution_count(self):
        """Gets the query_execution_count of this QueryStatisticProperties.

        Number of query executions in this time interval.

        :return: The query_execution_count of this QueryStatisticProperties.
        :rtype: int
        """
        return self._query_execution_count

    @query_execution_count.setter
    def query_execution_count(self, query_execution_count):
        """Sets the query_execution_count of this QueryStatisticProperties.

        Number of query executions in this time interval.

        :param query_execution_count: The query_execution_count of this QueryStatisticProperties.
        :type query_execution_count: int
        """

        self._query_execution_count = query_execution_count

    @property
    def query_id(self):
        """Gets the query_id of this QueryStatisticProperties.

        Database query identifier.

        :return: The query_id of this QueryStatisticProperties.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this QueryStatisticProperties.

        Database query identifier.

        :param query_id: The query_id of this QueryStatisticProperties.
        :type query_id: str
        """

        self._query_id = query_id

    @property
    def start_time(self):
        """Gets the start_time of this QueryStatisticProperties.

        Observation start time.

        :return: The start_time of this QueryStatisticProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this QueryStatisticProperties.

        Observation start time.

        :param start_time: The start_time of this QueryStatisticProperties.
        :type start_time: datetime
        """

        self._start_time = start_time
