/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryTextProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryTextProperties::OAIQueryTextProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryTextProperties::OAIQueryTextProperties() {
    this->initializeModel();
}

OAIQueryTextProperties::~OAIQueryTextProperties() {}

void OAIQueryTextProperties::initializeModel() {

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_query_text_isSet = false;
    m_query_text_isValid = false;
}

void OAIQueryTextProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryTextProperties::fromJsonObject(QJsonObject json) {

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("queryId")]);
    m_query_id_isSet = !json[QString("queryId")].isNull() && m_query_id_isValid;

    m_query_text_isValid = ::OpenAPI::fromJsonValue(m_query_text, json[QString("queryText")]);
    m_query_text_isSet = !json[QString("queryText")].isNull() && m_query_text_isValid;
}

QString OAIQueryTextProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryTextProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_query_id_isSet) {
        obj.insert(QString("queryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_query_text_isSet) {
        obj.insert(QString("queryText"), ::OpenAPI::toJsonValue(m_query_text));
    }
    return obj;
}

QString OAIQueryTextProperties::getQueryId() const {
    return m_query_id;
}
void OAIQueryTextProperties::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIQueryTextProperties::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIQueryTextProperties::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QString OAIQueryTextProperties::getQueryText() const {
    return m_query_text;
}
void OAIQueryTextProperties::setQueryText(const QString &query_text) {
    m_query_text = query_text;
    m_query_text_isSet = true;
}

bool OAIQueryTextProperties::is_query_text_Set() const{
    return m_query_text_isSet;
}

bool OAIQueryTextProperties::is_query_text_Valid() const{
    return m_query_text_isValid;
}

bool OAIQueryTextProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryTextProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
