/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopQueryStatisticsInputProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopQueryStatisticsInputProperties::OAITopQueryStatisticsInputProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopQueryStatisticsInputProperties::OAITopQueryStatisticsInputProperties() {
    this->initializeModel();
}

OAITopQueryStatisticsInputProperties::~OAITopQueryStatisticsInputProperties() {}

void OAITopQueryStatisticsInputProperties::initializeModel() {

    m_aggregation_function_isSet = false;
    m_aggregation_function_isValid = false;

    m_aggregation_window_isSet = false;
    m_aggregation_window_isValid = false;

    m_number_of_top_queries_isSet = false;
    m_number_of_top_queries_isValid = false;

    m_observation_end_time_isSet = false;
    m_observation_end_time_isValid = false;

    m_observation_start_time_isSet = false;
    m_observation_start_time_isValid = false;

    m_observed_metric_isSet = false;
    m_observed_metric_isValid = false;
}

void OAITopQueryStatisticsInputProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopQueryStatisticsInputProperties::fromJsonObject(QJsonObject json) {

    m_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function, json[QString("aggregationFunction")]);
    m_aggregation_function_isSet = !json[QString("aggregationFunction")].isNull() && m_aggregation_function_isValid;

    m_aggregation_window_isValid = ::OpenAPI::fromJsonValue(m_aggregation_window, json[QString("aggregationWindow")]);
    m_aggregation_window_isSet = !json[QString("aggregationWindow")].isNull() && m_aggregation_window_isValid;

    m_number_of_top_queries_isValid = ::OpenAPI::fromJsonValue(m_number_of_top_queries, json[QString("numberOfTopQueries")]);
    m_number_of_top_queries_isSet = !json[QString("numberOfTopQueries")].isNull() && m_number_of_top_queries_isValid;

    m_observation_end_time_isValid = ::OpenAPI::fromJsonValue(m_observation_end_time, json[QString("observationEndTime")]);
    m_observation_end_time_isSet = !json[QString("observationEndTime")].isNull() && m_observation_end_time_isValid;

    m_observation_start_time_isValid = ::OpenAPI::fromJsonValue(m_observation_start_time, json[QString("observationStartTime")]);
    m_observation_start_time_isSet = !json[QString("observationStartTime")].isNull() && m_observation_start_time_isValid;

    m_observed_metric_isValid = ::OpenAPI::fromJsonValue(m_observed_metric, json[QString("observedMetric")]);
    m_observed_metric_isSet = !json[QString("observedMetric")].isNull() && m_observed_metric_isValid;
}

QString OAITopQueryStatisticsInputProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopQueryStatisticsInputProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_function_isSet) {
        obj.insert(QString("aggregationFunction"), ::OpenAPI::toJsonValue(m_aggregation_function));
    }
    if (m_aggregation_window_isSet) {
        obj.insert(QString("aggregationWindow"), ::OpenAPI::toJsonValue(m_aggregation_window));
    }
    if (m_number_of_top_queries_isSet) {
        obj.insert(QString("numberOfTopQueries"), ::OpenAPI::toJsonValue(m_number_of_top_queries));
    }
    if (m_observation_end_time_isSet) {
        obj.insert(QString("observationEndTime"), ::OpenAPI::toJsonValue(m_observation_end_time));
    }
    if (m_observation_start_time_isSet) {
        obj.insert(QString("observationStartTime"), ::OpenAPI::toJsonValue(m_observation_start_time));
    }
    if (m_observed_metric_isSet) {
        obj.insert(QString("observedMetric"), ::OpenAPI::toJsonValue(m_observed_metric));
    }
    return obj;
}

QString OAITopQueryStatisticsInputProperties::getAggregationFunction() const {
    return m_aggregation_function;
}
void OAITopQueryStatisticsInputProperties::setAggregationFunction(const QString &aggregation_function) {
    m_aggregation_function = aggregation_function;
    m_aggregation_function_isSet = true;
}

bool OAITopQueryStatisticsInputProperties::is_aggregation_function_Set() const{
    return m_aggregation_function_isSet;
}

bool OAITopQueryStatisticsInputProperties::is_aggregation_function_Valid() const{
    return m_aggregation_function_isValid;
}

QString OAITopQueryStatisticsInputProperties::getAggregationWindow() const {
    return m_aggregation_window;
}
void OAITopQueryStatisticsInputProperties::setAggregationWindow(const QString &aggregation_window) {
    m_aggregation_window = aggregation_window;
    m_aggregation_window_isSet = true;
}

bool OAITopQueryStatisticsInputProperties::is_aggregation_window_Set() const{
    return m_aggregation_window_isSet;
}

bool OAITopQueryStatisticsInputProperties::is_aggregation_window_Valid() const{
    return m_aggregation_window_isValid;
}

qint32 OAITopQueryStatisticsInputProperties::getNumberOfTopQueries() const {
    return m_number_of_top_queries;
}
void OAITopQueryStatisticsInputProperties::setNumberOfTopQueries(const qint32 &number_of_top_queries) {
    m_number_of_top_queries = number_of_top_queries;
    m_number_of_top_queries_isSet = true;
}

bool OAITopQueryStatisticsInputProperties::is_number_of_top_queries_Set() const{
    return m_number_of_top_queries_isSet;
}

bool OAITopQueryStatisticsInputProperties::is_number_of_top_queries_Valid() const{
    return m_number_of_top_queries_isValid;
}

QDateTime OAITopQueryStatisticsInputProperties::getObservationEndTime() const {
    return m_observation_end_time;
}
void OAITopQueryStatisticsInputProperties::setObservationEndTime(const QDateTime &observation_end_time) {
    m_observation_end_time = observation_end_time;
    m_observation_end_time_isSet = true;
}

bool OAITopQueryStatisticsInputProperties::is_observation_end_time_Set() const{
    return m_observation_end_time_isSet;
}

bool OAITopQueryStatisticsInputProperties::is_observation_end_time_Valid() const{
    return m_observation_end_time_isValid;
}

QDateTime OAITopQueryStatisticsInputProperties::getObservationStartTime() const {
    return m_observation_start_time;
}
void OAITopQueryStatisticsInputProperties::setObservationStartTime(const QDateTime &observation_start_time) {
    m_observation_start_time = observation_start_time;
    m_observation_start_time_isSet = true;
}

bool OAITopQueryStatisticsInputProperties::is_observation_start_time_Set() const{
    return m_observation_start_time_isSet;
}

bool OAITopQueryStatisticsInputProperties::is_observation_start_time_Valid() const{
    return m_observation_start_time_isValid;
}

QString OAITopQueryStatisticsInputProperties::getObservedMetric() const {
    return m_observed_metric;
}
void OAITopQueryStatisticsInputProperties::setObservedMetric(const QString &observed_metric) {
    m_observed_metric = observed_metric;
    m_observed_metric_isSet = true;
}

bool OAITopQueryStatisticsInputProperties::is_observed_metric_Set() const{
    return m_observed_metric_isSet;
}

bool OAITopQueryStatisticsInputProperties::is_observed_metric_Valid() const{
    return m_observed_metric_isValid;
}

bool OAITopQueryStatisticsInputProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aggregation_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_top_queries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_metric_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopQueryStatisticsInputProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aggregation_function_isValid && m_aggregation_window_isValid && m_number_of_top_queries_isValid && m_observation_end_time_isValid && m_observation_start_time_isValid && m_observed_metric_isValid && true;
}

} // namespace OpenAPI
