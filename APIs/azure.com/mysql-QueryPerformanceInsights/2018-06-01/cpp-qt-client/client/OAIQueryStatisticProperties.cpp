/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryStatisticProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryStatisticProperties::OAIQueryStatisticProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryStatisticProperties::OAIQueryStatisticProperties() {
    this->initializeModel();
}

OAIQueryStatisticProperties::~OAIQueryStatisticProperties() {}

void OAIQueryStatisticProperties::initializeModel() {

    m_aggregation_function_isSet = false;
    m_aggregation_function_isValid = false;

    m_database_names_isSet = false;
    m_database_names_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_metric_display_name_isSet = false;
    m_metric_display_name_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_metric_value_isSet = false;
    m_metric_value_isValid = false;

    m_metric_value_unit_isSet = false;
    m_metric_value_unit_isValid = false;

    m_query_execution_count_isSet = false;
    m_query_execution_count_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIQueryStatisticProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryStatisticProperties::fromJsonObject(QJsonObject json) {

    m_aggregation_function_isValid = ::OpenAPI::fromJsonValue(m_aggregation_function, json[QString("aggregationFunction")]);
    m_aggregation_function_isSet = !json[QString("aggregationFunction")].isNull() && m_aggregation_function_isValid;

    m_database_names_isValid = ::OpenAPI::fromJsonValue(m_database_names, json[QString("databaseNames")]);
    m_database_names_isSet = !json[QString("databaseNames")].isNull() && m_database_names_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_metric_display_name_isValid = ::OpenAPI::fromJsonValue(m_metric_display_name, json[QString("metricDisplayName")]);
    m_metric_display_name_isSet = !json[QString("metricDisplayName")].isNull() && m_metric_display_name_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_metric_value_isValid = ::OpenAPI::fromJsonValue(m_metric_value, json[QString("metricValue")]);
    m_metric_value_isSet = !json[QString("metricValue")].isNull() && m_metric_value_isValid;

    m_metric_value_unit_isValid = ::OpenAPI::fromJsonValue(m_metric_value_unit, json[QString("metricValueUnit")]);
    m_metric_value_unit_isSet = !json[QString("metricValueUnit")].isNull() && m_metric_value_unit_isValid;

    m_query_execution_count_isValid = ::OpenAPI::fromJsonValue(m_query_execution_count, json[QString("queryExecutionCount")]);
    m_query_execution_count_isSet = !json[QString("queryExecutionCount")].isNull() && m_query_execution_count_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("queryId")]);
    m_query_id_isSet = !json[QString("queryId")].isNull() && m_query_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIQueryStatisticProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryStatisticProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_function_isSet) {
        obj.insert(QString("aggregationFunction"), ::OpenAPI::toJsonValue(m_aggregation_function));
    }
    if (m_database_names.size() > 0) {
        obj.insert(QString("databaseNames"), ::OpenAPI::toJsonValue(m_database_names));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_metric_display_name_isSet) {
        obj.insert(QString("metricDisplayName"), ::OpenAPI::toJsonValue(m_metric_display_name));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_metric_value_isSet) {
        obj.insert(QString("metricValue"), ::OpenAPI::toJsonValue(m_metric_value));
    }
    if (m_metric_value_unit_isSet) {
        obj.insert(QString("metricValueUnit"), ::OpenAPI::toJsonValue(m_metric_value_unit));
    }
    if (m_query_execution_count_isSet) {
        obj.insert(QString("queryExecutionCount"), ::OpenAPI::toJsonValue(m_query_execution_count));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("queryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIQueryStatisticProperties::getAggregationFunction() const {
    return m_aggregation_function;
}
void OAIQueryStatisticProperties::setAggregationFunction(const QString &aggregation_function) {
    m_aggregation_function = aggregation_function;
    m_aggregation_function_isSet = true;
}

bool OAIQueryStatisticProperties::is_aggregation_function_Set() const{
    return m_aggregation_function_isSet;
}

bool OAIQueryStatisticProperties::is_aggregation_function_Valid() const{
    return m_aggregation_function_isValid;
}

QList<QString> OAIQueryStatisticProperties::getDatabaseNames() const {
    return m_database_names;
}
void OAIQueryStatisticProperties::setDatabaseNames(const QList<QString> &database_names) {
    m_database_names = database_names;
    m_database_names_isSet = true;
}

bool OAIQueryStatisticProperties::is_database_names_Set() const{
    return m_database_names_isSet;
}

bool OAIQueryStatisticProperties::is_database_names_Valid() const{
    return m_database_names_isValid;
}

QDateTime OAIQueryStatisticProperties::getEndTime() const {
    return m_end_time;
}
void OAIQueryStatisticProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIQueryStatisticProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIQueryStatisticProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIQueryStatisticProperties::getMetricDisplayName() const {
    return m_metric_display_name;
}
void OAIQueryStatisticProperties::setMetricDisplayName(const QString &metric_display_name) {
    m_metric_display_name = metric_display_name;
    m_metric_display_name_isSet = true;
}

bool OAIQueryStatisticProperties::is_metric_display_name_Set() const{
    return m_metric_display_name_isSet;
}

bool OAIQueryStatisticProperties::is_metric_display_name_Valid() const{
    return m_metric_display_name_isValid;
}

QString OAIQueryStatisticProperties::getMetricName() const {
    return m_metric_name;
}
void OAIQueryStatisticProperties::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIQueryStatisticProperties::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIQueryStatisticProperties::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

double OAIQueryStatisticProperties::getMetricValue() const {
    return m_metric_value;
}
void OAIQueryStatisticProperties::setMetricValue(const double &metric_value) {
    m_metric_value = metric_value;
    m_metric_value_isSet = true;
}

bool OAIQueryStatisticProperties::is_metric_value_Set() const{
    return m_metric_value_isSet;
}

bool OAIQueryStatisticProperties::is_metric_value_Valid() const{
    return m_metric_value_isValid;
}

QString OAIQueryStatisticProperties::getMetricValueUnit() const {
    return m_metric_value_unit;
}
void OAIQueryStatisticProperties::setMetricValueUnit(const QString &metric_value_unit) {
    m_metric_value_unit = metric_value_unit;
    m_metric_value_unit_isSet = true;
}

bool OAIQueryStatisticProperties::is_metric_value_unit_Set() const{
    return m_metric_value_unit_isSet;
}

bool OAIQueryStatisticProperties::is_metric_value_unit_Valid() const{
    return m_metric_value_unit_isValid;
}

qint64 OAIQueryStatisticProperties::getQueryExecutionCount() const {
    return m_query_execution_count;
}
void OAIQueryStatisticProperties::setQueryExecutionCount(const qint64 &query_execution_count) {
    m_query_execution_count = query_execution_count;
    m_query_execution_count_isSet = true;
}

bool OAIQueryStatisticProperties::is_query_execution_count_Set() const{
    return m_query_execution_count_isSet;
}

bool OAIQueryStatisticProperties::is_query_execution_count_Valid() const{
    return m_query_execution_count_isValid;
}

QString OAIQueryStatisticProperties::getQueryId() const {
    return m_query_id;
}
void OAIQueryStatisticProperties::setQueryId(const QString &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIQueryStatisticProperties::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIQueryStatisticProperties::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QDateTime OAIQueryStatisticProperties::getStartTime() const {
    return m_start_time;
}
void OAIQueryStatisticProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIQueryStatisticProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIQueryStatisticProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIQueryStatisticProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_value_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_execution_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryStatisticProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
