/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueryStatisticProperties.h
 *
 * The properties of a query statistic.
 */

#ifndef OAIQueryStatisticProperties_H
#define OAIQueryStatisticProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIQueryStatisticProperties : public OAIObject {
public:
    OAIQueryStatisticProperties();
    OAIQueryStatisticProperties(QString json);
    ~OAIQueryStatisticProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAggregationFunction() const;
    void setAggregationFunction(const QString &aggregation_function);
    bool is_aggregation_function_Set() const;
    bool is_aggregation_function_Valid() const;

    QList<QString> getDatabaseNames() const;
    void setDatabaseNames(const QList<QString> &database_names);
    bool is_database_names_Set() const;
    bool is_database_names_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getMetricDisplayName() const;
    void setMetricDisplayName(const QString &metric_display_name);
    bool is_metric_display_name_Set() const;
    bool is_metric_display_name_Valid() const;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    double getMetricValue() const;
    void setMetricValue(const double &metric_value);
    bool is_metric_value_Set() const;
    bool is_metric_value_Valid() const;

    QString getMetricValueUnit() const;
    void setMetricValueUnit(const QString &metric_value_unit);
    bool is_metric_value_unit_Set() const;
    bool is_metric_value_unit_Valid() const;

    qint64 getQueryExecutionCount() const;
    void setQueryExecutionCount(const qint64 &query_execution_count);
    bool is_query_execution_count_Set() const;
    bool is_query_execution_count_Valid() const;

    QString getQueryId() const;
    void setQueryId(const QString &query_id);
    bool is_query_id_Set() const;
    bool is_query_id_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aggregation_function;
    bool m_aggregation_function_isSet;
    bool m_aggregation_function_isValid;

    QList<QString> m_database_names;
    bool m_database_names_isSet;
    bool m_database_names_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_metric_display_name;
    bool m_metric_display_name_isSet;
    bool m_metric_display_name_isValid;

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    double m_metric_value;
    bool m_metric_value_isSet;
    bool m_metric_value_isValid;

    QString m_metric_value_unit;
    bool m_metric_value_unit_isSet;
    bool m_metric_value_unit_isValid;

    qint64 m_query_execution_count;
    bool m_query_execution_count_isSet;
    bool m_query_execution_count_isValid;

    QString m_query_id;
    bool m_query_id_isSet;
    bool m_query_id_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueryStatisticProperties)

#endif // OAIQueryStatisticProperties_H
