/*
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WaitStatistic;
import org.openapitools.client.model.WaitStatisticsInput;
import org.openapitools.client.model.WaitStatisticsResultList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WaitStatisticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WaitStatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WaitStatisticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for waitStatisticsGet
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param serverName The name of the server. (required)
     * @param waitStatisticsId The Wait Statistic identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitStatisticsGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String waitStatisticsId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/waitStatistics/{waitStatisticsId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "waitStatisticsId" + "}", localVarApiClient.escapeString(waitStatisticsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitStatisticsGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String waitStatisticsId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling waitStatisticsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling waitStatisticsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling waitStatisticsGet(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling waitStatisticsGet(Async)");
        }

        // verify the required parameter 'waitStatisticsId' is set
        if (waitStatisticsId == null) {
            throw new ApiException("Missing the required parameter 'waitStatisticsId' when calling waitStatisticsGet(Async)");
        }

        return waitStatisticsGetCall(apiVersion, subscriptionId, resourceGroupName, serverName, waitStatisticsId, _callback);

    }

    /**
     * 
     * Retrieve wait statistics for specified identifier.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param serverName The name of the server. (required)
     * @param waitStatisticsId The Wait Statistic identifier. (required)
     * @return WaitStatistic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WaitStatistic waitStatisticsGet(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String waitStatisticsId) throws ApiException {
        ApiResponse<WaitStatistic> localVarResp = waitStatisticsGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, serverName, waitStatisticsId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve wait statistics for specified identifier.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param serverName The name of the server. (required)
     * @param waitStatisticsId The Wait Statistic identifier. (required)
     * @return ApiResponse&lt;WaitStatistic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitStatistic> waitStatisticsGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String waitStatisticsId) throws ApiException {
        okhttp3.Call localVarCall = waitStatisticsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, waitStatisticsId, null);
        Type localVarReturnType = new TypeToken<WaitStatistic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve wait statistics for specified identifier.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param serverName The name of the server. (required)
     * @param waitStatisticsId The Wait Statistic identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitStatisticsGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, String waitStatisticsId, final ApiCallback<WaitStatistic> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitStatisticsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, waitStatisticsId, _callback);
        Type localVarReturnType = new TypeToken<WaitStatistic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waitStatisticsListByServer
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param serverName The name of the server. (required)
     * @param parameters The required parameters for retrieving wait statistics. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitStatisticsListByServerCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, WaitStatisticsInput parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/waitStatistics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitStatisticsListByServerValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, WaitStatisticsInput parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling waitStatisticsListByServer(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling waitStatisticsListByServer(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling waitStatisticsListByServer(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling waitStatisticsListByServer(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling waitStatisticsListByServer(Async)");
        }

        return waitStatisticsListByServerCall(apiVersion, subscriptionId, resourceGroupName, serverName, parameters, _callback);

    }

    /**
     * 
     * Retrieve wait statistics for specified aggregation window.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param serverName The name of the server. (required)
     * @param parameters The required parameters for retrieving wait statistics. (required)
     * @return WaitStatisticsResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WaitStatisticsResultList waitStatisticsListByServer(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, WaitStatisticsInput parameters) throws ApiException {
        ApiResponse<WaitStatisticsResultList> localVarResp = waitStatisticsListByServerWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, serverName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve wait statistics for specified aggregation window.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param serverName The name of the server. (required)
     * @param parameters The required parameters for retrieving wait statistics. (required)
     * @return ApiResponse&lt;WaitStatisticsResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WaitStatisticsResultList> waitStatisticsListByServerWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, WaitStatisticsInput parameters) throws ApiException {
        okhttp3.Call localVarCall = waitStatisticsListByServerValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, parameters, null);
        Type localVarReturnType = new TypeToken<WaitStatisticsResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve wait statistics for specified aggregation window.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param serverName The name of the server. (required)
     * @param parameters The required parameters for retrieving wait statistics. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waitStatisticsListByServerAsync(String apiVersion, String subscriptionId, String resourceGroupName, String serverName, WaitStatisticsInput parameters, final ApiCallback<WaitStatisticsResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitStatisticsListByServerValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, serverName, parameters, _callback);
        Type localVarReturnType = new TypeToken<WaitStatisticsResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
