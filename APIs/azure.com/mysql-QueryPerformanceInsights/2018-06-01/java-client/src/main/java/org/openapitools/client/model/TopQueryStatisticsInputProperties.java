/*
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties for input to get top query statistics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:17.063732-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopQueryStatisticsInputProperties {
  public static final String SERIALIZED_NAME_AGGREGATION_FUNCTION = "aggregationFunction";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_FUNCTION)
  private String aggregationFunction;

  public static final String SERIALIZED_NAME_AGGREGATION_WINDOW = "aggregationWindow";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_WINDOW)
  private String aggregationWindow;

  public static final String SERIALIZED_NAME_NUMBER_OF_TOP_QUERIES = "numberOfTopQueries";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TOP_QUERIES)
  private Integer numberOfTopQueries;

  public static final String SERIALIZED_NAME_OBSERVATION_END_TIME = "observationEndTime";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_END_TIME)
  private OffsetDateTime observationEndTime;

  public static final String SERIALIZED_NAME_OBSERVATION_START_TIME = "observationStartTime";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_START_TIME)
  private OffsetDateTime observationStartTime;

  public static final String SERIALIZED_NAME_OBSERVED_METRIC = "observedMetric";
  @SerializedName(SERIALIZED_NAME_OBSERVED_METRIC)
  private String observedMetric;

  public TopQueryStatisticsInputProperties() {
  }

  public TopQueryStatisticsInputProperties aggregationFunction(String aggregationFunction) {
    this.aggregationFunction = aggregationFunction;
    return this;
  }

  /**
   * Aggregation function name.
   * @return aggregationFunction
   */
  @javax.annotation.Nonnull
  public String getAggregationFunction() {
    return aggregationFunction;
  }

  public void setAggregationFunction(String aggregationFunction) {
    this.aggregationFunction = aggregationFunction;
  }


  public TopQueryStatisticsInputProperties aggregationWindow(String aggregationWindow) {
    this.aggregationWindow = aggregationWindow;
    return this;
  }

  /**
   * Aggregation interval type in ISO 8601 format.
   * @return aggregationWindow
   */
  @javax.annotation.Nonnull
  public String getAggregationWindow() {
    return aggregationWindow;
  }

  public void setAggregationWindow(String aggregationWindow) {
    this.aggregationWindow = aggregationWindow;
  }


  public TopQueryStatisticsInputProperties numberOfTopQueries(Integer numberOfTopQueries) {
    this.numberOfTopQueries = numberOfTopQueries;
    return this;
  }

  /**
   * Max number of top queries to return.
   * @return numberOfTopQueries
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfTopQueries() {
    return numberOfTopQueries;
  }

  public void setNumberOfTopQueries(Integer numberOfTopQueries) {
    this.numberOfTopQueries = numberOfTopQueries;
  }


  public TopQueryStatisticsInputProperties observationEndTime(OffsetDateTime observationEndTime) {
    this.observationEndTime = observationEndTime;
    return this;
  }

  /**
   * Observation end time.
   * @return observationEndTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getObservationEndTime() {
    return observationEndTime;
  }

  public void setObservationEndTime(OffsetDateTime observationEndTime) {
    this.observationEndTime = observationEndTime;
  }


  public TopQueryStatisticsInputProperties observationStartTime(OffsetDateTime observationStartTime) {
    this.observationStartTime = observationStartTime;
    return this;
  }

  /**
   * Observation start time.
   * @return observationStartTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getObservationStartTime() {
    return observationStartTime;
  }

  public void setObservationStartTime(OffsetDateTime observationStartTime) {
    this.observationStartTime = observationStartTime;
  }


  public TopQueryStatisticsInputProperties observedMetric(String observedMetric) {
    this.observedMetric = observedMetric;
    return this;
  }

  /**
   * Observed metric name.
   * @return observedMetric
   */
  @javax.annotation.Nonnull
  public String getObservedMetric() {
    return observedMetric;
  }

  public void setObservedMetric(String observedMetric) {
    this.observedMetric = observedMetric;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopQueryStatisticsInputProperties topQueryStatisticsInputProperties = (TopQueryStatisticsInputProperties) o;
    return Objects.equals(this.aggregationFunction, topQueryStatisticsInputProperties.aggregationFunction) &&
        Objects.equals(this.aggregationWindow, topQueryStatisticsInputProperties.aggregationWindow) &&
        Objects.equals(this.numberOfTopQueries, topQueryStatisticsInputProperties.numberOfTopQueries) &&
        Objects.equals(this.observationEndTime, topQueryStatisticsInputProperties.observationEndTime) &&
        Objects.equals(this.observationStartTime, topQueryStatisticsInputProperties.observationStartTime) &&
        Objects.equals(this.observedMetric, topQueryStatisticsInputProperties.observedMetric);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationFunction, aggregationWindow, numberOfTopQueries, observationEndTime, observationStartTime, observedMetric);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopQueryStatisticsInputProperties {\n");
    sb.append("    aggregationFunction: ").append(toIndentedString(aggregationFunction)).append("\n");
    sb.append("    aggregationWindow: ").append(toIndentedString(aggregationWindow)).append("\n");
    sb.append("    numberOfTopQueries: ").append(toIndentedString(numberOfTopQueries)).append("\n");
    sb.append("    observationEndTime: ").append(toIndentedString(observationEndTime)).append("\n");
    sb.append("    observationStartTime: ").append(toIndentedString(observationStartTime)).append("\n");
    sb.append("    observedMetric: ").append(toIndentedString(observedMetric)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationFunction");
    openapiFields.add("aggregationWindow");
    openapiFields.add("numberOfTopQueries");
    openapiFields.add("observationEndTime");
    openapiFields.add("observationStartTime");
    openapiFields.add("observedMetric");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aggregationFunction");
    openapiRequiredFields.add("aggregationWindow");
    openapiRequiredFields.add("numberOfTopQueries");
    openapiRequiredFields.add("observationEndTime");
    openapiRequiredFields.add("observationStartTime");
    openapiRequiredFields.add("observedMetric");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopQueryStatisticsInputProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopQueryStatisticsInputProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopQueryStatisticsInputProperties is not found in the empty JSON string", TopQueryStatisticsInputProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopQueryStatisticsInputProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopQueryStatisticsInputProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TopQueryStatisticsInputProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("aggregationFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationFunction").toString()));
      }
      if (!jsonObj.get("aggregationWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationWindow").toString()));
      }
      if (!jsonObj.get("observedMetric").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observedMetric` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observedMetric").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopQueryStatisticsInputProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopQueryStatisticsInputProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopQueryStatisticsInputProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopQueryStatisticsInputProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TopQueryStatisticsInputProperties>() {
           @Override
           public void write(JsonWriter out, TopQueryStatisticsInputProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopQueryStatisticsInputProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopQueryStatisticsInputProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopQueryStatisticsInputProperties
   * @throws IOException if the JSON string is invalid with respect to TopQueryStatisticsInputProperties
   */
  public static TopQueryStatisticsInputProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopQueryStatisticsInputProperties.class);
  }

  /**
   * Convert an instance of TopQueryStatisticsInputProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

