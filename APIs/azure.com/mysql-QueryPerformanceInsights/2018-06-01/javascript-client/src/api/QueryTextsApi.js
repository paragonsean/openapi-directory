/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QueryText from '../model/QueryText';
import QueryTextsResultList from '../model/QueryTextsResultList';

/**
* QueryTexts service.
* @module api/QueryTextsApi
* @version 2018-06-01
*/
export default class QueryTextsApi {

    /**
    * Constructs a new QueryTextsApi. 
    * @alias module:api/QueryTextsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the queryTextsGet operation.
     * @callback module:api/QueryTextsApi~queryTextsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryText} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the Query-Store query texts for the queryId.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} serverName The name of the server.
     * @param {String} queryId The Query-Store query identifier.
     * @param {module:api/QueryTextsApi~queryTextsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryText}
     */
    queryTextsGet(apiVersion, subscriptionId, resourceGroupName, serverName, queryId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryTextsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queryTextsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queryTextsGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling queryTextsGet");
      }
      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling queryTextsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'queryId': queryId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryText;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/queryTexts/{queryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryTextsListByServer operation.
     * @callback module:api/QueryTextsApi~queryTextsListByServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryTextsResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} serverName The name of the server.
     * @param {Array.<String>} queryIds The query identifiers
     * @param {module:api/QueryTextsApi~queryTextsListByServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryTextsResultList}
     */
    queryTextsListByServer(apiVersion, subscriptionId, resourceGroupName, serverName, queryIds, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling queryTextsListByServer");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling queryTextsListByServer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling queryTextsListByServer");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling queryTextsListByServer");
      }
      // verify the required parameter 'queryIds' is set
      if (queryIds === undefined || queryIds === null) {
        throw new Error("Missing the required parameter 'queryIds' when calling queryTextsListByServer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName
      };
      let queryParams = {
        'api-version': apiVersion,
        'queryIds': this.apiClient.buildCollectionParam(queryIds, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryTextsResultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/queryTexts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
