/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpRequestInfo from './HttpRequestInfo';
import LocalizableString from './LocalizableString';
import SenderAuthorization from './SenderAuthorization';

/**
 * The EventData model module.
 * @module model/EventData
 * @version 2015-04-01
 */
class EventData {
    /**
     * Constructs a new <code>EventData</code>.
     * The Azure event log entries are of type EventData
     * @alias module:model/EventData
     */
    constructor() { 
        
        EventData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventData} obj Optional instance to populate.
     * @return {module:model/EventData} The populated <code>EventData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventData();

            if (data.hasOwnProperty('authorization')) {
                obj['authorization'] = SenderAuthorization.constructFromObject(data['authorization']);
            }
            if (data.hasOwnProperty('caller')) {
                obj['caller'] = ApiClient.convertToType(data['caller'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = LocalizableString.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('claims')) {
                obj['claims'] = ApiClient.convertToType(data['claims'], {'String': 'String'});
            }
            if (data.hasOwnProperty('correlationId')) {
                obj['correlationId'] = ApiClient.convertToType(data['correlationId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eventDataId')) {
                obj['eventDataId'] = ApiClient.convertToType(data['eventDataId'], 'String');
            }
            if (data.hasOwnProperty('eventName')) {
                obj['eventName'] = LocalizableString.constructFromObject(data['eventName']);
            }
            if (data.hasOwnProperty('eventTimestamp')) {
                obj['eventTimestamp'] = ApiClient.convertToType(data['eventTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('httpRequest')) {
                obj['httpRequest'] = HttpRequestInfo.constructFromObject(data['httpRequest']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('operationName')) {
                obj['operationName'] = LocalizableString.constructFromObject(data['operationName']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('resourceGroupName')) {
                obj['resourceGroupName'] = ApiClient.convertToType(data['resourceGroupName'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceProviderName')) {
                obj['resourceProviderName'] = LocalizableString.constructFromObject(data['resourceProviderName']);
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = LocalizableString.constructFromObject(data['resourceType']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = LocalizableString.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('subStatus')) {
                obj['subStatus'] = LocalizableString.constructFromObject(data['subStatus']);
            }
            if (data.hasOwnProperty('submissionTimestamp')) {
                obj['submissionTimestamp'] = ApiClient.convertToType(data['submissionTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authorization`
        if (data['authorization']) { // data not null
          SenderAuthorization.validateJSON(data['authorization']);
        }
        // ensure the json data is a string
        if (data['caller'] && !(typeof data['caller'] === 'string' || data['caller'] instanceof String)) {
            throw new Error("Expected the field `caller` to be a primitive type in the JSON string but got " + data['caller']);
        }
        // validate the optional field `category`
        if (data['category']) { // data not null
          LocalizableString.validateJSON(data['category']);
        }
        // ensure the json data is a string
        if (data['correlationId'] && !(typeof data['correlationId'] === 'string' || data['correlationId'] instanceof String)) {
            throw new Error("Expected the field `correlationId` to be a primitive type in the JSON string but got " + data['correlationId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['eventDataId'] && !(typeof data['eventDataId'] === 'string' || data['eventDataId'] instanceof String)) {
            throw new Error("Expected the field `eventDataId` to be a primitive type in the JSON string but got " + data['eventDataId']);
        }
        // validate the optional field `eventName`
        if (data['eventName']) { // data not null
          LocalizableString.validateJSON(data['eventName']);
        }
        // validate the optional field `httpRequest`
        if (data['httpRequest']) { // data not null
          HttpRequestInfo.validateJSON(data['httpRequest']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }
        // validate the optional field `operationName`
        if (data['operationName']) { // data not null
          LocalizableString.validateJSON(data['operationName']);
        }
        // ensure the json data is a string
        if (data['resourceGroupName'] && !(typeof data['resourceGroupName'] === 'string' || data['resourceGroupName'] instanceof String)) {
            throw new Error("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got " + data['resourceGroupName']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // validate the optional field `resourceProviderName`
        if (data['resourceProviderName']) { // data not null
          LocalizableString.validateJSON(data['resourceProviderName']);
        }
        // validate the optional field `resourceType`
        if (data['resourceType']) { // data not null
          LocalizableString.validateJSON(data['resourceType']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          LocalizableString.validateJSON(data['status']);
        }
        // validate the optional field `subStatus`
        if (data['subStatus']) { // data not null
          LocalizableString.validateJSON(data['subStatus']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}



/**
 * @member {module:model/SenderAuthorization} authorization
 */
EventData.prototype['authorization'] = undefined;

/**
 * the email address of the user who has performed the operation, the UPN claim or SPN claim based on availability.
 * @member {String} caller
 */
EventData.prototype['caller'] = undefined;

/**
 * @member {module:model/LocalizableString} category
 */
EventData.prototype['category'] = undefined;

/**
 * key value pairs to identify ARM permissions.
 * @member {Object.<String, String>} claims
 */
EventData.prototype['claims'] = undefined;

/**
 * the correlation Id, usually a GUID in the string format. The correlation Id is shared among the events that belong to the same uber operation.
 * @member {String} correlationId
 */
EventData.prototype['correlationId'] = undefined;

/**
 * the description of the event.
 * @member {String} description
 */
EventData.prototype['description'] = undefined;

/**
 * the event data Id. This is a unique identifier for an event.
 * @member {String} eventDataId
 */
EventData.prototype['eventDataId'] = undefined;

/**
 * @member {module:model/LocalizableString} eventName
 */
EventData.prototype['eventName'] = undefined;

/**
 * the timestamp of when the event was generated by the Azure service processing the request corresponding the event. It in ISO 8601 format.
 * @member {Date} eventTimestamp
 */
EventData.prototype['eventTimestamp'] = undefined;

/**
 * @member {module:model/HttpRequestInfo} httpRequest
 */
EventData.prototype['httpRequest'] = undefined;

/**
 * the Id of this event as required by ARM for RBAC. It contains the EventDataID and a timestamp information.
 * @member {String} id
 */
EventData.prototype['id'] = undefined;

/**
 * the event level
 * @member {module:model/EventData.LevelEnum} level
 */
EventData.prototype['level'] = undefined;

/**
 * It is usually a GUID shared among the events corresponding to single operation. This value should not be confused with EventName.
 * @member {String} operationId
 */
EventData.prototype['operationId'] = undefined;

/**
 * @member {module:model/LocalizableString} operationName
 */
EventData.prototype['operationName'] = undefined;

/**
 * the set of <Key, Value> pairs (usually a Dictionary<String, String>) that includes details about the event.
 * @member {Object.<String, String>} properties
 */
EventData.prototype['properties'] = undefined;

/**
 * the resource group name of the impacted resource.
 * @member {String} resourceGroupName
 */
EventData.prototype['resourceGroupName'] = undefined;

/**
 * the resource uri that uniquely identifies the resource that caused this event.
 * @member {String} resourceId
 */
EventData.prototype['resourceId'] = undefined;

/**
 * @member {module:model/LocalizableString} resourceProviderName
 */
EventData.prototype['resourceProviderName'] = undefined;

/**
 * @member {module:model/LocalizableString} resourceType
 */
EventData.prototype['resourceType'] = undefined;

/**
 * @member {module:model/LocalizableString} status
 */
EventData.prototype['status'] = undefined;

/**
 * @member {module:model/LocalizableString} subStatus
 */
EventData.prototype['subStatus'] = undefined;

/**
 * the timestamp of when the event became available for querying via this API. It is in ISO 8601 format. This value should not be confused eventTimestamp. As there might be a delay between the occurrence time of the event, and the time that the event is submitted to the Azure logging infrastructure.
 * @member {Date} submissionTimestamp
 */
EventData.prototype['submissionTimestamp'] = undefined;

/**
 * the Azure subscription Id usually a GUID.
 * @member {String} subscriptionId
 */
EventData.prototype['subscriptionId'] = undefined;

/**
 * the Azure tenant Id
 * @member {String} tenantId
 */
EventData.prototype['tenantId'] = undefined;





/**
 * Allowed values for the <code>level</code> property.
 * @enum {String}
 * @readonly
 */
EventData['LevelEnum'] = {

    /**
     * value: "Critical"
     * @const
     */
    "Critical": "Critical",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Informational"
     * @const
     */
    "Informational": "Informational",

    /**
     * value: "Verbose"
     * @const
     */
    "Verbose": "Verbose"
};



export default EventData;

