# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SenderAuthorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, role: str=None, scope: str=None):
        """SenderAuthorization - a model defined in OpenAPI

        :param action: The action of this SenderAuthorization.
        :param role: The role of this SenderAuthorization.
        :param scope: The scope of this SenderAuthorization.
        """
        self.openapi_types = {
            'action': str,
            'role': str,
            'scope': str
        }

        self.attribute_map = {
            'action': 'action',
            'role': 'role',
            'scope': 'scope'
        }

        self._action = action
        self._role = role
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SenderAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SenderAuthorization of this SenderAuthorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this SenderAuthorization.

        the permissible actions. For instance: microsoft.support/supporttickets/write

        :return: The action of this SenderAuthorization.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this SenderAuthorization.

        the permissible actions. For instance: microsoft.support/supporttickets/write

        :param action: The action of this SenderAuthorization.
        :type action: str
        """

        self._action = action

    @property
    def role(self):
        """Gets the role of this SenderAuthorization.

        the role of the user. For instance: Subscription Admin

        :return: The role of this SenderAuthorization.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this SenderAuthorization.

        the role of the user. For instance: Subscription Admin

        :param role: The role of this SenderAuthorization.
        :type role: str
        """

        self._role = role

    @property
    def scope(self):
        """Gets the scope of this SenderAuthorization.

        the scope.

        :return: The scope of this SenderAuthorization.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this SenderAuthorization.

        the scope.

        :param scope: The scope of this SenderAuthorization.
        :type scope: str
        """

        self._scope = scope
