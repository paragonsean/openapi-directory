/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.HttpRequestInfo;
import org.openapitools.client.model.LocalizableString;
import org.openapitools.client.model.SenderAuthorization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Azure event log entries are of type EventData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:32.411307-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventData {
  public static final String SERIALIZED_NAME_AUTHORIZATION = "authorization";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION)
  private SenderAuthorization authorization;

  public static final String SERIALIZED_NAME_CALLER = "caller";
  @SerializedName(SERIALIZED_NAME_CALLER)
  private String caller;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private LocalizableString category;

  public static final String SERIALIZED_NAME_CLAIMS = "claims";
  @SerializedName(SERIALIZED_NAME_CLAIMS)
  private Map<String, String> claims = new HashMap<>();

  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private String correlationId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_DATA_ID = "eventDataId";
  @SerializedName(SERIALIZED_NAME_EVENT_DATA_ID)
  private String eventDataId;

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private LocalizableString eventName;

  public static final String SERIALIZED_NAME_EVENT_TIMESTAMP = "eventTimestamp";
  @SerializedName(SERIALIZED_NAME_EVENT_TIMESTAMP)
  private OffsetDateTime eventTimestamp;

  public static final String SERIALIZED_NAME_HTTP_REQUEST = "httpRequest";
  @SerializedName(SERIALIZED_NAME_HTTP_REQUEST)
  private HttpRequestInfo httpRequest;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * the event level
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    CRITICAL("Critical"),
    
    ERROR("Error"),
    
    WARNING("Warning"),
    
    INFORMATIONAL("Informational"),
    
    VERBOSE("Verbose");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private LevelEnum level;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_OPERATION_NAME = "operationName";
  @SerializedName(SERIALIZED_NAME_OPERATION_NAME)
  private LocalizableString operationName;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_NAME = "resourceGroupName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_NAME)
  private String resourceGroupName;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_PROVIDER_NAME = "resourceProviderName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PROVIDER_NAME)
  private LocalizableString resourceProviderName;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private LocalizableString resourceType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LocalizableString status;

  public static final String SERIALIZED_NAME_SUB_STATUS = "subStatus";
  @SerializedName(SERIALIZED_NAME_SUB_STATUS)
  private LocalizableString subStatus;

  public static final String SERIALIZED_NAME_SUBMISSION_TIMESTAMP = "submissionTimestamp";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_TIMESTAMP)
  private OffsetDateTime submissionTimestamp;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public EventData() {
  }

  public EventData(
     String caller, 
     Map<String, String> claims, 
     String correlationId, 
     String description, 
     String eventDataId, 
     OffsetDateTime eventTimestamp, 
     String id, 
     LevelEnum level, 
     String operationId, 
     Map<String, String> properties, 
     String resourceGroupName, 
     String resourceId, 
     OffsetDateTime submissionTimestamp, 
     String subscriptionId, 
     String tenantId
  ) {
    this();
    this.caller = caller;
    this.claims = claims;
    this.correlationId = correlationId;
    this.description = description;
    this.eventDataId = eventDataId;
    this.eventTimestamp = eventTimestamp;
    this.id = id;
    this.level = level;
    this.operationId = operationId;
    this.properties = properties;
    this.resourceGroupName = resourceGroupName;
    this.resourceId = resourceId;
    this.submissionTimestamp = submissionTimestamp;
    this.subscriptionId = subscriptionId;
    this.tenantId = tenantId;
  }

  public EventData authorization(SenderAuthorization authorization) {
    this.authorization = authorization;
    return this;
  }

  /**
   * Get authorization
   * @return authorization
   */
  @javax.annotation.Nullable
  public SenderAuthorization getAuthorization() {
    return authorization;
  }

  public void setAuthorization(SenderAuthorization authorization) {
    this.authorization = authorization;
  }


  /**
   * the email address of the user who has performed the operation, the UPN claim or SPN claim based on availability.
   * @return caller
   */
  @javax.annotation.Nullable
  public String getCaller() {
    return caller;
  }



  public EventData category(LocalizableString category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public LocalizableString getCategory() {
    return category;
  }

  public void setCategory(LocalizableString category) {
    this.category = category;
  }


  /**
   * key value pairs to identify ARM permissions.
   * @return claims
   */
  @javax.annotation.Nullable
  public Map<String, String> getClaims() {
    return claims;
  }



  /**
   * the correlation Id, usually a GUID in the string format. The correlation Id is shared among the events that belong to the same uber operation.
   * @return correlationId
   */
  @javax.annotation.Nullable
  public String getCorrelationId() {
    return correlationId;
  }



  /**
   * the description of the event.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * the event data Id. This is a unique identifier for an event.
   * @return eventDataId
   */
  @javax.annotation.Nullable
  public String getEventDataId() {
    return eventDataId;
  }



  public EventData eventName(LocalizableString eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Get eventName
   * @return eventName
   */
  @javax.annotation.Nullable
  public LocalizableString getEventName() {
    return eventName;
  }

  public void setEventName(LocalizableString eventName) {
    this.eventName = eventName;
  }


  /**
   * the timestamp of when the event was generated by the Azure service processing the request corresponding the event. It in ISO 8601 format.
   * @return eventTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventTimestamp() {
    return eventTimestamp;
  }



  public EventData httpRequest(HttpRequestInfo httpRequest) {
    this.httpRequest = httpRequest;
    return this;
  }

  /**
   * Get httpRequest
   * @return httpRequest
   */
  @javax.annotation.Nullable
  public HttpRequestInfo getHttpRequest() {
    return httpRequest;
  }

  public void setHttpRequest(HttpRequestInfo httpRequest) {
    this.httpRequest = httpRequest;
  }


  /**
   * the Id of this event as required by ARM for RBAC. It contains the EventDataID and a timestamp information.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * the event level
   * @return level
   */
  @javax.annotation.Nullable
  public LevelEnum getLevel() {
    return level;
  }



  /**
   * It is usually a GUID shared among the events corresponding to single operation. This value should not be confused with EventName.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }



  public EventData operationName(LocalizableString operationName) {
    this.operationName = operationName;
    return this;
  }

  /**
   * Get operationName
   * @return operationName
   */
  @javax.annotation.Nullable
  public LocalizableString getOperationName() {
    return operationName;
  }

  public void setOperationName(LocalizableString operationName) {
    this.operationName = operationName;
  }


  /**
   * the set of &lt;Key, Value&gt; pairs (usually a Dictionary&lt;String, String&gt;) that includes details about the event.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }



  /**
   * the resource group name of the impacted resource.
   * @return resourceGroupName
   */
  @javax.annotation.Nullable
  public String getResourceGroupName() {
    return resourceGroupName;
  }



  /**
   * the resource uri that uniquely identifies the resource that caused this event.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }



  public EventData resourceProviderName(LocalizableString resourceProviderName) {
    this.resourceProviderName = resourceProviderName;
    return this;
  }

  /**
   * Get resourceProviderName
   * @return resourceProviderName
   */
  @javax.annotation.Nullable
  public LocalizableString getResourceProviderName() {
    return resourceProviderName;
  }

  public void setResourceProviderName(LocalizableString resourceProviderName) {
    this.resourceProviderName = resourceProviderName;
  }


  public EventData resourceType(LocalizableString resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public LocalizableString getResourceType() {
    return resourceType;
  }

  public void setResourceType(LocalizableString resourceType) {
    this.resourceType = resourceType;
  }


  public EventData status(LocalizableString status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public LocalizableString getStatus() {
    return status;
  }

  public void setStatus(LocalizableString status) {
    this.status = status;
  }


  public EventData subStatus(LocalizableString subStatus) {
    this.subStatus = subStatus;
    return this;
  }

  /**
   * Get subStatus
   * @return subStatus
   */
  @javax.annotation.Nullable
  public LocalizableString getSubStatus() {
    return subStatus;
  }

  public void setSubStatus(LocalizableString subStatus) {
    this.subStatus = subStatus;
  }


  /**
   * the timestamp of when the event became available for querying via this API. It is in ISO 8601 format. This value should not be confused eventTimestamp. As there might be a delay between the occurrence time of the event, and the time that the event is submitted to the Azure logging infrastructure.
   * @return submissionTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmissionTimestamp() {
    return submissionTimestamp;
  }



  /**
   * the Azure subscription Id usually a GUID.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }



  /**
   * the Azure tenant Id
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventData eventData = (EventData) o;
    return Objects.equals(this.authorization, eventData.authorization) &&
        Objects.equals(this.caller, eventData.caller) &&
        Objects.equals(this.category, eventData.category) &&
        Objects.equals(this.claims, eventData.claims) &&
        Objects.equals(this.correlationId, eventData.correlationId) &&
        Objects.equals(this.description, eventData.description) &&
        Objects.equals(this.eventDataId, eventData.eventDataId) &&
        Objects.equals(this.eventName, eventData.eventName) &&
        Objects.equals(this.eventTimestamp, eventData.eventTimestamp) &&
        Objects.equals(this.httpRequest, eventData.httpRequest) &&
        Objects.equals(this.id, eventData.id) &&
        Objects.equals(this.level, eventData.level) &&
        Objects.equals(this.operationId, eventData.operationId) &&
        Objects.equals(this.operationName, eventData.operationName) &&
        Objects.equals(this.properties, eventData.properties) &&
        Objects.equals(this.resourceGroupName, eventData.resourceGroupName) &&
        Objects.equals(this.resourceId, eventData.resourceId) &&
        Objects.equals(this.resourceProviderName, eventData.resourceProviderName) &&
        Objects.equals(this.resourceType, eventData.resourceType) &&
        Objects.equals(this.status, eventData.status) &&
        Objects.equals(this.subStatus, eventData.subStatus) &&
        Objects.equals(this.submissionTimestamp, eventData.submissionTimestamp) &&
        Objects.equals(this.subscriptionId, eventData.subscriptionId) &&
        Objects.equals(this.tenantId, eventData.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorization, caller, category, claims, correlationId, description, eventDataId, eventName, eventTimestamp, httpRequest, id, level, operationId, operationName, properties, resourceGroupName, resourceId, resourceProviderName, resourceType, status, subStatus, submissionTimestamp, subscriptionId, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventData {\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    caller: ").append(toIndentedString(caller)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventDataId: ").append(toIndentedString(eventDataId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    eventTimestamp: ").append(toIndentedString(eventTimestamp)).append("\n");
    sb.append("    httpRequest: ").append(toIndentedString(httpRequest)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    operationName: ").append(toIndentedString(operationName)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceProviderName: ").append(toIndentedString(resourceProviderName)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subStatus: ").append(toIndentedString(subStatus)).append("\n");
    sb.append("    submissionTimestamp: ").append(toIndentedString(submissionTimestamp)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorization");
    openapiFields.add("caller");
    openapiFields.add("category");
    openapiFields.add("claims");
    openapiFields.add("correlationId");
    openapiFields.add("description");
    openapiFields.add("eventDataId");
    openapiFields.add("eventName");
    openapiFields.add("eventTimestamp");
    openapiFields.add("httpRequest");
    openapiFields.add("id");
    openapiFields.add("level");
    openapiFields.add("operationId");
    openapiFields.add("operationName");
    openapiFields.add("properties");
    openapiFields.add("resourceGroupName");
    openapiFields.add("resourceId");
    openapiFields.add("resourceProviderName");
    openapiFields.add("resourceType");
    openapiFields.add("status");
    openapiFields.add("subStatus");
    openapiFields.add("submissionTimestamp");
    openapiFields.add("subscriptionId");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventData is not found in the empty JSON string", EventData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authorization`
      if (jsonObj.get("authorization") != null && !jsonObj.get("authorization").isJsonNull()) {
        SenderAuthorization.validateJsonElement(jsonObj.get("authorization"));
      }
      if ((jsonObj.get("caller") != null && !jsonObj.get("caller").isJsonNull()) && !jsonObj.get("caller").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caller` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caller").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        LocalizableString.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("correlationId") != null && !jsonObj.get("correlationId").isJsonNull()) && !jsonObj.get("correlationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("eventDataId") != null && !jsonObj.get("eventDataId").isJsonNull()) && !jsonObj.get("eventDataId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventDataId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventDataId").toString()));
      }
      // validate the optional field `eventName`
      if (jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) {
        LocalizableString.validateJsonElement(jsonObj.get("eventName"));
      }
      // validate the optional field `httpRequest`
      if (jsonObj.get("httpRequest") != null && !jsonObj.get("httpRequest").isJsonNull()) {
        HttpRequestInfo.validateJsonElement(jsonObj.get("httpRequest"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      // validate the optional field `level`
      if (jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) {
        LevelEnum.validateJsonElement(jsonObj.get("level"));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      // validate the optional field `operationName`
      if (jsonObj.get("operationName") != null && !jsonObj.get("operationName").isJsonNull()) {
        LocalizableString.validateJsonElement(jsonObj.get("operationName"));
      }
      if ((jsonObj.get("resourceGroupName") != null && !jsonObj.get("resourceGroupName").isJsonNull()) && !jsonObj.get("resourceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroupName").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      // validate the optional field `resourceProviderName`
      if (jsonObj.get("resourceProviderName") != null && !jsonObj.get("resourceProviderName").isJsonNull()) {
        LocalizableString.validateJsonElement(jsonObj.get("resourceProviderName"));
      }
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        LocalizableString.validateJsonElement(jsonObj.get("resourceType"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        LocalizableString.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `subStatus`
      if (jsonObj.get("subStatus") != null && !jsonObj.get("subStatus").isJsonNull()) {
        LocalizableString.validateJsonElement(jsonObj.get("subStatus"));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventData.class));

       return (TypeAdapter<T>) new TypeAdapter<EventData>() {
           @Override
           public void write(JsonWriter out, EventData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventData
   * @throws IOException if the JSON string is invalid with respect to EventData
   */
  public static EventData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventData.class);
  }

  /**
   * Convert an instance of EventData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

