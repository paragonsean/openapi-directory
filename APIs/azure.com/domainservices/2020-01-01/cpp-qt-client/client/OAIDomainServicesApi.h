/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDomainServicesApi_H
#define OAI_OAIDomainServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIDomainService.h"
#include "OAIDomainServiceListResult.h"
#include "OAIOperationEntityListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDomainServicesApi : public QObject {
    Q_OBJECT

public:
    OAIDomainServicesApi(const int timeOut = 0);
    ~OAIDomainServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void domainServiceOperationsList(const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_service_name QString [required]
    * @param[in]  domain_service OAIDomainService [required]
    */
    virtual void domainServicesCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &domain_service_name, const OAIDomainService &domain_service);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_service_name QString [required]
    */
    virtual void domainServicesDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &domain_service_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_service_name QString [required]
    */
    virtual void domainServicesGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &domain_service_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void domainServicesList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void domainServicesListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_service_name QString [required]
    * @param[in]  domain_service OAIDomainService [required]
    */
    virtual void domainServicesUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &domain_service_name, const OAIDomainService &domain_service);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void domainServiceOperationsListCallback(OAIHttpRequestWorker *worker);
    void domainServicesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void domainServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void domainServicesGetCallback(OAIHttpRequestWorker *worker);
    void domainServicesListCallback(OAIHttpRequestWorker *worker);
    void domainServicesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void domainServicesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void domainServiceOperationsListSignal(OAIOperationEntityListResult summary);
    void domainServicesCreateOrUpdateSignal(OAIDomainService summary);
    void domainServicesDeleteSignal();
    void domainServicesGetSignal(OAIDomainService summary);
    void domainServicesListSignal(OAIDomainServiceListResult summary);
    void domainServicesListByResourceGroupSignal(OAIDomainServiceListResult summary);
    void domainServicesUpdateSignal(OAIDomainService summary);


    void domainServiceOperationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationEntityListResult summary);
    void domainServicesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDomainService summary);
    void domainServicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void domainServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIDomainService summary);
    void domainServicesListSignalFull(OAIHttpRequestWorker *worker, OAIDomainServiceListResult summary);
    void domainServicesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDomainServiceListResult summary);
    void domainServicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDomainService summary);

    Q_DECL_DEPRECATED_X("Use domainServiceOperationsListSignalError() instead")
    void domainServiceOperationsListSignalE(OAIOperationEntityListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServiceOperationsListSignalError(OAIOperationEntityListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesCreateOrUpdateSignalError() instead")
    void domainServicesCreateOrUpdateSignalE(OAIDomainService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesCreateOrUpdateSignalError(OAIDomainService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesDeleteSignalError() instead")
    void domainServicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesGetSignalError() instead")
    void domainServicesGetSignalE(OAIDomainService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesGetSignalError(OAIDomainService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesListSignalError() instead")
    void domainServicesListSignalE(OAIDomainServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesListSignalError(OAIDomainServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesListByResourceGroupSignalError() instead")
    void domainServicesListByResourceGroupSignalE(OAIDomainServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesListByResourceGroupSignalError(OAIDomainServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesUpdateSignalError() instead")
    void domainServicesUpdateSignalE(OAIDomainService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesUpdateSignalError(OAIDomainService summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use domainServiceOperationsListSignalErrorFull() instead")
    void domainServiceOperationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServiceOperationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesCreateOrUpdateSignalErrorFull() instead")
    void domainServicesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesDeleteSignalErrorFull() instead")
    void domainServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesGetSignalErrorFull() instead")
    void domainServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesListSignalErrorFull() instead")
    void domainServicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesListByResourceGroupSignalErrorFull() instead")
    void domainServicesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainServicesUpdateSignalErrorFull() instead")
    void domainServicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainServicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
