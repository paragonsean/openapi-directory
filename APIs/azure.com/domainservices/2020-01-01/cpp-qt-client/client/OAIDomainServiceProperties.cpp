/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainServiceProperties::OAIDomainServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainServiceProperties::OAIDomainServiceProperties() {
    this->initializeModel();
}

OAIDomainServiceProperties::~OAIDomainServiceProperties() {}

void OAIDomainServiceProperties::initializeModel() {

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_domain_security_settings_isSet = false;
    m_domain_security_settings_isValid = false;

    m_filtered_sync_isSet = false;
    m_filtered_sync_isValid = false;

    m_ldaps_settings_isSet = false;
    m_ldaps_settings_isValid = false;

    m_notification_settings_isSet = false;
    m_notification_settings_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_replica_sets_isSet = false;
    m_replica_sets_isValid = false;

    m_sync_owner_isSet = false;
    m_sync_owner_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDomainServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainServiceProperties::fromJsonObject(QJsonObject json) {

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("deploymentId")]);
    m_deployment_id_isSet = !json[QString("deploymentId")].isNull() && m_deployment_id_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_domain_security_settings_isValid = ::OpenAPI::fromJsonValue(m_domain_security_settings, json[QString("domainSecuritySettings")]);
    m_domain_security_settings_isSet = !json[QString("domainSecuritySettings")].isNull() && m_domain_security_settings_isValid;

    m_filtered_sync_isValid = ::OpenAPI::fromJsonValue(m_filtered_sync, json[QString("filteredSync")]);
    m_filtered_sync_isSet = !json[QString("filteredSync")].isNull() && m_filtered_sync_isValid;

    m_ldaps_settings_isValid = ::OpenAPI::fromJsonValue(m_ldaps_settings, json[QString("ldapsSettings")]);
    m_ldaps_settings_isSet = !json[QString("ldapsSettings")].isNull() && m_ldaps_settings_isValid;

    m_notification_settings_isValid = ::OpenAPI::fromJsonValue(m_notification_settings, json[QString("notificationSettings")]);
    m_notification_settings_isSet = !json[QString("notificationSettings")].isNull() && m_notification_settings_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_replica_sets_isValid = ::OpenAPI::fromJsonValue(m_replica_sets, json[QString("replicaSets")]);
    m_replica_sets_isSet = !json[QString("replicaSets")].isNull() && m_replica_sets_isValid;

    m_sync_owner_isValid = ::OpenAPI::fromJsonValue(m_sync_owner, json[QString("syncOwner")]);
    m_sync_owner_isSet = !json[QString("syncOwner")].isNull() && m_sync_owner_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIDomainServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_id_isSet) {
        obj.insert(QString("deploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_domain_security_settings.isSet()) {
        obj.insert(QString("domainSecuritySettings"), ::OpenAPI::toJsonValue(m_domain_security_settings));
    }
    if (m_filtered_sync_isSet) {
        obj.insert(QString("filteredSync"), ::OpenAPI::toJsonValue(m_filtered_sync));
    }
    if (m_ldaps_settings.isSet()) {
        obj.insert(QString("ldapsSettings"), ::OpenAPI::toJsonValue(m_ldaps_settings));
    }
    if (m_notification_settings.isSet()) {
        obj.insert(QString("notificationSettings"), ::OpenAPI::toJsonValue(m_notification_settings));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_replica_sets.size() > 0) {
        obj.insert(QString("replicaSets"), ::OpenAPI::toJsonValue(m_replica_sets));
    }
    if (m_sync_owner_isSet) {
        obj.insert(QString("syncOwner"), ::OpenAPI::toJsonValue(m_sync_owner));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIDomainServiceProperties::getDeploymentId() const {
    return m_deployment_id;
}
void OAIDomainServiceProperties::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIDomainServiceProperties::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIDomainServiceProperties::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

QString OAIDomainServiceProperties::getDomainName() const {
    return m_domain_name;
}
void OAIDomainServiceProperties::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDomainServiceProperties::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDomainServiceProperties::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAIDomainSecuritySettings OAIDomainServiceProperties::getDomainSecuritySettings() const {
    return m_domain_security_settings;
}
void OAIDomainServiceProperties::setDomainSecuritySettings(const OAIDomainSecuritySettings &domain_security_settings) {
    m_domain_security_settings = domain_security_settings;
    m_domain_security_settings_isSet = true;
}

bool OAIDomainServiceProperties::is_domain_security_settings_Set() const{
    return m_domain_security_settings_isSet;
}

bool OAIDomainServiceProperties::is_domain_security_settings_Valid() const{
    return m_domain_security_settings_isValid;
}

QString OAIDomainServiceProperties::getFilteredSync() const {
    return m_filtered_sync;
}
void OAIDomainServiceProperties::setFilteredSync(const QString &filtered_sync) {
    m_filtered_sync = filtered_sync;
    m_filtered_sync_isSet = true;
}

bool OAIDomainServiceProperties::is_filtered_sync_Set() const{
    return m_filtered_sync_isSet;
}

bool OAIDomainServiceProperties::is_filtered_sync_Valid() const{
    return m_filtered_sync_isValid;
}

OAILdapsSettings OAIDomainServiceProperties::getLdapsSettings() const {
    return m_ldaps_settings;
}
void OAIDomainServiceProperties::setLdapsSettings(const OAILdapsSettings &ldaps_settings) {
    m_ldaps_settings = ldaps_settings;
    m_ldaps_settings_isSet = true;
}

bool OAIDomainServiceProperties::is_ldaps_settings_Set() const{
    return m_ldaps_settings_isSet;
}

bool OAIDomainServiceProperties::is_ldaps_settings_Valid() const{
    return m_ldaps_settings_isValid;
}

OAINotificationSettings OAIDomainServiceProperties::getNotificationSettings() const {
    return m_notification_settings;
}
void OAIDomainServiceProperties::setNotificationSettings(const OAINotificationSettings &notification_settings) {
    m_notification_settings = notification_settings;
    m_notification_settings_isSet = true;
}

bool OAIDomainServiceProperties::is_notification_settings_Set() const{
    return m_notification_settings_isSet;
}

bool OAIDomainServiceProperties::is_notification_settings_Valid() const{
    return m_notification_settings_isValid;
}

QString OAIDomainServiceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDomainServiceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDomainServiceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDomainServiceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIReplicaSet> OAIDomainServiceProperties::getReplicaSets() const {
    return m_replica_sets;
}
void OAIDomainServiceProperties::setReplicaSets(const QList<OAIReplicaSet> &replica_sets) {
    m_replica_sets = replica_sets;
    m_replica_sets_isSet = true;
}

bool OAIDomainServiceProperties::is_replica_sets_Set() const{
    return m_replica_sets_isSet;
}

bool OAIDomainServiceProperties::is_replica_sets_Valid() const{
    return m_replica_sets_isValid;
}

QString OAIDomainServiceProperties::getSyncOwner() const {
    return m_sync_owner;
}
void OAIDomainServiceProperties::setSyncOwner(const QString &sync_owner) {
    m_sync_owner = sync_owner;
    m_sync_owner_isSet = true;
}

bool OAIDomainServiceProperties::is_sync_owner_Set() const{
    return m_sync_owner_isSet;
}

bool OAIDomainServiceProperties::is_sync_owner_Valid() const{
    return m_sync_owner_isValid;
}

QString OAIDomainServiceProperties::getTenantId() const {
    return m_tenant_id;
}
void OAIDomainServiceProperties::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIDomainServiceProperties::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIDomainServiceProperties::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

qint32 OAIDomainServiceProperties::getVersion() const {
    return m_version;
}
void OAIDomainServiceProperties::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDomainServiceProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDomainServiceProperties::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDomainServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_security_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtered_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldaps_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
