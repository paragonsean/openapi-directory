/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReplicaSet.h
 *
 * Replica Set Definition
 */

#ifndef OAIReplicaSet_H
#define OAIReplicaSet_H

#include <QJsonObject>

#include "OAIHealthAlert.h"
#include "OAIHealthMonitor.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHealthAlert;
class OAIHealthMonitor;

class OAIReplicaSet : public OAIObject {
public:
    OAIReplicaSet();
    OAIReplicaSet(QString json);
    ~OAIReplicaSet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getDomainControllerIpAddress() const;
    void setDomainControllerIpAddress(const QList<QString> &domain_controller_ip_address);
    bool is_domain_controller_ip_address_Set() const;
    bool is_domain_controller_ip_address_Valid() const;

    QString getExternalAccessIpAddress() const;
    void setExternalAccessIpAddress(const QString &external_access_ip_address);
    bool is_external_access_ip_address_Set() const;
    bool is_external_access_ip_address_Valid() const;

    QList<OAIHealthAlert> getHealthAlerts() const;
    void setHealthAlerts(const QList<OAIHealthAlert> &health_alerts);
    bool is_health_alerts_Set() const;
    bool is_health_alerts_Valid() const;

    QDateTime getHealthLastEvaluated() const;
    void setHealthLastEvaluated(const QDateTime &health_last_evaluated);
    bool is_health_last_evaluated_Set() const;
    bool is_health_last_evaluated_Valid() const;

    QList<OAIHealthMonitor> getHealthMonitors() const;
    void setHealthMonitors(const QList<OAIHealthMonitor> &health_monitors);
    bool is_health_monitors_Set() const;
    bool is_health_monitors_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getReplicaSetId() const;
    void setReplicaSetId(const QString &replica_set_id);
    bool is_replica_set_id_Set() const;
    bool is_replica_set_id_Valid() const;

    QString getServiceStatus() const;
    void setServiceStatus(const QString &service_status);
    bool is_service_status_Set() const;
    bool is_service_status_Valid() const;

    QString getSubnetId() const;
    void setSubnetId(const QString &subnet_id);
    bool is_subnet_id_Set() const;
    bool is_subnet_id_Valid() const;

    QString getVnetSiteId() const;
    void setVnetSiteId(const QString &vnet_site_id);
    bool is_vnet_site_id_Set() const;
    bool is_vnet_site_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_domain_controller_ip_address;
    bool m_domain_controller_ip_address_isSet;
    bool m_domain_controller_ip_address_isValid;

    QString m_external_access_ip_address;
    bool m_external_access_ip_address_isSet;
    bool m_external_access_ip_address_isValid;

    QList<OAIHealthAlert> m_health_alerts;
    bool m_health_alerts_isSet;
    bool m_health_alerts_isValid;

    QDateTime m_health_last_evaluated;
    bool m_health_last_evaluated_isSet;
    bool m_health_last_evaluated_isValid;

    QList<OAIHealthMonitor> m_health_monitors;
    bool m_health_monitors_isSet;
    bool m_health_monitors_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_replica_set_id;
    bool m_replica_set_id_isSet;
    bool m_replica_set_id_isValid;

    QString m_service_status;
    bool m_service_status_isSet;
    bool m_service_status_isValid;

    QString m_subnet_id;
    bool m_subnet_id_isSet;
    bool m_subnet_id_isValid;

    QString m_vnet_site_id;
    bool m_vnet_site_id_isSet;
    bool m_vnet_site_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReplicaSet)

#endif // OAIReplicaSet_H
