/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILdapsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILdapsSettings::OAILdapsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILdapsSettings::OAILdapsSettings() {
    this->initializeModel();
}

OAILdapsSettings::~OAILdapsSettings() {}

void OAILdapsSettings::initializeModel() {

    m_certificate_not_after_isSet = false;
    m_certificate_not_after_isValid = false;

    m_certificate_thumbprint_isSet = false;
    m_certificate_thumbprint_isValid = false;

    m_external_access_isSet = false;
    m_external_access_isValid = false;

    m_ldaps_isSet = false;
    m_ldaps_isValid = false;

    m_pfx_certificate_isSet = false;
    m_pfx_certificate_isValid = false;

    m_pfx_certificate_password_isSet = false;
    m_pfx_certificate_password_isValid = false;

    m_public_certificate_isSet = false;
    m_public_certificate_isValid = false;
}

void OAILdapsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILdapsSettings::fromJsonObject(QJsonObject json) {

    m_certificate_not_after_isValid = ::OpenAPI::fromJsonValue(m_certificate_not_after, json[QString("certificateNotAfter")]);
    m_certificate_not_after_isSet = !json[QString("certificateNotAfter")].isNull() && m_certificate_not_after_isValid;

    m_certificate_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_certificate_thumbprint, json[QString("certificateThumbprint")]);
    m_certificate_thumbprint_isSet = !json[QString("certificateThumbprint")].isNull() && m_certificate_thumbprint_isValid;

    m_external_access_isValid = ::OpenAPI::fromJsonValue(m_external_access, json[QString("externalAccess")]);
    m_external_access_isSet = !json[QString("externalAccess")].isNull() && m_external_access_isValid;

    m_ldaps_isValid = ::OpenAPI::fromJsonValue(m_ldaps, json[QString("ldaps")]);
    m_ldaps_isSet = !json[QString("ldaps")].isNull() && m_ldaps_isValid;

    m_pfx_certificate_isValid = ::OpenAPI::fromJsonValue(m_pfx_certificate, json[QString("pfxCertificate")]);
    m_pfx_certificate_isSet = !json[QString("pfxCertificate")].isNull() && m_pfx_certificate_isValid;

    m_pfx_certificate_password_isValid = ::OpenAPI::fromJsonValue(m_pfx_certificate_password, json[QString("pfxCertificatePassword")]);
    m_pfx_certificate_password_isSet = !json[QString("pfxCertificatePassword")].isNull() && m_pfx_certificate_password_isValid;

    m_public_certificate_isValid = ::OpenAPI::fromJsonValue(m_public_certificate, json[QString("publicCertificate")]);
    m_public_certificate_isSet = !json[QString("publicCertificate")].isNull() && m_public_certificate_isValid;
}

QString OAILdapsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILdapsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_not_after_isSet) {
        obj.insert(QString("certificateNotAfter"), ::OpenAPI::toJsonValue(m_certificate_not_after));
    }
    if (m_certificate_thumbprint_isSet) {
        obj.insert(QString("certificateThumbprint"), ::OpenAPI::toJsonValue(m_certificate_thumbprint));
    }
    if (m_external_access_isSet) {
        obj.insert(QString("externalAccess"), ::OpenAPI::toJsonValue(m_external_access));
    }
    if (m_ldaps_isSet) {
        obj.insert(QString("ldaps"), ::OpenAPI::toJsonValue(m_ldaps));
    }
    if (m_pfx_certificate_isSet) {
        obj.insert(QString("pfxCertificate"), ::OpenAPI::toJsonValue(m_pfx_certificate));
    }
    if (m_pfx_certificate_password_isSet) {
        obj.insert(QString("pfxCertificatePassword"), ::OpenAPI::toJsonValue(m_pfx_certificate_password));
    }
    if (m_public_certificate_isSet) {
        obj.insert(QString("publicCertificate"), ::OpenAPI::toJsonValue(m_public_certificate));
    }
    return obj;
}

QDateTime OAILdapsSettings::getCertificateNotAfter() const {
    return m_certificate_not_after;
}
void OAILdapsSettings::setCertificateNotAfter(const QDateTime &certificate_not_after) {
    m_certificate_not_after = certificate_not_after;
    m_certificate_not_after_isSet = true;
}

bool OAILdapsSettings::is_certificate_not_after_Set() const{
    return m_certificate_not_after_isSet;
}

bool OAILdapsSettings::is_certificate_not_after_Valid() const{
    return m_certificate_not_after_isValid;
}

QString OAILdapsSettings::getCertificateThumbprint() const {
    return m_certificate_thumbprint;
}
void OAILdapsSettings::setCertificateThumbprint(const QString &certificate_thumbprint) {
    m_certificate_thumbprint = certificate_thumbprint;
    m_certificate_thumbprint_isSet = true;
}

bool OAILdapsSettings::is_certificate_thumbprint_Set() const{
    return m_certificate_thumbprint_isSet;
}

bool OAILdapsSettings::is_certificate_thumbprint_Valid() const{
    return m_certificate_thumbprint_isValid;
}

QString OAILdapsSettings::getExternalAccess() const {
    return m_external_access;
}
void OAILdapsSettings::setExternalAccess(const QString &external_access) {
    m_external_access = external_access;
    m_external_access_isSet = true;
}

bool OAILdapsSettings::is_external_access_Set() const{
    return m_external_access_isSet;
}

bool OAILdapsSettings::is_external_access_Valid() const{
    return m_external_access_isValid;
}

QString OAILdapsSettings::getLdaps() const {
    return m_ldaps;
}
void OAILdapsSettings::setLdaps(const QString &ldaps) {
    m_ldaps = ldaps;
    m_ldaps_isSet = true;
}

bool OAILdapsSettings::is_ldaps_Set() const{
    return m_ldaps_isSet;
}

bool OAILdapsSettings::is_ldaps_Valid() const{
    return m_ldaps_isValid;
}

QString OAILdapsSettings::getPfxCertificate() const {
    return m_pfx_certificate;
}
void OAILdapsSettings::setPfxCertificate(const QString &pfx_certificate) {
    m_pfx_certificate = pfx_certificate;
    m_pfx_certificate_isSet = true;
}

bool OAILdapsSettings::is_pfx_certificate_Set() const{
    return m_pfx_certificate_isSet;
}

bool OAILdapsSettings::is_pfx_certificate_Valid() const{
    return m_pfx_certificate_isValid;
}

QString OAILdapsSettings::getPfxCertificatePassword() const {
    return m_pfx_certificate_password;
}
void OAILdapsSettings::setPfxCertificatePassword(const QString &pfx_certificate_password) {
    m_pfx_certificate_password = pfx_certificate_password;
    m_pfx_certificate_password_isSet = true;
}

bool OAILdapsSettings::is_pfx_certificate_password_Set() const{
    return m_pfx_certificate_password_isSet;
}

bool OAILdapsSettings::is_pfx_certificate_password_Valid() const{
    return m_pfx_certificate_password_isValid;
}

QString OAILdapsSettings::getPublicCertificate() const {
    return m_public_certificate;
}
void OAILdapsSettings::setPublicCertificate(const QString &public_certificate) {
    m_public_certificate = public_certificate;
    m_public_certificate_isSet = true;
}

bool OAILdapsSettings::is_public_certificate_Set() const{
    return m_public_certificate_isSet;
}

bool OAILdapsSettings::is_public_certificate_Valid() const{
    return m_public_certificate_isValid;
}

bool OAILdapsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_not_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pfx_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pfx_certificate_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILdapsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
