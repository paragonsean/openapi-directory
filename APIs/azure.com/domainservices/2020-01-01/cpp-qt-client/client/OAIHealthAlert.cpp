/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthAlert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthAlert::OAIHealthAlert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthAlert::OAIHealthAlert() {
    this->initializeModel();
}

OAIHealthAlert::~OAIHealthAlert() {}

void OAIHealthAlert::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_last_detected_isSet = false;
    m_last_detected_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_raised_isSet = false;
    m_raised_isValid = false;

    m_resolution_uri_isSet = false;
    m_resolution_uri_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;
}

void OAIHealthAlert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthAlert::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_last_detected_isValid = ::OpenAPI::fromJsonValue(m_last_detected, json[QString("lastDetected")]);
    m_last_detected_isSet = !json[QString("lastDetected")].isNull() && m_last_detected_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_raised_isValid = ::OpenAPI::fromJsonValue(m_raised, json[QString("raised")]);
    m_raised_isSet = !json[QString("raised")].isNull() && m_raised_isValid;

    m_resolution_uri_isValid = ::OpenAPI::fromJsonValue(m_resolution_uri, json[QString("resolutionUri")]);
    m_resolution_uri_isSet = !json[QString("resolutionUri")].isNull() && m_resolution_uri_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;
}

QString OAIHealthAlert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthAlert::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_isSet) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_last_detected_isSet) {
        obj.insert(QString("lastDetected"), ::OpenAPI::toJsonValue(m_last_detected));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_raised_isSet) {
        obj.insert(QString("raised"), ::OpenAPI::toJsonValue(m_raised));
    }
    if (m_resolution_uri_isSet) {
        obj.insert(QString("resolutionUri"), ::OpenAPI::toJsonValue(m_resolution_uri));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    return obj;
}

QString OAIHealthAlert::getId() const {
    return m_id;
}
void OAIHealthAlert::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHealthAlert::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHealthAlert::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIHealthAlert::getIssue() const {
    return m_issue;
}
void OAIHealthAlert::setIssue(const QString &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIHealthAlert::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIHealthAlert::is_issue_Valid() const{
    return m_issue_isValid;
}

QDateTime OAIHealthAlert::getLastDetected() const {
    return m_last_detected;
}
void OAIHealthAlert::setLastDetected(const QDateTime &last_detected) {
    m_last_detected = last_detected;
    m_last_detected_isSet = true;
}

bool OAIHealthAlert::is_last_detected_Set() const{
    return m_last_detected_isSet;
}

bool OAIHealthAlert::is_last_detected_Valid() const{
    return m_last_detected_isValid;
}

QString OAIHealthAlert::getName() const {
    return m_name;
}
void OAIHealthAlert::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHealthAlert::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHealthAlert::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIHealthAlert::getRaised() const {
    return m_raised;
}
void OAIHealthAlert::setRaised(const QDateTime &raised) {
    m_raised = raised;
    m_raised_isSet = true;
}

bool OAIHealthAlert::is_raised_Set() const{
    return m_raised_isSet;
}

bool OAIHealthAlert::is_raised_Valid() const{
    return m_raised_isValid;
}

QString OAIHealthAlert::getResolutionUri() const {
    return m_resolution_uri;
}
void OAIHealthAlert::setResolutionUri(const QString &resolution_uri) {
    m_resolution_uri = resolution_uri;
    m_resolution_uri_isSet = true;
}

bool OAIHealthAlert::is_resolution_uri_Set() const{
    return m_resolution_uri_isSet;
}

bool OAIHealthAlert::is_resolution_uri_Valid() const{
    return m_resolution_uri_isValid;
}

QString OAIHealthAlert::getSeverity() const {
    return m_severity;
}
void OAIHealthAlert::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIHealthAlert::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIHealthAlert::is_severity_Valid() const{
    return m_severity_isValid;
}

bool OAIHealthAlert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_detected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raised_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthAlert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
