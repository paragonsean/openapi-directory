/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicaSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicaSet::OAIReplicaSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicaSet::OAIReplicaSet() {
    this->initializeModel();
}

OAIReplicaSet::~OAIReplicaSet() {}

void OAIReplicaSet::initializeModel() {

    m_domain_controller_ip_address_isSet = false;
    m_domain_controller_ip_address_isValid = false;

    m_external_access_ip_address_isSet = false;
    m_external_access_ip_address_isValid = false;

    m_health_alerts_isSet = false;
    m_health_alerts_isValid = false;

    m_health_last_evaluated_isSet = false;
    m_health_last_evaluated_isValid = false;

    m_health_monitors_isSet = false;
    m_health_monitors_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_replica_set_id_isSet = false;
    m_replica_set_id_isValid = false;

    m_service_status_isSet = false;
    m_service_status_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_vnet_site_id_isSet = false;
    m_vnet_site_id_isValid = false;
}

void OAIReplicaSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicaSet::fromJsonObject(QJsonObject json) {

    m_domain_controller_ip_address_isValid = ::OpenAPI::fromJsonValue(m_domain_controller_ip_address, json[QString("domainControllerIpAddress")]);
    m_domain_controller_ip_address_isSet = !json[QString("domainControllerIpAddress")].isNull() && m_domain_controller_ip_address_isValid;

    m_external_access_ip_address_isValid = ::OpenAPI::fromJsonValue(m_external_access_ip_address, json[QString("externalAccessIpAddress")]);
    m_external_access_ip_address_isSet = !json[QString("externalAccessIpAddress")].isNull() && m_external_access_ip_address_isValid;

    m_health_alerts_isValid = ::OpenAPI::fromJsonValue(m_health_alerts, json[QString("healthAlerts")]);
    m_health_alerts_isSet = !json[QString("healthAlerts")].isNull() && m_health_alerts_isValid;

    m_health_last_evaluated_isValid = ::OpenAPI::fromJsonValue(m_health_last_evaluated, json[QString("healthLastEvaluated")]);
    m_health_last_evaluated_isSet = !json[QString("healthLastEvaluated")].isNull() && m_health_last_evaluated_isValid;

    m_health_monitors_isValid = ::OpenAPI::fromJsonValue(m_health_monitors, json[QString("healthMonitors")]);
    m_health_monitors_isSet = !json[QString("healthMonitors")].isNull() && m_health_monitors_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_replica_set_id_isValid = ::OpenAPI::fromJsonValue(m_replica_set_id, json[QString("replicaSetId")]);
    m_replica_set_id_isSet = !json[QString("replicaSetId")].isNull() && m_replica_set_id_isValid;

    m_service_status_isValid = ::OpenAPI::fromJsonValue(m_service_status, json[QString("serviceStatus")]);
    m_service_status_isSet = !json[QString("serviceStatus")].isNull() && m_service_status_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_vnet_site_id_isValid = ::OpenAPI::fromJsonValue(m_vnet_site_id, json[QString("vnetSiteId")]);
    m_vnet_site_id_isSet = !json[QString("vnetSiteId")].isNull() && m_vnet_site_id_isValid;
}

QString OAIReplicaSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicaSet::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_controller_ip_address.size() > 0) {
        obj.insert(QString("domainControllerIpAddress"), ::OpenAPI::toJsonValue(m_domain_controller_ip_address));
    }
    if (m_external_access_ip_address_isSet) {
        obj.insert(QString("externalAccessIpAddress"), ::OpenAPI::toJsonValue(m_external_access_ip_address));
    }
    if (m_health_alerts.size() > 0) {
        obj.insert(QString("healthAlerts"), ::OpenAPI::toJsonValue(m_health_alerts));
    }
    if (m_health_last_evaluated_isSet) {
        obj.insert(QString("healthLastEvaluated"), ::OpenAPI::toJsonValue(m_health_last_evaluated));
    }
    if (m_health_monitors.size() > 0) {
        obj.insert(QString("healthMonitors"), ::OpenAPI::toJsonValue(m_health_monitors));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_replica_set_id_isSet) {
        obj.insert(QString("replicaSetId"), ::OpenAPI::toJsonValue(m_replica_set_id));
    }
    if (m_service_status_isSet) {
        obj.insert(QString("serviceStatus"), ::OpenAPI::toJsonValue(m_service_status));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_vnet_site_id_isSet) {
        obj.insert(QString("vnetSiteId"), ::OpenAPI::toJsonValue(m_vnet_site_id));
    }
    return obj;
}

QList<QString> OAIReplicaSet::getDomainControllerIpAddress() const {
    return m_domain_controller_ip_address;
}
void OAIReplicaSet::setDomainControllerIpAddress(const QList<QString> &domain_controller_ip_address) {
    m_domain_controller_ip_address = domain_controller_ip_address;
    m_domain_controller_ip_address_isSet = true;
}

bool OAIReplicaSet::is_domain_controller_ip_address_Set() const{
    return m_domain_controller_ip_address_isSet;
}

bool OAIReplicaSet::is_domain_controller_ip_address_Valid() const{
    return m_domain_controller_ip_address_isValid;
}

QString OAIReplicaSet::getExternalAccessIpAddress() const {
    return m_external_access_ip_address;
}
void OAIReplicaSet::setExternalAccessIpAddress(const QString &external_access_ip_address) {
    m_external_access_ip_address = external_access_ip_address;
    m_external_access_ip_address_isSet = true;
}

bool OAIReplicaSet::is_external_access_ip_address_Set() const{
    return m_external_access_ip_address_isSet;
}

bool OAIReplicaSet::is_external_access_ip_address_Valid() const{
    return m_external_access_ip_address_isValid;
}

QList<OAIHealthAlert> OAIReplicaSet::getHealthAlerts() const {
    return m_health_alerts;
}
void OAIReplicaSet::setHealthAlerts(const QList<OAIHealthAlert> &health_alerts) {
    m_health_alerts = health_alerts;
    m_health_alerts_isSet = true;
}

bool OAIReplicaSet::is_health_alerts_Set() const{
    return m_health_alerts_isSet;
}

bool OAIReplicaSet::is_health_alerts_Valid() const{
    return m_health_alerts_isValid;
}

QDateTime OAIReplicaSet::getHealthLastEvaluated() const {
    return m_health_last_evaluated;
}
void OAIReplicaSet::setHealthLastEvaluated(const QDateTime &health_last_evaluated) {
    m_health_last_evaluated = health_last_evaluated;
    m_health_last_evaluated_isSet = true;
}

bool OAIReplicaSet::is_health_last_evaluated_Set() const{
    return m_health_last_evaluated_isSet;
}

bool OAIReplicaSet::is_health_last_evaluated_Valid() const{
    return m_health_last_evaluated_isValid;
}

QList<OAIHealthMonitor> OAIReplicaSet::getHealthMonitors() const {
    return m_health_monitors;
}
void OAIReplicaSet::setHealthMonitors(const QList<OAIHealthMonitor> &health_monitors) {
    m_health_monitors = health_monitors;
    m_health_monitors_isSet = true;
}

bool OAIReplicaSet::is_health_monitors_Set() const{
    return m_health_monitors_isSet;
}

bool OAIReplicaSet::is_health_monitors_Valid() const{
    return m_health_monitors_isValid;
}

QString OAIReplicaSet::getLocation() const {
    return m_location;
}
void OAIReplicaSet::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIReplicaSet::is_location_Set() const{
    return m_location_isSet;
}

bool OAIReplicaSet::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIReplicaSet::getReplicaSetId() const {
    return m_replica_set_id;
}
void OAIReplicaSet::setReplicaSetId(const QString &replica_set_id) {
    m_replica_set_id = replica_set_id;
    m_replica_set_id_isSet = true;
}

bool OAIReplicaSet::is_replica_set_id_Set() const{
    return m_replica_set_id_isSet;
}

bool OAIReplicaSet::is_replica_set_id_Valid() const{
    return m_replica_set_id_isValid;
}

QString OAIReplicaSet::getServiceStatus() const {
    return m_service_status;
}
void OAIReplicaSet::setServiceStatus(const QString &service_status) {
    m_service_status = service_status;
    m_service_status_isSet = true;
}

bool OAIReplicaSet::is_service_status_Set() const{
    return m_service_status_isSet;
}

bool OAIReplicaSet::is_service_status_Valid() const{
    return m_service_status_isValid;
}

QString OAIReplicaSet::getSubnetId() const {
    return m_subnet_id;
}
void OAIReplicaSet::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIReplicaSet::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIReplicaSet::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAIReplicaSet::getVnetSiteId() const {
    return m_vnet_site_id;
}
void OAIReplicaSet::setVnetSiteId(const QString &vnet_site_id) {
    m_vnet_site_id = vnet_site_id;
    m_vnet_site_id_isSet = true;
}

bool OAIReplicaSet::is_vnet_site_id_Set() const{
    return m_vnet_site_id_isSet;
}

bool OAIReplicaSet::is_vnet_site_id_Valid() const{
    return m_vnet_site_id_isValid;
}

bool OAIReplicaSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_controller_ip_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_access_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_alerts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_last_evaluated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_monitors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnet_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicaSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
