/*
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthAlert;
import org.openapitools.client.model.HealthMonitor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replica Set Definition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:51.611514-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicaSet {
  public static final String SERIALIZED_NAME_DOMAIN_CONTROLLER_IP_ADDRESS = "domainControllerIpAddress";
  @SerializedName(SERIALIZED_NAME_DOMAIN_CONTROLLER_IP_ADDRESS)
  private List<String> domainControllerIpAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_ACCESS_IP_ADDRESS = "externalAccessIpAddress";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCESS_IP_ADDRESS)
  private String externalAccessIpAddress;

  public static final String SERIALIZED_NAME_HEALTH_ALERTS = "healthAlerts";
  @SerializedName(SERIALIZED_NAME_HEALTH_ALERTS)
  private List<HealthAlert> healthAlerts = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_LAST_EVALUATED = "healthLastEvaluated";
  @SerializedName(SERIALIZED_NAME_HEALTH_LAST_EVALUATED)
  private OffsetDateTime healthLastEvaluated;

  public static final String SERIALIZED_NAME_HEALTH_MONITORS = "healthMonitors";
  @SerializedName(SERIALIZED_NAME_HEALTH_MONITORS)
  private List<HealthMonitor> healthMonitors = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_REPLICA_SET_ID = "replicaSetId";
  @SerializedName(SERIALIZED_NAME_REPLICA_SET_ID)
  private String replicaSetId;

  public static final String SERIALIZED_NAME_SERVICE_STATUS = "serviceStatus";
  @SerializedName(SERIALIZED_NAME_SERVICE_STATUS)
  private String serviceStatus;

  public static final String SERIALIZED_NAME_SUBNET_ID = "subnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_VNET_SITE_ID = "vnetSiteId";
  @SerializedName(SERIALIZED_NAME_VNET_SITE_ID)
  private String vnetSiteId;

  public ReplicaSet() {
  }

  public ReplicaSet(
     List<String> domainControllerIpAddress, 
     String externalAccessIpAddress, 
     List<HealthAlert> healthAlerts, 
     OffsetDateTime healthLastEvaluated, 
     List<HealthMonitor> healthMonitors, 
     String replicaSetId, 
     String serviceStatus, 
     String vnetSiteId
  ) {
    this();
    this.domainControllerIpAddress = domainControllerIpAddress;
    this.externalAccessIpAddress = externalAccessIpAddress;
    this.healthAlerts = healthAlerts;
    this.healthLastEvaluated = healthLastEvaluated;
    this.healthMonitors = healthMonitors;
    this.replicaSetId = replicaSetId;
    this.serviceStatus = serviceStatus;
    this.vnetSiteId = vnetSiteId;
  }

  /**
   * List of Domain Controller IP Address
   * @return domainControllerIpAddress
   */
  @javax.annotation.Nullable
  public List<String> getDomainControllerIpAddress() {
    return domainControllerIpAddress;
  }



  /**
   * External access ip address.
   * @return externalAccessIpAddress
   */
  @javax.annotation.Nullable
  public String getExternalAccessIpAddress() {
    return externalAccessIpAddress;
  }



  /**
   * List of Domain Health Alerts
   * @return healthAlerts
   */
  @javax.annotation.Nullable
  public List<HealthAlert> getHealthAlerts() {
    return healthAlerts;
  }



  /**
   * Last domain evaluation run DateTime
   * @return healthLastEvaluated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHealthLastEvaluated() {
    return healthLastEvaluated;
  }



  /**
   * List of Domain Health Monitors
   * @return healthMonitors
   */
  @javax.annotation.Nullable
  public List<HealthMonitor> getHealthMonitors() {
    return healthMonitors;
  }



  public ReplicaSet location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Virtual network location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  /**
   * ReplicaSet Id
   * @return replicaSetId
   */
  @javax.annotation.Nullable
  public String getReplicaSetId() {
    return replicaSetId;
  }



  /**
   * Status of Domain Service instance
   * @return serviceStatus
   */
  @javax.annotation.Nullable
  public String getServiceStatus() {
    return serviceStatus;
  }



  public ReplicaSet subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  /**
   * Virtual network site id
   * @return vnetSiteId
   */
  @javax.annotation.Nullable
  public String getVnetSiteId() {
    return vnetSiteId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicaSet replicaSet = (ReplicaSet) o;
    return Objects.equals(this.domainControllerIpAddress, replicaSet.domainControllerIpAddress) &&
        Objects.equals(this.externalAccessIpAddress, replicaSet.externalAccessIpAddress) &&
        Objects.equals(this.healthAlerts, replicaSet.healthAlerts) &&
        Objects.equals(this.healthLastEvaluated, replicaSet.healthLastEvaluated) &&
        Objects.equals(this.healthMonitors, replicaSet.healthMonitors) &&
        Objects.equals(this.location, replicaSet.location) &&
        Objects.equals(this.replicaSetId, replicaSet.replicaSetId) &&
        Objects.equals(this.serviceStatus, replicaSet.serviceStatus) &&
        Objects.equals(this.subnetId, replicaSet.subnetId) &&
        Objects.equals(this.vnetSiteId, replicaSet.vnetSiteId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainControllerIpAddress, externalAccessIpAddress, healthAlerts, healthLastEvaluated, healthMonitors, location, replicaSetId, serviceStatus, subnetId, vnetSiteId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicaSet {\n");
    sb.append("    domainControllerIpAddress: ").append(toIndentedString(domainControllerIpAddress)).append("\n");
    sb.append("    externalAccessIpAddress: ").append(toIndentedString(externalAccessIpAddress)).append("\n");
    sb.append("    healthAlerts: ").append(toIndentedString(healthAlerts)).append("\n");
    sb.append("    healthLastEvaluated: ").append(toIndentedString(healthLastEvaluated)).append("\n");
    sb.append("    healthMonitors: ").append(toIndentedString(healthMonitors)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    replicaSetId: ").append(toIndentedString(replicaSetId)).append("\n");
    sb.append("    serviceStatus: ").append(toIndentedString(serviceStatus)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    vnetSiteId: ").append(toIndentedString(vnetSiteId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domainControllerIpAddress");
    openapiFields.add("externalAccessIpAddress");
    openapiFields.add("healthAlerts");
    openapiFields.add("healthLastEvaluated");
    openapiFields.add("healthMonitors");
    openapiFields.add("location");
    openapiFields.add("replicaSetId");
    openapiFields.add("serviceStatus");
    openapiFields.add("subnetId");
    openapiFields.add("vnetSiteId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicaSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicaSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicaSet is not found in the empty JSON string", ReplicaSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicaSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicaSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("domainControllerIpAddress") != null && !jsonObj.get("domainControllerIpAddress").isJsonNull() && !jsonObj.get("domainControllerIpAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainControllerIpAddress` to be an array in the JSON string but got `%s`", jsonObj.get("domainControllerIpAddress").toString()));
      }
      if ((jsonObj.get("externalAccessIpAddress") != null && !jsonObj.get("externalAccessIpAddress").isJsonNull()) && !jsonObj.get("externalAccessIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalAccessIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalAccessIpAddress").toString()));
      }
      if (jsonObj.get("healthAlerts") != null && !jsonObj.get("healthAlerts").isJsonNull()) {
        JsonArray jsonArrayhealthAlerts = jsonObj.getAsJsonArray("healthAlerts");
        if (jsonArrayhealthAlerts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthAlerts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthAlerts` to be an array in the JSON string but got `%s`", jsonObj.get("healthAlerts").toString()));
          }

          // validate the optional field `healthAlerts` (array)
          for (int i = 0; i < jsonArrayhealthAlerts.size(); i++) {
            HealthAlert.validateJsonElement(jsonArrayhealthAlerts.get(i));
          };
        }
      }
      if (jsonObj.get("healthMonitors") != null && !jsonObj.get("healthMonitors").isJsonNull()) {
        JsonArray jsonArrayhealthMonitors = jsonObj.getAsJsonArray("healthMonitors");
        if (jsonArrayhealthMonitors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthMonitors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthMonitors` to be an array in the JSON string but got `%s`", jsonObj.get("healthMonitors").toString()));
          }

          // validate the optional field `healthMonitors` (array)
          for (int i = 0; i < jsonArrayhealthMonitors.size(); i++) {
            HealthMonitor.validateJsonElement(jsonArrayhealthMonitors.get(i));
          };
        }
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("replicaSetId") != null && !jsonObj.get("replicaSetId").isJsonNull()) && !jsonObj.get("replicaSetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicaSetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicaSetId").toString()));
      }
      if ((jsonObj.get("serviceStatus") != null && !jsonObj.get("serviceStatus").isJsonNull()) && !jsonObj.get("serviceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceStatus").toString()));
      }
      if ((jsonObj.get("subnetId") != null && !jsonObj.get("subnetId").isJsonNull()) && !jsonObj.get("subnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetId").toString()));
      }
      if ((jsonObj.get("vnetSiteId") != null && !jsonObj.get("vnetSiteId").isJsonNull()) && !jsonObj.get("vnetSiteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vnetSiteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vnetSiteId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicaSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicaSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicaSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicaSet.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicaSet>() {
           @Override
           public void write(JsonWriter out, ReplicaSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicaSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicaSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicaSet
   * @throws IOException if the JSON string is invalid with respect to ReplicaSet
   */
  public static ReplicaSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicaSet.class);
  }

  /**
   * Convert an instance of ReplicaSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

