/*
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DomainSecuritySettings;
import org.openapitools.client.model.LdapsSettings;
import org.openapitools.client.model.NotificationSettings;
import org.openapitools.client.model.ReplicaSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the Domain Service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:51.611514-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainServiceProperties {
  public static final String SERIALIZED_NAME_DEPLOYMENT_ID = "deploymentId";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_ID)
  private String deploymentId;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_DOMAIN_SECURITY_SETTINGS = "domainSecuritySettings";
  @SerializedName(SERIALIZED_NAME_DOMAIN_SECURITY_SETTINGS)
  private DomainSecuritySettings domainSecuritySettings;

  /**
   * Enabled or Disabled flag to turn on Group-based filtered sync
   */
  @JsonAdapter(FilteredSyncEnum.Adapter.class)
  public enum FilteredSyncEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    FilteredSyncEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilteredSyncEnum fromValue(String value) {
      for (FilteredSyncEnum b : FilteredSyncEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FilteredSyncEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilteredSyncEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilteredSyncEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FilteredSyncEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FilteredSyncEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILTERED_SYNC = "filteredSync";
  @SerializedName(SERIALIZED_NAME_FILTERED_SYNC)
  private FilteredSyncEnum filteredSync;

  public static final String SERIALIZED_NAME_LDAPS_SETTINGS = "ldapsSettings";
  @SerializedName(SERIALIZED_NAME_LDAPS_SETTINGS)
  private LdapsSettings ldapsSettings;

  public static final String SERIALIZED_NAME_NOTIFICATION_SETTINGS = "notificationSettings";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_SETTINGS)
  private NotificationSettings notificationSettings;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_REPLICA_SETS = "replicaSets";
  @SerializedName(SERIALIZED_NAME_REPLICA_SETS)
  private List<ReplicaSet> replicaSets = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYNC_OWNER = "syncOwner";
  @SerializedName(SERIALIZED_NAME_SYNC_OWNER)
  private String syncOwner;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public DomainServiceProperties() {
  }

  public DomainServiceProperties(
     String deploymentId, 
     String provisioningState, 
     String syncOwner, 
     String tenantId, 
     Integer version
  ) {
    this();
    this.deploymentId = deploymentId;
    this.provisioningState = provisioningState;
    this.syncOwner = syncOwner;
    this.tenantId = tenantId;
    this.version = version;
  }

  /**
   * Deployment Id
   * @return deploymentId
   */
  @javax.annotation.Nullable
  public String getDeploymentId() {
    return deploymentId;
  }



  public DomainServiceProperties domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * The name of the Azure domain that the user would like to deploy Domain Services to.
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public DomainServiceProperties domainSecuritySettings(DomainSecuritySettings domainSecuritySettings) {
    this.domainSecuritySettings = domainSecuritySettings;
    return this;
  }

  /**
   * Get domainSecuritySettings
   * @return domainSecuritySettings
   */
  @javax.annotation.Nullable
  public DomainSecuritySettings getDomainSecuritySettings() {
    return domainSecuritySettings;
  }

  public void setDomainSecuritySettings(DomainSecuritySettings domainSecuritySettings) {
    this.domainSecuritySettings = domainSecuritySettings;
  }


  public DomainServiceProperties filteredSync(FilteredSyncEnum filteredSync) {
    this.filteredSync = filteredSync;
    return this;
  }

  /**
   * Enabled or Disabled flag to turn on Group-based filtered sync
   * @return filteredSync
   */
  @javax.annotation.Nullable
  public FilteredSyncEnum getFilteredSync() {
    return filteredSync;
  }

  public void setFilteredSync(FilteredSyncEnum filteredSync) {
    this.filteredSync = filteredSync;
  }


  public DomainServiceProperties ldapsSettings(LdapsSettings ldapsSettings) {
    this.ldapsSettings = ldapsSettings;
    return this;
  }

  /**
   * Get ldapsSettings
   * @return ldapsSettings
   */
  @javax.annotation.Nullable
  public LdapsSettings getLdapsSettings() {
    return ldapsSettings;
  }

  public void setLdapsSettings(LdapsSettings ldapsSettings) {
    this.ldapsSettings = ldapsSettings;
  }


  public DomainServiceProperties notificationSettings(NotificationSettings notificationSettings) {
    this.notificationSettings = notificationSettings;
    return this;
  }

  /**
   * Get notificationSettings
   * @return notificationSettings
   */
  @javax.annotation.Nullable
  public NotificationSettings getNotificationSettings() {
    return notificationSettings;
  }

  public void setNotificationSettings(NotificationSettings notificationSettings) {
    this.notificationSettings = notificationSettings;
  }


  /**
   * the current deployment or provisioning state, which only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public DomainServiceProperties replicaSets(List<ReplicaSet> replicaSets) {
    this.replicaSets = replicaSets;
    return this;
  }

  public DomainServiceProperties addReplicaSetsItem(ReplicaSet replicaSetsItem) {
    if (this.replicaSets == null) {
      this.replicaSets = new ArrayList<>();
    }
    this.replicaSets.add(replicaSetsItem);
    return this;
  }

  /**
   * List of ReplicaSets
   * @return replicaSets
   */
  @javax.annotation.Nullable
  public List<ReplicaSet> getReplicaSets() {
    return replicaSets;
  }

  public void setReplicaSets(List<ReplicaSet> replicaSets) {
    this.replicaSets = replicaSets;
  }


  /**
   * SyncOwner ReplicaSet Id
   * @return syncOwner
   */
  @javax.annotation.Nullable
  public String getSyncOwner() {
    return syncOwner;
  }



  /**
   * Azure Active Directory Tenant Id
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }



  /**
   * Data Model Version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainServiceProperties domainServiceProperties = (DomainServiceProperties) o;
    return Objects.equals(this.deploymentId, domainServiceProperties.deploymentId) &&
        Objects.equals(this.domainName, domainServiceProperties.domainName) &&
        Objects.equals(this.domainSecuritySettings, domainServiceProperties.domainSecuritySettings) &&
        Objects.equals(this.filteredSync, domainServiceProperties.filteredSync) &&
        Objects.equals(this.ldapsSettings, domainServiceProperties.ldapsSettings) &&
        Objects.equals(this.notificationSettings, domainServiceProperties.notificationSettings) &&
        Objects.equals(this.provisioningState, domainServiceProperties.provisioningState) &&
        Objects.equals(this.replicaSets, domainServiceProperties.replicaSets) &&
        Objects.equals(this.syncOwner, domainServiceProperties.syncOwner) &&
        Objects.equals(this.tenantId, domainServiceProperties.tenantId) &&
        Objects.equals(this.version, domainServiceProperties.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentId, domainName, domainSecuritySettings, filteredSync, ldapsSettings, notificationSettings, provisioningState, replicaSets, syncOwner, tenantId, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainServiceProperties {\n");
    sb.append("    deploymentId: ").append(toIndentedString(deploymentId)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    domainSecuritySettings: ").append(toIndentedString(domainSecuritySettings)).append("\n");
    sb.append("    filteredSync: ").append(toIndentedString(filteredSync)).append("\n");
    sb.append("    ldapsSettings: ").append(toIndentedString(ldapsSettings)).append("\n");
    sb.append("    notificationSettings: ").append(toIndentedString(notificationSettings)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    replicaSets: ").append(toIndentedString(replicaSets)).append("\n");
    sb.append("    syncOwner: ").append(toIndentedString(syncOwner)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deploymentId");
    openapiFields.add("domainName");
    openapiFields.add("domainSecuritySettings");
    openapiFields.add("filteredSync");
    openapiFields.add("ldapsSettings");
    openapiFields.add("notificationSettings");
    openapiFields.add("provisioningState");
    openapiFields.add("replicaSets");
    openapiFields.add("syncOwner");
    openapiFields.add("tenantId");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainServiceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainServiceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainServiceProperties is not found in the empty JSON string", DomainServiceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainServiceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainServiceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deploymentId") != null && !jsonObj.get("deploymentId").isJsonNull()) && !jsonObj.get("deploymentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentId").toString()));
      }
      if ((jsonObj.get("domainName") != null && !jsonObj.get("domainName").isJsonNull()) && !jsonObj.get("domainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      // validate the optional field `domainSecuritySettings`
      if (jsonObj.get("domainSecuritySettings") != null && !jsonObj.get("domainSecuritySettings").isJsonNull()) {
        DomainSecuritySettings.validateJsonElement(jsonObj.get("domainSecuritySettings"));
      }
      if ((jsonObj.get("filteredSync") != null && !jsonObj.get("filteredSync").isJsonNull()) && !jsonObj.get("filteredSync").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filteredSync` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filteredSync").toString()));
      }
      // validate the optional field `filteredSync`
      if (jsonObj.get("filteredSync") != null && !jsonObj.get("filteredSync").isJsonNull()) {
        FilteredSyncEnum.validateJsonElement(jsonObj.get("filteredSync"));
      }
      // validate the optional field `ldapsSettings`
      if (jsonObj.get("ldapsSettings") != null && !jsonObj.get("ldapsSettings").isJsonNull()) {
        LdapsSettings.validateJsonElement(jsonObj.get("ldapsSettings"));
      }
      // validate the optional field `notificationSettings`
      if (jsonObj.get("notificationSettings") != null && !jsonObj.get("notificationSettings").isJsonNull()) {
        NotificationSettings.validateJsonElement(jsonObj.get("notificationSettings"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (jsonObj.get("replicaSets") != null && !jsonObj.get("replicaSets").isJsonNull()) {
        JsonArray jsonArrayreplicaSets = jsonObj.getAsJsonArray("replicaSets");
        if (jsonArrayreplicaSets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("replicaSets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `replicaSets` to be an array in the JSON string but got `%s`", jsonObj.get("replicaSets").toString()));
          }

          // validate the optional field `replicaSets` (array)
          for (int i = 0; i < jsonArrayreplicaSets.size(); i++) {
            ReplicaSet.validateJsonElement(jsonArrayreplicaSets.get(i));
          };
        }
      }
      if ((jsonObj.get("syncOwner") != null && !jsonObj.get("syncOwner").isJsonNull()) && !jsonObj.get("syncOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncOwner").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainServiceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainServiceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainServiceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainServiceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainServiceProperties>() {
           @Override
           public void write(JsonWriter out, DomainServiceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainServiceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainServiceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainServiceProperties
   * @throws IOException if the JSON string is invalid with respect to DomainServiceProperties
   */
  public static DomainServiceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainServiceProperties.class);
  }

  /**
   * Convert an instance of DomainServiceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

