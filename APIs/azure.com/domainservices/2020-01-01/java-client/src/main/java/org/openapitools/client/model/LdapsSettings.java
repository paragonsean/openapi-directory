/*
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Secure LDAP Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:51.611514-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LdapsSettings {
  public static final String SERIALIZED_NAME_CERTIFICATE_NOT_AFTER = "certificateNotAfter";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_NOT_AFTER)
  private OffsetDateTime certificateNotAfter;

  public static final String SERIALIZED_NAME_CERTIFICATE_THUMBPRINT = "certificateThumbprint";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_THUMBPRINT)
  private String certificateThumbprint;

  /**
   * A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
   */
  @JsonAdapter(ExternalAccessEnum.Adapter.class)
  public enum ExternalAccessEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    ExternalAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExternalAccessEnum fromValue(String value) {
      for (ExternalAccessEnum b : ExternalAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExternalAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExternalAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExternalAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExternalAccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExternalAccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXTERNAL_ACCESS = "externalAccess";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCESS)
  private ExternalAccessEnum externalAccess;

  /**
   * A flag to determine whether or not Secure LDAP is enabled or disabled.
   */
  @JsonAdapter(LdapsEnum.Adapter.class)
  public enum LdapsEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    LdapsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LdapsEnum fromValue(String value) {
      for (LdapsEnum b : LdapsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LdapsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LdapsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LdapsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LdapsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LdapsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LDAPS = "ldaps";
  @SerializedName(SERIALIZED_NAME_LDAPS)
  private LdapsEnum ldaps;

  public static final String SERIALIZED_NAME_PFX_CERTIFICATE = "pfxCertificate";
  @SerializedName(SERIALIZED_NAME_PFX_CERTIFICATE)
  private String pfxCertificate;

  public static final String SERIALIZED_NAME_PFX_CERTIFICATE_PASSWORD = "pfxCertificatePassword";
  @SerializedName(SERIALIZED_NAME_PFX_CERTIFICATE_PASSWORD)
  private String pfxCertificatePassword;

  public static final String SERIALIZED_NAME_PUBLIC_CERTIFICATE = "publicCertificate";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CERTIFICATE)
  private String publicCertificate;

  public LdapsSettings() {
  }

  public LdapsSettings(
     OffsetDateTime certificateNotAfter, 
     String certificateThumbprint, 
     String publicCertificate
  ) {
    this();
    this.certificateNotAfter = certificateNotAfter;
    this.certificateThumbprint = certificateThumbprint;
    this.publicCertificate = publicCertificate;
  }

  /**
   * NotAfter DateTime of configure ldaps certificate.
   * @return certificateNotAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCertificateNotAfter() {
    return certificateNotAfter;
  }



  /**
   * Thumbprint of configure ldaps certificate.
   * @return certificateThumbprint
   */
  @javax.annotation.Nullable
  public String getCertificateThumbprint() {
    return certificateThumbprint;
  }



  public LdapsSettings externalAccess(ExternalAccessEnum externalAccess) {
    this.externalAccess = externalAccess;
    return this;
  }

  /**
   * A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
   * @return externalAccess
   */
  @javax.annotation.Nullable
  public ExternalAccessEnum getExternalAccess() {
    return externalAccess;
  }

  public void setExternalAccess(ExternalAccessEnum externalAccess) {
    this.externalAccess = externalAccess;
  }


  public LdapsSettings ldaps(LdapsEnum ldaps) {
    this.ldaps = ldaps;
    return this;
  }

  /**
   * A flag to determine whether or not Secure LDAP is enabled or disabled.
   * @return ldaps
   */
  @javax.annotation.Nullable
  public LdapsEnum getLdaps() {
    return ldaps;
  }

  public void setLdaps(LdapsEnum ldaps) {
    this.ldaps = ldaps;
  }


  public LdapsSettings pfxCertificate(String pfxCertificate) {
    this.pfxCertificate = pfxCertificate;
    return this;
  }

  /**
   * The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
   * @return pfxCertificate
   */
  @javax.annotation.Nullable
  public String getPfxCertificate() {
    return pfxCertificate;
  }

  public void setPfxCertificate(String pfxCertificate) {
    this.pfxCertificate = pfxCertificate;
  }


  public LdapsSettings pfxCertificatePassword(String pfxCertificatePassword) {
    this.pfxCertificatePassword = pfxCertificatePassword;
    return this;
  }

  /**
   * The password to decrypt the provided Secure LDAP certificate pfx file.
   * @return pfxCertificatePassword
   */
  @javax.annotation.Nullable
  public String getPfxCertificatePassword() {
    return pfxCertificatePassword;
  }

  public void setPfxCertificatePassword(String pfxCertificatePassword) {
    this.pfxCertificatePassword = pfxCertificatePassword;
  }


  /**
   * Public certificate used to configure secure ldap.
   * @return publicCertificate
   */
  @javax.annotation.Nullable
  public String getPublicCertificate() {
    return publicCertificate;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LdapsSettings ldapsSettings = (LdapsSettings) o;
    return Objects.equals(this.certificateNotAfter, ldapsSettings.certificateNotAfter) &&
        Objects.equals(this.certificateThumbprint, ldapsSettings.certificateThumbprint) &&
        Objects.equals(this.externalAccess, ldapsSettings.externalAccess) &&
        Objects.equals(this.ldaps, ldapsSettings.ldaps) &&
        Objects.equals(this.pfxCertificate, ldapsSettings.pfxCertificate) &&
        Objects.equals(this.pfxCertificatePassword, ldapsSettings.pfxCertificatePassword) &&
        Objects.equals(this.publicCertificate, ldapsSettings.publicCertificate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateNotAfter, certificateThumbprint, externalAccess, ldaps, pfxCertificate, pfxCertificatePassword, publicCertificate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LdapsSettings {\n");
    sb.append("    certificateNotAfter: ").append(toIndentedString(certificateNotAfter)).append("\n");
    sb.append("    certificateThumbprint: ").append(toIndentedString(certificateThumbprint)).append("\n");
    sb.append("    externalAccess: ").append(toIndentedString(externalAccess)).append("\n");
    sb.append("    ldaps: ").append(toIndentedString(ldaps)).append("\n");
    sb.append("    pfxCertificate: ").append(toIndentedString(pfxCertificate)).append("\n");
    sb.append("    pfxCertificatePassword: ").append(toIndentedString(pfxCertificatePassword)).append("\n");
    sb.append("    publicCertificate: ").append(toIndentedString(publicCertificate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificateNotAfter");
    openapiFields.add("certificateThumbprint");
    openapiFields.add("externalAccess");
    openapiFields.add("ldaps");
    openapiFields.add("pfxCertificate");
    openapiFields.add("pfxCertificatePassword");
    openapiFields.add("publicCertificate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LdapsSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LdapsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LdapsSettings is not found in the empty JSON string", LdapsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LdapsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LdapsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificateThumbprint") != null && !jsonObj.get("certificateThumbprint").isJsonNull()) && !jsonObj.get("certificateThumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateThumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateThumbprint").toString()));
      }
      if ((jsonObj.get("externalAccess") != null && !jsonObj.get("externalAccess").isJsonNull()) && !jsonObj.get("externalAccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalAccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalAccess").toString()));
      }
      // validate the optional field `externalAccess`
      if (jsonObj.get("externalAccess") != null && !jsonObj.get("externalAccess").isJsonNull()) {
        ExternalAccessEnum.validateJsonElement(jsonObj.get("externalAccess"));
      }
      if ((jsonObj.get("ldaps") != null && !jsonObj.get("ldaps").isJsonNull()) && !jsonObj.get("ldaps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldaps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldaps").toString()));
      }
      // validate the optional field `ldaps`
      if (jsonObj.get("ldaps") != null && !jsonObj.get("ldaps").isJsonNull()) {
        LdapsEnum.validateJsonElement(jsonObj.get("ldaps"));
      }
      if ((jsonObj.get("pfxCertificate") != null && !jsonObj.get("pfxCertificate").isJsonNull()) && !jsonObj.get("pfxCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pfxCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pfxCertificate").toString()));
      }
      if ((jsonObj.get("pfxCertificatePassword") != null && !jsonObj.get("pfxCertificatePassword").isJsonNull()) && !jsonObj.get("pfxCertificatePassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pfxCertificatePassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pfxCertificatePassword").toString()));
      }
      if ((jsonObj.get("publicCertificate") != null && !jsonObj.get("publicCertificate").isJsonNull()) && !jsonObj.get("publicCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicCertificate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LdapsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LdapsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LdapsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LdapsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<LdapsSettings>() {
           @Override
           public void write(JsonWriter out, LdapsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LdapsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LdapsSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LdapsSettings
   * @throws IOException if the JSON string is invalid with respect to LdapsSettings
   */
  public static LdapsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LdapsSettings.class);
  }

  /**
   * Convert an instance of LdapsSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

