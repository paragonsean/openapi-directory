/*
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Domain Security Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:51.611514-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainSecuritySettings {
  /**
   * A flag to determine whether or not NtlmV1 is enabled or disabled.
   */
  @JsonAdapter(NtlmV1Enum.Adapter.class)
  public enum NtlmV1Enum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    NtlmV1Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NtlmV1Enum fromValue(String value) {
      for (NtlmV1Enum b : NtlmV1Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NtlmV1Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NtlmV1Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NtlmV1Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NtlmV1Enum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NtlmV1Enum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NTLM_V1 = "ntlmV1";
  @SerializedName(SERIALIZED_NAME_NTLM_V1)
  private NtlmV1Enum ntlmV1;

  /**
   * A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
   */
  @JsonAdapter(SyncNtlmPasswordsEnum.Adapter.class)
  public enum SyncNtlmPasswordsEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    SyncNtlmPasswordsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncNtlmPasswordsEnum fromValue(String value) {
      for (SyncNtlmPasswordsEnum b : SyncNtlmPasswordsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncNtlmPasswordsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncNtlmPasswordsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncNtlmPasswordsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncNtlmPasswordsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyncNtlmPasswordsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_NTLM_PASSWORDS = "syncNtlmPasswords";
  @SerializedName(SERIALIZED_NAME_SYNC_NTLM_PASSWORDS)
  private SyncNtlmPasswordsEnum syncNtlmPasswords;

  /**
   * A flag to determine whether or not TlsV1 is enabled or disabled.
   */
  @JsonAdapter(TlsV1Enum.Adapter.class)
  public enum TlsV1Enum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    TlsV1Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TlsV1Enum fromValue(String value) {
      for (TlsV1Enum b : TlsV1Enum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TlsV1Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TlsV1Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TlsV1Enum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TlsV1Enum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TlsV1Enum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TLS_V1 = "tlsV1";
  @SerializedName(SERIALIZED_NAME_TLS_V1)
  private TlsV1Enum tlsV1;

  public DomainSecuritySettings() {
  }

  public DomainSecuritySettings ntlmV1(NtlmV1Enum ntlmV1) {
    this.ntlmV1 = ntlmV1;
    return this;
  }

  /**
   * A flag to determine whether or not NtlmV1 is enabled or disabled.
   * @return ntlmV1
   */
  @javax.annotation.Nullable
  public NtlmV1Enum getNtlmV1() {
    return ntlmV1;
  }

  public void setNtlmV1(NtlmV1Enum ntlmV1) {
    this.ntlmV1 = ntlmV1;
  }


  public DomainSecuritySettings syncNtlmPasswords(SyncNtlmPasswordsEnum syncNtlmPasswords) {
    this.syncNtlmPasswords = syncNtlmPasswords;
    return this;
  }

  /**
   * A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
   * @return syncNtlmPasswords
   */
  @javax.annotation.Nullable
  public SyncNtlmPasswordsEnum getSyncNtlmPasswords() {
    return syncNtlmPasswords;
  }

  public void setSyncNtlmPasswords(SyncNtlmPasswordsEnum syncNtlmPasswords) {
    this.syncNtlmPasswords = syncNtlmPasswords;
  }


  public DomainSecuritySettings tlsV1(TlsV1Enum tlsV1) {
    this.tlsV1 = tlsV1;
    return this;
  }

  /**
   * A flag to determine whether or not TlsV1 is enabled or disabled.
   * @return tlsV1
   */
  @javax.annotation.Nullable
  public TlsV1Enum getTlsV1() {
    return tlsV1;
  }

  public void setTlsV1(TlsV1Enum tlsV1) {
    this.tlsV1 = tlsV1;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainSecuritySettings domainSecuritySettings = (DomainSecuritySettings) o;
    return Objects.equals(this.ntlmV1, domainSecuritySettings.ntlmV1) &&
        Objects.equals(this.syncNtlmPasswords, domainSecuritySettings.syncNtlmPasswords) &&
        Objects.equals(this.tlsV1, domainSecuritySettings.tlsV1);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ntlmV1, syncNtlmPasswords, tlsV1);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainSecuritySettings {\n");
    sb.append("    ntlmV1: ").append(toIndentedString(ntlmV1)).append("\n");
    sb.append("    syncNtlmPasswords: ").append(toIndentedString(syncNtlmPasswords)).append("\n");
    sb.append("    tlsV1: ").append(toIndentedString(tlsV1)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ntlmV1");
    openapiFields.add("syncNtlmPasswords");
    openapiFields.add("tlsV1");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainSecuritySettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainSecuritySettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainSecuritySettings is not found in the empty JSON string", DomainSecuritySettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainSecuritySettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainSecuritySettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ntlmV1") != null && !jsonObj.get("ntlmV1").isJsonNull()) && !jsonObj.get("ntlmV1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ntlmV1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ntlmV1").toString()));
      }
      // validate the optional field `ntlmV1`
      if (jsonObj.get("ntlmV1") != null && !jsonObj.get("ntlmV1").isJsonNull()) {
        NtlmV1Enum.validateJsonElement(jsonObj.get("ntlmV1"));
      }
      if ((jsonObj.get("syncNtlmPasswords") != null && !jsonObj.get("syncNtlmPasswords").isJsonNull()) && !jsonObj.get("syncNtlmPasswords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncNtlmPasswords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncNtlmPasswords").toString()));
      }
      // validate the optional field `syncNtlmPasswords`
      if (jsonObj.get("syncNtlmPasswords") != null && !jsonObj.get("syncNtlmPasswords").isJsonNull()) {
        SyncNtlmPasswordsEnum.validateJsonElement(jsonObj.get("syncNtlmPasswords"));
      }
      if ((jsonObj.get("tlsV1") != null && !jsonObj.get("tlsV1").isJsonNull()) && !jsonObj.get("tlsV1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tlsV1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tlsV1").toString()));
      }
      // validate the optional field `tlsV1`
      if (jsonObj.get("tlsV1") != null && !jsonObj.get("tlsV1").isJsonNull()) {
        TlsV1Enum.validateJsonElement(jsonObj.get("tlsV1"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainSecuritySettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainSecuritySettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainSecuritySettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainSecuritySettings.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainSecuritySettings>() {
           @Override
           public void write(JsonWriter out, DomainSecuritySettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainSecuritySettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainSecuritySettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainSecuritySettings
   * @throws IOException if the JSON string is invalid with respect to DomainSecuritySettings
   */
  public static DomainSecuritySettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainSecuritySettings.class);
  }

  /**
   * Convert an instance of DomainSecuritySettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

