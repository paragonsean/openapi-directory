# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_alert import HealthAlert
from openapi_server.models.health_monitor import HealthMonitor
from openapi_server import util


class ReplicaSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_controller_ip_address: List[str]=None, external_access_ip_address: str=None, health_alerts: List[HealthAlert]=None, health_last_evaluated: datetime=None, health_monitors: List[HealthMonitor]=None, location: str=None, replica_set_id: str=None, service_status: str=None, subnet_id: str=None, vnet_site_id: str=None):
        """ReplicaSet - a model defined in OpenAPI

        :param domain_controller_ip_address: The domain_controller_ip_address of this ReplicaSet.
        :param external_access_ip_address: The external_access_ip_address of this ReplicaSet.
        :param health_alerts: The health_alerts of this ReplicaSet.
        :param health_last_evaluated: The health_last_evaluated of this ReplicaSet.
        :param health_monitors: The health_monitors of this ReplicaSet.
        :param location: The location of this ReplicaSet.
        :param replica_set_id: The replica_set_id of this ReplicaSet.
        :param service_status: The service_status of this ReplicaSet.
        :param subnet_id: The subnet_id of this ReplicaSet.
        :param vnet_site_id: The vnet_site_id of this ReplicaSet.
        """
        self.openapi_types = {
            'domain_controller_ip_address': List[str],
            'external_access_ip_address': str,
            'health_alerts': List[HealthAlert],
            'health_last_evaluated': datetime,
            'health_monitors': List[HealthMonitor],
            'location': str,
            'replica_set_id': str,
            'service_status': str,
            'subnet_id': str,
            'vnet_site_id': str
        }

        self.attribute_map = {
            'domain_controller_ip_address': 'domainControllerIpAddress',
            'external_access_ip_address': 'externalAccessIpAddress',
            'health_alerts': 'healthAlerts',
            'health_last_evaluated': 'healthLastEvaluated',
            'health_monitors': 'healthMonitors',
            'location': 'location',
            'replica_set_id': 'replicaSetId',
            'service_status': 'serviceStatus',
            'subnet_id': 'subnetId',
            'vnet_site_id': 'vnetSiteId'
        }

        self._domain_controller_ip_address = domain_controller_ip_address
        self._external_access_ip_address = external_access_ip_address
        self._health_alerts = health_alerts
        self._health_last_evaluated = health_last_evaluated
        self._health_monitors = health_monitors
        self._location = location
        self._replica_set_id = replica_set_id
        self._service_status = service_status
        self._subnet_id = subnet_id
        self._vnet_site_id = vnet_site_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicaSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicaSet of this ReplicaSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_controller_ip_address(self):
        """Gets the domain_controller_ip_address of this ReplicaSet.

        List of Domain Controller IP Address

        :return: The domain_controller_ip_address of this ReplicaSet.
        :rtype: List[str]
        """
        return self._domain_controller_ip_address

    @domain_controller_ip_address.setter
    def domain_controller_ip_address(self, domain_controller_ip_address):
        """Sets the domain_controller_ip_address of this ReplicaSet.

        List of Domain Controller IP Address

        :param domain_controller_ip_address: The domain_controller_ip_address of this ReplicaSet.
        :type domain_controller_ip_address: List[str]
        """

        self._domain_controller_ip_address = domain_controller_ip_address

    @property
    def external_access_ip_address(self):
        """Gets the external_access_ip_address of this ReplicaSet.

        External access ip address.

        :return: The external_access_ip_address of this ReplicaSet.
        :rtype: str
        """
        return self._external_access_ip_address

    @external_access_ip_address.setter
    def external_access_ip_address(self, external_access_ip_address):
        """Sets the external_access_ip_address of this ReplicaSet.

        External access ip address.

        :param external_access_ip_address: The external_access_ip_address of this ReplicaSet.
        :type external_access_ip_address: str
        """

        self._external_access_ip_address = external_access_ip_address

    @property
    def health_alerts(self):
        """Gets the health_alerts of this ReplicaSet.

        List of Domain Health Alerts

        :return: The health_alerts of this ReplicaSet.
        :rtype: List[HealthAlert]
        """
        return self._health_alerts

    @health_alerts.setter
    def health_alerts(self, health_alerts):
        """Sets the health_alerts of this ReplicaSet.

        List of Domain Health Alerts

        :param health_alerts: The health_alerts of this ReplicaSet.
        :type health_alerts: List[HealthAlert]
        """

        self._health_alerts = health_alerts

    @property
    def health_last_evaluated(self):
        """Gets the health_last_evaluated of this ReplicaSet.

        Last domain evaluation run DateTime

        :return: The health_last_evaluated of this ReplicaSet.
        :rtype: datetime
        """
        return self._health_last_evaluated

    @health_last_evaluated.setter
    def health_last_evaluated(self, health_last_evaluated):
        """Sets the health_last_evaluated of this ReplicaSet.

        Last domain evaluation run DateTime

        :param health_last_evaluated: The health_last_evaluated of this ReplicaSet.
        :type health_last_evaluated: datetime
        """

        self._health_last_evaluated = health_last_evaluated

    @property
    def health_monitors(self):
        """Gets the health_monitors of this ReplicaSet.

        List of Domain Health Monitors

        :return: The health_monitors of this ReplicaSet.
        :rtype: List[HealthMonitor]
        """
        return self._health_monitors

    @health_monitors.setter
    def health_monitors(self, health_monitors):
        """Sets the health_monitors of this ReplicaSet.

        List of Domain Health Monitors

        :param health_monitors: The health_monitors of this ReplicaSet.
        :type health_monitors: List[HealthMonitor]
        """

        self._health_monitors = health_monitors

    @property
    def location(self):
        """Gets the location of this ReplicaSet.

        Virtual network location

        :return: The location of this ReplicaSet.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ReplicaSet.

        Virtual network location

        :param location: The location of this ReplicaSet.
        :type location: str
        """

        self._location = location

    @property
    def replica_set_id(self):
        """Gets the replica_set_id of this ReplicaSet.

        ReplicaSet Id

        :return: The replica_set_id of this ReplicaSet.
        :rtype: str
        """
        return self._replica_set_id

    @replica_set_id.setter
    def replica_set_id(self, replica_set_id):
        """Sets the replica_set_id of this ReplicaSet.

        ReplicaSet Id

        :param replica_set_id: The replica_set_id of this ReplicaSet.
        :type replica_set_id: str
        """

        self._replica_set_id = replica_set_id

    @property
    def service_status(self):
        """Gets the service_status of this ReplicaSet.

        Status of Domain Service instance

        :return: The service_status of this ReplicaSet.
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this ReplicaSet.

        Status of Domain Service instance

        :param service_status: The service_status of this ReplicaSet.
        :type service_status: str
        """

        self._service_status = service_status

    @property
    def subnet_id(self):
        """Gets the subnet_id of this ReplicaSet.

        The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.

        :return: The subnet_id of this ReplicaSet.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this ReplicaSet.

        The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.

        :param subnet_id: The subnet_id of this ReplicaSet.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id

    @property
    def vnet_site_id(self):
        """Gets the vnet_site_id of this ReplicaSet.

        Virtual network site id

        :return: The vnet_site_id of this ReplicaSet.
        :rtype: str
        """
        return self._vnet_site_id

    @vnet_site_id.setter
    def vnet_site_id(self, vnet_site_id):
        """Sets the vnet_site_id of this ReplicaSet.

        Virtual network site id

        :param vnet_site_id: The vnet_site_id of this ReplicaSet.
        :type vnet_site_id: str
        """

        self._vnet_site_id = vnet_site_id
