# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LdapsSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_not_after: datetime=None, certificate_thumbprint: str=None, external_access: str=None, ldaps: str=None, pfx_certificate: str=None, pfx_certificate_password: str=None, public_certificate: str=None):
        """LdapsSettings - a model defined in OpenAPI

        :param certificate_not_after: The certificate_not_after of this LdapsSettings.
        :param certificate_thumbprint: The certificate_thumbprint of this LdapsSettings.
        :param external_access: The external_access of this LdapsSettings.
        :param ldaps: The ldaps of this LdapsSettings.
        :param pfx_certificate: The pfx_certificate of this LdapsSettings.
        :param pfx_certificate_password: The pfx_certificate_password of this LdapsSettings.
        :param public_certificate: The public_certificate of this LdapsSettings.
        """
        self.openapi_types = {
            'certificate_not_after': datetime,
            'certificate_thumbprint': str,
            'external_access': str,
            'ldaps': str,
            'pfx_certificate': str,
            'pfx_certificate_password': str,
            'public_certificate': str
        }

        self.attribute_map = {
            'certificate_not_after': 'certificateNotAfter',
            'certificate_thumbprint': 'certificateThumbprint',
            'external_access': 'externalAccess',
            'ldaps': 'ldaps',
            'pfx_certificate': 'pfxCertificate',
            'pfx_certificate_password': 'pfxCertificatePassword',
            'public_certificate': 'publicCertificate'
        }

        self._certificate_not_after = certificate_not_after
        self._certificate_thumbprint = certificate_thumbprint
        self._external_access = external_access
        self._ldaps = ldaps
        self._pfx_certificate = pfx_certificate
        self._pfx_certificate_password = pfx_certificate_password
        self._public_certificate = public_certificate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LdapsSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LdapsSettings of this LdapsSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_not_after(self):
        """Gets the certificate_not_after of this LdapsSettings.

        NotAfter DateTime of configure ldaps certificate.

        :return: The certificate_not_after of this LdapsSettings.
        :rtype: datetime
        """
        return self._certificate_not_after

    @certificate_not_after.setter
    def certificate_not_after(self, certificate_not_after):
        """Sets the certificate_not_after of this LdapsSettings.

        NotAfter DateTime of configure ldaps certificate.

        :param certificate_not_after: The certificate_not_after of this LdapsSettings.
        :type certificate_not_after: datetime
        """

        self._certificate_not_after = certificate_not_after

    @property
    def certificate_thumbprint(self):
        """Gets the certificate_thumbprint of this LdapsSettings.

        Thumbprint of configure ldaps certificate.

        :return: The certificate_thumbprint of this LdapsSettings.
        :rtype: str
        """
        return self._certificate_thumbprint

    @certificate_thumbprint.setter
    def certificate_thumbprint(self, certificate_thumbprint):
        """Sets the certificate_thumbprint of this LdapsSettings.

        Thumbprint of configure ldaps certificate.

        :param certificate_thumbprint: The certificate_thumbprint of this LdapsSettings.
        :type certificate_thumbprint: str
        """

        self._certificate_thumbprint = certificate_thumbprint

    @property
    def external_access(self):
        """Gets the external_access of this LdapsSettings.

        A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.

        :return: The external_access of this LdapsSettings.
        :rtype: str
        """
        return self._external_access

    @external_access.setter
    def external_access(self, external_access):
        """Sets the external_access of this LdapsSettings.

        A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.

        :param external_access: The external_access of this LdapsSettings.
        :type external_access: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if external_access not in allowed_values:
            raise ValueError(
                "Invalid value for `external_access` ({0}), must be one of {1}"
                .format(external_access, allowed_values)
            )

        self._external_access = external_access

    @property
    def ldaps(self):
        """Gets the ldaps of this LdapsSettings.

        A flag to determine whether or not Secure LDAP is enabled or disabled.

        :return: The ldaps of this LdapsSettings.
        :rtype: str
        """
        return self._ldaps

    @ldaps.setter
    def ldaps(self, ldaps):
        """Sets the ldaps of this LdapsSettings.

        A flag to determine whether or not Secure LDAP is enabled or disabled.

        :param ldaps: The ldaps of this LdapsSettings.
        :type ldaps: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if ldaps not in allowed_values:
            raise ValueError(
                "Invalid value for `ldaps` ({0}), must be one of {1}"
                .format(ldaps, allowed_values)
            )

        self._ldaps = ldaps

    @property
    def pfx_certificate(self):
        """Gets the pfx_certificate of this LdapsSettings.

        The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.

        :return: The pfx_certificate of this LdapsSettings.
        :rtype: str
        """
        return self._pfx_certificate

    @pfx_certificate.setter
    def pfx_certificate(self, pfx_certificate):
        """Sets the pfx_certificate of this LdapsSettings.

        The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.

        :param pfx_certificate: The pfx_certificate of this LdapsSettings.
        :type pfx_certificate: str
        """

        self._pfx_certificate = pfx_certificate

    @property
    def pfx_certificate_password(self):
        """Gets the pfx_certificate_password of this LdapsSettings.

        The password to decrypt the provided Secure LDAP certificate pfx file.

        :return: The pfx_certificate_password of this LdapsSettings.
        :rtype: str
        """
        return self._pfx_certificate_password

    @pfx_certificate_password.setter
    def pfx_certificate_password(self, pfx_certificate_password):
        """Sets the pfx_certificate_password of this LdapsSettings.

        The password to decrypt the provided Secure LDAP certificate pfx file.

        :param pfx_certificate_password: The pfx_certificate_password of this LdapsSettings.
        :type pfx_certificate_password: str
        """

        self._pfx_certificate_password = pfx_certificate_password

    @property
    def public_certificate(self):
        """Gets the public_certificate of this LdapsSettings.

        Public certificate used to configure secure ldap.

        :return: The public_certificate of this LdapsSettings.
        :rtype: str
        """
        return self._public_certificate

    @public_certificate.setter
    def public_certificate(self, public_certificate):
        """Sets the public_certificate of this LdapsSettings.

        Public certificate used to configure secure ldap.

        :param public_certificate: The public_certificate of this LdapsSettings.
        :type public_certificate: str
        """

        self._public_certificate = public_certificate
