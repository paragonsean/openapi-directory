# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_security_settings import DomainSecuritySettings
from openapi_server.models.ldaps_settings import LdapsSettings
from openapi_server.models.notification_settings import NotificationSettings
from openapi_server.models.replica_set import ReplicaSet
from openapi_server import util


class DomainServiceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_id: str=None, domain_name: str=None, domain_security_settings: DomainSecuritySettings=None, filtered_sync: str=None, ldaps_settings: LdapsSettings=None, notification_settings: NotificationSettings=None, provisioning_state: str=None, replica_sets: List[ReplicaSet]=None, sync_owner: str=None, tenant_id: str=None, version: int=None):
        """DomainServiceProperties - a model defined in OpenAPI

        :param deployment_id: The deployment_id of this DomainServiceProperties.
        :param domain_name: The domain_name of this DomainServiceProperties.
        :param domain_security_settings: The domain_security_settings of this DomainServiceProperties.
        :param filtered_sync: The filtered_sync of this DomainServiceProperties.
        :param ldaps_settings: The ldaps_settings of this DomainServiceProperties.
        :param notification_settings: The notification_settings of this DomainServiceProperties.
        :param provisioning_state: The provisioning_state of this DomainServiceProperties.
        :param replica_sets: The replica_sets of this DomainServiceProperties.
        :param sync_owner: The sync_owner of this DomainServiceProperties.
        :param tenant_id: The tenant_id of this DomainServiceProperties.
        :param version: The version of this DomainServiceProperties.
        """
        self.openapi_types = {
            'deployment_id': str,
            'domain_name': str,
            'domain_security_settings': DomainSecuritySettings,
            'filtered_sync': str,
            'ldaps_settings': LdapsSettings,
            'notification_settings': NotificationSettings,
            'provisioning_state': str,
            'replica_sets': List[ReplicaSet],
            'sync_owner': str,
            'tenant_id': str,
            'version': int
        }

        self.attribute_map = {
            'deployment_id': 'deploymentId',
            'domain_name': 'domainName',
            'domain_security_settings': 'domainSecuritySettings',
            'filtered_sync': 'filteredSync',
            'ldaps_settings': 'ldapsSettings',
            'notification_settings': 'notificationSettings',
            'provisioning_state': 'provisioningState',
            'replica_sets': 'replicaSets',
            'sync_owner': 'syncOwner',
            'tenant_id': 'tenantId',
            'version': 'version'
        }

        self._deployment_id = deployment_id
        self._domain_name = domain_name
        self._domain_security_settings = domain_security_settings
        self._filtered_sync = filtered_sync
        self._ldaps_settings = ldaps_settings
        self._notification_settings = notification_settings
        self._provisioning_state = provisioning_state
        self._replica_sets = replica_sets
        self._sync_owner = sync_owner
        self._tenant_id = tenant_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainServiceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainServiceProperties of this DomainServiceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_id(self):
        """Gets the deployment_id of this DomainServiceProperties.

        Deployment Id

        :return: The deployment_id of this DomainServiceProperties.
        :rtype: str
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """Sets the deployment_id of this DomainServiceProperties.

        Deployment Id

        :param deployment_id: The deployment_id of this DomainServiceProperties.
        :type deployment_id: str
        """

        self._deployment_id = deployment_id

    @property
    def domain_name(self):
        """Gets the domain_name of this DomainServiceProperties.

        The name of the Azure domain that the user would like to deploy Domain Services to.

        :return: The domain_name of this DomainServiceProperties.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DomainServiceProperties.

        The name of the Azure domain that the user would like to deploy Domain Services to.

        :param domain_name: The domain_name of this DomainServiceProperties.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def domain_security_settings(self):
        """Gets the domain_security_settings of this DomainServiceProperties.


        :return: The domain_security_settings of this DomainServiceProperties.
        :rtype: DomainSecuritySettings
        """
        return self._domain_security_settings

    @domain_security_settings.setter
    def domain_security_settings(self, domain_security_settings):
        """Sets the domain_security_settings of this DomainServiceProperties.


        :param domain_security_settings: The domain_security_settings of this DomainServiceProperties.
        :type domain_security_settings: DomainSecuritySettings
        """

        self._domain_security_settings = domain_security_settings

    @property
    def filtered_sync(self):
        """Gets the filtered_sync of this DomainServiceProperties.

        Enabled or Disabled flag to turn on Group-based filtered sync

        :return: The filtered_sync of this DomainServiceProperties.
        :rtype: str
        """
        return self._filtered_sync

    @filtered_sync.setter
    def filtered_sync(self, filtered_sync):
        """Sets the filtered_sync of this DomainServiceProperties.

        Enabled or Disabled flag to turn on Group-based filtered sync

        :param filtered_sync: The filtered_sync of this DomainServiceProperties.
        :type filtered_sync: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if filtered_sync not in allowed_values:
            raise ValueError(
                "Invalid value for `filtered_sync` ({0}), must be one of {1}"
                .format(filtered_sync, allowed_values)
            )

        self._filtered_sync = filtered_sync

    @property
    def ldaps_settings(self):
        """Gets the ldaps_settings of this DomainServiceProperties.


        :return: The ldaps_settings of this DomainServiceProperties.
        :rtype: LdapsSettings
        """
        return self._ldaps_settings

    @ldaps_settings.setter
    def ldaps_settings(self, ldaps_settings):
        """Sets the ldaps_settings of this DomainServiceProperties.


        :param ldaps_settings: The ldaps_settings of this DomainServiceProperties.
        :type ldaps_settings: LdapsSettings
        """

        self._ldaps_settings = ldaps_settings

    @property
    def notification_settings(self):
        """Gets the notification_settings of this DomainServiceProperties.


        :return: The notification_settings of this DomainServiceProperties.
        :rtype: NotificationSettings
        """
        return self._notification_settings

    @notification_settings.setter
    def notification_settings(self, notification_settings):
        """Sets the notification_settings of this DomainServiceProperties.


        :param notification_settings: The notification_settings of this DomainServiceProperties.
        :type notification_settings: NotificationSettings
        """

        self._notification_settings = notification_settings

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DomainServiceProperties.

        the current deployment or provisioning state, which only appears in the response.

        :return: The provisioning_state of this DomainServiceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DomainServiceProperties.

        the current deployment or provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this DomainServiceProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def replica_sets(self):
        """Gets the replica_sets of this DomainServiceProperties.

        List of ReplicaSets

        :return: The replica_sets of this DomainServiceProperties.
        :rtype: List[ReplicaSet]
        """
        return self._replica_sets

    @replica_sets.setter
    def replica_sets(self, replica_sets):
        """Sets the replica_sets of this DomainServiceProperties.

        List of ReplicaSets

        :param replica_sets: The replica_sets of this DomainServiceProperties.
        :type replica_sets: List[ReplicaSet]
        """

        self._replica_sets = replica_sets

    @property
    def sync_owner(self):
        """Gets the sync_owner of this DomainServiceProperties.

        SyncOwner ReplicaSet Id

        :return: The sync_owner of this DomainServiceProperties.
        :rtype: str
        """
        return self._sync_owner

    @sync_owner.setter
    def sync_owner(self, sync_owner):
        """Sets the sync_owner of this DomainServiceProperties.

        SyncOwner ReplicaSet Id

        :param sync_owner: The sync_owner of this DomainServiceProperties.
        :type sync_owner: str
        """

        self._sync_owner = sync_owner

    @property
    def tenant_id(self):
        """Gets the tenant_id of this DomainServiceProperties.

        Azure Active Directory Tenant Id

        :return: The tenant_id of this DomainServiceProperties.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this DomainServiceProperties.

        Azure Active Directory Tenant Id

        :param tenant_id: The tenant_id of this DomainServiceProperties.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def version(self):
        """Gets the version of this DomainServiceProperties.

        Data Model Version

        :return: The version of this DomainServiceProperties.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DomainServiceProperties.

        Data Model Version

        :param version: The version of this DomainServiceProperties.
        :type version: int
        """

        self._version = version
