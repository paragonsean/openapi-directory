/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DomainSecuritySettings from './DomainSecuritySettings';
import LdapsSettings from './LdapsSettings';
import NotificationSettings from './NotificationSettings';
import ReplicaSet from './ReplicaSet';

/**
 * The DomainServiceProperties model module.
 * @module model/DomainServiceProperties
 * @version 2020-01-01
 */
class DomainServiceProperties {
    /**
     * Constructs a new <code>DomainServiceProperties</code>.
     * Properties of the Domain Service.
     * @alias module:model/DomainServiceProperties
     */
    constructor() { 
        
        DomainServiceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DomainServiceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainServiceProperties} obj Optional instance to populate.
     * @return {module:model/DomainServiceProperties} The populated <code>DomainServiceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainServiceProperties();

            if (data.hasOwnProperty('deploymentId')) {
                obj['deploymentId'] = ApiClient.convertToType(data['deploymentId'], 'String');
            }
            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('domainSecuritySettings')) {
                obj['domainSecuritySettings'] = DomainSecuritySettings.constructFromObject(data['domainSecuritySettings']);
            }
            if (data.hasOwnProperty('filteredSync')) {
                obj['filteredSync'] = ApiClient.convertToType(data['filteredSync'], 'String');
            }
            if (data.hasOwnProperty('ldapsSettings')) {
                obj['ldapsSettings'] = LdapsSettings.constructFromObject(data['ldapsSettings']);
            }
            if (data.hasOwnProperty('notificationSettings')) {
                obj['notificationSettings'] = NotificationSettings.constructFromObject(data['notificationSettings']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('replicaSets')) {
                obj['replicaSets'] = ApiClient.convertToType(data['replicaSets'], [ReplicaSet]);
            }
            if (data.hasOwnProperty('syncOwner')) {
                obj['syncOwner'] = ApiClient.convertToType(data['syncOwner'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainServiceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainServiceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deploymentId'] && !(typeof data['deploymentId'] === 'string' || data['deploymentId'] instanceof String)) {
            throw new Error("Expected the field `deploymentId` to be a primitive type in the JSON string but got " + data['deploymentId']);
        }
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        // validate the optional field `domainSecuritySettings`
        if (data['domainSecuritySettings']) { // data not null
          DomainSecuritySettings.validateJSON(data['domainSecuritySettings']);
        }
        // ensure the json data is a string
        if (data['filteredSync'] && !(typeof data['filteredSync'] === 'string' || data['filteredSync'] instanceof String)) {
            throw new Error("Expected the field `filteredSync` to be a primitive type in the JSON string but got " + data['filteredSync']);
        }
        // validate the optional field `ldapsSettings`
        if (data['ldapsSettings']) { // data not null
          LdapsSettings.validateJSON(data['ldapsSettings']);
        }
        // validate the optional field `notificationSettings`
        if (data['notificationSettings']) { // data not null
          NotificationSettings.validateJSON(data['notificationSettings']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['replicaSets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['replicaSets'])) {
                throw new Error("Expected the field `replicaSets` to be an array in the JSON data but got " + data['replicaSets']);
            }
            // validate the optional field `replicaSets` (array)
            for (const item of data['replicaSets']) {
                ReplicaSet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['syncOwner'] && !(typeof data['syncOwner'] === 'string' || data['syncOwner'] instanceof String)) {
            throw new Error("Expected the field `syncOwner` to be a primitive type in the JSON string but got " + data['syncOwner']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}



/**
 * Deployment Id
 * @member {String} deploymentId
 */
DomainServiceProperties.prototype['deploymentId'] = undefined;

/**
 * The name of the Azure domain that the user would like to deploy Domain Services to.
 * @member {String} domainName
 */
DomainServiceProperties.prototype['domainName'] = undefined;

/**
 * @member {module:model/DomainSecuritySettings} domainSecuritySettings
 */
DomainServiceProperties.prototype['domainSecuritySettings'] = undefined;

/**
 * Enabled or Disabled flag to turn on Group-based filtered sync
 * @member {module:model/DomainServiceProperties.FilteredSyncEnum} filteredSync
 */
DomainServiceProperties.prototype['filteredSync'] = undefined;

/**
 * @member {module:model/LdapsSettings} ldapsSettings
 */
DomainServiceProperties.prototype['ldapsSettings'] = undefined;

/**
 * @member {module:model/NotificationSettings} notificationSettings
 */
DomainServiceProperties.prototype['notificationSettings'] = undefined;

/**
 * the current deployment or provisioning state, which only appears in the response.
 * @member {String} provisioningState
 */
DomainServiceProperties.prototype['provisioningState'] = undefined;

/**
 * List of ReplicaSets
 * @member {Array.<module:model/ReplicaSet>} replicaSets
 */
DomainServiceProperties.prototype['replicaSets'] = undefined;

/**
 * SyncOwner ReplicaSet Id
 * @member {String} syncOwner
 */
DomainServiceProperties.prototype['syncOwner'] = undefined;

/**
 * Azure Active Directory Tenant Id
 * @member {String} tenantId
 */
DomainServiceProperties.prototype['tenantId'] = undefined;

/**
 * Data Model Version
 * @member {Number} version
 */
DomainServiceProperties.prototype['version'] = undefined;





/**
 * Allowed values for the <code>filteredSync</code> property.
 * @enum {String}
 * @readonly
 */
DomainServiceProperties['FilteredSyncEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default DomainServiceProperties;

