/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthAlert from './HealthAlert';
import HealthMonitor from './HealthMonitor';

/**
 * The ReplicaSet model module.
 * @module model/ReplicaSet
 * @version 2020-01-01
 */
class ReplicaSet {
    /**
     * Constructs a new <code>ReplicaSet</code>.
     * Replica Set Definition
     * @alias module:model/ReplicaSet
     */
    constructor() { 
        
        ReplicaSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplicaSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplicaSet} obj Optional instance to populate.
     * @return {module:model/ReplicaSet} The populated <code>ReplicaSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplicaSet();

            if (data.hasOwnProperty('domainControllerIpAddress')) {
                obj['domainControllerIpAddress'] = ApiClient.convertToType(data['domainControllerIpAddress'], ['String']);
            }
            if (data.hasOwnProperty('externalAccessIpAddress')) {
                obj['externalAccessIpAddress'] = ApiClient.convertToType(data['externalAccessIpAddress'], 'String');
            }
            if (data.hasOwnProperty('healthAlerts')) {
                obj['healthAlerts'] = ApiClient.convertToType(data['healthAlerts'], [HealthAlert]);
            }
            if (data.hasOwnProperty('healthLastEvaluated')) {
                obj['healthLastEvaluated'] = ApiClient.convertToType(data['healthLastEvaluated'], 'Date');
            }
            if (data.hasOwnProperty('healthMonitors')) {
                obj['healthMonitors'] = ApiClient.convertToType(data['healthMonitors'], [HealthMonitor]);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('replicaSetId')) {
                obj['replicaSetId'] = ApiClient.convertToType(data['replicaSetId'], 'String');
            }
            if (data.hasOwnProperty('serviceStatus')) {
                obj['serviceStatus'] = ApiClient.convertToType(data['serviceStatus'], 'String');
            }
            if (data.hasOwnProperty('subnetId')) {
                obj['subnetId'] = ApiClient.convertToType(data['subnetId'], 'String');
            }
            if (data.hasOwnProperty('vnetSiteId')) {
                obj['vnetSiteId'] = ApiClient.convertToType(data['vnetSiteId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplicaSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplicaSet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['domainControllerIpAddress'])) {
            throw new Error("Expected the field `domainControllerIpAddress` to be an array in the JSON data but got " + data['domainControllerIpAddress']);
        }
        // ensure the json data is a string
        if (data['externalAccessIpAddress'] && !(typeof data['externalAccessIpAddress'] === 'string' || data['externalAccessIpAddress'] instanceof String)) {
            throw new Error("Expected the field `externalAccessIpAddress` to be a primitive type in the JSON string but got " + data['externalAccessIpAddress']);
        }
        if (data['healthAlerts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['healthAlerts'])) {
                throw new Error("Expected the field `healthAlerts` to be an array in the JSON data but got " + data['healthAlerts']);
            }
            // validate the optional field `healthAlerts` (array)
            for (const item of data['healthAlerts']) {
                HealthAlert.validateJSON(item);
            };
        }
        if (data['healthMonitors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['healthMonitors'])) {
                throw new Error("Expected the field `healthMonitors` to be an array in the JSON data but got " + data['healthMonitors']);
            }
            // validate the optional field `healthMonitors` (array)
            for (const item of data['healthMonitors']) {
                HealthMonitor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['replicaSetId'] && !(typeof data['replicaSetId'] === 'string' || data['replicaSetId'] instanceof String)) {
            throw new Error("Expected the field `replicaSetId` to be a primitive type in the JSON string but got " + data['replicaSetId']);
        }
        // ensure the json data is a string
        if (data['serviceStatus'] && !(typeof data['serviceStatus'] === 'string' || data['serviceStatus'] instanceof String)) {
            throw new Error("Expected the field `serviceStatus` to be a primitive type in the JSON string but got " + data['serviceStatus']);
        }
        // ensure the json data is a string
        if (data['subnetId'] && !(typeof data['subnetId'] === 'string' || data['subnetId'] instanceof String)) {
            throw new Error("Expected the field `subnetId` to be a primitive type in the JSON string but got " + data['subnetId']);
        }
        // ensure the json data is a string
        if (data['vnetSiteId'] && !(typeof data['vnetSiteId'] === 'string' || data['vnetSiteId'] instanceof String)) {
            throw new Error("Expected the field `vnetSiteId` to be a primitive type in the JSON string but got " + data['vnetSiteId']);
        }

        return true;
    }


}



/**
 * List of Domain Controller IP Address
 * @member {Array.<String>} domainControllerIpAddress
 */
ReplicaSet.prototype['domainControllerIpAddress'] = undefined;

/**
 * External access ip address.
 * @member {String} externalAccessIpAddress
 */
ReplicaSet.prototype['externalAccessIpAddress'] = undefined;

/**
 * List of Domain Health Alerts
 * @member {Array.<module:model/HealthAlert>} healthAlerts
 */
ReplicaSet.prototype['healthAlerts'] = undefined;

/**
 * Last domain evaluation run DateTime
 * @member {Date} healthLastEvaluated
 */
ReplicaSet.prototype['healthLastEvaluated'] = undefined;

/**
 * List of Domain Health Monitors
 * @member {Array.<module:model/HealthMonitor>} healthMonitors
 */
ReplicaSet.prototype['healthMonitors'] = undefined;

/**
 * Virtual network location
 * @member {String} location
 */
ReplicaSet.prototype['location'] = undefined;

/**
 * ReplicaSet Id
 * @member {String} replicaSetId
 */
ReplicaSet.prototype['replicaSetId'] = undefined;

/**
 * Status of Domain Service instance
 * @member {String} serviceStatus
 */
ReplicaSet.prototype['serviceStatus'] = undefined;

/**
 * The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
 * @member {String} subnetId
 */
ReplicaSet.prototype['subnetId'] = undefined;

/**
 * Virtual network site id
 * @member {String} vnetSiteId
 */
ReplicaSet.prototype['vnetSiteId'] = undefined;






export default ReplicaSet;

