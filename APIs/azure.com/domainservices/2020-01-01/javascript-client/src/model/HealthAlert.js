/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HealthAlert model module.
 * @module model/HealthAlert
 * @version 2020-01-01
 */
class HealthAlert {
    /**
     * Constructs a new <code>HealthAlert</code>.
     * Health Alert Description
     * @alias module:model/HealthAlert
     */
    constructor() { 
        
        HealthAlert.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HealthAlert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HealthAlert} obj Optional instance to populate.
     * @return {module:model/HealthAlert} The populated <code>HealthAlert</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HealthAlert();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issue')) {
                obj['issue'] = ApiClient.convertToType(data['issue'], 'String');
            }
            if (data.hasOwnProperty('lastDetected')) {
                obj['lastDetected'] = ApiClient.convertToType(data['lastDetected'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('raised')) {
                obj['raised'] = ApiClient.convertToType(data['raised'], 'Date');
            }
            if (data.hasOwnProperty('resolutionUri')) {
                obj['resolutionUri'] = ApiClient.convertToType(data['resolutionUri'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HealthAlert</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HealthAlert</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['issue'] && !(typeof data['issue'] === 'string' || data['issue'] instanceof String)) {
            throw new Error("Expected the field `issue` to be a primitive type in the JSON string but got " + data['issue']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resolutionUri'] && !(typeof data['resolutionUri'] === 'string' || data['resolutionUri'] instanceof String)) {
            throw new Error("Expected the field `resolutionUri` to be a primitive type in the JSON string but got " + data['resolutionUri']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }

        return true;
    }


}



/**
 * Health Alert Id
 * @member {String} id
 */
HealthAlert.prototype['id'] = undefined;

/**
 * Health Alert Issue
 * @member {String} issue
 */
HealthAlert.prototype['issue'] = undefined;

/**
 * Health Alert Last Detected DateTime
 * @member {Date} lastDetected
 */
HealthAlert.prototype['lastDetected'] = undefined;

/**
 * Health Alert Name
 * @member {String} name
 */
HealthAlert.prototype['name'] = undefined;

/**
 * Health Alert Raised DateTime
 * @member {Date} raised
 */
HealthAlert.prototype['raised'] = undefined;

/**
 * Health Alert TSG Link
 * @member {String} resolutionUri
 */
HealthAlert.prototype['resolutionUri'] = undefined;

/**
 * Health Alert Severity
 * @member {String} severity
 */
HealthAlert.prototype['severity'] = undefined;






export default HealthAlert;

