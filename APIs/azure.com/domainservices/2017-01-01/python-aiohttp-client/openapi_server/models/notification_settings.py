# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_recipients: List[str]=None, notify_dc_admins: str=None, notify_global_admins: str=None):
        """NotificationSettings - a model defined in OpenAPI

        :param additional_recipients: The additional_recipients of this NotificationSettings.
        :param notify_dc_admins: The notify_dc_admins of this NotificationSettings.
        :param notify_global_admins: The notify_global_admins of this NotificationSettings.
        """
        self.openapi_types = {
            'additional_recipients': List[str],
            'notify_dc_admins': str,
            'notify_global_admins': str
        }

        self.attribute_map = {
            'additional_recipients': 'additionalRecipients',
            'notify_dc_admins': 'notifyDcAdmins',
            'notify_global_admins': 'notifyGlobalAdmins'
        }

        self._additional_recipients = additional_recipients
        self._notify_dc_admins = notify_dc_admins
        self._notify_global_admins = notify_global_admins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationSettings of this NotificationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_recipients(self):
        """Gets the additional_recipients of this NotificationSettings.

        The list of additional recipients

        :return: The additional_recipients of this NotificationSettings.
        :rtype: List[str]
        """
        return self._additional_recipients

    @additional_recipients.setter
    def additional_recipients(self, additional_recipients):
        """Sets the additional_recipients of this NotificationSettings.

        The list of additional recipients

        :param additional_recipients: The additional_recipients of this NotificationSettings.
        :type additional_recipients: List[str]
        """

        self._additional_recipients = additional_recipients

    @property
    def notify_dc_admins(self):
        """Gets the notify_dc_admins of this NotificationSettings.

        Should domain controller admins be notified

        :return: The notify_dc_admins of this NotificationSettings.
        :rtype: str
        """
        return self._notify_dc_admins

    @notify_dc_admins.setter
    def notify_dc_admins(self, notify_dc_admins):
        """Sets the notify_dc_admins of this NotificationSettings.

        Should domain controller admins be notified

        :param notify_dc_admins: The notify_dc_admins of this NotificationSettings.
        :type notify_dc_admins: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if notify_dc_admins not in allowed_values:
            raise ValueError(
                "Invalid value for `notify_dc_admins` ({0}), must be one of {1}"
                .format(notify_dc_admins, allowed_values)
            )

        self._notify_dc_admins = notify_dc_admins

    @property
    def notify_global_admins(self):
        """Gets the notify_global_admins of this NotificationSettings.

        Should global admins be notified

        :return: The notify_global_admins of this NotificationSettings.
        :rtype: str
        """
        return self._notify_global_admins

    @notify_global_admins.setter
    def notify_global_admins(self, notify_global_admins):
        """Sets the notify_global_admins of this NotificationSettings.

        Should global admins be notified

        :param notify_global_admins: The notify_global_admins of this NotificationSettings.
        :type notify_global_admins: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if notify_global_admins not in allowed_values:
            raise ValueError(
                "Invalid value for `notify_global_admins` ({0}), must be one of {1}"
                .format(notify_global_admins, allowed_values)
            )

        self._notify_global_admins = notify_global_admins
