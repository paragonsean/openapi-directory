# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DomainSecuritySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ntlm_v1: str=None, sync_ntlm_passwords: str=None, tls_v1: str=None):
        """DomainSecuritySettings - a model defined in OpenAPI

        :param ntlm_v1: The ntlm_v1 of this DomainSecuritySettings.
        :param sync_ntlm_passwords: The sync_ntlm_passwords of this DomainSecuritySettings.
        :param tls_v1: The tls_v1 of this DomainSecuritySettings.
        """
        self.openapi_types = {
            'ntlm_v1': str,
            'sync_ntlm_passwords': str,
            'tls_v1': str
        }

        self.attribute_map = {
            'ntlm_v1': 'ntlmV1',
            'sync_ntlm_passwords': 'syncNtlmPasswords',
            'tls_v1': 'tlsV1'
        }

        self._ntlm_v1 = ntlm_v1
        self._sync_ntlm_passwords = sync_ntlm_passwords
        self._tls_v1 = tls_v1

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainSecuritySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainSecuritySettings of this DomainSecuritySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ntlm_v1(self):
        """Gets the ntlm_v1 of this DomainSecuritySettings.

        A flag to determine whether or not NtlmV1 is enabled or disabled.

        :return: The ntlm_v1 of this DomainSecuritySettings.
        :rtype: str
        """
        return self._ntlm_v1

    @ntlm_v1.setter
    def ntlm_v1(self, ntlm_v1):
        """Sets the ntlm_v1 of this DomainSecuritySettings.

        A flag to determine whether or not NtlmV1 is enabled or disabled.

        :param ntlm_v1: The ntlm_v1 of this DomainSecuritySettings.
        :type ntlm_v1: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if ntlm_v1 not in allowed_values:
            raise ValueError(
                "Invalid value for `ntlm_v1` ({0}), must be one of {1}"
                .format(ntlm_v1, allowed_values)
            )

        self._ntlm_v1 = ntlm_v1

    @property
    def sync_ntlm_passwords(self):
        """Gets the sync_ntlm_passwords of this DomainSecuritySettings.

        A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.

        :return: The sync_ntlm_passwords of this DomainSecuritySettings.
        :rtype: str
        """
        return self._sync_ntlm_passwords

    @sync_ntlm_passwords.setter
    def sync_ntlm_passwords(self, sync_ntlm_passwords):
        """Sets the sync_ntlm_passwords of this DomainSecuritySettings.

        A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.

        :param sync_ntlm_passwords: The sync_ntlm_passwords of this DomainSecuritySettings.
        :type sync_ntlm_passwords: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if sync_ntlm_passwords not in allowed_values:
            raise ValueError(
                "Invalid value for `sync_ntlm_passwords` ({0}), must be one of {1}"
                .format(sync_ntlm_passwords, allowed_values)
            )

        self._sync_ntlm_passwords = sync_ntlm_passwords

    @property
    def tls_v1(self):
        """Gets the tls_v1 of this DomainSecuritySettings.

        A flag to determine whether or not TlsV1 is enabled or disabled.

        :return: The tls_v1 of this DomainSecuritySettings.
        :rtype: str
        """
        return self._tls_v1

    @tls_v1.setter
    def tls_v1(self, tls_v1):
        """Sets the tls_v1 of this DomainSecuritySettings.

        A flag to determine whether or not TlsV1 is enabled or disabled.

        :param tls_v1: The tls_v1 of this DomainSecuritySettings.
        :type tls_v1: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if tls_v1 not in allowed_values:
            raise ValueError(
                "Invalid value for `tls_v1` ({0}), must be one of {1}"
                .format(tls_v1, allowed_values)
            )

        self._tls_v1 = tls_v1
