# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_security_settings import DomainSecuritySettings
from openapi_server.models.health_alert import HealthAlert
from openapi_server.models.health_monitor import HealthMonitor
from openapi_server.models.ldaps_settings import LdapsSettings
from openapi_server.models.notification_settings import NotificationSettings
from openapi_server import util


class DomainServiceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_controller_ip_address: List[str]=None, domain_name: str=None, domain_security_settings: DomainSecuritySettings=None, filtered_sync: str=None, health_alerts: List[HealthAlert]=None, health_last_evaluated: datetime=None, health_monitors: List[HealthMonitor]=None, ldaps_settings: LdapsSettings=None, notification_settings: NotificationSettings=None, provisioning_state: str=None, service_status: str=None, subnet_id: str=None, tenant_id: str=None, vnet_site_id: str=None):
        """DomainServiceProperties - a model defined in OpenAPI

        :param domain_controller_ip_address: The domain_controller_ip_address of this DomainServiceProperties.
        :param domain_name: The domain_name of this DomainServiceProperties.
        :param domain_security_settings: The domain_security_settings of this DomainServiceProperties.
        :param filtered_sync: The filtered_sync of this DomainServiceProperties.
        :param health_alerts: The health_alerts of this DomainServiceProperties.
        :param health_last_evaluated: The health_last_evaluated of this DomainServiceProperties.
        :param health_monitors: The health_monitors of this DomainServiceProperties.
        :param ldaps_settings: The ldaps_settings of this DomainServiceProperties.
        :param notification_settings: The notification_settings of this DomainServiceProperties.
        :param provisioning_state: The provisioning_state of this DomainServiceProperties.
        :param service_status: The service_status of this DomainServiceProperties.
        :param subnet_id: The subnet_id of this DomainServiceProperties.
        :param tenant_id: The tenant_id of this DomainServiceProperties.
        :param vnet_site_id: The vnet_site_id of this DomainServiceProperties.
        """
        self.openapi_types = {
            'domain_controller_ip_address': List[str],
            'domain_name': str,
            'domain_security_settings': DomainSecuritySettings,
            'filtered_sync': str,
            'health_alerts': List[HealthAlert],
            'health_last_evaluated': datetime,
            'health_monitors': List[HealthMonitor],
            'ldaps_settings': LdapsSettings,
            'notification_settings': NotificationSettings,
            'provisioning_state': str,
            'service_status': str,
            'subnet_id': str,
            'tenant_id': str,
            'vnet_site_id': str
        }

        self.attribute_map = {
            'domain_controller_ip_address': 'domainControllerIpAddress',
            'domain_name': 'domainName',
            'domain_security_settings': 'domainSecuritySettings',
            'filtered_sync': 'filteredSync',
            'health_alerts': 'healthAlerts',
            'health_last_evaluated': 'healthLastEvaluated',
            'health_monitors': 'healthMonitors',
            'ldaps_settings': 'ldapsSettings',
            'notification_settings': 'notificationSettings',
            'provisioning_state': 'provisioningState',
            'service_status': 'serviceStatus',
            'subnet_id': 'subnetId',
            'tenant_id': 'tenantId',
            'vnet_site_id': 'vnetSiteId'
        }

        self._domain_controller_ip_address = domain_controller_ip_address
        self._domain_name = domain_name
        self._domain_security_settings = domain_security_settings
        self._filtered_sync = filtered_sync
        self._health_alerts = health_alerts
        self._health_last_evaluated = health_last_evaluated
        self._health_monitors = health_monitors
        self._ldaps_settings = ldaps_settings
        self._notification_settings = notification_settings
        self._provisioning_state = provisioning_state
        self._service_status = service_status
        self._subnet_id = subnet_id
        self._tenant_id = tenant_id
        self._vnet_site_id = vnet_site_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainServiceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainServiceProperties of this DomainServiceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_controller_ip_address(self):
        """Gets the domain_controller_ip_address of this DomainServiceProperties.

        List of Domain Controller IP Address

        :return: The domain_controller_ip_address of this DomainServiceProperties.
        :rtype: List[str]
        """
        return self._domain_controller_ip_address

    @domain_controller_ip_address.setter
    def domain_controller_ip_address(self, domain_controller_ip_address):
        """Sets the domain_controller_ip_address of this DomainServiceProperties.

        List of Domain Controller IP Address

        :param domain_controller_ip_address: The domain_controller_ip_address of this DomainServiceProperties.
        :type domain_controller_ip_address: List[str]
        """

        self._domain_controller_ip_address = domain_controller_ip_address

    @property
    def domain_name(self):
        """Gets the domain_name of this DomainServiceProperties.

        The name of the Azure domain that the user would like to deploy Domain Services to.

        :return: The domain_name of this DomainServiceProperties.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DomainServiceProperties.

        The name of the Azure domain that the user would like to deploy Domain Services to.

        :param domain_name: The domain_name of this DomainServiceProperties.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def domain_security_settings(self):
        """Gets the domain_security_settings of this DomainServiceProperties.


        :return: The domain_security_settings of this DomainServiceProperties.
        :rtype: DomainSecuritySettings
        """
        return self._domain_security_settings

    @domain_security_settings.setter
    def domain_security_settings(self, domain_security_settings):
        """Sets the domain_security_settings of this DomainServiceProperties.


        :param domain_security_settings: The domain_security_settings of this DomainServiceProperties.
        :type domain_security_settings: DomainSecuritySettings
        """

        self._domain_security_settings = domain_security_settings

    @property
    def filtered_sync(self):
        """Gets the filtered_sync of this DomainServiceProperties.

        Enabled or Disabled flag to turn on Group-based filtered sync

        :return: The filtered_sync of this DomainServiceProperties.
        :rtype: str
        """
        return self._filtered_sync

    @filtered_sync.setter
    def filtered_sync(self, filtered_sync):
        """Sets the filtered_sync of this DomainServiceProperties.

        Enabled or Disabled flag to turn on Group-based filtered sync

        :param filtered_sync: The filtered_sync of this DomainServiceProperties.
        :type filtered_sync: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if filtered_sync not in allowed_values:
            raise ValueError(
                "Invalid value for `filtered_sync` ({0}), must be one of {1}"
                .format(filtered_sync, allowed_values)
            )

        self._filtered_sync = filtered_sync

    @property
    def health_alerts(self):
        """Gets the health_alerts of this DomainServiceProperties.

        List of Domain Health Alerts

        :return: The health_alerts of this DomainServiceProperties.
        :rtype: List[HealthAlert]
        """
        return self._health_alerts

    @health_alerts.setter
    def health_alerts(self, health_alerts):
        """Sets the health_alerts of this DomainServiceProperties.

        List of Domain Health Alerts

        :param health_alerts: The health_alerts of this DomainServiceProperties.
        :type health_alerts: List[HealthAlert]
        """

        self._health_alerts = health_alerts

    @property
    def health_last_evaluated(self):
        """Gets the health_last_evaluated of this DomainServiceProperties.

        Last domain evaluation run DateTime

        :return: The health_last_evaluated of this DomainServiceProperties.
        :rtype: datetime
        """
        return self._health_last_evaluated

    @health_last_evaluated.setter
    def health_last_evaluated(self, health_last_evaluated):
        """Sets the health_last_evaluated of this DomainServiceProperties.

        Last domain evaluation run DateTime

        :param health_last_evaluated: The health_last_evaluated of this DomainServiceProperties.
        :type health_last_evaluated: datetime
        """

        self._health_last_evaluated = health_last_evaluated

    @property
    def health_monitors(self):
        """Gets the health_monitors of this DomainServiceProperties.

        List of Domain Health Monitors

        :return: The health_monitors of this DomainServiceProperties.
        :rtype: List[HealthMonitor]
        """
        return self._health_monitors

    @health_monitors.setter
    def health_monitors(self, health_monitors):
        """Sets the health_monitors of this DomainServiceProperties.

        List of Domain Health Monitors

        :param health_monitors: The health_monitors of this DomainServiceProperties.
        :type health_monitors: List[HealthMonitor]
        """

        self._health_monitors = health_monitors

    @property
    def ldaps_settings(self):
        """Gets the ldaps_settings of this DomainServiceProperties.


        :return: The ldaps_settings of this DomainServiceProperties.
        :rtype: LdapsSettings
        """
        return self._ldaps_settings

    @ldaps_settings.setter
    def ldaps_settings(self, ldaps_settings):
        """Sets the ldaps_settings of this DomainServiceProperties.


        :param ldaps_settings: The ldaps_settings of this DomainServiceProperties.
        :type ldaps_settings: LdapsSettings
        """

        self._ldaps_settings = ldaps_settings

    @property
    def notification_settings(self):
        """Gets the notification_settings of this DomainServiceProperties.


        :return: The notification_settings of this DomainServiceProperties.
        :rtype: NotificationSettings
        """
        return self._notification_settings

    @notification_settings.setter
    def notification_settings(self, notification_settings):
        """Sets the notification_settings of this DomainServiceProperties.


        :param notification_settings: The notification_settings of this DomainServiceProperties.
        :type notification_settings: NotificationSettings
        """

        self._notification_settings = notification_settings

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DomainServiceProperties.

        the current deployment or provisioning state, which only appears in the response.

        :return: The provisioning_state of this DomainServiceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DomainServiceProperties.

        the current deployment or provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this DomainServiceProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def service_status(self):
        """Gets the service_status of this DomainServiceProperties.

        Status of Domain Service instance

        :return: The service_status of this DomainServiceProperties.
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this DomainServiceProperties.

        Status of Domain Service instance

        :param service_status: The service_status of this DomainServiceProperties.
        :type service_status: str
        """

        self._service_status = service_status

    @property
    def subnet_id(self):
        """Gets the subnet_id of this DomainServiceProperties.

        The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.

        :return: The subnet_id of this DomainServiceProperties.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this DomainServiceProperties.

        The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.

        :param subnet_id: The subnet_id of this DomainServiceProperties.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this DomainServiceProperties.

        Azure Active Directory tenant id

        :return: The tenant_id of this DomainServiceProperties.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this DomainServiceProperties.

        Azure Active Directory tenant id

        :param tenant_id: The tenant_id of this DomainServiceProperties.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def vnet_site_id(self):
        """Gets the vnet_site_id of this DomainServiceProperties.

        Virtual network site id

        :return: The vnet_site_id of this DomainServiceProperties.
        :rtype: str
        """
        return self._vnet_site_id

    @vnet_site_id.setter
    def vnet_site_id(self, vnet_site_id):
        """Sets the vnet_site_id of this DomainServiceProperties.

        Virtual network site id

        :param vnet_site_id: The vnet_site_id of this DomainServiceProperties.
        :type vnet_site_id: str
        """

        self._vnet_site_id = vnet_site_id
