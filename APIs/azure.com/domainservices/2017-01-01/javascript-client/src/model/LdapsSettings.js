/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LdapsSettings model module.
 * @module model/LdapsSettings
 * @version 2017-01-01
 */
class LdapsSettings {
    /**
     * Constructs a new <code>LdapsSettings</code>.
     * Secure LDAP Settings
     * @alias module:model/LdapsSettings
     */
    constructor() { 
        
        LdapsSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LdapsSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LdapsSettings} obj Optional instance to populate.
     * @return {module:model/LdapsSettings} The populated <code>LdapsSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LdapsSettings();

            if (data.hasOwnProperty('certificateNotAfter')) {
                obj['certificateNotAfter'] = ApiClient.convertToType(data['certificateNotAfter'], 'Date');
            }
            if (data.hasOwnProperty('certificateThumbprint')) {
                obj['certificateThumbprint'] = ApiClient.convertToType(data['certificateThumbprint'], 'String');
            }
            if (data.hasOwnProperty('externalAccess')) {
                obj['externalAccess'] = ApiClient.convertToType(data['externalAccess'], 'String');
            }
            if (data.hasOwnProperty('externalAccessIpAddress')) {
                obj['externalAccessIpAddress'] = ApiClient.convertToType(data['externalAccessIpAddress'], 'String');
            }
            if (data.hasOwnProperty('ldaps')) {
                obj['ldaps'] = ApiClient.convertToType(data['ldaps'], 'String');
            }
            if (data.hasOwnProperty('pfxCertificate')) {
                obj['pfxCertificate'] = ApiClient.convertToType(data['pfxCertificate'], 'String');
            }
            if (data.hasOwnProperty('pfxCertificatePassword')) {
                obj['pfxCertificatePassword'] = ApiClient.convertToType(data['pfxCertificatePassword'], 'String');
            }
            if (data.hasOwnProperty('publicCertificate')) {
                obj['publicCertificate'] = ApiClient.convertToType(data['publicCertificate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LdapsSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LdapsSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certificateThumbprint'] && !(typeof data['certificateThumbprint'] === 'string' || data['certificateThumbprint'] instanceof String)) {
            throw new Error("Expected the field `certificateThumbprint` to be a primitive type in the JSON string but got " + data['certificateThumbprint']);
        }
        // ensure the json data is a string
        if (data['externalAccess'] && !(typeof data['externalAccess'] === 'string' || data['externalAccess'] instanceof String)) {
            throw new Error("Expected the field `externalAccess` to be a primitive type in the JSON string but got " + data['externalAccess']);
        }
        // ensure the json data is a string
        if (data['externalAccessIpAddress'] && !(typeof data['externalAccessIpAddress'] === 'string' || data['externalAccessIpAddress'] instanceof String)) {
            throw new Error("Expected the field `externalAccessIpAddress` to be a primitive type in the JSON string but got " + data['externalAccessIpAddress']);
        }
        // ensure the json data is a string
        if (data['ldaps'] && !(typeof data['ldaps'] === 'string' || data['ldaps'] instanceof String)) {
            throw new Error("Expected the field `ldaps` to be a primitive type in the JSON string but got " + data['ldaps']);
        }
        // ensure the json data is a string
        if (data['pfxCertificate'] && !(typeof data['pfxCertificate'] === 'string' || data['pfxCertificate'] instanceof String)) {
            throw new Error("Expected the field `pfxCertificate` to be a primitive type in the JSON string but got " + data['pfxCertificate']);
        }
        // ensure the json data is a string
        if (data['pfxCertificatePassword'] && !(typeof data['pfxCertificatePassword'] === 'string' || data['pfxCertificatePassword'] instanceof String)) {
            throw new Error("Expected the field `pfxCertificatePassword` to be a primitive type in the JSON string but got " + data['pfxCertificatePassword']);
        }
        // ensure the json data is a string
        if (data['publicCertificate'] && !(typeof data['publicCertificate'] === 'string' || data['publicCertificate'] instanceof String)) {
            throw new Error("Expected the field `publicCertificate` to be a primitive type in the JSON string but got " + data['publicCertificate']);
        }

        return true;
    }


}



/**
 * NotAfter DateTime of configure ldaps certificate.
 * @member {Date} certificateNotAfter
 */
LdapsSettings.prototype['certificateNotAfter'] = undefined;

/**
 * Thumbprint of configure ldaps certificate.
 * @member {String} certificateThumbprint
 */
LdapsSettings.prototype['certificateThumbprint'] = undefined;

/**
 * A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
 * @member {module:model/LdapsSettings.ExternalAccessEnum} externalAccess
 */
LdapsSettings.prototype['externalAccess'] = undefined;

/**
 * External access ip address.
 * @member {String} externalAccessIpAddress
 */
LdapsSettings.prototype['externalAccessIpAddress'] = undefined;

/**
 * A flag to determine whether or not Secure LDAP is enabled or disabled.
 * @member {module:model/LdapsSettings.LdapsEnum} ldaps
 */
LdapsSettings.prototype['ldaps'] = undefined;

/**
 * The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
 * @member {String} pfxCertificate
 */
LdapsSettings.prototype['pfxCertificate'] = undefined;

/**
 * The password to decrypt the provided Secure LDAP certificate pfx file.
 * @member {String} pfxCertificatePassword
 */
LdapsSettings.prototype['pfxCertificatePassword'] = undefined;

/**
 * Public certificate used to configure secure ldap.
 * @member {String} publicCertificate
 */
LdapsSettings.prototype['publicCertificate'] = undefined;





/**
 * Allowed values for the <code>externalAccess</code> property.
 * @enum {String}
 * @readonly
 */
LdapsSettings['ExternalAccessEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>ldaps</code> property.
 * @enum {String}
 * @readonly
 */
LdapsSettings['LdapsEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default LdapsSettings;

