/*
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DomainService;
import org.openapitools.client.model.DomainServiceListResult;
import org.openapitools.client.model.OperationEntityListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DomainServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for domainServiceOperationsList
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServiceOperationsListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.AAD/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainServiceOperationsListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainServiceOperationsList(Async)");
        }

        return domainServiceOperationsListCall(apiVersion, _callback);

    }

    /**
     * 
     * Lists all the available Domain Services operations.
     * @param apiVersion Client Api Version. (required)
     * @return OperationEntityListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public OperationEntityListResult domainServiceOperationsList(String apiVersion) throws ApiException {
        ApiResponse<OperationEntityListResult> localVarResp = domainServiceOperationsListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the available Domain Services operations.
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;OperationEntityListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationEntityListResult> domainServiceOperationsListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = domainServiceOperationsListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationEntityListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the available Domain Services operations.
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServiceOperationsListAsync(String apiVersion, final ApiCallback<OperationEntityListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainServiceOperationsListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationEntityListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainServicesCreateOrUpdate
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param domainService Properties supplied to the Create or Update a Domain Service operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> HTTP 201 (Created) if the operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesCreateOrUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, DomainService domainService, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainService;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainServiceName" + "}", localVarApiClient.escapeString(domainServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainServicesCreateOrUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, DomainService domainService, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainServicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainServicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainServicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'domainServiceName' is set
        if (domainServiceName == null) {
            throw new ApiException("Missing the required parameter 'domainServiceName' when calling domainServicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'domainService' is set
        if (domainService == null) {
            throw new ApiException("Missing the required parameter 'domainService' when calling domainServicesCreateOrUpdate(Async)");
        }

        return domainServicesCreateOrUpdateCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, domainService, _callback);

    }

    /**
     * Create or Update Domain Service (PUT Resource)
     * The Create Domain Service operation creates a new domain service with the specified parameters. If the specific service already exists, then any patchable properties will be updated and any immutable properties will remain unchanged.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param domainService Properties supplied to the Create or Update a Domain Service operation. (required)
     * @return DomainService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> HTTP 201 (Created) if the operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public DomainService domainServicesCreateOrUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, DomainService domainService) throws ApiException {
        ApiResponse<DomainService> localVarResp = domainServicesCreateOrUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, domainServiceName, domainService);
        return localVarResp.getData();
    }

    /**
     * Create or Update Domain Service (PUT Resource)
     * The Create Domain Service operation creates a new domain service with the specified parameters. If the specific service already exists, then any patchable properties will be updated and any immutable properties will remain unchanged.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param domainService Properties supplied to the Create or Update a Domain Service operation. (required)
     * @return ApiResponse&lt;DomainService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> HTTP 201 (Created) if the operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainService> domainServicesCreateOrUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, DomainService domainService) throws ApiException {
        okhttp3.Call localVarCall = domainServicesCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, domainService, null);
        Type localVarReturnType = new TypeToken<DomainService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or Update Domain Service (PUT Resource) (asynchronously)
     * The Create Domain Service operation creates a new domain service with the specified parameters. If the specific service already exists, then any patchable properties will be updated and any immutable properties will remain unchanged.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param domainService Properties supplied to the Create or Update a Domain Service operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> HTTP 201 (Created) if the operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesCreateOrUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, DomainService domainService, final ApiCallback<DomainService> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainServicesCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, domainService, _callback);
        Type localVarReturnType = new TypeToken<DomainService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainServicesDelete
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> HTTP 204 (Not Content) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainServiceName" + "}", localVarApiClient.escapeString(domainServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainServicesDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainServicesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainServicesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainServicesDelete(Async)");
        }

        // verify the required parameter 'domainServiceName' is set
        if (domainServiceName == null) {
            throw new ApiException("Missing the required parameter 'domainServiceName' when calling domainServicesDelete(Async)");
        }

        return domainServicesDeleteCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, _callback);

    }

    /**
     * Delete Domain Service (DELETE Resource)
     * The Delete Domain Service operation deletes an existing Domain Service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> HTTP 204 (Not Content) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
     </table>
     */
    public void domainServicesDelete(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName) throws ApiException {
        domainServicesDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, domainServiceName);
    }

    /**
     * Delete Domain Service (DELETE Resource)
     * The Delete Domain Service operation deletes an existing Domain Service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> HTTP 204 (Not Content) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> domainServicesDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName) throws ApiException {
        okhttp3.Call localVarCall = domainServicesDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Domain Service (DELETE Resource) (asynchronously)
     * The Delete Domain Service operation deletes an existing Domain Service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> HTTP 204 (Not Content) should be used if the resource does not exist and the request is well formed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainServicesDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainServicesGet
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainServiceName" + "}", localVarApiClient.escapeString(domainServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainServicesGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainServicesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainServicesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainServicesGet(Async)");
        }

        // verify the required parameter 'domainServiceName' is set
        if (domainServiceName == null) {
            throw new ApiException("Missing the required parameter 'domainServiceName' when calling domainServicesGet(Async)");
        }

        return domainServicesGetCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, _callback);

    }

    /**
     * Get Domain Service (GET Resources)
     * The Get Domain Service operation retrieves a json representation of the Domain Service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @return DomainService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public DomainService domainServicesGet(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName) throws ApiException {
        ApiResponse<DomainService> localVarResp = domainServicesGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, domainServiceName);
        return localVarResp.getData();
    }

    /**
     * Get Domain Service (GET Resources)
     * The Get Domain Service operation retrieves a json representation of the Domain Service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @return ApiResponse&lt;DomainService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainService> domainServicesGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName) throws ApiException {
        okhttp3.Call localVarCall = domainServicesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, null);
        Type localVarReturnType = new TypeToken<DomainService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Domain Service (GET Resources) (asynchronously)
     * The Get Domain Service operation retrieves a json representation of the Domain Service.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, final ApiCallback<DomainService> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainServicesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, _callback);
        Type localVarReturnType = new TypeToken<DomainService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainServicesList
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AAD/domainServices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainServicesListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainServicesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainServicesList(Async)");
        }

        return domainServicesListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * List Domain Services in Subscription (GET Resources)
     * The List Domain Services in Subscription operation lists all the domain services available under the given subscription (and across all resource groups within that subscription).
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return DomainServiceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public DomainServiceListResult domainServicesList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DomainServiceListResult> localVarResp = domainServicesListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * List Domain Services in Subscription (GET Resources)
     * The List Domain Services in Subscription operation lists all the domain services available under the given subscription (and across all resource groups within that subscription).
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;DomainServiceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainServiceListResult> domainServicesListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = domainServicesListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DomainServiceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Domain Services in Subscription (GET Resources) (asynchronously)
     * The List Domain Services in Subscription operation lists all the domain services available under the given subscription (and across all resource groups within that subscription).
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesListAsync(String apiVersion, String subscriptionId, final ApiCallback<DomainServiceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainServicesListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DomainServiceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainServicesListByResourceGroup
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesListByResourceGroupCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainServicesListByResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainServicesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainServicesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainServicesListByResourceGroup(Async)");
        }

        return domainServicesListByResourceGroupCall(apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * List Domain Services in Resource Group (GET Resources)
     * The List Domain Services in Resource Group operation lists all the domain services available under the given resource group.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @return DomainServiceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public DomainServiceListResult domainServicesListByResourceGroup(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<DomainServiceListResult> localVarResp = domainServicesListByResourceGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * List Domain Services in Resource Group (GET Resources)
     * The List Domain Services in Resource Group operation lists all the domain services available under the given resource group.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @return ApiResponse&lt;DomainServiceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainServiceListResult> domainServicesListByResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = domainServicesListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<DomainServiceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Domain Services in Resource Group (GET Resources) (asynchronously)
     * The List Domain Services in Resource Group operation lists all the domain services available under the given resource group.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesListByResourceGroupAsync(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<DomainServiceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainServicesListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<DomainServiceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainServicesUpdate
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param domainService Properties supplied to the Update a Domain Service operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, DomainService domainService, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainService;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainServiceName" + "}", localVarApiClient.escapeString(domainServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainServicesUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, DomainService domainService, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainServicesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainServicesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainServicesUpdate(Async)");
        }

        // verify the required parameter 'domainServiceName' is set
        if (domainServiceName == null) {
            throw new ApiException("Missing the required parameter 'domainServiceName' when calling domainServicesUpdate(Async)");
        }

        // verify the required parameter 'domainService' is set
        if (domainService == null) {
            throw new ApiException("Missing the required parameter 'domainService' when calling domainServicesUpdate(Async)");
        }

        return domainServicesUpdateCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, domainService, _callback);

    }

    /**
     * Update Domain Service (PATCH Resource)
     * The Update Domain Service operation can be used to update the existing deployment. The update call only supports the properties listed in the PATCH body.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param domainService Properties supplied to the Update a Domain Service operation. (required)
     * @return DomainService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public DomainService domainServicesUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, DomainService domainService) throws ApiException {
        ApiResponse<DomainService> localVarResp = domainServicesUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, domainServiceName, domainService);
        return localVarResp.getData();
    }

    /**
     * Update Domain Service (PATCH Resource)
     * The Update Domain Service operation can be used to update the existing deployment. The update call only supports the properties listed in the PATCH body.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param domainService Properties supplied to the Update a Domain Service operation. (required)
     * @return ApiResponse&lt;DomainService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainService> domainServicesUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, DomainService domainService) throws ApiException {
        okhttp3.Call localVarCall = domainServicesUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, domainService, null);
        Type localVarReturnType = new TypeToken<DomainService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Domain Service (PATCH Resource) (asynchronously)
     * The Update Domain Service operation can be used to update the existing deployment. The update call only supports the properties listed in the PATCH body.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param domainServiceName The name of the domain service. (required)
     * @param domainService Properties supplied to the Update a Domain Service operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTTP 200 (OK) if the operation was successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> HTTP 202 (Accepted) if the operation was successfully started and will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainServicesUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String domainServiceName, DomainService domainService, final ApiCallback<DomainService> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainServicesUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, domainServiceName, domainService, _callback);
        Type localVarReturnType = new TypeToken<DomainService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
