/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainServiceProperties::OAIDomainServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainServiceProperties::OAIDomainServiceProperties() {
    this->initializeModel();
}

OAIDomainServiceProperties::~OAIDomainServiceProperties() {}

void OAIDomainServiceProperties::initializeModel() {

    m_domain_controller_ip_address_isSet = false;
    m_domain_controller_ip_address_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_domain_security_settings_isSet = false;
    m_domain_security_settings_isValid = false;

    m_filtered_sync_isSet = false;
    m_filtered_sync_isValid = false;

    m_health_alerts_isSet = false;
    m_health_alerts_isValid = false;

    m_health_last_evaluated_isSet = false;
    m_health_last_evaluated_isValid = false;

    m_health_monitors_isSet = false;
    m_health_monitors_isValid = false;

    m_ldaps_settings_isSet = false;
    m_ldaps_settings_isValid = false;

    m_notification_settings_isSet = false;
    m_notification_settings_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_service_status_isSet = false;
    m_service_status_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_vnet_site_id_isSet = false;
    m_vnet_site_id_isValid = false;
}

void OAIDomainServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainServiceProperties::fromJsonObject(QJsonObject json) {

    m_domain_controller_ip_address_isValid = ::OpenAPI::fromJsonValue(m_domain_controller_ip_address, json[QString("domainControllerIpAddress")]);
    m_domain_controller_ip_address_isSet = !json[QString("domainControllerIpAddress")].isNull() && m_domain_controller_ip_address_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_domain_security_settings_isValid = ::OpenAPI::fromJsonValue(m_domain_security_settings, json[QString("domainSecuritySettings")]);
    m_domain_security_settings_isSet = !json[QString("domainSecuritySettings")].isNull() && m_domain_security_settings_isValid;

    m_filtered_sync_isValid = ::OpenAPI::fromJsonValue(m_filtered_sync, json[QString("filteredSync")]);
    m_filtered_sync_isSet = !json[QString("filteredSync")].isNull() && m_filtered_sync_isValid;

    m_health_alerts_isValid = ::OpenAPI::fromJsonValue(m_health_alerts, json[QString("healthAlerts")]);
    m_health_alerts_isSet = !json[QString("healthAlerts")].isNull() && m_health_alerts_isValid;

    m_health_last_evaluated_isValid = ::OpenAPI::fromJsonValue(m_health_last_evaluated, json[QString("healthLastEvaluated")]);
    m_health_last_evaluated_isSet = !json[QString("healthLastEvaluated")].isNull() && m_health_last_evaluated_isValid;

    m_health_monitors_isValid = ::OpenAPI::fromJsonValue(m_health_monitors, json[QString("healthMonitors")]);
    m_health_monitors_isSet = !json[QString("healthMonitors")].isNull() && m_health_monitors_isValid;

    m_ldaps_settings_isValid = ::OpenAPI::fromJsonValue(m_ldaps_settings, json[QString("ldapsSettings")]);
    m_ldaps_settings_isSet = !json[QString("ldapsSettings")].isNull() && m_ldaps_settings_isValid;

    m_notification_settings_isValid = ::OpenAPI::fromJsonValue(m_notification_settings, json[QString("notificationSettings")]);
    m_notification_settings_isSet = !json[QString("notificationSettings")].isNull() && m_notification_settings_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_service_status_isValid = ::OpenAPI::fromJsonValue(m_service_status, json[QString("serviceStatus")]);
    m_service_status_isSet = !json[QString("serviceStatus")].isNull() && m_service_status_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_vnet_site_id_isValid = ::OpenAPI::fromJsonValue(m_vnet_site_id, json[QString("vnetSiteId")]);
    m_vnet_site_id_isSet = !json[QString("vnetSiteId")].isNull() && m_vnet_site_id_isValid;
}

QString OAIDomainServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_controller_ip_address.size() > 0) {
        obj.insert(QString("domainControllerIpAddress"), ::OpenAPI::toJsonValue(m_domain_controller_ip_address));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_domain_security_settings.isSet()) {
        obj.insert(QString("domainSecuritySettings"), ::OpenAPI::toJsonValue(m_domain_security_settings));
    }
    if (m_filtered_sync_isSet) {
        obj.insert(QString("filteredSync"), ::OpenAPI::toJsonValue(m_filtered_sync));
    }
    if (m_health_alerts.size() > 0) {
        obj.insert(QString("healthAlerts"), ::OpenAPI::toJsonValue(m_health_alerts));
    }
    if (m_health_last_evaluated_isSet) {
        obj.insert(QString("healthLastEvaluated"), ::OpenAPI::toJsonValue(m_health_last_evaluated));
    }
    if (m_health_monitors.size() > 0) {
        obj.insert(QString("healthMonitors"), ::OpenAPI::toJsonValue(m_health_monitors));
    }
    if (m_ldaps_settings.isSet()) {
        obj.insert(QString("ldapsSettings"), ::OpenAPI::toJsonValue(m_ldaps_settings));
    }
    if (m_notification_settings.isSet()) {
        obj.insert(QString("notificationSettings"), ::OpenAPI::toJsonValue(m_notification_settings));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_service_status_isSet) {
        obj.insert(QString("serviceStatus"), ::OpenAPI::toJsonValue(m_service_status));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_vnet_site_id_isSet) {
        obj.insert(QString("vnetSiteId"), ::OpenAPI::toJsonValue(m_vnet_site_id));
    }
    return obj;
}

QList<QString> OAIDomainServiceProperties::getDomainControllerIpAddress() const {
    return m_domain_controller_ip_address;
}
void OAIDomainServiceProperties::setDomainControllerIpAddress(const QList<QString> &domain_controller_ip_address) {
    m_domain_controller_ip_address = domain_controller_ip_address;
    m_domain_controller_ip_address_isSet = true;
}

bool OAIDomainServiceProperties::is_domain_controller_ip_address_Set() const{
    return m_domain_controller_ip_address_isSet;
}

bool OAIDomainServiceProperties::is_domain_controller_ip_address_Valid() const{
    return m_domain_controller_ip_address_isValid;
}

QString OAIDomainServiceProperties::getDomainName() const {
    return m_domain_name;
}
void OAIDomainServiceProperties::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDomainServiceProperties::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDomainServiceProperties::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAIDomainSecuritySettings OAIDomainServiceProperties::getDomainSecuritySettings() const {
    return m_domain_security_settings;
}
void OAIDomainServiceProperties::setDomainSecuritySettings(const OAIDomainSecuritySettings &domain_security_settings) {
    m_domain_security_settings = domain_security_settings;
    m_domain_security_settings_isSet = true;
}

bool OAIDomainServiceProperties::is_domain_security_settings_Set() const{
    return m_domain_security_settings_isSet;
}

bool OAIDomainServiceProperties::is_domain_security_settings_Valid() const{
    return m_domain_security_settings_isValid;
}

QString OAIDomainServiceProperties::getFilteredSync() const {
    return m_filtered_sync;
}
void OAIDomainServiceProperties::setFilteredSync(const QString &filtered_sync) {
    m_filtered_sync = filtered_sync;
    m_filtered_sync_isSet = true;
}

bool OAIDomainServiceProperties::is_filtered_sync_Set() const{
    return m_filtered_sync_isSet;
}

bool OAIDomainServiceProperties::is_filtered_sync_Valid() const{
    return m_filtered_sync_isValid;
}

QList<OAIHealthAlert> OAIDomainServiceProperties::getHealthAlerts() const {
    return m_health_alerts;
}
void OAIDomainServiceProperties::setHealthAlerts(const QList<OAIHealthAlert> &health_alerts) {
    m_health_alerts = health_alerts;
    m_health_alerts_isSet = true;
}

bool OAIDomainServiceProperties::is_health_alerts_Set() const{
    return m_health_alerts_isSet;
}

bool OAIDomainServiceProperties::is_health_alerts_Valid() const{
    return m_health_alerts_isValid;
}

QDateTime OAIDomainServiceProperties::getHealthLastEvaluated() const {
    return m_health_last_evaluated;
}
void OAIDomainServiceProperties::setHealthLastEvaluated(const QDateTime &health_last_evaluated) {
    m_health_last_evaluated = health_last_evaluated;
    m_health_last_evaluated_isSet = true;
}

bool OAIDomainServiceProperties::is_health_last_evaluated_Set() const{
    return m_health_last_evaluated_isSet;
}

bool OAIDomainServiceProperties::is_health_last_evaluated_Valid() const{
    return m_health_last_evaluated_isValid;
}

QList<OAIHealthMonitor> OAIDomainServiceProperties::getHealthMonitors() const {
    return m_health_monitors;
}
void OAIDomainServiceProperties::setHealthMonitors(const QList<OAIHealthMonitor> &health_monitors) {
    m_health_monitors = health_monitors;
    m_health_monitors_isSet = true;
}

bool OAIDomainServiceProperties::is_health_monitors_Set() const{
    return m_health_monitors_isSet;
}

bool OAIDomainServiceProperties::is_health_monitors_Valid() const{
    return m_health_monitors_isValid;
}

OAILdapsSettings OAIDomainServiceProperties::getLdapsSettings() const {
    return m_ldaps_settings;
}
void OAIDomainServiceProperties::setLdapsSettings(const OAILdapsSettings &ldaps_settings) {
    m_ldaps_settings = ldaps_settings;
    m_ldaps_settings_isSet = true;
}

bool OAIDomainServiceProperties::is_ldaps_settings_Set() const{
    return m_ldaps_settings_isSet;
}

bool OAIDomainServiceProperties::is_ldaps_settings_Valid() const{
    return m_ldaps_settings_isValid;
}

OAINotificationSettings OAIDomainServiceProperties::getNotificationSettings() const {
    return m_notification_settings;
}
void OAIDomainServiceProperties::setNotificationSettings(const OAINotificationSettings &notification_settings) {
    m_notification_settings = notification_settings;
    m_notification_settings_isSet = true;
}

bool OAIDomainServiceProperties::is_notification_settings_Set() const{
    return m_notification_settings_isSet;
}

bool OAIDomainServiceProperties::is_notification_settings_Valid() const{
    return m_notification_settings_isValid;
}

QString OAIDomainServiceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDomainServiceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDomainServiceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDomainServiceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIDomainServiceProperties::getServiceStatus() const {
    return m_service_status;
}
void OAIDomainServiceProperties::setServiceStatus(const QString &service_status) {
    m_service_status = service_status;
    m_service_status_isSet = true;
}

bool OAIDomainServiceProperties::is_service_status_Set() const{
    return m_service_status_isSet;
}

bool OAIDomainServiceProperties::is_service_status_Valid() const{
    return m_service_status_isValid;
}

QString OAIDomainServiceProperties::getSubnetId() const {
    return m_subnet_id;
}
void OAIDomainServiceProperties::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIDomainServiceProperties::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIDomainServiceProperties::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAIDomainServiceProperties::getTenantId() const {
    return m_tenant_id;
}
void OAIDomainServiceProperties::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIDomainServiceProperties::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIDomainServiceProperties::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIDomainServiceProperties::getVnetSiteId() const {
    return m_vnet_site_id;
}
void OAIDomainServiceProperties::setVnetSiteId(const QString &vnet_site_id) {
    m_vnet_site_id = vnet_site_id;
    m_vnet_site_id_isSet = true;
}

bool OAIDomainServiceProperties::is_vnet_site_id_Set() const{
    return m_vnet_site_id_isSet;
}

bool OAIDomainServiceProperties::is_vnet_site_id_Valid() const{
    return m_vnet_site_id_isValid;
}

bool OAIDomainServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_controller_ip_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_security_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filtered_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_alerts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_last_evaluated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_monitors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldaps_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnet_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
