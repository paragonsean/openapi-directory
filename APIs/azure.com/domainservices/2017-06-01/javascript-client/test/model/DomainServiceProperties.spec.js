/**
 * Domain Services Resource Provider
 * The AAD Domain Services API.
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DomainServicesResourceProvider);
  }
}(this, function(expect, DomainServicesResourceProvider) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DomainServicesResourceProvider.DomainServiceProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DomainServiceProperties', function() {
    it('should create an instance of DomainServiceProperties', function() {
      // uncomment below and update the code to test DomainServiceProperties
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be.a(DomainServicesResourceProvider.DomainServiceProperties);
    });

    it('should have the property domainControllerIpAddress (base name: "domainControllerIpAddress")', function() {
      // uncomment below and update the code to test the property domainControllerIpAddress
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property domainName (base name: "domainName")', function() {
      // uncomment below and update the code to test the property domainName
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property domainSecuritySettings (base name: "domainSecuritySettings")', function() {
      // uncomment below and update the code to test the property domainSecuritySettings
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property filteredSync (base name: "filteredSync")', function() {
      // uncomment below and update the code to test the property filteredSync
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property healthAlerts (base name: "healthAlerts")', function() {
      // uncomment below and update the code to test the property healthAlerts
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property healthLastEvaluated (base name: "healthLastEvaluated")', function() {
      // uncomment below and update the code to test the property healthLastEvaluated
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property healthMonitors (base name: "healthMonitors")', function() {
      // uncomment below and update the code to test the property healthMonitors
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property ldapsSettings (base name: "ldapsSettings")', function() {
      // uncomment below and update the code to test the property ldapsSettings
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property notificationSettings (base name: "notificationSettings")', function() {
      // uncomment below and update the code to test the property notificationSettings
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property serviceStatus (base name: "serviceStatus")', function() {
      // uncomment below and update the code to test the property serviceStatus
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property subnetId (base name: "subnetId")', function() {
      // uncomment below and update the code to test the property subnetId
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property tenantId (base name: "tenantId")', function() {
      // uncomment below and update the code to test the property tenantId
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

    it('should have the property vnetSiteId (base name: "vnetSiteId")', function() {
      // uncomment below and update the code to test the property vnetSiteId
      //var instance = new DomainServicesResourceProvider.DomainServiceProperties();
      //expect(instance).to.be();
    });

  });

}));
