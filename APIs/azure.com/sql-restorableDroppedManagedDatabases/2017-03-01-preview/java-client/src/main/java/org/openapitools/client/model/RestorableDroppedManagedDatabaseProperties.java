/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The restorable dropped managed database&#39;s properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:55.288120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestorableDroppedManagedDatabaseProperties {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "databaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DELETION_DATE = "deletionDate";
  @SerializedName(SERIALIZED_NAME_DELETION_DATE)
  private OffsetDateTime deletionDate;

  public static final String SERIALIZED_NAME_EARLIEST_RESTORE_DATE = "earliestRestoreDate";
  @SerializedName(SERIALIZED_NAME_EARLIEST_RESTORE_DATE)
  private OffsetDateTime earliestRestoreDate;

  public RestorableDroppedManagedDatabaseProperties() {
  }

  public RestorableDroppedManagedDatabaseProperties(
     OffsetDateTime creationDate, 
     String databaseName, 
     OffsetDateTime deletionDate, 
     OffsetDateTime earliestRestoreDate
  ) {
    this();
    this.creationDate = creationDate;
    this.databaseName = databaseName;
    this.deletionDate = deletionDate;
    this.earliestRestoreDate = earliestRestoreDate;
  }

  /**
   * The creation date of the database (ISO8601 format).
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }



  /**
   * The name of the database.
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }



  /**
   * The deletion date of the database (ISO8601 format).
   * @return deletionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletionDate() {
    return deletionDate;
  }



  /**
   * The earliest restore date of the database (ISO8601 format).
   * @return earliestRestoreDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEarliestRestoreDate() {
    return earliestRestoreDate;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestorableDroppedManagedDatabaseProperties restorableDroppedManagedDatabaseProperties = (RestorableDroppedManagedDatabaseProperties) o;
    return Objects.equals(this.creationDate, restorableDroppedManagedDatabaseProperties.creationDate) &&
        Objects.equals(this.databaseName, restorableDroppedManagedDatabaseProperties.databaseName) &&
        Objects.equals(this.deletionDate, restorableDroppedManagedDatabaseProperties.deletionDate) &&
        Objects.equals(this.earliestRestoreDate, restorableDroppedManagedDatabaseProperties.earliestRestoreDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, databaseName, deletionDate, earliestRestoreDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestorableDroppedManagedDatabaseProperties {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    deletionDate: ").append(toIndentedString(deletionDate)).append("\n");
    sb.append("    earliestRestoreDate: ").append(toIndentedString(earliestRestoreDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("databaseName");
    openapiFields.add("deletionDate");
    openapiFields.add("earliestRestoreDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestorableDroppedManagedDatabaseProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestorableDroppedManagedDatabaseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestorableDroppedManagedDatabaseProperties is not found in the empty JSON string", RestorableDroppedManagedDatabaseProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestorableDroppedManagedDatabaseProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestorableDroppedManagedDatabaseProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseName") != null && !jsonObj.get("databaseName").isJsonNull()) && !jsonObj.get("databaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestorableDroppedManagedDatabaseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestorableDroppedManagedDatabaseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestorableDroppedManagedDatabaseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestorableDroppedManagedDatabaseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RestorableDroppedManagedDatabaseProperties>() {
           @Override
           public void write(JsonWriter out, RestorableDroppedManagedDatabaseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestorableDroppedManagedDatabaseProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestorableDroppedManagedDatabaseProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestorableDroppedManagedDatabaseProperties
   * @throws IOException if the JSON string is invalid with respect to RestorableDroppedManagedDatabaseProperties
   */
  public static RestorableDroppedManagedDatabaseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestorableDroppedManagedDatabaseProperties.class);
  }

  /**
   * Convert an instance of RestorableDroppedManagedDatabaseProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

