/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestorableDroppedManagedDatabaseProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestorableDroppedManagedDatabaseProperties::OAIRestorableDroppedManagedDatabaseProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestorableDroppedManagedDatabaseProperties::OAIRestorableDroppedManagedDatabaseProperties() {
    this->initializeModel();
}

OAIRestorableDroppedManagedDatabaseProperties::~OAIRestorableDroppedManagedDatabaseProperties() {}

void OAIRestorableDroppedManagedDatabaseProperties::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_deletion_date_isSet = false;
    m_deletion_date_isValid = false;

    m_earliest_restore_date_isSet = false;
    m_earliest_restore_date_isValid = false;
}

void OAIRestorableDroppedManagedDatabaseProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestorableDroppedManagedDatabaseProperties::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_deletion_date_isValid = ::OpenAPI::fromJsonValue(m_deletion_date, json[QString("deletionDate")]);
    m_deletion_date_isSet = !json[QString("deletionDate")].isNull() && m_deletion_date_isValid;

    m_earliest_restore_date_isValid = ::OpenAPI::fromJsonValue(m_earliest_restore_date, json[QString("earliestRestoreDate")]);
    m_earliest_restore_date_isSet = !json[QString("earliestRestoreDate")].isNull() && m_earliest_restore_date_isValid;
}

QString OAIRestorableDroppedManagedDatabaseProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestorableDroppedManagedDatabaseProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_deletion_date_isSet) {
        obj.insert(QString("deletionDate"), ::OpenAPI::toJsonValue(m_deletion_date));
    }
    if (m_earliest_restore_date_isSet) {
        obj.insert(QString("earliestRestoreDate"), ::OpenAPI::toJsonValue(m_earliest_restore_date));
    }
    return obj;
}

QDateTime OAIRestorableDroppedManagedDatabaseProperties::getCreationDate() const {
    return m_creation_date;
}
void OAIRestorableDroppedManagedDatabaseProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIRestorableDroppedManagedDatabaseProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIRestorableDroppedManagedDatabaseProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIRestorableDroppedManagedDatabaseProperties::getDatabaseName() const {
    return m_database_name;
}
void OAIRestorableDroppedManagedDatabaseProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIRestorableDroppedManagedDatabaseProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIRestorableDroppedManagedDatabaseProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QDateTime OAIRestorableDroppedManagedDatabaseProperties::getDeletionDate() const {
    return m_deletion_date;
}
void OAIRestorableDroppedManagedDatabaseProperties::setDeletionDate(const QDateTime &deletion_date) {
    m_deletion_date = deletion_date;
    m_deletion_date_isSet = true;
}

bool OAIRestorableDroppedManagedDatabaseProperties::is_deletion_date_Set() const{
    return m_deletion_date_isSet;
}

bool OAIRestorableDroppedManagedDatabaseProperties::is_deletion_date_Valid() const{
    return m_deletion_date_isValid;
}

QDateTime OAIRestorableDroppedManagedDatabaseProperties::getEarliestRestoreDate() const {
    return m_earliest_restore_date;
}
void OAIRestorableDroppedManagedDatabaseProperties::setEarliestRestoreDate(const QDateTime &earliest_restore_date) {
    m_earliest_restore_date = earliest_restore_date;
    m_earliest_restore_date_isSet = true;
}

bool OAIRestorableDroppedManagedDatabaseProperties::is_earliest_restore_date_Set() const{
    return m_earliest_restore_date_isSet;
}

bool OAIRestorableDroppedManagedDatabaseProperties::is_earliest_restore_date_Valid() const{
    return m_earliest_restore_date_isValid;
}

bool OAIRestorableDroppedManagedDatabaseProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_restore_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestorableDroppedManagedDatabaseProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
