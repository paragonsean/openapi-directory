/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the service tag information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:46:11.970905-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceTagInformationPropertiesFormat {
  public static final String SERIALIZED_NAME_ADDRESS_PREFIXES = "addressPrefixes";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PREFIXES)
  private List<String> addressPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANGE_NUMBER = "changeNumber";
  @SerializedName(SERIALIZED_NAME_CHANGE_NUMBER)
  private String changeNumber;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SYSTEM_SERVICE = "systemService";
  @SerializedName(SERIALIZED_NAME_SYSTEM_SERVICE)
  private String systemService;

  public ServiceTagInformationPropertiesFormat() {
  }

  public ServiceTagInformationPropertiesFormat(
     List<String> addressPrefixes, 
     String changeNumber, 
     String region, 
     String systemService
  ) {
    this();
    this.addressPrefixes = addressPrefixes;
    this.changeNumber = changeNumber;
    this.region = region;
    this.systemService = systemService;
  }

  /**
   * The list of IP address prefixes.
   * @return addressPrefixes
   */
  @javax.annotation.Nullable
  public List<String> getAddressPrefixes() {
    return addressPrefixes;
  }



  /**
   * The iteration number of service tag.
   * @return changeNumber
   */
  @javax.annotation.Nullable
  public String getChangeNumber() {
    return changeNumber;
  }



  /**
   * The region of service tag.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }



  /**
   * The name of system service.
   * @return systemService
   */
  @javax.annotation.Nullable
  public String getSystemService() {
    return systemService;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceTagInformationPropertiesFormat serviceTagInformationPropertiesFormat = (ServiceTagInformationPropertiesFormat) o;
    return Objects.equals(this.addressPrefixes, serviceTagInformationPropertiesFormat.addressPrefixes) &&
        Objects.equals(this.changeNumber, serviceTagInformationPropertiesFormat.changeNumber) &&
        Objects.equals(this.region, serviceTagInformationPropertiesFormat.region) &&
        Objects.equals(this.systemService, serviceTagInformationPropertiesFormat.systemService);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressPrefixes, changeNumber, region, systemService);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceTagInformationPropertiesFormat {\n");
    sb.append("    addressPrefixes: ").append(toIndentedString(addressPrefixes)).append("\n");
    sb.append("    changeNumber: ").append(toIndentedString(changeNumber)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    systemService: ").append(toIndentedString(systemService)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressPrefixes");
    openapiFields.add("changeNumber");
    openapiFields.add("region");
    openapiFields.add("systemService");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceTagInformationPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceTagInformationPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceTagInformationPropertiesFormat is not found in the empty JSON string", ServiceTagInformationPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceTagInformationPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceTagInformationPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("addressPrefixes") != null && !jsonObj.get("addressPrefixes").isJsonNull() && !jsonObj.get("addressPrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("addressPrefixes").toString()));
      }
      if ((jsonObj.get("changeNumber") != null && !jsonObj.get("changeNumber").isJsonNull()) && !jsonObj.get("changeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeNumber").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("systemService") != null && !jsonObj.get("systemService").isJsonNull()) && !jsonObj.get("systemService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemService").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceTagInformationPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceTagInformationPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceTagInformationPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceTagInformationPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceTagInformationPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ServiceTagInformationPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceTagInformationPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceTagInformationPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceTagInformationPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ServiceTagInformationPropertiesFormat
   */
  public static ServiceTagInformationPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceTagInformationPropertiesFormat.class);
  }

  /**
   * Convert an instance of ServiceTagInformationPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

