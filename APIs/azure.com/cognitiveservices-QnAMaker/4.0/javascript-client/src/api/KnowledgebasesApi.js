/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateKbDTO from '../model/CreateKbDTO';
import ErrorResponse from '../model/ErrorResponse';
import KnowledgebaseDTO from '../model/KnowledgebaseDTO';
import KnowledgebasesDTO from '../model/KnowledgebasesDTO';
import Operation from '../model/Operation';
import QnADocumentsDTO from '../model/QnADocumentsDTO';
import ReplaceKbDTO from '../model/ReplaceKbDTO';
import UpdateKbOperationDTO from '../model/UpdateKbOperationDTO';

/**
* Knowledgebases service.
* @module api/KnowledgebasesApi
* @version 4.0
*/
export default class KnowledgebasesApi {

    /**
    * Constructs a new KnowledgebasesApi. 
    * @alias module:api/KnowledgebasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the knowledgebaseCreate operation.
     * @callback module:api/KnowledgebasesApi~knowledgebaseCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Operation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Asynchronous operation to create a new knowledgebase.
     * @param {module:model/CreateKbDTO} createKbPayload Post body of the request.
     * @param {module:api/KnowledgebasesApi~knowledgebaseCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Operation}
     */
    knowledgebaseCreate(createKbPayload, callback) {
      let postBody = createKbPayload;
      // verify the required parameter 'createKbPayload' is set
      if (createKbPayload === undefined || createKbPayload === null) {
        throw new Error("Missing the required parameter 'createKbPayload' when calling knowledgebaseCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Operation;
      return this.apiClient.callApi(
        '/knowledgebases/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the knowledgebaseDelete operation.
     * @callback module:api/KnowledgebasesApi~knowledgebaseDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the knowledgebase and all its data.
     * @param {String} kbId Knowledgebase id.
     * @param {module:api/KnowledgebasesApi~knowledgebaseDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    knowledgebaseDelete(kbId, callback) {
      let postBody = null;
      // verify the required parameter 'kbId' is set
      if (kbId === undefined || kbId === null) {
        throw new Error("Missing the required parameter 'kbId' when calling knowledgebaseDelete");
      }

      let pathParams = {
        'kbId': kbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/knowledgebases/{kbId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the knowledgebaseDownload operation.
     * @callback module:api/KnowledgebasesApi~knowledgebaseDownloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QnADocumentsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download the knowledgebase.
     * @param {String} kbId Knowledgebase id.
     * @param {module:model/String} environment Specifies whether environment is Test or Prod.
     * @param {module:api/KnowledgebasesApi~knowledgebaseDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QnADocumentsDTO}
     */
    knowledgebaseDownload(kbId, environment, callback) {
      let postBody = null;
      // verify the required parameter 'kbId' is set
      if (kbId === undefined || kbId === null) {
        throw new Error("Missing the required parameter 'kbId' when calling knowledgebaseDownload");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling knowledgebaseDownload");
      }

      let pathParams = {
        'kbId': kbId,
        'environment': environment
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QnADocumentsDTO;
      return this.apiClient.callApi(
        '/knowledgebases/{kbId}/{environment}/qna', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the knowledgebaseGetDetails operation.
     * @callback module:api/KnowledgebasesApi~knowledgebaseGetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KnowledgebaseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details of a specific knowledgebase.
     * @param {String} kbId Knowledgebase id.
     * @param {module:api/KnowledgebasesApi~knowledgebaseGetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KnowledgebaseDTO}
     */
    knowledgebaseGetDetails(kbId, callback) {
      let postBody = null;
      // verify the required parameter 'kbId' is set
      if (kbId === undefined || kbId === null) {
        throw new Error("Missing the required parameter 'kbId' when calling knowledgebaseGetDetails");
      }

      let pathParams = {
        'kbId': kbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KnowledgebaseDTO;
      return this.apiClient.callApi(
        '/knowledgebases/{kbId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the knowledgebaseListAll operation.
     * @callback module:api/KnowledgebasesApi~knowledgebaseListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KnowledgebasesDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all knowledgebases for a user.
     * @param {module:api/KnowledgebasesApi~knowledgebaseListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KnowledgebasesDTO}
     */
    knowledgebaseListAll(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KnowledgebasesDTO;
      return this.apiClient.callApi(
        '/knowledgebases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the knowledgebasePublish operation.
     * @callback module:api/KnowledgebasesApi~knowledgebasePublishCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     * @param {String} kbId Knowledgebase id.
     * @param {module:api/KnowledgebasesApi~knowledgebasePublishCallback} callback The callback function, accepting three arguments: error, data, response
     */
    knowledgebasePublish(kbId, callback) {
      let postBody = null;
      // verify the required parameter 'kbId' is set
      if (kbId === undefined || kbId === null) {
        throw new Error("Missing the required parameter 'kbId' when calling knowledgebasePublish");
      }

      let pathParams = {
        'kbId': kbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/knowledgebases/{kbId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the knowledgebaseReplace operation.
     * @callback module:api/KnowledgebasesApi~knowledgebaseReplaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace knowledgebase contents.
     * @param {String} kbId Knowledgebase id.
     * @param {module:model/ReplaceKbDTO} replaceKb An instance of ReplaceKbDTO which contains list of qnas to be uploaded
     * @param {module:api/KnowledgebasesApi~knowledgebaseReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    knowledgebaseReplace(kbId, replaceKb, callback) {
      let postBody = replaceKb;
      // verify the required parameter 'kbId' is set
      if (kbId === undefined || kbId === null) {
        throw new Error("Missing the required parameter 'kbId' when calling knowledgebaseReplace");
      }
      // verify the required parameter 'replaceKb' is set
      if (replaceKb === undefined || replaceKb === null) {
        throw new Error("Missing the required parameter 'replaceKb' when calling knowledgebaseReplace");
      }

      let pathParams = {
        'kbId': kbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/knowledgebases/{kbId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the knowledgebaseUpdate operation.
     * @callback module:api/KnowledgebasesApi~knowledgebaseUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Operation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Asynchronous operation to modify a knowledgebase.
     * @param {String} kbId Knowledgebase id.
     * @param {module:model/UpdateKbOperationDTO} updateKb Post body of the request.
     * @param {module:api/KnowledgebasesApi~knowledgebaseUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Operation}
     */
    knowledgebaseUpdate(kbId, updateKb, callback) {
      let postBody = updateKb;
      // verify the required parameter 'kbId' is set
      if (kbId === undefined || kbId === null) {
        throw new Error("Missing the required parameter 'kbId' when calling knowledgebaseUpdate");
      }
      // verify the required parameter 'updateKb' is set
      if (updateKb === undefined || updateKb === null) {
        throw new Error("Missing the required parameter 'updateKb' when calling knowledgebaseUpdate");
      }

      let pathParams = {
        'kbId': kbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Operation;
      return this.apiClient.callApi(
        '/knowledgebases/{kbId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
