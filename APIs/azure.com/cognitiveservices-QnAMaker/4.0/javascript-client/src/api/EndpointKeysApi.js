/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EndpointKeysDTO from '../model/EndpointKeysDTO';
import EndpointSettingsDTO from '../model/EndpointSettingsDTO';
import ErrorResponse from '../model/ErrorResponse';

/**
* EndpointKeys service.
* @module api/EndpointKeysApi
* @version 4.0
*/
export default class EndpointKeysApi {

    /**
    * Constructs a new EndpointKeysApi. 
    * @alias module:api/EndpointKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the endpointKeysRefreshKeys operation.
     * @callback module:api/EndpointKeysApi~endpointKeysRefreshKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointKeysDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-generates an endpoint key.
     * @param {String} keyType Type of Key
     * @param {module:api/EndpointKeysApi~endpointKeysRefreshKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointKeysDTO}
     */
    endpointKeysRefreshKeys(keyType, callback) {
      let postBody = null;
      // verify the required parameter 'keyType' is set
      if (keyType === undefined || keyType === null) {
        throw new Error("Missing the required parameter 'keyType' when calling endpointKeysRefreshKeys");
      }

      let pathParams = {
        'keyType': keyType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EndpointKeysDTO;
      return this.apiClient.callApi(
        '/endpointkeys/{keyType}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the endpointSettingsUpdateSettings operation.
     * @callback module:api/EndpointKeysApi~endpointSettingsUpdateSettingsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates endpoint settings for an endpoint.
     * @param {module:model/EndpointSettingsDTO} endpointSettingsPayload Post body of the request.
     * @param {module:api/EndpointKeysApi~endpointSettingsUpdateSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    endpointSettingsUpdateSettings(endpointSettingsPayload, callback) {
      let postBody = endpointSettingsPayload;
      // verify the required parameter 'endpointSettingsPayload' is set
      if (endpointSettingsPayload === undefined || endpointSettingsPayload === null) {
        throw new Error("Missing the required parameter 'endpointSettingsPayload' when calling endpointSettingsUpdateSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/endpointSettings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
