/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KnowledgebaseDTO model module.
 * @module model/KnowledgebaseDTO
 * @version 4.0
 */
class KnowledgebaseDTO {
    /**
     * Constructs a new <code>KnowledgebaseDTO</code>.
     * Response schema for CreateKb operation.
     * @alias module:model/KnowledgebaseDTO
     */
    constructor() { 
        
        KnowledgebaseDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KnowledgebaseDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KnowledgebaseDTO} obj Optional instance to populate.
     * @return {module:model/KnowledgebaseDTO} The populated <code>KnowledgebaseDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KnowledgebaseDTO();

            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastAccessedTimestamp')) {
                obj['lastAccessedTimestamp'] = ApiClient.convertToType(data['lastAccessedTimestamp'], 'String');
            }
            if (data.hasOwnProperty('lastChangedTimestamp')) {
                obj['lastChangedTimestamp'] = ApiClient.convertToType(data['lastChangedTimestamp'], 'String');
            }
            if (data.hasOwnProperty('lastPublishedTimestamp')) {
                obj['lastPublishedTimestamp'] = ApiClient.convertToType(data['lastPublishedTimestamp'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], ['String']);
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], ['String']);
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KnowledgebaseDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KnowledgebaseDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastAccessedTimestamp'] && !(typeof data['lastAccessedTimestamp'] === 'string' || data['lastAccessedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `lastAccessedTimestamp` to be a primitive type in the JSON string but got " + data['lastAccessedTimestamp']);
        }
        // ensure the json data is a string
        if (data['lastChangedTimestamp'] && !(typeof data['lastChangedTimestamp'] === 'string' || data['lastChangedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `lastChangedTimestamp` to be a primitive type in the JSON string but got " + data['lastChangedTimestamp']);
        }
        // ensure the json data is a string
        if (data['lastPublishedTimestamp'] && !(typeof data['lastPublishedTimestamp'] === 'string' || data['lastPublishedTimestamp'] instanceof String)) {
            throw new Error("Expected the field `lastPublishedTimestamp` to be a primitive type in the JSON string but got " + data['lastPublishedTimestamp']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['urls'])) {
            throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * URL host name at which the knowledgebase is hosted.
 * @member {String} hostName
 */
KnowledgebaseDTO.prototype['hostName'] = undefined;

/**
 * Unique id that identifies a knowledgebase.
 * @member {String} id
 */
KnowledgebaseDTO.prototype['id'] = undefined;

/**
 * Time stamp at which the knowledgebase was last accessed (UTC).
 * @member {String} lastAccessedTimestamp
 */
KnowledgebaseDTO.prototype['lastAccessedTimestamp'] = undefined;

/**
 * Time stamp at which the knowledgebase was last modified (UTC).
 * @member {String} lastChangedTimestamp
 */
KnowledgebaseDTO.prototype['lastChangedTimestamp'] = undefined;

/**
 * Time stamp at which the knowledgebase was last published (UTC).
 * @member {String} lastPublishedTimestamp
 */
KnowledgebaseDTO.prototype['lastPublishedTimestamp'] = undefined;

/**
 * Friendly name of the knowledgebase.
 * @member {String} name
 */
KnowledgebaseDTO.prototype['name'] = undefined;

/**
 * Custom sources from which Q-A were extracted or explicitly added to the knowledgebase.
 * @member {Array.<String>} sources
 */
KnowledgebaseDTO.prototype['sources'] = undefined;

/**
 * URL sources from which Q-A were extracted and added to the knowledgebase.
 * @member {Array.<String>} urls
 */
KnowledgebaseDTO.prototype['urls'] = undefined;

/**
 * User who created / owns the knowledgebase.
 * @member {String} userId
 */
KnowledgebaseDTO.prototype['userId'] = undefined;






export default KnowledgebaseDTO;

