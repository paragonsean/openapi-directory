/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileDTO model module.
 * @module model/FileDTO
 * @version 4.0
 */
class FileDTO {
    /**
     * Constructs a new <code>FileDTO</code>.
     * DTO to hold details of uploaded files.
     * @alias module:model/FileDTO
     * @param fileName {String} File name. Supported file types are \".tsv\", \".pdf\", \".txt\", \".docx\", \".xlsx\".
     * @param fileUri {String} Public URI of the file.
     */
    constructor(fileName, fileUri) { 
        
        FileDTO.initialize(this, fileName, fileUri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fileName, fileUri) { 
        obj['fileName'] = fileName;
        obj['fileUri'] = fileUri;
    }

    /**
     * Constructs a <code>FileDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileDTO} obj Optional instance to populate.
     * @return {module:model/FileDTO} The populated <code>FileDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileDTO();

            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('fileUri')) {
                obj['fileUri'] = ApiClient.convertToType(data['fileUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FileDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['fileUri'] && !(typeof data['fileUri'] === 'string' || data['fileUri'] instanceof String)) {
            throw new Error("Expected the field `fileUri` to be a primitive type in the JSON string but got " + data['fileUri']);
        }

        return true;
    }


}

FileDTO.RequiredProperties = ["fileName", "fileUri"];

/**
 * File name. Supported file types are \".tsv\", \".pdf\", \".txt\", \".docx\", \".xlsx\".
 * @member {String} fileName
 */
FileDTO.prototype['fileName'] = undefined;

/**
 * Public URI of the file.
 * @member {String} fileUri
 */
FileDTO.prototype['fileUri'] = undefined;






export default FileDTO;

