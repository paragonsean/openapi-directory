/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QnADTO from './QnADTO';

/**
 * The PromptDTO model module.
 * @module model/PromptDTO
 * @version 4.0
 */
class PromptDTO {
    /**
     * Constructs a new <code>PromptDTO</code>.
     * Prompt for an answer.
     * @alias module:model/PromptDTO
     */
    constructor() { 
        
        PromptDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PromptDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PromptDTO} obj Optional instance to populate.
     * @return {module:model/PromptDTO} The populated <code>PromptDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PromptDTO();

            if (data.hasOwnProperty('displayOrder')) {
                obj['displayOrder'] = ApiClient.convertToType(data['displayOrder'], 'Number');
            }
            if (data.hasOwnProperty('displayText')) {
                obj['displayText'] = ApiClient.convertToType(data['displayText'], 'String');
            }
            if (data.hasOwnProperty('qna')) {
                obj['qna'] = ApiClient.convertToType(data['qna'], QnADTO);
            }
            if (data.hasOwnProperty('qnaId')) {
                obj['qnaId'] = ApiClient.convertToType(data['qnaId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PromptDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PromptDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayText'] && !(typeof data['displayText'] === 'string' || data['displayText'] instanceof String)) {
            throw new Error("Expected the field `displayText` to be a primitive type in the JSON string but got " + data['displayText']);
        }
        // validate the optional field `qna`
        if (data['qna']) { // data not null
          QnADTO.validateJSON(data['qna']);
        }

        return true;
    }


}



/**
 * Index of the prompt - used in ordering of the prompts
 * @member {Number} displayOrder
 */
PromptDTO.prototype['displayOrder'] = undefined;

/**
 * Text displayed to represent a follow up question prompt
 * @member {String} displayText
 */
PromptDTO.prototype['displayText'] = undefined;

/**
 * QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object
 * @member {module:model/QnADTO} qna
 */
PromptDTO.prototype['qna'] = undefined;

/**
 * Qna id corresponding to the prompt - if QnaId is present, QnADTO object is ignored.
 * @member {Number} qnaId
 */
PromptDTO.prototype['qnaId'] = undefined;






export default PromptDTO;

