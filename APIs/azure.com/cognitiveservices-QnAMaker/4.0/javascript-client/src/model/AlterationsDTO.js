/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlterationsDTO model module.
 * @module model/AlterationsDTO
 * @version 4.0
 */
class AlterationsDTO {
    /**
     * Constructs a new <code>AlterationsDTO</code>.
     * Collection of words that are synonyms.
     * @alias module:model/AlterationsDTO
     * @param alterations {Array.<String>} Words that are synonymous with each other.
     */
    constructor(alterations) { 
        
        AlterationsDTO.initialize(this, alterations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alterations) { 
        obj['alterations'] = alterations;
    }

    /**
     * Constructs a <code>AlterationsDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlterationsDTO} obj Optional instance to populate.
     * @return {module:model/AlterationsDTO} The populated <code>AlterationsDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlterationsDTO();

            if (data.hasOwnProperty('alterations')) {
                obj['alterations'] = ApiClient.convertToType(data['alterations'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlterationsDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlterationsDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlterationsDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['alterations'])) {
            throw new Error("Expected the field `alterations` to be an array in the JSON data but got " + data['alterations']);
        }

        return true;
    }


}

AlterationsDTO.RequiredProperties = ["alterations"];

/**
 * Words that are synonymous with each other.
 * @member {Array.<String>} alterations
 */
AlterationsDTO.prototype['alterations'] = undefined;






export default AlterationsDTO;

