/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateContextDTO from './UpdateContextDTO';
import UpdateMetadataDTO from './UpdateMetadataDTO';
import UpdateQuestionsDTO from './UpdateQuestionsDTO';

/**
 * The UpdateQnaDTO model module.
 * @module model/UpdateQnaDTO
 * @version 4.0
 */
class UpdateQnaDTO {
    /**
     * Constructs a new <code>UpdateQnaDTO</code>.
     * PATCH Body schema for Update Qna List
     * @alias module:model/UpdateQnaDTO
     */
    constructor() { 
        
        UpdateQnaDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateQnaDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateQnaDTO} obj Optional instance to populate.
     * @return {module:model/UpdateQnaDTO} The populated <code>UpdateQnaDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateQnaDTO();

            if (data.hasOwnProperty('answer')) {
                obj['answer'] = ApiClient.convertToType(data['answer'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], UpdateContextDTO);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], UpdateMetadataDTO);
            }
            if (data.hasOwnProperty('questions')) {
                obj['questions'] = ApiClient.convertToType(data['questions'], UpdateQuestionsDTO);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateQnaDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateQnaDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['answer'] && !(typeof data['answer'] === 'string' || data['answer'] instanceof String)) {
            throw new Error("Expected the field `answer` to be a primitive type in the JSON string but got " + data['answer']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          UpdateContextDTO.validateJSON(data['context']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          UpdateMetadataDTO.validateJSON(data['metadata']);
        }
        // validate the optional field `questions`
        if (data['questions']) { // data not null
          UpdateQuestionsDTO.validateJSON(data['questions']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}



/**
 * Answer text
 * @member {String} answer
 */
UpdateQnaDTO.prototype['answer'] = undefined;

/**
 * Context associated with Qna to be updated.
 * @member {module:model/UpdateContextDTO} context
 */
UpdateQnaDTO.prototype['context'] = undefined;

/**
 * Unique id for the Q-A
 * @member {Number} id
 */
UpdateQnaDTO.prototype['id'] = undefined;

/**
 * List of metadata associated with the answer to be updated
 * @member {module:model/UpdateMetadataDTO} metadata
 */
UpdateQnaDTO.prototype['metadata'] = undefined;

/**
 * List of questions associated with the answer.
 * @member {module:model/UpdateQuestionsDTO} questions
 */
UpdateQnaDTO.prototype['questions'] = undefined;

/**
 * Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
 * @member {String} source
 */
UpdateQnaDTO.prototype['source'] = undefined;






export default UpdateQnaDTO;

