/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetadataDTO from './MetadataDTO';

/**
 * The UpdateMetadataDTO model module.
 * @module model/UpdateMetadataDTO
 * @version 4.0
 */
class UpdateMetadataDTO {
    /**
     * Constructs a new <code>UpdateMetadataDTO</code>.
     * PATCH Body schema to represent list of Metadata to be updated
     * @alias module:model/UpdateMetadataDTO
     */
    constructor() { 
        
        UpdateMetadataDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateMetadataDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateMetadataDTO} obj Optional instance to populate.
     * @return {module:model/UpdateMetadataDTO} The populated <code>UpdateMetadataDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateMetadataDTO();

            if (data.hasOwnProperty('add')) {
                obj['add'] = ApiClient.convertToType(data['add'], [MetadataDTO]);
            }
            if (data.hasOwnProperty('delete')) {
                obj['delete'] = ApiClient.convertToType(data['delete'], [MetadataDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateMetadataDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateMetadataDTO</code>.
     */
    static validateJSON(data) {
        if (data['add']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['add'])) {
                throw new Error("Expected the field `add` to be an array in the JSON data but got " + data['add']);
            }
            // validate the optional field `add` (array)
            for (const item of data['add']) {
                MetadataDTO.validateJSON(item);
            };
        }
        if (data['delete']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['delete'])) {
                throw new Error("Expected the field `delete` to be an array in the JSON data but got " + data['delete']);
            }
            // validate the optional field `delete` (array)
            for (const item of data['delete']) {
                MetadataDTO.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of metadata associated with answer to be added
 * @member {Array.<module:model/MetadataDTO>} add
 */
UpdateMetadataDTO.prototype['add'] = undefined;

/**
 * List of Metadata associated with answer to be deleted
 * @member {Array.<module:model/MetadataDTO>} delete
 */
UpdateMetadataDTO.prototype['delete'] = undefined;






export default UpdateMetadataDTO;

