/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorCode from './ErrorCode';
import InnerErrorModel from './InnerErrorModel';

/**
 * The Error model module.
 * @module model/Error
 * @version 4.0
 */
class Error {
    /**
     * Constructs a new <code>Error</code>.
     * The error object. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
     * @alias module:model/Error
     * @param code {module:model/ErrorCode} 
     */
    constructor(code) { 
        
        Error.initialize(this, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code) { 
        obj['code'] = code;
    }

    /**
     * Constructs a <code>Error</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Error} obj Optional instance to populate.
     * @return {module:model/Error} The populated <code>Error</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Error();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ErrorCode.constructFromObject(data['code']);
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [Error]);
            }
            if (data.hasOwnProperty('innerError')) {
                obj['innerError'] = InnerErrorModel.constructFromObject(data['innerError']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Error</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Error</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Error.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                Error.validateJSON(item);
            };
        }
        // validate the optional field `innerError`
        if (data['innerError']) { // data not null
          InnerErrorModel.validateJSON(data['innerError']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }

        return true;
    }


}

Error.RequiredProperties = ["code"];

/**
 * @member {module:model/ErrorCode} code
 */
Error.prototype['code'] = undefined;

/**
 * An array of details about specific errors that led to this reported error.
 * @member {Array.<module:model/Error>} details
 */
Error.prototype['details'] = undefined;

/**
 * @member {module:model/InnerErrorModel} innerError
 */
Error.prototype['innerError'] = undefined;

/**
 * A human-readable representation of the error.
 * @member {String} message
 */
Error.prototype['message'] = undefined;

/**
 * The target of the error.
 * @member {String} target
 */
Error.prototype['target'] = undefined;






export default Error;

