/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PromptDTO from './PromptDTO';

/**
 * The UpdateContextDTO model module.
 * @module model/UpdateContextDTO
 * @version 4.0
 */
class UpdateContextDTO {
    /**
     * Constructs a new <code>UpdateContextDTO</code>.
     * Update Body schema to represent context to be updated
     * @alias module:model/UpdateContextDTO
     */
    constructor() { 
        
        UpdateContextDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateContextDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateContextDTO} obj Optional instance to populate.
     * @return {module:model/UpdateContextDTO} The populated <code>UpdateContextDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateContextDTO();

            if (data.hasOwnProperty('isContextOnly')) {
                obj['isContextOnly'] = ApiClient.convertToType(data['isContextOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('promptsToAdd')) {
                obj['promptsToAdd'] = ApiClient.convertToType(data['promptsToAdd'], [PromptDTO]);
            }
            if (data.hasOwnProperty('promptsToDelete')) {
                obj['promptsToDelete'] = ApiClient.convertToType(data['promptsToDelete'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateContextDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateContextDTO</code>.
     */
    static validateJSON(data) {
        if (data['promptsToAdd']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['promptsToAdd'])) {
                throw new Error("Expected the field `promptsToAdd` to be an array in the JSON data but got " + data['promptsToAdd']);
            }
            // validate the optional field `promptsToAdd` (array)
            for (const item of data['promptsToAdd']) {
                PromptDTO.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['promptsToDelete'])) {
            throw new Error("Expected the field `promptsToDelete` to be an array in the JSON data but got " + data['promptsToDelete']);
        }

        return true;
    }


}



/**
 * To mark if a prompt is relevant only with a previous question or not. true - Do not include this QnA as search result for queries without context false - ignores context and includes this QnA in search result
 * @member {Boolean} isContextOnly
 */
UpdateContextDTO.prototype['isContextOnly'] = undefined;

/**
 * List of prompts to be added to the qna.
 * @member {Array.<module:model/PromptDTO>} promptsToAdd
 */
UpdateContextDTO.prototype['promptsToAdd'] = undefined;

/**
 * List of prompts associated with qna to be deleted
 * @member {Array.<Number>} promptsToDelete
 */
UpdateContextDTO.prototype['promptsToDelete'] = undefined;






export default UpdateContextDTO;

