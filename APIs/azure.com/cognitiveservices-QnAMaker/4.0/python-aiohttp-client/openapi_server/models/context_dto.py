# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prompt_dto import PromptDTO
from openapi_server import util


class ContextDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_context_only: bool=None, prompts: List[PromptDTO]=None):
        """ContextDTO - a model defined in OpenAPI

        :param is_context_only: The is_context_only of this ContextDTO.
        :param prompts: The prompts of this ContextDTO.
        """
        self.openapi_types = {
            'is_context_only': bool,
            'prompts': List[PromptDTO]
        }

        self.attribute_map = {
            'is_context_only': 'isContextOnly',
            'prompts': 'prompts'
        }

        self._is_context_only = is_context_only
        self._prompts = prompts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContextDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContextDTO of this ContextDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_context_only(self):
        """Gets the is_context_only of this ContextDTO.

        To mark if a prompt is relevant only with a previous question or not. true - Do not include this QnA as search result for queries without context false - ignores context and includes this QnA in search result

        :return: The is_context_only of this ContextDTO.
        :rtype: bool
        """
        return self._is_context_only

    @is_context_only.setter
    def is_context_only(self, is_context_only):
        """Sets the is_context_only of this ContextDTO.

        To mark if a prompt is relevant only with a previous question or not. true - Do not include this QnA as search result for queries without context false - ignores context and includes this QnA in search result

        :param is_context_only: The is_context_only of this ContextDTO.
        :type is_context_only: bool
        """

        self._is_context_only = is_context_only

    @property
    def prompts(self):
        """Gets the prompts of this ContextDTO.

        List of prompts associated with the answer.

        :return: The prompts of this ContextDTO.
        :rtype: List[PromptDTO]
        """
        return self._prompts

    @prompts.setter
    def prompts(self, prompts):
        """Sets the prompts of this ContextDTO.

        List of prompts associated with the answer.

        :param prompts: The prompts of this ContextDTO.
        :type prompts: List[PromptDTO]
        """
        if prompts is not None and len(prompts) > 20:
            raise ValueError("Invalid value for `prompts`, number of items must be less than or equal to `20`")

        self._prompts = prompts
