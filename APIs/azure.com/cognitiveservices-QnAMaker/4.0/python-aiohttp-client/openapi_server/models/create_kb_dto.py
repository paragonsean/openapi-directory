# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_dto import FileDTO
from openapi_server.models.qn_adto import QnADTO
from openapi_server import util


class CreateKbDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_answer_used_for_extraction: str=None, enable_hierarchical_extraction: bool=None, files: List[FileDTO]=None, language: str=None, name: str=None, qna_list: List[QnADTO]=None, urls: List[str]=None):
        """CreateKbDTO - a model defined in OpenAPI

        :param default_answer_used_for_extraction: The default_answer_used_for_extraction of this CreateKbDTO.
        :param enable_hierarchical_extraction: The enable_hierarchical_extraction of this CreateKbDTO.
        :param files: The files of this CreateKbDTO.
        :param language: The language of this CreateKbDTO.
        :param name: The name of this CreateKbDTO.
        :param qna_list: The qna_list of this CreateKbDTO.
        :param urls: The urls of this CreateKbDTO.
        """
        self.openapi_types = {
            'default_answer_used_for_extraction': str,
            'enable_hierarchical_extraction': bool,
            'files': List[FileDTO],
            'language': str,
            'name': str,
            'qna_list': List[QnADTO],
            'urls': List[str]
        }

        self.attribute_map = {
            'default_answer_used_for_extraction': 'defaultAnswerUsedForExtraction',
            'enable_hierarchical_extraction': 'enableHierarchicalExtraction',
            'files': 'files',
            'language': 'language',
            'name': 'name',
            'qna_list': 'qnaList',
            'urls': 'urls'
        }

        self._default_answer_used_for_extraction = default_answer_used_for_extraction
        self._enable_hierarchical_extraction = enable_hierarchical_extraction
        self._files = files
        self._language = language
        self._name = name
        self._qna_list = qna_list
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateKbDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateKbDTO of this CreateKbDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_answer_used_for_extraction(self):
        """Gets the default_answer_used_for_extraction of this CreateKbDTO.

        Text string to be used as the answer in any Q-A which has no extracted answer from the document but has a hierarchy. Required when EnableHierarchicalExtraction field is set to True.

        :return: The default_answer_used_for_extraction of this CreateKbDTO.
        :rtype: str
        """
        return self._default_answer_used_for_extraction

    @default_answer_used_for_extraction.setter
    def default_answer_used_for_extraction(self, default_answer_used_for_extraction):
        """Sets the default_answer_used_for_extraction of this CreateKbDTO.

        Text string to be used as the answer in any Q-A which has no extracted answer from the document but has a hierarchy. Required when EnableHierarchicalExtraction field is set to True.

        :param default_answer_used_for_extraction: The default_answer_used_for_extraction of this CreateKbDTO.
        :type default_answer_used_for_extraction: str
        """
        if default_answer_used_for_extraction is not None and len(default_answer_used_for_extraction) > 300:
            raise ValueError("Invalid value for `default_answer_used_for_extraction`, length must be less than or equal to `300`")
        if default_answer_used_for_extraction is not None and len(default_answer_used_for_extraction) < 1:
            raise ValueError("Invalid value for `default_answer_used_for_extraction`, length must be greater than or equal to `1`")

        self._default_answer_used_for_extraction = default_answer_used_for_extraction

    @property
    def enable_hierarchical_extraction(self):
        """Gets the enable_hierarchical_extraction of this CreateKbDTO.

        Enable hierarchical extraction of Q-A from files and urls. Value to be considered False if this field is not present.

        :return: The enable_hierarchical_extraction of this CreateKbDTO.
        :rtype: bool
        """
        return self._enable_hierarchical_extraction

    @enable_hierarchical_extraction.setter
    def enable_hierarchical_extraction(self, enable_hierarchical_extraction):
        """Sets the enable_hierarchical_extraction of this CreateKbDTO.

        Enable hierarchical extraction of Q-A from files and urls. Value to be considered False if this field is not present.

        :param enable_hierarchical_extraction: The enable_hierarchical_extraction of this CreateKbDTO.
        :type enable_hierarchical_extraction: bool
        """

        self._enable_hierarchical_extraction = enable_hierarchical_extraction

    @property
    def files(self):
        """Gets the files of this CreateKbDTO.

        List of files from which to Extract Q-A.

        :return: The files of this CreateKbDTO.
        :rtype: List[FileDTO]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this CreateKbDTO.

        List of files from which to Extract Q-A.

        :param files: The files of this CreateKbDTO.
        :type files: List[FileDTO]
        """

        self._files = files

    @property
    def language(self):
        """Gets the language of this CreateKbDTO.

        Language of the knowledgebase.

        :return: The language of this CreateKbDTO.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CreateKbDTO.

        Language of the knowledgebase.

        :param language: The language of this CreateKbDTO.
        :type language: str
        """
        if language is not None and len(language) > 100:
            raise ValueError("Invalid value for `language`, length must be less than or equal to `100`")
        if language is not None and len(language) < 1:
            raise ValueError("Invalid value for `language`, length must be greater than or equal to `1`")

        self._language = language

    @property
    def name(self):
        """Gets the name of this CreateKbDTO.

        Friendly name for the knowledgebase.

        :return: The name of this CreateKbDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateKbDTO.

        Friendly name for the knowledgebase.

        :param name: The name of this CreateKbDTO.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def qna_list(self):
        """Gets the qna_list of this CreateKbDTO.

        List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.

        :return: The qna_list of this CreateKbDTO.
        :rtype: List[QnADTO]
        """
        return self._qna_list

    @qna_list.setter
    def qna_list(self, qna_list):
        """Sets the qna_list of this CreateKbDTO.

        List of Q-A (QnADTO) to be added to the knowledgebase. Q-A Ids are assigned by the service and should be omitted.

        :param qna_list: The qna_list of this CreateKbDTO.
        :type qna_list: List[QnADTO]
        """

        self._qna_list = qna_list

    @property
    def urls(self):
        """Gets the urls of this CreateKbDTO.

        List of URLs to be used for extracting Q-A.

        :return: The urls of this CreateKbDTO.
        :rtype: List[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this CreateKbDTO.

        List of URLs to be used for extracting Q-A.

        :param urls: The urls of this CreateKbDTO.
        :type urls: List[str]
        """

        self._urls = urls
