# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_name: str=None, file_uri: str=None):
        """FileDTO - a model defined in OpenAPI

        :param file_name: The file_name of this FileDTO.
        :param file_uri: The file_uri of this FileDTO.
        """
        self.openapi_types = {
            'file_name': str,
            'file_uri': str
        }

        self.attribute_map = {
            'file_name': 'fileName',
            'file_uri': 'fileUri'
        }

        self._file_name = file_name
        self._file_uri = file_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileDTO of this FileDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_name(self):
        """Gets the file_name of this FileDTO.

        File name. Supported file types are \".tsv\", \".pdf\", \".txt\", \".docx\", \".xlsx\".

        :return: The file_name of this FileDTO.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FileDTO.

        File name. Supported file types are \".tsv\", \".pdf\", \".txt\", \".docx\", \".xlsx\".

        :param file_name: The file_name of this FileDTO.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")
        if file_name is not None and len(file_name) > 200:
            raise ValueError("Invalid value for `file_name`, length must be less than or equal to `200`")
        if file_name is not None and len(file_name) < 1:
            raise ValueError("Invalid value for `file_name`, length must be greater than or equal to `1`")

        self._file_name = file_name

    @property
    def file_uri(self):
        """Gets the file_uri of this FileDTO.

        Public URI of the file.

        :return: The file_uri of this FileDTO.
        :rtype: str
        """
        return self._file_uri

    @file_uri.setter
    def file_uri(self, file_uri):
        """Sets the file_uri of this FileDTO.

        Public URI of the file.

        :param file_uri: The file_uri of this FileDTO.
        :type file_uri: str
        """
        if file_uri is None:
            raise ValueError("Invalid value for `file_uri`, must not be `None`")

        self._file_uri = file_uri
