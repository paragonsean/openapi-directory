# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prompt_dto import PromptDTO
from openapi_server import util


class UpdateContextDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_context_only: bool=None, prompts_to_add: List[PromptDTO]=None, prompts_to_delete: List[int]=None):
        """UpdateContextDTO - a model defined in OpenAPI

        :param is_context_only: The is_context_only of this UpdateContextDTO.
        :param prompts_to_add: The prompts_to_add of this UpdateContextDTO.
        :param prompts_to_delete: The prompts_to_delete of this UpdateContextDTO.
        """
        self.openapi_types = {
            'is_context_only': bool,
            'prompts_to_add': List[PromptDTO],
            'prompts_to_delete': List[int]
        }

        self.attribute_map = {
            'is_context_only': 'isContextOnly',
            'prompts_to_add': 'promptsToAdd',
            'prompts_to_delete': 'promptsToDelete'
        }

        self._is_context_only = is_context_only
        self._prompts_to_add = prompts_to_add
        self._prompts_to_delete = prompts_to_delete

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContextDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContextDTO of this UpdateContextDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_context_only(self):
        """Gets the is_context_only of this UpdateContextDTO.

        To mark if a prompt is relevant only with a previous question or not. true - Do not include this QnA as search result for queries without context false - ignores context and includes this QnA in search result

        :return: The is_context_only of this UpdateContextDTO.
        :rtype: bool
        """
        return self._is_context_only

    @is_context_only.setter
    def is_context_only(self, is_context_only):
        """Sets the is_context_only of this UpdateContextDTO.

        To mark if a prompt is relevant only with a previous question or not. true - Do not include this QnA as search result for queries without context false - ignores context and includes this QnA in search result

        :param is_context_only: The is_context_only of this UpdateContextDTO.
        :type is_context_only: bool
        """

        self._is_context_only = is_context_only

    @property
    def prompts_to_add(self):
        """Gets the prompts_to_add of this UpdateContextDTO.

        List of prompts to be added to the qna.

        :return: The prompts_to_add of this UpdateContextDTO.
        :rtype: List[PromptDTO]
        """
        return self._prompts_to_add

    @prompts_to_add.setter
    def prompts_to_add(self, prompts_to_add):
        """Sets the prompts_to_add of this UpdateContextDTO.

        List of prompts to be added to the qna.

        :param prompts_to_add: The prompts_to_add of this UpdateContextDTO.
        :type prompts_to_add: List[PromptDTO]
        """

        self._prompts_to_add = prompts_to_add

    @property
    def prompts_to_delete(self):
        """Gets the prompts_to_delete of this UpdateContextDTO.

        List of prompts associated with qna to be deleted

        :return: The prompts_to_delete of this UpdateContextDTO.
        :rtype: List[int]
        """
        return self._prompts_to_delete

    @prompts_to_delete.setter
    def prompts_to_delete(self, prompts_to_delete):
        """Sets the prompts_to_delete of this UpdateContextDTO.

        List of prompts associated with qna to be deleted

        :param prompts_to_delete: The prompts_to_delete of this UpdateContextDTO.
        :type prompts_to_delete: List[int]
        """

        self._prompts_to_delete = prompts_to_delete
