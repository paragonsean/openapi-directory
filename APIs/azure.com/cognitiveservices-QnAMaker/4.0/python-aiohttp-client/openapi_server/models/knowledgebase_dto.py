# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KnowledgebaseDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_name: str=None, id: str=None, last_accessed_timestamp: str=None, last_changed_timestamp: str=None, last_published_timestamp: str=None, name: str=None, sources: List[str]=None, urls: List[str]=None, user_id: str=None):
        """KnowledgebaseDTO - a model defined in OpenAPI

        :param host_name: The host_name of this KnowledgebaseDTO.
        :param id: The id of this KnowledgebaseDTO.
        :param last_accessed_timestamp: The last_accessed_timestamp of this KnowledgebaseDTO.
        :param last_changed_timestamp: The last_changed_timestamp of this KnowledgebaseDTO.
        :param last_published_timestamp: The last_published_timestamp of this KnowledgebaseDTO.
        :param name: The name of this KnowledgebaseDTO.
        :param sources: The sources of this KnowledgebaseDTO.
        :param urls: The urls of this KnowledgebaseDTO.
        :param user_id: The user_id of this KnowledgebaseDTO.
        """
        self.openapi_types = {
            'host_name': str,
            'id': str,
            'last_accessed_timestamp': str,
            'last_changed_timestamp': str,
            'last_published_timestamp': str,
            'name': str,
            'sources': List[str],
            'urls': List[str],
            'user_id': str
        }

        self.attribute_map = {
            'host_name': 'hostName',
            'id': 'id',
            'last_accessed_timestamp': 'lastAccessedTimestamp',
            'last_changed_timestamp': 'lastChangedTimestamp',
            'last_published_timestamp': 'lastPublishedTimestamp',
            'name': 'name',
            'sources': 'sources',
            'urls': 'urls',
            'user_id': 'userId'
        }

        self._host_name = host_name
        self._id = id
        self._last_accessed_timestamp = last_accessed_timestamp
        self._last_changed_timestamp = last_changed_timestamp
        self._last_published_timestamp = last_published_timestamp
        self._name = name
        self._sources = sources
        self._urls = urls
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KnowledgebaseDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KnowledgebaseDTO of this KnowledgebaseDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_name(self):
        """Gets the host_name of this KnowledgebaseDTO.

        URL host name at which the knowledgebase is hosted.

        :return: The host_name of this KnowledgebaseDTO.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this KnowledgebaseDTO.

        URL host name at which the knowledgebase is hosted.

        :param host_name: The host_name of this KnowledgebaseDTO.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def id(self):
        """Gets the id of this KnowledgebaseDTO.

        Unique id that identifies a knowledgebase.

        :return: The id of this KnowledgebaseDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KnowledgebaseDTO.

        Unique id that identifies a knowledgebase.

        :param id: The id of this KnowledgebaseDTO.
        :type id: str
        """

        self._id = id

    @property
    def last_accessed_timestamp(self):
        """Gets the last_accessed_timestamp of this KnowledgebaseDTO.

        Time stamp at which the knowledgebase was last accessed (UTC).

        :return: The last_accessed_timestamp of this KnowledgebaseDTO.
        :rtype: str
        """
        return self._last_accessed_timestamp

    @last_accessed_timestamp.setter
    def last_accessed_timestamp(self, last_accessed_timestamp):
        """Sets the last_accessed_timestamp of this KnowledgebaseDTO.

        Time stamp at which the knowledgebase was last accessed (UTC).

        :param last_accessed_timestamp: The last_accessed_timestamp of this KnowledgebaseDTO.
        :type last_accessed_timestamp: str
        """

        self._last_accessed_timestamp = last_accessed_timestamp

    @property
    def last_changed_timestamp(self):
        """Gets the last_changed_timestamp of this KnowledgebaseDTO.

        Time stamp at which the knowledgebase was last modified (UTC).

        :return: The last_changed_timestamp of this KnowledgebaseDTO.
        :rtype: str
        """
        return self._last_changed_timestamp

    @last_changed_timestamp.setter
    def last_changed_timestamp(self, last_changed_timestamp):
        """Sets the last_changed_timestamp of this KnowledgebaseDTO.

        Time stamp at which the knowledgebase was last modified (UTC).

        :param last_changed_timestamp: The last_changed_timestamp of this KnowledgebaseDTO.
        :type last_changed_timestamp: str
        """

        self._last_changed_timestamp = last_changed_timestamp

    @property
    def last_published_timestamp(self):
        """Gets the last_published_timestamp of this KnowledgebaseDTO.

        Time stamp at which the knowledgebase was last published (UTC).

        :return: The last_published_timestamp of this KnowledgebaseDTO.
        :rtype: str
        """
        return self._last_published_timestamp

    @last_published_timestamp.setter
    def last_published_timestamp(self, last_published_timestamp):
        """Sets the last_published_timestamp of this KnowledgebaseDTO.

        Time stamp at which the knowledgebase was last published (UTC).

        :param last_published_timestamp: The last_published_timestamp of this KnowledgebaseDTO.
        :type last_published_timestamp: str
        """

        self._last_published_timestamp = last_published_timestamp

    @property
    def name(self):
        """Gets the name of this KnowledgebaseDTO.

        Friendly name of the knowledgebase.

        :return: The name of this KnowledgebaseDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KnowledgebaseDTO.

        Friendly name of the knowledgebase.

        :param name: The name of this KnowledgebaseDTO.
        :type name: str
        """

        self._name = name

    @property
    def sources(self):
        """Gets the sources of this KnowledgebaseDTO.

        Custom sources from which Q-A were extracted or explicitly added to the knowledgebase.

        :return: The sources of this KnowledgebaseDTO.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this KnowledgebaseDTO.

        Custom sources from which Q-A were extracted or explicitly added to the knowledgebase.

        :param sources: The sources of this KnowledgebaseDTO.
        :type sources: List[str]
        """

        self._sources = sources

    @property
    def urls(self):
        """Gets the urls of this KnowledgebaseDTO.

        URL sources from which Q-A were extracted and added to the knowledgebase.

        :return: The urls of this KnowledgebaseDTO.
        :rtype: List[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this KnowledgebaseDTO.

        URL sources from which Q-A were extracted and added to the knowledgebase.

        :param urls: The urls of this KnowledgebaseDTO.
        :type urls: List[str]
        """

        self._urls = urls

    @property
    def user_id(self):
        """Gets the user_id of this KnowledgebaseDTO.

        User who created / owns the knowledgebase.

        :return: The user_id of this KnowledgebaseDTO.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this KnowledgebaseDTO.

        User who created / owns the knowledgebase.

        :param user_id: The user_id of this KnowledgebaseDTO.
        :type user_id: str
        """

        self._user_id = user_id
