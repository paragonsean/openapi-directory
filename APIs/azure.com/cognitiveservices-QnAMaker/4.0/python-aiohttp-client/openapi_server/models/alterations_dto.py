# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlterationsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alterations: List[str]=None):
        """AlterationsDTO - a model defined in OpenAPI

        :param alterations: The alterations of this AlterationsDTO.
        """
        self.openapi_types = {
            'alterations': List[str]
        }

        self.attribute_map = {
            'alterations': 'alterations'
        }

        self._alterations = alterations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlterationsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlterationsDTO of this AlterationsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alterations(self):
        """Gets the alterations of this AlterationsDTO.

        Words that are synonymous with each other.

        :return: The alterations of this AlterationsDTO.
        :rtype: List[str]
        """
        return self._alterations

    @alterations.setter
    def alterations(self, alterations):
        """Sets the alterations of this AlterationsDTO.

        Words that are synonymous with each other.

        :param alterations: The alterations of this AlterationsDTO.
        :type alterations: List[str]
        """
        if alterations is None:
            raise ValueError("Invalid value for `alterations`, must not be `None`")

        self._alterations = alterations
