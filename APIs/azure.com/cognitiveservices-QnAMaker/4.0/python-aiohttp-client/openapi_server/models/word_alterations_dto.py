# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alterations_dto import AlterationsDTO
from openapi_server import util


class WordAlterationsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, word_alterations: List[AlterationsDTO]=None):
        """WordAlterationsDTO - a model defined in OpenAPI

        :param word_alterations: The word_alterations of this WordAlterationsDTO.
        """
        self.openapi_types = {
            'word_alterations': List[AlterationsDTO]
        }

        self.attribute_map = {
            'word_alterations': 'wordAlterations'
        }

        self._word_alterations = word_alterations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WordAlterationsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WordAlterationsDTO of this WordAlterationsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def word_alterations(self):
        """Gets the word_alterations of this WordAlterationsDTO.

        Collection of word alterations.

        :return: The word_alterations of this WordAlterationsDTO.
        :rtype: List[AlterationsDTO]
        """
        return self._word_alterations

    @word_alterations.setter
    def word_alterations(self, word_alterations):
        """Sets the word_alterations of this WordAlterationsDTO.

        Collection of word alterations.

        :param word_alterations: The word_alterations of this WordAlterationsDTO.
        :type word_alterations: List[AlterationsDTO]
        """
        if word_alterations is None:
            raise ValueError("Invalid value for `word_alterations`, must not be `None`")

        self._word_alterations = word_alterations
