# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_qna_dto import UpdateQnaDTO
from openapi_server import util


class UpdateKbContentsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, qna_list: List[UpdateQnaDTO]=None, urls: List[str]=None):
        """UpdateKbContentsDTO - a model defined in OpenAPI

        :param name: The name of this UpdateKbContentsDTO.
        :param qna_list: The qna_list of this UpdateKbContentsDTO.
        :param urls: The urls of this UpdateKbContentsDTO.
        """
        self.openapi_types = {
            'name': str,
            'qna_list': List[UpdateQnaDTO],
            'urls': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'qna_list': 'qnaList',
            'urls': 'urls'
        }

        self._name = name
        self._qna_list = qna_list
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateKbContentsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateKbContentsDTO of this UpdateKbContentsDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateKbContentsDTO.

        Friendly name for the knowledgebase.

        :return: The name of this UpdateKbContentsDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateKbContentsDTO.

        Friendly name for the knowledgebase.

        :param name: The name of this UpdateKbContentsDTO.
        :type name: str
        """

        self._name = name

    @property
    def qna_list(self):
        """Gets the qna_list of this UpdateKbContentsDTO.

        List of Q-A (UpdateQnaDTO) to be added to the knowledgebase.

        :return: The qna_list of this UpdateKbContentsDTO.
        :rtype: List[UpdateQnaDTO]
        """
        return self._qna_list

    @qna_list.setter
    def qna_list(self, qna_list):
        """Sets the qna_list of this UpdateKbContentsDTO.

        List of Q-A (UpdateQnaDTO) to be added to the knowledgebase.

        :param qna_list: The qna_list of this UpdateKbContentsDTO.
        :type qna_list: List[UpdateQnaDTO]
        """

        self._qna_list = qna_list

    @property
    def urls(self):
        """Gets the urls of this UpdateKbContentsDTO.

        List of existing URLs to be refreshed. The content will be extracted again and re-indexed.

        :return: The urls of this UpdateKbContentsDTO.
        :rtype: List[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this UpdateKbContentsDTO.

        List of existing URLs to be refreshed. The content will be extracted again and re-indexed.

        :param urls: The urls of this UpdateKbContentsDTO.
        :type urls: List[str]
        """

        self._urls = urls
