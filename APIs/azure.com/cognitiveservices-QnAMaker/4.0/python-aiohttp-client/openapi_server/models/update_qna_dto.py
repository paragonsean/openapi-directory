# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_context_dto import UpdateContextDTO
from openapi_server.models.update_metadata_dto import UpdateMetadataDTO
from openapi_server.models.update_questions_dto import UpdateQuestionsDTO
from openapi_server import util


class UpdateQnaDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer: str=None, context: UpdateContextDTO=None, id: int=None, metadata: UpdateMetadataDTO=None, questions: UpdateQuestionsDTO=None, source: str=None):
        """UpdateQnaDTO - a model defined in OpenAPI

        :param answer: The answer of this UpdateQnaDTO.
        :param context: The context of this UpdateQnaDTO.
        :param id: The id of this UpdateQnaDTO.
        :param metadata: The metadata of this UpdateQnaDTO.
        :param questions: The questions of this UpdateQnaDTO.
        :param source: The source of this UpdateQnaDTO.
        """
        self.openapi_types = {
            'answer': str,
            'context': UpdateContextDTO,
            'id': int,
            'metadata': UpdateMetadataDTO,
            'questions': UpdateQuestionsDTO,
            'source': str
        }

        self.attribute_map = {
            'answer': 'answer',
            'context': 'context',
            'id': 'id',
            'metadata': 'metadata',
            'questions': 'questions',
            'source': 'source'
        }

        self._answer = answer
        self._context = context
        self._id = id
        self._metadata = metadata
        self._questions = questions
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateQnaDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateQnaDTO of this UpdateQnaDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer(self):
        """Gets the answer of this UpdateQnaDTO.

        Answer text

        :return: The answer of this UpdateQnaDTO.
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this UpdateQnaDTO.

        Answer text

        :param answer: The answer of this UpdateQnaDTO.
        :type answer: str
        """

        self._answer = answer

    @property
    def context(self):
        """Gets the context of this UpdateQnaDTO.

        Context associated with Qna to be updated.

        :return: The context of this UpdateQnaDTO.
        :rtype: UpdateContextDTO
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this UpdateQnaDTO.

        Context associated with Qna to be updated.

        :param context: The context of this UpdateQnaDTO.
        :type context: UpdateContextDTO
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this UpdateQnaDTO.

        Unique id for the Q-A

        :return: The id of this UpdateQnaDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateQnaDTO.

        Unique id for the Q-A

        :param id: The id of this UpdateQnaDTO.
        :type id: int
        """
        if id is not None and id > 2147483647:
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `2147483647`")
        if id is not None and id < 0:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this UpdateQnaDTO.

        List of metadata associated with the answer to be updated

        :return: The metadata of this UpdateQnaDTO.
        :rtype: UpdateMetadataDTO
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateQnaDTO.

        List of metadata associated with the answer to be updated

        :param metadata: The metadata of this UpdateQnaDTO.
        :type metadata: UpdateMetadataDTO
        """

        self._metadata = metadata

    @property
    def questions(self):
        """Gets the questions of this UpdateQnaDTO.

        List of questions associated with the answer.

        :return: The questions of this UpdateQnaDTO.
        :rtype: UpdateQuestionsDTO
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this UpdateQnaDTO.

        List of questions associated with the answer.

        :param questions: The questions of this UpdateQnaDTO.
        :type questions: UpdateQuestionsDTO
        """

        self._questions = questions

    @property
    def source(self):
        """Gets the source of this UpdateQnaDTO.

        Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs

        :return: The source of this UpdateQnaDTO.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this UpdateQnaDTO.

        Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs

        :param source: The source of this UpdateQnaDTO.
        :type source: str
        """
        if source is not None and len(source) > 300:
            raise ValueError("Invalid value for `source`, length must be less than or equal to `300`")

        self._source = source
