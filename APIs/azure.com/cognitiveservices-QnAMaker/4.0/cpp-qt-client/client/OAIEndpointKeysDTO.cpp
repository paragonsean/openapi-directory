/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointKeysDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointKeysDTO::OAIEndpointKeysDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointKeysDTO::OAIEndpointKeysDTO() {
    this->initializeModel();
}

OAIEndpointKeysDTO::~OAIEndpointKeysDTO() {}

void OAIEndpointKeysDTO::initializeModel() {

    m_installed_version_isSet = false;
    m_installed_version_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_stable_version_isSet = false;
    m_last_stable_version_isValid = false;

    m_primary_endpoint_key_isSet = false;
    m_primary_endpoint_key_isValid = false;

    m_secondary_endpoint_key_isSet = false;
    m_secondary_endpoint_key_isValid = false;
}

void OAIEndpointKeysDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointKeysDTO::fromJsonObject(QJsonObject json) {

    m_installed_version_isValid = ::OpenAPI::fromJsonValue(m_installed_version, json[QString("installedVersion")]);
    m_installed_version_isSet = !json[QString("installedVersion")].isNull() && m_installed_version_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_stable_version_isValid = ::OpenAPI::fromJsonValue(m_last_stable_version, json[QString("lastStableVersion")]);
    m_last_stable_version_isSet = !json[QString("lastStableVersion")].isNull() && m_last_stable_version_isValid;

    m_primary_endpoint_key_isValid = ::OpenAPI::fromJsonValue(m_primary_endpoint_key, json[QString("primaryEndpointKey")]);
    m_primary_endpoint_key_isSet = !json[QString("primaryEndpointKey")].isNull() && m_primary_endpoint_key_isValid;

    m_secondary_endpoint_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_endpoint_key, json[QString("secondaryEndpointKey")]);
    m_secondary_endpoint_key_isSet = !json[QString("secondaryEndpointKey")].isNull() && m_secondary_endpoint_key_isValid;
}

QString OAIEndpointKeysDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointKeysDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_installed_version_isSet) {
        obj.insert(QString("installedVersion"), ::OpenAPI::toJsonValue(m_installed_version));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_stable_version_isSet) {
        obj.insert(QString("lastStableVersion"), ::OpenAPI::toJsonValue(m_last_stable_version));
    }
    if (m_primary_endpoint_key_isSet) {
        obj.insert(QString("primaryEndpointKey"), ::OpenAPI::toJsonValue(m_primary_endpoint_key));
    }
    if (m_secondary_endpoint_key_isSet) {
        obj.insert(QString("secondaryEndpointKey"), ::OpenAPI::toJsonValue(m_secondary_endpoint_key));
    }
    return obj;
}

QString OAIEndpointKeysDTO::getInstalledVersion() const {
    return m_installed_version;
}
void OAIEndpointKeysDTO::setInstalledVersion(const QString &installed_version) {
    m_installed_version = installed_version;
    m_installed_version_isSet = true;
}

bool OAIEndpointKeysDTO::is_installed_version_Set() const{
    return m_installed_version_isSet;
}

bool OAIEndpointKeysDTO::is_installed_version_Valid() const{
    return m_installed_version_isValid;
}

QString OAIEndpointKeysDTO::getLanguage() const {
    return m_language;
}
void OAIEndpointKeysDTO::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIEndpointKeysDTO::is_language_Set() const{
    return m_language_isSet;
}

bool OAIEndpointKeysDTO::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIEndpointKeysDTO::getLastStableVersion() const {
    return m_last_stable_version;
}
void OAIEndpointKeysDTO::setLastStableVersion(const QString &last_stable_version) {
    m_last_stable_version = last_stable_version;
    m_last_stable_version_isSet = true;
}

bool OAIEndpointKeysDTO::is_last_stable_version_Set() const{
    return m_last_stable_version_isSet;
}

bool OAIEndpointKeysDTO::is_last_stable_version_Valid() const{
    return m_last_stable_version_isValid;
}

QString OAIEndpointKeysDTO::getPrimaryEndpointKey() const {
    return m_primary_endpoint_key;
}
void OAIEndpointKeysDTO::setPrimaryEndpointKey(const QString &primary_endpoint_key) {
    m_primary_endpoint_key = primary_endpoint_key;
    m_primary_endpoint_key_isSet = true;
}

bool OAIEndpointKeysDTO::is_primary_endpoint_key_Set() const{
    return m_primary_endpoint_key_isSet;
}

bool OAIEndpointKeysDTO::is_primary_endpoint_key_Valid() const{
    return m_primary_endpoint_key_isValid;
}

QString OAIEndpointKeysDTO::getSecondaryEndpointKey() const {
    return m_secondary_endpoint_key;
}
void OAIEndpointKeysDTO::setSecondaryEndpointKey(const QString &secondary_endpoint_key) {
    m_secondary_endpoint_key = secondary_endpoint_key;
    m_secondary_endpoint_key_isSet = true;
}

bool OAIEndpointKeysDTO::is_secondary_endpoint_key_Set() const{
    return m_secondary_endpoint_key_isSet;
}

bool OAIEndpointKeysDTO::is_secondary_endpoint_key_Valid() const{
    return m_secondary_endpoint_key_isValid;
}

bool OAIEndpointKeysDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_installed_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_stable_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_endpoint_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_endpoint_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointKeysDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
