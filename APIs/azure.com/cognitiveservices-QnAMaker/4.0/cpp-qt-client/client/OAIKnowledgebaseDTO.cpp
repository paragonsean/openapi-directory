/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKnowledgebaseDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKnowledgebaseDTO::OAIKnowledgebaseDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKnowledgebaseDTO::OAIKnowledgebaseDTO() {
    this->initializeModel();
}

OAIKnowledgebaseDTO::~OAIKnowledgebaseDTO() {}

void OAIKnowledgebaseDTO::initializeModel() {

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_accessed_timestamp_isSet = false;
    m_last_accessed_timestamp_isValid = false;

    m_last_changed_timestamp_isSet = false;
    m_last_changed_timestamp_isValid = false;

    m_last_published_timestamp_isSet = false;
    m_last_published_timestamp_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIKnowledgebaseDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKnowledgebaseDTO::fromJsonObject(QJsonObject json) {

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_accessed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_accessed_timestamp, json[QString("lastAccessedTimestamp")]);
    m_last_accessed_timestamp_isSet = !json[QString("lastAccessedTimestamp")].isNull() && m_last_accessed_timestamp_isValid;

    m_last_changed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_changed_timestamp, json[QString("lastChangedTimestamp")]);
    m_last_changed_timestamp_isSet = !json[QString("lastChangedTimestamp")].isNull() && m_last_changed_timestamp_isValid;

    m_last_published_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_published_timestamp, json[QString("lastPublishedTimestamp")]);
    m_last_published_timestamp_isSet = !json[QString("lastPublishedTimestamp")].isNull() && m_last_published_timestamp_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIKnowledgebaseDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKnowledgebaseDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_accessed_timestamp_isSet) {
        obj.insert(QString("lastAccessedTimestamp"), ::OpenAPI::toJsonValue(m_last_accessed_timestamp));
    }
    if (m_last_changed_timestamp_isSet) {
        obj.insert(QString("lastChangedTimestamp"), ::OpenAPI::toJsonValue(m_last_changed_timestamp));
    }
    if (m_last_published_timestamp_isSet) {
        obj.insert(QString("lastPublishedTimestamp"), ::OpenAPI::toJsonValue(m_last_published_timestamp));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIKnowledgebaseDTO::getHostName() const {
    return m_host_name;
}
void OAIKnowledgebaseDTO::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIKnowledgebaseDTO::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIKnowledgebaseDTO::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAIKnowledgebaseDTO::getId() const {
    return m_id;
}
void OAIKnowledgebaseDTO::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIKnowledgebaseDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIKnowledgebaseDTO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIKnowledgebaseDTO::getLastAccessedTimestamp() const {
    return m_last_accessed_timestamp;
}
void OAIKnowledgebaseDTO::setLastAccessedTimestamp(const QString &last_accessed_timestamp) {
    m_last_accessed_timestamp = last_accessed_timestamp;
    m_last_accessed_timestamp_isSet = true;
}

bool OAIKnowledgebaseDTO::is_last_accessed_timestamp_Set() const{
    return m_last_accessed_timestamp_isSet;
}

bool OAIKnowledgebaseDTO::is_last_accessed_timestamp_Valid() const{
    return m_last_accessed_timestamp_isValid;
}

QString OAIKnowledgebaseDTO::getLastChangedTimestamp() const {
    return m_last_changed_timestamp;
}
void OAIKnowledgebaseDTO::setLastChangedTimestamp(const QString &last_changed_timestamp) {
    m_last_changed_timestamp = last_changed_timestamp;
    m_last_changed_timestamp_isSet = true;
}

bool OAIKnowledgebaseDTO::is_last_changed_timestamp_Set() const{
    return m_last_changed_timestamp_isSet;
}

bool OAIKnowledgebaseDTO::is_last_changed_timestamp_Valid() const{
    return m_last_changed_timestamp_isValid;
}

QString OAIKnowledgebaseDTO::getLastPublishedTimestamp() const {
    return m_last_published_timestamp;
}
void OAIKnowledgebaseDTO::setLastPublishedTimestamp(const QString &last_published_timestamp) {
    m_last_published_timestamp = last_published_timestamp;
    m_last_published_timestamp_isSet = true;
}

bool OAIKnowledgebaseDTO::is_last_published_timestamp_Set() const{
    return m_last_published_timestamp_isSet;
}

bool OAIKnowledgebaseDTO::is_last_published_timestamp_Valid() const{
    return m_last_published_timestamp_isValid;
}

QString OAIKnowledgebaseDTO::getName() const {
    return m_name;
}
void OAIKnowledgebaseDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIKnowledgebaseDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIKnowledgebaseDTO::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIKnowledgebaseDTO::getSources() const {
    return m_sources;
}
void OAIKnowledgebaseDTO::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIKnowledgebaseDTO::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIKnowledgebaseDTO::is_sources_Valid() const{
    return m_sources_isValid;
}

QList<QString> OAIKnowledgebaseDTO::getUrls() const {
    return m_urls;
}
void OAIKnowledgebaseDTO::setUrls(const QList<QString> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIKnowledgebaseDTO::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIKnowledgebaseDTO::is_urls_Valid() const{
    return m_urls_isValid;
}

QString OAIKnowledgebaseDTO::getUserId() const {
    return m_user_id;
}
void OAIKnowledgebaseDTO::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIKnowledgebaseDTO::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIKnowledgebaseDTO::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIKnowledgebaseDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_accessed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_changed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_published_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKnowledgebaseDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
