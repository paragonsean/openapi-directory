/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIKnowledgebasesApi_H
#define OAI_OAIKnowledgebasesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateKbDTO.h"
#include "OAIErrorResponse.h"
#include "OAIKnowledgebaseDTO.h"
#include "OAIKnowledgebasesDTO.h"
#include "OAIOperation.h"
#include "OAIQnADocumentsDTO.h"
#include "OAIReplaceKbDTO.h"
#include "OAIUpdateKbOperationDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIKnowledgebasesApi : public QObject {
    Q_OBJECT

public:
    OAIKnowledgebasesApi(const int timeOut = 0);
    ~OAIKnowledgebasesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  create_kb_payload OAICreateKbDTO [required]
    */
    virtual void knowledgebaseCreate(const OAICreateKbDTO &create_kb_payload);

    /**
    * @param[in]  kb_id QString [required]
    */
    virtual void knowledgebaseDelete(const QString &kb_id);

    /**
    * @param[in]  kb_id QString [required]
    * @param[in]  environment QString [required]
    */
    virtual void knowledgebaseDownload(const QString &kb_id, const QString &environment);

    /**
    * @param[in]  kb_id QString [required]
    */
    virtual void knowledgebaseGetDetails(const QString &kb_id);


    virtual void knowledgebaseListAll();

    /**
    * @param[in]  kb_id QString [required]
    */
    virtual void knowledgebasePublish(const QString &kb_id);

    /**
    * @param[in]  kb_id QString [required]
    * @param[in]  replace_kb OAIReplaceKbDTO [required]
    */
    virtual void knowledgebaseReplace(const QString &kb_id, const OAIReplaceKbDTO &replace_kb);

    /**
    * @param[in]  kb_id QString [required]
    * @param[in]  update_kb OAIUpdateKbOperationDTO [required]
    */
    virtual void knowledgebaseUpdate(const QString &kb_id, const OAIUpdateKbOperationDTO &update_kb);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void knowledgebaseCreateCallback(OAIHttpRequestWorker *worker);
    void knowledgebaseDeleteCallback(OAIHttpRequestWorker *worker);
    void knowledgebaseDownloadCallback(OAIHttpRequestWorker *worker);
    void knowledgebaseGetDetailsCallback(OAIHttpRequestWorker *worker);
    void knowledgebaseListAllCallback(OAIHttpRequestWorker *worker);
    void knowledgebasePublishCallback(OAIHttpRequestWorker *worker);
    void knowledgebaseReplaceCallback(OAIHttpRequestWorker *worker);
    void knowledgebaseUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void knowledgebaseCreateSignal(OAIOperation summary);
    void knowledgebaseDeleteSignal();
    void knowledgebaseDownloadSignal(OAIQnADocumentsDTO summary);
    void knowledgebaseGetDetailsSignal(OAIKnowledgebaseDTO summary);
    void knowledgebaseListAllSignal(OAIKnowledgebasesDTO summary);
    void knowledgebasePublishSignal();
    void knowledgebaseReplaceSignal();
    void knowledgebaseUpdateSignal(OAIOperation summary);


    void knowledgebaseCreateSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void knowledgebaseDeleteSignalFull(OAIHttpRequestWorker *worker);
    void knowledgebaseDownloadSignalFull(OAIHttpRequestWorker *worker, OAIQnADocumentsDTO summary);
    void knowledgebaseGetDetailsSignalFull(OAIHttpRequestWorker *worker, OAIKnowledgebaseDTO summary);
    void knowledgebaseListAllSignalFull(OAIHttpRequestWorker *worker, OAIKnowledgebasesDTO summary);
    void knowledgebasePublishSignalFull(OAIHttpRequestWorker *worker);
    void knowledgebaseReplaceSignalFull(OAIHttpRequestWorker *worker);
    void knowledgebaseUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);

    Q_DECL_DEPRECATED_X("Use knowledgebaseCreateSignalError() instead")
    void knowledgebaseCreateSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseCreateSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseDeleteSignalError() instead")
    void knowledgebaseDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseDownloadSignalError() instead")
    void knowledgebaseDownloadSignalE(OAIQnADocumentsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseDownloadSignalError(OAIQnADocumentsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseGetDetailsSignalError() instead")
    void knowledgebaseGetDetailsSignalE(OAIKnowledgebaseDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseGetDetailsSignalError(OAIKnowledgebaseDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseListAllSignalError() instead")
    void knowledgebaseListAllSignalE(OAIKnowledgebasesDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseListAllSignalError(OAIKnowledgebasesDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebasePublishSignalError() instead")
    void knowledgebasePublishSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebasePublishSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseReplaceSignalError() instead")
    void knowledgebaseReplaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseReplaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseUpdateSignalError() instead")
    void knowledgebaseUpdateSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseUpdateSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use knowledgebaseCreateSignalErrorFull() instead")
    void knowledgebaseCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseDeleteSignalErrorFull() instead")
    void knowledgebaseDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseDownloadSignalErrorFull() instead")
    void knowledgebaseDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseGetDetailsSignalErrorFull() instead")
    void knowledgebaseGetDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseGetDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseListAllSignalErrorFull() instead")
    void knowledgebaseListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebasePublishSignalErrorFull() instead")
    void knowledgebasePublishSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebasePublishSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseReplaceSignalErrorFull() instead")
    void knowledgebaseReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use knowledgebaseUpdateSignalErrorFull() instead")
    void knowledgebaseUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void knowledgebaseUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
