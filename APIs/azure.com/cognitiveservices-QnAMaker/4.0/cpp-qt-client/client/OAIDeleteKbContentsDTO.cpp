/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteKbContentsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteKbContentsDTO::OAIDeleteKbContentsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteKbContentsDTO::OAIDeleteKbContentsDTO() {
    this->initializeModel();
}

OAIDeleteKbContentsDTO::~OAIDeleteKbContentsDTO() {}

void OAIDeleteKbContentsDTO::initializeModel() {

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIDeleteKbContentsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteKbContentsDTO::fromJsonObject(QJsonObject json) {

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIDeleteKbContentsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteKbContentsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_ids.size() > 0) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QList<qint32> OAIDeleteKbContentsDTO::getIds() const {
    return m_ids;
}
void OAIDeleteKbContentsDTO::setIds(const QList<qint32> &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIDeleteKbContentsDTO::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIDeleteKbContentsDTO::is_ids_Valid() const{
    return m_ids_isValid;
}

QList<QString> OAIDeleteKbContentsDTO::getSources() const {
    return m_sources;
}
void OAIDeleteKbContentsDTO::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIDeleteKbContentsDTO::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIDeleteKbContentsDTO::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIDeleteKbContentsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteKbContentsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
