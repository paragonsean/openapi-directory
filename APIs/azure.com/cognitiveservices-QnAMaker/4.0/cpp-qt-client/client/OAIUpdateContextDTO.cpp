/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateContextDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateContextDTO::OAIUpdateContextDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateContextDTO::OAIUpdateContextDTO() {
    this->initializeModel();
}

OAIUpdateContextDTO::~OAIUpdateContextDTO() {}

void OAIUpdateContextDTO::initializeModel() {

    m_is_context_only_isSet = false;
    m_is_context_only_isValid = false;

    m_prompts_to_add_isSet = false;
    m_prompts_to_add_isValid = false;

    m_prompts_to_delete_isSet = false;
    m_prompts_to_delete_isValid = false;
}

void OAIUpdateContextDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateContextDTO::fromJsonObject(QJsonObject json) {

    m_is_context_only_isValid = ::OpenAPI::fromJsonValue(m_is_context_only, json[QString("isContextOnly")]);
    m_is_context_only_isSet = !json[QString("isContextOnly")].isNull() && m_is_context_only_isValid;

    m_prompts_to_add_isValid = ::OpenAPI::fromJsonValue(m_prompts_to_add, json[QString("promptsToAdd")]);
    m_prompts_to_add_isSet = !json[QString("promptsToAdd")].isNull() && m_prompts_to_add_isValid;

    m_prompts_to_delete_isValid = ::OpenAPI::fromJsonValue(m_prompts_to_delete, json[QString("promptsToDelete")]);
    m_prompts_to_delete_isSet = !json[QString("promptsToDelete")].isNull() && m_prompts_to_delete_isValid;
}

QString OAIUpdateContextDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateContextDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_is_context_only_isSet) {
        obj.insert(QString("isContextOnly"), ::OpenAPI::toJsonValue(m_is_context_only));
    }
    if (m_prompts_to_add.size() > 0) {
        obj.insert(QString("promptsToAdd"), ::OpenAPI::toJsonValue(m_prompts_to_add));
    }
    if (m_prompts_to_delete.size() > 0) {
        obj.insert(QString("promptsToDelete"), ::OpenAPI::toJsonValue(m_prompts_to_delete));
    }
    return obj;
}

bool OAIUpdateContextDTO::isIsContextOnly() const {
    return m_is_context_only;
}
void OAIUpdateContextDTO::setIsContextOnly(const bool &is_context_only) {
    m_is_context_only = is_context_only;
    m_is_context_only_isSet = true;
}

bool OAIUpdateContextDTO::is_is_context_only_Set() const{
    return m_is_context_only_isSet;
}

bool OAIUpdateContextDTO::is_is_context_only_Valid() const{
    return m_is_context_only_isValid;
}

QList<OAIPromptDTO> OAIUpdateContextDTO::getPromptsToAdd() const {
    return m_prompts_to_add;
}
void OAIUpdateContextDTO::setPromptsToAdd(const QList<OAIPromptDTO> &prompts_to_add) {
    m_prompts_to_add = prompts_to_add;
    m_prompts_to_add_isSet = true;
}

bool OAIUpdateContextDTO::is_prompts_to_add_Set() const{
    return m_prompts_to_add_isSet;
}

bool OAIUpdateContextDTO::is_prompts_to_add_Valid() const{
    return m_prompts_to_add_isValid;
}

QList<qint32> OAIUpdateContextDTO::getPromptsToDelete() const {
    return m_prompts_to_delete;
}
void OAIUpdateContextDTO::setPromptsToDelete(const QList<qint32> &prompts_to_delete) {
    m_prompts_to_delete = prompts_to_delete;
    m_prompts_to_delete_isSet = true;
}

bool OAIUpdateContextDTO::is_prompts_to_delete_Set() const{
    return m_prompts_to_delete_isSet;
}

bool OAIUpdateContextDTO::is_prompts_to_delete_Valid() const{
    return m_prompts_to_delete_isValid;
}

bool OAIUpdateContextDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_context_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompts_to_add.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompts_to_delete.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateContextDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
