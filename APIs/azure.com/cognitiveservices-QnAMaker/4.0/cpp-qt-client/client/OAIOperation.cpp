/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperation::OAIOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperation::OAIOperation() {
    this->initializeModel();
}

OAIOperation::~OAIOperation() {}

void OAIOperation::initializeModel() {

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_error_response_isSet = false;
    m_error_response_isValid = false;

    m_last_action_timestamp_isSet = false;
    m_last_action_timestamp_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_operation_state_isSet = false;
    m_operation_state_isValid = false;

    m_resource_location_isSet = false;
    m_resource_location_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperation::fromJsonObject(QJsonObject json) {

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("createdTimestamp")]);
    m_created_timestamp_isSet = !json[QString("createdTimestamp")].isNull() && m_created_timestamp_isValid;

    m_error_response_isValid = ::OpenAPI::fromJsonValue(m_error_response, json[QString("errorResponse")]);
    m_error_response_isSet = !json[QString("errorResponse")].isNull() && m_error_response_isValid;

    m_last_action_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_action_timestamp, json[QString("lastActionTimestamp")]);
    m_last_action_timestamp_isSet = !json[QString("lastActionTimestamp")].isNull() && m_last_action_timestamp_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_operation_state_isValid = ::OpenAPI::fromJsonValue(m_operation_state, json[QString("operationState")]);
    m_operation_state_isSet = !json[QString("operationState")].isNull() && m_operation_state_isValid;

    m_resource_location_isValid = ::OpenAPI::fromJsonValue(m_resource_location, json[QString("resourceLocation")]);
    m_resource_location_isSet = !json[QString("resourceLocation")].isNull() && m_resource_location_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_created_timestamp_isSet) {
        obj.insert(QString("createdTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_error_response.isSet()) {
        obj.insert(QString("errorResponse"), ::OpenAPI::toJsonValue(m_error_response));
    }
    if (m_last_action_timestamp_isSet) {
        obj.insert(QString("lastActionTimestamp"), ::OpenAPI::toJsonValue(m_last_action_timestamp));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_operation_state.isSet()) {
        obj.insert(QString("operationState"), ::OpenAPI::toJsonValue(m_operation_state));
    }
    if (m_resource_location_isSet) {
        obj.insert(QString("resourceLocation"), ::OpenAPI::toJsonValue(m_resource_location));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIOperation::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIOperation::setCreatedTimestamp(const QString &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIOperation::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIOperation::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

OAIErrorResponse OAIOperation::getErrorResponse() const {
    return m_error_response;
}
void OAIOperation::setErrorResponse(const OAIErrorResponse &error_response) {
    m_error_response = error_response;
    m_error_response_isSet = true;
}

bool OAIOperation::is_error_response_Set() const{
    return m_error_response_isSet;
}

bool OAIOperation::is_error_response_Valid() const{
    return m_error_response_isValid;
}

QString OAIOperation::getLastActionTimestamp() const {
    return m_last_action_timestamp;
}
void OAIOperation::setLastActionTimestamp(const QString &last_action_timestamp) {
    m_last_action_timestamp = last_action_timestamp;
    m_last_action_timestamp_isSet = true;
}

bool OAIOperation::is_last_action_timestamp_Set() const{
    return m_last_action_timestamp_isSet;
}

bool OAIOperation::is_last_action_timestamp_Valid() const{
    return m_last_action_timestamp_isValid;
}

QString OAIOperation::getOperationId() const {
    return m_operation_id;
}
void OAIOperation::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIOperation::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIOperation::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

OAIOperationState OAIOperation::getOperationState() const {
    return m_operation_state;
}
void OAIOperation::setOperationState(const OAIOperationState &operation_state) {
    m_operation_state = operation_state;
    m_operation_state_isSet = true;
}

bool OAIOperation::is_operation_state_Set() const{
    return m_operation_state_isSet;
}

bool OAIOperation::is_operation_state_Valid() const{
    return m_operation_state_isValid;
}

QString OAIOperation::getResourceLocation() const {
    return m_resource_location;
}
void OAIOperation::setResourceLocation(const QString &resource_location) {
    m_resource_location = resource_location;
    m_resource_location_isSet = true;
}

bool OAIOperation::is_resource_location_Set() const{
    return m_resource_location_isSet;
}

bool OAIOperation::is_resource_location_Valid() const{
    return m_resource_location_isValid;
}

QString OAIOperation::getUserId() const {
    return m_user_id;
}
void OAIOperation::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIOperation::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIOperation::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_action_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
