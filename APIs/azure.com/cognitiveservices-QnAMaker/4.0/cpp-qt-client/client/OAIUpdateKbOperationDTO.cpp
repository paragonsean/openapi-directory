/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateKbOperationDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateKbOperationDTO::OAIUpdateKbOperationDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateKbOperationDTO::OAIUpdateKbOperationDTO() {
    this->initializeModel();
}

OAIUpdateKbOperationDTO::~OAIUpdateKbOperationDTO() {}

void OAIUpdateKbOperationDTO::initializeModel() {

    m_add_isSet = false;
    m_add_isValid = false;

    m_default_answer_used_for_extraction_isSet = false;
    m_default_answer_used_for_extraction_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_enable_hierarchical_extraction_isSet = false;
    m_enable_hierarchical_extraction_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;
}

void OAIUpdateKbOperationDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateKbOperationDTO::fromJsonObject(QJsonObject json) {

    m_add_isValid = ::OpenAPI::fromJsonValue(m_add, json[QString("add")]);
    m_add_isSet = !json[QString("add")].isNull() && m_add_isValid;

    m_default_answer_used_for_extraction_isValid = ::OpenAPI::fromJsonValue(m_default_answer_used_for_extraction, json[QString("defaultAnswerUsedForExtraction")]);
    m_default_answer_used_for_extraction_isSet = !json[QString("defaultAnswerUsedForExtraction")].isNull() && m_default_answer_used_for_extraction_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_enable_hierarchical_extraction_isValid = ::OpenAPI::fromJsonValue(m_enable_hierarchical_extraction, json[QString("enableHierarchicalExtraction")]);
    m_enable_hierarchical_extraction_isSet = !json[QString("enableHierarchicalExtraction")].isNull() && m_enable_hierarchical_extraction_isValid;

    m_update_isValid = ::OpenAPI::fromJsonValue(m_update, json[QString("update")]);
    m_update_isSet = !json[QString("update")].isNull() && m_update_isValid;
}

QString OAIUpdateKbOperationDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateKbOperationDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_add.isSet()) {
        obj.insert(QString("add"), ::OpenAPI::toJsonValue(m_add));
    }
    if (m_default_answer_used_for_extraction_isSet) {
        obj.insert(QString("defaultAnswerUsedForExtraction"), ::OpenAPI::toJsonValue(m_default_answer_used_for_extraction));
    }
    if (m_r_delete.isSet()) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_enable_hierarchical_extraction_isSet) {
        obj.insert(QString("enableHierarchicalExtraction"), ::OpenAPI::toJsonValue(m_enable_hierarchical_extraction));
    }
    if (m_update.isSet()) {
        obj.insert(QString("update"), ::OpenAPI::toJsonValue(m_update));
    }
    return obj;
}

OAICreateKbInputDTO OAIUpdateKbOperationDTO::getAdd() const {
    return m_add;
}
void OAIUpdateKbOperationDTO::setAdd(const OAICreateKbInputDTO &add) {
    m_add = add;
    m_add_isSet = true;
}

bool OAIUpdateKbOperationDTO::is_add_Set() const{
    return m_add_isSet;
}

bool OAIUpdateKbOperationDTO::is_add_Valid() const{
    return m_add_isValid;
}

QString OAIUpdateKbOperationDTO::getDefaultAnswerUsedForExtraction() const {
    return m_default_answer_used_for_extraction;
}
void OAIUpdateKbOperationDTO::setDefaultAnswerUsedForExtraction(const QString &default_answer_used_for_extraction) {
    m_default_answer_used_for_extraction = default_answer_used_for_extraction;
    m_default_answer_used_for_extraction_isSet = true;
}

bool OAIUpdateKbOperationDTO::is_default_answer_used_for_extraction_Set() const{
    return m_default_answer_used_for_extraction_isSet;
}

bool OAIUpdateKbOperationDTO::is_default_answer_used_for_extraction_Valid() const{
    return m_default_answer_used_for_extraction_isValid;
}

OAIDeleteKbContentsDTO OAIUpdateKbOperationDTO::getRDelete() const {
    return m_r_delete;
}
void OAIUpdateKbOperationDTO::setRDelete(const OAIDeleteKbContentsDTO &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAIUpdateKbOperationDTO::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAIUpdateKbOperationDTO::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

bool OAIUpdateKbOperationDTO::isEnableHierarchicalExtraction() const {
    return m_enable_hierarchical_extraction;
}
void OAIUpdateKbOperationDTO::setEnableHierarchicalExtraction(const bool &enable_hierarchical_extraction) {
    m_enable_hierarchical_extraction = enable_hierarchical_extraction;
    m_enable_hierarchical_extraction_isSet = true;
}

bool OAIUpdateKbOperationDTO::is_enable_hierarchical_extraction_Set() const{
    return m_enable_hierarchical_extraction_isSet;
}

bool OAIUpdateKbOperationDTO::is_enable_hierarchical_extraction_Valid() const{
    return m_enable_hierarchical_extraction_isValid;
}

OAIUpdateKbContentsDTO OAIUpdateKbOperationDTO::getUpdate() const {
    return m_update;
}
void OAIUpdateKbOperationDTO::setUpdate(const OAIUpdateKbContentsDTO &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAIUpdateKbOperationDTO::is_update_Set() const{
    return m_update_isSet;
}

bool OAIUpdateKbOperationDTO::is_update_Valid() const{
    return m_update_isValid;
}

bool OAIUpdateKbOperationDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_answer_used_for_extraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_hierarchical_extraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateKbOperationDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
