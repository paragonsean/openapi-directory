/**
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorCode::OAIErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorCode::OAIErrorCode() {
    this->initializeModel();
}

OAIErrorCode::~OAIErrorCode() {}

void OAIErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BadArgument", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::BADARGUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Forbidden", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::FORBIDDEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::NOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KbNotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::KBNOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unauthorized", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNAUTHORIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unspecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::UNSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EndpointKeysError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::ENDPOINTKEYSERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QuotaExceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::QUOTAEXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QnaRuntimeError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::QNARUNTIMEERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SKULimitExceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SKULIMITEXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OperationNotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::OPERATIONNOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SERVICEERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ValidationFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::VALIDATIONFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExtractionFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::EXTRACTIONFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIErrorCode::BADARGUMENT:
            val = "BadArgument";
            break;
        case eOAIErrorCode::FORBIDDEN:
            val = "Forbidden";
            break;
        case eOAIErrorCode::NOTFOUND:
            val = "NotFound";
            break;
        case eOAIErrorCode::KBNOTFOUND:
            val = "KbNotFound";
            break;
        case eOAIErrorCode::UNAUTHORIZED:
            val = "Unauthorized";
            break;
        case eOAIErrorCode::UNSPECIFIED:
            val = "Unspecified";
            break;
        case eOAIErrorCode::ENDPOINTKEYSERROR:
            val = "EndpointKeysError";
            break;
        case eOAIErrorCode::QUOTAEXCEEDED:
            val = "QuotaExceeded";
            break;
        case eOAIErrorCode::QNARUNTIMEERROR:
            val = "QnaRuntimeError";
            break;
        case eOAIErrorCode::SKULIMITEXCEEDED:
            val = "SKULimitExceeded";
            break;
        case eOAIErrorCode::OPERATIONNOTFOUND:
            val = "OperationNotFound";
            break;
        case eOAIErrorCode::SERVICEERROR:
            val = "ServiceError";
            break;
        case eOAIErrorCode::VALIDATIONFAILURE:
            val = "ValidationFailure";
            break;
        case eOAIErrorCode::EXTRACTIONFAILURE:
            val = "ExtractionFailure";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIErrorCode::eOAIErrorCode OAIErrorCode::getValue() const {
    return m_value;
}

void OAIErrorCode::setValue(const OAIErrorCode::eOAIErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
