/*
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateKbDTO;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.KnowledgebaseDTO;
import org.openapitools.client.model.KnowledgebasesDTO;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.QnADocumentsDTO;
import org.openapitools.client.model.ReplaceKbDTO;
import org.openapitools.client.model.UpdateKbOperationDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KnowledgebasesApi
 */
@Disabled
public class KnowledgebasesApiTest {

    private final KnowledgebasesApi api = new KnowledgebasesApi();

    /**
     * Asynchronous operation to create a new knowledgebase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knowledgebaseCreateTest() throws ApiException {
        CreateKbDTO createKbPayload = null;
        Operation response = api.knowledgebaseCreate(createKbPayload);
        // TODO: test validations
    }

    /**
     * Deletes the knowledgebase and all its data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knowledgebaseDeleteTest() throws ApiException {
        String kbId = null;
        api.knowledgebaseDelete(kbId);
        // TODO: test validations
    }

    /**
     * Download the knowledgebase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knowledgebaseDownloadTest() throws ApiException {
        String kbId = null;
        String environment = null;
        QnADocumentsDTO response = api.knowledgebaseDownload(kbId, environment);
        // TODO: test validations
    }

    /**
     * Gets details of a specific knowledgebase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knowledgebaseGetDetailsTest() throws ApiException {
        String kbId = null;
        KnowledgebaseDTO response = api.knowledgebaseGetDetails(kbId);
        // TODO: test validations
    }

    /**
     * Gets all knowledgebases for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knowledgebaseListAllTest() throws ApiException {
        KnowledgebasesDTO response = api.knowledgebaseListAll();
        // TODO: test validations
    }

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knowledgebasePublishTest() throws ApiException {
        String kbId = null;
        api.knowledgebasePublish(kbId);
        // TODO: test validations
    }

    /**
     * Replace knowledgebase contents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knowledgebaseReplaceTest() throws ApiException {
        String kbId = null;
        ReplaceKbDTO replaceKb = null;
        api.knowledgebaseReplace(kbId, replaceKb);
        // TODO: test validations
    }

    /**
     * Asynchronous operation to modify a knowledgebase.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void knowledgebaseUpdateTest() throws ApiException {
        String kbId = null;
        UpdateKbOperationDTO updateKb = null;
        Operation response = api.knowledgebaseUpdate(kbId, updateKb);
        // TODO: test validations
    }

}
