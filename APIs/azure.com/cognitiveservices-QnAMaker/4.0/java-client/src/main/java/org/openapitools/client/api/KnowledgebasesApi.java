/*
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateKbDTO;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.KnowledgebaseDTO;
import org.openapitools.client.model.KnowledgebasesDTO;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.QnADocumentsDTO;
import org.openapitools.client.model.ReplaceKbDTO;
import org.openapitools.client.model.UpdateKbOperationDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KnowledgebasesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KnowledgebasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KnowledgebasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for knowledgebaseCreate
     * @param createKbPayload Post body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Details of the asynchronous operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseCreateCall(CreateKbDTO createKbPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createKbPayload;

        // create path and map variables
        String localVarPath = "/knowledgebases/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knowledgebaseCreateValidateBeforeCall(CreateKbDTO createKbPayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createKbPayload' is set
        if (createKbPayload == null) {
            throw new ApiException("Missing the required parameter 'createKbPayload' when calling knowledgebaseCreate(Async)");
        }

        return knowledgebaseCreateCall(createKbPayload, _callback);

    }

    /**
     * Asynchronous operation to create a new knowledgebase.
     * 
     * @param createKbPayload Post body of the request. (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Details of the asynchronous operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public Operation knowledgebaseCreate(CreateKbDTO createKbPayload) throws ApiException {
        ApiResponse<Operation> localVarResp = knowledgebaseCreateWithHttpInfo(createKbPayload);
        return localVarResp.getData();
    }

    /**
     * Asynchronous operation to create a new knowledgebase.
     * 
     * @param createKbPayload Post body of the request. (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Details of the asynchronous operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> knowledgebaseCreateWithHttpInfo(CreateKbDTO createKbPayload) throws ApiException {
        okhttp3.Call localVarCall = knowledgebaseCreateValidateBeforeCall(createKbPayload, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Asynchronous operation to create a new knowledgebase. (asynchronously)
     * 
     * @param createKbPayload Post body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Details of the asynchronous operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseCreateAsync(CreateKbDTO createKbPayload, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = knowledgebaseCreateValidateBeforeCall(createKbPayload, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for knowledgebaseDelete
     * @param kbId Knowledgebase id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseDeleteCall(String kbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledgebases/{kbId}"
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knowledgebaseDeleteValidateBeforeCall(String kbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling knowledgebaseDelete(Async)");
        }

        return knowledgebaseDeleteCall(kbId, _callback);

    }

    /**
     * Deletes the knowledgebase and all its data.
     * 
     * @param kbId Knowledgebase id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public void knowledgebaseDelete(String kbId) throws ApiException {
        knowledgebaseDeleteWithHttpInfo(kbId);
    }

    /**
     * Deletes the knowledgebase and all its data.
     * 
     * @param kbId Knowledgebase id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> knowledgebaseDeleteWithHttpInfo(String kbId) throws ApiException {
        okhttp3.Call localVarCall = knowledgebaseDeleteValidateBeforeCall(kbId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the knowledgebase and all its data. (asynchronously)
     * 
     * @param kbId Knowledgebase id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseDeleteAsync(String kbId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = knowledgebaseDeleteValidateBeforeCall(kbId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for knowledgebaseDownload
     * @param kbId Knowledgebase id. (required)
     * @param environment Specifies whether environment is Test or Prod. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of all Q-A in the knowledgebase. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseDownloadCall(String kbId, String environment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledgebases/{kbId}/{environment}/qna"
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()))
            .replace("{" + "environment" + "}", localVarApiClient.escapeString(environment.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knowledgebaseDownloadValidateBeforeCall(String kbId, String environment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling knowledgebaseDownload(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling knowledgebaseDownload(Async)");
        }

        return knowledgebaseDownloadCall(kbId, environment, _callback);

    }

    /**
     * Download the knowledgebase.
     * 
     * @param kbId Knowledgebase id. (required)
     * @param environment Specifies whether environment is Test or Prod. (required)
     * @return QnADocumentsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of all Q-A in the knowledgebase. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public QnADocumentsDTO knowledgebaseDownload(String kbId, String environment) throws ApiException {
        ApiResponse<QnADocumentsDTO> localVarResp = knowledgebaseDownloadWithHttpInfo(kbId, environment);
        return localVarResp.getData();
    }

    /**
     * Download the knowledgebase.
     * 
     * @param kbId Knowledgebase id. (required)
     * @param environment Specifies whether environment is Test or Prod. (required)
     * @return ApiResponse&lt;QnADocumentsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of all Q-A in the knowledgebase. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QnADocumentsDTO> knowledgebaseDownloadWithHttpInfo(String kbId, String environment) throws ApiException {
        okhttp3.Call localVarCall = knowledgebaseDownloadValidateBeforeCall(kbId, environment, null);
        Type localVarReturnType = new TypeToken<QnADocumentsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the knowledgebase. (asynchronously)
     * 
     * @param kbId Knowledgebase id. (required)
     * @param environment Specifies whether environment is Test or Prod. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of all Q-A in the knowledgebase. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseDownloadAsync(String kbId, String environment, final ApiCallback<QnADocumentsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = knowledgebaseDownloadValidateBeforeCall(kbId, environment, _callback);
        Type localVarReturnType = new TypeToken<QnADocumentsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for knowledgebaseGetDetails
     * @param kbId Knowledgebase id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the knowledgebase. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseGetDetailsCall(String kbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledgebases/{kbId}"
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knowledgebaseGetDetailsValidateBeforeCall(String kbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling knowledgebaseGetDetails(Async)");
        }

        return knowledgebaseGetDetailsCall(kbId, _callback);

    }

    /**
     * Gets details of a specific knowledgebase.
     * 
     * @param kbId Knowledgebase id. (required)
     * @return KnowledgebaseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the knowledgebase. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public KnowledgebaseDTO knowledgebaseGetDetails(String kbId) throws ApiException {
        ApiResponse<KnowledgebaseDTO> localVarResp = knowledgebaseGetDetailsWithHttpInfo(kbId);
        return localVarResp.getData();
    }

    /**
     * Gets details of a specific knowledgebase.
     * 
     * @param kbId Knowledgebase id. (required)
     * @return ApiResponse&lt;KnowledgebaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the knowledgebase. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KnowledgebaseDTO> knowledgebaseGetDetailsWithHttpInfo(String kbId) throws ApiException {
        okhttp3.Call localVarCall = knowledgebaseGetDetailsValidateBeforeCall(kbId, null);
        Type localVarReturnType = new TypeToken<KnowledgebaseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets details of a specific knowledgebase. (asynchronously)
     * 
     * @param kbId Knowledgebase id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details of the knowledgebase. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseGetDetailsAsync(String kbId, final ApiCallback<KnowledgebaseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = knowledgebaseGetDetailsValidateBeforeCall(kbId, _callback);
        Type localVarReturnType = new TypeToken<KnowledgebaseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for knowledgebaseListAll
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of knowledgebases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseListAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledgebases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knowledgebaseListAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return knowledgebaseListAllCall(_callback);

    }

    /**
     * Gets all knowledgebases for a user.
     * 
     * @return KnowledgebasesDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of knowledgebases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public KnowledgebasesDTO knowledgebaseListAll() throws ApiException {
        ApiResponse<KnowledgebasesDTO> localVarResp = knowledgebaseListAllWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets all knowledgebases for a user.
     * 
     * @return ApiResponse&lt;KnowledgebasesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of knowledgebases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KnowledgebasesDTO> knowledgebaseListAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = knowledgebaseListAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KnowledgebasesDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all knowledgebases for a user. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of knowledgebases. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseListAllAsync(final ApiCallback<KnowledgebasesDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = knowledgebaseListAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KnowledgebasesDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for knowledgebasePublish
     * @param kbId Knowledgebase id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebasePublishCall(String kbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledgebases/{kbId}"
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knowledgebasePublishValidateBeforeCall(String kbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling knowledgebasePublish(Async)");
        }

        return knowledgebasePublishCall(kbId, _callback);

    }

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     * 
     * @param kbId Knowledgebase id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public void knowledgebasePublish(String kbId) throws ApiException {
        knowledgebasePublishWithHttpInfo(kbId);
    }

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index.
     * 
     * @param kbId Knowledgebase id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> knowledgebasePublishWithHttpInfo(String kbId) throws ApiException {
        okhttp3.Call localVarCall = knowledgebasePublishValidateBeforeCall(kbId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Publishes all changes in test index of a knowledgebase to its prod index. (asynchronously)
     * 
     * @param kbId Knowledgebase id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebasePublishAsync(String kbId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = knowledgebasePublishValidateBeforeCall(kbId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for knowledgebaseReplace
     * @param kbId Knowledgebase id. (required)
     * @param replaceKb An instance of ReplaceKbDTO which contains list of qnas to be uploaded (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseReplaceCall(String kbId, ReplaceKbDTO replaceKb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replaceKb;

        // create path and map variables
        String localVarPath = "/knowledgebases/{kbId}"
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knowledgebaseReplaceValidateBeforeCall(String kbId, ReplaceKbDTO replaceKb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling knowledgebaseReplace(Async)");
        }

        // verify the required parameter 'replaceKb' is set
        if (replaceKb == null) {
            throw new ApiException("Missing the required parameter 'replaceKb' when calling knowledgebaseReplace(Async)");
        }

        return knowledgebaseReplaceCall(kbId, replaceKb, _callback);

    }

    /**
     * Replace knowledgebase contents.
     * 
     * @param kbId Knowledgebase id. (required)
     * @param replaceKb An instance of ReplaceKbDTO which contains list of qnas to be uploaded (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public void knowledgebaseReplace(String kbId, ReplaceKbDTO replaceKb) throws ApiException {
        knowledgebaseReplaceWithHttpInfo(kbId, replaceKb);
    }

    /**
     * Replace knowledgebase contents.
     * 
     * @param kbId Knowledgebase id. (required)
     * @param replaceKb An instance of ReplaceKbDTO which contains list of qnas to be uploaded (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> knowledgebaseReplaceWithHttpInfo(String kbId, ReplaceKbDTO replaceKb) throws ApiException {
        okhttp3.Call localVarCall = knowledgebaseReplaceValidateBeforeCall(kbId, replaceKb, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Replace knowledgebase contents. (asynchronously)
     * 
     * @param kbId Knowledgebase id. (required)
     * @param replaceKb An instance of ReplaceKbDTO which contains list of qnas to be uploaded (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> HTTP 204 No content. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseReplaceAsync(String kbId, ReplaceKbDTO replaceKb, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = knowledgebaseReplaceValidateBeforeCall(kbId, replaceKb, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for knowledgebaseUpdate
     * @param kbId Knowledgebase id. (required)
     * @param updateKb Post body of the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Details of the asynchronous operation. </td><td>  * Location - Relative URI to the target location of the asynchronous operation. Client should poll this resource to get status of the operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseUpdateCall(String kbId, UpdateKbOperationDTO updateKb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateKb;

        // create path and map variables
        String localVarPath = "/knowledgebases/{kbId}"
            .replace("{" + "kbId" + "}", localVarApiClient.escapeString(kbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call knowledgebaseUpdateValidateBeforeCall(String kbId, UpdateKbOperationDTO updateKb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kbId' is set
        if (kbId == null) {
            throw new ApiException("Missing the required parameter 'kbId' when calling knowledgebaseUpdate(Async)");
        }

        // verify the required parameter 'updateKb' is set
        if (updateKb == null) {
            throw new ApiException("Missing the required parameter 'updateKb' when calling knowledgebaseUpdate(Async)");
        }

        return knowledgebaseUpdateCall(kbId, updateKb, _callback);

    }

    /**
     * Asynchronous operation to modify a knowledgebase.
     * 
     * @param kbId Knowledgebase id. (required)
     * @param updateKb Post body of the request. (required)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Details of the asynchronous operation. </td><td>  * Location - Relative URI to the target location of the asynchronous operation. Client should poll this resource to get status of the operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public Operation knowledgebaseUpdate(String kbId, UpdateKbOperationDTO updateKb) throws ApiException {
        ApiResponse<Operation> localVarResp = knowledgebaseUpdateWithHttpInfo(kbId, updateKb);
        return localVarResp.getData();
    }

    /**
     * Asynchronous operation to modify a knowledgebase.
     * 
     * @param kbId Knowledgebase id. (required)
     * @param updateKb Post body of the request. (required)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Details of the asynchronous operation. </td><td>  * Location - Relative URI to the target location of the asynchronous operation. Client should poll this resource to get status of the operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> knowledgebaseUpdateWithHttpInfo(String kbId, UpdateKbOperationDTO updateKb) throws ApiException {
        okhttp3.Call localVarCall = knowledgebaseUpdateValidateBeforeCall(kbId, updateKb, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Asynchronous operation to modify a knowledgebase. (asynchronously)
     * 
     * @param kbId Knowledgebase id. (required)
     * @param updateKb Post body of the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Details of the asynchronous operation. </td><td>  * Location - Relative URI to the target location of the asynchronous operation. Client should poll this resource to get status of the operation. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call knowledgebaseUpdateAsync(String kbId, UpdateKbOperationDTO updateKb, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = knowledgebaseUpdateValidateBeforeCall(kbId, updateKb, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
