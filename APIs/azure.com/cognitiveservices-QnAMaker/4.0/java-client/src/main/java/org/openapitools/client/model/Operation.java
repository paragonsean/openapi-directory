/*
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.OperationState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Record to track long running operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:06.344438-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Operation {
  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "createdTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private String createdTimestamp;

  public static final String SERIALIZED_NAME_ERROR_RESPONSE = "errorResponse";
  @SerializedName(SERIALIZED_NAME_ERROR_RESPONSE)
  private ErrorResponse errorResponse;

  public static final String SERIALIZED_NAME_LAST_ACTION_TIMESTAMP = "lastActionTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_ACTION_TIMESTAMP)
  private String lastActionTimestamp;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_OPERATION_STATE = "operationState";
  @SerializedName(SERIALIZED_NAME_OPERATION_STATE)
  private OperationState operationState;

  public static final String SERIALIZED_NAME_RESOURCE_LOCATION = "resourceLocation";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCATION)
  private String resourceLocation;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Operation() {
  }

  public Operation createdTimestamp(String createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Timestamp when the operation was created.
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public String getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(String createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public Operation errorResponse(ErrorResponse errorResponse) {
    this.errorResponse = errorResponse;
    return this;
  }

  /**
   * Get errorResponse
   * @return errorResponse
   */
  @javax.annotation.Nullable
  public ErrorResponse getErrorResponse() {
    return errorResponse;
  }

  public void setErrorResponse(ErrorResponse errorResponse) {
    this.errorResponse = errorResponse;
  }


  public Operation lastActionTimestamp(String lastActionTimestamp) {
    this.lastActionTimestamp = lastActionTimestamp;
    return this;
  }

  /**
   * Timestamp when the current state was entered.
   * @return lastActionTimestamp
   */
  @javax.annotation.Nullable
  public String getLastActionTimestamp() {
    return lastActionTimestamp;
  }

  public void setLastActionTimestamp(String lastActionTimestamp) {
    this.lastActionTimestamp = lastActionTimestamp;
  }


  public Operation operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * Operation Id.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public Operation operationState(OperationState operationState) {
    this.operationState = operationState;
    return this;
  }

  /**
   * Get operationState
   * @return operationState
   */
  @javax.annotation.Nullable
  public OperationState getOperationState() {
    return operationState;
  }

  public void setOperationState(OperationState operationState) {
    this.operationState = operationState;
  }


  public Operation resourceLocation(String resourceLocation) {
    this.resourceLocation = resourceLocation;
    return this;
  }

  /**
   * Relative URI to the target resource location for completed resources.
   * @return resourceLocation
   */
  @javax.annotation.Nullable
  public String getResourceLocation() {
    return resourceLocation;
  }

  public void setResourceLocation(String resourceLocation) {
    this.resourceLocation = resourceLocation;
  }


  public Operation userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User Id
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Operation operation = (Operation) o;
    return Objects.equals(this.createdTimestamp, operation.createdTimestamp) &&
        Objects.equals(this.errorResponse, operation.errorResponse) &&
        Objects.equals(this.lastActionTimestamp, operation.lastActionTimestamp) &&
        Objects.equals(this.operationId, operation.operationId) &&
        Objects.equals(this.operationState, operation.operationState) &&
        Objects.equals(this.resourceLocation, operation.resourceLocation) &&
        Objects.equals(this.userId, operation.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdTimestamp, errorResponse, lastActionTimestamp, operationId, operationState, resourceLocation, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Operation {\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    errorResponse: ").append(toIndentedString(errorResponse)).append("\n");
    sb.append("    lastActionTimestamp: ").append(toIndentedString(lastActionTimestamp)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    operationState: ").append(toIndentedString(operationState)).append("\n");
    sb.append("    resourceLocation: ").append(toIndentedString(resourceLocation)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdTimestamp");
    openapiFields.add("errorResponse");
    openapiFields.add("lastActionTimestamp");
    openapiFields.add("operationId");
    openapiFields.add("operationState");
    openapiFields.add("resourceLocation");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Operation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Operation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Operation is not found in the empty JSON string", Operation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Operation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Operation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdTimestamp") != null && !jsonObj.get("createdTimestamp").isJsonNull()) && !jsonObj.get("createdTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdTimestamp").toString()));
      }
      // validate the optional field `errorResponse`
      if (jsonObj.get("errorResponse") != null && !jsonObj.get("errorResponse").isJsonNull()) {
        ErrorResponse.validateJsonElement(jsonObj.get("errorResponse"));
      }
      if ((jsonObj.get("lastActionTimestamp") != null && !jsonObj.get("lastActionTimestamp").isJsonNull()) && !jsonObj.get("lastActionTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastActionTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastActionTimestamp").toString()));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      // validate the optional field `operationState`
      if (jsonObj.get("operationState") != null && !jsonObj.get("operationState").isJsonNull()) {
        OperationState.validateJsonElement(jsonObj.get("operationState"));
      }
      if ((jsonObj.get("resourceLocation") != null && !jsonObj.get("resourceLocation").isJsonNull()) && !jsonObj.get("resourceLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceLocation").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Operation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Operation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Operation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Operation.class));

       return (TypeAdapter<T>) new TypeAdapter<Operation>() {
           @Override
           public void write(JsonWriter out, Operation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Operation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Operation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Operation
   * @throws IOException if the JSON string is invalid with respect to Operation
   */
  public static Operation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Operation.class);
  }

  /**
   * Convert an instance of Operation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

