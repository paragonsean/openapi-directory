/*
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateContextDTO;
import org.openapitools.client.model.UpdateMetadataDTO;
import org.openapitools.client.model.UpdateQuestionsDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PATCH Body schema for Update Qna List
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:06.344438-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateQnaDTO {
  public static final String SERIALIZED_NAME_ANSWER = "answer";
  @SerializedName(SERIALIZED_NAME_ANSWER)
  private String answer;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private UpdateContextDTO context;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private UpdateMetadataDTO metadata;

  public static final String SERIALIZED_NAME_QUESTIONS = "questions";
  @SerializedName(SERIALIZED_NAME_QUESTIONS)
  private UpdateQuestionsDTO questions;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public UpdateQnaDTO() {
  }

  public UpdateQnaDTO answer(String answer) {
    this.answer = answer;
    return this;
  }

  /**
   * Answer text
   * @return answer
   */
  @javax.annotation.Nullable
  public String getAnswer() {
    return answer;
  }

  public void setAnswer(String answer) {
    this.answer = answer;
  }


  public UpdateQnaDTO context(UpdateContextDTO context) {
    this.context = context;
    return this;
  }

  /**
   * Context associated with Qna to be updated.
   * @return context
   */
  @javax.annotation.Nullable
  public UpdateContextDTO getContext() {
    return context;
  }

  public void setContext(UpdateContextDTO context) {
    this.context = context;
  }


  public UpdateQnaDTO id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Unique id for the Q-A
   * minimum: 0
   * maximum: 2147483647
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public UpdateQnaDTO metadata(UpdateMetadataDTO metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * List of metadata associated with the answer to be updated
   * @return metadata
   */
  @javax.annotation.Nullable
  public UpdateMetadataDTO getMetadata() {
    return metadata;
  }

  public void setMetadata(UpdateMetadataDTO metadata) {
    this.metadata = metadata;
  }


  public UpdateQnaDTO questions(UpdateQuestionsDTO questions) {
    this.questions = questions;
    return this;
  }

  /**
   * List of questions associated with the answer.
   * @return questions
   */
  @javax.annotation.Nullable
  public UpdateQuestionsDTO getQuestions() {
    return questions;
  }

  public void setQuestions(UpdateQuestionsDTO questions) {
    this.questions = questions;
  }


  public UpdateQnaDTO source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateQnaDTO updateQnaDTO = (UpdateQnaDTO) o;
    return Objects.equals(this.answer, updateQnaDTO.answer) &&
        Objects.equals(this.context, updateQnaDTO.context) &&
        Objects.equals(this.id, updateQnaDTO.id) &&
        Objects.equals(this.metadata, updateQnaDTO.metadata) &&
        Objects.equals(this.questions, updateQnaDTO.questions) &&
        Objects.equals(this.source, updateQnaDTO.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answer, context, id, metadata, questions, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateQnaDTO {\n");
    sb.append("    answer: ").append(toIndentedString(answer)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    questions: ").append(toIndentedString(questions)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answer");
    openapiFields.add("context");
    openapiFields.add("id");
    openapiFields.add("metadata");
    openapiFields.add("questions");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateQnaDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateQnaDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateQnaDTO is not found in the empty JSON string", UpdateQnaDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateQnaDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateQnaDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("answer") != null && !jsonObj.get("answer").isJsonNull()) && !jsonObj.get("answer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `answer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("answer").toString()));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        UpdateContextDTO.validateJsonElement(jsonObj.get("context"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        UpdateMetadataDTO.validateJsonElement(jsonObj.get("metadata"));
      }
      // validate the optional field `questions`
      if (jsonObj.get("questions") != null && !jsonObj.get("questions").isJsonNull()) {
        UpdateQuestionsDTO.validateJsonElement(jsonObj.get("questions"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateQnaDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateQnaDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateQnaDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateQnaDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateQnaDTO>() {
           @Override
           public void write(JsonWriter out, UpdateQnaDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateQnaDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateQnaDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateQnaDTO
   * @throws IOException if the JSON string is invalid with respect to UpdateQnaDTO
   */
  public static UpdateQnaDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateQnaDTO.class);
  }

  /**
   * Convert an instance of UpdateQnaDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

