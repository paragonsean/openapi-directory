/*
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateKbInputDTO;
import org.openapitools.client.model.DeleteKbContentsDTO;
import org.openapitools.client.model.UpdateKbContentsDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains list of QnAs to be updated
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:06.344438-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateKbOperationDTO {
  public static final String SERIALIZED_NAME_ADD = "add";
  @SerializedName(SERIALIZED_NAME_ADD)
  private CreateKbInputDTO add;

  public static final String SERIALIZED_NAME_DEFAULT_ANSWER_USED_FOR_EXTRACTION = "defaultAnswerUsedForExtraction";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ANSWER_USED_FOR_EXTRACTION)
  private String defaultAnswerUsedForExtraction;

  public static final String SERIALIZED_NAME_DELETE = "delete";
  @SerializedName(SERIALIZED_NAME_DELETE)
  private DeleteKbContentsDTO delete;

  public static final String SERIALIZED_NAME_ENABLE_HIERARCHICAL_EXTRACTION = "enableHierarchicalExtraction";
  @SerializedName(SERIALIZED_NAME_ENABLE_HIERARCHICAL_EXTRACTION)
  private Boolean enableHierarchicalExtraction;

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private UpdateKbContentsDTO update;

  public UpdateKbOperationDTO() {
  }

  public UpdateKbOperationDTO add(CreateKbInputDTO add) {
    this.add = add;
    return this;
  }

  /**
   * An instance of CreateKbInputDTO for add operation
   * @return add
   */
  @javax.annotation.Nullable
  public CreateKbInputDTO getAdd() {
    return add;
  }

  public void setAdd(CreateKbInputDTO add) {
    this.add = add;
  }


  public UpdateKbOperationDTO defaultAnswerUsedForExtraction(String defaultAnswerUsedForExtraction) {
    this.defaultAnswerUsedForExtraction = defaultAnswerUsedForExtraction;
    return this;
  }

  /**
   * Text string to be used as the answer in any Q-A which has no extracted answer from the document but has a hierarchy. Required when EnableHierarchicalExtraction field is set to True.
   * @return defaultAnswerUsedForExtraction
   */
  @javax.annotation.Nullable
  public String getDefaultAnswerUsedForExtraction() {
    return defaultAnswerUsedForExtraction;
  }

  public void setDefaultAnswerUsedForExtraction(String defaultAnswerUsedForExtraction) {
    this.defaultAnswerUsedForExtraction = defaultAnswerUsedForExtraction;
  }


  public UpdateKbOperationDTO delete(DeleteKbContentsDTO delete) {
    this.delete = delete;
    return this;
  }

  /**
   * An instance of DeleteKbContentsDTO for delete Operation
   * @return delete
   */
  @javax.annotation.Nullable
  public DeleteKbContentsDTO getDelete() {
    return delete;
  }

  public void setDelete(DeleteKbContentsDTO delete) {
    this.delete = delete;
  }


  public UpdateKbOperationDTO enableHierarchicalExtraction(Boolean enableHierarchicalExtraction) {
    this.enableHierarchicalExtraction = enableHierarchicalExtraction;
    return this;
  }

  /**
   * Enable hierarchical extraction of Q-A from files and urls. The value set during KB creation will be used if this field is not present.
   * @return enableHierarchicalExtraction
   */
  @javax.annotation.Nullable
  public Boolean getEnableHierarchicalExtraction() {
    return enableHierarchicalExtraction;
  }

  public void setEnableHierarchicalExtraction(Boolean enableHierarchicalExtraction) {
    this.enableHierarchicalExtraction = enableHierarchicalExtraction;
  }


  public UpdateKbOperationDTO update(UpdateKbContentsDTO update) {
    this.update = update;
    return this;
  }

  /**
   * An instance of UpdateKbContentsDTO for Update Operation
   * @return update
   */
  @javax.annotation.Nullable
  public UpdateKbContentsDTO getUpdate() {
    return update;
  }

  public void setUpdate(UpdateKbContentsDTO update) {
    this.update = update;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateKbOperationDTO updateKbOperationDTO = (UpdateKbOperationDTO) o;
    return Objects.equals(this.add, updateKbOperationDTO.add) &&
        Objects.equals(this.defaultAnswerUsedForExtraction, updateKbOperationDTO.defaultAnswerUsedForExtraction) &&
        Objects.equals(this.delete, updateKbOperationDTO.delete) &&
        Objects.equals(this.enableHierarchicalExtraction, updateKbOperationDTO.enableHierarchicalExtraction) &&
        Objects.equals(this.update, updateKbOperationDTO.update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(add, defaultAnswerUsedForExtraction, delete, enableHierarchicalExtraction, update);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateKbOperationDTO {\n");
    sb.append("    add: ").append(toIndentedString(add)).append("\n");
    sb.append("    defaultAnswerUsedForExtraction: ").append(toIndentedString(defaultAnswerUsedForExtraction)).append("\n");
    sb.append("    delete: ").append(toIndentedString(delete)).append("\n");
    sb.append("    enableHierarchicalExtraction: ").append(toIndentedString(enableHierarchicalExtraction)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add");
    openapiFields.add("defaultAnswerUsedForExtraction");
    openapiFields.add("delete");
    openapiFields.add("enableHierarchicalExtraction");
    openapiFields.add("update");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateKbOperationDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateKbOperationDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateKbOperationDTO is not found in the empty JSON string", UpdateKbOperationDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateKbOperationDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateKbOperationDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `add`
      if (jsonObj.get("add") != null && !jsonObj.get("add").isJsonNull()) {
        CreateKbInputDTO.validateJsonElement(jsonObj.get("add"));
      }
      if ((jsonObj.get("defaultAnswerUsedForExtraction") != null && !jsonObj.get("defaultAnswerUsedForExtraction").isJsonNull()) && !jsonObj.get("defaultAnswerUsedForExtraction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultAnswerUsedForExtraction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultAnswerUsedForExtraction").toString()));
      }
      // validate the optional field `delete`
      if (jsonObj.get("delete") != null && !jsonObj.get("delete").isJsonNull()) {
        DeleteKbContentsDTO.validateJsonElement(jsonObj.get("delete"));
      }
      // validate the optional field `update`
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        UpdateKbContentsDTO.validateJsonElement(jsonObj.get("update"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateKbOperationDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateKbOperationDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateKbOperationDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateKbOperationDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateKbOperationDTO>() {
           @Override
           public void write(JsonWriter out, UpdateKbOperationDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateKbOperationDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateKbOperationDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateKbOperationDTO
   * @throws IOException if the JSON string is invalid with respect to UpdateKbOperationDTO
   */
  public static UpdateKbOperationDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateKbOperationDTO.class);
  }

  /**
   * Convert an instance of UpdateKbOperationDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

