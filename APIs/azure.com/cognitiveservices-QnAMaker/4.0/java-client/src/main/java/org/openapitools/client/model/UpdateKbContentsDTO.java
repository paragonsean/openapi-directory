/*
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateQnaDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PATCH body schema for Update operation in Update Kb
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:06.344438-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateKbContentsDTO {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QNA_LIST = "qnaList";
  @SerializedName(SERIALIZED_NAME_QNA_LIST)
  private List<UpdateQnaDTO> qnaList = new ArrayList<>();

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List<String> urls = new ArrayList<>();

  public UpdateKbContentsDTO() {
  }

  public UpdateKbContentsDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Friendly name for the knowledgebase.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateKbContentsDTO qnaList(List<UpdateQnaDTO> qnaList) {
    this.qnaList = qnaList;
    return this;
  }

  public UpdateKbContentsDTO addQnaListItem(UpdateQnaDTO qnaListItem) {
    if (this.qnaList == null) {
      this.qnaList = new ArrayList<>();
    }
    this.qnaList.add(qnaListItem);
    return this;
  }

  /**
   * List of Q-A (UpdateQnaDTO) to be added to the knowledgebase.
   * @return qnaList
   */
  @javax.annotation.Nullable
  public List<UpdateQnaDTO> getQnaList() {
    return qnaList;
  }

  public void setQnaList(List<UpdateQnaDTO> qnaList) {
    this.qnaList = qnaList;
  }


  public UpdateKbContentsDTO urls(List<String> urls) {
    this.urls = urls;
    return this;
  }

  public UpdateKbContentsDTO addUrlsItem(String urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

  /**
   * List of existing URLs to be refreshed. The content will be extracted again and re-indexed.
   * @return urls
   */
  @javax.annotation.Nullable
  public List<String> getUrls() {
    return urls;
  }

  public void setUrls(List<String> urls) {
    this.urls = urls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateKbContentsDTO updateKbContentsDTO = (UpdateKbContentsDTO) o;
    return Objects.equals(this.name, updateKbContentsDTO.name) &&
        Objects.equals(this.qnaList, updateKbContentsDTO.qnaList) &&
        Objects.equals(this.urls, updateKbContentsDTO.urls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, qnaList, urls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateKbContentsDTO {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    qnaList: ").append(toIndentedString(qnaList)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("qnaList");
    openapiFields.add("urls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateKbContentsDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateKbContentsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateKbContentsDTO is not found in the empty JSON string", UpdateKbContentsDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateKbContentsDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateKbContentsDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("qnaList") != null && !jsonObj.get("qnaList").isJsonNull()) {
        JsonArray jsonArrayqnaList = jsonObj.getAsJsonArray("qnaList");
        if (jsonArrayqnaList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("qnaList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `qnaList` to be an array in the JSON string but got `%s`", jsonObj.get("qnaList").toString()));
          }

          // validate the optional field `qnaList` (array)
          for (int i = 0; i < jsonArrayqnaList.size(); i++) {
            UpdateQnaDTO.validateJsonElement(jsonArrayqnaList.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonNull() && !jsonObj.get("urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `urls` to be an array in the JSON string but got `%s`", jsonObj.get("urls").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateKbContentsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateKbContentsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateKbContentsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateKbContentsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateKbContentsDTO>() {
           @Override
           public void write(JsonWriter out, UpdateKbContentsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateKbContentsDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateKbContentsDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateKbContentsDTO
   * @throws IOException if the JSON string is invalid with respect to UpdateKbContentsDTO
   */
  public static UpdateKbContentsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateKbContentsDTO.class);
  }

  /**
   * Convert an instance of UpdateKbContentsDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

