/*
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.QnADTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Prompt for an answer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:06.344438-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PromptDTO {
  public static final String SERIALIZED_NAME_DISPLAY_ORDER = "displayOrder";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ORDER)
  private Integer displayOrder;

  public static final String SERIALIZED_NAME_DISPLAY_TEXT = "displayText";
  @SerializedName(SERIALIZED_NAME_DISPLAY_TEXT)
  private String displayText;

  public static final String SERIALIZED_NAME_QNA = "qna";
  @SerializedName(SERIALIZED_NAME_QNA)
  private QnADTO qna;

  public static final String SERIALIZED_NAME_QNA_ID = "qnaId";
  @SerializedName(SERIALIZED_NAME_QNA_ID)
  private Integer qnaId;

  public PromptDTO() {
  }

  public PromptDTO displayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
    return this;
  }

  /**
   * Index of the prompt - used in ordering of the prompts
   * @return displayOrder
   */
  @javax.annotation.Nullable
  public Integer getDisplayOrder() {
    return displayOrder;
  }

  public void setDisplayOrder(Integer displayOrder) {
    this.displayOrder = displayOrder;
  }


  public PromptDTO displayText(String displayText) {
    this.displayText = displayText;
    return this;
  }

  /**
   * Text displayed to represent a follow up question prompt
   * @return displayText
   */
  @javax.annotation.Nullable
  public String getDisplayText() {
    return displayText;
  }

  public void setDisplayText(String displayText) {
    this.displayText = displayText;
  }


  public PromptDTO qna(QnADTO qna) {
    this.qna = qna;
    return this;
  }

  /**
   * QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object
   * @return qna
   */
  @javax.annotation.Nullable
  public QnADTO getQna() {
    return qna;
  }

  public void setQna(QnADTO qna) {
    this.qna = qna;
  }


  public PromptDTO qnaId(Integer qnaId) {
    this.qnaId = qnaId;
    return this;
  }

  /**
   * Qna id corresponding to the prompt - if QnaId is present, QnADTO object is ignored.
   * @return qnaId
   */
  @javax.annotation.Nullable
  public Integer getQnaId() {
    return qnaId;
  }

  public void setQnaId(Integer qnaId) {
    this.qnaId = qnaId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromptDTO promptDTO = (PromptDTO) o;
    return Objects.equals(this.displayOrder, promptDTO.displayOrder) &&
        Objects.equals(this.displayText, promptDTO.displayText) &&
        Objects.equals(this.qna, promptDTO.qna) &&
        Objects.equals(this.qnaId, promptDTO.qnaId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayOrder, displayText, qna, qnaId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromptDTO {\n");
    sb.append("    displayOrder: ").append(toIndentedString(displayOrder)).append("\n");
    sb.append("    displayText: ").append(toIndentedString(displayText)).append("\n");
    sb.append("    qna: ").append(toIndentedString(qna)).append("\n");
    sb.append("    qnaId: ").append(toIndentedString(qnaId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayOrder");
    openapiFields.add("displayText");
    openapiFields.add("qna");
    openapiFields.add("qnaId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PromptDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PromptDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PromptDTO is not found in the empty JSON string", PromptDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PromptDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PromptDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayText") != null && !jsonObj.get("displayText").isJsonNull()) && !jsonObj.get("displayText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayText").toString()));
      }
      // validate the optional field `qna`
      if (jsonObj.get("qna") != null && !jsonObj.get("qna").isJsonNull()) {
        QnADTO.validateJsonElement(jsonObj.get("qna"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PromptDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PromptDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PromptDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PromptDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<PromptDTO>() {
           @Override
           public void write(JsonWriter out, PromptDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PromptDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PromptDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PromptDTO
   * @throws IOException if the JSON string is invalid with respect to PromptDTO
   */
  public static PromptDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PromptDTO.class);
  }

  /**
   * Convert an instance of PromptDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

