/*
 * QnAMaker Client
 * An API for QnAMaker Service
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response schema for CreateKb operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:06.344438-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KnowledgebaseDTO {
  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_ACCESSED_TIMESTAMP = "lastAccessedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_ACCESSED_TIMESTAMP)
  private String lastAccessedTimestamp;

  public static final String SERIALIZED_NAME_LAST_CHANGED_TIMESTAMP = "lastChangedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_CHANGED_TIMESTAMP)
  private String lastChangedTimestamp;

  public static final String SERIALIZED_NAME_LAST_PUBLISHED_TIMESTAMP = "lastPublishedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_PUBLISHED_TIMESTAMP)
  private String lastPublishedTimestamp;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<String> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_URLS = "urls";
  @SerializedName(SERIALIZED_NAME_URLS)
  private List<String> urls = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public KnowledgebaseDTO() {
  }

  public KnowledgebaseDTO hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * URL host name at which the knowledgebase is hosted.
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public KnowledgebaseDTO id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique id that identifies a knowledgebase.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public KnowledgebaseDTO lastAccessedTimestamp(String lastAccessedTimestamp) {
    this.lastAccessedTimestamp = lastAccessedTimestamp;
    return this;
  }

  /**
   * Time stamp at which the knowledgebase was last accessed (UTC).
   * @return lastAccessedTimestamp
   */
  @javax.annotation.Nullable
  public String getLastAccessedTimestamp() {
    return lastAccessedTimestamp;
  }

  public void setLastAccessedTimestamp(String lastAccessedTimestamp) {
    this.lastAccessedTimestamp = lastAccessedTimestamp;
  }


  public KnowledgebaseDTO lastChangedTimestamp(String lastChangedTimestamp) {
    this.lastChangedTimestamp = lastChangedTimestamp;
    return this;
  }

  /**
   * Time stamp at which the knowledgebase was last modified (UTC).
   * @return lastChangedTimestamp
   */
  @javax.annotation.Nullable
  public String getLastChangedTimestamp() {
    return lastChangedTimestamp;
  }

  public void setLastChangedTimestamp(String lastChangedTimestamp) {
    this.lastChangedTimestamp = lastChangedTimestamp;
  }


  public KnowledgebaseDTO lastPublishedTimestamp(String lastPublishedTimestamp) {
    this.lastPublishedTimestamp = lastPublishedTimestamp;
    return this;
  }

  /**
   * Time stamp at which the knowledgebase was last published (UTC).
   * @return lastPublishedTimestamp
   */
  @javax.annotation.Nullable
  public String getLastPublishedTimestamp() {
    return lastPublishedTimestamp;
  }

  public void setLastPublishedTimestamp(String lastPublishedTimestamp) {
    this.lastPublishedTimestamp = lastPublishedTimestamp;
  }


  public KnowledgebaseDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Friendly name of the knowledgebase.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public KnowledgebaseDTO sources(List<String> sources) {
    this.sources = sources;
    return this;
  }

  public KnowledgebaseDTO addSourcesItem(String sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Custom sources from which Q-A were extracted or explicitly added to the knowledgebase.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<String> getSources() {
    return sources;
  }

  public void setSources(List<String> sources) {
    this.sources = sources;
  }


  public KnowledgebaseDTO urls(List<String> urls) {
    this.urls = urls;
    return this;
  }

  public KnowledgebaseDTO addUrlsItem(String urlsItem) {
    if (this.urls == null) {
      this.urls = new ArrayList<>();
    }
    this.urls.add(urlsItem);
    return this;
  }

  /**
   * URL sources from which Q-A were extracted and added to the knowledgebase.
   * @return urls
   */
  @javax.annotation.Nullable
  public List<String> getUrls() {
    return urls;
  }

  public void setUrls(List<String> urls) {
    this.urls = urls;
  }


  public KnowledgebaseDTO userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User who created / owns the knowledgebase.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KnowledgebaseDTO knowledgebaseDTO = (KnowledgebaseDTO) o;
    return Objects.equals(this.hostName, knowledgebaseDTO.hostName) &&
        Objects.equals(this.id, knowledgebaseDTO.id) &&
        Objects.equals(this.lastAccessedTimestamp, knowledgebaseDTO.lastAccessedTimestamp) &&
        Objects.equals(this.lastChangedTimestamp, knowledgebaseDTO.lastChangedTimestamp) &&
        Objects.equals(this.lastPublishedTimestamp, knowledgebaseDTO.lastPublishedTimestamp) &&
        Objects.equals(this.name, knowledgebaseDTO.name) &&
        Objects.equals(this.sources, knowledgebaseDTO.sources) &&
        Objects.equals(this.urls, knowledgebaseDTO.urls) &&
        Objects.equals(this.userId, knowledgebaseDTO.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostName, id, lastAccessedTimestamp, lastChangedTimestamp, lastPublishedTimestamp, name, sources, urls, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KnowledgebaseDTO {\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastAccessedTimestamp: ").append(toIndentedString(lastAccessedTimestamp)).append("\n");
    sb.append("    lastChangedTimestamp: ").append(toIndentedString(lastChangedTimestamp)).append("\n");
    sb.append("    lastPublishedTimestamp: ").append(toIndentedString(lastPublishedTimestamp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    urls: ").append(toIndentedString(urls)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostName");
    openapiFields.add("id");
    openapiFields.add("lastAccessedTimestamp");
    openapiFields.add("lastChangedTimestamp");
    openapiFields.add("lastPublishedTimestamp");
    openapiFields.add("name");
    openapiFields.add("sources");
    openapiFields.add("urls");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KnowledgebaseDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KnowledgebaseDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KnowledgebaseDTO is not found in the empty JSON string", KnowledgebaseDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KnowledgebaseDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KnowledgebaseDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastAccessedTimestamp") != null && !jsonObj.get("lastAccessedTimestamp").isJsonNull()) && !jsonObj.get("lastAccessedTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastAccessedTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastAccessedTimestamp").toString()));
      }
      if ((jsonObj.get("lastChangedTimestamp") != null && !jsonObj.get("lastChangedTimestamp").isJsonNull()) && !jsonObj.get("lastChangedTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastChangedTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastChangedTimestamp").toString()));
      }
      if ((jsonObj.get("lastPublishedTimestamp") != null && !jsonObj.get("lastPublishedTimestamp").isJsonNull()) && !jsonObj.get("lastPublishedTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastPublishedTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastPublishedTimestamp").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull() && !jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("urls") != null && !jsonObj.get("urls").isJsonNull() && !jsonObj.get("urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `urls` to be an array in the JSON string but got `%s`", jsonObj.get("urls").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KnowledgebaseDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KnowledgebaseDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KnowledgebaseDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KnowledgebaseDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<KnowledgebaseDTO>() {
           @Override
           public void write(JsonWriter out, KnowledgebaseDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KnowledgebaseDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KnowledgebaseDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KnowledgebaseDTO
   * @throws IOException if the JSON string is invalid with respect to KnowledgebaseDTO
   */
  public static KnowledgebaseDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KnowledgebaseDTO.class);
  }

  /**
   * Convert an instance of KnowledgebaseDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

