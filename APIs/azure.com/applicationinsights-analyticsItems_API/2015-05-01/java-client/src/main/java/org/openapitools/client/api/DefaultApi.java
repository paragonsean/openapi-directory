/*
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for saved items.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationInsightsComponentAnalyticsItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analyticsItemsDelete
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param id The Id of a specific item defined in the Application Insights component (optional)
     * @param name The name of a specific item defined in the Application Insights component (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully removed from the Application Insights component </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsItemsDeleteCall(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String id, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "scopePath" + "}", localVarApiClient.escapeString(scopePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsItemsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String id, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling analyticsItemsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling analyticsItemsDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling analyticsItemsDelete(Async)");
        }

        // verify the required parameter 'scopePath' is set
        if (scopePath == null) {
            throw new ApiException("Missing the required parameter 'scopePath' when calling analyticsItemsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling analyticsItemsDelete(Async)");
        }

        return analyticsItemsDeleteCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, id, name, _callback);

    }

    /**
     * 
     * Deletes a specific Analytics Items defined within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param id The Id of a specific item defined in the Application Insights component (optional)
     * @param name The name of a specific item defined in the Application Insights component (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully removed from the Application Insights component </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsItemsDelete(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String id, String name) throws ApiException {
        analyticsItemsDeleteWithHttpInfo(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, id, name);
    }

    /**
     * 
     * Deletes a specific Analytics Items defined within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param id The Id of a specific item defined in the Application Insights component (optional)
     * @param name The name of a specific item defined in the Application Insights component (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully removed from the Application Insights component </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsItemsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String id, String name) throws ApiException {
        okhttp3.Call localVarCall = analyticsItemsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, id, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specific Analytics Items defined within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param id The Id of a specific item defined in the Application Insights component (optional)
     * @param name The name of a specific item defined in the Application Insights component (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item has been successfully removed from the Application Insights component </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsItemsDeleteAsync(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String id, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsItemsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, id, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsItemsGet
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param id The Id of a specific item defined in the Application Insights component (optional)
     * @param name The name of a specific item defined in the Application Insights component (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single item associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsItemsGetCall(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String id, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "scopePath" + "}", localVarApiClient.escapeString(scopePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsItemsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String id, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling analyticsItemsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling analyticsItemsGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling analyticsItemsGet(Async)");
        }

        // verify the required parameter 'scopePath' is set
        if (scopePath == null) {
            throw new ApiException("Missing the required parameter 'scopePath' when calling analyticsItemsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling analyticsItemsGet(Async)");
        }

        return analyticsItemsGetCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, id, name, _callback);

    }

    /**
     * 
     * Gets a specific Analytics Items defined within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param id The Id of a specific item defined in the Application Insights component (optional)
     * @param name The name of a specific item defined in the Application Insights component (optional)
     * @return ApplicationInsightsComponentAnalyticsItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single item associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationInsightsComponentAnalyticsItem analyticsItemsGet(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String id, String name) throws ApiException {
        ApiResponse<ApplicationInsightsComponentAnalyticsItem> localVarResp = analyticsItemsGetWithHttpInfo(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, id, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a specific Analytics Items defined within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param id The Id of a specific item defined in the Application Insights component (optional)
     * @param name The name of a specific item defined in the Application Insights component (optional)
     * @return ApiResponse&lt;ApplicationInsightsComponentAnalyticsItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single item associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationInsightsComponentAnalyticsItem> analyticsItemsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String id, String name) throws ApiException {
        okhttp3.Call localVarCall = analyticsItemsGetValidateBeforeCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, id, name, null);
        Type localVarReturnType = new TypeToken<ApplicationInsightsComponentAnalyticsItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a specific Analytics Items defined within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param id The Id of a specific item defined in the Application Insights component (optional)
     * @param name The name of a specific item defined in the Application Insights component (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single item associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsItemsGetAsync(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String id, String name, final ApiCallback<ApplicationInsightsComponentAnalyticsItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsItemsGetValidateBeforeCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, id, name, _callback);
        Type localVarReturnType = new TypeToken<ApplicationInsightsComponentAnalyticsItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsItemsList
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (optional, default to shared)
     * @param type Enum indicating the type of the Analytics item. (optional, default to none)
     * @param includeContent Flag indicating whether or not to return the content of each applicable item. If false, only return the item information. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more items associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsItemsListCall(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String scope, String type, Boolean includeContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "scopePath" + "}", localVarApiClient.escapeString(scopePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (includeContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeContent", includeContent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsItemsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String scope, String type, Boolean includeContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling analyticsItemsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling analyticsItemsList(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling analyticsItemsList(Async)");
        }

        // verify the required parameter 'scopePath' is set
        if (scopePath == null) {
            throw new ApiException("Missing the required parameter 'scopePath' when calling analyticsItemsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling analyticsItemsList(Async)");
        }

        return analyticsItemsListCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, scope, type, includeContent, _callback);

    }

    /**
     * 
     * Gets a list of Analytics Items defined within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (optional, default to shared)
     * @param type Enum indicating the type of the Analytics item. (optional, default to none)
     * @param includeContent Flag indicating whether or not to return the content of each applicable item. If false, only return the item information. (optional)
     * @return List&lt;ApplicationInsightsComponentAnalyticsItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more items associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public List<ApplicationInsightsComponentAnalyticsItem> analyticsItemsList(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String scope, String type, Boolean includeContent) throws ApiException {
        ApiResponse<List<ApplicationInsightsComponentAnalyticsItem>> localVarResp = analyticsItemsListWithHttpInfo(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, scope, type, includeContent);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of Analytics Items defined within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (optional, default to shared)
     * @param type Enum indicating the type of the Analytics item. (optional, default to none)
     * @param includeContent Flag indicating whether or not to return the content of each applicable item. If false, only return the item information. (optional)
     * @return ApiResponse&lt;List&lt;ApplicationInsightsComponentAnalyticsItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more items associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApplicationInsightsComponentAnalyticsItem>> analyticsItemsListWithHttpInfo(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String scope, String type, Boolean includeContent) throws ApiException {
        okhttp3.Call localVarCall = analyticsItemsListValidateBeforeCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, scope, type, includeContent, null);
        Type localVarReturnType = new TypeToken<List<ApplicationInsightsComponentAnalyticsItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of Analytics Items defined within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scope Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (optional, default to shared)
     * @param type Enum indicating the type of the Analytics item. (optional, default to none)
     * @param includeContent Flag indicating whether or not to return the content of each applicable item. If false, only return the item information. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more items associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsItemsListAsync(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, String scope, String type, Boolean includeContent, final ApiCallback<List<ApplicationInsightsComponentAnalyticsItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsItemsListValidateBeforeCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, scope, type, includeContent, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicationInsightsComponentAnalyticsItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsItemsPut
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param itemProperties Properties that need to be specified to create a new item and add it to an Application Insights component. (required)
     * @param overrideItem Flag indicating whether or not to force save an item. This allows overriding an item if it already exists. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new or updated item associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsItemsPutCall(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, ApplicationInsightsComponentAnalyticsItem itemProperties, Boolean overrideItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "scopePath" + "}", localVarApiClient.escapeString(scopePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (overrideItem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overrideItem", overrideItem));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsItemsPutValidateBeforeCall(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, ApplicationInsightsComponentAnalyticsItem itemProperties, Boolean overrideItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling analyticsItemsPut(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling analyticsItemsPut(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling analyticsItemsPut(Async)");
        }

        // verify the required parameter 'scopePath' is set
        if (scopePath == null) {
            throw new ApiException("Missing the required parameter 'scopePath' when calling analyticsItemsPut(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling analyticsItemsPut(Async)");
        }

        // verify the required parameter 'itemProperties' is set
        if (itemProperties == null) {
            throw new ApiException("Missing the required parameter 'itemProperties' when calling analyticsItemsPut(Async)");
        }

        return analyticsItemsPutCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, itemProperties, overrideItem, _callback);

    }

    /**
     * 
     * Adds or Updates a specific Analytics Item within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param itemProperties Properties that need to be specified to create a new item and add it to an Application Insights component. (required)
     * @param overrideItem Flag indicating whether or not to force save an item. This allows overriding an item if it already exists. (optional)
     * @return ApplicationInsightsComponentAnalyticsItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new or updated item associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationInsightsComponentAnalyticsItem analyticsItemsPut(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, ApplicationInsightsComponentAnalyticsItem itemProperties, Boolean overrideItem) throws ApiException {
        ApiResponse<ApplicationInsightsComponentAnalyticsItem> localVarResp = analyticsItemsPutWithHttpInfo(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, itemProperties, overrideItem);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds or Updates a specific Analytics Item within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param itemProperties Properties that need to be specified to create a new item and add it to an Application Insights component. (required)
     * @param overrideItem Flag indicating whether or not to force save an item. This allows overriding an item if it already exists. (optional)
     * @return ApiResponse&lt;ApplicationInsightsComponentAnalyticsItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new or updated item associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationInsightsComponentAnalyticsItem> analyticsItemsPutWithHttpInfo(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, ApplicationInsightsComponentAnalyticsItem itemProperties, Boolean overrideItem) throws ApiException {
        okhttp3.Call localVarCall = analyticsItemsPutValidateBeforeCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, itemProperties, overrideItem, null);
        Type localVarReturnType = new TypeToken<ApplicationInsightsComponentAnalyticsItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds or Updates a specific Analytics Item within an Application Insights component.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param scopePath Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param itemProperties Properties that need to be specified to create a new item and add it to an Application Insights component. (required)
     * @param overrideItem Flag indicating whether or not to force save an item. This allows overriding an item if it already exists. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new or updated item associated with the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsItemsPutAsync(String subscriptionId, String resourceGroupName, String resourceName, String scopePath, String apiVersion, ApplicationInsightsComponentAnalyticsItem itemProperties, Boolean overrideItem, final ApiCallback<ApplicationInsightsComponentAnalyticsItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsItemsPutValidateBeforeCall(subscriptionId, resourceGroupName, resourceName, scopePath, apiVersion, itemProperties, overrideItem, _callback);
        Type localVarReturnType = new TypeToken<ApplicationInsightsComponentAnalyticsItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
