/*
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for saved items.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationInsightsComponentAnalyticsItemProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties that define an Analytics item that is associated to an Application Insights component.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:30.182686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationInsightsComponentAnalyticsItem {
  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTIES = "Properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private ApplicationInsightsComponentAnalyticsItemProperties properties;

  /**
   * Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component.
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    SHARED("shared"),
    
    USER("user");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String value) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCOPE = "Scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private ScopeEnum scope;

  public static final String SERIALIZED_NAME_TIME_CREATED = "TimeCreated";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private String timeCreated;

  public static final String SERIALIZED_NAME_TIME_MODIFIED = "TimeModified";
  @SerializedName(SERIALIZED_NAME_TIME_MODIFIED)
  private String timeModified;

  /**
   * Enum indicating the type of the Analytics item.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    QUERY("query"),
    
    FUNCTION("function"),
    
    FOLDER("folder"),
    
    RECENT("recent");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ApplicationInsightsComponentAnalyticsItem() {
  }

  public ApplicationInsightsComponentAnalyticsItem(
     String timeCreated, 
     String timeModified, 
     String version
  ) {
    this();
    this.timeCreated = timeCreated;
    this.timeModified = timeModified;
    this.version = version;
  }

  public ApplicationInsightsComponentAnalyticsItem content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The content of this item
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ApplicationInsightsComponentAnalyticsItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Internally assigned unique id of the item definition.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ApplicationInsightsComponentAnalyticsItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The user-defined name of the item.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationInsightsComponentAnalyticsItem properties(ApplicationInsightsComponentAnalyticsItemProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public ApplicationInsightsComponentAnalyticsItemProperties getProperties() {
    return properties;
  }

  public void setProperties(ApplicationInsightsComponentAnalyticsItemProperties properties) {
    this.properties = properties;
  }


  public ApplicationInsightsComponentAnalyticsItem scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Enum indicating if this item definition is owned by a specific user or is shared between all users with access to the Application Insights component.
   * @return scope
   */
  @javax.annotation.Nullable
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }


  /**
   * Date and time in UTC when this item was created.
   * @return timeCreated
   */
  @javax.annotation.Nullable
  public String getTimeCreated() {
    return timeCreated;
  }



  /**
   * Date and time in UTC of the last modification that was made to this item.
   * @return timeModified
   */
  @javax.annotation.Nullable
  public String getTimeModified() {
    return timeModified;
  }



  public ApplicationInsightsComponentAnalyticsItem type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Enum indicating the type of the Analytics item.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  /**
   * This instance&#39;s version of the data model. This can change as new features are added.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationInsightsComponentAnalyticsItem applicationInsightsComponentAnalyticsItem = (ApplicationInsightsComponentAnalyticsItem) o;
    return Objects.equals(this.content, applicationInsightsComponentAnalyticsItem.content) &&
        Objects.equals(this.id, applicationInsightsComponentAnalyticsItem.id) &&
        Objects.equals(this.name, applicationInsightsComponentAnalyticsItem.name) &&
        Objects.equals(this.properties, applicationInsightsComponentAnalyticsItem.properties) &&
        Objects.equals(this.scope, applicationInsightsComponentAnalyticsItem.scope) &&
        Objects.equals(this.timeCreated, applicationInsightsComponentAnalyticsItem.timeCreated) &&
        Objects.equals(this.timeModified, applicationInsightsComponentAnalyticsItem.timeModified) &&
        Objects.equals(this.type, applicationInsightsComponentAnalyticsItem.type) &&
        Objects.equals(this.version, applicationInsightsComponentAnalyticsItem.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, id, name, properties, scope, timeCreated, timeModified, type, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationInsightsComponentAnalyticsItem {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    timeModified: ").append(toIndentedString(timeModified)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Content");
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("Properties");
    openapiFields.add("Scope");
    openapiFields.add("TimeCreated");
    openapiFields.add("TimeModified");
    openapiFields.add("Type");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationInsightsComponentAnalyticsItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationInsightsComponentAnalyticsItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationInsightsComponentAnalyticsItem is not found in the empty JSON string", ApplicationInsightsComponentAnalyticsItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationInsightsComponentAnalyticsItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationInsightsComponentAnalyticsItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Content") != null && !jsonObj.get("Content").isJsonNull()) && !jsonObj.get("Content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Content").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `Properties`
      if (jsonObj.get("Properties") != null && !jsonObj.get("Properties").isJsonNull()) {
        ApplicationInsightsComponentAnalyticsItemProperties.validateJsonElement(jsonObj.get("Properties"));
      }
      if ((jsonObj.get("Scope") != null && !jsonObj.get("Scope").isJsonNull()) && !jsonObj.get("Scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Scope").toString()));
      }
      // validate the optional field `Scope`
      if (jsonObj.get("Scope") != null && !jsonObj.get("Scope").isJsonNull()) {
        ScopeEnum.validateJsonElement(jsonObj.get("Scope"));
      }
      if ((jsonObj.get("TimeCreated") != null && !jsonObj.get("TimeCreated").isJsonNull()) && !jsonObj.get("TimeCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeCreated").toString()));
      }
      if ((jsonObj.get("TimeModified") != null && !jsonObj.get("TimeModified").isJsonNull()) && !jsonObj.get("TimeModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeModified").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationInsightsComponentAnalyticsItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationInsightsComponentAnalyticsItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationInsightsComponentAnalyticsItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationInsightsComponentAnalyticsItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationInsightsComponentAnalyticsItem>() {
           @Override
           public void write(JsonWriter out, ApplicationInsightsComponentAnalyticsItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationInsightsComponentAnalyticsItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationInsightsComponentAnalyticsItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationInsightsComponentAnalyticsItem
   * @throws IOException if the JSON string is invalid with respect to ApplicationInsightsComponentAnalyticsItem
   */
  public static ApplicationInsightsComponentAnalyticsItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationInsightsComponentAnalyticsItem.class);
  }

  /**
   * Convert an instance of ApplicationInsightsComponentAnalyticsItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

