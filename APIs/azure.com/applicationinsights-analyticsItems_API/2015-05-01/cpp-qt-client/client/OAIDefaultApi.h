/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for saved items.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationInsightsComponentAnalyticsItem.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  scope_path QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void analyticsItemsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &scope_path, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  scope_path QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  id QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void analyticsItemsGet(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &scope_path, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  scope_path QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  scope QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  include_content bool [optional]
    */
    virtual void analyticsItemsList(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &scope_path, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_content = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  scope_path QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  item_properties OAIApplicationInsightsComponentAnalyticsItem [required]
    * @param[in]  override_item bool [optional]
    */
    virtual void analyticsItemsPut(const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &scope_path, const QString &api_version, const OAIApplicationInsightsComponentAnalyticsItem &item_properties, const ::OpenAPI::OptionalParam<bool> &override_item = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyticsItemsDeleteCallback(OAIHttpRequestWorker *worker);
    void analyticsItemsGetCallback(OAIHttpRequestWorker *worker);
    void analyticsItemsListCallback(OAIHttpRequestWorker *worker);
    void analyticsItemsPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyticsItemsDeleteSignal();
    void analyticsItemsGetSignal(OAIApplicationInsightsComponentAnalyticsItem summary);
    void analyticsItemsListSignal(QList<OAIApplicationInsightsComponentAnalyticsItem> summary);
    void analyticsItemsPutSignal(OAIApplicationInsightsComponentAnalyticsItem summary);


    void analyticsItemsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void analyticsItemsGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationInsightsComponentAnalyticsItem summary);
    void analyticsItemsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIApplicationInsightsComponentAnalyticsItem> summary);
    void analyticsItemsPutSignalFull(OAIHttpRequestWorker *worker, OAIApplicationInsightsComponentAnalyticsItem summary);

    Q_DECL_DEPRECATED_X("Use analyticsItemsDeleteSignalError() instead")
    void analyticsItemsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsItemsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsItemsGetSignalError() instead")
    void analyticsItemsGetSignalE(OAIApplicationInsightsComponentAnalyticsItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsItemsGetSignalError(OAIApplicationInsightsComponentAnalyticsItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsItemsListSignalError() instead")
    void analyticsItemsListSignalE(QList<OAIApplicationInsightsComponentAnalyticsItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsItemsListSignalError(QList<OAIApplicationInsightsComponentAnalyticsItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsItemsPutSignalError() instead")
    void analyticsItemsPutSignalE(OAIApplicationInsightsComponentAnalyticsItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsItemsPutSignalError(OAIApplicationInsightsComponentAnalyticsItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyticsItemsDeleteSignalErrorFull() instead")
    void analyticsItemsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsItemsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsItemsGetSignalErrorFull() instead")
    void analyticsItemsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsItemsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsItemsListSignalErrorFull() instead")
    void analyticsItemsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsItemsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsItemsPutSignalErrorFull() instead")
    void analyticsItemsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsItemsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
