/**
 * Recommendations API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RecommendationCollection from '../model/RecommendationCollection';
import RecommendationRule from '../model/RecommendationRule';
import RecommendationsListDefaultResponse from '../model/RecommendationsListDefaultResponse';

/**
* Recommendations service.
* @module api/RecommendationsApi
* @version 2019-08-01
*/
export default class RecommendationsApi {

    /**
    * Constructs a new RecommendationsApi. 
    * @alias module:api/RecommendationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recommendationsDisableAllForHostingEnvironment operation.
     * @callback module:api/RecommendationsApi~recommendationsDisableAllForHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable all recommendations for an app.
     * Description for Disable all recommendations for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} environmentName Name of the app.
     * @param {String} hostingEnvironmentName 
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/RecommendationsApi~recommendationsDisableAllForHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recommendationsDisableAllForHostingEnvironment(resourceGroupName, environmentName, hostingEnvironmentName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsDisableAllForHostingEnvironment");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling recommendationsDisableAllForHostingEnvironment");
      }
      // verify the required parameter 'hostingEnvironmentName' is set
      if (hostingEnvironmentName === undefined || hostingEnvironmentName === null) {
        throw new Error("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsDisableAllForHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsDisableAllForHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsDisableAllForHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hostingEnvironmentName': hostingEnvironmentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'environmentName': environmentName,
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsDisableAllForWebApp operation.
     * @callback module:api/RecommendationsApi~recommendationsDisableAllForWebAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable all recommendations for an app.
     * Description for Disable all recommendations for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/RecommendationsApi~recommendationsDisableAllForWebAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recommendationsDisableAllForWebApp(resourceGroupName, siteName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsDisableAllForWebApp");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling recommendationsDisableAllForWebApp");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsDisableAllForWebApp");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsDisableAllForWebApp");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsDisableRecommendationForHostingEnvironment operation.
     * @callback module:api/RecommendationsApi~recommendationsDisableRecommendationForHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the specific rule for a web site permanently.
     * Description for Disables the specific rule for a web site permanently.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} environmentName Site name
     * @param {String} name Rule name
     * @param {String} hostingEnvironmentName 
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/RecommendationsApi~recommendationsDisableRecommendationForHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recommendationsDisableRecommendationForHostingEnvironment(resourceGroupName, environmentName, name, hostingEnvironmentName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsDisableRecommendationForHostingEnvironment");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling recommendationsDisableRecommendationForHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommendationsDisableRecommendationForHostingEnvironment");
      }
      // verify the required parameter 'hostingEnvironmentName' is set
      if (hostingEnvironmentName === undefined || hostingEnvironmentName === null) {
        throw new Error("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsDisableRecommendationForHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsDisableRecommendationForHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsDisableRecommendationForHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'hostingEnvironmentName': hostingEnvironmentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'environmentName': environmentName,
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsDisableRecommendationForSite operation.
     * @callback module:api/RecommendationsApi~recommendationsDisableRecommendationForSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the specific rule for a web site permanently.
     * Description for Disables the specific rule for a web site permanently.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Site name
     * @param {String} name Rule name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/RecommendationsApi~recommendationsDisableRecommendationForSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recommendationsDisableRecommendationForSite(resourceGroupName, siteName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsDisableRecommendationForSite");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling recommendationsDisableRecommendationForSite");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommendationsDisableRecommendationForSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsDisableRecommendationForSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsDisableRecommendationForSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsDisableRecommendationForSubscription operation.
     * @callback module:api/RecommendationsApi~recommendationsDisableRecommendationForSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the specified rule so it will not apply to a subscription in the future.
     * Description for Disables the specified rule so it will not apply to a subscription in the future.
     * @param {String} name Rule name
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/RecommendationsApi~recommendationsDisableRecommendationForSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recommendationsDisableRecommendationForSubscription(name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommendationsDisableRecommendationForSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsDisableRecommendationForSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsDisableRecommendationForSubscription");
      }

      let pathParams = {
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsGetRuleDetailsByHostingEnvironment operation.
     * @callback module:api/RecommendationsApi~recommendationsGetRuleDetailsByHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a recommendation rule for an app.
     * Description for Get a recommendation rule for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} hostingEnvironmentName Name of the hosting environment.
     * @param {String} name Name of the recommendation.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [updateSeen] Specify <code>true</code> to update the last-seen timestamp of the recommendation object.
     * @param {String} [recommendationId] The GUID of the recommendation object if you query an expired one. You don't need to specify it to query an active entry.
     * @param {module:api/RecommendationsApi~recommendationsGetRuleDetailsByHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationRule}
     */
    recommendationsGetRuleDetailsByHostingEnvironment(resourceGroupName, hostingEnvironmentName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsGetRuleDetailsByHostingEnvironment");
      }
      // verify the required parameter 'hostingEnvironmentName' is set
      if (hostingEnvironmentName === undefined || hostingEnvironmentName === null) {
        throw new Error("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsGetRuleDetailsByHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommendationsGetRuleDetailsByHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsGetRuleDetailsByHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsGetRuleDetailsByHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hostingEnvironmentName': hostingEnvironmentName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'updateSeen': opts['updateSeen'],
        'recommendationId': opts['recommendationId'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsGetRuleDetailsByWebApp operation.
     * @callback module:api/RecommendationsApi~recommendationsGetRuleDetailsByWebAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a recommendation rule for an app.
     * Description for Get a recommendation rule for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Name of the app.
     * @param {String} name Name of the recommendation.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [updateSeen] Specify <code>true</code> to update the last-seen timestamp of the recommendation object.
     * @param {String} [recommendationId] The GUID of the recommendation object if you query an expired one. You don't need to specify it to query an active entry.
     * @param {module:api/RecommendationsApi~recommendationsGetRuleDetailsByWebAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationRule}
     */
    recommendationsGetRuleDetailsByWebApp(resourceGroupName, siteName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsGetRuleDetailsByWebApp");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling recommendationsGetRuleDetailsByWebApp");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommendationsGetRuleDetailsByWebApp");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsGetRuleDetailsByWebApp");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsGetRuleDetailsByWebApp");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'updateSeen': opts['updateSeen'],
        'recommendationId': opts['recommendationId'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsList operation.
     * @callback module:api/RecommendationsApi~recommendationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all recommendations for a subscription.
     * Description for List all recommendations for a subscription.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [featured] Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
     * @param {String} [filter] Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
     * @param {module:api/RecommendationsApi~recommendationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationCollection}
     */
    recommendationsList(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'featured': opts['featured'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsListHistoryForHostingEnvironment operation.
     * @callback module:api/RecommendationsApi~recommendationsListHistoryForHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get past recommendations for an app, optionally specified by the time range.
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} hostingEnvironmentName Name of the hosting environment.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [expiredOnly] Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.
     * @param {String} [filter] Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
     * @param {module:api/RecommendationsApi~recommendationsListHistoryForHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationCollection}
     */
    recommendationsListHistoryForHostingEnvironment(resourceGroupName, hostingEnvironmentName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsListHistoryForHostingEnvironment");
      }
      // verify the required parameter 'hostingEnvironmentName' is set
      if (hostingEnvironmentName === undefined || hostingEnvironmentName === null) {
        throw new Error("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsListHistoryForHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsListHistoryForHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsListHistoryForHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hostingEnvironmentName': hostingEnvironmentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'expiredOnly': opts['expiredOnly'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendationHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsListHistoryForWebApp operation.
     * @callback module:api/RecommendationsApi~recommendationsListHistoryForWebAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get past recommendations for an app, optionally specified by the time range.
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [expiredOnly] Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.
     * @param {String} [filter] Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
     * @param {module:api/RecommendationsApi~recommendationsListHistoryForWebAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationCollection}
     */
    recommendationsListHistoryForWebApp(resourceGroupName, siteName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsListHistoryForWebApp");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling recommendationsListHistoryForWebApp");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsListHistoryForWebApp");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsListHistoryForWebApp");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'expiredOnly': opts['expiredOnly'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsListRecommendedRulesForHostingEnvironment operation.
     * @callback module:api/RecommendationsApi~recommendationsListRecommendedRulesForHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all recommendations for an app.
     * Description for Get all recommendations for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} hostingEnvironmentName Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [featured] Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
     * @param {String} [filter] Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'
     * @param {module:api/RecommendationsApi~recommendationsListRecommendedRulesForHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationCollection}
     */
    recommendationsListRecommendedRulesForHostingEnvironment(resourceGroupName, hostingEnvironmentName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsListRecommendedRulesForHostingEnvironment");
      }
      // verify the required parameter 'hostingEnvironmentName' is set
      if (hostingEnvironmentName === undefined || hostingEnvironmentName === null) {
        throw new Error("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsListRecommendedRulesForHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsListRecommendedRulesForHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsListRecommendedRulesForHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hostingEnvironmentName': hostingEnvironmentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'featured': opts['featured'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsListRecommendedRulesForWebApp operation.
     * @callback module:api/RecommendationsApi~recommendationsListRecommendedRulesForWebAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all recommendations for an app.
     * Description for Get all recommendations for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [featured] Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
     * @param {String} [filter] Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'
     * @param {module:api/RecommendationsApi~recommendationsListRecommendedRulesForWebAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationCollection}
     */
    recommendationsListRecommendedRulesForWebApp(resourceGroupName, siteName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsListRecommendedRulesForWebApp");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling recommendationsListRecommendedRulesForWebApp");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsListRecommendedRulesForWebApp");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsListRecommendedRulesForWebApp");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'featured': opts['featured'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsResetAllFilters operation.
     * @callback module:api/RecommendationsApi~recommendationsResetAllFiltersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset all recommendation opt-out settings for a subscription.
     * Description for Reset all recommendation opt-out settings for a subscription.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/RecommendationsApi~recommendationsResetAllFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recommendationsResetAllFilters(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsResetAllFilters");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsResetAllFilters");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsResetAllFiltersForHostingEnvironment operation.
     * @callback module:api/RecommendationsApi~recommendationsResetAllFiltersForHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset all recommendation opt-out settings for an app.
     * Description for Reset all recommendation opt-out settings for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} environmentName Name of the app.
     * @param {String} hostingEnvironmentName 
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/RecommendationsApi~recommendationsResetAllFiltersForHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recommendationsResetAllFiltersForHostingEnvironment(resourceGroupName, environmentName, hostingEnvironmentName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsResetAllFiltersForHostingEnvironment");
      }
      // verify the required parameter 'environmentName' is set
      if (environmentName === undefined || environmentName === null) {
        throw new Error("Missing the required parameter 'environmentName' when calling recommendationsResetAllFiltersForHostingEnvironment");
      }
      // verify the required parameter 'hostingEnvironmentName' is set
      if (hostingEnvironmentName === undefined || hostingEnvironmentName === null) {
        throw new Error("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsResetAllFiltersForHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsResetAllFiltersForHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsResetAllFiltersForHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hostingEnvironmentName': hostingEnvironmentName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'environmentName': environmentName,
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsResetAllFiltersForWebApp operation.
     * @callback module:api/RecommendationsApi~recommendationsResetAllFiltersForWebAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset all recommendation opt-out settings for an app.
     * Description for Reset all recommendation opt-out settings for an app.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} siteName Name of the app.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/RecommendationsApi~recommendationsResetAllFiltersForWebAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recommendationsResetAllFiltersForWebApp(resourceGroupName, siteName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsResetAllFiltersForWebApp");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling recommendationsResetAllFiltersForWebApp");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsResetAllFiltersForWebApp");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsResetAllFiltersForWebApp");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
