/*
 * Recommendations API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RecommendationCollection;
import org.openapitools.client.model.RecommendationRule;
import org.openapitools.client.model.RecommendationsListDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecommendationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecommendationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecommendationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for recommendationsDisableAllForHostingEnvironment
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Name of the app. (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsDisableAllForHostingEnvironmentCall(String resourceGroupName, String environmentName, String hostingEnvironmentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/disable"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hostingEnvironmentName" + "}", localVarApiClient.escapeString(hostingEnvironmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environmentName", environmentName));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsDisableAllForHostingEnvironmentValidateBeforeCall(String resourceGroupName, String environmentName, String hostingEnvironmentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsDisableAllForHostingEnvironment(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling recommendationsDisableAllForHostingEnvironment(Async)");
        }

        // verify the required parameter 'hostingEnvironmentName' is set
        if (hostingEnvironmentName == null) {
            throw new ApiException("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsDisableAllForHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsDisableAllForHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsDisableAllForHostingEnvironment(Async)");
        }

        return recommendationsDisableAllForHostingEnvironmentCall(resourceGroupName, environmentName, hostingEnvironmentName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Disable all recommendations for an app.
     * Description for Disable all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Name of the app. (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void recommendationsDisableAllForHostingEnvironment(String resourceGroupName, String environmentName, String hostingEnvironmentName, String subscriptionId, String apiVersion) throws ApiException {
        recommendationsDisableAllForHostingEnvironmentWithHttpInfo(resourceGroupName, environmentName, hostingEnvironmentName, subscriptionId, apiVersion);
    }

    /**
     * Disable all recommendations for an app.
     * Description for Disable all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Name of the app. (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recommendationsDisableAllForHostingEnvironmentWithHttpInfo(String resourceGroupName, String environmentName, String hostingEnvironmentName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recommendationsDisableAllForHostingEnvironmentValidateBeforeCall(resourceGroupName, environmentName, hostingEnvironmentName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable all recommendations for an app. (asynchronously)
     * Description for Disable all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Name of the app. (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsDisableAllForHostingEnvironmentAsync(String resourceGroupName, String environmentName, String hostingEnvironmentName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsDisableAllForHostingEnvironmentValidateBeforeCall(resourceGroupName, environmentName, hostingEnvironmentName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsDisableAllForWebApp
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsDisableAllForWebAppCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/disable"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsDisableAllForWebAppValidateBeforeCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsDisableAllForWebApp(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling recommendationsDisableAllForWebApp(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsDisableAllForWebApp(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsDisableAllForWebApp(Async)");
        }

        return recommendationsDisableAllForWebAppCall(resourceGroupName, siteName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Disable all recommendations for an app.
     * Description for Disable all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void recommendationsDisableAllForWebApp(String resourceGroupName, String siteName, String subscriptionId, String apiVersion) throws ApiException {
        recommendationsDisableAllForWebAppWithHttpInfo(resourceGroupName, siteName, subscriptionId, apiVersion);
    }

    /**
     * Disable all recommendations for an app.
     * Description for Disable all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recommendationsDisableAllForWebAppWithHttpInfo(String resourceGroupName, String siteName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recommendationsDisableAllForWebAppValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disable all recommendations for an app. (asynchronously)
     * Description for Disable all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsDisableAllForWebAppAsync(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsDisableAllForWebAppValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsDisableRecommendationForHostingEnvironment
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Site name (required)
     * @param name Rule name (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsDisableRecommendationForHostingEnvironmentCall(String resourceGroupName, String environmentName, String name, String hostingEnvironmentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}/disable"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "hostingEnvironmentName" + "}", localVarApiClient.escapeString(hostingEnvironmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environmentName", environmentName));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsDisableRecommendationForHostingEnvironmentValidateBeforeCall(String resourceGroupName, String environmentName, String name, String hostingEnvironmentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsDisableRecommendationForHostingEnvironment(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling recommendationsDisableRecommendationForHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling recommendationsDisableRecommendationForHostingEnvironment(Async)");
        }

        // verify the required parameter 'hostingEnvironmentName' is set
        if (hostingEnvironmentName == null) {
            throw new ApiException("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsDisableRecommendationForHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsDisableRecommendationForHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsDisableRecommendationForHostingEnvironment(Async)");
        }

        return recommendationsDisableRecommendationForHostingEnvironmentCall(resourceGroupName, environmentName, name, hostingEnvironmentName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Disables the specific rule for a web site permanently.
     * Description for Disables the specific rule for a web site permanently.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Site name (required)
     * @param name Rule name (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void recommendationsDisableRecommendationForHostingEnvironment(String resourceGroupName, String environmentName, String name, String hostingEnvironmentName, String subscriptionId, String apiVersion) throws ApiException {
        recommendationsDisableRecommendationForHostingEnvironmentWithHttpInfo(resourceGroupName, environmentName, name, hostingEnvironmentName, subscriptionId, apiVersion);
    }

    /**
     * Disables the specific rule for a web site permanently.
     * Description for Disables the specific rule for a web site permanently.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Site name (required)
     * @param name Rule name (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recommendationsDisableRecommendationForHostingEnvironmentWithHttpInfo(String resourceGroupName, String environmentName, String name, String hostingEnvironmentName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recommendationsDisableRecommendationForHostingEnvironmentValidateBeforeCall(resourceGroupName, environmentName, name, hostingEnvironmentName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disables the specific rule for a web site permanently. (asynchronously)
     * Description for Disables the specific rule for a web site permanently.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Site name (required)
     * @param name Rule name (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsDisableRecommendationForHostingEnvironmentAsync(String resourceGroupName, String environmentName, String name, String hostingEnvironmentName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsDisableRecommendationForHostingEnvironmentValidateBeforeCall(resourceGroupName, environmentName, name, hostingEnvironmentName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsDisableRecommendationForSite
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site name (required)
     * @param name Rule name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsDisableRecommendationForSiteCall(String resourceGroupName, String siteName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}/disable"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsDisableRecommendationForSiteValidateBeforeCall(String resourceGroupName, String siteName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsDisableRecommendationForSite(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling recommendationsDisableRecommendationForSite(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling recommendationsDisableRecommendationForSite(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsDisableRecommendationForSite(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsDisableRecommendationForSite(Async)");
        }

        return recommendationsDisableRecommendationForSiteCall(resourceGroupName, siteName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Disables the specific rule for a web site permanently.
     * Description for Disables the specific rule for a web site permanently.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site name (required)
     * @param name Rule name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void recommendationsDisableRecommendationForSite(String resourceGroupName, String siteName, String name, String subscriptionId, String apiVersion) throws ApiException {
        recommendationsDisableRecommendationForSiteWithHttpInfo(resourceGroupName, siteName, name, subscriptionId, apiVersion);
    }

    /**
     * Disables the specific rule for a web site permanently.
     * Description for Disables the specific rule for a web site permanently.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site name (required)
     * @param name Rule name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recommendationsDisableRecommendationForSiteWithHttpInfo(String resourceGroupName, String siteName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recommendationsDisableRecommendationForSiteValidateBeforeCall(resourceGroupName, siteName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disables the specific rule for a web site permanently. (asynchronously)
     * Description for Disables the specific rule for a web site permanently.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Site name (required)
     * @param name Rule name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsDisableRecommendationForSiteAsync(String resourceGroupName, String siteName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsDisableRecommendationForSiteValidateBeforeCall(resourceGroupName, siteName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsDisableRecommendationForSubscription
     * @param name Rule name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsDisableRecommendationForSubscriptionCall(String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsDisableRecommendationForSubscriptionValidateBeforeCall(String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling recommendationsDisableRecommendationForSubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsDisableRecommendationForSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsDisableRecommendationForSubscription(Async)");
        }

        return recommendationsDisableRecommendationForSubscriptionCall(name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Disables the specified rule so it will not apply to a subscription in the future.
     * Description for Disables the specified rule so it will not apply to a subscription in the future.
     * @param name Rule name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void recommendationsDisableRecommendationForSubscription(String name, String subscriptionId, String apiVersion) throws ApiException {
        recommendationsDisableRecommendationForSubscriptionWithHttpInfo(name, subscriptionId, apiVersion);
    }

    /**
     * Disables the specified rule so it will not apply to a subscription in the future.
     * Description for Disables the specified rule so it will not apply to a subscription in the future.
     * @param name Rule name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recommendationsDisableRecommendationForSubscriptionWithHttpInfo(String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recommendationsDisableRecommendationForSubscriptionValidateBeforeCall(name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Disables the specified rule so it will not apply to a subscription in the future. (asynchronously)
     * Description for Disables the specified rule so it will not apply to a subscription in the future.
     * @param name Rule name (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled recommendations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsDisableRecommendationForSubscriptionAsync(String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsDisableRecommendationForSubscriptionValidateBeforeCall(name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsGetRuleDetailsByHostingEnvironment
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the hosting environment. (required)
     * @param name Name of the recommendation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param updateSeen Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the recommendation object. (optional)
     * @param recommendationId The GUID of the recommendation object if you query an expired one. You don&#39;t need to specify it to query an active entry. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsGetRuleDetailsByHostingEnvironmentCall(String resourceGroupName, String hostingEnvironmentName, String name, String subscriptionId, String apiVersion, Boolean updateSeen, String recommendationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hostingEnvironmentName" + "}", localVarApiClient.escapeString(hostingEnvironmentName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSeen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateSeen", updateSeen));
        }

        if (recommendationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recommendationId", recommendationId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsGetRuleDetailsByHostingEnvironmentValidateBeforeCall(String resourceGroupName, String hostingEnvironmentName, String name, String subscriptionId, String apiVersion, Boolean updateSeen, String recommendationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsGetRuleDetailsByHostingEnvironment(Async)");
        }

        // verify the required parameter 'hostingEnvironmentName' is set
        if (hostingEnvironmentName == null) {
            throw new ApiException("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsGetRuleDetailsByHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling recommendationsGetRuleDetailsByHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsGetRuleDetailsByHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsGetRuleDetailsByHostingEnvironment(Async)");
        }

        return recommendationsGetRuleDetailsByHostingEnvironmentCall(resourceGroupName, hostingEnvironmentName, name, subscriptionId, apiVersion, updateSeen, recommendationId, _callback);

    }

    /**
     * Get a recommendation rule for an app.
     * Description for Get a recommendation rule for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the hosting environment. (required)
     * @param name Name of the recommendation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param updateSeen Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the recommendation object. (optional)
     * @param recommendationId The GUID of the recommendation object if you query an expired one. You don&#39;t need to specify it to query an active entry. (optional)
     * @return RecommendationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationRule recommendationsGetRuleDetailsByHostingEnvironment(String resourceGroupName, String hostingEnvironmentName, String name, String subscriptionId, String apiVersion, Boolean updateSeen, String recommendationId) throws ApiException {
        ApiResponse<RecommendationRule> localVarResp = recommendationsGetRuleDetailsByHostingEnvironmentWithHttpInfo(resourceGroupName, hostingEnvironmentName, name, subscriptionId, apiVersion, updateSeen, recommendationId);
        return localVarResp.getData();
    }

    /**
     * Get a recommendation rule for an app.
     * Description for Get a recommendation rule for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the hosting environment. (required)
     * @param name Name of the recommendation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param updateSeen Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the recommendation object. (optional)
     * @param recommendationId The GUID of the recommendation object if you query an expired one. You don&#39;t need to specify it to query an active entry. (optional)
     * @return ApiResponse&lt;RecommendationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationRule> recommendationsGetRuleDetailsByHostingEnvironmentWithHttpInfo(String resourceGroupName, String hostingEnvironmentName, String name, String subscriptionId, String apiVersion, Boolean updateSeen, String recommendationId) throws ApiException {
        okhttp3.Call localVarCall = recommendationsGetRuleDetailsByHostingEnvironmentValidateBeforeCall(resourceGroupName, hostingEnvironmentName, name, subscriptionId, apiVersion, updateSeen, recommendationId, null);
        Type localVarReturnType = new TypeToken<RecommendationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a recommendation rule for an app. (asynchronously)
     * Description for Get a recommendation rule for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the hosting environment. (required)
     * @param name Name of the recommendation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param updateSeen Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the recommendation object. (optional)
     * @param recommendationId The GUID of the recommendation object if you query an expired one. You don&#39;t need to specify it to query an active entry. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsGetRuleDetailsByHostingEnvironmentAsync(String resourceGroupName, String hostingEnvironmentName, String name, String subscriptionId, String apiVersion, Boolean updateSeen, String recommendationId, final ApiCallback<RecommendationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsGetRuleDetailsByHostingEnvironmentValidateBeforeCall(resourceGroupName, hostingEnvironmentName, name, subscriptionId, apiVersion, updateSeen, recommendationId, _callback);
        Type localVarReturnType = new TypeToken<RecommendationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsGetRuleDetailsByWebApp
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param name Name of the recommendation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param updateSeen Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the recommendation object. (optional)
     * @param recommendationId The GUID of the recommendation object if you query an expired one. You don&#39;t need to specify it to query an active entry. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsGetRuleDetailsByWebAppCall(String resourceGroupName, String siteName, String name, String subscriptionId, String apiVersion, Boolean updateSeen, String recommendationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updateSeen != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateSeen", updateSeen));
        }

        if (recommendationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recommendationId", recommendationId));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsGetRuleDetailsByWebAppValidateBeforeCall(String resourceGroupName, String siteName, String name, String subscriptionId, String apiVersion, Boolean updateSeen, String recommendationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsGetRuleDetailsByWebApp(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling recommendationsGetRuleDetailsByWebApp(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling recommendationsGetRuleDetailsByWebApp(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsGetRuleDetailsByWebApp(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsGetRuleDetailsByWebApp(Async)");
        }

        return recommendationsGetRuleDetailsByWebAppCall(resourceGroupName, siteName, name, subscriptionId, apiVersion, updateSeen, recommendationId, _callback);

    }

    /**
     * Get a recommendation rule for an app.
     * Description for Get a recommendation rule for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param name Name of the recommendation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param updateSeen Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the recommendation object. (optional)
     * @param recommendationId The GUID of the recommendation object if you query an expired one. You don&#39;t need to specify it to query an active entry. (optional)
     * @return RecommendationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationRule recommendationsGetRuleDetailsByWebApp(String resourceGroupName, String siteName, String name, String subscriptionId, String apiVersion, Boolean updateSeen, String recommendationId) throws ApiException {
        ApiResponse<RecommendationRule> localVarResp = recommendationsGetRuleDetailsByWebAppWithHttpInfo(resourceGroupName, siteName, name, subscriptionId, apiVersion, updateSeen, recommendationId);
        return localVarResp.getData();
    }

    /**
     * Get a recommendation rule for an app.
     * Description for Get a recommendation rule for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param name Name of the recommendation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param updateSeen Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the recommendation object. (optional)
     * @param recommendationId The GUID of the recommendation object if you query an expired one. You don&#39;t need to specify it to query an active entry. (optional)
     * @return ApiResponse&lt;RecommendationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationRule> recommendationsGetRuleDetailsByWebAppWithHttpInfo(String resourceGroupName, String siteName, String name, String subscriptionId, String apiVersion, Boolean updateSeen, String recommendationId) throws ApiException {
        okhttp3.Call localVarCall = recommendationsGetRuleDetailsByWebAppValidateBeforeCall(resourceGroupName, siteName, name, subscriptionId, apiVersion, updateSeen, recommendationId, null);
        Type localVarReturnType = new TypeToken<RecommendationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a recommendation rule for an app. (asynchronously)
     * Description for Get a recommendation rule for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param name Name of the recommendation. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param updateSeen Specify &lt;code&gt;true&lt;/code&gt; to update the last-seen timestamp of the recommendation object. (optional)
     * @param recommendationId The GUID of the recommendation object if you query an expired one. You don&#39;t need to specify it to query an active entry. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsGetRuleDetailsByWebAppAsync(String resourceGroupName, String siteName, String name, String subscriptionId, String apiVersion, Boolean updateSeen, String recommendationId, final ApiCallback<RecommendationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsGetRuleDetailsByWebAppValidateBeforeCall(resourceGroupName, siteName, name, subscriptionId, apiVersion, updateSeen, recommendationId, _callback);
        Type localVarReturnType = new TypeToken<RecommendationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsList
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsListCall(String subscriptionId, String apiVersion, Boolean featured, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsListValidateBeforeCall(String subscriptionId, String apiVersion, Boolean featured, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsList(Async)");
        }

        return recommendationsListCall(subscriptionId, apiVersion, featured, $filter, _callback);

    }

    /**
     * List all recommendations for a subscription.
     * Description for List all recommendations for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @return RecommendationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationCollection recommendationsList(String subscriptionId, String apiVersion, Boolean featured, String $filter) throws ApiException {
        ApiResponse<RecommendationCollection> localVarResp = recommendationsListWithHttpInfo(subscriptionId, apiVersion, featured, $filter);
        return localVarResp.getData();
    }

    /**
     * List all recommendations for a subscription.
     * Description for List all recommendations for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @return ApiResponse&lt;RecommendationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationCollection> recommendationsListWithHttpInfo(String subscriptionId, String apiVersion, Boolean featured, String $filter) throws ApiException {
        okhttp3.Call localVarCall = recommendationsListValidateBeforeCall(subscriptionId, apiVersion, featured, $filter, null);
        Type localVarReturnType = new TypeToken<RecommendationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all recommendations for a subscription. (asynchronously)
     * Description for List all recommendations for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsListAsync(String subscriptionId, String apiVersion, Boolean featured, String $filter, final ApiCallback<RecommendationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsListValidateBeforeCall(subscriptionId, apiVersion, featured, $filter, _callback);
        Type localVarReturnType = new TypeToken<RecommendationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsListHistoryForHostingEnvironment
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the hosting environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param expiredOnly Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsListHistoryForHostingEnvironmentCall(String resourceGroupName, String hostingEnvironmentName, String subscriptionId, String apiVersion, Boolean expiredOnly, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendationHistory"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hostingEnvironmentName" + "}", localVarApiClient.escapeString(hostingEnvironmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expiredOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiredOnly", expiredOnly));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsListHistoryForHostingEnvironmentValidateBeforeCall(String resourceGroupName, String hostingEnvironmentName, String subscriptionId, String apiVersion, Boolean expiredOnly, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsListHistoryForHostingEnvironment(Async)");
        }

        // verify the required parameter 'hostingEnvironmentName' is set
        if (hostingEnvironmentName == null) {
            throw new ApiException("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsListHistoryForHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsListHistoryForHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsListHistoryForHostingEnvironment(Async)");
        }

        return recommendationsListHistoryForHostingEnvironmentCall(resourceGroupName, hostingEnvironmentName, subscriptionId, apiVersion, expiredOnly, $filter, _callback);

    }

    /**
     * Get past recommendations for an app, optionally specified by the time range.
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the hosting environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param expiredOnly Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @return RecommendationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationCollection recommendationsListHistoryForHostingEnvironment(String resourceGroupName, String hostingEnvironmentName, String subscriptionId, String apiVersion, Boolean expiredOnly, String $filter) throws ApiException {
        ApiResponse<RecommendationCollection> localVarResp = recommendationsListHistoryForHostingEnvironmentWithHttpInfo(resourceGroupName, hostingEnvironmentName, subscriptionId, apiVersion, expiredOnly, $filter);
        return localVarResp.getData();
    }

    /**
     * Get past recommendations for an app, optionally specified by the time range.
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the hosting environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param expiredOnly Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @return ApiResponse&lt;RecommendationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationCollection> recommendationsListHistoryForHostingEnvironmentWithHttpInfo(String resourceGroupName, String hostingEnvironmentName, String subscriptionId, String apiVersion, Boolean expiredOnly, String $filter) throws ApiException {
        okhttp3.Call localVarCall = recommendationsListHistoryForHostingEnvironmentValidateBeforeCall(resourceGroupName, hostingEnvironmentName, subscriptionId, apiVersion, expiredOnly, $filter, null);
        Type localVarReturnType = new TypeToken<RecommendationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get past recommendations for an app, optionally specified by the time range. (asynchronously)
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the hosting environment. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param expiredOnly Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsListHistoryForHostingEnvironmentAsync(String resourceGroupName, String hostingEnvironmentName, String subscriptionId, String apiVersion, Boolean expiredOnly, String $filter, final ApiCallback<RecommendationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsListHistoryForHostingEnvironmentValidateBeforeCall(resourceGroupName, hostingEnvironmentName, subscriptionId, apiVersion, expiredOnly, $filter, _callback);
        Type localVarReturnType = new TypeToken<RecommendationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsListHistoryForWebApp
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param expiredOnly Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsListHistoryForWebAppCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, Boolean expiredOnly, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expiredOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiredOnly", expiredOnly));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsListHistoryForWebAppValidateBeforeCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, Boolean expiredOnly, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsListHistoryForWebApp(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling recommendationsListHistoryForWebApp(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsListHistoryForWebApp(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsListHistoryForWebApp(Async)");
        }

        return recommendationsListHistoryForWebAppCall(resourceGroupName, siteName, subscriptionId, apiVersion, expiredOnly, $filter, _callback);

    }

    /**
     * Get past recommendations for an app, optionally specified by the time range.
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param expiredOnly Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @return RecommendationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationCollection recommendationsListHistoryForWebApp(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, Boolean expiredOnly, String $filter) throws ApiException {
        ApiResponse<RecommendationCollection> localVarResp = recommendationsListHistoryForWebAppWithHttpInfo(resourceGroupName, siteName, subscriptionId, apiVersion, expiredOnly, $filter);
        return localVarResp.getData();
    }

    /**
     * Get past recommendations for an app, optionally specified by the time range.
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param expiredOnly Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @return ApiResponse&lt;RecommendationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationCollection> recommendationsListHistoryForWebAppWithHttpInfo(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, Boolean expiredOnly, String $filter) throws ApiException {
        okhttp3.Call localVarCall = recommendationsListHistoryForWebAppValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, expiredOnly, $filter, null);
        Type localVarReturnType = new TypeToken<RecommendationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get past recommendations for an app, optionally specified by the time range. (asynchronously)
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param expiredOnly Specify &lt;code&gt;false&lt;/code&gt; to return all recommendations. The default is &lt;code&gt;true&lt;/code&gt;, which returns only expired recommendations. (optional)
     * @param $filter Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration&#39;[PT1H|PT1M|P1D] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsListHistoryForWebAppAsync(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, Boolean expiredOnly, String $filter, final ApiCallback<RecommendationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsListHistoryForWebAppValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, expiredOnly, $filter, _callback);
        Type localVarReturnType = new TypeToken<RecommendationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsListRecommendedRulesForHostingEnvironment
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsListRecommendedRulesForHostingEnvironmentCall(String resourceGroupName, String hostingEnvironmentName, String subscriptionId, String apiVersion, Boolean featured, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hostingEnvironmentName" + "}", localVarApiClient.escapeString(hostingEnvironmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsListRecommendedRulesForHostingEnvironmentValidateBeforeCall(String resourceGroupName, String hostingEnvironmentName, String subscriptionId, String apiVersion, Boolean featured, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsListRecommendedRulesForHostingEnvironment(Async)");
        }

        // verify the required parameter 'hostingEnvironmentName' is set
        if (hostingEnvironmentName == null) {
            throw new ApiException("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsListRecommendedRulesForHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsListRecommendedRulesForHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsListRecommendedRulesForHostingEnvironment(Async)");
        }

        return recommendationsListRecommendedRulesForHostingEnvironmentCall(resourceGroupName, hostingEnvironmentName, subscriptionId, apiVersion, featured, $filter, _callback);

    }

    /**
     * Get all recommendations for an app.
     * Description for Get all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; (optional)
     * @return RecommendationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationCollection recommendationsListRecommendedRulesForHostingEnvironment(String resourceGroupName, String hostingEnvironmentName, String subscriptionId, String apiVersion, Boolean featured, String $filter) throws ApiException {
        ApiResponse<RecommendationCollection> localVarResp = recommendationsListRecommendedRulesForHostingEnvironmentWithHttpInfo(resourceGroupName, hostingEnvironmentName, subscriptionId, apiVersion, featured, $filter);
        return localVarResp.getData();
    }

    /**
     * Get all recommendations for an app.
     * Description for Get all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; (optional)
     * @return ApiResponse&lt;RecommendationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationCollection> recommendationsListRecommendedRulesForHostingEnvironmentWithHttpInfo(String resourceGroupName, String hostingEnvironmentName, String subscriptionId, String apiVersion, Boolean featured, String $filter) throws ApiException {
        okhttp3.Call localVarCall = recommendationsListRecommendedRulesForHostingEnvironmentValidateBeforeCall(resourceGroupName, hostingEnvironmentName, subscriptionId, apiVersion, featured, $filter, null);
        Type localVarReturnType = new TypeToken<RecommendationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all recommendations for an app. (asynchronously)
     * Description for Get all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param hostingEnvironmentName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsListRecommendedRulesForHostingEnvironmentAsync(String resourceGroupName, String hostingEnvironmentName, String subscriptionId, String apiVersion, Boolean featured, String $filter, final ApiCallback<RecommendationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsListRecommendedRulesForHostingEnvironmentValidateBeforeCall(resourceGroupName, hostingEnvironmentName, subscriptionId, apiVersion, featured, $filter, _callback);
        Type localVarReturnType = new TypeToken<RecommendationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsListRecommendedRulesForWebApp
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsListRecommendedRulesForWebAppCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, Boolean featured, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (featured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("featured", featured));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsListRecommendedRulesForWebAppValidateBeforeCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, Boolean featured, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsListRecommendedRulesForWebApp(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling recommendationsListRecommendedRulesForWebApp(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsListRecommendedRulesForWebApp(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsListRecommendedRulesForWebApp(Async)");
        }

        return recommendationsListRecommendedRulesForWebAppCall(resourceGroupName, siteName, subscriptionId, apiVersion, featured, $filter, _callback);

    }

    /**
     * Get all recommendations for an app.
     * Description for Get all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; (optional)
     * @return RecommendationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationCollection recommendationsListRecommendedRulesForWebApp(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, Boolean featured, String $filter) throws ApiException {
        ApiResponse<RecommendationCollection> localVarResp = recommendationsListRecommendedRulesForWebAppWithHttpInfo(resourceGroupName, siteName, subscriptionId, apiVersion, featured, $filter);
        return localVarResp.getData();
    }

    /**
     * Get all recommendations for an app.
     * Description for Get all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; (optional)
     * @return ApiResponse&lt;RecommendationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationCollection> recommendationsListRecommendedRulesForWebAppWithHttpInfo(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, Boolean featured, String $filter) throws ApiException {
        okhttp3.Call localVarCall = recommendationsListRecommendedRulesForWebAppValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, featured, $filter, null);
        Type localVarReturnType = new TypeToken<RecommendationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all recommendations for an app. (asynchronously)
     * Description for Get all recommendations for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param featured Specify &lt;code&gt;true&lt;/code&gt; to return only the most critical recommendations. The default is &lt;code&gt;false&lt;/code&gt;, which returns all recommendations. (optional)
     * @param $filter Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;channel eq &#39;Api&#39; or channel eq &#39;Notification&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsListRecommendedRulesForWebAppAsync(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, Boolean featured, String $filter, final ApiCallback<RecommendationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsListRecommendedRulesForWebAppValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, featured, $filter, _callback);
        Type localVarReturnType = new TypeToken<RecommendationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsResetAllFilters
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsResetAllFiltersCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsResetAllFiltersValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsResetAllFilters(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsResetAllFilters(Async)");
        }

        return recommendationsResetAllFiltersCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Reset all recommendation opt-out settings for a subscription.
     * Description for Reset all recommendation opt-out settings for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void recommendationsResetAllFilters(String subscriptionId, String apiVersion) throws ApiException {
        recommendationsResetAllFiltersWithHttpInfo(subscriptionId, apiVersion);
    }

    /**
     * Reset all recommendation opt-out settings for a subscription.
     * Description for Reset all recommendation opt-out settings for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recommendationsResetAllFiltersWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recommendationsResetAllFiltersValidateBeforeCall(subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset all recommendation opt-out settings for a subscription. (asynchronously)
     * Description for Reset all recommendation opt-out settings for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsResetAllFiltersAsync(String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsResetAllFiltersValidateBeforeCall(subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsResetAllFiltersForHostingEnvironment
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Name of the app. (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsResetAllFiltersForHostingEnvironmentCall(String resourceGroupName, String environmentName, String hostingEnvironmentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/reset"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hostingEnvironmentName" + "}", localVarApiClient.escapeString(hostingEnvironmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environmentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environmentName", environmentName));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsResetAllFiltersForHostingEnvironmentValidateBeforeCall(String resourceGroupName, String environmentName, String hostingEnvironmentName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsResetAllFiltersForHostingEnvironment(Async)");
        }

        // verify the required parameter 'environmentName' is set
        if (environmentName == null) {
            throw new ApiException("Missing the required parameter 'environmentName' when calling recommendationsResetAllFiltersForHostingEnvironment(Async)");
        }

        // verify the required parameter 'hostingEnvironmentName' is set
        if (hostingEnvironmentName == null) {
            throw new ApiException("Missing the required parameter 'hostingEnvironmentName' when calling recommendationsResetAllFiltersForHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsResetAllFiltersForHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsResetAllFiltersForHostingEnvironment(Async)");
        }

        return recommendationsResetAllFiltersForHostingEnvironmentCall(resourceGroupName, environmentName, hostingEnvironmentName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Reset all recommendation opt-out settings for an app.
     * Description for Reset all recommendation opt-out settings for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Name of the app. (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void recommendationsResetAllFiltersForHostingEnvironment(String resourceGroupName, String environmentName, String hostingEnvironmentName, String subscriptionId, String apiVersion) throws ApiException {
        recommendationsResetAllFiltersForHostingEnvironmentWithHttpInfo(resourceGroupName, environmentName, hostingEnvironmentName, subscriptionId, apiVersion);
    }

    /**
     * Reset all recommendation opt-out settings for an app.
     * Description for Reset all recommendation opt-out settings for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Name of the app. (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recommendationsResetAllFiltersForHostingEnvironmentWithHttpInfo(String resourceGroupName, String environmentName, String hostingEnvironmentName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recommendationsResetAllFiltersForHostingEnvironmentValidateBeforeCall(resourceGroupName, environmentName, hostingEnvironmentName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset all recommendation opt-out settings for an app. (asynchronously)
     * Description for Reset all recommendation opt-out settings for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param environmentName Name of the app. (required)
     * @param hostingEnvironmentName  (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsResetAllFiltersForHostingEnvironmentAsync(String resourceGroupName, String environmentName, String hostingEnvironmentName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsResetAllFiltersForHostingEnvironmentValidateBeforeCall(resourceGroupName, environmentName, hostingEnvironmentName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for recommendationsResetAllFiltersForWebApp
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsResetAllFiltersForWebAppCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/reset"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "siteName" + "}", localVarApiClient.escapeString(siteName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recommendationsResetAllFiltersForWebAppValidateBeforeCall(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recommendationsResetAllFiltersForWebApp(Async)");
        }

        // verify the required parameter 'siteName' is set
        if (siteName == null) {
            throw new ApiException("Missing the required parameter 'siteName' when calling recommendationsResetAllFiltersForWebApp(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recommendationsResetAllFiltersForWebApp(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recommendationsResetAllFiltersForWebApp(Async)");
        }

        return recommendationsResetAllFiltersForWebAppCall(resourceGroupName, siteName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Reset all recommendation opt-out settings for an app.
     * Description for Reset all recommendation opt-out settings for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void recommendationsResetAllFiltersForWebApp(String resourceGroupName, String siteName, String subscriptionId, String apiVersion) throws ApiException {
        recommendationsResetAllFiltersForWebAppWithHttpInfo(resourceGroupName, siteName, subscriptionId, apiVersion);
    }

    /**
     * Reset all recommendation opt-out settings for an app.
     * Description for Reset all recommendation opt-out settings for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> recommendationsResetAllFiltersForWebAppWithHttpInfo(String resourceGroupName, String siteName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = recommendationsResetAllFiltersForWebAppValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset all recommendation opt-out settings for an app. (asynchronously)
     * Description for Reset all recommendation opt-out settings for an app.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param siteName Name of the app. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recommendationsResetAllFiltersForWebAppAsync(String resourceGroupName, String siteName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recommendationsResetAllFiltersForWebAppValidateBeforeCall(resourceGroupName, siteName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
