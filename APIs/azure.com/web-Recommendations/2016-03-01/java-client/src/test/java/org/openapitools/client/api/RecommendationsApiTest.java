/*
 * Recommendations API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RecommendationCollection;
import org.openapitools.client.model.RecommendationRule;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecommendationsApi
 */
@Disabled
public class RecommendationsApiTest {

    private final RecommendationsApi api = new RecommendationsApi();

    /**
     * Disable all recommendations for an app.
     *
     * Disable all recommendations for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsDisableAllForWebAppTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.recommendationsDisableAllForWebApp(resourceGroupName, siteName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Disables the specific rule for a web site permanently.
     *
     * Disables the specific rule for a web site permanently.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsDisableRecommendationForSiteTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.recommendationsDisableRecommendationForSite(resourceGroupName, siteName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Disables the specified rule so it will not apply to a subscription in the future.
     *
     * Disables the specified rule so it will not apply to a subscription in the future.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsDisableRecommendationForSubscriptionTest() throws ApiException {
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.recommendationsDisableRecommendationForSubscription(name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a recommendation rule for an app.
     *
     * Get a recommendation rule for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsGetRuleDetailsByWebAppTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean updateSeen = null;
        String recommendationId = null;
        RecommendationRule response = api.recommendationsGetRuleDetailsByWebApp(resourceGroupName, siteName, name, subscriptionId, apiVersion, updateSeen, recommendationId);
        // TODO: test validations
    }

    /**
     * List all recommendations for a subscription.
     *
     * List all recommendations for a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        Boolean featured = null;
        String $filter = null;
        RecommendationCollection response = api.recommendationsList(subscriptionId, apiVersion, featured, $filter);
        // TODO: test validations
    }

    /**
     * Get past recommendations for an app, optionally specified by the time range.
     *
     * Get past recommendations for an app, optionally specified by the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsListHistoryForWebAppTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        RecommendationCollection response = api.recommendationsListHistoryForWebApp(resourceGroupName, siteName, subscriptionId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Get all recommendations for an app.
     *
     * Get all recommendations for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsListRecommendedRulesForWebAppTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean featured = null;
        String $filter = null;
        RecommendationCollection response = api.recommendationsListRecommendedRulesForWebApp(resourceGroupName, siteName, subscriptionId, apiVersion, featured, $filter);
        // TODO: test validations
    }

    /**
     * Reset all recommendation opt-out settings for a subscription.
     *
     * Reset all recommendation opt-out settings for a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsResetAllFiltersTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        api.recommendationsResetAllFilters(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Reset all recommendation opt-out settings for an app.
     *
     * Reset all recommendation opt-out settings for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsResetAllFiltersForWebAppTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.recommendationsResetAllFiltersForWebApp(resourceGroupName, siteName, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
