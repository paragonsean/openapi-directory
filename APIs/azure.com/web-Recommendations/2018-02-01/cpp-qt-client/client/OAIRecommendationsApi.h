/**
 * Recommendations API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecommendationsApi_H
#define OAI_OAIRecommendationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRecommendationCollection.h"
#include "OAIRecommendationRule.h"
#include "OAIRecommendations_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRecommendationsApi : public QObject {
    Q_OBJECT

public:
    OAIRecommendationsApi(const int timeOut = 0);
    ~OAIRecommendationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  hosting_environment_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recommendationsDisableAllForHostingEnvironment(const QString &resource_group_name, const QString &environment_name, const QString &hosting_environment_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recommendationsDisableAllForWebApp(const QString &resource_group_name, const QString &site_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  hosting_environment_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recommendationsDisableRecommendationForHostingEnvironment(const QString &resource_group_name, const QString &environment_name, const QString &name, const QString &hosting_environment_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recommendationsDisableRecommendationForSite(const QString &resource_group_name, const QString &site_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recommendationsDisableRecommendationForSubscription(const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hosting_environment_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_seen bool [optional]
    * @param[in]  recommendation_id QString [optional]
    */
    virtual void recommendationsGetRuleDetailsByHostingEnvironment(const QString &resource_group_name, const QString &hosting_environment_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &update_seen = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &recommendation_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  update_seen bool [optional]
    * @param[in]  recommendation_id QString [optional]
    */
    virtual void recommendationsGetRuleDetailsByWebApp(const QString &resource_group_name, const QString &site_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &update_seen = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &recommendation_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  featured bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void recommendationsList(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &featured = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hosting_environment_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expired_only bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void recommendationsListHistoryForHostingEnvironment(const QString &resource_group_name, const QString &hosting_environment_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &expired_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expired_only bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void recommendationsListHistoryForWebApp(const QString &resource_group_name, const QString &site_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &expired_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hosting_environment_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  featured bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void recommendationsListRecommendedRulesForHostingEnvironment(const QString &resource_group_name, const QString &hosting_environment_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &featured = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  featured bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void recommendationsListRecommendedRulesForWebApp(const QString &resource_group_name, const QString &site_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &featured = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recommendationsResetAllFilters(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  environment_name QString [required]
    * @param[in]  hosting_environment_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recommendationsResetAllFiltersForHostingEnvironment(const QString &resource_group_name, const QString &environment_name, const QString &hosting_environment_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recommendationsResetAllFiltersForWebApp(const QString &resource_group_name, const QString &site_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void recommendationsDisableAllForHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void recommendationsDisableAllForWebAppCallback(OAIHttpRequestWorker *worker);
    void recommendationsDisableRecommendationForHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void recommendationsDisableRecommendationForSiteCallback(OAIHttpRequestWorker *worker);
    void recommendationsDisableRecommendationForSubscriptionCallback(OAIHttpRequestWorker *worker);
    void recommendationsGetRuleDetailsByHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void recommendationsGetRuleDetailsByWebAppCallback(OAIHttpRequestWorker *worker);
    void recommendationsListCallback(OAIHttpRequestWorker *worker);
    void recommendationsListHistoryForHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void recommendationsListHistoryForWebAppCallback(OAIHttpRequestWorker *worker);
    void recommendationsListRecommendedRulesForHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void recommendationsListRecommendedRulesForWebAppCallback(OAIHttpRequestWorker *worker);
    void recommendationsResetAllFiltersCallback(OAIHttpRequestWorker *worker);
    void recommendationsResetAllFiltersForHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void recommendationsResetAllFiltersForWebAppCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void recommendationsDisableAllForHostingEnvironmentSignal();
    void recommendationsDisableAllForWebAppSignal();
    void recommendationsDisableRecommendationForHostingEnvironmentSignal();
    void recommendationsDisableRecommendationForSiteSignal();
    void recommendationsDisableRecommendationForSubscriptionSignal();
    void recommendationsGetRuleDetailsByHostingEnvironmentSignal(OAIRecommendationRule summary);
    void recommendationsGetRuleDetailsByWebAppSignal(OAIRecommendationRule summary);
    void recommendationsListSignal(OAIRecommendationCollection summary);
    void recommendationsListHistoryForHostingEnvironmentSignal(OAIRecommendationCollection summary);
    void recommendationsListHistoryForWebAppSignal(OAIRecommendationCollection summary);
    void recommendationsListRecommendedRulesForHostingEnvironmentSignal(OAIRecommendationCollection summary);
    void recommendationsListRecommendedRulesForWebAppSignal(OAIRecommendationCollection summary);
    void recommendationsResetAllFiltersSignal();
    void recommendationsResetAllFiltersForHostingEnvironmentSignal();
    void recommendationsResetAllFiltersForWebAppSignal();


    void recommendationsDisableAllForHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void recommendationsDisableAllForWebAppSignalFull(OAIHttpRequestWorker *worker);
    void recommendationsDisableRecommendationForHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void recommendationsDisableRecommendationForSiteSignalFull(OAIHttpRequestWorker *worker);
    void recommendationsDisableRecommendationForSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void recommendationsGetRuleDetailsByHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationRule summary);
    void recommendationsGetRuleDetailsByWebAppSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationRule summary);
    void recommendationsListSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationCollection summary);
    void recommendationsListHistoryForHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationCollection summary);
    void recommendationsListHistoryForWebAppSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationCollection summary);
    void recommendationsListRecommendedRulesForHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationCollection summary);
    void recommendationsListRecommendedRulesForWebAppSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationCollection summary);
    void recommendationsResetAllFiltersSignalFull(OAIHttpRequestWorker *worker);
    void recommendationsResetAllFiltersForHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void recommendationsResetAllFiltersForWebAppSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use recommendationsDisableAllForHostingEnvironmentSignalError() instead")
    void recommendationsDisableAllForHostingEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsDisableAllForHostingEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsDisableAllForWebAppSignalError() instead")
    void recommendationsDisableAllForWebAppSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsDisableAllForWebAppSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsDisableRecommendationForHostingEnvironmentSignalError() instead")
    void recommendationsDisableRecommendationForHostingEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsDisableRecommendationForHostingEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsDisableRecommendationForSiteSignalError() instead")
    void recommendationsDisableRecommendationForSiteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsDisableRecommendationForSiteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsDisableRecommendationForSubscriptionSignalError() instead")
    void recommendationsDisableRecommendationForSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsDisableRecommendationForSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsGetRuleDetailsByHostingEnvironmentSignalError() instead")
    void recommendationsGetRuleDetailsByHostingEnvironmentSignalE(OAIRecommendationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRuleDetailsByHostingEnvironmentSignalError(OAIRecommendationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsGetRuleDetailsByWebAppSignalError() instead")
    void recommendationsGetRuleDetailsByWebAppSignalE(OAIRecommendationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRuleDetailsByWebAppSignalError(OAIRecommendationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsListSignalError() instead")
    void recommendationsListSignalE(OAIRecommendationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsListSignalError(OAIRecommendationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsListHistoryForHostingEnvironmentSignalError() instead")
    void recommendationsListHistoryForHostingEnvironmentSignalE(OAIRecommendationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsListHistoryForHostingEnvironmentSignalError(OAIRecommendationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsListHistoryForWebAppSignalError() instead")
    void recommendationsListHistoryForWebAppSignalE(OAIRecommendationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsListHistoryForWebAppSignalError(OAIRecommendationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsListRecommendedRulesForHostingEnvironmentSignalError() instead")
    void recommendationsListRecommendedRulesForHostingEnvironmentSignalE(OAIRecommendationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsListRecommendedRulesForHostingEnvironmentSignalError(OAIRecommendationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsListRecommendedRulesForWebAppSignalError() instead")
    void recommendationsListRecommendedRulesForWebAppSignalE(OAIRecommendationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsListRecommendedRulesForWebAppSignalError(OAIRecommendationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsResetAllFiltersSignalError() instead")
    void recommendationsResetAllFiltersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsResetAllFiltersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsResetAllFiltersForHostingEnvironmentSignalError() instead")
    void recommendationsResetAllFiltersForHostingEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsResetAllFiltersForHostingEnvironmentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsResetAllFiltersForWebAppSignalError() instead")
    void recommendationsResetAllFiltersForWebAppSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsResetAllFiltersForWebAppSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use recommendationsDisableAllForHostingEnvironmentSignalErrorFull() instead")
    void recommendationsDisableAllForHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsDisableAllForHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsDisableAllForWebAppSignalErrorFull() instead")
    void recommendationsDisableAllForWebAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsDisableAllForWebAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsDisableRecommendationForHostingEnvironmentSignalErrorFull() instead")
    void recommendationsDisableRecommendationForHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsDisableRecommendationForHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsDisableRecommendationForSiteSignalErrorFull() instead")
    void recommendationsDisableRecommendationForSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsDisableRecommendationForSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsDisableRecommendationForSubscriptionSignalErrorFull() instead")
    void recommendationsDisableRecommendationForSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsDisableRecommendationForSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsGetRuleDetailsByHostingEnvironmentSignalErrorFull() instead")
    void recommendationsGetRuleDetailsByHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRuleDetailsByHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsGetRuleDetailsByWebAppSignalErrorFull() instead")
    void recommendationsGetRuleDetailsByWebAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRuleDetailsByWebAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsListSignalErrorFull() instead")
    void recommendationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsListHistoryForHostingEnvironmentSignalErrorFull() instead")
    void recommendationsListHistoryForHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsListHistoryForHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsListHistoryForWebAppSignalErrorFull() instead")
    void recommendationsListHistoryForWebAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsListHistoryForWebAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsListRecommendedRulesForHostingEnvironmentSignalErrorFull() instead")
    void recommendationsListRecommendedRulesForHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsListRecommendedRulesForHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsListRecommendedRulesForWebAppSignalErrorFull() instead")
    void recommendationsListRecommendedRulesForWebAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsListRecommendedRulesForWebAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsResetAllFiltersSignalErrorFull() instead")
    void recommendationsResetAllFiltersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsResetAllFiltersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsResetAllFiltersForHostingEnvironmentSignalErrorFull() instead")
    void recommendationsResetAllFiltersForHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsResetAllFiltersForHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsResetAllFiltersForWebAppSignalErrorFull() instead")
    void recommendationsResetAllFiltersForWebAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsResetAllFiltersForWebAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
