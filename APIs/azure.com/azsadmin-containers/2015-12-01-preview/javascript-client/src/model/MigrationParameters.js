/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MigrationParameters model module.
 * @module model/MigrationParameters
 * @version 2015-12-01-preview
 */
class MigrationParameters {
    /**
     * Constructs a new <code>MigrationParameters</code>.
     * Parameters of container migration job.
     * @alias module:model/MigrationParameters
     * @param containerName {String} The name of the container to be migrated.
     * @param destinationShareUncPath {String} The UNC path of the destination share for migration.
     * @param storageAccountName {String} The name of the storage account where the container locates.
     */
    constructor(containerName, destinationShareUncPath, storageAccountName) { 
        
        MigrationParameters.initialize(this, containerName, destinationShareUncPath, storageAccountName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, containerName, destinationShareUncPath, storageAccountName) { 
        obj['containerName'] = containerName;
        obj['destinationShareUncPath'] = destinationShareUncPath;
        obj['storageAccountName'] = storageAccountName;
    }

    /**
     * Constructs a <code>MigrationParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MigrationParameters} obj Optional instance to populate.
     * @return {module:model/MigrationParameters} The populated <code>MigrationParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MigrationParameters();

            if (data.hasOwnProperty('containerName')) {
                obj['containerName'] = ApiClient.convertToType(data['containerName'], 'String');
            }
            if (data.hasOwnProperty('destinationShareUncPath')) {
                obj['destinationShareUncPath'] = ApiClient.convertToType(data['destinationShareUncPath'], 'String');
            }
            if (data.hasOwnProperty('storageAccountName')) {
                obj['storageAccountName'] = ApiClient.convertToType(data['storageAccountName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MigrationParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MigrationParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MigrationParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['containerName'] && !(typeof data['containerName'] === 'string' || data['containerName'] instanceof String)) {
            throw new Error("Expected the field `containerName` to be a primitive type in the JSON string but got " + data['containerName']);
        }
        // ensure the json data is a string
        if (data['destinationShareUncPath'] && !(typeof data['destinationShareUncPath'] === 'string' || data['destinationShareUncPath'] instanceof String)) {
            throw new Error("Expected the field `destinationShareUncPath` to be a primitive type in the JSON string but got " + data['destinationShareUncPath']);
        }
        // ensure the json data is a string
        if (data['storageAccountName'] && !(typeof data['storageAccountName'] === 'string' || data['storageAccountName'] instanceof String)) {
            throw new Error("Expected the field `storageAccountName` to be a primitive type in the JSON string but got " + data['storageAccountName']);
        }

        return true;
    }


}

MigrationParameters.RequiredProperties = ["containerName", "destinationShareUncPath", "storageAccountName"];

/**
 * The name of the container to be migrated.
 * @member {String} containerName
 */
MigrationParameters.prototype['containerName'] = undefined;

/**
 * The UNC path of the destination share for migration.
 * @member {String} destinationShareUncPath
 */
MigrationParameters.prototype['destinationShareUncPath'] = undefined;

/**
 * The name of the storage account where the container locates.
 * @member {String} storageAccountName
 */
MigrationParameters.prototype['storageAccountName'] = undefined;






export default MigrationParameters;

