/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Container model module.
 * @module model/Container
 * @version 2015-12-01-preview
 */
class Container {
    /**
     * Constructs a new <code>Container</code>.
     * Container properties.
     * @alias module:model/Container
     */
    constructor() { 
        
        Container.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Container</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Container} obj Optional instance to populate.
     * @return {module:model/Container} The populated <code>Container</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Container();

            if (data.hasOwnProperty('accountid')) {
                obj['accountid'] = ApiClient.convertToType(data['accountid'], 'String');
            }
            if (data.hasOwnProperty('accountname')) {
                obj['accountname'] = ApiClient.convertToType(data['accountname'], 'String');
            }
            if (data.hasOwnProperty('containerState')) {
                obj['containerState'] = ApiClient.convertToType(data['containerState'], 'String');
            }
            if (data.hasOwnProperty('containerid')) {
                obj['containerid'] = ApiClient.convertToType(data['containerid'], 'Number');
            }
            if (data.hasOwnProperty('containername')) {
                obj['containername'] = ApiClient.convertToType(data['containername'], 'String');
            }
            if (data.hasOwnProperty('sharename')) {
                obj['sharename'] = ApiClient.convertToType(data['sharename'], 'String');
            }
            if (data.hasOwnProperty('usedBytesInPrimaryVolume')) {
                obj['usedBytesInPrimaryVolume'] = ApiClient.convertToType(data['usedBytesInPrimaryVolume'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Container</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Container</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountid'] && !(typeof data['accountid'] === 'string' || data['accountid'] instanceof String)) {
            throw new Error("Expected the field `accountid` to be a primitive type in the JSON string but got " + data['accountid']);
        }
        // ensure the json data is a string
        if (data['accountname'] && !(typeof data['accountname'] === 'string' || data['accountname'] instanceof String)) {
            throw new Error("Expected the field `accountname` to be a primitive type in the JSON string but got " + data['accountname']);
        }
        // ensure the json data is a string
        if (data['containerState'] && !(typeof data['containerState'] === 'string' || data['containerState'] instanceof String)) {
            throw new Error("Expected the field `containerState` to be a primitive type in the JSON string but got " + data['containerState']);
        }
        // ensure the json data is a string
        if (data['containername'] && !(typeof data['containername'] === 'string' || data['containername'] instanceof String)) {
            throw new Error("Expected the field `containername` to be a primitive type in the JSON string but got " + data['containername']);
        }
        // ensure the json data is a string
        if (data['sharename'] && !(typeof data['sharename'] === 'string' || data['sharename'] instanceof String)) {
            throw new Error("Expected the field `sharename` to be a primitive type in the JSON string but got " + data['sharename']);
        }

        return true;
    }


}



/**
 * The ID of the storage account.
 * @member {String} accountid
 */
Container.prototype['accountid'] = undefined;

/**
 * The name of storage account where the container locates.
 * @member {String} accountname
 */
Container.prototype['accountname'] = undefined;

/**
 * The current state of the container.
 * @member {String} containerState
 */
Container.prototype['containerState'] = undefined;

/**
 * The container ID.
 * @member {Number} containerid
 */
Container.prototype['containerid'] = undefined;

/**
 * Container name.
 * @member {String} containername
 */
Container.prototype['containername'] = undefined;

/**
 * The name of the share where the container locates.
 * @member {String} sharename
 */
Container.prototype['sharename'] = undefined;

/**
 * The used space, in bytes, of the container in the primary volume.
 * @member {Number} usedBytesInPrimaryVolume
 */
Container.prototype['usedBytesInPrimaryVolume'] = undefined;






export default Container;

