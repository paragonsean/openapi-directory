/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MigrationState from './MigrationState';

/**
 * The MigrationResult model module.
 * @module model/MigrationResult
 * @version 2015-12-01-preview
 */
class MigrationResult {
    /**
     * Constructs a new <code>MigrationResult</code>.
     * The result of the container migration.
     * @alias module:model/MigrationResult
     */
    constructor() { 
        
        MigrationResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MigrationResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MigrationResult} obj Optional instance to populate.
     * @return {module:model/MigrationResult} The populated <code>MigrationResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MigrationResult();

            if (data.hasOwnProperty('containerName')) {
                obj['containerName'] = ApiClient.convertToType(data['containerName'], 'String');
            }
            if (data.hasOwnProperty('destinationShareName')) {
                obj['destinationShareName'] = ApiClient.convertToType(data['destinationShareName'], 'String');
            }
            if (data.hasOwnProperty('failureReason')) {
                obj['failureReason'] = ApiClient.convertToType(data['failureReason'], 'String');
            }
            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
            }
            if (data.hasOwnProperty('migrationStatus')) {
                obj['migrationStatus'] = MigrationState.constructFromObject(data['migrationStatus']);
            }
            if (data.hasOwnProperty('sourceShareName')) {
                obj['sourceShareName'] = ApiClient.convertToType(data['sourceShareName'], 'String');
            }
            if (data.hasOwnProperty('storageAccountName')) {
                obj['storageAccountName'] = ApiClient.convertToType(data['storageAccountName'], 'String');
            }
            if (data.hasOwnProperty('subEntitiesCompleted')) {
                obj['subEntitiesCompleted'] = ApiClient.convertToType(data['subEntitiesCompleted'], 'Number');
            }
            if (data.hasOwnProperty('subEntitiesFailed')) {
                obj['subEntitiesFailed'] = ApiClient.convertToType(data['subEntitiesFailed'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MigrationResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MigrationResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['containerName'] && !(typeof data['containerName'] === 'string' || data['containerName'] instanceof String)) {
            throw new Error("Expected the field `containerName` to be a primitive type in the JSON string but got " + data['containerName']);
        }
        // ensure the json data is a string
        if (data['destinationShareName'] && !(typeof data['destinationShareName'] === 'string' || data['destinationShareName'] instanceof String)) {
            throw new Error("Expected the field `destinationShareName` to be a primitive type in the JSON string but got " + data['destinationShareName']);
        }
        // ensure the json data is a string
        if (data['failureReason'] && !(typeof data['failureReason'] === 'string' || data['failureReason'] instanceof String)) {
            throw new Error("Expected the field `failureReason` to be a primitive type in the JSON string but got " + data['failureReason']);
        }
        // ensure the json data is a string
        if (data['jobId'] && !(typeof data['jobId'] === 'string' || data['jobId'] instanceof String)) {
            throw new Error("Expected the field `jobId` to be a primitive type in the JSON string but got " + data['jobId']);
        }
        // ensure the json data is a string
        if (data['sourceShareName'] && !(typeof data['sourceShareName'] === 'string' || data['sourceShareName'] instanceof String)) {
            throw new Error("Expected the field `sourceShareName` to be a primitive type in the JSON string but got " + data['sourceShareName']);
        }
        // ensure the json data is a string
        if (data['storageAccountName'] && !(typeof data['storageAccountName'] === 'string' || data['storageAccountName'] instanceof String)) {
            throw new Error("Expected the field `storageAccountName` to be a primitive type in the JSON string but got " + data['storageAccountName']);
        }

        return true;
    }


}



/**
 * The name of the container to be migrated.
 * @member {String} containerName
 */
MigrationResult.prototype['containerName'] = undefined;

/**
 * The name of the destination storage share.
 * @member {String} destinationShareName
 */
MigrationResult.prototype['destinationShareName'] = undefined;

/**
 * The migration failure reason.
 * @member {String} failureReason
 */
MigrationResult.prototype['failureReason'] = undefined;

/**
 * The migration job ID.
 * @member {String} jobId
 */
MigrationResult.prototype['jobId'] = undefined;

/**
 * @member {module:model/MigrationState} migrationStatus
 */
MigrationResult.prototype['migrationStatus'] = undefined;

/**
 * The name of the source storage share.
 * @member {String} sourceShareName
 */
MigrationResult.prototype['sourceShareName'] = undefined;

/**
 * The storage account name.
 * @member {String} storageAccountName
 */
MigrationResult.prototype['storageAccountName'] = undefined;

/**
 * The number of entities which have been migrated.
 * @member {Number} subEntitiesCompleted
 */
MigrationResult.prototype['subEntitiesCompleted'] = undefined;

/**
 * The number of entities which failed in migration.
 * @member {Number} subEntitiesFailed
 */
MigrationResult.prototype['subEntitiesFailed'] = undefined;






export default MigrationResult;

