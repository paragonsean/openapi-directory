/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Container from '../model/Container';
import ContainersListDestinationShares200ResponseInner from '../model/ContainersListDestinationShares200ResponseInner';
import MigrationParameters from '../model/MigrationParameters';
import MigrationResult from '../model/MigrationResult';

/**
* Containers service.
* @module api/ContainersApi
* @version 2015-12-01-preview
*/
export default class ContainersApi {

    /**
    * Constructs a new ContainersApi. 
    * @alias module:api/ContainersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the containersCancelMigration operation.
     * @callback module:api/ContainersApi~containersCancelMigrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a container migration job.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {String} operationId Operation Id.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/ContainersApi~containersCancelMigrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationResult}
     */
    containersCancelMigration(subscriptionId, resourceGroupName, farmId, operationId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling containersCancelMigration");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling containersCancelMigration");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling containersCancelMigration");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling containersCancelMigration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling containersCancelMigration");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'operationId': operationId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MigrationResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/operationresults/{operationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersList operation.
     * @callback module:api/ContainersApi~containersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Container>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of containers which can be migrated in the specified share.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {String} shareName Share name.
     * @param {String} apiVersion REST Api Version.
     * @param {String} intent The container migration intent.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxCount] The maximum number of containers.
     * @param {Number} [startIndex] The starting index the resource provider uses.
     * @param {module:api/ContainersApi~containersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Container>}
     */
    containersList(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, intent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling containersList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling containersList");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling containersList");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling containersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling containersList");
      }
      // verify the required parameter 'intent' is set
      if (intent === undefined || intent === null) {
        throw new Error("Missing the required parameter 'intent' when calling containersList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion,
        'Intent': intent,
        'MaxCount': opts['maxCount'],
        'StartIndex': opts['startIndex']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Container];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/{shareName}/containers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersListDestinationShares operation.
     * @callback module:api/ContainersApi~containersListDestinationSharesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContainersListDestinationShares200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of destination shares that the system considers as best candidates for migration.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {String} shareName Share name.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/ContainersApi~containersListDestinationSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContainersListDestinationShares200ResponseInner>}
     */
    containersListDestinationShares(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling containersListDestinationShares");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling containersListDestinationShares");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling containersListDestinationShares");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling containersListDestinationShares");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling containersListDestinationShares");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContainersListDestinationShares200ResponseInner];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/{shareName}/destinationshares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersMigrate operation.
     * @callback module:api/ContainersApi~containersMigrateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a container migration job to migrate containers to the specified destination share.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {String} shareName Share name.
     * @param {String} apiVersion REST Api Version.
     * @param {module:model/MigrationParameters} migrationParameters The parameters of container migration job.
     * @param {module:api/ContainersApi~containersMigrateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationResult}
     */
    containersMigrate(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, migrationParameters, callback) {
      let postBody = migrationParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling containersMigrate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling containersMigrate");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling containersMigrate");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling containersMigrate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling containersMigrate");
      }
      // verify the required parameter 'migrationParameters' is set
      if (migrationParameters === undefined || migrationParameters === null) {
        throw new Error("Missing the required parameter 'migrationParameters' when calling containersMigrate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrationResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/{shareName}/migrate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the containersMigrationStatus operation.
     * @callback module:api/ContainersApi~containersMigrationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the status of a container migration job.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {String} operationId Operation Id.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/ContainersApi~containersMigrationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationResult}
     */
    containersMigrationStatus(subscriptionId, resourceGroupName, farmId, operationId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling containersMigrationStatus");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling containersMigrationStatus");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling containersMigrationStatus");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling containersMigrationStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling containersMigrationStatus");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId,
        'operationId': operationId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MigrationResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/operationresults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
