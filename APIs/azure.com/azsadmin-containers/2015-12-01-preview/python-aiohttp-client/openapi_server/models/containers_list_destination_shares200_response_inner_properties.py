# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainersListDestinationShares200ResponseInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, free_capacity: int=None, health_status: str=None, share_name: str=None, total_capacity: int=None, unc_path: str=None, used_capacity: int=None):
        """ContainersListDestinationShares200ResponseInnerProperties - a model defined in OpenAPI

        :param free_capacity: The free_capacity of this ContainersListDestinationShares200ResponseInnerProperties.
        :param health_status: The health_status of this ContainersListDestinationShares200ResponseInnerProperties.
        :param share_name: The share_name of this ContainersListDestinationShares200ResponseInnerProperties.
        :param total_capacity: The total_capacity of this ContainersListDestinationShares200ResponseInnerProperties.
        :param unc_path: The unc_path of this ContainersListDestinationShares200ResponseInnerProperties.
        :param used_capacity: The used_capacity of this ContainersListDestinationShares200ResponseInnerProperties.
        """
        self.openapi_types = {
            'free_capacity': int,
            'health_status': str,
            'share_name': str,
            'total_capacity': int,
            'unc_path': str,
            'used_capacity': int
        }

        self.attribute_map = {
            'free_capacity': 'freeCapacity',
            'health_status': 'healthStatus',
            'share_name': 'shareName',
            'total_capacity': 'totalCapacity',
            'unc_path': 'uncPath',
            'used_capacity': 'usedCapacity'
        }

        self._free_capacity = free_capacity
        self._health_status = health_status
        self._share_name = share_name
        self._total_capacity = total_capacity
        self._unc_path = unc_path
        self._used_capacity = used_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainersListDestinationShares200ResponseInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Containers_ListDestinationShares_200_response_inner_properties of this ContainersListDestinationShares200ResponseInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def free_capacity(self):
        """Gets the free_capacity of this ContainersListDestinationShares200ResponseInnerProperties.

        The free space of the storage share in bytes.

        :return: The free_capacity of this ContainersListDestinationShares200ResponseInnerProperties.
        :rtype: int
        """
        return self._free_capacity

    @free_capacity.setter
    def free_capacity(self, free_capacity):
        """Sets the free_capacity of this ContainersListDestinationShares200ResponseInnerProperties.

        The free space of the storage share in bytes.

        :param free_capacity: The free_capacity of this ContainersListDestinationShares200ResponseInnerProperties.
        :type free_capacity: int
        """

        self._free_capacity = free_capacity

    @property
    def health_status(self):
        """Gets the health_status of this ContainersListDestinationShares200ResponseInnerProperties.

        Current health status.

        :return: The health_status of this ContainersListDestinationShares200ResponseInnerProperties.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this ContainersListDestinationShares200ResponseInnerProperties.

        Current health status.

        :param health_status: The health_status of this ContainersListDestinationShares200ResponseInnerProperties.
        :type health_status: str
        """
        allowed_values = ["Unknown", "Healthy", "Warning", "Critical"]  # noqa: E501
        if health_status not in allowed_values:
            raise ValueError(
                "Invalid value for `health_status` ({0}), must be one of {1}"
                .format(health_status, allowed_values)
            )

        self._health_status = health_status

    @property
    def share_name(self):
        """Gets the share_name of this ContainersListDestinationShares200ResponseInnerProperties.

        The name of the storage share.

        :return: The share_name of this ContainersListDestinationShares200ResponseInnerProperties.
        :rtype: str
        """
        return self._share_name

    @share_name.setter
    def share_name(self, share_name):
        """Sets the share_name of this ContainersListDestinationShares200ResponseInnerProperties.

        The name of the storage share.

        :param share_name: The share_name of this ContainersListDestinationShares200ResponseInnerProperties.
        :type share_name: str
        """

        self._share_name = share_name

    @property
    def total_capacity(self):
        """Gets the total_capacity of this ContainersListDestinationShares200ResponseInnerProperties.

        The total capacity of the storage share in bytes.

        :return: The total_capacity of this ContainersListDestinationShares200ResponseInnerProperties.
        :rtype: int
        """
        return self._total_capacity

    @total_capacity.setter
    def total_capacity(self, total_capacity):
        """Sets the total_capacity of this ContainersListDestinationShares200ResponseInnerProperties.

        The total capacity of the storage share in bytes.

        :param total_capacity: The total_capacity of this ContainersListDestinationShares200ResponseInnerProperties.
        :type total_capacity: int
        """

        self._total_capacity = total_capacity

    @property
    def unc_path(self):
        """Gets the unc_path of this ContainersListDestinationShares200ResponseInnerProperties.

        The UNC path to the storage share.

        :return: The unc_path of this ContainersListDestinationShares200ResponseInnerProperties.
        :rtype: str
        """
        return self._unc_path

    @unc_path.setter
    def unc_path(self, unc_path):
        """Sets the unc_path of this ContainersListDestinationShares200ResponseInnerProperties.

        The UNC path to the storage share.

        :param unc_path: The unc_path of this ContainersListDestinationShares200ResponseInnerProperties.
        :type unc_path: str
        """

        self._unc_path = unc_path

    @property
    def used_capacity(self):
        """Gets the used_capacity of this ContainersListDestinationShares200ResponseInnerProperties.

        The used capacity of the storage share in bytes.

        :return: The used_capacity of this ContainersListDestinationShares200ResponseInnerProperties.
        :rtype: int
        """
        return self._used_capacity

    @used_capacity.setter
    def used_capacity(self, used_capacity):
        """Sets the used_capacity of this ContainersListDestinationShares200ResponseInnerProperties.

        The used capacity of the storage share in bytes.

        :param used_capacity: The used_capacity of this ContainersListDestinationShares200ResponseInnerProperties.
        :type used_capacity: int
        """

        self._used_capacity = used_capacity
