# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accountid: str=None, accountname: str=None, container_state: str=None, containerid: int=None, containername: str=None, sharename: str=None, used_bytes_in_primary_volume: int=None):
        """Container - a model defined in OpenAPI

        :param accountid: The accountid of this Container.
        :param accountname: The accountname of this Container.
        :param container_state: The container_state of this Container.
        :param containerid: The containerid of this Container.
        :param containername: The containername of this Container.
        :param sharename: The sharename of this Container.
        :param used_bytes_in_primary_volume: The used_bytes_in_primary_volume of this Container.
        """
        self.openapi_types = {
            'accountid': str,
            'accountname': str,
            'container_state': str,
            'containerid': int,
            'containername': str,
            'sharename': str,
            'used_bytes_in_primary_volume': int
        }

        self.attribute_map = {
            'accountid': 'accountid',
            'accountname': 'accountname',
            'container_state': 'containerState',
            'containerid': 'containerid',
            'containername': 'containername',
            'sharename': 'sharename',
            'used_bytes_in_primary_volume': 'usedBytesInPrimaryVolume'
        }

        self._accountid = accountid
        self._accountname = accountname
        self._container_state = container_state
        self._containerid = containerid
        self._containername = containername
        self._sharename = sharename
        self._used_bytes_in_primary_volume = used_bytes_in_primary_volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Container of this Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accountid(self):
        """Gets the accountid of this Container.

        The ID of the storage account.

        :return: The accountid of this Container.
        :rtype: str
        """
        return self._accountid

    @accountid.setter
    def accountid(self, accountid):
        """Sets the accountid of this Container.

        The ID of the storage account.

        :param accountid: The accountid of this Container.
        :type accountid: str
        """

        self._accountid = accountid

    @property
    def accountname(self):
        """Gets the accountname of this Container.

        The name of storage account where the container locates.

        :return: The accountname of this Container.
        :rtype: str
        """
        return self._accountname

    @accountname.setter
    def accountname(self, accountname):
        """Sets the accountname of this Container.

        The name of storage account where the container locates.

        :param accountname: The accountname of this Container.
        :type accountname: str
        """

        self._accountname = accountname

    @property
    def container_state(self):
        """Gets the container_state of this Container.

        The current state of the container.

        :return: The container_state of this Container.
        :rtype: str
        """
        return self._container_state

    @container_state.setter
    def container_state(self, container_state):
        """Sets the container_state of this Container.

        The current state of the container.

        :param container_state: The container_state of this Container.
        :type container_state: str
        """

        self._container_state = container_state

    @property
    def containerid(self):
        """Gets the containerid of this Container.

        The container ID.

        :return: The containerid of this Container.
        :rtype: int
        """
        return self._containerid

    @containerid.setter
    def containerid(self, containerid):
        """Sets the containerid of this Container.

        The container ID.

        :param containerid: The containerid of this Container.
        :type containerid: int
        """

        self._containerid = containerid

    @property
    def containername(self):
        """Gets the containername of this Container.

        Container name.

        :return: The containername of this Container.
        :rtype: str
        """
        return self._containername

    @containername.setter
    def containername(self, containername):
        """Sets the containername of this Container.

        Container name.

        :param containername: The containername of this Container.
        :type containername: str
        """

        self._containername = containername

    @property
    def sharename(self):
        """Gets the sharename of this Container.

        The name of the share where the container locates.

        :return: The sharename of this Container.
        :rtype: str
        """
        return self._sharename

    @sharename.setter
    def sharename(self, sharename):
        """Sets the sharename of this Container.

        The name of the share where the container locates.

        :param sharename: The sharename of this Container.
        :type sharename: str
        """

        self._sharename = sharename

    @property
    def used_bytes_in_primary_volume(self):
        """Gets the used_bytes_in_primary_volume of this Container.

        The used space, in bytes, of the container in the primary volume.

        :return: The used_bytes_in_primary_volume of this Container.
        :rtype: int
        """
        return self._used_bytes_in_primary_volume

    @used_bytes_in_primary_volume.setter
    def used_bytes_in_primary_volume(self, used_bytes_in_primary_volume):
        """Sets the used_bytes_in_primary_volume of this Container.

        The used space, in bytes, of the container in the primary volume.

        :param used_bytes_in_primary_volume: The used_bytes_in_primary_volume of this Container.
        :type used_bytes_in_primary_volume: int
        """

        self._used_bytes_in_primary_volume = used_bytes_in_primary_volume
