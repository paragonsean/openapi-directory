# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.migration_state import MigrationState
from openapi_server import util


class MigrationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, destination_share_name: str=None, failure_reason: str=None, job_id: str=None, migration_status: MigrationState=None, source_share_name: str=None, storage_account_name: str=None, sub_entities_completed: int=None, sub_entities_failed: int=None):
        """MigrationResult - a model defined in OpenAPI

        :param container_name: The container_name of this MigrationResult.
        :param destination_share_name: The destination_share_name of this MigrationResult.
        :param failure_reason: The failure_reason of this MigrationResult.
        :param job_id: The job_id of this MigrationResult.
        :param migration_status: The migration_status of this MigrationResult.
        :param source_share_name: The source_share_name of this MigrationResult.
        :param storage_account_name: The storage_account_name of this MigrationResult.
        :param sub_entities_completed: The sub_entities_completed of this MigrationResult.
        :param sub_entities_failed: The sub_entities_failed of this MigrationResult.
        """
        self.openapi_types = {
            'container_name': str,
            'destination_share_name': str,
            'failure_reason': str,
            'job_id': str,
            'migration_status': MigrationState,
            'source_share_name': str,
            'storage_account_name': str,
            'sub_entities_completed': int,
            'sub_entities_failed': int
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'destination_share_name': 'destinationShareName',
            'failure_reason': 'failureReason',
            'job_id': 'jobId',
            'migration_status': 'migrationStatus',
            'source_share_name': 'sourceShareName',
            'storage_account_name': 'storageAccountName',
            'sub_entities_completed': 'subEntitiesCompleted',
            'sub_entities_failed': 'subEntitiesFailed'
        }

        self._container_name = container_name
        self._destination_share_name = destination_share_name
        self._failure_reason = failure_reason
        self._job_id = job_id
        self._migration_status = migration_status
        self._source_share_name = source_share_name
        self._storage_account_name = storage_account_name
        self._sub_entities_completed = sub_entities_completed
        self._sub_entities_failed = sub_entities_failed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MigrationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MigrationResult of this MigrationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this MigrationResult.

        The name of the container to be migrated.

        :return: The container_name of this MigrationResult.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this MigrationResult.

        The name of the container to be migrated.

        :param container_name: The container_name of this MigrationResult.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def destination_share_name(self):
        """Gets the destination_share_name of this MigrationResult.

        The name of the destination storage share.

        :return: The destination_share_name of this MigrationResult.
        :rtype: str
        """
        return self._destination_share_name

    @destination_share_name.setter
    def destination_share_name(self, destination_share_name):
        """Sets the destination_share_name of this MigrationResult.

        The name of the destination storage share.

        :param destination_share_name: The destination_share_name of this MigrationResult.
        :type destination_share_name: str
        """

        self._destination_share_name = destination_share_name

    @property
    def failure_reason(self):
        """Gets the failure_reason of this MigrationResult.

        The migration failure reason.

        :return: The failure_reason of this MigrationResult.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this MigrationResult.

        The migration failure reason.

        :param failure_reason: The failure_reason of this MigrationResult.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def job_id(self):
        """Gets the job_id of this MigrationResult.

        The migration job ID.

        :return: The job_id of this MigrationResult.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this MigrationResult.

        The migration job ID.

        :param job_id: The job_id of this MigrationResult.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def migration_status(self):
        """Gets the migration_status of this MigrationResult.


        :return: The migration_status of this MigrationResult.
        :rtype: MigrationState
        """
        return self._migration_status

    @migration_status.setter
    def migration_status(self, migration_status):
        """Sets the migration_status of this MigrationResult.


        :param migration_status: The migration_status of this MigrationResult.
        :type migration_status: MigrationState
        """

        self._migration_status = migration_status

    @property
    def source_share_name(self):
        """Gets the source_share_name of this MigrationResult.

        The name of the source storage share.

        :return: The source_share_name of this MigrationResult.
        :rtype: str
        """
        return self._source_share_name

    @source_share_name.setter
    def source_share_name(self, source_share_name):
        """Sets the source_share_name of this MigrationResult.

        The name of the source storage share.

        :param source_share_name: The source_share_name of this MigrationResult.
        :type source_share_name: str
        """

        self._source_share_name = source_share_name

    @property
    def storage_account_name(self):
        """Gets the storage_account_name of this MigrationResult.

        The storage account name.

        :return: The storage_account_name of this MigrationResult.
        :rtype: str
        """
        return self._storage_account_name

    @storage_account_name.setter
    def storage_account_name(self, storage_account_name):
        """Sets the storage_account_name of this MigrationResult.

        The storage account name.

        :param storage_account_name: The storage_account_name of this MigrationResult.
        :type storage_account_name: str
        """

        self._storage_account_name = storage_account_name

    @property
    def sub_entities_completed(self):
        """Gets the sub_entities_completed of this MigrationResult.

        The number of entities which have been migrated.

        :return: The sub_entities_completed of this MigrationResult.
        :rtype: int
        """
        return self._sub_entities_completed

    @sub_entities_completed.setter
    def sub_entities_completed(self, sub_entities_completed):
        """Sets the sub_entities_completed of this MigrationResult.

        The number of entities which have been migrated.

        :param sub_entities_completed: The sub_entities_completed of this MigrationResult.
        :type sub_entities_completed: int
        """

        self._sub_entities_completed = sub_entities_completed

    @property
    def sub_entities_failed(self):
        """Gets the sub_entities_failed of this MigrationResult.

        The number of entities which failed in migration.

        :return: The sub_entities_failed of this MigrationResult.
        :rtype: int
        """
        return self._sub_entities_failed

    @sub_entities_failed.setter
    def sub_entities_failed(self, sub_entities_failed):
        """Sets the sub_entities_failed of this MigrationResult.

        The number of entities which failed in migration.

        :param sub_entities_failed: The sub_entities_failed of this MigrationResult.
        :type sub_entities_failed: int
        """

        self._sub_entities_failed = sub_entities_failed
