# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MigrationParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, destination_share_unc_path: str=None, storage_account_name: str=None):
        """MigrationParameters - a model defined in OpenAPI

        :param container_name: The container_name of this MigrationParameters.
        :param destination_share_unc_path: The destination_share_unc_path of this MigrationParameters.
        :param storage_account_name: The storage_account_name of this MigrationParameters.
        """
        self.openapi_types = {
            'container_name': str,
            'destination_share_unc_path': str,
            'storage_account_name': str
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'destination_share_unc_path': 'destinationShareUncPath',
            'storage_account_name': 'storageAccountName'
        }

        self._container_name = container_name
        self._destination_share_unc_path = destination_share_unc_path
        self._storage_account_name = storage_account_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MigrationParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MigrationParameters of this MigrationParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this MigrationParameters.

        The name of the container to be migrated.

        :return: The container_name of this MigrationParameters.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this MigrationParameters.

        The name of the container to be migrated.

        :param container_name: The container_name of this MigrationParameters.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def destination_share_unc_path(self):
        """Gets the destination_share_unc_path of this MigrationParameters.

        The UNC path of the destination share for migration.

        :return: The destination_share_unc_path of this MigrationParameters.
        :rtype: str
        """
        return self._destination_share_unc_path

    @destination_share_unc_path.setter
    def destination_share_unc_path(self, destination_share_unc_path):
        """Sets the destination_share_unc_path of this MigrationParameters.

        The UNC path of the destination share for migration.

        :param destination_share_unc_path: The destination_share_unc_path of this MigrationParameters.
        :type destination_share_unc_path: str
        """
        if destination_share_unc_path is None:
            raise ValueError("Invalid value for `destination_share_unc_path`, must not be `None`")

        self._destination_share_unc_path = destination_share_unc_path

    @property
    def storage_account_name(self):
        """Gets the storage_account_name of this MigrationParameters.

        The name of the storage account where the container locates.

        :return: The storage_account_name of this MigrationParameters.
        :rtype: str
        """
        return self._storage_account_name

    @storage_account_name.setter
    def storage_account_name(self, storage_account_name):
        """Sets the storage_account_name of this MigrationParameters.

        The name of the storage account where the container locates.

        :param storage_account_name: The storage_account_name of this MigrationParameters.
        :type storage_account_name: str
        """
        if storage_account_name is None:
            raise ValueError("Invalid value for `storage_account_name`, must not be `None`")

        self._storage_account_name = storage_account_name
