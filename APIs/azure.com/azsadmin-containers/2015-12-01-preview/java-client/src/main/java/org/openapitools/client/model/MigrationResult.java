/*
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MigrationState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The result of the container migration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:22.532385-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MigrationResult {
  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_DESTINATION_SHARE_NAME = "destinationShareName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_SHARE_NAME)
  private String destinationShareName;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_MIGRATION_STATUS = "migrationStatus";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STATUS)
  private MigrationState migrationStatus;

  public static final String SERIALIZED_NAME_SOURCE_SHARE_NAME = "sourceShareName";
  @SerializedName(SERIALIZED_NAME_SOURCE_SHARE_NAME)
  private String sourceShareName;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_NAME = "storageAccountName";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_NAME)
  private String storageAccountName;

  public static final String SERIALIZED_NAME_SUB_ENTITIES_COMPLETED = "subEntitiesCompleted";
  @SerializedName(SERIALIZED_NAME_SUB_ENTITIES_COMPLETED)
  private Long subEntitiesCompleted;

  public static final String SERIALIZED_NAME_SUB_ENTITIES_FAILED = "subEntitiesFailed";
  @SerializedName(SERIALIZED_NAME_SUB_ENTITIES_FAILED)
  private Long subEntitiesFailed;

  public MigrationResult() {
  }

  public MigrationResult(
     String containerName, 
     String destinationShareName, 
     String failureReason, 
     String jobId, 
     String sourceShareName, 
     String storageAccountName, 
     Long subEntitiesCompleted, 
     Long subEntitiesFailed
  ) {
    this();
    this.containerName = containerName;
    this.destinationShareName = destinationShareName;
    this.failureReason = failureReason;
    this.jobId = jobId;
    this.sourceShareName = sourceShareName;
    this.storageAccountName = storageAccountName;
    this.subEntitiesCompleted = subEntitiesCompleted;
    this.subEntitiesFailed = subEntitiesFailed;
  }

  /**
   * The name of the container to be migrated.
   * @return containerName
   */
  @javax.annotation.Nullable
  public String getContainerName() {
    return containerName;
  }



  /**
   * The name of the destination storage share.
   * @return destinationShareName
   */
  @javax.annotation.Nullable
  public String getDestinationShareName() {
    return destinationShareName;
  }



  /**
   * The migration failure reason.
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }



  /**
   * The migration job ID.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }



  public MigrationResult migrationStatus(MigrationState migrationStatus) {
    this.migrationStatus = migrationStatus;
    return this;
  }

  /**
   * Get migrationStatus
   * @return migrationStatus
   */
  @javax.annotation.Nullable
  public MigrationState getMigrationStatus() {
    return migrationStatus;
  }

  public void setMigrationStatus(MigrationState migrationStatus) {
    this.migrationStatus = migrationStatus;
  }


  /**
   * The name of the source storage share.
   * @return sourceShareName
   */
  @javax.annotation.Nullable
  public String getSourceShareName() {
    return sourceShareName;
  }



  /**
   * The storage account name.
   * @return storageAccountName
   */
  @javax.annotation.Nullable
  public String getStorageAccountName() {
    return storageAccountName;
  }



  /**
   * The number of entities which have been migrated.
   * @return subEntitiesCompleted
   */
  @javax.annotation.Nullable
  public Long getSubEntitiesCompleted() {
    return subEntitiesCompleted;
  }



  /**
   * The number of entities which failed in migration.
   * @return subEntitiesFailed
   */
  @javax.annotation.Nullable
  public Long getSubEntitiesFailed() {
    return subEntitiesFailed;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationResult migrationResult = (MigrationResult) o;
    return Objects.equals(this.containerName, migrationResult.containerName) &&
        Objects.equals(this.destinationShareName, migrationResult.destinationShareName) &&
        Objects.equals(this.failureReason, migrationResult.failureReason) &&
        Objects.equals(this.jobId, migrationResult.jobId) &&
        Objects.equals(this.migrationStatus, migrationResult.migrationStatus) &&
        Objects.equals(this.sourceShareName, migrationResult.sourceShareName) &&
        Objects.equals(this.storageAccountName, migrationResult.storageAccountName) &&
        Objects.equals(this.subEntitiesCompleted, migrationResult.subEntitiesCompleted) &&
        Objects.equals(this.subEntitiesFailed, migrationResult.subEntitiesFailed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerName, destinationShareName, failureReason, jobId, migrationStatus, sourceShareName, storageAccountName, subEntitiesCompleted, subEntitiesFailed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationResult {\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    destinationShareName: ").append(toIndentedString(destinationShareName)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    migrationStatus: ").append(toIndentedString(migrationStatus)).append("\n");
    sb.append("    sourceShareName: ").append(toIndentedString(sourceShareName)).append("\n");
    sb.append("    storageAccountName: ").append(toIndentedString(storageAccountName)).append("\n");
    sb.append("    subEntitiesCompleted: ").append(toIndentedString(subEntitiesCompleted)).append("\n");
    sb.append("    subEntitiesFailed: ").append(toIndentedString(subEntitiesFailed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerName");
    openapiFields.add("destinationShareName");
    openapiFields.add("failureReason");
    openapiFields.add("jobId");
    openapiFields.add("migrationStatus");
    openapiFields.add("sourceShareName");
    openapiFields.add("storageAccountName");
    openapiFields.add("subEntitiesCompleted");
    openapiFields.add("subEntitiesFailed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MigrationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrationResult is not found in the empty JSON string", MigrationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("containerName") != null && !jsonObj.get("containerName").isJsonNull()) && !jsonObj.get("containerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerName").toString()));
      }
      if ((jsonObj.get("destinationShareName") != null && !jsonObj.get("destinationShareName").isJsonNull()) && !jsonObj.get("destinationShareName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationShareName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationShareName").toString()));
      }
      if ((jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) && !jsonObj.get("failureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureReason").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      // validate the optional field `migrationStatus`
      if (jsonObj.get("migrationStatus") != null && !jsonObj.get("migrationStatus").isJsonNull()) {
        MigrationState.validateJsonElement(jsonObj.get("migrationStatus"));
      }
      if ((jsonObj.get("sourceShareName") != null && !jsonObj.get("sourceShareName").isJsonNull()) && !jsonObj.get("sourceShareName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceShareName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceShareName").toString()));
      }
      if ((jsonObj.get("storageAccountName") != null && !jsonObj.get("storageAccountName").isJsonNull()) && !jsonObj.get("storageAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrationResult>() {
           @Override
           public void write(JsonWriter out, MigrationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MigrationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MigrationResult
   * @throws IOException if the JSON string is invalid with respect to MigrationResult
   */
  public static MigrationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrationResult.class);
  }

  /**
   * Convert an instance of MigrationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

