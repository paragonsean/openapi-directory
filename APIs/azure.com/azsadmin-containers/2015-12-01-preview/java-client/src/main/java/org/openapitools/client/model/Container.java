/*
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:22.532385-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Container {
  public static final String SERIALIZED_NAME_ACCOUNTID = "accountid";
  @SerializedName(SERIALIZED_NAME_ACCOUNTID)
  private String accountid;

  public static final String SERIALIZED_NAME_ACCOUNTNAME = "accountname";
  @SerializedName(SERIALIZED_NAME_ACCOUNTNAME)
  private String accountname;

  public static final String SERIALIZED_NAME_CONTAINER_STATE = "containerState";
  @SerializedName(SERIALIZED_NAME_CONTAINER_STATE)
  private String containerState;

  public static final String SERIALIZED_NAME_CONTAINERID = "containerid";
  @SerializedName(SERIALIZED_NAME_CONTAINERID)
  private Long containerid;

  public static final String SERIALIZED_NAME_CONTAINERNAME = "containername";
  @SerializedName(SERIALIZED_NAME_CONTAINERNAME)
  private String containername;

  public static final String SERIALIZED_NAME_SHARENAME = "sharename";
  @SerializedName(SERIALIZED_NAME_SHARENAME)
  private String sharename;

  public static final String SERIALIZED_NAME_USED_BYTES_IN_PRIMARY_VOLUME = "usedBytesInPrimaryVolume";
  @SerializedName(SERIALIZED_NAME_USED_BYTES_IN_PRIMARY_VOLUME)
  private Long usedBytesInPrimaryVolume;

  public Container() {
  }

  public Container(
     String accountid, 
     String accountname, 
     String containerState, 
     Long containerid, 
     String containername, 
     String sharename, 
     Long usedBytesInPrimaryVolume
  ) {
    this();
    this.accountid = accountid;
    this.accountname = accountname;
    this.containerState = containerState;
    this.containerid = containerid;
    this.containername = containername;
    this.sharename = sharename;
    this.usedBytesInPrimaryVolume = usedBytesInPrimaryVolume;
  }

  /**
   * The ID of the storage account.
   * @return accountid
   */
  @javax.annotation.Nullable
  public String getAccountid() {
    return accountid;
  }



  /**
   * The name of storage account where the container locates.
   * @return accountname
   */
  @javax.annotation.Nullable
  public String getAccountname() {
    return accountname;
  }



  /**
   * The current state of the container.
   * @return containerState
   */
  @javax.annotation.Nullable
  public String getContainerState() {
    return containerState;
  }



  /**
   * The container ID.
   * @return containerid
   */
  @javax.annotation.Nullable
  public Long getContainerid() {
    return containerid;
  }



  /**
   * Container name.
   * @return containername
   */
  @javax.annotation.Nullable
  public String getContainername() {
    return containername;
  }



  /**
   * The name of the share where the container locates.
   * @return sharename
   */
  @javax.annotation.Nullable
  public String getSharename() {
    return sharename;
  }



  /**
   * The used space, in bytes, of the container in the primary volume.
   * @return usedBytesInPrimaryVolume
   */
  @javax.annotation.Nullable
  public Long getUsedBytesInPrimaryVolume() {
    return usedBytesInPrimaryVolume;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Container container = (Container) o;
    return Objects.equals(this.accountid, container.accountid) &&
        Objects.equals(this.accountname, container.accountname) &&
        Objects.equals(this.containerState, container.containerState) &&
        Objects.equals(this.containerid, container.containerid) &&
        Objects.equals(this.containername, container.containername) &&
        Objects.equals(this.sharename, container.sharename) &&
        Objects.equals(this.usedBytesInPrimaryVolume, container.usedBytesInPrimaryVolume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountid, accountname, containerState, containerid, containername, sharename, usedBytesInPrimaryVolume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Container {\n");
    sb.append("    accountid: ").append(toIndentedString(accountid)).append("\n");
    sb.append("    accountname: ").append(toIndentedString(accountname)).append("\n");
    sb.append("    containerState: ").append(toIndentedString(containerState)).append("\n");
    sb.append("    containerid: ").append(toIndentedString(containerid)).append("\n");
    sb.append("    containername: ").append(toIndentedString(containername)).append("\n");
    sb.append("    sharename: ").append(toIndentedString(sharename)).append("\n");
    sb.append("    usedBytesInPrimaryVolume: ").append(toIndentedString(usedBytesInPrimaryVolume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountid");
    openapiFields.add("accountname");
    openapiFields.add("containerState");
    openapiFields.add("containerid");
    openapiFields.add("containername");
    openapiFields.add("sharename");
    openapiFields.add("usedBytesInPrimaryVolume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Container
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Container.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Container is not found in the empty JSON string", Container.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Container.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Container` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountid") != null && !jsonObj.get("accountid").isJsonNull()) && !jsonObj.get("accountid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountid").toString()));
      }
      if ((jsonObj.get("accountname") != null && !jsonObj.get("accountname").isJsonNull()) && !jsonObj.get("accountname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountname").toString()));
      }
      if ((jsonObj.get("containerState") != null && !jsonObj.get("containerState").isJsonNull()) && !jsonObj.get("containerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerState").toString()));
      }
      if ((jsonObj.get("containername") != null && !jsonObj.get("containername").isJsonNull()) && !jsonObj.get("containername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containername").toString()));
      }
      if ((jsonObj.get("sharename") != null && !jsonObj.get("sharename").isJsonNull()) && !jsonObj.get("sharename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharename").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Container.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Container' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Container> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Container.class));

       return (TypeAdapter<T>) new TypeAdapter<Container>() {
           @Override
           public void write(JsonWriter out, Container value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Container read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Container given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Container
   * @throws IOException if the JSON string is invalid with respect to Container
   */
  public static Container fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Container.class);
  }

  /**
   * Convert an instance of Container to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

