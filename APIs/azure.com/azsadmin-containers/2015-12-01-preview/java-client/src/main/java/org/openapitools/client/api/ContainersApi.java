/*
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Container;
import org.openapitools.client.model.ContainersListDestinationShares200ResponseInner;
import org.openapitools.client.model.MigrationParameters;
import org.openapitools.client.model.MigrationResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContainersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContainersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContainersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for containersCancelMigration
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param operationId Operation Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation has been accepted and processed </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED - Operation has been accepted will be processed asynchronously </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersCancelMigrationCall(String subscriptionId, String resourceGroupName, String farmId, String operationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/operationresults/{operationId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containersCancelMigrationValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String operationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containersCancelMigration(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containersCancelMigration(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling containersCancelMigration(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling containersCancelMigration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containersCancelMigration(Async)");
        }

        return containersCancelMigrationCall(subscriptionId, resourceGroupName, farmId, operationId, apiVersion, _callback);

    }

    /**
     * 
     * Cancel a container migration job.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param operationId Operation Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return MigrationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation has been accepted and processed </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED - Operation has been accepted will be processed asynchronously </td><td>  -  </td></tr>
     </table>
     */
    public MigrationResult containersCancelMigration(String subscriptionId, String resourceGroupName, String farmId, String operationId, String apiVersion) throws ApiException {
        ApiResponse<MigrationResult> localVarResp = containersCancelMigrationWithHttpInfo(subscriptionId, resourceGroupName, farmId, operationId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancel a container migration job.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param operationId Operation Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;MigrationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation has been accepted and processed </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED - Operation has been accepted will be processed asynchronously </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationResult> containersCancelMigrationWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String operationId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = containersCancelMigrationValidateBeforeCall(subscriptionId, resourceGroupName, farmId, operationId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MigrationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancel a container migration job.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param operationId Operation Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation has been accepted and processed </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED - Operation has been accepted will be processed asynchronously </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersCancelMigrationAsync(String subscriptionId, String resourceGroupName, String farmId, String operationId, String apiVersion, final ApiCallback<MigrationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = containersCancelMigrationValidateBeforeCall(subscriptionId, resourceGroupName, farmId, operationId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MigrationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containersList
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param intent The container migration intent. (required)
     * @param maxCount The maximum number of containers. (optional)
     * @param startIndex The starting index the resource provider uses. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of containers has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm or share was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersListCall(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, String intent, Integer maxCount, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/{shareName}/containers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (intent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Intent", intent));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxCount", maxCount));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartIndex", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containersListValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, String intent, Integer maxCount, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containersList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containersList(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling containersList(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling containersList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containersList(Async)");
        }

        // verify the required parameter 'intent' is set
        if (intent == null) {
            throw new ApiException("Missing the required parameter 'intent' when calling containersList(Async)");
        }

        return containersListCall(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, intent, maxCount, startIndex, _callback);

    }

    /**
     * 
     * Returns the list of containers which can be migrated in the specified share.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param intent The container migration intent. (required)
     * @param maxCount The maximum number of containers. (optional)
     * @param startIndex The starting index the resource provider uses. (optional)
     * @return List&lt;Container&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of containers has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm or share was not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<Container> containersList(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, String intent, Integer maxCount, Integer startIndex) throws ApiException {
        ApiResponse<List<Container>> localVarResp = containersListWithHttpInfo(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, intent, maxCount, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the list of containers which can be migrated in the specified share.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param intent The container migration intent. (required)
     * @param maxCount The maximum number of containers. (optional)
     * @param startIndex The starting index the resource provider uses. (optional)
     * @return ApiResponse&lt;List&lt;Container&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of containers has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm or share was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Container>> containersListWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, String intent, Integer maxCount, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = containersListValidateBeforeCall(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, intent, maxCount, startIndex, null);
        Type localVarReturnType = new TypeToken<List<Container>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of containers which can be migrated in the specified share.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param intent The container migration intent. (required)
     * @param maxCount The maximum number of containers. (optional)
     * @param startIndex The starting index the resource provider uses. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of containers has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm or share was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersListAsync(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, String intent, Integer maxCount, Integer startIndex, final ApiCallback<List<Container>> _callback) throws ApiException {

        okhttp3.Call localVarCall = containersListValidateBeforeCall(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, intent, maxCount, startIndex, _callback);
        Type localVarReturnType = new TypeToken<List<Container>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containersListDestinationShares
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of shares has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm or share was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersListDestinationSharesCall(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/{shareName}/destinationshares"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containersListDestinationSharesValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containersListDestinationShares(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containersListDestinationShares(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling containersListDestinationShares(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling containersListDestinationShares(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containersListDestinationShares(Async)");
        }

        return containersListDestinationSharesCall(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, _callback);

    }

    /**
     * 
     * Returns a list of destination shares that the system considers as best candidates for migration.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @return List&lt;ContainersListDestinationShares200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of shares has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm or share was not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<ContainersListDestinationShares200ResponseInner> containersListDestinationShares(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion) throws ApiException {
        ApiResponse<List<ContainersListDestinationShares200ResponseInner>> localVarResp = containersListDestinationSharesWithHttpInfo(subscriptionId, resourceGroupName, farmId, shareName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of destination shares that the system considers as best candidates for migration.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;List&lt;ContainersListDestinationShares200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of shares has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm or share was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContainersListDestinationShares200ResponseInner>> containersListDestinationSharesWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = containersListDestinationSharesValidateBeforeCall(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<ContainersListDestinationShares200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of destination shares that the system considers as best candidates for migration.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of shares has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm or share was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersListDestinationSharesAsync(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, final ApiCallback<List<ContainersListDestinationShares200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = containersListDestinationSharesValidateBeforeCall(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<ContainersListDestinationShares200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containersMigrate
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param migrationParameters The parameters of container migration job. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Container has been migrated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED -- Operation accepted and will be performed asynchronously </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersMigrateCall(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, MigrationParameters migrationParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrationParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/{shareName}/migrate"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containersMigrateValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, MigrationParameters migrationParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containersMigrate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containersMigrate(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling containersMigrate(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling containersMigrate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containersMigrate(Async)");
        }

        // verify the required parameter 'migrationParameters' is set
        if (migrationParameters == null) {
            throw new ApiException("Missing the required parameter 'migrationParameters' when calling containersMigrate(Async)");
        }

        return containersMigrateCall(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, migrationParameters, _callback);

    }

    /**
     * 
     * Starts a container migration job to migrate containers to the specified destination share.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param migrationParameters The parameters of container migration job. (required)
     * @return MigrationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Container has been migrated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED -- Operation accepted and will be performed asynchronously </td><td>  -  </td></tr>
     </table>
     */
    public MigrationResult containersMigrate(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, MigrationParameters migrationParameters) throws ApiException {
        ApiResponse<MigrationResult> localVarResp = containersMigrateWithHttpInfo(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, migrationParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts a container migration job to migrate containers to the specified destination share.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param migrationParameters The parameters of container migration job. (required)
     * @return ApiResponse&lt;MigrationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Container has been migrated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED -- Operation accepted and will be performed asynchronously </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationResult> containersMigrateWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, MigrationParameters migrationParameters) throws ApiException {
        okhttp3.Call localVarCall = containersMigrateValidateBeforeCall(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, migrationParameters, null);
        Type localVarReturnType = new TypeToken<MigrationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts a container migration job to migrate containers to the specified destination share.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param shareName Share name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param migrationParameters The parameters of container migration job. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Container has been migrated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED -- Operation accepted and will be performed asynchronously </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersMigrateAsync(String subscriptionId, String resourceGroupName, String farmId, String shareName, String apiVersion, MigrationParameters migrationParameters, final ApiCallback<MigrationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = containersMigrateValidateBeforeCall(subscriptionId, resourceGroupName, farmId, shareName, apiVersion, migrationParameters, _callback);
        Type localVarReturnType = new TypeToken<MigrationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containersMigrationStatus
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param operationId Operation Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation has been accepted and processed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersMigrationStatusCall(String subscriptionId, String resourceGroupName, String farmId, String operationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/shares/operationresults/{operationId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containersMigrationStatusValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String operationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containersMigrationStatus(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containersMigrationStatus(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling containersMigrationStatus(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling containersMigrationStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containersMigrationStatus(Async)");
        }

        return containersMigrationStatusCall(subscriptionId, resourceGroupName, farmId, operationId, apiVersion, _callback);

    }

    /**
     * 
     * Returns the status of a container migration job.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param operationId Operation Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return MigrationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation has been accepted and processed </td><td>  -  </td></tr>
     </table>
     */
    public MigrationResult containersMigrationStatus(String subscriptionId, String resourceGroupName, String farmId, String operationId, String apiVersion) throws ApiException {
        ApiResponse<MigrationResult> localVarResp = containersMigrationStatusWithHttpInfo(subscriptionId, resourceGroupName, farmId, operationId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the status of a container migration job.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param operationId Operation Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;MigrationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation has been accepted and processed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationResult> containersMigrationStatusWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String operationId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = containersMigrationStatusValidateBeforeCall(subscriptionId, resourceGroupName, farmId, operationId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MigrationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the status of a container migration job.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param operationId Operation Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Operation has been accepted and processed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersMigrationStatusAsync(String subscriptionId, String resourceGroupName, String farmId, String operationId, String apiVersion, final ApiCallback<MigrationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = containersMigrationStatusValidateBeforeCall(subscriptionId, resourceGroupName, farmId, operationId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MigrationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
