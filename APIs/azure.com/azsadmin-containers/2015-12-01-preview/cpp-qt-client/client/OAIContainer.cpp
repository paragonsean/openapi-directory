/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainer::OAIContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainer::OAIContainer() {
    this->initializeModel();
}

OAIContainer::~OAIContainer() {}

void OAIContainer::initializeModel() {

    m_accountid_isSet = false;
    m_accountid_isValid = false;

    m_accountname_isSet = false;
    m_accountname_isValid = false;

    m_container_state_isSet = false;
    m_container_state_isValid = false;

    m_containerid_isSet = false;
    m_containerid_isValid = false;

    m_containername_isSet = false;
    m_containername_isValid = false;

    m_sharename_isSet = false;
    m_sharename_isValid = false;

    m_used_bytes_in_primary_volume_isSet = false;
    m_used_bytes_in_primary_volume_isValid = false;
}

void OAIContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainer::fromJsonObject(QJsonObject json) {

    m_accountid_isValid = ::OpenAPI::fromJsonValue(m_accountid, json[QString("accountid")]);
    m_accountid_isSet = !json[QString("accountid")].isNull() && m_accountid_isValid;

    m_accountname_isValid = ::OpenAPI::fromJsonValue(m_accountname, json[QString("accountname")]);
    m_accountname_isSet = !json[QString("accountname")].isNull() && m_accountname_isValid;

    m_container_state_isValid = ::OpenAPI::fromJsonValue(m_container_state, json[QString("containerState")]);
    m_container_state_isSet = !json[QString("containerState")].isNull() && m_container_state_isValid;

    m_containerid_isValid = ::OpenAPI::fromJsonValue(m_containerid, json[QString("containerid")]);
    m_containerid_isSet = !json[QString("containerid")].isNull() && m_containerid_isValid;

    m_containername_isValid = ::OpenAPI::fromJsonValue(m_containername, json[QString("containername")]);
    m_containername_isSet = !json[QString("containername")].isNull() && m_containername_isValid;

    m_sharename_isValid = ::OpenAPI::fromJsonValue(m_sharename, json[QString("sharename")]);
    m_sharename_isSet = !json[QString("sharename")].isNull() && m_sharename_isValid;

    m_used_bytes_in_primary_volume_isValid = ::OpenAPI::fromJsonValue(m_used_bytes_in_primary_volume, json[QString("usedBytesInPrimaryVolume")]);
    m_used_bytes_in_primary_volume_isSet = !json[QString("usedBytesInPrimaryVolume")].isNull() && m_used_bytes_in_primary_volume_isValid;
}

QString OAIContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_accountid_isSet) {
        obj.insert(QString("accountid"), ::OpenAPI::toJsonValue(m_accountid));
    }
    if (m_accountname_isSet) {
        obj.insert(QString("accountname"), ::OpenAPI::toJsonValue(m_accountname));
    }
    if (m_container_state_isSet) {
        obj.insert(QString("containerState"), ::OpenAPI::toJsonValue(m_container_state));
    }
    if (m_containerid_isSet) {
        obj.insert(QString("containerid"), ::OpenAPI::toJsonValue(m_containerid));
    }
    if (m_containername_isSet) {
        obj.insert(QString("containername"), ::OpenAPI::toJsonValue(m_containername));
    }
    if (m_sharename_isSet) {
        obj.insert(QString("sharename"), ::OpenAPI::toJsonValue(m_sharename));
    }
    if (m_used_bytes_in_primary_volume_isSet) {
        obj.insert(QString("usedBytesInPrimaryVolume"), ::OpenAPI::toJsonValue(m_used_bytes_in_primary_volume));
    }
    return obj;
}

QString OAIContainer::getAccountid() const {
    return m_accountid;
}
void OAIContainer::setAccountid(const QString &accountid) {
    m_accountid = accountid;
    m_accountid_isSet = true;
}

bool OAIContainer::is_accountid_Set() const{
    return m_accountid_isSet;
}

bool OAIContainer::is_accountid_Valid() const{
    return m_accountid_isValid;
}

QString OAIContainer::getAccountname() const {
    return m_accountname;
}
void OAIContainer::setAccountname(const QString &accountname) {
    m_accountname = accountname;
    m_accountname_isSet = true;
}

bool OAIContainer::is_accountname_Set() const{
    return m_accountname_isSet;
}

bool OAIContainer::is_accountname_Valid() const{
    return m_accountname_isValid;
}

QString OAIContainer::getContainerState() const {
    return m_container_state;
}
void OAIContainer::setContainerState(const QString &container_state) {
    m_container_state = container_state;
    m_container_state_isSet = true;
}

bool OAIContainer::is_container_state_Set() const{
    return m_container_state_isSet;
}

bool OAIContainer::is_container_state_Valid() const{
    return m_container_state_isValid;
}

qint64 OAIContainer::getContainerid() const {
    return m_containerid;
}
void OAIContainer::setContainerid(const qint64 &containerid) {
    m_containerid = containerid;
    m_containerid_isSet = true;
}

bool OAIContainer::is_containerid_Set() const{
    return m_containerid_isSet;
}

bool OAIContainer::is_containerid_Valid() const{
    return m_containerid_isValid;
}

QString OAIContainer::getContainername() const {
    return m_containername;
}
void OAIContainer::setContainername(const QString &containername) {
    m_containername = containername;
    m_containername_isSet = true;
}

bool OAIContainer::is_containername_Set() const{
    return m_containername_isSet;
}

bool OAIContainer::is_containername_Valid() const{
    return m_containername_isValid;
}

QString OAIContainer::getSharename() const {
    return m_sharename;
}
void OAIContainer::setSharename(const QString &sharename) {
    m_sharename = sharename;
    m_sharename_isSet = true;
}

bool OAIContainer::is_sharename_Set() const{
    return m_sharename_isSet;
}

bool OAIContainer::is_sharename_Valid() const{
    return m_sharename_isValid;
}

qint64 OAIContainer::getUsedBytesInPrimaryVolume() const {
    return m_used_bytes_in_primary_volume;
}
void OAIContainer::setUsedBytesInPrimaryVolume(const qint64 &used_bytes_in_primary_volume) {
    m_used_bytes_in_primary_volume = used_bytes_in_primary_volume;
    m_used_bytes_in_primary_volume_isSet = true;
}

bool OAIContainer::is_used_bytes_in_primary_volume_Set() const{
    return m_used_bytes_in_primary_volume_isSet;
}

bool OAIContainer::is_used_bytes_in_primary_volume_Valid() const{
    return m_used_bytes_in_primary_volume_isValid;
}

bool OAIContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accountid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accountname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_containerid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_containername_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_bytes_in_primary_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
