/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrationResult::OAIMigrationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrationResult::OAIMigrationResult() {
    this->initializeModel();
}

OAIMigrationResult::~OAIMigrationResult() {}

void OAIMigrationResult::initializeModel() {

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_destination_share_name_isSet = false;
    m_destination_share_name_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_migration_status_isSet = false;
    m_migration_status_isValid = false;

    m_source_share_name_isSet = false;
    m_source_share_name_isValid = false;

    m_storage_account_name_isSet = false;
    m_storage_account_name_isValid = false;

    m_sub_entities_completed_isSet = false;
    m_sub_entities_completed_isValid = false;

    m_sub_entities_failed_isSet = false;
    m_sub_entities_failed_isValid = false;
}

void OAIMigrationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrationResult::fromJsonObject(QJsonObject json) {

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_destination_share_name_isValid = ::OpenAPI::fromJsonValue(m_destination_share_name, json[QString("destinationShareName")]);
    m_destination_share_name_isSet = !json[QString("destinationShareName")].isNull() && m_destination_share_name_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_migration_status_isValid = ::OpenAPI::fromJsonValue(m_migration_status, json[QString("migrationStatus")]);
    m_migration_status_isSet = !json[QString("migrationStatus")].isNull() && m_migration_status_isValid;

    m_source_share_name_isValid = ::OpenAPI::fromJsonValue(m_source_share_name, json[QString("sourceShareName")]);
    m_source_share_name_isSet = !json[QString("sourceShareName")].isNull() && m_source_share_name_isValid;

    m_storage_account_name_isValid = ::OpenAPI::fromJsonValue(m_storage_account_name, json[QString("storageAccountName")]);
    m_storage_account_name_isSet = !json[QString("storageAccountName")].isNull() && m_storage_account_name_isValid;

    m_sub_entities_completed_isValid = ::OpenAPI::fromJsonValue(m_sub_entities_completed, json[QString("subEntitiesCompleted")]);
    m_sub_entities_completed_isSet = !json[QString("subEntitiesCompleted")].isNull() && m_sub_entities_completed_isValid;

    m_sub_entities_failed_isValid = ::OpenAPI::fromJsonValue(m_sub_entities_failed, json[QString("subEntitiesFailed")]);
    m_sub_entities_failed_isSet = !json[QString("subEntitiesFailed")].isNull() && m_sub_entities_failed_isValid;
}

QString OAIMigrationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_destination_share_name_isSet) {
        obj.insert(QString("destinationShareName"), ::OpenAPI::toJsonValue(m_destination_share_name));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_migration_status.isSet()) {
        obj.insert(QString("migrationStatus"), ::OpenAPI::toJsonValue(m_migration_status));
    }
    if (m_source_share_name_isSet) {
        obj.insert(QString("sourceShareName"), ::OpenAPI::toJsonValue(m_source_share_name));
    }
    if (m_storage_account_name_isSet) {
        obj.insert(QString("storageAccountName"), ::OpenAPI::toJsonValue(m_storage_account_name));
    }
    if (m_sub_entities_completed_isSet) {
        obj.insert(QString("subEntitiesCompleted"), ::OpenAPI::toJsonValue(m_sub_entities_completed));
    }
    if (m_sub_entities_failed_isSet) {
        obj.insert(QString("subEntitiesFailed"), ::OpenAPI::toJsonValue(m_sub_entities_failed));
    }
    return obj;
}

QString OAIMigrationResult::getContainerName() const {
    return m_container_name;
}
void OAIMigrationResult::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIMigrationResult::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIMigrationResult::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIMigrationResult::getDestinationShareName() const {
    return m_destination_share_name;
}
void OAIMigrationResult::setDestinationShareName(const QString &destination_share_name) {
    m_destination_share_name = destination_share_name;
    m_destination_share_name_isSet = true;
}

bool OAIMigrationResult::is_destination_share_name_Set() const{
    return m_destination_share_name_isSet;
}

bool OAIMigrationResult::is_destination_share_name_Valid() const{
    return m_destination_share_name_isValid;
}

QString OAIMigrationResult::getFailureReason() const {
    return m_failure_reason;
}
void OAIMigrationResult::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIMigrationResult::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIMigrationResult::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIMigrationResult::getJobId() const {
    return m_job_id;
}
void OAIMigrationResult::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIMigrationResult::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIMigrationResult::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIMigrationState OAIMigrationResult::getMigrationStatus() const {
    return m_migration_status;
}
void OAIMigrationResult::setMigrationStatus(const OAIMigrationState &migration_status) {
    m_migration_status = migration_status;
    m_migration_status_isSet = true;
}

bool OAIMigrationResult::is_migration_status_Set() const{
    return m_migration_status_isSet;
}

bool OAIMigrationResult::is_migration_status_Valid() const{
    return m_migration_status_isValid;
}

QString OAIMigrationResult::getSourceShareName() const {
    return m_source_share_name;
}
void OAIMigrationResult::setSourceShareName(const QString &source_share_name) {
    m_source_share_name = source_share_name;
    m_source_share_name_isSet = true;
}

bool OAIMigrationResult::is_source_share_name_Set() const{
    return m_source_share_name_isSet;
}

bool OAIMigrationResult::is_source_share_name_Valid() const{
    return m_source_share_name_isValid;
}

QString OAIMigrationResult::getStorageAccountName() const {
    return m_storage_account_name;
}
void OAIMigrationResult::setStorageAccountName(const QString &storage_account_name) {
    m_storage_account_name = storage_account_name;
    m_storage_account_name_isSet = true;
}

bool OAIMigrationResult::is_storage_account_name_Set() const{
    return m_storage_account_name_isSet;
}

bool OAIMigrationResult::is_storage_account_name_Valid() const{
    return m_storage_account_name_isValid;
}

qint64 OAIMigrationResult::getSubEntitiesCompleted() const {
    return m_sub_entities_completed;
}
void OAIMigrationResult::setSubEntitiesCompleted(const qint64 &sub_entities_completed) {
    m_sub_entities_completed = sub_entities_completed;
    m_sub_entities_completed_isSet = true;
}

bool OAIMigrationResult::is_sub_entities_completed_Set() const{
    return m_sub_entities_completed_isSet;
}

bool OAIMigrationResult::is_sub_entities_completed_Valid() const{
    return m_sub_entities_completed_isValid;
}

qint64 OAIMigrationResult::getSubEntitiesFailed() const {
    return m_sub_entities_failed;
}
void OAIMigrationResult::setSubEntitiesFailed(const qint64 &sub_entities_failed) {
    m_sub_entities_failed = sub_entities_failed;
    m_sub_entities_failed_isSet = true;
}

bool OAIMigrationResult::is_sub_entities_failed_Set() const{
    return m_sub_entities_failed_isSet;
}

bool OAIMigrationResult::is_sub_entities_failed_Valid() const{
    return m_sub_entities_failed_isValid;
}

bool OAIMigrationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_entities_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_entities_failed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
