/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainers_ListDestinationShares_200_response_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainers_ListDestinationShares_200_response_inner_properties::OAIContainers_ListDestinationShares_200_response_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainers_ListDestinationShares_200_response_inner_properties::OAIContainers_ListDestinationShares_200_response_inner_properties() {
    this->initializeModel();
}

OAIContainers_ListDestinationShares_200_response_inner_properties::~OAIContainers_ListDestinationShares_200_response_inner_properties() {}

void OAIContainers_ListDestinationShares_200_response_inner_properties::initializeModel() {

    m_free_capacity_isSet = false;
    m_free_capacity_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_share_name_isSet = false;
    m_share_name_isValid = false;

    m_total_capacity_isSet = false;
    m_total_capacity_isValid = false;

    m_unc_path_isSet = false;
    m_unc_path_isValid = false;

    m_used_capacity_isSet = false;
    m_used_capacity_isValid = false;
}

void OAIContainers_ListDestinationShares_200_response_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainers_ListDestinationShares_200_response_inner_properties::fromJsonObject(QJsonObject json) {

    m_free_capacity_isValid = ::OpenAPI::fromJsonValue(m_free_capacity, json[QString("freeCapacity")]);
    m_free_capacity_isSet = !json[QString("freeCapacity")].isNull() && m_free_capacity_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_share_name_isValid = ::OpenAPI::fromJsonValue(m_share_name, json[QString("shareName")]);
    m_share_name_isSet = !json[QString("shareName")].isNull() && m_share_name_isValid;

    m_total_capacity_isValid = ::OpenAPI::fromJsonValue(m_total_capacity, json[QString("totalCapacity")]);
    m_total_capacity_isSet = !json[QString("totalCapacity")].isNull() && m_total_capacity_isValid;

    m_unc_path_isValid = ::OpenAPI::fromJsonValue(m_unc_path, json[QString("uncPath")]);
    m_unc_path_isSet = !json[QString("uncPath")].isNull() && m_unc_path_isValid;

    m_used_capacity_isValid = ::OpenAPI::fromJsonValue(m_used_capacity, json[QString("usedCapacity")]);
    m_used_capacity_isSet = !json[QString("usedCapacity")].isNull() && m_used_capacity_isValid;
}

QString OAIContainers_ListDestinationShares_200_response_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainers_ListDestinationShares_200_response_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_free_capacity_isSet) {
        obj.insert(QString("freeCapacity"), ::OpenAPI::toJsonValue(m_free_capacity));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_share_name_isSet) {
        obj.insert(QString("shareName"), ::OpenAPI::toJsonValue(m_share_name));
    }
    if (m_total_capacity_isSet) {
        obj.insert(QString("totalCapacity"), ::OpenAPI::toJsonValue(m_total_capacity));
    }
    if (m_unc_path_isSet) {
        obj.insert(QString("uncPath"), ::OpenAPI::toJsonValue(m_unc_path));
    }
    if (m_used_capacity_isSet) {
        obj.insert(QString("usedCapacity"), ::OpenAPI::toJsonValue(m_used_capacity));
    }
    return obj;
}

qint64 OAIContainers_ListDestinationShares_200_response_inner_properties::getFreeCapacity() const {
    return m_free_capacity;
}
void OAIContainers_ListDestinationShares_200_response_inner_properties::setFreeCapacity(const qint64 &free_capacity) {
    m_free_capacity = free_capacity;
    m_free_capacity_isSet = true;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_free_capacity_Set() const{
    return m_free_capacity_isSet;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_free_capacity_Valid() const{
    return m_free_capacity_isValid;
}

QString OAIContainers_ListDestinationShares_200_response_inner_properties::getHealthStatus() const {
    return m_health_status;
}
void OAIContainers_ListDestinationShares_200_response_inner_properties::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAIContainers_ListDestinationShares_200_response_inner_properties::getShareName() const {
    return m_share_name;
}
void OAIContainers_ListDestinationShares_200_response_inner_properties::setShareName(const QString &share_name) {
    m_share_name = share_name;
    m_share_name_isSet = true;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_share_name_Set() const{
    return m_share_name_isSet;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_share_name_Valid() const{
    return m_share_name_isValid;
}

qint64 OAIContainers_ListDestinationShares_200_response_inner_properties::getTotalCapacity() const {
    return m_total_capacity;
}
void OAIContainers_ListDestinationShares_200_response_inner_properties::setTotalCapacity(const qint64 &total_capacity) {
    m_total_capacity = total_capacity;
    m_total_capacity_isSet = true;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_total_capacity_Set() const{
    return m_total_capacity_isSet;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_total_capacity_Valid() const{
    return m_total_capacity_isValid;
}

QString OAIContainers_ListDestinationShares_200_response_inner_properties::getUncPath() const {
    return m_unc_path;
}
void OAIContainers_ListDestinationShares_200_response_inner_properties::setUncPath(const QString &unc_path) {
    m_unc_path = unc_path;
    m_unc_path_isSet = true;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_unc_path_Set() const{
    return m_unc_path_isSet;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_unc_path_Valid() const{
    return m_unc_path_isValid;
}

qint64 OAIContainers_ListDestinationShares_200_response_inner_properties::getUsedCapacity() const {
    return m_used_capacity;
}
void OAIContainers_ListDestinationShares_200_response_inner_properties::setUsedCapacity(const qint64 &used_capacity) {
    m_used_capacity = used_capacity;
    m_used_capacity_isSet = true;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_used_capacity_Set() const{
    return m_used_capacity_isSet;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::is_used_capacity_Valid() const{
    return m_used_capacity_isValid;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_free_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unc_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainers_ListDestinationShares_200_response_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
