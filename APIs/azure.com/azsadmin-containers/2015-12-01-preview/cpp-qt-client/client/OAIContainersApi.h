/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContainersApi_H
#define OAI_OAIContainersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContainer.h"
#include "OAIContainers_ListDestinationShares_200_response_inner.h"
#include "OAIMigrationParameters.h"
#include "OAIMigrationResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContainersApi : public QObject {
    Q_OBJECT

public:
    OAIContainersApi(const int timeOut = 0);
    ~OAIContainersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void containersCancelMigration(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &operation_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  intent QString [required]
    * @param[in]  max_count qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    */
    virtual void containersList(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &share_name, const QString &api_version, const QString &intent, const ::OpenAPI::OptionalParam<qint32> &max_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void containersListDestinationShares(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &share_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  migration_parameters OAIMigrationParameters [required]
    */
    virtual void containersMigrate(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &share_name, const QString &api_version, const OAIMigrationParameters &migration_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void containersMigrationStatus(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &operation_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void containersCancelMigrationCallback(OAIHttpRequestWorker *worker);
    void containersListCallback(OAIHttpRequestWorker *worker);
    void containersListDestinationSharesCallback(OAIHttpRequestWorker *worker);
    void containersMigrateCallback(OAIHttpRequestWorker *worker);
    void containersMigrationStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void containersCancelMigrationSignal(OAIMigrationResult summary);
    void containersListSignal(QList<OAIContainer> summary);
    void containersListDestinationSharesSignal(QList<OAIContainers_ListDestinationShares_200_response_inner> summary);
    void containersMigrateSignal(OAIMigrationResult summary);
    void containersMigrationStatusSignal(OAIMigrationResult summary);


    void containersCancelMigrationSignalFull(OAIHttpRequestWorker *worker, OAIMigrationResult summary);
    void containersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIContainer> summary);
    void containersListDestinationSharesSignalFull(OAIHttpRequestWorker *worker, QList<OAIContainers_ListDestinationShares_200_response_inner> summary);
    void containersMigrateSignalFull(OAIHttpRequestWorker *worker, OAIMigrationResult summary);
    void containersMigrationStatusSignalFull(OAIHttpRequestWorker *worker, OAIMigrationResult summary);

    Q_DECL_DEPRECATED_X("Use containersCancelMigrationSignalError() instead")
    void containersCancelMigrationSignalE(OAIMigrationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersCancelMigrationSignalError(OAIMigrationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersListSignalError() instead")
    void containersListSignalE(QList<OAIContainer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersListSignalError(QList<OAIContainer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersListDestinationSharesSignalError() instead")
    void containersListDestinationSharesSignalE(QList<OAIContainers_ListDestinationShares_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersListDestinationSharesSignalError(QList<OAIContainers_ListDestinationShares_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersMigrateSignalError() instead")
    void containersMigrateSignalE(OAIMigrationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersMigrateSignalError(OAIMigrationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersMigrationStatusSignalError() instead")
    void containersMigrationStatusSignalE(OAIMigrationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containersMigrationStatusSignalError(OAIMigrationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use containersCancelMigrationSignalErrorFull() instead")
    void containersCancelMigrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersCancelMigrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersListSignalErrorFull() instead")
    void containersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersListDestinationSharesSignalErrorFull() instead")
    void containersListDestinationSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersListDestinationSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersMigrateSignalErrorFull() instead")
    void containersMigrateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersMigrateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containersMigrationStatusSignalErrorFull() instead")
    void containersMigrationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containersMigrationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
