/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrationParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrationParameters::OAIMigrationParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrationParameters::OAIMigrationParameters() {
    this->initializeModel();
}

OAIMigrationParameters::~OAIMigrationParameters() {}

void OAIMigrationParameters::initializeModel() {

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_destination_share_unc_path_isSet = false;
    m_destination_share_unc_path_isValid = false;

    m_storage_account_name_isSet = false;
    m_storage_account_name_isValid = false;
}

void OAIMigrationParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrationParameters::fromJsonObject(QJsonObject json) {

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_destination_share_unc_path_isValid = ::OpenAPI::fromJsonValue(m_destination_share_unc_path, json[QString("destinationShareUncPath")]);
    m_destination_share_unc_path_isSet = !json[QString("destinationShareUncPath")].isNull() && m_destination_share_unc_path_isValid;

    m_storage_account_name_isValid = ::OpenAPI::fromJsonValue(m_storage_account_name, json[QString("storageAccountName")]);
    m_storage_account_name_isSet = !json[QString("storageAccountName")].isNull() && m_storage_account_name_isValid;
}

QString OAIMigrationParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrationParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_destination_share_unc_path_isSet) {
        obj.insert(QString("destinationShareUncPath"), ::OpenAPI::toJsonValue(m_destination_share_unc_path));
    }
    if (m_storage_account_name_isSet) {
        obj.insert(QString("storageAccountName"), ::OpenAPI::toJsonValue(m_storage_account_name));
    }
    return obj;
}

QString OAIMigrationParameters::getContainerName() const {
    return m_container_name;
}
void OAIMigrationParameters::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIMigrationParameters::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIMigrationParameters::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIMigrationParameters::getDestinationShareUncPath() const {
    return m_destination_share_unc_path;
}
void OAIMigrationParameters::setDestinationShareUncPath(const QString &destination_share_unc_path) {
    m_destination_share_unc_path = destination_share_unc_path;
    m_destination_share_unc_path_isSet = true;
}

bool OAIMigrationParameters::is_destination_share_unc_path_Set() const{
    return m_destination_share_unc_path_isSet;
}

bool OAIMigrationParameters::is_destination_share_unc_path_Valid() const{
    return m_destination_share_unc_path_isValid;
}

QString OAIMigrationParameters::getStorageAccountName() const {
    return m_storage_account_name;
}
void OAIMigrationParameters::setStorageAccountName(const QString &storage_account_name) {
    m_storage_account_name = storage_account_name;
    m_storage_account_name_isSet = true;
}

bool OAIMigrationParameters::is_storage_account_name_Set() const{
    return m_storage_account_name_isSet;
}

bool OAIMigrationParameters::is_storage_account_name_Valid() const{
    return m_storage_account_name_isValid;
}

bool OAIMigrationParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_share_unc_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrationParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_name_isValid && m_destination_share_unc_path_isValid && m_storage_account_name_isValid && true;
}

} // namespace OpenAPI
