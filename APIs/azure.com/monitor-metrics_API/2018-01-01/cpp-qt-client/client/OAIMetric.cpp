/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_timeseries_isSet = false;
    m_timeseries_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_timeseries_isValid = ::OpenAPI::fromJsonValue(m_timeseries, json[QString("timeseries")]);
    m_timeseries_isSet = !json[QString("timeseries")].isNull() && m_timeseries_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_timeseries.size() > 0) {
        obj.insert(QString("timeseries"), ::OpenAPI::toJsonValue(m_timeseries));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIMetric::getId() const {
    return m_id;
}
void OAIMetric::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMetric::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMetric::is_id_Valid() const{
    return m_id_isValid;
}

OAILocalizableString OAIMetric::getName() const {
    return m_name;
}
void OAIMetric::setName(const OAILocalizableString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetric::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITimeSeriesElement> OAIMetric::getTimeseries() const {
    return m_timeseries;
}
void OAIMetric::setTimeseries(const QList<OAITimeSeriesElement> &timeseries) {
    m_timeseries = timeseries;
    m_timeseries_isSet = true;
}

bool OAIMetric::is_timeseries_Set() const{
    return m_timeseries_isSet;
}

bool OAIMetric::is_timeseries_Valid() const{
    return m_timeseries_isValid;
}

QString OAIMetric::getType() const {
    return m_type;
}
void OAIMetric::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMetric::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMetric::is_type_Valid() const{
    return m_type_isValid;
}

OAIUnit OAIMetric::getUnit() const {
    return m_unit;
}
void OAIMetric::setUnit(const OAIUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetric::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetric::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeseries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_timeseries_isValid && m_type_isValid && m_unit_isValid && true;
}

} // namespace OpenAPI
