/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_resourceregion_isSet = false;
    m_resourceregion_isValid = false;

    m_timespan_isSet = false;
    m_timespan_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_resourceregion_isValid = ::OpenAPI::fromJsonValue(m_resourceregion, json[QString("resourceregion")]);
    m_resourceregion_isSet = !json[QString("resourceregion")].isNull() && m_resourceregion_isValid;

    m_timespan_isValid = ::OpenAPI::fromJsonValue(m_timespan, json[QString("timespan")]);
    m_timespan_isSet = !json[QString("timespan")].isNull() && m_timespan_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_resourceregion_isSet) {
        obj.insert(QString("resourceregion"), ::OpenAPI::toJsonValue(m_resourceregion));
    }
    if (m_timespan_isSet) {
        obj.insert(QString("timespan"), ::OpenAPI::toJsonValue(m_timespan));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

double OAIResponse::getCost() const {
    return m_cost;
}
void OAIResponse::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIResponse::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIResponse::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIResponse::getInterval() const {
    return m_interval;
}
void OAIResponse::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIResponse::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIResponse::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIResponse::getRNamespace() const {
    return m_r_namespace;
}
void OAIResponse::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIResponse::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIResponse::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIResponse::getResourceregion() const {
    return m_resourceregion;
}
void OAIResponse::setResourceregion(const QString &resourceregion) {
    m_resourceregion = resourceregion;
    m_resourceregion_isSet = true;
}

bool OAIResponse::is_resourceregion_Set() const{
    return m_resourceregion_isSet;
}

bool OAIResponse::is_resourceregion_Valid() const{
    return m_resourceregion_isValid;
}

QString OAIResponse::getTimespan() const {
    return m_timespan;
}
void OAIResponse::setTimespan(const QString &timespan) {
    m_timespan = timespan;
    m_timespan_isSet = true;
}

bool OAIResponse::is_timespan_Set() const{
    return m_timespan_isSet;
}

bool OAIResponse::is_timespan_Valid() const{
    return m_timespan_isValid;
}

QList<OAIMetric> OAIResponse::getValue() const {
    return m_value;
}
void OAIResponse::setValue(const QList<OAIMetric> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIResponse::is_value_Set() const{
    return m_value_isSet;
}

bool OAIResponse::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resourceregion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timespan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timespan_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
