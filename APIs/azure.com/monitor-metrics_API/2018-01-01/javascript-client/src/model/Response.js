/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Metric from './Metric';

/**
 * The Response model module.
 * @module model/Response
 * @version 2018-01-01
 */
class Response {
    /**
     * Constructs a new <code>Response</code>.
     * The response to a metrics query.
     * @alias module:model/Response
     * @param timespan {String} The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested.
     * @param value {Array.<module:model/Metric>} the value of the collection.
     */
    constructor(timespan, value) { 
        
        Response.initialize(this, timespan, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timespan, value) { 
        obj['timespan'] = timespan;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Response} obj Optional instance to populate.
     * @return {module:model/Response} The populated <code>Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Response();

            if (data.hasOwnProperty('cost')) {
                obj['cost'] = ApiClient.convertToType(data['cost'], 'Number');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('resourceregion')) {
                obj['resourceregion'] = ApiClient.convertToType(data['resourceregion'], 'String');
            }
            if (data.hasOwnProperty('timespan')) {
                obj['timespan'] = ApiClient.convertToType(data['timespan'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], [Metric]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['resourceregion'] && !(typeof data['resourceregion'] === 'string' || data['resourceregion'] instanceof String)) {
            throw new Error("Expected the field `resourceregion` to be a primitive type in the JSON string but got " + data['resourceregion']);
        }
        // ensure the json data is a string
        if (data['timespan'] && !(typeof data['timespan'] === 'string' || data['timespan'] instanceof String)) {
            throw new Error("Expected the field `timespan` to be a primitive type in the JSON string but got " + data['timespan']);
        }
        if (data['value']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['value'])) {
                throw new Error("Expected the field `value` to be an array in the JSON data but got " + data['value']);
            }
            // validate the optional field `value` (array)
            for (const item of data['value']) {
                Metric.validateJSON(item);
            };
        }

        return true;
    }


}

Response.RequiredProperties = ["timespan", "value"];

/**
 * The integer value representing the cost of the query, for data case.
 * @member {Number} cost
 */
Response.prototype['cost'] = undefined;

/**
 * The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.
 * @member {String} interval
 */
Response.prototype['interval'] = undefined;

/**
 * The namespace of the metrics been queried
 * @member {String} namespace
 */
Response.prototype['namespace'] = undefined;

/**
 * The region of the resource been queried for metrics.
 * @member {String} resourceregion
 */
Response.prototype['resourceregion'] = undefined;

/**
 * The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested.
 * @member {String} timespan
 */
Response.prototype['timespan'] = undefined;

/**
 * the value of the collection.
 * @member {Array.<module:model/Metric>} value
 */
Response.prototype['value'] = undefined;






export default Response;

