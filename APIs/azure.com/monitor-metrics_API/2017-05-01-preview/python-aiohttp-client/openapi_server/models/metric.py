# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localizable_string import LocalizableString
from openapi_server.models.time_series_element import TimeSeriesElement
from openapi_server.models.unit import Unit
from openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: LocalizableString=None, timeseries: List[TimeSeriesElement]=None, type: str=None, unit: Unit=None):
        """Metric - a model defined in OpenAPI

        :param id: The id of this Metric.
        :param name: The name of this Metric.
        :param timeseries: The timeseries of this Metric.
        :param type: The type of this Metric.
        :param unit: The unit of this Metric.
        """
        self.openapi_types = {
            'id': str,
            'name': LocalizableString,
            'timeseries': List[TimeSeriesElement],
            'type': str,
            'unit': Unit
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'timeseries': 'timeseries',
            'type': 'type',
            'unit': 'unit'
        }

        self._id = id
        self._name = name
        self._timeseries = timeseries
        self._type = type
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric of this Metric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Metric.

        the metric Id.

        :return: The id of this Metric.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metric.

        the metric Id.

        :param id: The id of this Metric.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Metric.


        :return: The name of this Metric.
        :rtype: LocalizableString
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Metric.


        :param name: The name of this Metric.
        :type name: LocalizableString
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def timeseries(self):
        """Gets the timeseries of this Metric.

        the time series returned when a data query is performed.

        :return: The timeseries of this Metric.
        :rtype: List[TimeSeriesElement]
        """
        return self._timeseries

    @timeseries.setter
    def timeseries(self, timeseries):
        """Sets the timeseries of this Metric.

        the time series returned when a data query is performed.

        :param timeseries: The timeseries of this Metric.
        :type timeseries: List[TimeSeriesElement]
        """
        if timeseries is None:
            raise ValueError("Invalid value for `timeseries`, must not be `None`")

        self._timeseries = timeseries

    @property
    def type(self):
        """Gets the type of this Metric.

        the resource type of the metric resource.

        :return: The type of this Metric.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Metric.

        the resource type of the metric resource.

        :param type: The type of this Metric.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this Metric.


        :return: The unit of this Metric.
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Metric.


        :param unit: The unit of this Metric.
        :type unit: Unit
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
