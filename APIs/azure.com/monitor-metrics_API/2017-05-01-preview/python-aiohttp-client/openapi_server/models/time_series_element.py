# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata_value import MetadataValue
from openapi_server.models.metric_value import MetricValue
from openapi_server import util


class TimeSeriesElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[MetricValue]=None, metadatavalues: List[MetadataValue]=None):
        """TimeSeriesElement - a model defined in OpenAPI

        :param data: The data of this TimeSeriesElement.
        :param metadatavalues: The metadatavalues of this TimeSeriesElement.
        """
        self.openapi_types = {
            'data': List[MetricValue],
            'metadatavalues': List[MetadataValue]
        }

        self.attribute_map = {
            'data': 'data',
            'metadatavalues': 'metadatavalues'
        }

        self._data = data
        self._metadatavalues = metadatavalues

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesElement of this TimeSeriesElement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this TimeSeriesElement.

        An array of data points representing the metric values.  This is only returned if a result type of data is specified.

        :return: The data of this TimeSeriesElement.
        :rtype: List[MetricValue]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TimeSeriesElement.

        An array of data points representing the metric values.  This is only returned if a result type of data is specified.

        :param data: The data of this TimeSeriesElement.
        :type data: List[MetricValue]
        """

        self._data = data

    @property
    def metadatavalues(self):
        """Gets the metadatavalues of this TimeSeriesElement.

        the metadata values returned if $filter was specified in the call.

        :return: The metadatavalues of this TimeSeriesElement.
        :rtype: List[MetadataValue]
        """
        return self._metadatavalues

    @metadatavalues.setter
    def metadatavalues(self, metadatavalues):
        """Sets the metadatavalues of this TimeSeriesElement.

        the metadata values returned if $filter was specified in the call.

        :param metadatavalues: The metadatavalues of this TimeSeriesElement.
        :type metadatavalues: List[MetadataValue]
        """

        self._metadatavalues = metadatavalues
