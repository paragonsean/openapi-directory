# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric import Metric
from openapi_server import util


class Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, interval: str=None, timespan: str=None, value: List[Metric]=None):
        """Response - a model defined in OpenAPI

        :param cost: The cost of this Response.
        :param interval: The interval of this Response.
        :param timespan: The timespan of this Response.
        :param value: The value of this Response.
        """
        self.openapi_types = {
            'cost': float,
            'interval': str,
            'timespan': str,
            'value': List[Metric]
        }

        self.attribute_map = {
            'cost': 'cost',
            'interval': 'interval',
            'timespan': 'timespan',
            'value': 'value'
        }

        self._cost = cost
        self._interval = interval
        self._timespan = timespan
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response of this Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this Response.

        The integer value representing the cost of the query, for data case.

        :return: The cost of this Response.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this Response.

        The integer value representing the cost of the query, for data case.

        :param cost: The cost of this Response.
        :type cost: float
        """
        if cost is not None and cost < 0:
            raise ValueError("Invalid value for `cost`, must be a value greater than or equal to `0`")

        self._cost = cost

    @property
    def interval(self):
        """Gets the interval of this Response.

        The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.

        :return: The interval of this Response.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Response.

        The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.

        :param interval: The interval of this Response.
        :type interval: str
        """

        self._interval = interval

    @property
    def timespan(self):
        """Gets the timespan of this Response.

        The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested.

        :return: The timespan of this Response.
        :rtype: str
        """
        return self._timespan

    @timespan.setter
    def timespan(self, timespan):
        """Sets the timespan of this Response.

        The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested.

        :param timespan: The timespan of this Response.
        :type timespan: str
        """
        if timespan is None:
            raise ValueError("Invalid value for `timespan`, must not be `None`")

        self._timespan = timespan

    @property
    def value(self):
        """Gets the value of this Response.

        the value of the collection.

        :return: The value of this Response.
        :rtype: List[Metric]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Response.

        the value of the collection.

        :param value: The value of this Response.
        :type value: List[Metric]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
