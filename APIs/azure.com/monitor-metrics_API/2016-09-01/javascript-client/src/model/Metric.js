/**
 * MonitorClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizableString from './LocalizableString';
import MetricValue from './MetricValue';
import Unit from './Unit';

/**
 * The Metric model module.
 * @module model/Metric
 * @version 2016-09-01
 */
class Metric {
    /**
     * Constructs a new <code>Metric</code>.
     * A set of metric values in a time range.
     * @alias module:model/Metric
     * @param data {Array.<module:model/MetricValue>} Array of data points representing the metric values.
     * @param name {module:model/LocalizableString} 
     * @param unit {module:model/Unit} 
     */
    constructor(data, name, unit) { 
        
        Metric.initialize(this, data, name, unit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, name, unit) { 
        obj['data'] = data;
        obj['name'] = name;
        obj['unit'] = unit;
    }

    /**
     * Constructs a <code>Metric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metric} obj Optional instance to populate.
     * @return {module:model/Metric} The populated <code>Metric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metric();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [MetricValue]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = LocalizableString.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = Unit.constructFromObject(data['unit']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metric</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Metric.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                MetricValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          LocalizableString.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Metric.RequiredProperties = ["data", "name", "unit"];

/**
 * Array of data points representing the metric values.
 * @member {Array.<module:model/MetricValue>} data
 */
Metric.prototype['data'] = undefined;

/**
 * the id, resourceId, of the metric.
 * @member {String} id
 */
Metric.prototype['id'] = undefined;

/**
 * @member {module:model/LocalizableString} name
 */
Metric.prototype['name'] = undefined;

/**
 * the resource type of the metric resource.
 * @member {String} type
 */
Metric.prototype['type'] = undefined;

/**
 * @member {module:model/Unit} unit
 */
Metric.prototype['unit'] = undefined;






export default Metric;

