/**
 * MonitorClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnit::OAIUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnit::OAIUnit() {
    this->initializeModel();
}

OAIUnit::~OAIUnit() {}

void OAIUnit::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUnit::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUnit::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::BYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Seconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::SECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CountPerSecond", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::COUNTPERSECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BytesPerSecond", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::BYTESPERSECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Percent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::PERCENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MilliSeconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnit::MILLISECONDS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUnit::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUnit::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUnit::COUNT:
            val = "Count";
            break;
        case eOAIUnit::BYTES:
            val = "Bytes";
            break;
        case eOAIUnit::SECONDS:
            val = "Seconds";
            break;
        case eOAIUnit::COUNTPERSECOND:
            val = "CountPerSecond";
            break;
        case eOAIUnit::BYTESPERSECOND:
            val = "BytesPerSecond";
            break;
        case eOAIUnit::PERCENT:
            val = "Percent";
            break;
        case eOAIUnit::MILLISECONDS:
            val = "MilliSeconds";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUnit::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUnit::eOAIUnit OAIUnit::getValue() const {
    return m_value;
}

void OAIUnit::setValue(const OAIUnit::eOAIUnit& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUnit::isSet() const {
    
    return m_value_isSet;
}

bool OAIUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
