/*
 * MonitorClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.MetricCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for metricsList
     * @param resourceUri The identifier of the resource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter Reduces the set of data collected.&lt;br&gt;The filter is optional. If present it must contain a list of metric names to retrieve of the form: *(name.value eq &#39;metricName&#39; [or name.value eq &#39;metricName&#39; or ...])*. Optionally, the filter can contain conditions for the following attributes *aggregationType*, *startTime*, *endTime*, and *timeGrain* of the form *attributeName operator value*. Where operator is one of *ne*, *eq*, *gt*, *lt*.&lt;br&gt;Several conditions can be combined with parentheses and logical operators, e.g: *and*, *or*.&lt;br&gt;Some example filter expressions are:&lt;br&gt;- $filter&#x3D;(name.value eq &#39;RunsSucceeded&#39;) and aggregationType eq &#39;Total&#39; and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1M&#39;,&lt;br&gt;- $filter&#x3D;(name.value eq &#39;RunsSucceeded&#39;) and (aggregationType eq &#39;Total&#39; or aggregationType eq &#39;Average&#39;) and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1H&#39;,&lt;br&gt;- $filter&#x3D;(name.value eq &#39;ActionsCompleted&#39; or name.value eq &#39;RunsSucceeded&#39;) and (aggregationType eq &#39;Total&#39; or aggregationType eq &#39;Average&#39;) and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1M&#39;.&lt;br&gt;&lt;br&gt;**NOTE**: When a metrics query comes in with multiple metrics, but with no aggregation types defined, the service will pick the Primary aggregation type of the first metrics to be used as the default aggregation type for all the metrics. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get the list of metric values </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricsListCall(String resourceUri, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceUri}/providers/microsoft.insights/metrics"
            .replace("{" + "resourceUri" + "}", localVarApiClient.escapeString(resourceUri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metricsListValidateBeforeCall(String resourceUri, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceUri' is set
        if (resourceUri == null) {
            throw new ApiException("Missing the required parameter 'resourceUri' when calling metricsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling metricsList(Async)");
        }

        return metricsListCall(resourceUri, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Lists the metric values for a resource.
     * @param resourceUri The identifier of the resource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter Reduces the set of data collected.&lt;br&gt;The filter is optional. If present it must contain a list of metric names to retrieve of the form: *(name.value eq &#39;metricName&#39; [or name.value eq &#39;metricName&#39; or ...])*. Optionally, the filter can contain conditions for the following attributes *aggregationType*, *startTime*, *endTime*, and *timeGrain* of the form *attributeName operator value*. Where operator is one of *ne*, *eq*, *gt*, *lt*.&lt;br&gt;Several conditions can be combined with parentheses and logical operators, e.g: *and*, *or*.&lt;br&gt;Some example filter expressions are:&lt;br&gt;- $filter&#x3D;(name.value eq &#39;RunsSucceeded&#39;) and aggregationType eq &#39;Total&#39; and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1M&#39;,&lt;br&gt;- $filter&#x3D;(name.value eq &#39;RunsSucceeded&#39;) and (aggregationType eq &#39;Total&#39; or aggregationType eq &#39;Average&#39;) and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1H&#39;,&lt;br&gt;- $filter&#x3D;(name.value eq &#39;ActionsCompleted&#39; or name.value eq &#39;RunsSucceeded&#39;) and (aggregationType eq &#39;Total&#39; or aggregationType eq &#39;Average&#39;) and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1M&#39;.&lt;br&gt;&lt;br&gt;**NOTE**: When a metrics query comes in with multiple metrics, but with no aggregation types defined, the service will pick the Primary aggregation type of the first metrics to be used as the default aggregation type for all the metrics. (optional)
     * @return MetricCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get the list of metric values </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public MetricCollection metricsList(String resourceUri, String apiVersion, String $filter) throws ApiException {
        ApiResponse<MetricCollection> localVarResp = metricsListWithHttpInfo(resourceUri, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the metric values for a resource.
     * @param resourceUri The identifier of the resource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter Reduces the set of data collected.&lt;br&gt;The filter is optional. If present it must contain a list of metric names to retrieve of the form: *(name.value eq &#39;metricName&#39; [or name.value eq &#39;metricName&#39; or ...])*. Optionally, the filter can contain conditions for the following attributes *aggregationType*, *startTime*, *endTime*, and *timeGrain* of the form *attributeName operator value*. Where operator is one of *ne*, *eq*, *gt*, *lt*.&lt;br&gt;Several conditions can be combined with parentheses and logical operators, e.g: *and*, *or*.&lt;br&gt;Some example filter expressions are:&lt;br&gt;- $filter&#x3D;(name.value eq &#39;RunsSucceeded&#39;) and aggregationType eq &#39;Total&#39; and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1M&#39;,&lt;br&gt;- $filter&#x3D;(name.value eq &#39;RunsSucceeded&#39;) and (aggregationType eq &#39;Total&#39; or aggregationType eq &#39;Average&#39;) and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1H&#39;,&lt;br&gt;- $filter&#x3D;(name.value eq &#39;ActionsCompleted&#39; or name.value eq &#39;RunsSucceeded&#39;) and (aggregationType eq &#39;Total&#39; or aggregationType eq &#39;Average&#39;) and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1M&#39;.&lt;br&gt;&lt;br&gt;**NOTE**: When a metrics query comes in with multiple metrics, but with no aggregation types defined, the service will pick the Primary aggregation type of the first metrics to be used as the default aggregation type for all the metrics. (optional)
     * @return ApiResponse&lt;MetricCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get the list of metric values </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricCollection> metricsListWithHttpInfo(String resourceUri, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = metricsListValidateBeforeCall(resourceUri, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<MetricCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the metric values for a resource.
     * @param resourceUri The identifier of the resource. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter Reduces the set of data collected.&lt;br&gt;The filter is optional. If present it must contain a list of metric names to retrieve of the form: *(name.value eq &#39;metricName&#39; [or name.value eq &#39;metricName&#39; or ...])*. Optionally, the filter can contain conditions for the following attributes *aggregationType*, *startTime*, *endTime*, and *timeGrain* of the form *attributeName operator value*. Where operator is one of *ne*, *eq*, *gt*, *lt*.&lt;br&gt;Several conditions can be combined with parentheses and logical operators, e.g: *and*, *or*.&lt;br&gt;Some example filter expressions are:&lt;br&gt;- $filter&#x3D;(name.value eq &#39;RunsSucceeded&#39;) and aggregationType eq &#39;Total&#39; and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1M&#39;,&lt;br&gt;- $filter&#x3D;(name.value eq &#39;RunsSucceeded&#39;) and (aggregationType eq &#39;Total&#39; or aggregationType eq &#39;Average&#39;) and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1H&#39;,&lt;br&gt;- $filter&#x3D;(name.value eq &#39;ActionsCompleted&#39; or name.value eq &#39;RunsSucceeded&#39;) and (aggregationType eq &#39;Total&#39; or aggregationType eq &#39;Average&#39;) and startTime eq 2016-02-20 and endTime eq 2016-02-21 and timeGrain eq duration&#39;PT1M&#39;.&lt;br&gt;&lt;br&gt;**NOTE**: When a metrics query comes in with multiple metrics, but with no aggregation types defined, the service will pick the Primary aggregation type of the first metrics to be used as the default aggregation type for all the metrics. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get the list of metric values </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricsListAsync(String resourceUri, String apiVersion, String $filter, final ApiCallback<MetricCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = metricsListValidateBeforeCall(resourceUri, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<MetricCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
