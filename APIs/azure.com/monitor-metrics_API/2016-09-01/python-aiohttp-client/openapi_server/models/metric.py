# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.localizable_string import LocalizableString
from openapi_server.models.metric_value import MetricValue
from openapi_server.models.unit import Unit
from openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[MetricValue]=None, id: str=None, name: LocalizableString=None, type: str=None, unit: Unit=None):
        """Metric - a model defined in OpenAPI

        :param data: The data of this Metric.
        :param id: The id of this Metric.
        :param name: The name of this Metric.
        :param type: The type of this Metric.
        :param unit: The unit of this Metric.
        """
        self.openapi_types = {
            'data': List[MetricValue],
            'id': str,
            'name': LocalizableString,
            'type': str,
            'unit': Unit
        }

        self.attribute_map = {
            'data': 'data',
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'unit': 'unit'
        }

        self._data = data
        self._id = id
        self._name = name
        self._type = type
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric of this Metric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this Metric.

        Array of data points representing the metric values.

        :return: The data of this Metric.
        :rtype: List[MetricValue]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Metric.

        Array of data points representing the metric values.

        :param data: The data of this Metric.
        :type data: List[MetricValue]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def id(self):
        """Gets the id of this Metric.

        the id, resourceId, of the metric.

        :return: The id of this Metric.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Metric.

        the id, resourceId, of the metric.

        :param id: The id of this Metric.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Metric.


        :return: The name of this Metric.
        :rtype: LocalizableString
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Metric.


        :param name: The name of this Metric.
        :type name: LocalizableString
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this Metric.

        the resource type of the metric resource.

        :return: The type of this Metric.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Metric.

        the resource type of the metric resource.

        :param type: The type of this Metric.
        :type type: str
        """

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this Metric.


        :return: The unit of this Metric.
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Metric.


        :param unit: The unit of this Metric.
        :type unit: Unit
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
