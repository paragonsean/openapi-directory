# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailableDelegation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[str]=None, id: str=None, name: str=None, service_name: str=None, type: str=None):
        """AvailableDelegation - a model defined in OpenAPI

        :param actions: The actions of this AvailableDelegation.
        :param id: The id of this AvailableDelegation.
        :param name: The name of this AvailableDelegation.
        :param service_name: The service_name of this AvailableDelegation.
        :param type: The type of this AvailableDelegation.
        """
        self.openapi_types = {
            'actions': List[str],
            'id': str,
            'name': str,
            'service_name': str,
            'type': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'id': 'id',
            'name': 'name',
            'service_name': 'serviceName',
            'type': 'type'
        }

        self._actions = actions
        self._id = id
        self._name = name
        self._service_name = service_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableDelegation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailableDelegation of this AvailableDelegation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this AvailableDelegation.

        Describes the actions permitted to the service upon delegation.

        :return: The actions of this AvailableDelegation.
        :rtype: List[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AvailableDelegation.

        Describes the actions permitted to the service upon delegation.

        :param actions: The actions of this AvailableDelegation.
        :type actions: List[str]
        """

        self._actions = actions

    @property
    def id(self):
        """Gets the id of this AvailableDelegation.

        A unique identifier of the AvailableDelegation resource.

        :return: The id of this AvailableDelegation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AvailableDelegation.

        A unique identifier of the AvailableDelegation resource.

        :param id: The id of this AvailableDelegation.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AvailableDelegation.

        The name of the AvailableDelegation resource.

        :return: The name of this AvailableDelegation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AvailableDelegation.

        The name of the AvailableDelegation resource.

        :param name: The name of this AvailableDelegation.
        :type name: str
        """

        self._name = name

    @property
    def service_name(self):
        """Gets the service_name of this AvailableDelegation.

        The name of the service and resource.

        :return: The service_name of this AvailableDelegation.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this AvailableDelegation.

        The name of the service and resource.

        :param service_name: The service_name of this AvailableDelegation.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def type(self):
        """Gets the type of this AvailableDelegation.

        Resource type.

        :return: The type of this AvailableDelegation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AvailableDelegation.

        Resource type.

        :param type: The type of this AvailableDelegation.
        :type type: str
        """

        self._type = type
