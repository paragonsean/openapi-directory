/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailableDelegation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailableDelegation::OAIAvailableDelegation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailableDelegation::OAIAvailableDelegation() {
    this->initializeModel();
}

OAIAvailableDelegation::~OAIAvailableDelegation() {}

void OAIAvailableDelegation::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAvailableDelegation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailableDelegation::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAvailableDelegation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailableDelegation::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIAvailableDelegation::getActions() const {
    return m_actions;
}
void OAIAvailableDelegation::setActions(const QList<QString> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIAvailableDelegation::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIAvailableDelegation::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIAvailableDelegation::getId() const {
    return m_id;
}
void OAIAvailableDelegation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAvailableDelegation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAvailableDelegation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAvailableDelegation::getName() const {
    return m_name;
}
void OAIAvailableDelegation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAvailableDelegation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAvailableDelegation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAvailableDelegation::getServiceName() const {
    return m_service_name;
}
void OAIAvailableDelegation::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIAvailableDelegation::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIAvailableDelegation::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIAvailableDelegation::getType() const {
    return m_type;
}
void OAIAvailableDelegation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAvailableDelegation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAvailableDelegation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAvailableDelegation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailableDelegation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
