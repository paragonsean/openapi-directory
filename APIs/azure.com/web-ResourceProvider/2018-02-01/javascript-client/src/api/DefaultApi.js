/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BillingMeterCollection from '../model/BillingMeterCollection';
import CsmMoveResourceEnvelope from '../model/CsmMoveResourceEnvelope';
import DeploymentLocations from '../model/DeploymentLocations';
import GeoRegionCollection from '../model/GeoRegionCollection';
import GetPublishingUser200Response from '../model/GetPublishingUser200Response';
import GetPublishingUserDefaultResponse from '../model/GetPublishingUserDefaultResponse';
import ListSiteIdentifiersAssignedToHostName200Response from '../model/ListSiteIdentifiersAssignedToHostName200Response';
import ListSiteIdentifiersAssignedToHostNameRequest from '../model/ListSiteIdentifiersAssignedToHostNameRequest';
import PremierAddOnOfferCollection from '../model/PremierAddOnOfferCollection';
import ResourceNameAvailability from '../model/ResourceNameAvailability';
import ResourceNameAvailabilityRequest from '../model/ResourceNameAvailabilityRequest';
import SkuInfos from '../model/SkuInfos';
import SourceControl from '../model/SourceControl';
import SourceControlCollection from '../model/SourceControlCollection';
import ValidateContainerSettingsRequest from '../model/ValidateContainerSettingsRequest';
import ValidateRequest from '../model/ValidateRequest';
import ValidateResponse from '../model/ValidateResponse';
import VnetParameters from '../model/VnetParameters';
import VnetValidationFailureDetails from '../model/VnetValidationFailureDetails';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-02-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkNameAvailability operation.
     * @callback module:api/DefaultApi~checkNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceNameAvailability} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a resource name is available.
     * Check if a resource name is available.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/ResourceNameAvailabilityRequest} request Name availability request.
     * @param {module:api/DefaultApi~checkNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceNameAvailability}
     */
    checkNameAvailability(subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling checkNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling checkNameAvailability");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling checkNameAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceNameAvailability;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPublishingUser operation.
     * @callback module:api/DefaultApi~getPublishingUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublishingUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets publishing user
     * Gets publishing user
     * @param {String} apiVersion API Version
     * @param {module:api/DefaultApi~getPublishingUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublishingUser200Response}
     */
    getPublishingUser(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getPublishingUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPublishingUser200Response;
      return this.apiClient.callApi(
        '/providers/Microsoft.Web/publishingUsers/web', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSourceControl operation.
     * @callback module:api/DefaultApi~getSourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets source control token
     * Gets source control token
     * @param {String} sourceControlType Type of source control
     * @param {String} apiVersion API Version
     * @param {module:api/DefaultApi~getSourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceControl}
     */
    getSourceControl(sourceControlType, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'sourceControlType' is set
      if (sourceControlType === undefined || sourceControlType === null) {
        throw new Error("Missing the required parameter 'sourceControlType' when calling getSourceControl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSourceControl");
      }

      let pathParams = {
        'sourceControlType': sourceControlType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceControl;
      return this.apiClient.callApi(
        '/providers/Microsoft.Web/sourcecontrols/{sourceControlType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubscriptionDeploymentLocations operation.
     * @callback module:api/DefaultApi~getSubscriptionDeploymentLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentLocations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of available geo regions plus ministamps
     * Gets list of available geo regions plus ministamps
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DefaultApi~getSubscriptionDeploymentLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentLocations}
     */
    getSubscriptionDeploymentLocations(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling getSubscriptionDeploymentLocations");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling getSubscriptionDeploymentLocations");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentLocations;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/deploymentLocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBillingMeters operation.
     * @callback module:api/DefaultApi~listBillingMetersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BillingMeterCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of meters for a given location.
     * Gets a list of meters for a given location.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [billingLocation] Azure Location of billable resource
     * @param {String} [osType] App Service OS type meters used for
     * @param {module:api/DefaultApi~listBillingMetersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BillingMeterCollection}
     */
    listBillingMeters(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling listBillingMeters");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listBillingMeters");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'billingLocation': opts['billingLocation'],
        'osType': opts['osType'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BillingMeterCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/billingMeters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGeoRegions operation.
     * @callback module:api/DefaultApi~listGeoRegionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoRegionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of available geographical regions.
     * Get a list of available geographical regions.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sku] Name of SKU used to filter the regions.
     * @param {Boolean} [linuxWorkersEnabled] Specify <code>true</code> if you want to filter to only regions that support Linux workers.
     * @param {Boolean} [xenonWorkersEnabled] Specify <code>true</code> if you want to filter to only regions that support Xenon workers.
     * @param {Boolean} [linuxDynamicWorkersEnabled] Specify <code>true</code> if you want to filter to only regions that support Linux Consumption Workers.
     * @param {module:api/DefaultApi~listGeoRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoRegionCollection}
     */
    listGeoRegions(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling listGeoRegions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listGeoRegions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'sku': opts['sku'],
        'linuxWorkersEnabled': opts['linuxWorkersEnabled'],
        'xenonWorkersEnabled': opts['xenonWorkersEnabled'],
        'linuxDynamicWorkersEnabled': opts['linuxDynamicWorkersEnabled'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GeoRegionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPremierAddOnOffers operation.
     * @callback module:api/DefaultApi~listPremierAddOnOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PremierAddOnOfferCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all premier add-on offers.
     * List all premier add-on offers.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DefaultApi~listPremierAddOnOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PremierAddOnOfferCollection}
     */
    listPremierAddOnOffers(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling listPremierAddOnOffers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listPremierAddOnOffers");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PremierAddOnOfferCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteIdentifiersAssignedToHostName operation.
     * @callback module:api/DefaultApi~listSiteIdentifiersAssignedToHostNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSiteIdentifiersAssignedToHostName200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all apps that are assigned to a hostname.
     * List all apps that are assigned to a hostname.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/ListSiteIdentifiersAssignedToHostNameRequest} nameIdentifier Hostname information.
     * @param {module:api/DefaultApi~listSiteIdentifiersAssignedToHostNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSiteIdentifiersAssignedToHostName200Response}
     */
    listSiteIdentifiersAssignedToHostName(subscriptionId, apiVersion, nameIdentifier, callback) {
      let postBody = nameIdentifier;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling listSiteIdentifiersAssignedToHostName");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listSiteIdentifiersAssignedToHostName");
      }
      // verify the required parameter 'nameIdentifier' is set
      if (nameIdentifier === undefined || nameIdentifier === null) {
        throw new Error("Missing the required parameter 'nameIdentifier' when calling listSiteIdentifiersAssignedToHostName");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSiteIdentifiersAssignedToHostName200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/listSitesAssignedToHostName', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSkus operation.
     * @callback module:api/DefaultApi~listSkusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkuInfos} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all SKUs.
     * List all SKUs.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/DefaultApi~listSkusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkuInfos}
     */
    listSkus(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling listSkus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listSkus");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkuInfos;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceControls operation.
     * @callback module:api/DefaultApi~listSourceControlsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceControlCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the source controls available for Azure websites.
     * Gets the source controls available for Azure websites.
     * @param {String} apiVersion API Version
     * @param {module:api/DefaultApi~listSourceControlsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceControlCollection}
     */
    listSourceControls(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling listSourceControls");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceControlCollection;
      return this.apiClient.callApi(
        '/providers/Microsoft.Web/sourcecontrols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the move operation.
     * @callback module:api/DefaultApi~moveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move resources between resource groups.
     * Move resources between resource groups.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmMoveResourceEnvelope} moveResourceEnvelope Object that represents the resource to move.
     * @param {module:api/DefaultApi~moveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    move(resourceGroupName, subscriptionId, apiVersion, moveResourceEnvelope, callback) {
      let postBody = moveResourceEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling move");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling move");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling move");
      }
      // verify the required parameter 'moveResourceEnvelope' is set
      if (moveResourceEnvelope === undefined || moveResourceEnvelope === null) {
        throw new Error("Missing the required parameter 'moveResourceEnvelope' when calling move");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePublishingUser operation.
     * @callback module:api/DefaultApi~updatePublishingUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPublishingUser200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates publishing user
     * Updates publishing user
     * @param {String} apiVersion API Version
     * @param {module:model/GetPublishingUser200Response} userDetails Details of publishing user
     * @param {module:api/DefaultApi~updatePublishingUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPublishingUser200Response}
     */
    updatePublishingUser(apiVersion, userDetails, callback) {
      let postBody = userDetails;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updatePublishingUser");
      }
      // verify the required parameter 'userDetails' is set
      if (userDetails === undefined || userDetails === null) {
        throw new Error("Missing the required parameter 'userDetails' when calling updatePublishingUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPublishingUser200Response;
      return this.apiClient.callApi(
        '/providers/Microsoft.Web/publishingUsers/web', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSourceControl operation.
     * @callback module:api/DefaultApi~updateSourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates source control token
     * Updates source control token
     * @param {String} sourceControlType Type of source control
     * @param {String} apiVersion API Version
     * @param {module:model/SourceControl} requestMessage Source control token information
     * @param {module:api/DefaultApi~updateSourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceControl}
     */
    updateSourceControl(sourceControlType, apiVersion, requestMessage, callback) {
      let postBody = requestMessage;
      // verify the required parameter 'sourceControlType' is set
      if (sourceControlType === undefined || sourceControlType === null) {
        throw new Error("Missing the required parameter 'sourceControlType' when calling updateSourceControl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling updateSourceControl");
      }
      // verify the required parameter 'requestMessage' is set
      if (requestMessage === undefined || requestMessage === null) {
        throw new Error("Missing the required parameter 'requestMessage' when calling updateSourceControl");
      }

      let pathParams = {
        'sourceControlType': sourceControlType
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceControl;
      return this.apiClient.callApi(
        '/providers/Microsoft.Web/sourcecontrols/{sourceControlType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validate operation.
     * @callback module:api/DefaultApi~validateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate if a resource can be created.
     * Validate if a resource can be created.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/ValidateRequest} validateRequest Request with the resources to validate.
     * @param {module:api/DefaultApi~validateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateResponse}
     */
    validate(resourceGroupName, subscriptionId, apiVersion, validateRequest, callback) {
      let postBody = validateRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling validate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling validate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling validate");
      }
      // verify the required parameter 'validateRequest' is set
      if (validateRequest === undefined || validateRequest === null) {
        throw new Error("Missing the required parameter 'validateRequest' when calling validate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidateResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateContainerSettings operation.
     * @callback module:api/DefaultApi~validateContainerSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate if the container settings are correct.
     * Validate if the container settings are correct.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/ValidateContainerSettingsRequest} validateContainerSettingsRequest 
     * @param {module:api/DefaultApi~validateContainerSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    validateContainerSettings(resourceGroupName, subscriptionId, apiVersion, validateContainerSettingsRequest, callback) {
      let postBody = validateContainerSettingsRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling validateContainerSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling validateContainerSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling validateContainerSettings");
      }
      // verify the required parameter 'validateContainerSettingsRequest' is set
      if (validateContainerSettingsRequest === undefined || validateContainerSettingsRequest === null) {
        throw new Error("Missing the required parameter 'validateContainerSettingsRequest' when calling validateContainerSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/validateContainerSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateMove operation.
     * @callback module:api/DefaultApi~validateMoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate whether a resource can be moved.
     * Validate whether a resource can be moved.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/CsmMoveResourceEnvelope} moveResourceEnvelope Object that represents the resource to move.
     * @param {module:api/DefaultApi~validateMoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    validateMove(resourceGroupName, subscriptionId, apiVersion, moveResourceEnvelope, callback) {
      let postBody = moveResourceEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling validateMove");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling validateMove");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling validateMove");
      }
      // verify the required parameter 'moveResourceEnvelope' is set
      if (moveResourceEnvelope === undefined || moveResourceEnvelope === null) {
        throw new Error("Missing the required parameter 'moveResourceEnvelope' when calling validateMove");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyHostingEnvironmentVnet operation.
     * @callback module:api/DefaultApi~verifyHostingEnvironmentVnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetValidationFailureDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules.
     * Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/VnetParameters} parameters VNET information
     * @param {module:api/DefaultApi~verifyHostingEnvironmentVnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetValidationFailureDetails}
     */
    verifyHostingEnvironmentVnet(subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling verifyHostingEnvironmentVnet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling verifyHostingEnvironmentVnet");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling verifyHostingEnvironmentVnet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VnetValidationFailureDetails;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/verifyHostingEnvironmentVnet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
