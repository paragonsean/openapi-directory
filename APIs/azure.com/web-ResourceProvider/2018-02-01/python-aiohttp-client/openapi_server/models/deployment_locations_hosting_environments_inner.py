# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_locations_hosting_environments_inner_cluster_settings_inner import DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner
from openapi_server.models.deployment_locations_hosting_environments_inner_environment_capacities_inner import DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner
from openapi_server.models.deployment_locations_hosting_environments_inner_network_access_control_list_inner import DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner
from openapi_server.models.deployment_locations_hosting_environments_inner_vip_mappings_inner import DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner
from openapi_server.models.deployment_locations_hosting_environments_inner_virtual_network import DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork
from openapi_server.models.deployment_locations_hosting_environments_inner_worker_pools_inner import DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner
from openapi_server import util


class DeploymentLocationsHostingEnvironmentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_multi_sizes: str=None, allowed_worker_sizes: str=None, api_management_account_id: str=None, cluster_settings: List[DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner]=None, database_edition: str=None, database_service_objective: str=None, default_front_end_scale_factor: int=None, dns_suffix: str=None, dynamic_cache_enabled: bool=None, environment_capacities: List[DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner]=None, environment_is_healthy: bool=None, environment_status: str=None, front_end_scale_factor: int=None, has_linux_workers: bool=None, internal_load_balancing_mode: str=None, ipssl_address_count: int=None, last_action: str=None, last_action_result: str=None, location: str=None, maximum_number_of_machines: int=None, multi_role_count: int=None, multi_size: str=None, name: str=None, network_access_control_list: List[DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner]=None, provisioning_state: str=None, resource_group: str=None, ssl_cert_key_vault_id: str=None, ssl_cert_key_vault_secret_name: str=None, status: str=None, subscription_id: str=None, suspended: bool=None, upgrade_domains: int=None, user_whitelisted_ip_ranges: List[str]=None, vip_mappings: List[DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner]=None, virtual_network: DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork=None, vnet_name: str=None, vnet_resource_group_name: str=None, vnet_subnet_name: str=None, worker_pools: List[DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner]=None):
        """DeploymentLocationsHostingEnvironmentsInner - a model defined in OpenAPI

        :param allowed_multi_sizes: The allowed_multi_sizes of this DeploymentLocationsHostingEnvironmentsInner.
        :param allowed_worker_sizes: The allowed_worker_sizes of this DeploymentLocationsHostingEnvironmentsInner.
        :param api_management_account_id: The api_management_account_id of this DeploymentLocationsHostingEnvironmentsInner.
        :param cluster_settings: The cluster_settings of this DeploymentLocationsHostingEnvironmentsInner.
        :param database_edition: The database_edition of this DeploymentLocationsHostingEnvironmentsInner.
        :param database_service_objective: The database_service_objective of this DeploymentLocationsHostingEnvironmentsInner.
        :param default_front_end_scale_factor: The default_front_end_scale_factor of this DeploymentLocationsHostingEnvironmentsInner.
        :param dns_suffix: The dns_suffix of this DeploymentLocationsHostingEnvironmentsInner.
        :param dynamic_cache_enabled: The dynamic_cache_enabled of this DeploymentLocationsHostingEnvironmentsInner.
        :param environment_capacities: The environment_capacities of this DeploymentLocationsHostingEnvironmentsInner.
        :param environment_is_healthy: The environment_is_healthy of this DeploymentLocationsHostingEnvironmentsInner.
        :param environment_status: The environment_status of this DeploymentLocationsHostingEnvironmentsInner.
        :param front_end_scale_factor: The front_end_scale_factor of this DeploymentLocationsHostingEnvironmentsInner.
        :param has_linux_workers: The has_linux_workers of this DeploymentLocationsHostingEnvironmentsInner.
        :param internal_load_balancing_mode: The internal_load_balancing_mode of this DeploymentLocationsHostingEnvironmentsInner.
        :param ipssl_address_count: The ipssl_address_count of this DeploymentLocationsHostingEnvironmentsInner.
        :param last_action: The last_action of this DeploymentLocationsHostingEnvironmentsInner.
        :param last_action_result: The last_action_result of this DeploymentLocationsHostingEnvironmentsInner.
        :param location: The location of this DeploymentLocationsHostingEnvironmentsInner.
        :param maximum_number_of_machines: The maximum_number_of_machines of this DeploymentLocationsHostingEnvironmentsInner.
        :param multi_role_count: The multi_role_count of this DeploymentLocationsHostingEnvironmentsInner.
        :param multi_size: The multi_size of this DeploymentLocationsHostingEnvironmentsInner.
        :param name: The name of this DeploymentLocationsHostingEnvironmentsInner.
        :param network_access_control_list: The network_access_control_list of this DeploymentLocationsHostingEnvironmentsInner.
        :param provisioning_state: The provisioning_state of this DeploymentLocationsHostingEnvironmentsInner.
        :param resource_group: The resource_group of this DeploymentLocationsHostingEnvironmentsInner.
        :param ssl_cert_key_vault_id: The ssl_cert_key_vault_id of this DeploymentLocationsHostingEnvironmentsInner.
        :param ssl_cert_key_vault_secret_name: The ssl_cert_key_vault_secret_name of this DeploymentLocationsHostingEnvironmentsInner.
        :param status: The status of this DeploymentLocationsHostingEnvironmentsInner.
        :param subscription_id: The subscription_id of this DeploymentLocationsHostingEnvironmentsInner.
        :param suspended: The suspended of this DeploymentLocationsHostingEnvironmentsInner.
        :param upgrade_domains: The upgrade_domains of this DeploymentLocationsHostingEnvironmentsInner.
        :param user_whitelisted_ip_ranges: The user_whitelisted_ip_ranges of this DeploymentLocationsHostingEnvironmentsInner.
        :param vip_mappings: The vip_mappings of this DeploymentLocationsHostingEnvironmentsInner.
        :param virtual_network: The virtual_network of this DeploymentLocationsHostingEnvironmentsInner.
        :param vnet_name: The vnet_name of this DeploymentLocationsHostingEnvironmentsInner.
        :param vnet_resource_group_name: The vnet_resource_group_name of this DeploymentLocationsHostingEnvironmentsInner.
        :param vnet_subnet_name: The vnet_subnet_name of this DeploymentLocationsHostingEnvironmentsInner.
        :param worker_pools: The worker_pools of this DeploymentLocationsHostingEnvironmentsInner.
        """
        self.openapi_types = {
            'allowed_multi_sizes': str,
            'allowed_worker_sizes': str,
            'api_management_account_id': str,
            'cluster_settings': List[DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner],
            'database_edition': str,
            'database_service_objective': str,
            'default_front_end_scale_factor': int,
            'dns_suffix': str,
            'dynamic_cache_enabled': bool,
            'environment_capacities': List[DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner],
            'environment_is_healthy': bool,
            'environment_status': str,
            'front_end_scale_factor': int,
            'has_linux_workers': bool,
            'internal_load_balancing_mode': str,
            'ipssl_address_count': int,
            'last_action': str,
            'last_action_result': str,
            'location': str,
            'maximum_number_of_machines': int,
            'multi_role_count': int,
            'multi_size': str,
            'name': str,
            'network_access_control_list': List[DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner],
            'provisioning_state': str,
            'resource_group': str,
            'ssl_cert_key_vault_id': str,
            'ssl_cert_key_vault_secret_name': str,
            'status': str,
            'subscription_id': str,
            'suspended': bool,
            'upgrade_domains': int,
            'user_whitelisted_ip_ranges': List[str],
            'vip_mappings': List[DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner],
            'virtual_network': DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork,
            'vnet_name': str,
            'vnet_resource_group_name': str,
            'vnet_subnet_name': str,
            'worker_pools': List[DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner]
        }

        self.attribute_map = {
            'allowed_multi_sizes': 'allowedMultiSizes',
            'allowed_worker_sizes': 'allowedWorkerSizes',
            'api_management_account_id': 'apiManagementAccountId',
            'cluster_settings': 'clusterSettings',
            'database_edition': 'databaseEdition',
            'database_service_objective': 'databaseServiceObjective',
            'default_front_end_scale_factor': 'defaultFrontEndScaleFactor',
            'dns_suffix': 'dnsSuffix',
            'dynamic_cache_enabled': 'dynamicCacheEnabled',
            'environment_capacities': 'environmentCapacities',
            'environment_is_healthy': 'environmentIsHealthy',
            'environment_status': 'environmentStatus',
            'front_end_scale_factor': 'frontEndScaleFactor',
            'has_linux_workers': 'hasLinuxWorkers',
            'internal_load_balancing_mode': 'internalLoadBalancingMode',
            'ipssl_address_count': 'ipsslAddressCount',
            'last_action': 'lastAction',
            'last_action_result': 'lastActionResult',
            'location': 'location',
            'maximum_number_of_machines': 'maximumNumberOfMachines',
            'multi_role_count': 'multiRoleCount',
            'multi_size': 'multiSize',
            'name': 'name',
            'network_access_control_list': 'networkAccessControlList',
            'provisioning_state': 'provisioningState',
            'resource_group': 'resourceGroup',
            'ssl_cert_key_vault_id': 'sslCertKeyVaultId',
            'ssl_cert_key_vault_secret_name': 'sslCertKeyVaultSecretName',
            'status': 'status',
            'subscription_id': 'subscriptionId',
            'suspended': 'suspended',
            'upgrade_domains': 'upgradeDomains',
            'user_whitelisted_ip_ranges': 'userWhitelistedIpRanges',
            'vip_mappings': 'vipMappings',
            'virtual_network': 'virtualNetwork',
            'vnet_name': 'vnetName',
            'vnet_resource_group_name': 'vnetResourceGroupName',
            'vnet_subnet_name': 'vnetSubnetName',
            'worker_pools': 'workerPools'
        }

        self._allowed_multi_sizes = allowed_multi_sizes
        self._allowed_worker_sizes = allowed_worker_sizes
        self._api_management_account_id = api_management_account_id
        self._cluster_settings = cluster_settings
        self._database_edition = database_edition
        self._database_service_objective = database_service_objective
        self._default_front_end_scale_factor = default_front_end_scale_factor
        self._dns_suffix = dns_suffix
        self._dynamic_cache_enabled = dynamic_cache_enabled
        self._environment_capacities = environment_capacities
        self._environment_is_healthy = environment_is_healthy
        self._environment_status = environment_status
        self._front_end_scale_factor = front_end_scale_factor
        self._has_linux_workers = has_linux_workers
        self._internal_load_balancing_mode = internal_load_balancing_mode
        self._ipssl_address_count = ipssl_address_count
        self._last_action = last_action
        self._last_action_result = last_action_result
        self._location = location
        self._maximum_number_of_machines = maximum_number_of_machines
        self._multi_role_count = multi_role_count
        self._multi_size = multi_size
        self._name = name
        self._network_access_control_list = network_access_control_list
        self._provisioning_state = provisioning_state
        self._resource_group = resource_group
        self._ssl_cert_key_vault_id = ssl_cert_key_vault_id
        self._ssl_cert_key_vault_secret_name = ssl_cert_key_vault_secret_name
        self._status = status
        self._subscription_id = subscription_id
        self._suspended = suspended
        self._upgrade_domains = upgrade_domains
        self._user_whitelisted_ip_ranges = user_whitelisted_ip_ranges
        self._vip_mappings = vip_mappings
        self._virtual_network = virtual_network
        self._vnet_name = vnet_name
        self._vnet_resource_group_name = vnet_resource_group_name
        self._vnet_subnet_name = vnet_subnet_name
        self._worker_pools = worker_pools

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentLocationsHostingEnvironmentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentLocations_hostingEnvironments_inner of this DeploymentLocationsHostingEnvironmentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_multi_sizes(self):
        """Gets the allowed_multi_sizes of this DeploymentLocationsHostingEnvironmentsInner.

        List of comma separated strings describing which VM sizes are allowed for front-ends.

        :return: The allowed_multi_sizes of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._allowed_multi_sizes

    @allowed_multi_sizes.setter
    def allowed_multi_sizes(self, allowed_multi_sizes):
        """Sets the allowed_multi_sizes of this DeploymentLocationsHostingEnvironmentsInner.

        List of comma separated strings describing which VM sizes are allowed for front-ends.

        :param allowed_multi_sizes: The allowed_multi_sizes of this DeploymentLocationsHostingEnvironmentsInner.
        :type allowed_multi_sizes: str
        """

        self._allowed_multi_sizes = allowed_multi_sizes

    @property
    def allowed_worker_sizes(self):
        """Gets the allowed_worker_sizes of this DeploymentLocationsHostingEnvironmentsInner.

        List of comma separated strings describing which VM sizes are allowed for workers.

        :return: The allowed_worker_sizes of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._allowed_worker_sizes

    @allowed_worker_sizes.setter
    def allowed_worker_sizes(self, allowed_worker_sizes):
        """Sets the allowed_worker_sizes of this DeploymentLocationsHostingEnvironmentsInner.

        List of comma separated strings describing which VM sizes are allowed for workers.

        :param allowed_worker_sizes: The allowed_worker_sizes of this DeploymentLocationsHostingEnvironmentsInner.
        :type allowed_worker_sizes: str
        """

        self._allowed_worker_sizes = allowed_worker_sizes

    @property
    def api_management_account_id(self):
        """Gets the api_management_account_id of this DeploymentLocationsHostingEnvironmentsInner.

        API Management Account associated with the App Service Environment.

        :return: The api_management_account_id of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._api_management_account_id

    @api_management_account_id.setter
    def api_management_account_id(self, api_management_account_id):
        """Sets the api_management_account_id of this DeploymentLocationsHostingEnvironmentsInner.

        API Management Account associated with the App Service Environment.

        :param api_management_account_id: The api_management_account_id of this DeploymentLocationsHostingEnvironmentsInner.
        :type api_management_account_id: str
        """

        self._api_management_account_id = api_management_account_id

    @property
    def cluster_settings(self):
        """Gets the cluster_settings of this DeploymentLocationsHostingEnvironmentsInner.

        Custom settings for changing the behavior of the App Service Environment.

        :return: The cluster_settings of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: List[DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner]
        """
        return self._cluster_settings

    @cluster_settings.setter
    def cluster_settings(self, cluster_settings):
        """Sets the cluster_settings of this DeploymentLocationsHostingEnvironmentsInner.

        Custom settings for changing the behavior of the App Service Environment.

        :param cluster_settings: The cluster_settings of this DeploymentLocationsHostingEnvironmentsInner.
        :type cluster_settings: List[DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner]
        """

        self._cluster_settings = cluster_settings

    @property
    def database_edition(self):
        """Gets the database_edition of this DeploymentLocationsHostingEnvironmentsInner.

        Edition of the metadata database for the App Service Environment, e.g. \"Standard\".

        :return: The database_edition of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._database_edition

    @database_edition.setter
    def database_edition(self, database_edition):
        """Sets the database_edition of this DeploymentLocationsHostingEnvironmentsInner.

        Edition of the metadata database for the App Service Environment, e.g. \"Standard\".

        :param database_edition: The database_edition of this DeploymentLocationsHostingEnvironmentsInner.
        :type database_edition: str
        """

        self._database_edition = database_edition

    @property
    def database_service_objective(self):
        """Gets the database_service_objective of this DeploymentLocationsHostingEnvironmentsInner.

        Service objective of the metadata database for the App Service Environment, e.g. \"S0\".

        :return: The database_service_objective of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._database_service_objective

    @database_service_objective.setter
    def database_service_objective(self, database_service_objective):
        """Sets the database_service_objective of this DeploymentLocationsHostingEnvironmentsInner.

        Service objective of the metadata database for the App Service Environment, e.g. \"S0\".

        :param database_service_objective: The database_service_objective of this DeploymentLocationsHostingEnvironmentsInner.
        :type database_service_objective: str
        """

        self._database_service_objective = database_service_objective

    @property
    def default_front_end_scale_factor(self):
        """Gets the default_front_end_scale_factor of this DeploymentLocationsHostingEnvironmentsInner.

        Default Scale Factor for FrontEnds.

        :return: The default_front_end_scale_factor of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: int
        """
        return self._default_front_end_scale_factor

    @default_front_end_scale_factor.setter
    def default_front_end_scale_factor(self, default_front_end_scale_factor):
        """Sets the default_front_end_scale_factor of this DeploymentLocationsHostingEnvironmentsInner.

        Default Scale Factor for FrontEnds.

        :param default_front_end_scale_factor: The default_front_end_scale_factor of this DeploymentLocationsHostingEnvironmentsInner.
        :type default_front_end_scale_factor: int
        """

        self._default_front_end_scale_factor = default_front_end_scale_factor

    @property
    def dns_suffix(self):
        """Gets the dns_suffix of this DeploymentLocationsHostingEnvironmentsInner.

        DNS suffix of the App Service Environment.

        :return: The dns_suffix of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._dns_suffix

    @dns_suffix.setter
    def dns_suffix(self, dns_suffix):
        """Sets the dns_suffix of this DeploymentLocationsHostingEnvironmentsInner.

        DNS suffix of the App Service Environment.

        :param dns_suffix: The dns_suffix of this DeploymentLocationsHostingEnvironmentsInner.
        :type dns_suffix: str
        """

        self._dns_suffix = dns_suffix

    @property
    def dynamic_cache_enabled(self):
        """Gets the dynamic_cache_enabled of this DeploymentLocationsHostingEnvironmentsInner.

        True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available (most likely because NSG blocked the incoming traffic).

        :return: The dynamic_cache_enabled of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: bool
        """
        return self._dynamic_cache_enabled

    @dynamic_cache_enabled.setter
    def dynamic_cache_enabled(self, dynamic_cache_enabled):
        """Sets the dynamic_cache_enabled of this DeploymentLocationsHostingEnvironmentsInner.

        True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available (most likely because NSG blocked the incoming traffic).

        :param dynamic_cache_enabled: The dynamic_cache_enabled of this DeploymentLocationsHostingEnvironmentsInner.
        :type dynamic_cache_enabled: bool
        """

        self._dynamic_cache_enabled = dynamic_cache_enabled

    @property
    def environment_capacities(self):
        """Gets the environment_capacities of this DeploymentLocationsHostingEnvironmentsInner.

        Current total, used, and available worker capacities.

        :return: The environment_capacities of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: List[DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner]
        """
        return self._environment_capacities

    @environment_capacities.setter
    def environment_capacities(self, environment_capacities):
        """Sets the environment_capacities of this DeploymentLocationsHostingEnvironmentsInner.

        Current total, used, and available worker capacities.

        :param environment_capacities: The environment_capacities of this DeploymentLocationsHostingEnvironmentsInner.
        :type environment_capacities: List[DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner]
        """

        self._environment_capacities = environment_capacities

    @property
    def environment_is_healthy(self):
        """Gets the environment_is_healthy of this DeploymentLocationsHostingEnvironmentsInner.

        True/false indicating whether the App Service Environment is healthy.

        :return: The environment_is_healthy of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: bool
        """
        return self._environment_is_healthy

    @environment_is_healthy.setter
    def environment_is_healthy(self, environment_is_healthy):
        """Sets the environment_is_healthy of this DeploymentLocationsHostingEnvironmentsInner.

        True/false indicating whether the App Service Environment is healthy.

        :param environment_is_healthy: The environment_is_healthy of this DeploymentLocationsHostingEnvironmentsInner.
        :type environment_is_healthy: bool
        """

        self._environment_is_healthy = environment_is_healthy

    @property
    def environment_status(self):
        """Gets the environment_status of this DeploymentLocationsHostingEnvironmentsInner.

        Detailed message about with results of the last check of the App Service Environment.

        :return: The environment_status of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._environment_status

    @environment_status.setter
    def environment_status(self, environment_status):
        """Sets the environment_status of this DeploymentLocationsHostingEnvironmentsInner.

        Detailed message about with results of the last check of the App Service Environment.

        :param environment_status: The environment_status of this DeploymentLocationsHostingEnvironmentsInner.
        :type environment_status: str
        """

        self._environment_status = environment_status

    @property
    def front_end_scale_factor(self):
        """Gets the front_end_scale_factor of this DeploymentLocationsHostingEnvironmentsInner.

        Scale factor for front-ends.

        :return: The front_end_scale_factor of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: int
        """
        return self._front_end_scale_factor

    @front_end_scale_factor.setter
    def front_end_scale_factor(self, front_end_scale_factor):
        """Sets the front_end_scale_factor of this DeploymentLocationsHostingEnvironmentsInner.

        Scale factor for front-ends.

        :param front_end_scale_factor: The front_end_scale_factor of this DeploymentLocationsHostingEnvironmentsInner.
        :type front_end_scale_factor: int
        """

        self._front_end_scale_factor = front_end_scale_factor

    @property
    def has_linux_workers(self):
        """Gets the has_linux_workers of this DeploymentLocationsHostingEnvironmentsInner.

        Flag that displays whether an ASE has linux workers or not

        :return: The has_linux_workers of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: bool
        """
        return self._has_linux_workers

    @has_linux_workers.setter
    def has_linux_workers(self, has_linux_workers):
        """Sets the has_linux_workers of this DeploymentLocationsHostingEnvironmentsInner.

        Flag that displays whether an ASE has linux workers or not

        :param has_linux_workers: The has_linux_workers of this DeploymentLocationsHostingEnvironmentsInner.
        :type has_linux_workers: bool
        """

        self._has_linux_workers = has_linux_workers

    @property
    def internal_load_balancing_mode(self):
        """Gets the internal_load_balancing_mode of this DeploymentLocationsHostingEnvironmentsInner.

        Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.

        :return: The internal_load_balancing_mode of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._internal_load_balancing_mode

    @internal_load_balancing_mode.setter
    def internal_load_balancing_mode(self, internal_load_balancing_mode):
        """Sets the internal_load_balancing_mode of this DeploymentLocationsHostingEnvironmentsInner.

        Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.

        :param internal_load_balancing_mode: The internal_load_balancing_mode of this DeploymentLocationsHostingEnvironmentsInner.
        :type internal_load_balancing_mode: str
        """
        allowed_values = ["None", "Web", "Publishing"]  # noqa: E501
        if internal_load_balancing_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `internal_load_balancing_mode` ({0}), must be one of {1}"
                .format(internal_load_balancing_mode, allowed_values)
            )

        self._internal_load_balancing_mode = internal_load_balancing_mode

    @property
    def ipssl_address_count(self):
        """Gets the ipssl_address_count of this DeploymentLocationsHostingEnvironmentsInner.

        Number of IP SSL addresses reserved for the App Service Environment.

        :return: The ipssl_address_count of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: int
        """
        return self._ipssl_address_count

    @ipssl_address_count.setter
    def ipssl_address_count(self, ipssl_address_count):
        """Sets the ipssl_address_count of this DeploymentLocationsHostingEnvironmentsInner.

        Number of IP SSL addresses reserved for the App Service Environment.

        :param ipssl_address_count: The ipssl_address_count of this DeploymentLocationsHostingEnvironmentsInner.
        :type ipssl_address_count: int
        """

        self._ipssl_address_count = ipssl_address_count

    @property
    def last_action(self):
        """Gets the last_action of this DeploymentLocationsHostingEnvironmentsInner.

        Last deployment action on the App Service Environment.

        :return: The last_action of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._last_action

    @last_action.setter
    def last_action(self, last_action):
        """Sets the last_action of this DeploymentLocationsHostingEnvironmentsInner.

        Last deployment action on the App Service Environment.

        :param last_action: The last_action of this DeploymentLocationsHostingEnvironmentsInner.
        :type last_action: str
        """

        self._last_action = last_action

    @property
    def last_action_result(self):
        """Gets the last_action_result of this DeploymentLocationsHostingEnvironmentsInner.

        Result of the last deployment action on the App Service Environment.

        :return: The last_action_result of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._last_action_result

    @last_action_result.setter
    def last_action_result(self, last_action_result):
        """Sets the last_action_result of this DeploymentLocationsHostingEnvironmentsInner.

        Result of the last deployment action on the App Service Environment.

        :param last_action_result: The last_action_result of this DeploymentLocationsHostingEnvironmentsInner.
        :type last_action_result: str
        """

        self._last_action_result = last_action_result

    @property
    def location(self):
        """Gets the location of this DeploymentLocationsHostingEnvironmentsInner.

        Location of the App Service Environment, e.g. \"West US\".

        :return: The location of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DeploymentLocationsHostingEnvironmentsInner.

        Location of the App Service Environment, e.g. \"West US\".

        :param location: The location of this DeploymentLocationsHostingEnvironmentsInner.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def maximum_number_of_machines(self):
        """Gets the maximum_number_of_machines of this DeploymentLocationsHostingEnvironmentsInner.

        Maximum number of VMs in the App Service Environment.

        :return: The maximum_number_of_machines of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: int
        """
        return self._maximum_number_of_machines

    @maximum_number_of_machines.setter
    def maximum_number_of_machines(self, maximum_number_of_machines):
        """Sets the maximum_number_of_machines of this DeploymentLocationsHostingEnvironmentsInner.

        Maximum number of VMs in the App Service Environment.

        :param maximum_number_of_machines: The maximum_number_of_machines of this DeploymentLocationsHostingEnvironmentsInner.
        :type maximum_number_of_machines: int
        """

        self._maximum_number_of_machines = maximum_number_of_machines

    @property
    def multi_role_count(self):
        """Gets the multi_role_count of this DeploymentLocationsHostingEnvironmentsInner.

        Number of front-end instances.

        :return: The multi_role_count of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: int
        """
        return self._multi_role_count

    @multi_role_count.setter
    def multi_role_count(self, multi_role_count):
        """Sets the multi_role_count of this DeploymentLocationsHostingEnvironmentsInner.

        Number of front-end instances.

        :param multi_role_count: The multi_role_count of this DeploymentLocationsHostingEnvironmentsInner.
        :type multi_role_count: int
        """

        self._multi_role_count = multi_role_count

    @property
    def multi_size(self):
        """Gets the multi_size of this DeploymentLocationsHostingEnvironmentsInner.

        Front-end VM size, e.g. \"Medium\", \"Large\".

        :return: The multi_size of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._multi_size

    @multi_size.setter
    def multi_size(self, multi_size):
        """Sets the multi_size of this DeploymentLocationsHostingEnvironmentsInner.

        Front-end VM size, e.g. \"Medium\", \"Large\".

        :param multi_size: The multi_size of this DeploymentLocationsHostingEnvironmentsInner.
        :type multi_size: str
        """

        self._multi_size = multi_size

    @property
    def name(self):
        """Gets the name of this DeploymentLocationsHostingEnvironmentsInner.

        Name of the App Service Environment.

        :return: The name of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeploymentLocationsHostingEnvironmentsInner.

        Name of the App Service Environment.

        :param name: The name of this DeploymentLocationsHostingEnvironmentsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_access_control_list(self):
        """Gets the network_access_control_list of this DeploymentLocationsHostingEnvironmentsInner.

        Access control list for controlling traffic to the App Service Environment.

        :return: The network_access_control_list of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: List[DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner]
        """
        return self._network_access_control_list

    @network_access_control_list.setter
    def network_access_control_list(self, network_access_control_list):
        """Sets the network_access_control_list of this DeploymentLocationsHostingEnvironmentsInner.

        Access control list for controlling traffic to the App Service Environment.

        :param network_access_control_list: The network_access_control_list of this DeploymentLocationsHostingEnvironmentsInner.
        :type network_access_control_list: List[DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner]
        """

        self._network_access_control_list = network_access_control_list

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DeploymentLocationsHostingEnvironmentsInner.

        Provisioning state of the App Service Environment.

        :return: The provisioning_state of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DeploymentLocationsHostingEnvironmentsInner.

        Provisioning state of the App Service Environment.

        :param provisioning_state: The provisioning_state of this DeploymentLocationsHostingEnvironmentsInner.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Failed", "Canceled", "InProgress", "Deleting"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def resource_group(self):
        """Gets the resource_group of this DeploymentLocationsHostingEnvironmentsInner.

        Resource group of the App Service Environment.

        :return: The resource_group of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this DeploymentLocationsHostingEnvironmentsInner.

        Resource group of the App Service Environment.

        :param resource_group: The resource_group of this DeploymentLocationsHostingEnvironmentsInner.
        :type resource_group: str
        """

        self._resource_group = resource_group

    @property
    def ssl_cert_key_vault_id(self):
        """Gets the ssl_cert_key_vault_id of this DeploymentLocationsHostingEnvironmentsInner.

        Key Vault ID for ILB App Service Environment default SSL certificate

        :return: The ssl_cert_key_vault_id of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._ssl_cert_key_vault_id

    @ssl_cert_key_vault_id.setter
    def ssl_cert_key_vault_id(self, ssl_cert_key_vault_id):
        """Sets the ssl_cert_key_vault_id of this DeploymentLocationsHostingEnvironmentsInner.

        Key Vault ID for ILB App Service Environment default SSL certificate

        :param ssl_cert_key_vault_id: The ssl_cert_key_vault_id of this DeploymentLocationsHostingEnvironmentsInner.
        :type ssl_cert_key_vault_id: str
        """

        self._ssl_cert_key_vault_id = ssl_cert_key_vault_id

    @property
    def ssl_cert_key_vault_secret_name(self):
        """Gets the ssl_cert_key_vault_secret_name of this DeploymentLocationsHostingEnvironmentsInner.

        Key Vault Secret Name for ILB App Service Environment default SSL certificate

        :return: The ssl_cert_key_vault_secret_name of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._ssl_cert_key_vault_secret_name

    @ssl_cert_key_vault_secret_name.setter
    def ssl_cert_key_vault_secret_name(self, ssl_cert_key_vault_secret_name):
        """Sets the ssl_cert_key_vault_secret_name of this DeploymentLocationsHostingEnvironmentsInner.

        Key Vault Secret Name for ILB App Service Environment default SSL certificate

        :param ssl_cert_key_vault_secret_name: The ssl_cert_key_vault_secret_name of this DeploymentLocationsHostingEnvironmentsInner.
        :type ssl_cert_key_vault_secret_name: str
        """

        self._ssl_cert_key_vault_secret_name = ssl_cert_key_vault_secret_name

    @property
    def status(self):
        """Gets the status of this DeploymentLocationsHostingEnvironmentsInner.

        Current status of the App Service Environment.

        :return: The status of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeploymentLocationsHostingEnvironmentsInner.

        Current status of the App Service Environment.

        :param status: The status of this DeploymentLocationsHostingEnvironmentsInner.
        :type status: str
        """
        allowed_values = ["Preparing", "Ready", "Scaling", "Deleting"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this DeploymentLocationsHostingEnvironmentsInner.

        Subscription of the App Service Environment.

        :return: The subscription_id of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this DeploymentLocationsHostingEnvironmentsInner.

        Subscription of the App Service Environment.

        :param subscription_id: The subscription_id of this DeploymentLocationsHostingEnvironmentsInner.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def suspended(self):
        """Gets the suspended of this DeploymentLocationsHostingEnvironmentsInner.

        <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available  (most likely because NSG blocked the incoming traffic).

        :return: The suspended of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this DeploymentLocationsHostingEnvironmentsInner.

        <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available  (most likely because NSG blocked the incoming traffic).

        :param suspended: The suspended of this DeploymentLocationsHostingEnvironmentsInner.
        :type suspended: bool
        """

        self._suspended = suspended

    @property
    def upgrade_domains(self):
        """Gets the upgrade_domains of this DeploymentLocationsHostingEnvironmentsInner.

        Number of upgrade domains of the App Service Environment.

        :return: The upgrade_domains of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: int
        """
        return self._upgrade_domains

    @upgrade_domains.setter
    def upgrade_domains(self, upgrade_domains):
        """Sets the upgrade_domains of this DeploymentLocationsHostingEnvironmentsInner.

        Number of upgrade domains of the App Service Environment.

        :param upgrade_domains: The upgrade_domains of this DeploymentLocationsHostingEnvironmentsInner.
        :type upgrade_domains: int
        """

        self._upgrade_domains = upgrade_domains

    @property
    def user_whitelisted_ip_ranges(self):
        """Gets the user_whitelisted_ip_ranges of this DeploymentLocationsHostingEnvironmentsInner.

        User added ip ranges to whitelist on ASE db

        :return: The user_whitelisted_ip_ranges of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: List[str]
        """
        return self._user_whitelisted_ip_ranges

    @user_whitelisted_ip_ranges.setter
    def user_whitelisted_ip_ranges(self, user_whitelisted_ip_ranges):
        """Sets the user_whitelisted_ip_ranges of this DeploymentLocationsHostingEnvironmentsInner.

        User added ip ranges to whitelist on ASE db

        :param user_whitelisted_ip_ranges: The user_whitelisted_ip_ranges of this DeploymentLocationsHostingEnvironmentsInner.
        :type user_whitelisted_ip_ranges: List[str]
        """

        self._user_whitelisted_ip_ranges = user_whitelisted_ip_ranges

    @property
    def vip_mappings(self):
        """Gets the vip_mappings of this DeploymentLocationsHostingEnvironmentsInner.

        Description of IP SSL mapping for the App Service Environment.

        :return: The vip_mappings of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: List[DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner]
        """
        return self._vip_mappings

    @vip_mappings.setter
    def vip_mappings(self, vip_mappings):
        """Sets the vip_mappings of this DeploymentLocationsHostingEnvironmentsInner.

        Description of IP SSL mapping for the App Service Environment.

        :param vip_mappings: The vip_mappings of this DeploymentLocationsHostingEnvironmentsInner.
        :type vip_mappings: List[DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner]
        """

        self._vip_mappings = vip_mappings

    @property
    def virtual_network(self):
        """Gets the virtual_network of this DeploymentLocationsHostingEnvironmentsInner.


        :return: The virtual_network of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork
        """
        return self._virtual_network

    @virtual_network.setter
    def virtual_network(self, virtual_network):
        """Sets the virtual_network of this DeploymentLocationsHostingEnvironmentsInner.


        :param virtual_network: The virtual_network of this DeploymentLocationsHostingEnvironmentsInner.
        :type virtual_network: DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork
        """
        if virtual_network is None:
            raise ValueError("Invalid value for `virtual_network`, must not be `None`")

        self._virtual_network = virtual_network

    @property
    def vnet_name(self):
        """Gets the vnet_name of this DeploymentLocationsHostingEnvironmentsInner.

        Name of the Virtual Network for the App Service Environment.

        :return: The vnet_name of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._vnet_name

    @vnet_name.setter
    def vnet_name(self, vnet_name):
        """Sets the vnet_name of this DeploymentLocationsHostingEnvironmentsInner.

        Name of the Virtual Network for the App Service Environment.

        :param vnet_name: The vnet_name of this DeploymentLocationsHostingEnvironmentsInner.
        :type vnet_name: str
        """

        self._vnet_name = vnet_name

    @property
    def vnet_resource_group_name(self):
        """Gets the vnet_resource_group_name of this DeploymentLocationsHostingEnvironmentsInner.

        Resource group of the Virtual Network.

        :return: The vnet_resource_group_name of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._vnet_resource_group_name

    @vnet_resource_group_name.setter
    def vnet_resource_group_name(self, vnet_resource_group_name):
        """Sets the vnet_resource_group_name of this DeploymentLocationsHostingEnvironmentsInner.

        Resource group of the Virtual Network.

        :param vnet_resource_group_name: The vnet_resource_group_name of this DeploymentLocationsHostingEnvironmentsInner.
        :type vnet_resource_group_name: str
        """

        self._vnet_resource_group_name = vnet_resource_group_name

    @property
    def vnet_subnet_name(self):
        """Gets the vnet_subnet_name of this DeploymentLocationsHostingEnvironmentsInner.

        Subnet of the Virtual Network.

        :return: The vnet_subnet_name of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: str
        """
        return self._vnet_subnet_name

    @vnet_subnet_name.setter
    def vnet_subnet_name(self, vnet_subnet_name):
        """Sets the vnet_subnet_name of this DeploymentLocationsHostingEnvironmentsInner.

        Subnet of the Virtual Network.

        :param vnet_subnet_name: The vnet_subnet_name of this DeploymentLocationsHostingEnvironmentsInner.
        :type vnet_subnet_name: str
        """

        self._vnet_subnet_name = vnet_subnet_name

    @property
    def worker_pools(self):
        """Gets the worker_pools of this DeploymentLocationsHostingEnvironmentsInner.

        Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.

        :return: The worker_pools of this DeploymentLocationsHostingEnvironmentsInner.
        :rtype: List[DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner]
        """
        return self._worker_pools

    @worker_pools.setter
    def worker_pools(self, worker_pools):
        """Sets the worker_pools of this DeploymentLocationsHostingEnvironmentsInner.

        Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.

        :param worker_pools: The worker_pools of this DeploymentLocationsHostingEnvironmentsInner.
        :type worker_pools: List[DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner]
        """
        if worker_pools is None:
            raise ValueError("Invalid value for `worker_pools`, must not be `None`")

        self._worker_pools = worker_pools
