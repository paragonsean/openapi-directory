# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_locations_hosting_environments_inner import DeploymentLocationsHostingEnvironmentsInner
from openapi_server.models.geo_region import GeoRegion
from openapi_server.models.hosting_environment_deployment_info import HostingEnvironmentDeploymentInfo
from openapi_server import util


class DeploymentLocations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosting_environment_deployment_infos: List[HostingEnvironmentDeploymentInfo]=None, hosting_environments: List[DeploymentLocationsHostingEnvironmentsInner]=None, locations: List[GeoRegion]=None):
        """DeploymentLocations - a model defined in OpenAPI

        :param hosting_environment_deployment_infos: The hosting_environment_deployment_infos of this DeploymentLocations.
        :param hosting_environments: The hosting_environments of this DeploymentLocations.
        :param locations: The locations of this DeploymentLocations.
        """
        self.openapi_types = {
            'hosting_environment_deployment_infos': List[HostingEnvironmentDeploymentInfo],
            'hosting_environments': List[DeploymentLocationsHostingEnvironmentsInner],
            'locations': List[GeoRegion]
        }

        self.attribute_map = {
            'hosting_environment_deployment_infos': 'hostingEnvironmentDeploymentInfos',
            'hosting_environments': 'hostingEnvironments',
            'locations': 'locations'
        }

        self._hosting_environment_deployment_infos = hosting_environment_deployment_infos
        self._hosting_environments = hosting_environments
        self._locations = locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentLocations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentLocations of this DeploymentLocations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosting_environment_deployment_infos(self):
        """Gets the hosting_environment_deployment_infos of this DeploymentLocations.

        Available App Service Environments with basic information.

        :return: The hosting_environment_deployment_infos of this DeploymentLocations.
        :rtype: List[HostingEnvironmentDeploymentInfo]
        """
        return self._hosting_environment_deployment_infos

    @hosting_environment_deployment_infos.setter
    def hosting_environment_deployment_infos(self, hosting_environment_deployment_infos):
        """Sets the hosting_environment_deployment_infos of this DeploymentLocations.

        Available App Service Environments with basic information.

        :param hosting_environment_deployment_infos: The hosting_environment_deployment_infos of this DeploymentLocations.
        :type hosting_environment_deployment_infos: List[HostingEnvironmentDeploymentInfo]
        """

        self._hosting_environment_deployment_infos = hosting_environment_deployment_infos

    @property
    def hosting_environments(self):
        """Gets the hosting_environments of this DeploymentLocations.

        Available App Service Environments with full descriptions of the environments.

        :return: The hosting_environments of this DeploymentLocations.
        :rtype: List[DeploymentLocationsHostingEnvironmentsInner]
        """
        return self._hosting_environments

    @hosting_environments.setter
    def hosting_environments(self, hosting_environments):
        """Sets the hosting_environments of this DeploymentLocations.

        Available App Service Environments with full descriptions of the environments.

        :param hosting_environments: The hosting_environments of this DeploymentLocations.
        :type hosting_environments: List[DeploymentLocationsHostingEnvironmentsInner]
        """

        self._hosting_environments = hosting_environments

    @property
    def locations(self):
        """Gets the locations of this DeploymentLocations.

        Available regions.

        :return: The locations of this DeploymentLocations.
        :rtype: List[GeoRegion]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this DeploymentLocations.

        Available regions.

        :param locations: The locations of this DeploymentLocations.
        :type locations: List[GeoRegion]
        """

        self._locations = locations
