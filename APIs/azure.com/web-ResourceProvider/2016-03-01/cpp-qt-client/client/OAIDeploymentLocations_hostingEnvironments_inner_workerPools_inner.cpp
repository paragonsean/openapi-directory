/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner() {
    this->initializeModel();
}

OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::~OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner() {}

void OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::initializeModel() {

    m_compute_mode_isSet = false;
    m_compute_mode_isValid = false;

    m_instance_names_isSet = false;
    m_instance_names_isValid = false;

    m_worker_count_isSet = false;
    m_worker_count_isValid = false;

    m_worker_size_isSet = false;
    m_worker_size_isValid = false;

    m_worker_size_id_isSet = false;
    m_worker_size_id_isValid = false;
}

void OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::fromJsonObject(QJsonObject json) {

    m_compute_mode_isValid = ::OpenAPI::fromJsonValue(m_compute_mode, json[QString("computeMode")]);
    m_compute_mode_isSet = !json[QString("computeMode")].isNull() && m_compute_mode_isValid;

    m_instance_names_isValid = ::OpenAPI::fromJsonValue(m_instance_names, json[QString("instanceNames")]);
    m_instance_names_isSet = !json[QString("instanceNames")].isNull() && m_instance_names_isValid;

    m_worker_count_isValid = ::OpenAPI::fromJsonValue(m_worker_count, json[QString("workerCount")]);
    m_worker_count_isSet = !json[QString("workerCount")].isNull() && m_worker_count_isValid;

    m_worker_size_isValid = ::OpenAPI::fromJsonValue(m_worker_size, json[QString("workerSize")]);
    m_worker_size_isSet = !json[QString("workerSize")].isNull() && m_worker_size_isValid;

    m_worker_size_id_isValid = ::OpenAPI::fromJsonValue(m_worker_size_id, json[QString("workerSizeId")]);
    m_worker_size_id_isSet = !json[QString("workerSizeId")].isNull() && m_worker_size_id_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_compute_mode_isSet) {
        obj.insert(QString("computeMode"), ::OpenAPI::toJsonValue(m_compute_mode));
    }
    if (m_instance_names.size() > 0) {
        obj.insert(QString("instanceNames"), ::OpenAPI::toJsonValue(m_instance_names));
    }
    if (m_worker_count_isSet) {
        obj.insert(QString("workerCount"), ::OpenAPI::toJsonValue(m_worker_count));
    }
    if (m_worker_size_isSet) {
        obj.insert(QString("workerSize"), ::OpenAPI::toJsonValue(m_worker_size));
    }
    if (m_worker_size_id_isSet) {
        obj.insert(QString("workerSizeId"), ::OpenAPI::toJsonValue(m_worker_size_id));
    }
    return obj;
}

QString OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::getComputeMode() const {
    return m_compute_mode;
}
void OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::setComputeMode(const QString &compute_mode) {
    m_compute_mode = compute_mode;
    m_compute_mode_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::is_compute_mode_Set() const{
    return m_compute_mode_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::is_compute_mode_Valid() const{
    return m_compute_mode_isValid;
}

QList<QString> OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::getInstanceNames() const {
    return m_instance_names;
}
void OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::setInstanceNames(const QList<QString> &instance_names) {
    m_instance_names = instance_names;
    m_instance_names_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::is_instance_names_Set() const{
    return m_instance_names_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::is_instance_names_Valid() const{
    return m_instance_names_isValid;
}

qint32 OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::getWorkerCount() const {
    return m_worker_count;
}
void OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::setWorkerCount(const qint32 &worker_count) {
    m_worker_count = worker_count;
    m_worker_count_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::is_worker_count_Set() const{
    return m_worker_count_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::is_worker_count_Valid() const{
    return m_worker_count_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::getWorkerSize() const {
    return m_worker_size;
}
void OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::setWorkerSize(const QString &worker_size) {
    m_worker_size = worker_size;
    m_worker_size_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::is_worker_size_Set() const{
    return m_worker_size_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::is_worker_size_Valid() const{
    return m_worker_size_isValid;
}

qint32 OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::getWorkerSizeId() const {
    return m_worker_size_id;
}
void OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::setWorkerSizeId(const qint32 &worker_size_id) {
    m_worker_size_id = worker_size_id;
    m_worker_size_id_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::is_worker_size_id_Set() const{
    return m_worker_size_id_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::is_worker_size_id_Valid() const{
    return m_worker_size_id_isValid;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compute_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_size_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
