/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalCsmSkuDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalCsmSkuDescription::OAIGlobalCsmSkuDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalCsmSkuDescription::OAIGlobalCsmSkuDescription() {
    this->initializeModel();
}

OAIGlobalCsmSkuDescription::~OAIGlobalCsmSkuDescription() {}

void OAIGlobalCsmSkuDescription::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAIGlobalCsmSkuDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalCsmSkuDescription::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAIGlobalCsmSkuDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalCsmSkuDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_capacity.isSet()) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QList<OAIGlobalCsmSkuDescription_capabilities_inner> OAIGlobalCsmSkuDescription::getCapabilities() const {
    return m_capabilities;
}
void OAIGlobalCsmSkuDescription::setCapabilities(const QList<OAIGlobalCsmSkuDescription_capabilities_inner> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIGlobalCsmSkuDescription::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIGlobalCsmSkuDescription::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

OAIGlobalCsmSkuDescription_capacity OAIGlobalCsmSkuDescription::getCapacity() const {
    return m_capacity;
}
void OAIGlobalCsmSkuDescription::setCapacity(const OAIGlobalCsmSkuDescription_capacity &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIGlobalCsmSkuDescription::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIGlobalCsmSkuDescription::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QString OAIGlobalCsmSkuDescription::getFamily() const {
    return m_family;
}
void OAIGlobalCsmSkuDescription::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIGlobalCsmSkuDescription::is_family_Set() const{
    return m_family_isSet;
}

bool OAIGlobalCsmSkuDescription::is_family_Valid() const{
    return m_family_isValid;
}

QList<QString> OAIGlobalCsmSkuDescription::getLocations() const {
    return m_locations;
}
void OAIGlobalCsmSkuDescription::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIGlobalCsmSkuDescription::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIGlobalCsmSkuDescription::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIGlobalCsmSkuDescription::getName() const {
    return m_name;
}
void OAIGlobalCsmSkuDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGlobalCsmSkuDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGlobalCsmSkuDescription::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGlobalCsmSkuDescription::getSize() const {
    return m_size;
}
void OAIGlobalCsmSkuDescription::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGlobalCsmSkuDescription::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGlobalCsmSkuDescription::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIGlobalCsmSkuDescription::getTier() const {
    return m_tier;
}
void OAIGlobalCsmSkuDescription::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIGlobalCsmSkuDescription::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIGlobalCsmSkuDescription::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAIGlobalCsmSkuDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalCsmSkuDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
