/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeploymentLocations_hostingEnvironments_inner.h
 *
 * Description of an App Service Environment.
 */

#ifndef OAIDeploymentLocations_hostingEnvironments_inner_H
#define OAIDeploymentLocations_hostingEnvironments_inner_H

#include <QJsonObject>

#include "OAIDeploymentLocations_hostingEnvironments_inner_clusterSettings_inner.h"
#include "OAIDeploymentLocations_hostingEnvironments_inner_environmentCapacities_inner.h"
#include "OAIDeploymentLocations_hostingEnvironments_inner_networkAccessControlList_inner.h"
#include "OAIDeploymentLocations_hostingEnvironments_inner_vipMappings_inner.h"
#include "OAIDeploymentLocations_hostingEnvironments_inner_virtualNetwork.h"
#include "OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeploymentLocations_hostingEnvironments_inner_clusterSettings_inner;
class OAIDeploymentLocations_hostingEnvironments_inner_environmentCapacities_inner;
class OAIDeploymentLocations_hostingEnvironments_inner_networkAccessControlList_inner;
class OAIDeploymentLocations_hostingEnvironments_inner_vipMappings_inner;
class OAIDeploymentLocations_hostingEnvironments_inner_virtualNetwork;
class OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner;

class OAIDeploymentLocations_hostingEnvironments_inner : public OAIObject {
public:
    OAIDeploymentLocations_hostingEnvironments_inner();
    OAIDeploymentLocations_hostingEnvironments_inner(QString json);
    ~OAIDeploymentLocations_hostingEnvironments_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAllowedMultiSizes() const;
    void setAllowedMultiSizes(const QString &allowed_multi_sizes);
    bool is_allowed_multi_sizes_Set() const;
    bool is_allowed_multi_sizes_Valid() const;

    QString getAllowedWorkerSizes() const;
    void setAllowedWorkerSizes(const QString &allowed_worker_sizes);
    bool is_allowed_worker_sizes_Set() const;
    bool is_allowed_worker_sizes_Valid() const;

    QString getApiManagementAccountId() const;
    void setApiManagementAccountId(const QString &api_management_account_id);
    bool is_api_management_account_id_Set() const;
    bool is_api_management_account_id_Valid() const;

    QList<OAIDeploymentLocations_hostingEnvironments_inner_clusterSettings_inner> getClusterSettings() const;
    void setClusterSettings(const QList<OAIDeploymentLocations_hostingEnvironments_inner_clusterSettings_inner> &cluster_settings);
    bool is_cluster_settings_Set() const;
    bool is_cluster_settings_Valid() const;

    QString getDatabaseEdition() const;
    void setDatabaseEdition(const QString &database_edition);
    bool is_database_edition_Set() const;
    bool is_database_edition_Valid() const;

    QString getDatabaseServiceObjective() const;
    void setDatabaseServiceObjective(const QString &database_service_objective);
    bool is_database_service_objective_Set() const;
    bool is_database_service_objective_Valid() const;

    qint32 getDefaultFrontEndScaleFactor() const;
    void setDefaultFrontEndScaleFactor(const qint32 &default_front_end_scale_factor);
    bool is_default_front_end_scale_factor_Set() const;
    bool is_default_front_end_scale_factor_Valid() const;

    QString getDnsSuffix() const;
    void setDnsSuffix(const QString &dns_suffix);
    bool is_dns_suffix_Set() const;
    bool is_dns_suffix_Valid() const;

    bool isDynamicCacheEnabled() const;
    void setDynamicCacheEnabled(const bool &dynamic_cache_enabled);
    bool is_dynamic_cache_enabled_Set() const;
    bool is_dynamic_cache_enabled_Valid() const;

    QList<OAIDeploymentLocations_hostingEnvironments_inner_environmentCapacities_inner> getEnvironmentCapacities() const;
    void setEnvironmentCapacities(const QList<OAIDeploymentLocations_hostingEnvironments_inner_environmentCapacities_inner> &environment_capacities);
    bool is_environment_capacities_Set() const;
    bool is_environment_capacities_Valid() const;

    bool isEnvironmentIsHealthy() const;
    void setEnvironmentIsHealthy(const bool &environment_is_healthy);
    bool is_environment_is_healthy_Set() const;
    bool is_environment_is_healthy_Valid() const;

    QString getEnvironmentStatus() const;
    void setEnvironmentStatus(const QString &environment_status);
    bool is_environment_status_Set() const;
    bool is_environment_status_Valid() const;

    qint32 getFrontEndScaleFactor() const;
    void setFrontEndScaleFactor(const qint32 &front_end_scale_factor);
    bool is_front_end_scale_factor_Set() const;
    bool is_front_end_scale_factor_Valid() const;

    QString getInternalLoadBalancingMode() const;
    void setInternalLoadBalancingMode(const QString &internal_load_balancing_mode);
    bool is_internal_load_balancing_mode_Set() const;
    bool is_internal_load_balancing_mode_Valid() const;

    qint32 getIpsslAddressCount() const;
    void setIpsslAddressCount(const qint32 &ipssl_address_count);
    bool is_ipssl_address_count_Set() const;
    bool is_ipssl_address_count_Valid() const;

    QString getLastAction() const;
    void setLastAction(const QString &last_action);
    bool is_last_action_Set() const;
    bool is_last_action_Valid() const;

    QString getLastActionResult() const;
    void setLastActionResult(const QString &last_action_result);
    bool is_last_action_result_Set() const;
    bool is_last_action_result_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    qint32 getMaximumNumberOfMachines() const;
    void setMaximumNumberOfMachines(const qint32 &maximum_number_of_machines);
    bool is_maximum_number_of_machines_Set() const;
    bool is_maximum_number_of_machines_Valid() const;

    qint32 getMultiRoleCount() const;
    void setMultiRoleCount(const qint32 &multi_role_count);
    bool is_multi_role_count_Set() const;
    bool is_multi_role_count_Valid() const;

    QString getMultiSize() const;
    void setMultiSize(const QString &multi_size);
    bool is_multi_size_Set() const;
    bool is_multi_size_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIDeploymentLocations_hostingEnvironments_inner_networkAccessControlList_inner> getNetworkAccessControlList() const;
    void setNetworkAccessControlList(const QList<OAIDeploymentLocations_hostingEnvironments_inner_networkAccessControlList_inner> &network_access_control_list);
    bool is_network_access_control_list_Set() const;
    bool is_network_access_control_list_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getResourceGroup() const;
    void setResourceGroup(const QString &resource_group);
    bool is_resource_group_Set() const;
    bool is_resource_group_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSubscriptionId() const;
    void setSubscriptionId(const QString &subscription_id);
    bool is_subscription_id_Set() const;
    bool is_subscription_id_Valid() const;

    bool isSuspended() const;
    void setSuspended(const bool &suspended);
    bool is_suspended_Set() const;
    bool is_suspended_Valid() const;

    qint32 getUpgradeDomains() const;
    void setUpgradeDomains(const qint32 &upgrade_domains);
    bool is_upgrade_domains_Set() const;
    bool is_upgrade_domains_Valid() const;

    QList<QString> getUserWhitelistedIpRanges() const;
    void setUserWhitelistedIpRanges(const QList<QString> &user_whitelisted_ip_ranges);
    bool is_user_whitelisted_ip_ranges_Set() const;
    bool is_user_whitelisted_ip_ranges_Valid() const;

    QList<OAIDeploymentLocations_hostingEnvironments_inner_vipMappings_inner> getVipMappings() const;
    void setVipMappings(const QList<OAIDeploymentLocations_hostingEnvironments_inner_vipMappings_inner> &vip_mappings);
    bool is_vip_mappings_Set() const;
    bool is_vip_mappings_Valid() const;

    OAIDeploymentLocations_hostingEnvironments_inner_virtualNetwork getVirtualNetwork() const;
    void setVirtualNetwork(const OAIDeploymentLocations_hostingEnvironments_inner_virtualNetwork &virtual_network);
    bool is_virtual_network_Set() const;
    bool is_virtual_network_Valid() const;

    QString getVnetName() const;
    void setVnetName(const QString &vnet_name);
    bool is_vnet_name_Set() const;
    bool is_vnet_name_Valid() const;

    QString getVnetResourceGroupName() const;
    void setVnetResourceGroupName(const QString &vnet_resource_group_name);
    bool is_vnet_resource_group_name_Set() const;
    bool is_vnet_resource_group_name_Valid() const;

    QString getVnetSubnetName() const;
    void setVnetSubnetName(const QString &vnet_subnet_name);
    bool is_vnet_subnet_name_Set() const;
    bool is_vnet_subnet_name_Valid() const;

    QList<OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner> getWorkerPools() const;
    void setWorkerPools(const QList<OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner> &worker_pools);
    bool is_worker_pools_Set() const;
    bool is_worker_pools_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_allowed_multi_sizes;
    bool m_allowed_multi_sizes_isSet;
    bool m_allowed_multi_sizes_isValid;

    QString m_allowed_worker_sizes;
    bool m_allowed_worker_sizes_isSet;
    bool m_allowed_worker_sizes_isValid;

    QString m_api_management_account_id;
    bool m_api_management_account_id_isSet;
    bool m_api_management_account_id_isValid;

    QList<OAIDeploymentLocations_hostingEnvironments_inner_clusterSettings_inner> m_cluster_settings;
    bool m_cluster_settings_isSet;
    bool m_cluster_settings_isValid;

    QString m_database_edition;
    bool m_database_edition_isSet;
    bool m_database_edition_isValid;

    QString m_database_service_objective;
    bool m_database_service_objective_isSet;
    bool m_database_service_objective_isValid;

    qint32 m_default_front_end_scale_factor;
    bool m_default_front_end_scale_factor_isSet;
    bool m_default_front_end_scale_factor_isValid;

    QString m_dns_suffix;
    bool m_dns_suffix_isSet;
    bool m_dns_suffix_isValid;

    bool m_dynamic_cache_enabled;
    bool m_dynamic_cache_enabled_isSet;
    bool m_dynamic_cache_enabled_isValid;

    QList<OAIDeploymentLocations_hostingEnvironments_inner_environmentCapacities_inner> m_environment_capacities;
    bool m_environment_capacities_isSet;
    bool m_environment_capacities_isValid;

    bool m_environment_is_healthy;
    bool m_environment_is_healthy_isSet;
    bool m_environment_is_healthy_isValid;

    QString m_environment_status;
    bool m_environment_status_isSet;
    bool m_environment_status_isValid;

    qint32 m_front_end_scale_factor;
    bool m_front_end_scale_factor_isSet;
    bool m_front_end_scale_factor_isValid;

    QString m_internal_load_balancing_mode;
    bool m_internal_load_balancing_mode_isSet;
    bool m_internal_load_balancing_mode_isValid;

    qint32 m_ipssl_address_count;
    bool m_ipssl_address_count_isSet;
    bool m_ipssl_address_count_isValid;

    QString m_last_action;
    bool m_last_action_isSet;
    bool m_last_action_isValid;

    QString m_last_action_result;
    bool m_last_action_result_isSet;
    bool m_last_action_result_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    qint32 m_maximum_number_of_machines;
    bool m_maximum_number_of_machines_isSet;
    bool m_maximum_number_of_machines_isValid;

    qint32 m_multi_role_count;
    bool m_multi_role_count_isSet;
    bool m_multi_role_count_isValid;

    QString m_multi_size;
    bool m_multi_size_isSet;
    bool m_multi_size_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIDeploymentLocations_hostingEnvironments_inner_networkAccessControlList_inner> m_network_access_control_list;
    bool m_network_access_control_list_isSet;
    bool m_network_access_control_list_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_resource_group;
    bool m_resource_group_isSet;
    bool m_resource_group_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_subscription_id;
    bool m_subscription_id_isSet;
    bool m_subscription_id_isValid;

    bool m_suspended;
    bool m_suspended_isSet;
    bool m_suspended_isValid;

    qint32 m_upgrade_domains;
    bool m_upgrade_domains_isSet;
    bool m_upgrade_domains_isValid;

    QList<QString> m_user_whitelisted_ip_ranges;
    bool m_user_whitelisted_ip_ranges_isSet;
    bool m_user_whitelisted_ip_ranges_isValid;

    QList<OAIDeploymentLocations_hostingEnvironments_inner_vipMappings_inner> m_vip_mappings;
    bool m_vip_mappings_isSet;
    bool m_vip_mappings_isValid;

    OAIDeploymentLocations_hostingEnvironments_inner_virtualNetwork m_virtual_network;
    bool m_virtual_network_isSet;
    bool m_virtual_network_isValid;

    QString m_vnet_name;
    bool m_vnet_name_isSet;
    bool m_vnet_name_isValid;

    QString m_vnet_resource_group_name;
    bool m_vnet_resource_group_name_isSet;
    bool m_vnet_resource_group_name_isValid;

    QString m_vnet_subnet_name;
    bool m_vnet_subnet_name_isSet;
    bool m_vnet_subnet_name_isValid;

    QList<OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner> m_worker_pools;
    bool m_worker_pools_isSet;
    bool m_worker_pools_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeploymentLocations_hostingEnvironments_inner)

#endif // OAIDeploymentLocations_hostingEnvironments_inner_H
