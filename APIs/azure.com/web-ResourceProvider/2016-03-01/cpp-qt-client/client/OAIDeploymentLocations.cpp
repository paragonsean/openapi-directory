/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentLocations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentLocations::OAIDeploymentLocations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentLocations::OAIDeploymentLocations() {
    this->initializeModel();
}

OAIDeploymentLocations::~OAIDeploymentLocations() {}

void OAIDeploymentLocations::initializeModel() {

    m_hosting_environment_deployment_infos_isSet = false;
    m_hosting_environment_deployment_infos_isValid = false;

    m_hosting_environments_isSet = false;
    m_hosting_environments_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;
}

void OAIDeploymentLocations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentLocations::fromJsonObject(QJsonObject json) {

    m_hosting_environment_deployment_infos_isValid = ::OpenAPI::fromJsonValue(m_hosting_environment_deployment_infos, json[QString("hostingEnvironmentDeploymentInfos")]);
    m_hosting_environment_deployment_infos_isSet = !json[QString("hostingEnvironmentDeploymentInfos")].isNull() && m_hosting_environment_deployment_infos_isValid;

    m_hosting_environments_isValid = ::OpenAPI::fromJsonValue(m_hosting_environments, json[QString("hostingEnvironments")]);
    m_hosting_environments_isSet = !json[QString("hostingEnvironments")].isNull() && m_hosting_environments_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;
}

QString OAIDeploymentLocations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentLocations::asJsonObject() const {
    QJsonObject obj;
    if (m_hosting_environment_deployment_infos.size() > 0) {
        obj.insert(QString("hostingEnvironmentDeploymentInfos"), ::OpenAPI::toJsonValue(m_hosting_environment_deployment_infos));
    }
    if (m_hosting_environments.size() > 0) {
        obj.insert(QString("hostingEnvironments"), ::OpenAPI::toJsonValue(m_hosting_environments));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    return obj;
}

QList<OAIHostingEnvironmentDeploymentInfo> OAIDeploymentLocations::getHostingEnvironmentDeploymentInfos() const {
    return m_hosting_environment_deployment_infos;
}
void OAIDeploymentLocations::setHostingEnvironmentDeploymentInfos(const QList<OAIHostingEnvironmentDeploymentInfo> &hosting_environment_deployment_infos) {
    m_hosting_environment_deployment_infos = hosting_environment_deployment_infos;
    m_hosting_environment_deployment_infos_isSet = true;
}

bool OAIDeploymentLocations::is_hosting_environment_deployment_infos_Set() const{
    return m_hosting_environment_deployment_infos_isSet;
}

bool OAIDeploymentLocations::is_hosting_environment_deployment_infos_Valid() const{
    return m_hosting_environment_deployment_infos_isValid;
}

QList<OAIDeploymentLocations_hostingEnvironments_inner> OAIDeploymentLocations::getHostingEnvironments() const {
    return m_hosting_environments;
}
void OAIDeploymentLocations::setHostingEnvironments(const QList<OAIDeploymentLocations_hostingEnvironments_inner> &hosting_environments) {
    m_hosting_environments = hosting_environments;
    m_hosting_environments_isSet = true;
}

bool OAIDeploymentLocations::is_hosting_environments_Set() const{
    return m_hosting_environments_isSet;
}

bool OAIDeploymentLocations::is_hosting_environments_Valid() const{
    return m_hosting_environments_isValid;
}

QList<OAIGeoRegion> OAIDeploymentLocations::getLocations() const {
    return m_locations;
}
void OAIDeploymentLocations::setLocations(const QList<OAIGeoRegion> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIDeploymentLocations::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIDeploymentLocations::is_locations_Valid() const{
    return m_locations_isValid;
}

bool OAIDeploymentLocations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hosting_environment_deployment_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosting_environments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentLocations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
