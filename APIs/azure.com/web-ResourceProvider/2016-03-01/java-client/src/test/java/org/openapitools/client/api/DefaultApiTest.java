/*
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BillingMeterCollection;
import org.openapitools.client.model.CsmMoveResourceEnvelope;
import org.openapitools.client.model.DeploymentLocations;
import org.openapitools.client.model.GeoRegionCollection;
import org.openapitools.client.model.GetPublishingUser200Response;
import org.openapitools.client.model.ListSiteIdentifiersAssignedToHostName200Response;
import org.openapitools.client.model.ListSiteIdentifiersAssignedToHostNameRequest;
import org.openapitools.client.model.PremierAddOnOfferCollection;
import org.openapitools.client.model.ResourceNameAvailability;
import org.openapitools.client.model.ResourceNameAvailabilityRequest;
import org.openapitools.client.model.SkuInfos;
import org.openapitools.client.model.SourceControl;
import org.openapitools.client.model.SourceControlCollection;
import org.openapitools.client.model.ValidateRequest;
import org.openapitools.client.model.ValidateResponse;
import org.openapitools.client.model.VnetParameters;
import org.openapitools.client.model.VnetValidationFailureDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Gets a list of meters for a given location.
     *
     * Gets a list of meters for a given location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billingMetersListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String billingLocation = null;
        BillingMeterCollection response = api.billingMetersList(subscriptionId, apiVersion, billingLocation);
        // TODO: test validations
    }

    /**
     * Check if a resource name is available.
     *
     * Check if a resource name is available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkNameAvailabilityTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ResourceNameAvailabilityRequest request = null;
        ResourceNameAvailability response = api.checkNameAvailability(subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Gets publishing user
     *
     * Gets publishing user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublishingUserTest() throws ApiException {
        String apiVersion = null;
        GetPublishingUser200Response response = api.getPublishingUser(apiVersion);
        // TODO: test validations
    }

    /**
     * Gets source control token
     *
     * Gets source control token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSourceControlTest() throws ApiException {
        String sourceControlType = null;
        String apiVersion = null;
        SourceControl response = api.getSourceControl(sourceControlType, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets list of available geo regions plus ministamps
     *
     * Gets list of available geo regions plus ministamps
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionDeploymentLocationsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        DeploymentLocations response = api.getSubscriptionDeploymentLocations(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a list of available geographical regions.
     *
     * Get a list of available geographical regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGeoRegionsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String sku = null;
        Boolean linuxWorkersEnabled = null;
        GeoRegionCollection response = api.listGeoRegions(subscriptionId, apiVersion, sku, linuxWorkersEnabled);
        // TODO: test validations
    }

    /**
     * List all premier add-on offers.
     *
     * List all premier add-on offers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPremierAddOnOffersTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOnOfferCollection response = api.listPremierAddOnOffers(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List all apps that are assigned to a hostname.
     *
     * List all apps that are assigned to a hostname.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSiteIdentifiersAssignedToHostNameTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ListSiteIdentifiersAssignedToHostNameRequest nameIdentifier = null;
        ListSiteIdentifiersAssignedToHostName200Response response = api.listSiteIdentifiersAssignedToHostName(subscriptionId, apiVersion, nameIdentifier);
        // TODO: test validations
    }

    /**
     * List all SKUs.
     *
     * List all SKUs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSkusTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        SkuInfos response = api.listSkus(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the source controls available for Azure websites.
     *
     * Gets the source controls available for Azure websites.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourceControlsTest() throws ApiException {
        String apiVersion = null;
        SourceControlCollection response = api.listSourceControls(apiVersion);
        // TODO: test validations
    }

    /**
     * Move resources between resource groups.
     *
     * Move resources between resource groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmMoveResourceEnvelope moveResourceEnvelope = null;
        api.move(resourceGroupName, subscriptionId, apiVersion, moveResourceEnvelope);
        // TODO: test validations
    }

    /**
     * Updates publishing user
     *
     * Updates publishing user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePublishingUserTest() throws ApiException {
        String apiVersion = null;
        GetPublishingUser200Response userDetails = null;
        GetPublishingUser200Response response = api.updatePublishingUser(apiVersion, userDetails);
        // TODO: test validations
    }

    /**
     * Updates source control token
     *
     * Updates source control token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSourceControlTest() throws ApiException {
        String sourceControlType = null;
        String apiVersion = null;
        SourceControl requestMessage = null;
        SourceControl response = api.updateSourceControl(sourceControlType, apiVersion, requestMessage);
        // TODO: test validations
    }

    /**
     * Validate if a resource can be created.
     *
     * Validate if a resource can be created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ValidateRequest validateRequest = null;
        ValidateResponse response = api.validate(resourceGroupName, subscriptionId, apiVersion, validateRequest);
        // TODO: test validations
    }

    /**
     * Validate whether a resource can be moved.
     *
     * Validate whether a resource can be moved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateMoveTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmMoveResourceEnvelope moveResourceEnvelope = null;
        api.validateMove(resourceGroupName, subscriptionId, apiVersion, moveResourceEnvelope);
        // TODO: test validations
    }

    /**
     * Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules.
     *
     * Verifies if this VNET is compatible with an App Service Environment by analyzing the Network Security Group rules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyHostingEnvironmentVnetTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        VnetParameters parameters = null;
        VnetValidationFailureDetails response = api.verifyHostingEnvironmentVnet(subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

}
