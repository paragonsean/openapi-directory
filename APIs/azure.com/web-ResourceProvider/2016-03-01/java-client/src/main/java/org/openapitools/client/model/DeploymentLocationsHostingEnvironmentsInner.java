/*
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner;
import org.openapitools.client.model.DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner;
import org.openapitools.client.model.DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner;
import org.openapitools.client.model.DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner;
import org.openapitools.client.model.DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork;
import org.openapitools.client.model.DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of an App Service Environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:48.717500-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeploymentLocationsHostingEnvironmentsInner {
  public static final String SERIALIZED_NAME_ALLOWED_MULTI_SIZES = "allowedMultiSizes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_MULTI_SIZES)
  private String allowedMultiSizes;

  public static final String SERIALIZED_NAME_ALLOWED_WORKER_SIZES = "allowedWorkerSizes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_WORKER_SIZES)
  private String allowedWorkerSizes;

  public static final String SERIALIZED_NAME_API_MANAGEMENT_ACCOUNT_ID = "apiManagementAccountId";
  @SerializedName(SERIALIZED_NAME_API_MANAGEMENT_ACCOUNT_ID)
  private String apiManagementAccountId;

  public static final String SERIALIZED_NAME_CLUSTER_SETTINGS = "clusterSettings";
  @SerializedName(SERIALIZED_NAME_CLUSTER_SETTINGS)
  private List<DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner> clusterSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATABASE_EDITION = "databaseEdition";
  @SerializedName(SERIALIZED_NAME_DATABASE_EDITION)
  private String databaseEdition;

  public static final String SERIALIZED_NAME_DATABASE_SERVICE_OBJECTIVE = "databaseServiceObjective";
  @SerializedName(SERIALIZED_NAME_DATABASE_SERVICE_OBJECTIVE)
  private String databaseServiceObjective;

  public static final String SERIALIZED_NAME_DEFAULT_FRONT_END_SCALE_FACTOR = "defaultFrontEndScaleFactor";
  @SerializedName(SERIALIZED_NAME_DEFAULT_FRONT_END_SCALE_FACTOR)
  private Integer defaultFrontEndScaleFactor;

  public static final String SERIALIZED_NAME_DNS_SUFFIX = "dnsSuffix";
  @SerializedName(SERIALIZED_NAME_DNS_SUFFIX)
  private String dnsSuffix;

  public static final String SERIALIZED_NAME_DYNAMIC_CACHE_ENABLED = "dynamicCacheEnabled";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_CACHE_ENABLED)
  private Boolean dynamicCacheEnabled;

  public static final String SERIALIZED_NAME_ENVIRONMENT_CAPACITIES = "environmentCapacities";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_CAPACITIES)
  private List<DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner> environmentCapacities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT_IS_HEALTHY = "environmentIsHealthy";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_IS_HEALTHY)
  private Boolean environmentIsHealthy;

  public static final String SERIALIZED_NAME_ENVIRONMENT_STATUS = "environmentStatus";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_STATUS)
  private String environmentStatus;

  public static final String SERIALIZED_NAME_FRONT_END_SCALE_FACTOR = "frontEndScaleFactor";
  @SerializedName(SERIALIZED_NAME_FRONT_END_SCALE_FACTOR)
  private Integer frontEndScaleFactor;

  /**
   * Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
   */
  @JsonAdapter(InternalLoadBalancingModeEnum.Adapter.class)
  public enum InternalLoadBalancingModeEnum {
    NONE("None"),
    
    WEB("Web"),
    
    PUBLISHING("Publishing");

    private String value;

    InternalLoadBalancingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InternalLoadBalancingModeEnum fromValue(String value) {
      for (InternalLoadBalancingModeEnum b : InternalLoadBalancingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InternalLoadBalancingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InternalLoadBalancingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InternalLoadBalancingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InternalLoadBalancingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InternalLoadBalancingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERNAL_LOAD_BALANCING_MODE = "internalLoadBalancingMode";
  @SerializedName(SERIALIZED_NAME_INTERNAL_LOAD_BALANCING_MODE)
  private InternalLoadBalancingModeEnum internalLoadBalancingMode;

  public static final String SERIALIZED_NAME_IPSSL_ADDRESS_COUNT = "ipsslAddressCount";
  @SerializedName(SERIALIZED_NAME_IPSSL_ADDRESS_COUNT)
  private Integer ipsslAddressCount;

  public static final String SERIALIZED_NAME_LAST_ACTION = "lastAction";
  @SerializedName(SERIALIZED_NAME_LAST_ACTION)
  private String lastAction;

  public static final String SERIALIZED_NAME_LAST_ACTION_RESULT = "lastActionResult";
  @SerializedName(SERIALIZED_NAME_LAST_ACTION_RESULT)
  private String lastActionResult;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MAXIMUM_NUMBER_OF_MACHINES = "maximumNumberOfMachines";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_NUMBER_OF_MACHINES)
  private Integer maximumNumberOfMachines;

  public static final String SERIALIZED_NAME_MULTI_ROLE_COUNT = "multiRoleCount";
  @SerializedName(SERIALIZED_NAME_MULTI_ROLE_COUNT)
  private Integer multiRoleCount;

  public static final String SERIALIZED_NAME_MULTI_SIZE = "multiSize";
  @SerializedName(SERIALIZED_NAME_MULTI_SIZE)
  private String multiSize;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_ACCESS_CONTROL_LIST = "networkAccessControlList";
  @SerializedName(SERIALIZED_NAME_NETWORK_ACCESS_CONTROL_LIST)
  private List<DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner> networkAccessControlList = new ArrayList<>();

  /**
   * Provisioning state of the App Service Environment.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled"),
    
    IN_PROGRESS("InProgress"),
    
    DELETING("Deleting");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resourceGroup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  /**
   * Current status of the App Service Environment.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PREPARING("Preparing"),
    
    READY("Ready"),
    
    SCALING("Scaling"),
    
    DELETING("Deleting");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_SUSPENDED = "suspended";
  @SerializedName(SERIALIZED_NAME_SUSPENDED)
  private Boolean suspended;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAINS = "upgradeDomains";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAINS)
  private Integer upgradeDomains;

  public static final String SERIALIZED_NAME_USER_WHITELISTED_IP_RANGES = "userWhitelistedIpRanges";
  @SerializedName(SERIALIZED_NAME_USER_WHITELISTED_IP_RANGES)
  private List<String> userWhitelistedIpRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIP_MAPPINGS = "vipMappings";
  @SerializedName(SERIALIZED_NAME_VIP_MAPPINGS)
  private List<DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner> vipMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK = "virtualNetwork";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK)
  private DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork virtualNetwork;

  public static final String SERIALIZED_NAME_VNET_NAME = "vnetName";
  @SerializedName(SERIALIZED_NAME_VNET_NAME)
  private String vnetName;

  public static final String SERIALIZED_NAME_VNET_RESOURCE_GROUP_NAME = "vnetResourceGroupName";
  @SerializedName(SERIALIZED_NAME_VNET_RESOURCE_GROUP_NAME)
  private String vnetResourceGroupName;

  public static final String SERIALIZED_NAME_VNET_SUBNET_NAME = "vnetSubnetName";
  @SerializedName(SERIALIZED_NAME_VNET_SUBNET_NAME)
  private String vnetSubnetName;

  public static final String SERIALIZED_NAME_WORKER_POOLS = "workerPools";
  @SerializedName(SERIALIZED_NAME_WORKER_POOLS)
  private List<DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner> workerPools = new ArrayList<>();

  public DeploymentLocationsHostingEnvironmentsInner() {
  }

  public DeploymentLocationsHostingEnvironmentsInner(
     String allowedMultiSizes, 
     String allowedWorkerSizes, 
     String databaseEdition, 
     String databaseServiceObjective, 
     Integer defaultFrontEndScaleFactor, 
     List<DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner> environmentCapacities, 
     Boolean environmentIsHealthy, 
     String environmentStatus, 
     String lastAction, 
     String lastActionResult, 
     Integer maximumNumberOfMachines, 
     ProvisioningStateEnum provisioningState, 
     String resourceGroup, 
     StatusEnum status, 
     String subscriptionId, 
     Integer upgradeDomains, 
     List<DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner> vipMappings
  ) {
    this();
    this.allowedMultiSizes = allowedMultiSizes;
    this.allowedWorkerSizes = allowedWorkerSizes;
    this.databaseEdition = databaseEdition;
    this.databaseServiceObjective = databaseServiceObjective;
    this.defaultFrontEndScaleFactor = defaultFrontEndScaleFactor;
    this.environmentCapacities = environmentCapacities;
    this.environmentIsHealthy = environmentIsHealthy;
    this.environmentStatus = environmentStatus;
    this.lastAction = lastAction;
    this.lastActionResult = lastActionResult;
    this.maximumNumberOfMachines = maximumNumberOfMachines;
    this.provisioningState = provisioningState;
    this.resourceGroup = resourceGroup;
    this.status = status;
    this.subscriptionId = subscriptionId;
    this.upgradeDomains = upgradeDomains;
    this.vipMappings = vipMappings;
  }

  /**
   * List of comma separated strings describing which VM sizes are allowed for front-ends.
   * @return allowedMultiSizes
   */
  @javax.annotation.Nullable
  public String getAllowedMultiSizes() {
    return allowedMultiSizes;
  }



  /**
   * List of comma separated strings describing which VM sizes are allowed for workers.
   * @return allowedWorkerSizes
   */
  @javax.annotation.Nullable
  public String getAllowedWorkerSizes() {
    return allowedWorkerSizes;
  }



  public DeploymentLocationsHostingEnvironmentsInner apiManagementAccountId(String apiManagementAccountId) {
    this.apiManagementAccountId = apiManagementAccountId;
    return this;
  }

  /**
   * API Management Account associated with the App Service Environment.
   * @return apiManagementAccountId
   */
  @javax.annotation.Nullable
  public String getApiManagementAccountId() {
    return apiManagementAccountId;
  }

  public void setApiManagementAccountId(String apiManagementAccountId) {
    this.apiManagementAccountId = apiManagementAccountId;
  }


  public DeploymentLocationsHostingEnvironmentsInner clusterSettings(List<DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner> clusterSettings) {
    this.clusterSettings = clusterSettings;
    return this;
  }

  public DeploymentLocationsHostingEnvironmentsInner addClusterSettingsItem(DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner clusterSettingsItem) {
    if (this.clusterSettings == null) {
      this.clusterSettings = new ArrayList<>();
    }
    this.clusterSettings.add(clusterSettingsItem);
    return this;
  }

  /**
   * Custom settings for changing the behavior of the App Service Environment.
   * @return clusterSettings
   */
  @javax.annotation.Nullable
  public List<DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner> getClusterSettings() {
    return clusterSettings;
  }

  public void setClusterSettings(List<DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner> clusterSettings) {
    this.clusterSettings = clusterSettings;
  }


  /**
   * Edition of the metadata database for the App Service Environment, e.g. \&quot;Standard\&quot;.
   * @return databaseEdition
   */
  @javax.annotation.Nullable
  public String getDatabaseEdition() {
    return databaseEdition;
  }



  /**
   * Service objective of the metadata database for the App Service Environment, e.g. \&quot;S0\&quot;.
   * @return databaseServiceObjective
   */
  @javax.annotation.Nullable
  public String getDatabaseServiceObjective() {
    return databaseServiceObjective;
  }



  /**
   * Default Scale Factor for FrontEnds.
   * @return defaultFrontEndScaleFactor
   */
  @javax.annotation.Nullable
  public Integer getDefaultFrontEndScaleFactor() {
    return defaultFrontEndScaleFactor;
  }



  public DeploymentLocationsHostingEnvironmentsInner dnsSuffix(String dnsSuffix) {
    this.dnsSuffix = dnsSuffix;
    return this;
  }

  /**
   * DNS suffix of the App Service Environment.
   * @return dnsSuffix
   */
  @javax.annotation.Nullable
  public String getDnsSuffix() {
    return dnsSuffix;
  }

  public void setDnsSuffix(String dnsSuffix) {
    this.dnsSuffix = dnsSuffix;
  }


  public DeploymentLocationsHostingEnvironmentsInner dynamicCacheEnabled(Boolean dynamicCacheEnabled) {
    this.dynamicCacheEnabled = dynamicCacheEnabled;
    return this;
  }

  /**
   * True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available (most likely because NSG blocked the incoming traffic).
   * @return dynamicCacheEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDynamicCacheEnabled() {
    return dynamicCacheEnabled;
  }

  public void setDynamicCacheEnabled(Boolean dynamicCacheEnabled) {
    this.dynamicCacheEnabled = dynamicCacheEnabled;
  }


  /**
   * Current total, used, and available worker capacities.
   * @return environmentCapacities
   */
  @javax.annotation.Nullable
  public List<DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner> getEnvironmentCapacities() {
    return environmentCapacities;
  }



  /**
   * True/false indicating whether the App Service Environment is healthy.
   * @return environmentIsHealthy
   */
  @javax.annotation.Nullable
  public Boolean getEnvironmentIsHealthy() {
    return environmentIsHealthy;
  }



  /**
   * Detailed message about with results of the last check of the App Service Environment.
   * @return environmentStatus
   */
  @javax.annotation.Nullable
  public String getEnvironmentStatus() {
    return environmentStatus;
  }



  public DeploymentLocationsHostingEnvironmentsInner frontEndScaleFactor(Integer frontEndScaleFactor) {
    this.frontEndScaleFactor = frontEndScaleFactor;
    return this;
  }

  /**
   * Scale factor for front-ends.
   * @return frontEndScaleFactor
   */
  @javax.annotation.Nullable
  public Integer getFrontEndScaleFactor() {
    return frontEndScaleFactor;
  }

  public void setFrontEndScaleFactor(Integer frontEndScaleFactor) {
    this.frontEndScaleFactor = frontEndScaleFactor;
  }


  public DeploymentLocationsHostingEnvironmentsInner internalLoadBalancingMode(InternalLoadBalancingModeEnum internalLoadBalancingMode) {
    this.internalLoadBalancingMode = internalLoadBalancingMode;
    return this;
  }

  /**
   * Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
   * @return internalLoadBalancingMode
   */
  @javax.annotation.Nullable
  public InternalLoadBalancingModeEnum getInternalLoadBalancingMode() {
    return internalLoadBalancingMode;
  }

  public void setInternalLoadBalancingMode(InternalLoadBalancingModeEnum internalLoadBalancingMode) {
    this.internalLoadBalancingMode = internalLoadBalancingMode;
  }


  public DeploymentLocationsHostingEnvironmentsInner ipsslAddressCount(Integer ipsslAddressCount) {
    this.ipsslAddressCount = ipsslAddressCount;
    return this;
  }

  /**
   * Number of IP SSL addresses reserved for the App Service Environment.
   * @return ipsslAddressCount
   */
  @javax.annotation.Nullable
  public Integer getIpsslAddressCount() {
    return ipsslAddressCount;
  }

  public void setIpsslAddressCount(Integer ipsslAddressCount) {
    this.ipsslAddressCount = ipsslAddressCount;
  }


  /**
   * Last deployment action on the App Service Environment.
   * @return lastAction
   */
  @javax.annotation.Nullable
  public String getLastAction() {
    return lastAction;
  }



  /**
   * Result of the last deployment action on the App Service Environment.
   * @return lastActionResult
   */
  @javax.annotation.Nullable
  public String getLastActionResult() {
    return lastActionResult;
  }



  public DeploymentLocationsHostingEnvironmentsInner location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location of the App Service Environment, e.g. \&quot;West US\&quot;.
   * @return location
   */
  @javax.annotation.Nonnull
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  /**
   * Maximum number of VMs in the App Service Environment.
   * @return maximumNumberOfMachines
   */
  @javax.annotation.Nullable
  public Integer getMaximumNumberOfMachines() {
    return maximumNumberOfMachines;
  }



  public DeploymentLocationsHostingEnvironmentsInner multiRoleCount(Integer multiRoleCount) {
    this.multiRoleCount = multiRoleCount;
    return this;
  }

  /**
   * Number of front-end instances.
   * @return multiRoleCount
   */
  @javax.annotation.Nullable
  public Integer getMultiRoleCount() {
    return multiRoleCount;
  }

  public void setMultiRoleCount(Integer multiRoleCount) {
    this.multiRoleCount = multiRoleCount;
  }


  public DeploymentLocationsHostingEnvironmentsInner multiSize(String multiSize) {
    this.multiSize = multiSize;
    return this;
  }

  /**
   * Front-end VM size, e.g. \&quot;Medium\&quot;, \&quot;Large\&quot;.
   * @return multiSize
   */
  @javax.annotation.Nullable
  public String getMultiSize() {
    return multiSize;
  }

  public void setMultiSize(String multiSize) {
    this.multiSize = multiSize;
  }


  public DeploymentLocationsHostingEnvironmentsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the App Service Environment.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeploymentLocationsHostingEnvironmentsInner networkAccessControlList(List<DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner> networkAccessControlList) {
    this.networkAccessControlList = networkAccessControlList;
    return this;
  }

  public DeploymentLocationsHostingEnvironmentsInner addNetworkAccessControlListItem(DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner networkAccessControlListItem) {
    if (this.networkAccessControlList == null) {
      this.networkAccessControlList = new ArrayList<>();
    }
    this.networkAccessControlList.add(networkAccessControlListItem);
    return this;
  }

  /**
   * Access control list for controlling traffic to the App Service Environment.
   * @return networkAccessControlList
   */
  @javax.annotation.Nullable
  public List<DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner> getNetworkAccessControlList() {
    return networkAccessControlList;
  }

  public void setNetworkAccessControlList(List<DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner> networkAccessControlList) {
    this.networkAccessControlList = networkAccessControlList;
  }


  /**
   * Provisioning state of the App Service Environment.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * Resource group of the App Service Environment.
   * @return resourceGroup
   */
  @javax.annotation.Nullable
  public String getResourceGroup() {
    return resourceGroup;
  }



  /**
   * Current status of the App Service Environment.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * Subscription of the App Service Environment.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }



  public DeploymentLocationsHostingEnvironmentsInner suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if the App Service Environment is suspended; otherwise, &lt;code&gt;false&lt;/code&gt;. The environment can be suspended, e.g. when the management endpoint is no longer available  (most likely because NSG blocked the incoming traffic).
   * @return suspended
   */
  @javax.annotation.Nullable
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  /**
   * Number of upgrade domains of the App Service Environment.
   * @return upgradeDomains
   */
  @javax.annotation.Nullable
  public Integer getUpgradeDomains() {
    return upgradeDomains;
  }



  public DeploymentLocationsHostingEnvironmentsInner userWhitelistedIpRanges(List<String> userWhitelistedIpRanges) {
    this.userWhitelistedIpRanges = userWhitelistedIpRanges;
    return this;
  }

  public DeploymentLocationsHostingEnvironmentsInner addUserWhitelistedIpRangesItem(String userWhitelistedIpRangesItem) {
    if (this.userWhitelistedIpRanges == null) {
      this.userWhitelistedIpRanges = new ArrayList<>();
    }
    this.userWhitelistedIpRanges.add(userWhitelistedIpRangesItem);
    return this;
  }

  /**
   * User added ip ranges to whitelist on ASE db
   * @return userWhitelistedIpRanges
   */
  @javax.annotation.Nullable
  public List<String> getUserWhitelistedIpRanges() {
    return userWhitelistedIpRanges;
  }

  public void setUserWhitelistedIpRanges(List<String> userWhitelistedIpRanges) {
    this.userWhitelistedIpRanges = userWhitelistedIpRanges;
  }


  /**
   * Description of IP SSL mapping for the App Service Environment.
   * @return vipMappings
   */
  @javax.annotation.Nullable
  public List<DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner> getVipMappings() {
    return vipMappings;
  }



  public DeploymentLocationsHostingEnvironmentsInner virtualNetwork(DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork virtualNetwork) {
    this.virtualNetwork = virtualNetwork;
    return this;
  }

  /**
   * Get virtualNetwork
   * @return virtualNetwork
   */
  @javax.annotation.Nonnull
  public DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork getVirtualNetwork() {
    return virtualNetwork;
  }

  public void setVirtualNetwork(DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork virtualNetwork) {
    this.virtualNetwork = virtualNetwork;
  }


  public DeploymentLocationsHostingEnvironmentsInner vnetName(String vnetName) {
    this.vnetName = vnetName;
    return this;
  }

  /**
   * Name of the Virtual Network for the App Service Environment.
   * @return vnetName
   */
  @javax.annotation.Nullable
  public String getVnetName() {
    return vnetName;
  }

  public void setVnetName(String vnetName) {
    this.vnetName = vnetName;
  }


  public DeploymentLocationsHostingEnvironmentsInner vnetResourceGroupName(String vnetResourceGroupName) {
    this.vnetResourceGroupName = vnetResourceGroupName;
    return this;
  }

  /**
   * Resource group of the Virtual Network.
   * @return vnetResourceGroupName
   */
  @javax.annotation.Nullable
  public String getVnetResourceGroupName() {
    return vnetResourceGroupName;
  }

  public void setVnetResourceGroupName(String vnetResourceGroupName) {
    this.vnetResourceGroupName = vnetResourceGroupName;
  }


  public DeploymentLocationsHostingEnvironmentsInner vnetSubnetName(String vnetSubnetName) {
    this.vnetSubnetName = vnetSubnetName;
    return this;
  }

  /**
   * Subnet of the Virtual Network.
   * @return vnetSubnetName
   */
  @javax.annotation.Nullable
  public String getVnetSubnetName() {
    return vnetSubnetName;
  }

  public void setVnetSubnetName(String vnetSubnetName) {
    this.vnetSubnetName = vnetSubnetName;
  }


  public DeploymentLocationsHostingEnvironmentsInner workerPools(List<DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner> workerPools) {
    this.workerPools = workerPools;
    return this;
  }

  public DeploymentLocationsHostingEnvironmentsInner addWorkerPoolsItem(DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner workerPoolsItem) {
    if (this.workerPools == null) {
      this.workerPools = new ArrayList<>();
    }
    this.workerPools.add(workerPoolsItem);
    return this;
  }

  /**
   * Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
   * @return workerPools
   */
  @javax.annotation.Nonnull
  public List<DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner> getWorkerPools() {
    return workerPools;
  }

  public void setWorkerPools(List<DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner> workerPools) {
    this.workerPools = workerPools;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentLocationsHostingEnvironmentsInner deploymentLocationsHostingEnvironmentsInner = (DeploymentLocationsHostingEnvironmentsInner) o;
    return Objects.equals(this.allowedMultiSizes, deploymentLocationsHostingEnvironmentsInner.allowedMultiSizes) &&
        Objects.equals(this.allowedWorkerSizes, deploymentLocationsHostingEnvironmentsInner.allowedWorkerSizes) &&
        Objects.equals(this.apiManagementAccountId, deploymentLocationsHostingEnvironmentsInner.apiManagementAccountId) &&
        Objects.equals(this.clusterSettings, deploymentLocationsHostingEnvironmentsInner.clusterSettings) &&
        Objects.equals(this.databaseEdition, deploymentLocationsHostingEnvironmentsInner.databaseEdition) &&
        Objects.equals(this.databaseServiceObjective, deploymentLocationsHostingEnvironmentsInner.databaseServiceObjective) &&
        Objects.equals(this.defaultFrontEndScaleFactor, deploymentLocationsHostingEnvironmentsInner.defaultFrontEndScaleFactor) &&
        Objects.equals(this.dnsSuffix, deploymentLocationsHostingEnvironmentsInner.dnsSuffix) &&
        Objects.equals(this.dynamicCacheEnabled, deploymentLocationsHostingEnvironmentsInner.dynamicCacheEnabled) &&
        Objects.equals(this.environmentCapacities, deploymentLocationsHostingEnvironmentsInner.environmentCapacities) &&
        Objects.equals(this.environmentIsHealthy, deploymentLocationsHostingEnvironmentsInner.environmentIsHealthy) &&
        Objects.equals(this.environmentStatus, deploymentLocationsHostingEnvironmentsInner.environmentStatus) &&
        Objects.equals(this.frontEndScaleFactor, deploymentLocationsHostingEnvironmentsInner.frontEndScaleFactor) &&
        Objects.equals(this.internalLoadBalancingMode, deploymentLocationsHostingEnvironmentsInner.internalLoadBalancingMode) &&
        Objects.equals(this.ipsslAddressCount, deploymentLocationsHostingEnvironmentsInner.ipsslAddressCount) &&
        Objects.equals(this.lastAction, deploymentLocationsHostingEnvironmentsInner.lastAction) &&
        Objects.equals(this.lastActionResult, deploymentLocationsHostingEnvironmentsInner.lastActionResult) &&
        Objects.equals(this.location, deploymentLocationsHostingEnvironmentsInner.location) &&
        Objects.equals(this.maximumNumberOfMachines, deploymentLocationsHostingEnvironmentsInner.maximumNumberOfMachines) &&
        Objects.equals(this.multiRoleCount, deploymentLocationsHostingEnvironmentsInner.multiRoleCount) &&
        Objects.equals(this.multiSize, deploymentLocationsHostingEnvironmentsInner.multiSize) &&
        Objects.equals(this.name, deploymentLocationsHostingEnvironmentsInner.name) &&
        Objects.equals(this.networkAccessControlList, deploymentLocationsHostingEnvironmentsInner.networkAccessControlList) &&
        Objects.equals(this.provisioningState, deploymentLocationsHostingEnvironmentsInner.provisioningState) &&
        Objects.equals(this.resourceGroup, deploymentLocationsHostingEnvironmentsInner.resourceGroup) &&
        Objects.equals(this.status, deploymentLocationsHostingEnvironmentsInner.status) &&
        Objects.equals(this.subscriptionId, deploymentLocationsHostingEnvironmentsInner.subscriptionId) &&
        Objects.equals(this.suspended, deploymentLocationsHostingEnvironmentsInner.suspended) &&
        Objects.equals(this.upgradeDomains, deploymentLocationsHostingEnvironmentsInner.upgradeDomains) &&
        Objects.equals(this.userWhitelistedIpRanges, deploymentLocationsHostingEnvironmentsInner.userWhitelistedIpRanges) &&
        Objects.equals(this.vipMappings, deploymentLocationsHostingEnvironmentsInner.vipMappings) &&
        Objects.equals(this.virtualNetwork, deploymentLocationsHostingEnvironmentsInner.virtualNetwork) &&
        Objects.equals(this.vnetName, deploymentLocationsHostingEnvironmentsInner.vnetName) &&
        Objects.equals(this.vnetResourceGroupName, deploymentLocationsHostingEnvironmentsInner.vnetResourceGroupName) &&
        Objects.equals(this.vnetSubnetName, deploymentLocationsHostingEnvironmentsInner.vnetSubnetName) &&
        Objects.equals(this.workerPools, deploymentLocationsHostingEnvironmentsInner.workerPools);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedMultiSizes, allowedWorkerSizes, apiManagementAccountId, clusterSettings, databaseEdition, databaseServiceObjective, defaultFrontEndScaleFactor, dnsSuffix, dynamicCacheEnabled, environmentCapacities, environmentIsHealthy, environmentStatus, frontEndScaleFactor, internalLoadBalancingMode, ipsslAddressCount, lastAction, lastActionResult, location, maximumNumberOfMachines, multiRoleCount, multiSize, name, networkAccessControlList, provisioningState, resourceGroup, status, subscriptionId, suspended, upgradeDomains, userWhitelistedIpRanges, vipMappings, virtualNetwork, vnetName, vnetResourceGroupName, vnetSubnetName, workerPools);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentLocationsHostingEnvironmentsInner {\n");
    sb.append("    allowedMultiSizes: ").append(toIndentedString(allowedMultiSizes)).append("\n");
    sb.append("    allowedWorkerSizes: ").append(toIndentedString(allowedWorkerSizes)).append("\n");
    sb.append("    apiManagementAccountId: ").append(toIndentedString(apiManagementAccountId)).append("\n");
    sb.append("    clusterSettings: ").append(toIndentedString(clusterSettings)).append("\n");
    sb.append("    databaseEdition: ").append(toIndentedString(databaseEdition)).append("\n");
    sb.append("    databaseServiceObjective: ").append(toIndentedString(databaseServiceObjective)).append("\n");
    sb.append("    defaultFrontEndScaleFactor: ").append(toIndentedString(defaultFrontEndScaleFactor)).append("\n");
    sb.append("    dnsSuffix: ").append(toIndentedString(dnsSuffix)).append("\n");
    sb.append("    dynamicCacheEnabled: ").append(toIndentedString(dynamicCacheEnabled)).append("\n");
    sb.append("    environmentCapacities: ").append(toIndentedString(environmentCapacities)).append("\n");
    sb.append("    environmentIsHealthy: ").append(toIndentedString(environmentIsHealthy)).append("\n");
    sb.append("    environmentStatus: ").append(toIndentedString(environmentStatus)).append("\n");
    sb.append("    frontEndScaleFactor: ").append(toIndentedString(frontEndScaleFactor)).append("\n");
    sb.append("    internalLoadBalancingMode: ").append(toIndentedString(internalLoadBalancingMode)).append("\n");
    sb.append("    ipsslAddressCount: ").append(toIndentedString(ipsslAddressCount)).append("\n");
    sb.append("    lastAction: ").append(toIndentedString(lastAction)).append("\n");
    sb.append("    lastActionResult: ").append(toIndentedString(lastActionResult)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    maximumNumberOfMachines: ").append(toIndentedString(maximumNumberOfMachines)).append("\n");
    sb.append("    multiRoleCount: ").append(toIndentedString(multiRoleCount)).append("\n");
    sb.append("    multiSize: ").append(toIndentedString(multiSize)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkAccessControlList: ").append(toIndentedString(networkAccessControlList)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    upgradeDomains: ").append(toIndentedString(upgradeDomains)).append("\n");
    sb.append("    userWhitelistedIpRanges: ").append(toIndentedString(userWhitelistedIpRanges)).append("\n");
    sb.append("    vipMappings: ").append(toIndentedString(vipMappings)).append("\n");
    sb.append("    virtualNetwork: ").append(toIndentedString(virtualNetwork)).append("\n");
    sb.append("    vnetName: ").append(toIndentedString(vnetName)).append("\n");
    sb.append("    vnetResourceGroupName: ").append(toIndentedString(vnetResourceGroupName)).append("\n");
    sb.append("    vnetSubnetName: ").append(toIndentedString(vnetSubnetName)).append("\n");
    sb.append("    workerPools: ").append(toIndentedString(workerPools)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedMultiSizes");
    openapiFields.add("allowedWorkerSizes");
    openapiFields.add("apiManagementAccountId");
    openapiFields.add("clusterSettings");
    openapiFields.add("databaseEdition");
    openapiFields.add("databaseServiceObjective");
    openapiFields.add("defaultFrontEndScaleFactor");
    openapiFields.add("dnsSuffix");
    openapiFields.add("dynamicCacheEnabled");
    openapiFields.add("environmentCapacities");
    openapiFields.add("environmentIsHealthy");
    openapiFields.add("environmentStatus");
    openapiFields.add("frontEndScaleFactor");
    openapiFields.add("internalLoadBalancingMode");
    openapiFields.add("ipsslAddressCount");
    openapiFields.add("lastAction");
    openapiFields.add("lastActionResult");
    openapiFields.add("location");
    openapiFields.add("maximumNumberOfMachines");
    openapiFields.add("multiRoleCount");
    openapiFields.add("multiSize");
    openapiFields.add("name");
    openapiFields.add("networkAccessControlList");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceGroup");
    openapiFields.add("status");
    openapiFields.add("subscriptionId");
    openapiFields.add("suspended");
    openapiFields.add("upgradeDomains");
    openapiFields.add("userWhitelistedIpRanges");
    openapiFields.add("vipMappings");
    openapiFields.add("virtualNetwork");
    openapiFields.add("vnetName");
    openapiFields.add("vnetResourceGroupName");
    openapiFields.add("vnetSubnetName");
    openapiFields.add("workerPools");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("virtualNetwork");
    openapiRequiredFields.add("workerPools");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentLocationsHostingEnvironmentsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentLocationsHostingEnvironmentsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentLocationsHostingEnvironmentsInner is not found in the empty JSON string", DeploymentLocationsHostingEnvironmentsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentLocationsHostingEnvironmentsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentLocationsHostingEnvironmentsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeploymentLocationsHostingEnvironmentsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowedMultiSizes") != null && !jsonObj.get("allowedMultiSizes").isJsonNull()) && !jsonObj.get("allowedMultiSizes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedMultiSizes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedMultiSizes").toString()));
      }
      if ((jsonObj.get("allowedWorkerSizes") != null && !jsonObj.get("allowedWorkerSizes").isJsonNull()) && !jsonObj.get("allowedWorkerSizes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedWorkerSizes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedWorkerSizes").toString()));
      }
      if ((jsonObj.get("apiManagementAccountId") != null && !jsonObj.get("apiManagementAccountId").isJsonNull()) && !jsonObj.get("apiManagementAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiManagementAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiManagementAccountId").toString()));
      }
      if (jsonObj.get("clusterSettings") != null && !jsonObj.get("clusterSettings").isJsonNull()) {
        JsonArray jsonArrayclusterSettings = jsonObj.getAsJsonArray("clusterSettings");
        if (jsonArrayclusterSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clusterSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clusterSettings` to be an array in the JSON string but got `%s`", jsonObj.get("clusterSettings").toString()));
          }

          // validate the optional field `clusterSettings` (array)
          for (int i = 0; i < jsonArrayclusterSettings.size(); i++) {
            DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner.validateJsonElement(jsonArrayclusterSettings.get(i));
          };
        }
      }
      if ((jsonObj.get("databaseEdition") != null && !jsonObj.get("databaseEdition").isJsonNull()) && !jsonObj.get("databaseEdition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseEdition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseEdition").toString()));
      }
      if ((jsonObj.get("databaseServiceObjective") != null && !jsonObj.get("databaseServiceObjective").isJsonNull()) && !jsonObj.get("databaseServiceObjective").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseServiceObjective` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseServiceObjective").toString()));
      }
      if ((jsonObj.get("dnsSuffix") != null && !jsonObj.get("dnsSuffix").isJsonNull()) && !jsonObj.get("dnsSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsSuffix").toString()));
      }
      if (jsonObj.get("environmentCapacities") != null && !jsonObj.get("environmentCapacities").isJsonNull()) {
        JsonArray jsonArrayenvironmentCapacities = jsonObj.getAsJsonArray("environmentCapacities");
        if (jsonArrayenvironmentCapacities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentCapacities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentCapacities` to be an array in the JSON string but got `%s`", jsonObj.get("environmentCapacities").toString()));
          }

          // validate the optional field `environmentCapacities` (array)
          for (int i = 0; i < jsonArrayenvironmentCapacities.size(); i++) {
            DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner.validateJsonElement(jsonArrayenvironmentCapacities.get(i));
          };
        }
      }
      if ((jsonObj.get("environmentStatus") != null && !jsonObj.get("environmentStatus").isJsonNull()) && !jsonObj.get("environmentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentStatus").toString()));
      }
      if ((jsonObj.get("internalLoadBalancingMode") != null && !jsonObj.get("internalLoadBalancingMode").isJsonNull()) && !jsonObj.get("internalLoadBalancingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalLoadBalancingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalLoadBalancingMode").toString()));
      }
      // validate the optional field `internalLoadBalancingMode`
      if (jsonObj.get("internalLoadBalancingMode") != null && !jsonObj.get("internalLoadBalancingMode").isJsonNull()) {
        InternalLoadBalancingModeEnum.validateJsonElement(jsonObj.get("internalLoadBalancingMode"));
      }
      if ((jsonObj.get("lastAction") != null && !jsonObj.get("lastAction").isJsonNull()) && !jsonObj.get("lastAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastAction").toString()));
      }
      if ((jsonObj.get("lastActionResult") != null && !jsonObj.get("lastActionResult").isJsonNull()) && !jsonObj.get("lastActionResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastActionResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastActionResult").toString()));
      }
      if (!jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("multiSize") != null && !jsonObj.get("multiSize").isJsonNull()) && !jsonObj.get("multiSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multiSize").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("networkAccessControlList") != null && !jsonObj.get("networkAccessControlList").isJsonNull()) {
        JsonArray jsonArraynetworkAccessControlList = jsonObj.getAsJsonArray("networkAccessControlList");
        if (jsonArraynetworkAccessControlList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkAccessControlList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkAccessControlList` to be an array in the JSON string but got `%s`", jsonObj.get("networkAccessControlList").toString()));
          }

          // validate the optional field `networkAccessControlList` (array)
          for (int i = 0; i < jsonArraynetworkAccessControlList.size(); i++) {
            DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner.validateJsonElement(jsonArraynetworkAccessControlList.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("resourceGroup") != null && !jsonObj.get("resourceGroup").isJsonNull()) && !jsonObj.get("resourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroup").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("userWhitelistedIpRanges") != null && !jsonObj.get("userWhitelistedIpRanges").isJsonNull() && !jsonObj.get("userWhitelistedIpRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userWhitelistedIpRanges` to be an array in the JSON string but got `%s`", jsonObj.get("userWhitelistedIpRanges").toString()));
      }
      if (jsonObj.get("vipMappings") != null && !jsonObj.get("vipMappings").isJsonNull()) {
        JsonArray jsonArrayvipMappings = jsonObj.getAsJsonArray("vipMappings");
        if (jsonArrayvipMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vipMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vipMappings` to be an array in the JSON string but got `%s`", jsonObj.get("vipMappings").toString()));
          }

          // validate the optional field `vipMappings` (array)
          for (int i = 0; i < jsonArrayvipMappings.size(); i++) {
            DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner.validateJsonElement(jsonArrayvipMappings.get(i));
          };
        }
      }
      // validate the required field `virtualNetwork`
      DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork.validateJsonElement(jsonObj.get("virtualNetwork"));
      if ((jsonObj.get("vnetName") != null && !jsonObj.get("vnetName").isJsonNull()) && !jsonObj.get("vnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vnetName").toString()));
      }
      if ((jsonObj.get("vnetResourceGroupName") != null && !jsonObj.get("vnetResourceGroupName").isJsonNull()) && !jsonObj.get("vnetResourceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vnetResourceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vnetResourceGroupName").toString()));
      }
      if ((jsonObj.get("vnetSubnetName") != null && !jsonObj.get("vnetSubnetName").isJsonNull()) && !jsonObj.get("vnetSubnetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vnetSubnetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vnetSubnetName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("workerPools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workerPools` to be an array in the JSON string but got `%s`", jsonObj.get("workerPools").toString()));
      }

      JsonArray jsonArrayworkerPools = jsonObj.getAsJsonArray("workerPools");
      // validate the required field `workerPools` (array)
      for (int i = 0; i < jsonArrayworkerPools.size(); i++) {
        DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.validateJsonElement(jsonArrayworkerPools.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentLocationsHostingEnvironmentsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentLocationsHostingEnvironmentsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentLocationsHostingEnvironmentsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentLocationsHostingEnvironmentsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentLocationsHostingEnvironmentsInner>() {
           @Override
           public void write(JsonWriter out, DeploymentLocationsHostingEnvironmentsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentLocationsHostingEnvironmentsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentLocationsHostingEnvironmentsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentLocationsHostingEnvironmentsInner
   * @throws IOException if the JSON string is invalid with respect to DeploymentLocationsHostingEnvironmentsInner
   */
  public static DeploymentLocationsHostingEnvironmentsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentLocationsHostingEnvironmentsInner.class);
  }

  /**
   * Convert an instance of DeploymentLocationsHostingEnvironmentsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

