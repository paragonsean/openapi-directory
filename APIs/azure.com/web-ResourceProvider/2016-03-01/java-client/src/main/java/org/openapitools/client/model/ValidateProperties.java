/*
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * App properties used for validation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:48.717500-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ValidateProperties {
  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private Integer capacity;

  public static final String SERIALIZED_NAME_HOSTING_ENVIRONMENT = "hostingEnvironment";
  @SerializedName(SERIALIZED_NAME_HOSTING_ENVIRONMENT)
  private String hostingEnvironment;

  public static final String SERIALIZED_NAME_IS_SPOT = "isSpot";
  @SerializedName(SERIALIZED_NAME_IS_SPOT)
  private Boolean isSpot;

  public static final String SERIALIZED_NAME_NEED_LINUX_WORKERS = "needLinuxWorkers";
  @SerializedName(SERIALIZED_NAME_NEED_LINUX_WORKERS)
  private Boolean needLinuxWorkers;

  public static final String SERIALIZED_NAME_SERVER_FARM_ID = "serverFarmId";
  @SerializedName(SERIALIZED_NAME_SERVER_FARM_ID)
  private String serverFarmId;

  public static final String SERIALIZED_NAME_SKU_NAME = "skuName";
  @SerializedName(SERIALIZED_NAME_SKU_NAME)
  private String skuName;

  public ValidateProperties() {
  }

  public ValidateProperties capacity(Integer capacity) {
    this.capacity = capacity;
    return this;
  }

  /**
   * Target capacity of the App Service plan (number of VMs).
   * minimum: 1
   * @return capacity
   */
  @javax.annotation.Nullable
  public Integer getCapacity() {
    return capacity;
  }

  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }


  public ValidateProperties hostingEnvironment(String hostingEnvironment) {
    this.hostingEnvironment = hostingEnvironment;
    return this;
  }

  /**
   * Name of App Service Environment where app or App Service plan should be created.
   * @return hostingEnvironment
   */
  @javax.annotation.Nullable
  public String getHostingEnvironment() {
    return hostingEnvironment;
  }

  public void setHostingEnvironment(String hostingEnvironment) {
    this.hostingEnvironment = hostingEnvironment;
  }


  public ValidateProperties isSpot(Boolean isSpot) {
    this.isSpot = isSpot;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if App Service plan is for Spot instances; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return isSpot
   */
  @javax.annotation.Nullable
  public Boolean getIsSpot() {
    return isSpot;
  }

  public void setIsSpot(Boolean isSpot) {
    this.isSpot = isSpot;
  }


  public ValidateProperties needLinuxWorkers(Boolean needLinuxWorkers) {
    this.needLinuxWorkers = needLinuxWorkers;
    return this;
  }

  /**
   * &lt;code&gt;true&lt;/code&gt; if App Service plan is for Linux workers; otherwise, &lt;code&gt;false&lt;/code&gt;.
   * @return needLinuxWorkers
   */
  @javax.annotation.Nullable
  public Boolean getNeedLinuxWorkers() {
    return needLinuxWorkers;
  }

  public void setNeedLinuxWorkers(Boolean needLinuxWorkers) {
    this.needLinuxWorkers = needLinuxWorkers;
  }


  public ValidateProperties serverFarmId(String serverFarmId) {
    this.serverFarmId = serverFarmId;
    return this;
  }

  /**
   * ARM resource ID of an App Service plan that would host the app.
   * @return serverFarmId
   */
  @javax.annotation.Nullable
  public String getServerFarmId() {
    return serverFarmId;
  }

  public void setServerFarmId(String serverFarmId) {
    this.serverFarmId = serverFarmId;
  }


  public ValidateProperties skuName(String skuName) {
    this.skuName = skuName;
    return this;
  }

  /**
   * Name of the target SKU for the App Service plan.
   * @return skuName
   */
  @javax.annotation.Nullable
  public String getSkuName() {
    return skuName;
  }

  public void setSkuName(String skuName) {
    this.skuName = skuName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateProperties validateProperties = (ValidateProperties) o;
    return Objects.equals(this.capacity, validateProperties.capacity) &&
        Objects.equals(this.hostingEnvironment, validateProperties.hostingEnvironment) &&
        Objects.equals(this.isSpot, validateProperties.isSpot) &&
        Objects.equals(this.needLinuxWorkers, validateProperties.needLinuxWorkers) &&
        Objects.equals(this.serverFarmId, validateProperties.serverFarmId) &&
        Objects.equals(this.skuName, validateProperties.skuName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacity, hostingEnvironment, isSpot, needLinuxWorkers, serverFarmId, skuName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateProperties {\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    hostingEnvironment: ").append(toIndentedString(hostingEnvironment)).append("\n");
    sb.append("    isSpot: ").append(toIndentedString(isSpot)).append("\n");
    sb.append("    needLinuxWorkers: ").append(toIndentedString(needLinuxWorkers)).append("\n");
    sb.append("    serverFarmId: ").append(toIndentedString(serverFarmId)).append("\n");
    sb.append("    skuName: ").append(toIndentedString(skuName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacity");
    openapiFields.add("hostingEnvironment");
    openapiFields.add("isSpot");
    openapiFields.add("needLinuxWorkers");
    openapiFields.add("serverFarmId");
    openapiFields.add("skuName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidateProperties is not found in the empty JSON string", ValidateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostingEnvironment") != null && !jsonObj.get("hostingEnvironment").isJsonNull()) && !jsonObj.get("hostingEnvironment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostingEnvironment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostingEnvironment").toString()));
      }
      if ((jsonObj.get("serverFarmId") != null && !jsonObj.get("serverFarmId").isJsonNull()) && !jsonObj.get("serverFarmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverFarmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverFarmId").toString()));
      }
      if ((jsonObj.get("skuName") != null && !jsonObj.get("skuName").isJsonNull()) && !jsonObj.get("skuName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidateProperties>() {
           @Override
           public void write(JsonWriter out, ValidateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValidateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidateProperties
   * @throws IOException if the JSON string is invalid with respect to ValidateProperties
   */
  public static ValidateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidateProperties.class);
  }

  /**
   * Convert an instance of ValidateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

