# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetPublishingUser200ResponseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, publishing_password: str=None, publishing_password_hash: str=None, publishing_password_hash_salt: str=None, publishing_user_name: str=None):
        """GetPublishingUser200ResponseProperties - a model defined in OpenAPI

        :param name: The name of this GetPublishingUser200ResponseProperties.
        :param publishing_password: The publishing_password of this GetPublishingUser200ResponseProperties.
        :param publishing_password_hash: The publishing_password_hash of this GetPublishingUser200ResponseProperties.
        :param publishing_password_hash_salt: The publishing_password_hash_salt of this GetPublishingUser200ResponseProperties.
        :param publishing_user_name: The publishing_user_name of this GetPublishingUser200ResponseProperties.
        """
        self.openapi_types = {
            'name': str,
            'publishing_password': str,
            'publishing_password_hash': str,
            'publishing_password_hash_salt': str,
            'publishing_user_name': str
        }

        self.attribute_map = {
            'name': 'name',
            'publishing_password': 'publishingPassword',
            'publishing_password_hash': 'publishingPasswordHash',
            'publishing_password_hash_salt': 'publishingPasswordHashSalt',
            'publishing_user_name': 'publishingUserName'
        }

        self._name = name
        self._publishing_password = publishing_password
        self._publishing_password_hash = publishing_password_hash
        self._publishing_password_hash_salt = publishing_password_hash_salt
        self._publishing_user_name = publishing_user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPublishingUser200ResponseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPublishingUser_200_response_properties of this GetPublishingUser200ResponseProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GetPublishingUser200ResponseProperties.

        Username

        :return: The name of this GetPublishingUser200ResponseProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetPublishingUser200ResponseProperties.

        Username

        :param name: The name of this GetPublishingUser200ResponseProperties.
        :type name: str
        """

        self._name = name

    @property
    def publishing_password(self):
        """Gets the publishing_password of this GetPublishingUser200ResponseProperties.

        Password used for publishing.

        :return: The publishing_password of this GetPublishingUser200ResponseProperties.
        :rtype: str
        """
        return self._publishing_password

    @publishing_password.setter
    def publishing_password(self, publishing_password):
        """Sets the publishing_password of this GetPublishingUser200ResponseProperties.

        Password used for publishing.

        :param publishing_password: The publishing_password of this GetPublishingUser200ResponseProperties.
        :type publishing_password: str
        """

        self._publishing_password = publishing_password

    @property
    def publishing_password_hash(self):
        """Gets the publishing_password_hash of this GetPublishingUser200ResponseProperties.

        Password hash used for publishing.

        :return: The publishing_password_hash of this GetPublishingUser200ResponseProperties.
        :rtype: str
        """
        return self._publishing_password_hash

    @publishing_password_hash.setter
    def publishing_password_hash(self, publishing_password_hash):
        """Sets the publishing_password_hash of this GetPublishingUser200ResponseProperties.

        Password hash used for publishing.

        :param publishing_password_hash: The publishing_password_hash of this GetPublishingUser200ResponseProperties.
        :type publishing_password_hash: str
        """

        self._publishing_password_hash = publishing_password_hash

    @property
    def publishing_password_hash_salt(self):
        """Gets the publishing_password_hash_salt of this GetPublishingUser200ResponseProperties.

        Password hash salt used for publishing.

        :return: The publishing_password_hash_salt of this GetPublishingUser200ResponseProperties.
        :rtype: str
        """
        return self._publishing_password_hash_salt

    @publishing_password_hash_salt.setter
    def publishing_password_hash_salt(self, publishing_password_hash_salt):
        """Sets the publishing_password_hash_salt of this GetPublishingUser200ResponseProperties.

        Password hash salt used for publishing.

        :param publishing_password_hash_salt: The publishing_password_hash_salt of this GetPublishingUser200ResponseProperties.
        :type publishing_password_hash_salt: str
        """

        self._publishing_password_hash_salt = publishing_password_hash_salt

    @property
    def publishing_user_name(self):
        """Gets the publishing_user_name of this GetPublishingUser200ResponseProperties.

        Username used for publishing.

        :return: The publishing_user_name of this GetPublishingUser200ResponseProperties.
        :rtype: str
        """
        return self._publishing_user_name

    @publishing_user_name.setter
    def publishing_user_name(self, publishing_user_name):
        """Sets the publishing_user_name of this GetPublishingUser200ResponseProperties.

        Username used for publishing.

        :param publishing_user_name: The publishing_user_name of this GetPublishingUser200ResponseProperties.
        :type publishing_user_name: str
        """
        if publishing_user_name is None:
            raise ValueError("Invalid value for `publishing_user_name`, must not be `None`")

        self._publishing_user_name = publishing_user_name
