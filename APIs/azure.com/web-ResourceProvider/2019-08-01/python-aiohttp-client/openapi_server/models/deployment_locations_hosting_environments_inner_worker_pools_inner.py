# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_mode: str=None, instance_names: List[str]=None, worker_count: int=None, worker_size: str=None, worker_size_id: int=None):
        """DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner - a model defined in OpenAPI

        :param compute_mode: The compute_mode of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :param instance_names: The instance_names of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :param worker_count: The worker_count of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :param worker_size: The worker_size of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :param worker_size_id: The worker_size_id of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        """
        self.openapi_types = {
            'compute_mode': str,
            'instance_names': List[str],
            'worker_count': int,
            'worker_size': str,
            'worker_size_id': int
        }

        self.attribute_map = {
            'compute_mode': 'computeMode',
            'instance_names': 'instanceNames',
            'worker_count': 'workerCount',
            'worker_size': 'workerSize',
            'worker_size_id': 'workerSizeId'
        }

        self._compute_mode = compute_mode
        self._instance_names = instance_names
        self._worker_count = worker_count
        self._worker_size = worker_size
        self._worker_size_id = worker_size_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentLocations_hostingEnvironments_inner_workerPools_inner of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_mode(self):
        """Gets the compute_mode of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.

        Shared or dedicated app hosting.

        :return: The compute_mode of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :rtype: str
        """
        return self._compute_mode

    @compute_mode.setter
    def compute_mode(self, compute_mode):
        """Sets the compute_mode of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.

        Shared or dedicated app hosting.

        :param compute_mode: The compute_mode of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :type compute_mode: str
        """
        allowed_values = ["Shared", "Dedicated", "Dynamic"]  # noqa: E501
        if compute_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `compute_mode` ({0}), must be one of {1}"
                .format(compute_mode, allowed_values)
            )

        self._compute_mode = compute_mode

    @property
    def instance_names(self):
        """Gets the instance_names of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.

        Names of all instances in the worker pool (read only).

        :return: The instance_names of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :rtype: List[str]
        """
        return self._instance_names

    @instance_names.setter
    def instance_names(self, instance_names):
        """Sets the instance_names of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.

        Names of all instances in the worker pool (read only).

        :param instance_names: The instance_names of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :type instance_names: List[str]
        """

        self._instance_names = instance_names

    @property
    def worker_count(self):
        """Gets the worker_count of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.

        Number of instances in the worker pool.

        :return: The worker_count of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :rtype: int
        """
        return self._worker_count

    @worker_count.setter
    def worker_count(self, worker_count):
        """Sets the worker_count of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.

        Number of instances in the worker pool.

        :param worker_count: The worker_count of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :type worker_count: int
        """

        self._worker_count = worker_count

    @property
    def worker_size(self):
        """Gets the worker_size of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.

        VM size of the worker pool instances.

        :return: The worker_size of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :rtype: str
        """
        return self._worker_size

    @worker_size.setter
    def worker_size(self, worker_size):
        """Sets the worker_size of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.

        VM size of the worker pool instances.

        :param worker_size: The worker_size of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :type worker_size: str
        """

        self._worker_size = worker_size

    @property
    def worker_size_id(self):
        """Gets the worker_size_id of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.

        Worker size ID for referencing this worker pool.

        :return: The worker_size_id of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :rtype: int
        """
        return self._worker_size_id

    @worker_size_id.setter
    def worker_size_id(self, worker_size_id):
        """Sets the worker_size_id of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.

        Worker size ID for referencing this worker pool.

        :param worker_size_id: The worker_size_id of this DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.
        :type worker_size_id: int
        """

        self._worker_size_id = worker_size_id
