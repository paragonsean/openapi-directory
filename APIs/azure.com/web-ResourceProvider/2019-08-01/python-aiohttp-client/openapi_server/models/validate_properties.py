# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: int=None, container_image_platform: str=None, container_image_repository: str=None, container_image_tag: str=None, container_registry_base_url: str=None, container_registry_password: str=None, container_registry_username: str=None, hosting_environment: str=None, is_spot: bool=None, is_xenon: bool=None, need_linux_workers: bool=None, server_farm_id: str=None, sku_name: str=None):
        """ValidateProperties - a model defined in OpenAPI

        :param capacity: The capacity of this ValidateProperties.
        :param container_image_platform: The container_image_platform of this ValidateProperties.
        :param container_image_repository: The container_image_repository of this ValidateProperties.
        :param container_image_tag: The container_image_tag of this ValidateProperties.
        :param container_registry_base_url: The container_registry_base_url of this ValidateProperties.
        :param container_registry_password: The container_registry_password of this ValidateProperties.
        :param container_registry_username: The container_registry_username of this ValidateProperties.
        :param hosting_environment: The hosting_environment of this ValidateProperties.
        :param is_spot: The is_spot of this ValidateProperties.
        :param is_xenon: The is_xenon of this ValidateProperties.
        :param need_linux_workers: The need_linux_workers of this ValidateProperties.
        :param server_farm_id: The server_farm_id of this ValidateProperties.
        :param sku_name: The sku_name of this ValidateProperties.
        """
        self.openapi_types = {
            'capacity': int,
            'container_image_platform': str,
            'container_image_repository': str,
            'container_image_tag': str,
            'container_registry_base_url': str,
            'container_registry_password': str,
            'container_registry_username': str,
            'hosting_environment': str,
            'is_spot': bool,
            'is_xenon': bool,
            'need_linux_workers': bool,
            'server_farm_id': str,
            'sku_name': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'container_image_platform': 'containerImagePlatform',
            'container_image_repository': 'containerImageRepository',
            'container_image_tag': 'containerImageTag',
            'container_registry_base_url': 'containerRegistryBaseUrl',
            'container_registry_password': 'containerRegistryPassword',
            'container_registry_username': 'containerRegistryUsername',
            'hosting_environment': 'hostingEnvironment',
            'is_spot': 'isSpot',
            'is_xenon': 'isXenon',
            'need_linux_workers': 'needLinuxWorkers',
            'server_farm_id': 'serverFarmId',
            'sku_name': 'skuName'
        }

        self._capacity = capacity
        self._container_image_platform = container_image_platform
        self._container_image_repository = container_image_repository
        self._container_image_tag = container_image_tag
        self._container_registry_base_url = container_registry_base_url
        self._container_registry_password = container_registry_password
        self._container_registry_username = container_registry_username
        self._hosting_environment = hosting_environment
        self._is_spot = is_spot
        self._is_xenon = is_xenon
        self._need_linux_workers = need_linux_workers
        self._server_farm_id = server_farm_id
        self._sku_name = sku_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidateProperties of this ValidateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this ValidateProperties.

        Target capacity of the App Service plan (number of VMs).

        :return: The capacity of this ValidateProperties.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ValidateProperties.

        Target capacity of the App Service plan (number of VMs).

        :param capacity: The capacity of this ValidateProperties.
        :type capacity: int
        """
        if capacity is not None and capacity < 1:
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `1`")

        self._capacity = capacity

    @property
    def container_image_platform(self):
        """Gets the container_image_platform of this ValidateProperties.

        Platform (windows or linux)

        :return: The container_image_platform of this ValidateProperties.
        :rtype: str
        """
        return self._container_image_platform

    @container_image_platform.setter
    def container_image_platform(self, container_image_platform):
        """Sets the container_image_platform of this ValidateProperties.

        Platform (windows or linux)

        :param container_image_platform: The container_image_platform of this ValidateProperties.
        :type container_image_platform: str
        """

        self._container_image_platform = container_image_platform

    @property
    def container_image_repository(self):
        """Gets the container_image_repository of this ValidateProperties.

        Repository name (image name)

        :return: The container_image_repository of this ValidateProperties.
        :rtype: str
        """
        return self._container_image_repository

    @container_image_repository.setter
    def container_image_repository(self, container_image_repository):
        """Sets the container_image_repository of this ValidateProperties.

        Repository name (image name)

        :param container_image_repository: The container_image_repository of this ValidateProperties.
        :type container_image_repository: str
        """

        self._container_image_repository = container_image_repository

    @property
    def container_image_tag(self):
        """Gets the container_image_tag of this ValidateProperties.

        Image tag

        :return: The container_image_tag of this ValidateProperties.
        :rtype: str
        """
        return self._container_image_tag

    @container_image_tag.setter
    def container_image_tag(self, container_image_tag):
        """Sets the container_image_tag of this ValidateProperties.

        Image tag

        :param container_image_tag: The container_image_tag of this ValidateProperties.
        :type container_image_tag: str
        """

        self._container_image_tag = container_image_tag

    @property
    def container_registry_base_url(self):
        """Gets the container_registry_base_url of this ValidateProperties.

        Base URL of the container registry

        :return: The container_registry_base_url of this ValidateProperties.
        :rtype: str
        """
        return self._container_registry_base_url

    @container_registry_base_url.setter
    def container_registry_base_url(self, container_registry_base_url):
        """Sets the container_registry_base_url of this ValidateProperties.

        Base URL of the container registry

        :param container_registry_base_url: The container_registry_base_url of this ValidateProperties.
        :type container_registry_base_url: str
        """

        self._container_registry_base_url = container_registry_base_url

    @property
    def container_registry_password(self):
        """Gets the container_registry_password of this ValidateProperties.

        Password for to access the container registry

        :return: The container_registry_password of this ValidateProperties.
        :rtype: str
        """
        return self._container_registry_password

    @container_registry_password.setter
    def container_registry_password(self, container_registry_password):
        """Sets the container_registry_password of this ValidateProperties.

        Password for to access the container registry

        :param container_registry_password: The container_registry_password of this ValidateProperties.
        :type container_registry_password: str
        """

        self._container_registry_password = container_registry_password

    @property
    def container_registry_username(self):
        """Gets the container_registry_username of this ValidateProperties.

        Username for to access the container registry

        :return: The container_registry_username of this ValidateProperties.
        :rtype: str
        """
        return self._container_registry_username

    @container_registry_username.setter
    def container_registry_username(self, container_registry_username):
        """Sets the container_registry_username of this ValidateProperties.

        Username for to access the container registry

        :param container_registry_username: The container_registry_username of this ValidateProperties.
        :type container_registry_username: str
        """

        self._container_registry_username = container_registry_username

    @property
    def hosting_environment(self):
        """Gets the hosting_environment of this ValidateProperties.

        Name of App Service Environment where app or App Service plan should be created.

        :return: The hosting_environment of this ValidateProperties.
        :rtype: str
        """
        return self._hosting_environment

    @hosting_environment.setter
    def hosting_environment(self, hosting_environment):
        """Sets the hosting_environment of this ValidateProperties.

        Name of App Service Environment where app or App Service plan should be created.

        :param hosting_environment: The hosting_environment of this ValidateProperties.
        :type hosting_environment: str
        """

        self._hosting_environment = hosting_environment

    @property
    def is_spot(self):
        """Gets the is_spot of this ValidateProperties.

        <code>true</code> if App Service plan is for Spot instances; otherwise, <code>false</code>.

        :return: The is_spot of this ValidateProperties.
        :rtype: bool
        """
        return self._is_spot

    @is_spot.setter
    def is_spot(self, is_spot):
        """Sets the is_spot of this ValidateProperties.

        <code>true</code> if App Service plan is for Spot instances; otherwise, <code>false</code>.

        :param is_spot: The is_spot of this ValidateProperties.
        :type is_spot: bool
        """

        self._is_spot = is_spot

    @property
    def is_xenon(self):
        """Gets the is_xenon of this ValidateProperties.

        <code>true</code> if App Service plan is running as a windows container

        :return: The is_xenon of this ValidateProperties.
        :rtype: bool
        """
        return self._is_xenon

    @is_xenon.setter
    def is_xenon(self, is_xenon):
        """Sets the is_xenon of this ValidateProperties.

        <code>true</code> if App Service plan is running as a windows container

        :param is_xenon: The is_xenon of this ValidateProperties.
        :type is_xenon: bool
        """

        self._is_xenon = is_xenon

    @property
    def need_linux_workers(self):
        """Gets the need_linux_workers of this ValidateProperties.

        <code>true</code> if App Service plan is for Linux workers; otherwise, <code>false</code>.

        :return: The need_linux_workers of this ValidateProperties.
        :rtype: bool
        """
        return self._need_linux_workers

    @need_linux_workers.setter
    def need_linux_workers(self, need_linux_workers):
        """Sets the need_linux_workers of this ValidateProperties.

        <code>true</code> if App Service plan is for Linux workers; otherwise, <code>false</code>.

        :param need_linux_workers: The need_linux_workers of this ValidateProperties.
        :type need_linux_workers: bool
        """

        self._need_linux_workers = need_linux_workers

    @property
    def server_farm_id(self):
        """Gets the server_farm_id of this ValidateProperties.

        ARM resource ID of an App Service plan that would host the app.

        :return: The server_farm_id of this ValidateProperties.
        :rtype: str
        """
        return self._server_farm_id

    @server_farm_id.setter
    def server_farm_id(self, server_farm_id):
        """Sets the server_farm_id of this ValidateProperties.

        ARM resource ID of an App Service plan that would host the app.

        :param server_farm_id: The server_farm_id of this ValidateProperties.
        :type server_farm_id: str
        """

        self._server_farm_id = server_farm_id

    @property
    def sku_name(self):
        """Gets the sku_name of this ValidateProperties.

        Name of the target SKU for the App Service plan.

        :return: The sku_name of this ValidateProperties.
        :rtype: str
        """
        return self._sku_name

    @sku_name.setter
    def sku_name(self, sku_name):
        """Sets the sku_name of this ValidateProperties.

        Name of the target SKU for the App Service plan.

        :param sku_name: The sku_name of this ValidateProperties.
        :type sku_name: str
        """

        self._sku_name = sku_name
