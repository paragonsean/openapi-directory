# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CsmMoveResourceEnvelope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resources: List[str]=None, target_resource_group: str=None):
        """CsmMoveResourceEnvelope - a model defined in OpenAPI

        :param resources: The resources of this CsmMoveResourceEnvelope.
        :param target_resource_group: The target_resource_group of this CsmMoveResourceEnvelope.
        """
        self.openapi_types = {
            'resources': List[str],
            'target_resource_group': str
        }

        self.attribute_map = {
            'resources': 'resources',
            'target_resource_group': 'targetResourceGroup'
        }

        self._resources = resources
        self._target_resource_group = target_resource_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsmMoveResourceEnvelope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CsmMoveResourceEnvelope of this CsmMoveResourceEnvelope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resources(self):
        """Gets the resources of this CsmMoveResourceEnvelope.


        :return: The resources of this CsmMoveResourceEnvelope.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this CsmMoveResourceEnvelope.


        :param resources: The resources of this CsmMoveResourceEnvelope.
        :type resources: List[str]
        """

        self._resources = resources

    @property
    def target_resource_group(self):
        """Gets the target_resource_group of this CsmMoveResourceEnvelope.


        :return: The target_resource_group of this CsmMoveResourceEnvelope.
        :rtype: str
        """
        return self._target_resource_group

    @target_resource_group.setter
    def target_resource_group(self, target_resource_group):
        """Sets the target_resource_group of this CsmMoveResourceEnvelope.


        :param target_resource_group: The target_resource_group of this CsmMoveResourceEnvelope.
        :type target_resource_group: str
        """
        if target_resource_group is not None and len(target_resource_group) > 90:
            raise ValueError("Invalid value for `target_resource_group`, length must be less than or equal to `90`")
        if target_resource_group is not None and len(target_resource_group) < 1:
            raise ValueError("Invalid value for `target_resource_group`, length must be greater than or equal to `1`")
        if target_resource_group is not None and not re.search(r' ^[-\w\._\(\)]+[^\.]$', target_resource_group):
            raise ValueError("Invalid value for `target_resource_group`, must be a follow pattern or equal to `/ ^[-\w\._\(\)]+[^\.]$/`")

        self._target_resource_group = target_resource_group
