/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiClient);
  }
}(this, function(expect, ApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeploymentLocationsHostingEnvironmentsInner', function() {
    it('should create an instance of DeploymentLocationsHostingEnvironmentsInner', function() {
      // uncomment below and update the code to test DeploymentLocationsHostingEnvironmentsInner
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be.a(ApiClient.DeploymentLocationsHostingEnvironmentsInner);
    });

    it('should have the property allowedMultiSizes (base name: "allowedMultiSizes")', function() {
      // uncomment below and update the code to test the property allowedMultiSizes
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property allowedWorkerSizes (base name: "allowedWorkerSizes")', function() {
      // uncomment below and update the code to test the property allowedWorkerSizes
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property apiManagementAccountId (base name: "apiManagementAccountId")', function() {
      // uncomment below and update the code to test the property apiManagementAccountId
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property clusterSettings (base name: "clusterSettings")', function() {
      // uncomment below and update the code to test the property clusterSettings
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property databaseEdition (base name: "databaseEdition")', function() {
      // uncomment below and update the code to test the property databaseEdition
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property databaseServiceObjective (base name: "databaseServiceObjective")', function() {
      // uncomment below and update the code to test the property databaseServiceObjective
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property defaultFrontEndScaleFactor (base name: "defaultFrontEndScaleFactor")', function() {
      // uncomment below and update the code to test the property defaultFrontEndScaleFactor
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property dnsSuffix (base name: "dnsSuffix")', function() {
      // uncomment below and update the code to test the property dnsSuffix
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property dynamicCacheEnabled (base name: "dynamicCacheEnabled")', function() {
      // uncomment below and update the code to test the property dynamicCacheEnabled
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property environmentCapacities (base name: "environmentCapacities")', function() {
      // uncomment below and update the code to test the property environmentCapacities
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property environmentIsHealthy (base name: "environmentIsHealthy")', function() {
      // uncomment below and update the code to test the property environmentIsHealthy
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property environmentStatus (base name: "environmentStatus")', function() {
      // uncomment below and update the code to test the property environmentStatus
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property frontEndScaleFactor (base name: "frontEndScaleFactor")', function() {
      // uncomment below and update the code to test the property frontEndScaleFactor
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property hasLinuxWorkers (base name: "hasLinuxWorkers")', function() {
      // uncomment below and update the code to test the property hasLinuxWorkers
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property internalLoadBalancingMode (base name: "internalLoadBalancingMode")', function() {
      // uncomment below and update the code to test the property internalLoadBalancingMode
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property ipsslAddressCount (base name: "ipsslAddressCount")', function() {
      // uncomment below and update the code to test the property ipsslAddressCount
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property lastAction (base name: "lastAction")', function() {
      // uncomment below and update the code to test the property lastAction
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property lastActionResult (base name: "lastActionResult")', function() {
      // uncomment below and update the code to test the property lastActionResult
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property maximumNumberOfMachines (base name: "maximumNumberOfMachines")', function() {
      // uncomment below and update the code to test the property maximumNumberOfMachines
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property multiRoleCount (base name: "multiRoleCount")', function() {
      // uncomment below and update the code to test the property multiRoleCount
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property multiSize (base name: "multiSize")', function() {
      // uncomment below and update the code to test the property multiSize
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property networkAccessControlList (base name: "networkAccessControlList")', function() {
      // uncomment below and update the code to test the property networkAccessControlList
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property resourceGroup (base name: "resourceGroup")', function() {
      // uncomment below and update the code to test the property resourceGroup
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property sslCertKeyVaultId (base name: "sslCertKeyVaultId")', function() {
      // uncomment below and update the code to test the property sslCertKeyVaultId
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property sslCertKeyVaultSecretName (base name: "sslCertKeyVaultSecretName")', function() {
      // uncomment below and update the code to test the property sslCertKeyVaultSecretName
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionId (base name: "subscriptionId")', function() {
      // uncomment below and update the code to test the property subscriptionId
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property suspended (base name: "suspended")', function() {
      // uncomment below and update the code to test the property suspended
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property upgradeDomains (base name: "upgradeDomains")', function() {
      // uncomment below and update the code to test the property upgradeDomains
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property userWhitelistedIpRanges (base name: "userWhitelistedIpRanges")', function() {
      // uncomment below and update the code to test the property userWhitelistedIpRanges
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property vipMappings (base name: "vipMappings")', function() {
      // uncomment below and update the code to test the property vipMappings
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property virtualNetwork (base name: "virtualNetwork")', function() {
      // uncomment below and update the code to test the property virtualNetwork
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property vnetName (base name: "vnetName")', function() {
      // uncomment below and update the code to test the property vnetName
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property vnetResourceGroupName (base name: "vnetResourceGroupName")', function() {
      // uncomment below and update the code to test the property vnetResourceGroupName
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property vnetSubnetName (base name: "vnetSubnetName")', function() {
      // uncomment below and update the code to test the property vnetSubnetName
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

    it('should have the property workerPools (base name: "workerPools")', function() {
      // uncomment below and update the code to test the property workerPools
      //var instance = new ApiClient.DeploymentLocationsHostingEnvironmentsInner();
      //expect(instance).to.be();
    });

  });

}));
