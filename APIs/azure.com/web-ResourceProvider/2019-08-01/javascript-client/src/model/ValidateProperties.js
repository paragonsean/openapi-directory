/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValidateProperties model module.
 * @module model/ValidateProperties
 * @version 2019-08-01
 */
class ValidateProperties {
    /**
     * Constructs a new <code>ValidateProperties</code>.
     * App properties used for validation.
     * @alias module:model/ValidateProperties
     */
    constructor() { 
        
        ValidateProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ValidateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidateProperties} obj Optional instance to populate.
     * @return {module:model/ValidateProperties} The populated <code>ValidateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidateProperties();

            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], 'Number');
            }
            if (data.hasOwnProperty('containerImagePlatform')) {
                obj['containerImagePlatform'] = ApiClient.convertToType(data['containerImagePlatform'], 'String');
            }
            if (data.hasOwnProperty('containerImageRepository')) {
                obj['containerImageRepository'] = ApiClient.convertToType(data['containerImageRepository'], 'String');
            }
            if (data.hasOwnProperty('containerImageTag')) {
                obj['containerImageTag'] = ApiClient.convertToType(data['containerImageTag'], 'String');
            }
            if (data.hasOwnProperty('containerRegistryBaseUrl')) {
                obj['containerRegistryBaseUrl'] = ApiClient.convertToType(data['containerRegistryBaseUrl'], 'String');
            }
            if (data.hasOwnProperty('containerRegistryPassword')) {
                obj['containerRegistryPassword'] = ApiClient.convertToType(data['containerRegistryPassword'], 'String');
            }
            if (data.hasOwnProperty('containerRegistryUsername')) {
                obj['containerRegistryUsername'] = ApiClient.convertToType(data['containerRegistryUsername'], 'String');
            }
            if (data.hasOwnProperty('hostingEnvironment')) {
                obj['hostingEnvironment'] = ApiClient.convertToType(data['hostingEnvironment'], 'String');
            }
            if (data.hasOwnProperty('isSpot')) {
                obj['isSpot'] = ApiClient.convertToType(data['isSpot'], 'Boolean');
            }
            if (data.hasOwnProperty('isXenon')) {
                obj['isXenon'] = ApiClient.convertToType(data['isXenon'], 'Boolean');
            }
            if (data.hasOwnProperty('needLinuxWorkers')) {
                obj['needLinuxWorkers'] = ApiClient.convertToType(data['needLinuxWorkers'], 'Boolean');
            }
            if (data.hasOwnProperty('serverFarmId')) {
                obj['serverFarmId'] = ApiClient.convertToType(data['serverFarmId'], 'String');
            }
            if (data.hasOwnProperty('skuName')) {
                obj['skuName'] = ApiClient.convertToType(data['skuName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidateProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['containerImagePlatform'] && !(typeof data['containerImagePlatform'] === 'string' || data['containerImagePlatform'] instanceof String)) {
            throw new Error("Expected the field `containerImagePlatform` to be a primitive type in the JSON string but got " + data['containerImagePlatform']);
        }
        // ensure the json data is a string
        if (data['containerImageRepository'] && !(typeof data['containerImageRepository'] === 'string' || data['containerImageRepository'] instanceof String)) {
            throw new Error("Expected the field `containerImageRepository` to be a primitive type in the JSON string but got " + data['containerImageRepository']);
        }
        // ensure the json data is a string
        if (data['containerImageTag'] && !(typeof data['containerImageTag'] === 'string' || data['containerImageTag'] instanceof String)) {
            throw new Error("Expected the field `containerImageTag` to be a primitive type in the JSON string but got " + data['containerImageTag']);
        }
        // ensure the json data is a string
        if (data['containerRegistryBaseUrl'] && !(typeof data['containerRegistryBaseUrl'] === 'string' || data['containerRegistryBaseUrl'] instanceof String)) {
            throw new Error("Expected the field `containerRegistryBaseUrl` to be a primitive type in the JSON string but got " + data['containerRegistryBaseUrl']);
        }
        // ensure the json data is a string
        if (data['containerRegistryPassword'] && !(typeof data['containerRegistryPassword'] === 'string' || data['containerRegistryPassword'] instanceof String)) {
            throw new Error("Expected the field `containerRegistryPassword` to be a primitive type in the JSON string but got " + data['containerRegistryPassword']);
        }
        // ensure the json data is a string
        if (data['containerRegistryUsername'] && !(typeof data['containerRegistryUsername'] === 'string' || data['containerRegistryUsername'] instanceof String)) {
            throw new Error("Expected the field `containerRegistryUsername` to be a primitive type in the JSON string but got " + data['containerRegistryUsername']);
        }
        // ensure the json data is a string
        if (data['hostingEnvironment'] && !(typeof data['hostingEnvironment'] === 'string' || data['hostingEnvironment'] instanceof String)) {
            throw new Error("Expected the field `hostingEnvironment` to be a primitive type in the JSON string but got " + data['hostingEnvironment']);
        }
        // ensure the json data is a string
        if (data['serverFarmId'] && !(typeof data['serverFarmId'] === 'string' || data['serverFarmId'] instanceof String)) {
            throw new Error("Expected the field `serverFarmId` to be a primitive type in the JSON string but got " + data['serverFarmId']);
        }
        // ensure the json data is a string
        if (data['skuName'] && !(typeof data['skuName'] === 'string' || data['skuName'] instanceof String)) {
            throw new Error("Expected the field `skuName` to be a primitive type in the JSON string but got " + data['skuName']);
        }

        return true;
    }


}



/**
 * Target capacity of the App Service plan (number of VMs).
 * @member {Number} capacity
 */
ValidateProperties.prototype['capacity'] = undefined;

/**
 * Platform (windows or linux)
 * @member {String} containerImagePlatform
 */
ValidateProperties.prototype['containerImagePlatform'] = undefined;

/**
 * Repository name (image name)
 * @member {String} containerImageRepository
 */
ValidateProperties.prototype['containerImageRepository'] = undefined;

/**
 * Image tag
 * @member {String} containerImageTag
 */
ValidateProperties.prototype['containerImageTag'] = undefined;

/**
 * Base URL of the container registry
 * @member {String} containerRegistryBaseUrl
 */
ValidateProperties.prototype['containerRegistryBaseUrl'] = undefined;

/**
 * Password for to access the container registry
 * @member {String} containerRegistryPassword
 */
ValidateProperties.prototype['containerRegistryPassword'] = undefined;

/**
 * Username for to access the container registry
 * @member {String} containerRegistryUsername
 */
ValidateProperties.prototype['containerRegistryUsername'] = undefined;

/**
 * Name of App Service Environment where app or App Service plan should be created.
 * @member {String} hostingEnvironment
 */
ValidateProperties.prototype['hostingEnvironment'] = undefined;

/**
 * <code>true</code> if App Service plan is for Spot instances; otherwise, <code>false</code>.
 * @member {Boolean} isSpot
 */
ValidateProperties.prototype['isSpot'] = undefined;

/**
 * <code>true</code> if App Service plan is running as a windows container
 * @member {Boolean} isXenon
 */
ValidateProperties.prototype['isXenon'] = undefined;

/**
 * <code>true</code> if App Service plan is for Linux workers; otherwise, <code>false</code>.
 * @member {Boolean} needLinuxWorkers
 */
ValidateProperties.prototype['needLinuxWorkers'] = undefined;

/**
 * ARM resource ID of an App Service plan that would host the app.
 * @member {String} serverFarmId
 */
ValidateProperties.prototype['serverFarmId'] = undefined;

/**
 * Name of the target SKU for the App Service plan.
 * @member {String} skuName
 */
ValidateProperties.prototype['skuName'] = undefined;






export default ValidateProperties;

