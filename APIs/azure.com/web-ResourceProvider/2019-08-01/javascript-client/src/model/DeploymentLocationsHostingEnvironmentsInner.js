/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner from './DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner';
import DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner from './DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner';
import DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner from './DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner';
import DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner from './DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner';
import DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork from './DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork';
import DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner from './DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner';

/**
 * The DeploymentLocationsHostingEnvironmentsInner model module.
 * @module model/DeploymentLocationsHostingEnvironmentsInner
 * @version 2019-08-01
 */
class DeploymentLocationsHostingEnvironmentsInner {
    /**
     * Constructs a new <code>DeploymentLocationsHostingEnvironmentsInner</code>.
     * Description of an App Service Environment.
     * @alias module:model/DeploymentLocationsHostingEnvironmentsInner
     * @param location {String} Location of the App Service Environment, e.g. \"West US\".
     * @param name {String} Name of the App Service Environment.
     * @param virtualNetwork {module:model/DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork} 
     * @param workerPools {Array.<module:model/DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner>} Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
     */
    constructor(location, name, virtualNetwork, workerPools) { 
        
        DeploymentLocationsHostingEnvironmentsInner.initialize(this, location, name, virtualNetwork, workerPools);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, location, name, virtualNetwork, workerPools) { 
        obj['location'] = location;
        obj['name'] = name;
        obj['virtualNetwork'] = virtualNetwork;
        obj['workerPools'] = workerPools;
    }

    /**
     * Constructs a <code>DeploymentLocationsHostingEnvironmentsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeploymentLocationsHostingEnvironmentsInner} obj Optional instance to populate.
     * @return {module:model/DeploymentLocationsHostingEnvironmentsInner} The populated <code>DeploymentLocationsHostingEnvironmentsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeploymentLocationsHostingEnvironmentsInner();

            if (data.hasOwnProperty('allowedMultiSizes')) {
                obj['allowedMultiSizes'] = ApiClient.convertToType(data['allowedMultiSizes'], 'String');
            }
            if (data.hasOwnProperty('allowedWorkerSizes')) {
                obj['allowedWorkerSizes'] = ApiClient.convertToType(data['allowedWorkerSizes'], 'String');
            }
            if (data.hasOwnProperty('apiManagementAccountId')) {
                obj['apiManagementAccountId'] = ApiClient.convertToType(data['apiManagementAccountId'], 'String');
            }
            if (data.hasOwnProperty('clusterSettings')) {
                obj['clusterSettings'] = ApiClient.convertToType(data['clusterSettings'], [DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner]);
            }
            if (data.hasOwnProperty('databaseEdition')) {
                obj['databaseEdition'] = ApiClient.convertToType(data['databaseEdition'], 'String');
            }
            if (data.hasOwnProperty('databaseServiceObjective')) {
                obj['databaseServiceObjective'] = ApiClient.convertToType(data['databaseServiceObjective'], 'String');
            }
            if (data.hasOwnProperty('defaultFrontEndScaleFactor')) {
                obj['defaultFrontEndScaleFactor'] = ApiClient.convertToType(data['defaultFrontEndScaleFactor'], 'Number');
            }
            if (data.hasOwnProperty('dnsSuffix')) {
                obj['dnsSuffix'] = ApiClient.convertToType(data['dnsSuffix'], 'String');
            }
            if (data.hasOwnProperty('dynamicCacheEnabled')) {
                obj['dynamicCacheEnabled'] = ApiClient.convertToType(data['dynamicCacheEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('environmentCapacities')) {
                obj['environmentCapacities'] = ApiClient.convertToType(data['environmentCapacities'], [DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner]);
            }
            if (data.hasOwnProperty('environmentIsHealthy')) {
                obj['environmentIsHealthy'] = ApiClient.convertToType(data['environmentIsHealthy'], 'Boolean');
            }
            if (data.hasOwnProperty('environmentStatus')) {
                obj['environmentStatus'] = ApiClient.convertToType(data['environmentStatus'], 'String');
            }
            if (data.hasOwnProperty('frontEndScaleFactor')) {
                obj['frontEndScaleFactor'] = ApiClient.convertToType(data['frontEndScaleFactor'], 'Number');
            }
            if (data.hasOwnProperty('hasLinuxWorkers')) {
                obj['hasLinuxWorkers'] = ApiClient.convertToType(data['hasLinuxWorkers'], 'Boolean');
            }
            if (data.hasOwnProperty('internalLoadBalancingMode')) {
                obj['internalLoadBalancingMode'] = ApiClient.convertToType(data['internalLoadBalancingMode'], 'String');
            }
            if (data.hasOwnProperty('ipsslAddressCount')) {
                obj['ipsslAddressCount'] = ApiClient.convertToType(data['ipsslAddressCount'], 'Number');
            }
            if (data.hasOwnProperty('lastAction')) {
                obj['lastAction'] = ApiClient.convertToType(data['lastAction'], 'String');
            }
            if (data.hasOwnProperty('lastActionResult')) {
                obj['lastActionResult'] = ApiClient.convertToType(data['lastActionResult'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('maximumNumberOfMachines')) {
                obj['maximumNumberOfMachines'] = ApiClient.convertToType(data['maximumNumberOfMachines'], 'Number');
            }
            if (data.hasOwnProperty('multiRoleCount')) {
                obj['multiRoleCount'] = ApiClient.convertToType(data['multiRoleCount'], 'Number');
            }
            if (data.hasOwnProperty('multiSize')) {
                obj['multiSize'] = ApiClient.convertToType(data['multiSize'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkAccessControlList')) {
                obj['networkAccessControlList'] = ApiClient.convertToType(data['networkAccessControlList'], [DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceGroup')) {
                obj['resourceGroup'] = ApiClient.convertToType(data['resourceGroup'], 'String');
            }
            if (data.hasOwnProperty('sslCertKeyVaultId')) {
                obj['sslCertKeyVaultId'] = ApiClient.convertToType(data['sslCertKeyVaultId'], 'String');
            }
            if (data.hasOwnProperty('sslCertKeyVaultSecretName')) {
                obj['sslCertKeyVaultSecretName'] = ApiClient.convertToType(data['sslCertKeyVaultSecretName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('suspended')) {
                obj['suspended'] = ApiClient.convertToType(data['suspended'], 'Boolean');
            }
            if (data.hasOwnProperty('upgradeDomains')) {
                obj['upgradeDomains'] = ApiClient.convertToType(data['upgradeDomains'], 'Number');
            }
            if (data.hasOwnProperty('userWhitelistedIpRanges')) {
                obj['userWhitelistedIpRanges'] = ApiClient.convertToType(data['userWhitelistedIpRanges'], ['String']);
            }
            if (data.hasOwnProperty('vipMappings')) {
                obj['vipMappings'] = ApiClient.convertToType(data['vipMappings'], [DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner]);
            }
            if (data.hasOwnProperty('virtualNetwork')) {
                obj['virtualNetwork'] = DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork.constructFromObject(data['virtualNetwork']);
            }
            if (data.hasOwnProperty('vnetName')) {
                obj['vnetName'] = ApiClient.convertToType(data['vnetName'], 'String');
            }
            if (data.hasOwnProperty('vnetResourceGroupName')) {
                obj['vnetResourceGroupName'] = ApiClient.convertToType(data['vnetResourceGroupName'], 'String');
            }
            if (data.hasOwnProperty('vnetSubnetName')) {
                obj['vnetSubnetName'] = ApiClient.convertToType(data['vnetSubnetName'], 'String');
            }
            if (data.hasOwnProperty('workerPools')) {
                obj['workerPools'] = ApiClient.convertToType(data['workerPools'], [DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeploymentLocationsHostingEnvironmentsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeploymentLocationsHostingEnvironmentsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeploymentLocationsHostingEnvironmentsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['allowedMultiSizes'] && !(typeof data['allowedMultiSizes'] === 'string' || data['allowedMultiSizes'] instanceof String)) {
            throw new Error("Expected the field `allowedMultiSizes` to be a primitive type in the JSON string but got " + data['allowedMultiSizes']);
        }
        // ensure the json data is a string
        if (data['allowedWorkerSizes'] && !(typeof data['allowedWorkerSizes'] === 'string' || data['allowedWorkerSizes'] instanceof String)) {
            throw new Error("Expected the field `allowedWorkerSizes` to be a primitive type in the JSON string but got " + data['allowedWorkerSizes']);
        }
        // ensure the json data is a string
        if (data['apiManagementAccountId'] && !(typeof data['apiManagementAccountId'] === 'string' || data['apiManagementAccountId'] instanceof String)) {
            throw new Error("Expected the field `apiManagementAccountId` to be a primitive type in the JSON string but got " + data['apiManagementAccountId']);
        }
        if (data['clusterSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clusterSettings'])) {
                throw new Error("Expected the field `clusterSettings` to be an array in the JSON data but got " + data['clusterSettings']);
            }
            // validate the optional field `clusterSettings` (array)
            for (const item of data['clusterSettings']) {
                DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['databaseEdition'] && !(typeof data['databaseEdition'] === 'string' || data['databaseEdition'] instanceof String)) {
            throw new Error("Expected the field `databaseEdition` to be a primitive type in the JSON string but got " + data['databaseEdition']);
        }
        // ensure the json data is a string
        if (data['databaseServiceObjective'] && !(typeof data['databaseServiceObjective'] === 'string' || data['databaseServiceObjective'] instanceof String)) {
            throw new Error("Expected the field `databaseServiceObjective` to be a primitive type in the JSON string but got " + data['databaseServiceObjective']);
        }
        // ensure the json data is a string
        if (data['dnsSuffix'] && !(typeof data['dnsSuffix'] === 'string' || data['dnsSuffix'] instanceof String)) {
            throw new Error("Expected the field `dnsSuffix` to be a primitive type in the JSON string but got " + data['dnsSuffix']);
        }
        if (data['environmentCapacities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentCapacities'])) {
                throw new Error("Expected the field `environmentCapacities` to be an array in the JSON data but got " + data['environmentCapacities']);
            }
            // validate the optional field `environmentCapacities` (array)
            for (const item of data['environmentCapacities']) {
                DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['environmentStatus'] && !(typeof data['environmentStatus'] === 'string' || data['environmentStatus'] instanceof String)) {
            throw new Error("Expected the field `environmentStatus` to be a primitive type in the JSON string but got " + data['environmentStatus']);
        }
        // ensure the json data is a string
        if (data['internalLoadBalancingMode'] && !(typeof data['internalLoadBalancingMode'] === 'string' || data['internalLoadBalancingMode'] instanceof String)) {
            throw new Error("Expected the field `internalLoadBalancingMode` to be a primitive type in the JSON string but got " + data['internalLoadBalancingMode']);
        }
        // ensure the json data is a string
        if (data['lastAction'] && !(typeof data['lastAction'] === 'string' || data['lastAction'] instanceof String)) {
            throw new Error("Expected the field `lastAction` to be a primitive type in the JSON string but got " + data['lastAction']);
        }
        // ensure the json data is a string
        if (data['lastActionResult'] && !(typeof data['lastActionResult'] === 'string' || data['lastActionResult'] instanceof String)) {
            throw new Error("Expected the field `lastActionResult` to be a primitive type in the JSON string but got " + data['lastActionResult']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['multiSize'] && !(typeof data['multiSize'] === 'string' || data['multiSize'] instanceof String)) {
            throw new Error("Expected the field `multiSize` to be a primitive type in the JSON string but got " + data['multiSize']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['networkAccessControlList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networkAccessControlList'])) {
                throw new Error("Expected the field `networkAccessControlList` to be an array in the JSON data but got " + data['networkAccessControlList']);
            }
            // validate the optional field `networkAccessControlList` (array)
            for (const item of data['networkAccessControlList']) {
                DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['resourceGroup'] && !(typeof data['resourceGroup'] === 'string' || data['resourceGroup'] instanceof String)) {
            throw new Error("Expected the field `resourceGroup` to be a primitive type in the JSON string but got " + data['resourceGroup']);
        }
        // ensure the json data is a string
        if (data['sslCertKeyVaultId'] && !(typeof data['sslCertKeyVaultId'] === 'string' || data['sslCertKeyVaultId'] instanceof String)) {
            throw new Error("Expected the field `sslCertKeyVaultId` to be a primitive type in the JSON string but got " + data['sslCertKeyVaultId']);
        }
        // ensure the json data is a string
        if (data['sslCertKeyVaultSecretName'] && !(typeof data['sslCertKeyVaultSecretName'] === 'string' || data['sslCertKeyVaultSecretName'] instanceof String)) {
            throw new Error("Expected the field `sslCertKeyVaultSecretName` to be a primitive type in the JSON string but got " + data['sslCertKeyVaultSecretName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userWhitelistedIpRanges'])) {
            throw new Error("Expected the field `userWhitelistedIpRanges` to be an array in the JSON data but got " + data['userWhitelistedIpRanges']);
        }
        if (data['vipMappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vipMappings'])) {
                throw new Error("Expected the field `vipMappings` to be an array in the JSON data but got " + data['vipMappings']);
            }
            // validate the optional field `vipMappings` (array)
            for (const item of data['vipMappings']) {
                DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner.validateJSON(item);
            };
        }
        // validate the optional field `virtualNetwork`
        if (data['virtualNetwork']) { // data not null
          DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork.validateJSON(data['virtualNetwork']);
        }
        // ensure the json data is a string
        if (data['vnetName'] && !(typeof data['vnetName'] === 'string' || data['vnetName'] instanceof String)) {
            throw new Error("Expected the field `vnetName` to be a primitive type in the JSON string but got " + data['vnetName']);
        }
        // ensure the json data is a string
        if (data['vnetResourceGroupName'] && !(typeof data['vnetResourceGroupName'] === 'string' || data['vnetResourceGroupName'] instanceof String)) {
            throw new Error("Expected the field `vnetResourceGroupName` to be a primitive type in the JSON string but got " + data['vnetResourceGroupName']);
        }
        // ensure the json data is a string
        if (data['vnetSubnetName'] && !(typeof data['vnetSubnetName'] === 'string' || data['vnetSubnetName'] instanceof String)) {
            throw new Error("Expected the field `vnetSubnetName` to be a primitive type in the JSON string but got " + data['vnetSubnetName']);
        }
        if (data['workerPools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['workerPools'])) {
                throw new Error("Expected the field `workerPools` to be an array in the JSON data but got " + data['workerPools']);
            }
            // validate the optional field `workerPools` (array)
            for (const item of data['workerPools']) {
                DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner.validateJSON(item);
            };
        }

        return true;
    }


}

DeploymentLocationsHostingEnvironmentsInner.RequiredProperties = ["location", "name", "virtualNetwork", "workerPools"];

/**
 * List of comma separated strings describing which VM sizes are allowed for front-ends.
 * @member {String} allowedMultiSizes
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['allowedMultiSizes'] = undefined;

/**
 * List of comma separated strings describing which VM sizes are allowed for workers.
 * @member {String} allowedWorkerSizes
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['allowedWorkerSizes'] = undefined;

/**
 * API Management Account associated with the App Service Environment.
 * @member {String} apiManagementAccountId
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['apiManagementAccountId'] = undefined;

/**
 * Custom settings for changing the behavior of the App Service Environment.
 * @member {Array.<module:model/DeploymentLocationsHostingEnvironmentsInnerClusterSettingsInner>} clusterSettings
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['clusterSettings'] = undefined;

/**
 * Edition of the metadata database for the App Service Environment, e.g. \"Standard\".
 * @member {String} databaseEdition
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['databaseEdition'] = undefined;

/**
 * Service objective of the metadata database for the App Service Environment, e.g. \"S0\".
 * @member {String} databaseServiceObjective
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['databaseServiceObjective'] = undefined;

/**
 * Default Scale Factor for FrontEnds.
 * @member {Number} defaultFrontEndScaleFactor
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['defaultFrontEndScaleFactor'] = undefined;

/**
 * DNS suffix of the App Service Environment.
 * @member {String} dnsSuffix
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['dnsSuffix'] = undefined;

/**
 * True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available (most likely because NSG blocked the incoming traffic).
 * @member {Boolean} dynamicCacheEnabled
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['dynamicCacheEnabled'] = undefined;

/**
 * Current total, used, and available worker capacities.
 * @member {Array.<module:model/DeploymentLocationsHostingEnvironmentsInnerEnvironmentCapacitiesInner>} environmentCapacities
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['environmentCapacities'] = undefined;

/**
 * True/false indicating whether the App Service Environment is healthy.
 * @member {Boolean} environmentIsHealthy
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['environmentIsHealthy'] = undefined;

/**
 * Detailed message about with results of the last check of the App Service Environment.
 * @member {String} environmentStatus
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['environmentStatus'] = undefined;

/**
 * Scale factor for front-ends.
 * @member {Number} frontEndScaleFactor
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['frontEndScaleFactor'] = undefined;

/**
 * Flag that displays whether an ASE has linux workers or not
 * @member {Boolean} hasLinuxWorkers
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['hasLinuxWorkers'] = undefined;

/**
 * Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
 * @member {module:model/DeploymentLocationsHostingEnvironmentsInner.InternalLoadBalancingModeEnum} internalLoadBalancingMode
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['internalLoadBalancingMode'] = undefined;

/**
 * Number of IP SSL addresses reserved for the App Service Environment.
 * @member {Number} ipsslAddressCount
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['ipsslAddressCount'] = undefined;

/**
 * Last deployment action on the App Service Environment.
 * @member {String} lastAction
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['lastAction'] = undefined;

/**
 * Result of the last deployment action on the App Service Environment.
 * @member {String} lastActionResult
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['lastActionResult'] = undefined;

/**
 * Location of the App Service Environment, e.g. \"West US\".
 * @member {String} location
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['location'] = undefined;

/**
 * Maximum number of VMs in the App Service Environment.
 * @member {Number} maximumNumberOfMachines
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['maximumNumberOfMachines'] = undefined;

/**
 * Number of front-end instances.
 * @member {Number} multiRoleCount
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['multiRoleCount'] = undefined;

/**
 * Front-end VM size, e.g. \"Medium\", \"Large\".
 * @member {String} multiSize
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['multiSize'] = undefined;

/**
 * Name of the App Service Environment.
 * @member {String} name
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['name'] = undefined;

/**
 * Access control list for controlling traffic to the App Service Environment.
 * @member {Array.<module:model/DeploymentLocationsHostingEnvironmentsInnerNetworkAccessControlListInner>} networkAccessControlList
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['networkAccessControlList'] = undefined;

/**
 * Provisioning state of the App Service Environment.
 * @member {module:model/DeploymentLocationsHostingEnvironmentsInner.ProvisioningStateEnum} provisioningState
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['provisioningState'] = undefined;

/**
 * Resource group of the App Service Environment.
 * @member {String} resourceGroup
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['resourceGroup'] = undefined;

/**
 * Key Vault ID for ILB App Service Environment default SSL certificate
 * @member {String} sslCertKeyVaultId
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['sslCertKeyVaultId'] = undefined;

/**
 * Key Vault Secret Name for ILB App Service Environment default SSL certificate
 * @member {String} sslCertKeyVaultSecretName
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['sslCertKeyVaultSecretName'] = undefined;

/**
 * Current status of the App Service Environment.
 * @member {module:model/DeploymentLocationsHostingEnvironmentsInner.StatusEnum} status
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['status'] = undefined;

/**
 * Subscription of the App Service Environment.
 * @member {String} subscriptionId
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['subscriptionId'] = undefined;

/**
 * <code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available  (most likely because NSG blocked the incoming traffic).
 * @member {Boolean} suspended
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['suspended'] = undefined;

/**
 * Number of upgrade domains of the App Service Environment.
 * @member {Number} upgradeDomains
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['upgradeDomains'] = undefined;

/**
 * User added ip ranges to whitelist on ASE db
 * @member {Array.<String>} userWhitelistedIpRanges
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['userWhitelistedIpRanges'] = undefined;

/**
 * Description of IP SSL mapping for the App Service Environment.
 * @member {Array.<module:model/DeploymentLocationsHostingEnvironmentsInnerVipMappingsInner>} vipMappings
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['vipMappings'] = undefined;

/**
 * @member {module:model/DeploymentLocationsHostingEnvironmentsInnerVirtualNetwork} virtualNetwork
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['virtualNetwork'] = undefined;

/**
 * Name of the Virtual Network for the App Service Environment.
 * @member {String} vnetName
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['vnetName'] = undefined;

/**
 * Resource group of the Virtual Network.
 * @member {String} vnetResourceGroupName
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['vnetResourceGroupName'] = undefined;

/**
 * Subnet of the Virtual Network.
 * @member {String} vnetSubnetName
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['vnetSubnetName'] = undefined;

/**
 * Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.
 * @member {Array.<module:model/DeploymentLocationsHostingEnvironmentsInnerWorkerPoolsInner>} workerPools
 */
DeploymentLocationsHostingEnvironmentsInner.prototype['workerPools'] = undefined;





/**
 * Allowed values for the <code>internalLoadBalancingMode</code> property.
 * @enum {String}
 * @readonly
 */
DeploymentLocationsHostingEnvironmentsInner['InternalLoadBalancingModeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Web"
     * @const
     */
    "Web": "Web",

    /**
     * value: "Publishing"
     * @const
     */
    "Publishing": "Publishing"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
DeploymentLocationsHostingEnvironmentsInner['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "InProgress"
     * @const
     */
    "InProgress": "InProgress",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DeploymentLocationsHostingEnvironmentsInner['StatusEnum'] = {

    /**
     * value: "Preparing"
     * @const
     */
    "Preparing": "Preparing",

    /**
     * value: "Ready"
     * @const
     */
    "Ready": "Ready",

    /**
     * value: "Scaling"
     * @const
     */
    "Scaling": "Scaling",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting"
};



export default DeploymentLocationsHostingEnvironmentsInner;

