/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentLocations_hostingEnvironments_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentLocations_hostingEnvironments_inner::OAIDeploymentLocations_hostingEnvironments_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentLocations_hostingEnvironments_inner::OAIDeploymentLocations_hostingEnvironments_inner() {
    this->initializeModel();
}

OAIDeploymentLocations_hostingEnvironments_inner::~OAIDeploymentLocations_hostingEnvironments_inner() {}

void OAIDeploymentLocations_hostingEnvironments_inner::initializeModel() {

    m_allowed_multi_sizes_isSet = false;
    m_allowed_multi_sizes_isValid = false;

    m_allowed_worker_sizes_isSet = false;
    m_allowed_worker_sizes_isValid = false;

    m_api_management_account_id_isSet = false;
    m_api_management_account_id_isValid = false;

    m_cluster_settings_isSet = false;
    m_cluster_settings_isValid = false;

    m_database_edition_isSet = false;
    m_database_edition_isValid = false;

    m_database_service_objective_isSet = false;
    m_database_service_objective_isValid = false;

    m_default_front_end_scale_factor_isSet = false;
    m_default_front_end_scale_factor_isValid = false;

    m_dns_suffix_isSet = false;
    m_dns_suffix_isValid = false;

    m_dynamic_cache_enabled_isSet = false;
    m_dynamic_cache_enabled_isValid = false;

    m_environment_capacities_isSet = false;
    m_environment_capacities_isValid = false;

    m_environment_is_healthy_isSet = false;
    m_environment_is_healthy_isValid = false;

    m_environment_status_isSet = false;
    m_environment_status_isValid = false;

    m_front_end_scale_factor_isSet = false;
    m_front_end_scale_factor_isValid = false;

    m_has_linux_workers_isSet = false;
    m_has_linux_workers_isValid = false;

    m_internal_load_balancing_mode_isSet = false;
    m_internal_load_balancing_mode_isValid = false;

    m_ipssl_address_count_isSet = false;
    m_ipssl_address_count_isValid = false;

    m_last_action_isSet = false;
    m_last_action_isValid = false;

    m_last_action_result_isSet = false;
    m_last_action_result_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_maximum_number_of_machines_isSet = false;
    m_maximum_number_of_machines_isValid = false;

    m_multi_role_count_isSet = false;
    m_multi_role_count_isValid = false;

    m_multi_size_isSet = false;
    m_multi_size_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_access_control_list_isSet = false;
    m_network_access_control_list_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_ssl_cert_key_vault_id_isSet = false;
    m_ssl_cert_key_vault_id_isValid = false;

    m_ssl_cert_key_vault_secret_name_isSet = false;
    m_ssl_cert_key_vault_secret_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_suspended_isSet = false;
    m_suspended_isValid = false;

    m_upgrade_domains_isSet = false;
    m_upgrade_domains_isValid = false;

    m_user_whitelisted_ip_ranges_isSet = false;
    m_user_whitelisted_ip_ranges_isValid = false;

    m_vip_mappings_isSet = false;
    m_vip_mappings_isValid = false;

    m_virtual_network_isSet = false;
    m_virtual_network_isValid = false;

    m_vnet_name_isSet = false;
    m_vnet_name_isValid = false;

    m_vnet_resource_group_name_isSet = false;
    m_vnet_resource_group_name_isValid = false;

    m_vnet_subnet_name_isSet = false;
    m_vnet_subnet_name_isValid = false;

    m_worker_pools_isSet = false;
    m_worker_pools_isValid = false;
}

void OAIDeploymentLocations_hostingEnvironments_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentLocations_hostingEnvironments_inner::fromJsonObject(QJsonObject json) {

    m_allowed_multi_sizes_isValid = ::OpenAPI::fromJsonValue(m_allowed_multi_sizes, json[QString("allowedMultiSizes")]);
    m_allowed_multi_sizes_isSet = !json[QString("allowedMultiSizes")].isNull() && m_allowed_multi_sizes_isValid;

    m_allowed_worker_sizes_isValid = ::OpenAPI::fromJsonValue(m_allowed_worker_sizes, json[QString("allowedWorkerSizes")]);
    m_allowed_worker_sizes_isSet = !json[QString("allowedWorkerSizes")].isNull() && m_allowed_worker_sizes_isValid;

    m_api_management_account_id_isValid = ::OpenAPI::fromJsonValue(m_api_management_account_id, json[QString("apiManagementAccountId")]);
    m_api_management_account_id_isSet = !json[QString("apiManagementAccountId")].isNull() && m_api_management_account_id_isValid;

    m_cluster_settings_isValid = ::OpenAPI::fromJsonValue(m_cluster_settings, json[QString("clusterSettings")]);
    m_cluster_settings_isSet = !json[QString("clusterSettings")].isNull() && m_cluster_settings_isValid;

    m_database_edition_isValid = ::OpenAPI::fromJsonValue(m_database_edition, json[QString("databaseEdition")]);
    m_database_edition_isSet = !json[QString("databaseEdition")].isNull() && m_database_edition_isValid;

    m_database_service_objective_isValid = ::OpenAPI::fromJsonValue(m_database_service_objective, json[QString("databaseServiceObjective")]);
    m_database_service_objective_isSet = !json[QString("databaseServiceObjective")].isNull() && m_database_service_objective_isValid;

    m_default_front_end_scale_factor_isValid = ::OpenAPI::fromJsonValue(m_default_front_end_scale_factor, json[QString("defaultFrontEndScaleFactor")]);
    m_default_front_end_scale_factor_isSet = !json[QString("defaultFrontEndScaleFactor")].isNull() && m_default_front_end_scale_factor_isValid;

    m_dns_suffix_isValid = ::OpenAPI::fromJsonValue(m_dns_suffix, json[QString("dnsSuffix")]);
    m_dns_suffix_isSet = !json[QString("dnsSuffix")].isNull() && m_dns_suffix_isValid;

    m_dynamic_cache_enabled_isValid = ::OpenAPI::fromJsonValue(m_dynamic_cache_enabled, json[QString("dynamicCacheEnabled")]);
    m_dynamic_cache_enabled_isSet = !json[QString("dynamicCacheEnabled")].isNull() && m_dynamic_cache_enabled_isValid;

    m_environment_capacities_isValid = ::OpenAPI::fromJsonValue(m_environment_capacities, json[QString("environmentCapacities")]);
    m_environment_capacities_isSet = !json[QString("environmentCapacities")].isNull() && m_environment_capacities_isValid;

    m_environment_is_healthy_isValid = ::OpenAPI::fromJsonValue(m_environment_is_healthy, json[QString("environmentIsHealthy")]);
    m_environment_is_healthy_isSet = !json[QString("environmentIsHealthy")].isNull() && m_environment_is_healthy_isValid;

    m_environment_status_isValid = ::OpenAPI::fromJsonValue(m_environment_status, json[QString("environmentStatus")]);
    m_environment_status_isSet = !json[QString("environmentStatus")].isNull() && m_environment_status_isValid;

    m_front_end_scale_factor_isValid = ::OpenAPI::fromJsonValue(m_front_end_scale_factor, json[QString("frontEndScaleFactor")]);
    m_front_end_scale_factor_isSet = !json[QString("frontEndScaleFactor")].isNull() && m_front_end_scale_factor_isValid;

    m_has_linux_workers_isValid = ::OpenAPI::fromJsonValue(m_has_linux_workers, json[QString("hasLinuxWorkers")]);
    m_has_linux_workers_isSet = !json[QString("hasLinuxWorkers")].isNull() && m_has_linux_workers_isValid;

    m_internal_load_balancing_mode_isValid = ::OpenAPI::fromJsonValue(m_internal_load_balancing_mode, json[QString("internalLoadBalancingMode")]);
    m_internal_load_balancing_mode_isSet = !json[QString("internalLoadBalancingMode")].isNull() && m_internal_load_balancing_mode_isValid;

    m_ipssl_address_count_isValid = ::OpenAPI::fromJsonValue(m_ipssl_address_count, json[QString("ipsslAddressCount")]);
    m_ipssl_address_count_isSet = !json[QString("ipsslAddressCount")].isNull() && m_ipssl_address_count_isValid;

    m_last_action_isValid = ::OpenAPI::fromJsonValue(m_last_action, json[QString("lastAction")]);
    m_last_action_isSet = !json[QString("lastAction")].isNull() && m_last_action_isValid;

    m_last_action_result_isValid = ::OpenAPI::fromJsonValue(m_last_action_result, json[QString("lastActionResult")]);
    m_last_action_result_isSet = !json[QString("lastActionResult")].isNull() && m_last_action_result_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_maximum_number_of_machines_isValid = ::OpenAPI::fromJsonValue(m_maximum_number_of_machines, json[QString("maximumNumberOfMachines")]);
    m_maximum_number_of_machines_isSet = !json[QString("maximumNumberOfMachines")].isNull() && m_maximum_number_of_machines_isValid;

    m_multi_role_count_isValid = ::OpenAPI::fromJsonValue(m_multi_role_count, json[QString("multiRoleCount")]);
    m_multi_role_count_isSet = !json[QString("multiRoleCount")].isNull() && m_multi_role_count_isValid;

    m_multi_size_isValid = ::OpenAPI::fromJsonValue(m_multi_size, json[QString("multiSize")]);
    m_multi_size_isSet = !json[QString("multiSize")].isNull() && m_multi_size_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_access_control_list_isValid = ::OpenAPI::fromJsonValue(m_network_access_control_list, json[QString("networkAccessControlList")]);
    m_network_access_control_list_isSet = !json[QString("networkAccessControlList")].isNull() && m_network_access_control_list_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_ssl_cert_key_vault_id_isValid = ::OpenAPI::fromJsonValue(m_ssl_cert_key_vault_id, json[QString("sslCertKeyVaultId")]);
    m_ssl_cert_key_vault_id_isSet = !json[QString("sslCertKeyVaultId")].isNull() && m_ssl_cert_key_vault_id_isValid;

    m_ssl_cert_key_vault_secret_name_isValid = ::OpenAPI::fromJsonValue(m_ssl_cert_key_vault_secret_name, json[QString("sslCertKeyVaultSecretName")]);
    m_ssl_cert_key_vault_secret_name_isSet = !json[QString("sslCertKeyVaultSecretName")].isNull() && m_ssl_cert_key_vault_secret_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_suspended_isValid = ::OpenAPI::fromJsonValue(m_suspended, json[QString("suspended")]);
    m_suspended_isSet = !json[QString("suspended")].isNull() && m_suspended_isValid;

    m_upgrade_domains_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domains, json[QString("upgradeDomains")]);
    m_upgrade_domains_isSet = !json[QString("upgradeDomains")].isNull() && m_upgrade_domains_isValid;

    m_user_whitelisted_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_user_whitelisted_ip_ranges, json[QString("userWhitelistedIpRanges")]);
    m_user_whitelisted_ip_ranges_isSet = !json[QString("userWhitelistedIpRanges")].isNull() && m_user_whitelisted_ip_ranges_isValid;

    m_vip_mappings_isValid = ::OpenAPI::fromJsonValue(m_vip_mappings, json[QString("vipMappings")]);
    m_vip_mappings_isSet = !json[QString("vipMappings")].isNull() && m_vip_mappings_isValid;

    m_virtual_network_isValid = ::OpenAPI::fromJsonValue(m_virtual_network, json[QString("virtualNetwork")]);
    m_virtual_network_isSet = !json[QString("virtualNetwork")].isNull() && m_virtual_network_isValid;

    m_vnet_name_isValid = ::OpenAPI::fromJsonValue(m_vnet_name, json[QString("vnetName")]);
    m_vnet_name_isSet = !json[QString("vnetName")].isNull() && m_vnet_name_isValid;

    m_vnet_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_vnet_resource_group_name, json[QString("vnetResourceGroupName")]);
    m_vnet_resource_group_name_isSet = !json[QString("vnetResourceGroupName")].isNull() && m_vnet_resource_group_name_isValid;

    m_vnet_subnet_name_isValid = ::OpenAPI::fromJsonValue(m_vnet_subnet_name, json[QString("vnetSubnetName")]);
    m_vnet_subnet_name_isSet = !json[QString("vnetSubnetName")].isNull() && m_vnet_subnet_name_isValid;

    m_worker_pools_isValid = ::OpenAPI::fromJsonValue(m_worker_pools, json[QString("workerPools")]);
    m_worker_pools_isSet = !json[QString("workerPools")].isNull() && m_worker_pools_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentLocations_hostingEnvironments_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_multi_sizes_isSet) {
        obj.insert(QString("allowedMultiSizes"), ::OpenAPI::toJsonValue(m_allowed_multi_sizes));
    }
    if (m_allowed_worker_sizes_isSet) {
        obj.insert(QString("allowedWorkerSizes"), ::OpenAPI::toJsonValue(m_allowed_worker_sizes));
    }
    if (m_api_management_account_id_isSet) {
        obj.insert(QString("apiManagementAccountId"), ::OpenAPI::toJsonValue(m_api_management_account_id));
    }
    if (m_cluster_settings.size() > 0) {
        obj.insert(QString("clusterSettings"), ::OpenAPI::toJsonValue(m_cluster_settings));
    }
    if (m_database_edition_isSet) {
        obj.insert(QString("databaseEdition"), ::OpenAPI::toJsonValue(m_database_edition));
    }
    if (m_database_service_objective_isSet) {
        obj.insert(QString("databaseServiceObjective"), ::OpenAPI::toJsonValue(m_database_service_objective));
    }
    if (m_default_front_end_scale_factor_isSet) {
        obj.insert(QString("defaultFrontEndScaleFactor"), ::OpenAPI::toJsonValue(m_default_front_end_scale_factor));
    }
    if (m_dns_suffix_isSet) {
        obj.insert(QString("dnsSuffix"), ::OpenAPI::toJsonValue(m_dns_suffix));
    }
    if (m_dynamic_cache_enabled_isSet) {
        obj.insert(QString("dynamicCacheEnabled"), ::OpenAPI::toJsonValue(m_dynamic_cache_enabled));
    }
    if (m_environment_capacities.size() > 0) {
        obj.insert(QString("environmentCapacities"), ::OpenAPI::toJsonValue(m_environment_capacities));
    }
    if (m_environment_is_healthy_isSet) {
        obj.insert(QString("environmentIsHealthy"), ::OpenAPI::toJsonValue(m_environment_is_healthy));
    }
    if (m_environment_status_isSet) {
        obj.insert(QString("environmentStatus"), ::OpenAPI::toJsonValue(m_environment_status));
    }
    if (m_front_end_scale_factor_isSet) {
        obj.insert(QString("frontEndScaleFactor"), ::OpenAPI::toJsonValue(m_front_end_scale_factor));
    }
    if (m_has_linux_workers_isSet) {
        obj.insert(QString("hasLinuxWorkers"), ::OpenAPI::toJsonValue(m_has_linux_workers));
    }
    if (m_internal_load_balancing_mode_isSet) {
        obj.insert(QString("internalLoadBalancingMode"), ::OpenAPI::toJsonValue(m_internal_load_balancing_mode));
    }
    if (m_ipssl_address_count_isSet) {
        obj.insert(QString("ipsslAddressCount"), ::OpenAPI::toJsonValue(m_ipssl_address_count));
    }
    if (m_last_action_isSet) {
        obj.insert(QString("lastAction"), ::OpenAPI::toJsonValue(m_last_action));
    }
    if (m_last_action_result_isSet) {
        obj.insert(QString("lastActionResult"), ::OpenAPI::toJsonValue(m_last_action_result));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_maximum_number_of_machines_isSet) {
        obj.insert(QString("maximumNumberOfMachines"), ::OpenAPI::toJsonValue(m_maximum_number_of_machines));
    }
    if (m_multi_role_count_isSet) {
        obj.insert(QString("multiRoleCount"), ::OpenAPI::toJsonValue(m_multi_role_count));
    }
    if (m_multi_size_isSet) {
        obj.insert(QString("multiSize"), ::OpenAPI::toJsonValue(m_multi_size));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_access_control_list.size() > 0) {
        obj.insert(QString("networkAccessControlList"), ::OpenAPI::toJsonValue(m_network_access_control_list));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_ssl_cert_key_vault_id_isSet) {
        obj.insert(QString("sslCertKeyVaultId"), ::OpenAPI::toJsonValue(m_ssl_cert_key_vault_id));
    }
    if (m_ssl_cert_key_vault_secret_name_isSet) {
        obj.insert(QString("sslCertKeyVaultSecretName"), ::OpenAPI::toJsonValue(m_ssl_cert_key_vault_secret_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_suspended_isSet) {
        obj.insert(QString("suspended"), ::OpenAPI::toJsonValue(m_suspended));
    }
    if (m_upgrade_domains_isSet) {
        obj.insert(QString("upgradeDomains"), ::OpenAPI::toJsonValue(m_upgrade_domains));
    }
    if (m_user_whitelisted_ip_ranges.size() > 0) {
        obj.insert(QString("userWhitelistedIpRanges"), ::OpenAPI::toJsonValue(m_user_whitelisted_ip_ranges));
    }
    if (m_vip_mappings.size() > 0) {
        obj.insert(QString("vipMappings"), ::OpenAPI::toJsonValue(m_vip_mappings));
    }
    if (m_virtual_network.isSet()) {
        obj.insert(QString("virtualNetwork"), ::OpenAPI::toJsonValue(m_virtual_network));
    }
    if (m_vnet_name_isSet) {
        obj.insert(QString("vnetName"), ::OpenAPI::toJsonValue(m_vnet_name));
    }
    if (m_vnet_resource_group_name_isSet) {
        obj.insert(QString("vnetResourceGroupName"), ::OpenAPI::toJsonValue(m_vnet_resource_group_name));
    }
    if (m_vnet_subnet_name_isSet) {
        obj.insert(QString("vnetSubnetName"), ::OpenAPI::toJsonValue(m_vnet_subnet_name));
    }
    if (m_worker_pools.size() > 0) {
        obj.insert(QString("workerPools"), ::OpenAPI::toJsonValue(m_worker_pools));
    }
    return obj;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getAllowedMultiSizes() const {
    return m_allowed_multi_sizes;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setAllowedMultiSizes(const QString &allowed_multi_sizes) {
    m_allowed_multi_sizes = allowed_multi_sizes;
    m_allowed_multi_sizes_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_allowed_multi_sizes_Set() const{
    return m_allowed_multi_sizes_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_allowed_multi_sizes_Valid() const{
    return m_allowed_multi_sizes_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getAllowedWorkerSizes() const {
    return m_allowed_worker_sizes;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setAllowedWorkerSizes(const QString &allowed_worker_sizes) {
    m_allowed_worker_sizes = allowed_worker_sizes;
    m_allowed_worker_sizes_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_allowed_worker_sizes_Set() const{
    return m_allowed_worker_sizes_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_allowed_worker_sizes_Valid() const{
    return m_allowed_worker_sizes_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getApiManagementAccountId() const {
    return m_api_management_account_id;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setApiManagementAccountId(const QString &api_management_account_id) {
    m_api_management_account_id = api_management_account_id;
    m_api_management_account_id_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_api_management_account_id_Set() const{
    return m_api_management_account_id_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_api_management_account_id_Valid() const{
    return m_api_management_account_id_isValid;
}

QList<OAIDeploymentLocations_hostingEnvironments_inner_clusterSettings_inner> OAIDeploymentLocations_hostingEnvironments_inner::getClusterSettings() const {
    return m_cluster_settings;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setClusterSettings(const QList<OAIDeploymentLocations_hostingEnvironments_inner_clusterSettings_inner> &cluster_settings) {
    m_cluster_settings = cluster_settings;
    m_cluster_settings_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_cluster_settings_Set() const{
    return m_cluster_settings_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_cluster_settings_Valid() const{
    return m_cluster_settings_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getDatabaseEdition() const {
    return m_database_edition;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setDatabaseEdition(const QString &database_edition) {
    m_database_edition = database_edition;
    m_database_edition_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_database_edition_Set() const{
    return m_database_edition_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_database_edition_Valid() const{
    return m_database_edition_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getDatabaseServiceObjective() const {
    return m_database_service_objective;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setDatabaseServiceObjective(const QString &database_service_objective) {
    m_database_service_objective = database_service_objective;
    m_database_service_objective_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_database_service_objective_Set() const{
    return m_database_service_objective_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_database_service_objective_Valid() const{
    return m_database_service_objective_isValid;
}

qint32 OAIDeploymentLocations_hostingEnvironments_inner::getDefaultFrontEndScaleFactor() const {
    return m_default_front_end_scale_factor;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setDefaultFrontEndScaleFactor(const qint32 &default_front_end_scale_factor) {
    m_default_front_end_scale_factor = default_front_end_scale_factor;
    m_default_front_end_scale_factor_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_default_front_end_scale_factor_Set() const{
    return m_default_front_end_scale_factor_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_default_front_end_scale_factor_Valid() const{
    return m_default_front_end_scale_factor_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getDnsSuffix() const {
    return m_dns_suffix;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setDnsSuffix(const QString &dns_suffix) {
    m_dns_suffix = dns_suffix;
    m_dns_suffix_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_dns_suffix_Set() const{
    return m_dns_suffix_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_dns_suffix_Valid() const{
    return m_dns_suffix_isValid;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::isDynamicCacheEnabled() const {
    return m_dynamic_cache_enabled;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setDynamicCacheEnabled(const bool &dynamic_cache_enabled) {
    m_dynamic_cache_enabled = dynamic_cache_enabled;
    m_dynamic_cache_enabled_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_dynamic_cache_enabled_Set() const{
    return m_dynamic_cache_enabled_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_dynamic_cache_enabled_Valid() const{
    return m_dynamic_cache_enabled_isValid;
}

QList<OAIDeploymentLocations_hostingEnvironments_inner_environmentCapacities_inner> OAIDeploymentLocations_hostingEnvironments_inner::getEnvironmentCapacities() const {
    return m_environment_capacities;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setEnvironmentCapacities(const QList<OAIDeploymentLocations_hostingEnvironments_inner_environmentCapacities_inner> &environment_capacities) {
    m_environment_capacities = environment_capacities;
    m_environment_capacities_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_environment_capacities_Set() const{
    return m_environment_capacities_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_environment_capacities_Valid() const{
    return m_environment_capacities_isValid;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::isEnvironmentIsHealthy() const {
    return m_environment_is_healthy;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setEnvironmentIsHealthy(const bool &environment_is_healthy) {
    m_environment_is_healthy = environment_is_healthy;
    m_environment_is_healthy_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_environment_is_healthy_Set() const{
    return m_environment_is_healthy_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_environment_is_healthy_Valid() const{
    return m_environment_is_healthy_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getEnvironmentStatus() const {
    return m_environment_status;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setEnvironmentStatus(const QString &environment_status) {
    m_environment_status = environment_status;
    m_environment_status_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_environment_status_Set() const{
    return m_environment_status_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_environment_status_Valid() const{
    return m_environment_status_isValid;
}

qint32 OAIDeploymentLocations_hostingEnvironments_inner::getFrontEndScaleFactor() const {
    return m_front_end_scale_factor;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setFrontEndScaleFactor(const qint32 &front_end_scale_factor) {
    m_front_end_scale_factor = front_end_scale_factor;
    m_front_end_scale_factor_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_front_end_scale_factor_Set() const{
    return m_front_end_scale_factor_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_front_end_scale_factor_Valid() const{
    return m_front_end_scale_factor_isValid;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::isHasLinuxWorkers() const {
    return m_has_linux_workers;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setHasLinuxWorkers(const bool &has_linux_workers) {
    m_has_linux_workers = has_linux_workers;
    m_has_linux_workers_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_has_linux_workers_Set() const{
    return m_has_linux_workers_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_has_linux_workers_Valid() const{
    return m_has_linux_workers_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getInternalLoadBalancingMode() const {
    return m_internal_load_balancing_mode;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setInternalLoadBalancingMode(const QString &internal_load_balancing_mode) {
    m_internal_load_balancing_mode = internal_load_balancing_mode;
    m_internal_load_balancing_mode_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_internal_load_balancing_mode_Set() const{
    return m_internal_load_balancing_mode_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_internal_load_balancing_mode_Valid() const{
    return m_internal_load_balancing_mode_isValid;
}

qint32 OAIDeploymentLocations_hostingEnvironments_inner::getIpsslAddressCount() const {
    return m_ipssl_address_count;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setIpsslAddressCount(const qint32 &ipssl_address_count) {
    m_ipssl_address_count = ipssl_address_count;
    m_ipssl_address_count_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_ipssl_address_count_Set() const{
    return m_ipssl_address_count_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_ipssl_address_count_Valid() const{
    return m_ipssl_address_count_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getLastAction() const {
    return m_last_action;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setLastAction(const QString &last_action) {
    m_last_action = last_action;
    m_last_action_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_last_action_Set() const{
    return m_last_action_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_last_action_Valid() const{
    return m_last_action_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getLastActionResult() const {
    return m_last_action_result;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setLastActionResult(const QString &last_action_result) {
    m_last_action_result = last_action_result;
    m_last_action_result_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_last_action_result_Set() const{
    return m_last_action_result_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_last_action_result_Valid() const{
    return m_last_action_result_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getLocation() const {
    return m_location;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_location_Valid() const{
    return m_location_isValid;
}

qint32 OAIDeploymentLocations_hostingEnvironments_inner::getMaximumNumberOfMachines() const {
    return m_maximum_number_of_machines;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setMaximumNumberOfMachines(const qint32 &maximum_number_of_machines) {
    m_maximum_number_of_machines = maximum_number_of_machines;
    m_maximum_number_of_machines_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_maximum_number_of_machines_Set() const{
    return m_maximum_number_of_machines_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_maximum_number_of_machines_Valid() const{
    return m_maximum_number_of_machines_isValid;
}

qint32 OAIDeploymentLocations_hostingEnvironments_inner::getMultiRoleCount() const {
    return m_multi_role_count;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setMultiRoleCount(const qint32 &multi_role_count) {
    m_multi_role_count = multi_role_count;
    m_multi_role_count_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_multi_role_count_Set() const{
    return m_multi_role_count_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_multi_role_count_Valid() const{
    return m_multi_role_count_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getMultiSize() const {
    return m_multi_size;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setMultiSize(const QString &multi_size) {
    m_multi_size = multi_size;
    m_multi_size_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_multi_size_Set() const{
    return m_multi_size_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_multi_size_Valid() const{
    return m_multi_size_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getName() const {
    return m_name;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIDeploymentLocations_hostingEnvironments_inner_networkAccessControlList_inner> OAIDeploymentLocations_hostingEnvironments_inner::getNetworkAccessControlList() const {
    return m_network_access_control_list;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setNetworkAccessControlList(const QList<OAIDeploymentLocations_hostingEnvironments_inner_networkAccessControlList_inner> &network_access_control_list) {
    m_network_access_control_list = network_access_control_list;
    m_network_access_control_list_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_network_access_control_list_Set() const{
    return m_network_access_control_list_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_network_access_control_list_Valid() const{
    return m_network_access_control_list_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getResourceGroup() const {
    return m_resource_group;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getSslCertKeyVaultId() const {
    return m_ssl_cert_key_vault_id;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setSslCertKeyVaultId(const QString &ssl_cert_key_vault_id) {
    m_ssl_cert_key_vault_id = ssl_cert_key_vault_id;
    m_ssl_cert_key_vault_id_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_ssl_cert_key_vault_id_Set() const{
    return m_ssl_cert_key_vault_id_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_ssl_cert_key_vault_id_Valid() const{
    return m_ssl_cert_key_vault_id_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getSslCertKeyVaultSecretName() const {
    return m_ssl_cert_key_vault_secret_name;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setSslCertKeyVaultSecretName(const QString &ssl_cert_key_vault_secret_name) {
    m_ssl_cert_key_vault_secret_name = ssl_cert_key_vault_secret_name;
    m_ssl_cert_key_vault_secret_name_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_ssl_cert_key_vault_secret_name_Set() const{
    return m_ssl_cert_key_vault_secret_name_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_ssl_cert_key_vault_secret_name_Valid() const{
    return m_ssl_cert_key_vault_secret_name_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getStatus() const {
    return m_status;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::isSuspended() const {
    return m_suspended;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setSuspended(const bool &suspended) {
    m_suspended = suspended;
    m_suspended_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_suspended_Set() const{
    return m_suspended_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_suspended_Valid() const{
    return m_suspended_isValid;
}

qint32 OAIDeploymentLocations_hostingEnvironments_inner::getUpgradeDomains() const {
    return m_upgrade_domains;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setUpgradeDomains(const qint32 &upgrade_domains) {
    m_upgrade_domains = upgrade_domains;
    m_upgrade_domains_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_upgrade_domains_Set() const{
    return m_upgrade_domains_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_upgrade_domains_Valid() const{
    return m_upgrade_domains_isValid;
}

QList<QString> OAIDeploymentLocations_hostingEnvironments_inner::getUserWhitelistedIpRanges() const {
    return m_user_whitelisted_ip_ranges;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setUserWhitelistedIpRanges(const QList<QString> &user_whitelisted_ip_ranges) {
    m_user_whitelisted_ip_ranges = user_whitelisted_ip_ranges;
    m_user_whitelisted_ip_ranges_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_user_whitelisted_ip_ranges_Set() const{
    return m_user_whitelisted_ip_ranges_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_user_whitelisted_ip_ranges_Valid() const{
    return m_user_whitelisted_ip_ranges_isValid;
}

QList<OAIDeploymentLocations_hostingEnvironments_inner_vipMappings_inner> OAIDeploymentLocations_hostingEnvironments_inner::getVipMappings() const {
    return m_vip_mappings;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setVipMappings(const QList<OAIDeploymentLocations_hostingEnvironments_inner_vipMappings_inner> &vip_mappings) {
    m_vip_mappings = vip_mappings;
    m_vip_mappings_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_vip_mappings_Set() const{
    return m_vip_mappings_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_vip_mappings_Valid() const{
    return m_vip_mappings_isValid;
}

OAIDeploymentLocations_hostingEnvironments_inner_virtualNetwork OAIDeploymentLocations_hostingEnvironments_inner::getVirtualNetwork() const {
    return m_virtual_network;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setVirtualNetwork(const OAIDeploymentLocations_hostingEnvironments_inner_virtualNetwork &virtual_network) {
    m_virtual_network = virtual_network;
    m_virtual_network_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_virtual_network_Set() const{
    return m_virtual_network_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_virtual_network_Valid() const{
    return m_virtual_network_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getVnetName() const {
    return m_vnet_name;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setVnetName(const QString &vnet_name) {
    m_vnet_name = vnet_name;
    m_vnet_name_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_vnet_name_Set() const{
    return m_vnet_name_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_vnet_name_Valid() const{
    return m_vnet_name_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getVnetResourceGroupName() const {
    return m_vnet_resource_group_name;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setVnetResourceGroupName(const QString &vnet_resource_group_name) {
    m_vnet_resource_group_name = vnet_resource_group_name;
    m_vnet_resource_group_name_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_vnet_resource_group_name_Set() const{
    return m_vnet_resource_group_name_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_vnet_resource_group_name_Valid() const{
    return m_vnet_resource_group_name_isValid;
}

QString OAIDeploymentLocations_hostingEnvironments_inner::getVnetSubnetName() const {
    return m_vnet_subnet_name;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setVnetSubnetName(const QString &vnet_subnet_name) {
    m_vnet_subnet_name = vnet_subnet_name;
    m_vnet_subnet_name_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_vnet_subnet_name_Set() const{
    return m_vnet_subnet_name_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_vnet_subnet_name_Valid() const{
    return m_vnet_subnet_name_isValid;
}

QList<OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner> OAIDeploymentLocations_hostingEnvironments_inner::getWorkerPools() const {
    return m_worker_pools;
}
void OAIDeploymentLocations_hostingEnvironments_inner::setWorkerPools(const QList<OAIDeploymentLocations_hostingEnvironments_inner_workerPools_inner> &worker_pools) {
    m_worker_pools = worker_pools;
    m_worker_pools_isSet = true;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_worker_pools_Set() const{
    return m_worker_pools_isSet;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::is_worker_pools_Valid() const{
    return m_worker_pools_isValid;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_multi_sizes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_worker_sizes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_management_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_service_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_front_end_scale_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_cache_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_capacities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_is_healthy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_front_end_scale_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_linux_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_load_balancing_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipssl_address_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_action_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_number_of_machines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_role_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_access_control_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_cert_key_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_cert_key_vault_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_whitelisted_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vip_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnet_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnet_subnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentLocations_hostingEnvironments_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_name_isValid && m_virtual_network_isValid && m_worker_pools_isValid && true;
}

} // namespace OpenAPI
