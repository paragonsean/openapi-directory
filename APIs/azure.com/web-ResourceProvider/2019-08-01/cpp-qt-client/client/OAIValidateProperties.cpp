/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidateProperties::OAIValidateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidateProperties::OAIValidateProperties() {
    this->initializeModel();
}

OAIValidateProperties::~OAIValidateProperties() {}

void OAIValidateProperties::initializeModel() {

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_container_image_platform_isSet = false;
    m_container_image_platform_isValid = false;

    m_container_image_repository_isSet = false;
    m_container_image_repository_isValid = false;

    m_container_image_tag_isSet = false;
    m_container_image_tag_isValid = false;

    m_container_registry_base_url_isSet = false;
    m_container_registry_base_url_isValid = false;

    m_container_registry_password_isSet = false;
    m_container_registry_password_isValid = false;

    m_container_registry_username_isSet = false;
    m_container_registry_username_isValid = false;

    m_hosting_environment_isSet = false;
    m_hosting_environment_isValid = false;

    m_is_spot_isSet = false;
    m_is_spot_isValid = false;

    m_is_xenon_isSet = false;
    m_is_xenon_isValid = false;

    m_need_linux_workers_isSet = false;
    m_need_linux_workers_isValid = false;

    m_server_farm_id_isSet = false;
    m_server_farm_id_isValid = false;

    m_sku_name_isSet = false;
    m_sku_name_isValid = false;
}

void OAIValidateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidateProperties::fromJsonObject(QJsonObject json) {

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_container_image_platform_isValid = ::OpenAPI::fromJsonValue(m_container_image_platform, json[QString("containerImagePlatform")]);
    m_container_image_platform_isSet = !json[QString("containerImagePlatform")].isNull() && m_container_image_platform_isValid;

    m_container_image_repository_isValid = ::OpenAPI::fromJsonValue(m_container_image_repository, json[QString("containerImageRepository")]);
    m_container_image_repository_isSet = !json[QString("containerImageRepository")].isNull() && m_container_image_repository_isValid;

    m_container_image_tag_isValid = ::OpenAPI::fromJsonValue(m_container_image_tag, json[QString("containerImageTag")]);
    m_container_image_tag_isSet = !json[QString("containerImageTag")].isNull() && m_container_image_tag_isValid;

    m_container_registry_base_url_isValid = ::OpenAPI::fromJsonValue(m_container_registry_base_url, json[QString("containerRegistryBaseUrl")]);
    m_container_registry_base_url_isSet = !json[QString("containerRegistryBaseUrl")].isNull() && m_container_registry_base_url_isValid;

    m_container_registry_password_isValid = ::OpenAPI::fromJsonValue(m_container_registry_password, json[QString("containerRegistryPassword")]);
    m_container_registry_password_isSet = !json[QString("containerRegistryPassword")].isNull() && m_container_registry_password_isValid;

    m_container_registry_username_isValid = ::OpenAPI::fromJsonValue(m_container_registry_username, json[QString("containerRegistryUsername")]);
    m_container_registry_username_isSet = !json[QString("containerRegistryUsername")].isNull() && m_container_registry_username_isValid;

    m_hosting_environment_isValid = ::OpenAPI::fromJsonValue(m_hosting_environment, json[QString("hostingEnvironment")]);
    m_hosting_environment_isSet = !json[QString("hostingEnvironment")].isNull() && m_hosting_environment_isValid;

    m_is_spot_isValid = ::OpenAPI::fromJsonValue(m_is_spot, json[QString("isSpot")]);
    m_is_spot_isSet = !json[QString("isSpot")].isNull() && m_is_spot_isValid;

    m_is_xenon_isValid = ::OpenAPI::fromJsonValue(m_is_xenon, json[QString("isXenon")]);
    m_is_xenon_isSet = !json[QString("isXenon")].isNull() && m_is_xenon_isValid;

    m_need_linux_workers_isValid = ::OpenAPI::fromJsonValue(m_need_linux_workers, json[QString("needLinuxWorkers")]);
    m_need_linux_workers_isSet = !json[QString("needLinuxWorkers")].isNull() && m_need_linux_workers_isValid;

    m_server_farm_id_isValid = ::OpenAPI::fromJsonValue(m_server_farm_id, json[QString("serverFarmId")]);
    m_server_farm_id_isSet = !json[QString("serverFarmId")].isNull() && m_server_farm_id_isValid;

    m_sku_name_isValid = ::OpenAPI::fromJsonValue(m_sku_name, json[QString("skuName")]);
    m_sku_name_isSet = !json[QString("skuName")].isNull() && m_sku_name_isValid;
}

QString OAIValidateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_container_image_platform_isSet) {
        obj.insert(QString("containerImagePlatform"), ::OpenAPI::toJsonValue(m_container_image_platform));
    }
    if (m_container_image_repository_isSet) {
        obj.insert(QString("containerImageRepository"), ::OpenAPI::toJsonValue(m_container_image_repository));
    }
    if (m_container_image_tag_isSet) {
        obj.insert(QString("containerImageTag"), ::OpenAPI::toJsonValue(m_container_image_tag));
    }
    if (m_container_registry_base_url_isSet) {
        obj.insert(QString("containerRegistryBaseUrl"), ::OpenAPI::toJsonValue(m_container_registry_base_url));
    }
    if (m_container_registry_password_isSet) {
        obj.insert(QString("containerRegistryPassword"), ::OpenAPI::toJsonValue(m_container_registry_password));
    }
    if (m_container_registry_username_isSet) {
        obj.insert(QString("containerRegistryUsername"), ::OpenAPI::toJsonValue(m_container_registry_username));
    }
    if (m_hosting_environment_isSet) {
        obj.insert(QString("hostingEnvironment"), ::OpenAPI::toJsonValue(m_hosting_environment));
    }
    if (m_is_spot_isSet) {
        obj.insert(QString("isSpot"), ::OpenAPI::toJsonValue(m_is_spot));
    }
    if (m_is_xenon_isSet) {
        obj.insert(QString("isXenon"), ::OpenAPI::toJsonValue(m_is_xenon));
    }
    if (m_need_linux_workers_isSet) {
        obj.insert(QString("needLinuxWorkers"), ::OpenAPI::toJsonValue(m_need_linux_workers));
    }
    if (m_server_farm_id_isSet) {
        obj.insert(QString("serverFarmId"), ::OpenAPI::toJsonValue(m_server_farm_id));
    }
    if (m_sku_name_isSet) {
        obj.insert(QString("skuName"), ::OpenAPI::toJsonValue(m_sku_name));
    }
    return obj;
}

qint32 OAIValidateProperties::getCapacity() const {
    return m_capacity;
}
void OAIValidateProperties::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIValidateProperties::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIValidateProperties::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QString OAIValidateProperties::getContainerImagePlatform() const {
    return m_container_image_platform;
}
void OAIValidateProperties::setContainerImagePlatform(const QString &container_image_platform) {
    m_container_image_platform = container_image_platform;
    m_container_image_platform_isSet = true;
}

bool OAIValidateProperties::is_container_image_platform_Set() const{
    return m_container_image_platform_isSet;
}

bool OAIValidateProperties::is_container_image_platform_Valid() const{
    return m_container_image_platform_isValid;
}

QString OAIValidateProperties::getContainerImageRepository() const {
    return m_container_image_repository;
}
void OAIValidateProperties::setContainerImageRepository(const QString &container_image_repository) {
    m_container_image_repository = container_image_repository;
    m_container_image_repository_isSet = true;
}

bool OAIValidateProperties::is_container_image_repository_Set() const{
    return m_container_image_repository_isSet;
}

bool OAIValidateProperties::is_container_image_repository_Valid() const{
    return m_container_image_repository_isValid;
}

QString OAIValidateProperties::getContainerImageTag() const {
    return m_container_image_tag;
}
void OAIValidateProperties::setContainerImageTag(const QString &container_image_tag) {
    m_container_image_tag = container_image_tag;
    m_container_image_tag_isSet = true;
}

bool OAIValidateProperties::is_container_image_tag_Set() const{
    return m_container_image_tag_isSet;
}

bool OAIValidateProperties::is_container_image_tag_Valid() const{
    return m_container_image_tag_isValid;
}

QString OAIValidateProperties::getContainerRegistryBaseUrl() const {
    return m_container_registry_base_url;
}
void OAIValidateProperties::setContainerRegistryBaseUrl(const QString &container_registry_base_url) {
    m_container_registry_base_url = container_registry_base_url;
    m_container_registry_base_url_isSet = true;
}

bool OAIValidateProperties::is_container_registry_base_url_Set() const{
    return m_container_registry_base_url_isSet;
}

bool OAIValidateProperties::is_container_registry_base_url_Valid() const{
    return m_container_registry_base_url_isValid;
}

QString OAIValidateProperties::getContainerRegistryPassword() const {
    return m_container_registry_password;
}
void OAIValidateProperties::setContainerRegistryPassword(const QString &container_registry_password) {
    m_container_registry_password = container_registry_password;
    m_container_registry_password_isSet = true;
}

bool OAIValidateProperties::is_container_registry_password_Set() const{
    return m_container_registry_password_isSet;
}

bool OAIValidateProperties::is_container_registry_password_Valid() const{
    return m_container_registry_password_isValid;
}

QString OAIValidateProperties::getContainerRegistryUsername() const {
    return m_container_registry_username;
}
void OAIValidateProperties::setContainerRegistryUsername(const QString &container_registry_username) {
    m_container_registry_username = container_registry_username;
    m_container_registry_username_isSet = true;
}

bool OAIValidateProperties::is_container_registry_username_Set() const{
    return m_container_registry_username_isSet;
}

bool OAIValidateProperties::is_container_registry_username_Valid() const{
    return m_container_registry_username_isValid;
}

QString OAIValidateProperties::getHostingEnvironment() const {
    return m_hosting_environment;
}
void OAIValidateProperties::setHostingEnvironment(const QString &hosting_environment) {
    m_hosting_environment = hosting_environment;
    m_hosting_environment_isSet = true;
}

bool OAIValidateProperties::is_hosting_environment_Set() const{
    return m_hosting_environment_isSet;
}

bool OAIValidateProperties::is_hosting_environment_Valid() const{
    return m_hosting_environment_isValid;
}

bool OAIValidateProperties::isIsSpot() const {
    return m_is_spot;
}
void OAIValidateProperties::setIsSpot(const bool &is_spot) {
    m_is_spot = is_spot;
    m_is_spot_isSet = true;
}

bool OAIValidateProperties::is_is_spot_Set() const{
    return m_is_spot_isSet;
}

bool OAIValidateProperties::is_is_spot_Valid() const{
    return m_is_spot_isValid;
}

bool OAIValidateProperties::isIsXenon() const {
    return m_is_xenon;
}
void OAIValidateProperties::setIsXenon(const bool &is_xenon) {
    m_is_xenon = is_xenon;
    m_is_xenon_isSet = true;
}

bool OAIValidateProperties::is_is_xenon_Set() const{
    return m_is_xenon_isSet;
}

bool OAIValidateProperties::is_is_xenon_Valid() const{
    return m_is_xenon_isValid;
}

bool OAIValidateProperties::isNeedLinuxWorkers() const {
    return m_need_linux_workers;
}
void OAIValidateProperties::setNeedLinuxWorkers(const bool &need_linux_workers) {
    m_need_linux_workers = need_linux_workers;
    m_need_linux_workers_isSet = true;
}

bool OAIValidateProperties::is_need_linux_workers_Set() const{
    return m_need_linux_workers_isSet;
}

bool OAIValidateProperties::is_need_linux_workers_Valid() const{
    return m_need_linux_workers_isValid;
}

QString OAIValidateProperties::getServerFarmId() const {
    return m_server_farm_id;
}
void OAIValidateProperties::setServerFarmId(const QString &server_farm_id) {
    m_server_farm_id = server_farm_id;
    m_server_farm_id_isSet = true;
}

bool OAIValidateProperties::is_server_farm_id_Set() const{
    return m_server_farm_id_isSet;
}

bool OAIValidateProperties::is_server_farm_id_Valid() const{
    return m_server_farm_id_isValid;
}

QString OAIValidateProperties::getSkuName() const {
    return m_sku_name;
}
void OAIValidateProperties::setSkuName(const QString &sku_name) {
    m_sku_name = sku_name;
    m_sku_name_isSet = true;
}

bool OAIValidateProperties::is_sku_name_Set() const{
    return m_sku_name_isSet;
}

bool OAIValidateProperties::is_sku_name_Valid() const{
    return m_sku_name_isValid;
}

bool OAIValidateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_image_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_image_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosting_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_spot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_xenon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_linux_workers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_farm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
