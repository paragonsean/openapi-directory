/**
 *  API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillingMeterCollection.h"
#include "OAICsmMoveResourceEnvelope.h"
#include "OAIDeploymentLocations.h"
#include "OAIGeoRegionCollection.h"
#include "OAIGetPublishingUser_200_response.h"
#include "OAIGetPublishingUser_default_response.h"
#include "OAIListSiteIdentifiersAssignedToHostName_200_response.h"
#include "OAIListSiteIdentifiersAssignedToHostName_request.h"
#include "OAIPremierAddOnOfferCollection.h"
#include "OAIResourceNameAvailability.h"
#include "OAIResourceNameAvailabilityRequest.h"
#include "OAISkuInfos.h"
#include "OAISourceControl.h"
#include "OAISourceControlCollection.h"
#include "OAIValidateRequest.h"
#include "OAIValidateResponse.h"
#include "OAIVnetParameters.h"
#include "OAIVnetValidationFailureDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIResourceNameAvailabilityRequest [required]
    */
    virtual void checkNameAvailability(const QString &subscription_id, const QString &api_version, const OAIResourceNameAvailabilityRequest &request);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void getPublishingUser(const QString &api_version);

    /**
    * @param[in]  source_control_type QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getSourceControl(const QString &source_control_type, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getSubscriptionDeploymentLocations(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  billing_location QString [optional]
    * @param[in]  os_type QString [optional]
    */
    virtual void listBillingMeters(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &billing_location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &os_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  sku QString [optional]
    * @param[in]  linux_workers_enabled bool [optional]
    * @param[in]  xenon_workers_enabled bool [optional]
    * @param[in]  linux_dynamic_workers_enabled bool [optional]
    */
    virtual void listGeoRegions(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &sku = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &linux_workers_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &xenon_workers_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &linux_dynamic_workers_enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void listPremierAddOnOffers(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  name_identifier OAIListSiteIdentifiersAssignedToHostName_request [required]
    */
    virtual void listSiteIdentifiersAssignedToHostName(const QString &subscription_id, const QString &api_version, const OAIListSiteIdentifiersAssignedToHostName_request &name_identifier);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void listSkus(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void listSourceControls(const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  move_resource_envelope OAICsmMoveResourceEnvelope [required]
    */
    virtual void move(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const OAICsmMoveResourceEnvelope &move_resource_envelope);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  user_details OAIGetPublishingUser_200_response [required]
    */
    virtual void updatePublishingUser(const QString &api_version, const OAIGetPublishingUser_200_response &user_details);

    /**
    * @param[in]  source_control_type QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request_message OAISourceControl [required]
    */
    virtual void updateSourceControl(const QString &source_control_type, const QString &api_version, const OAISourceControl &request_message);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  validate_request OAIValidateRequest [required]
    */
    virtual void validate(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const OAIValidateRequest &validate_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  move_resource_envelope OAICsmMoveResourceEnvelope [required]
    */
    virtual void validateMove(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const OAICsmMoveResourceEnvelope &move_resource_envelope);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIVnetParameters [required]
    */
    virtual void verifyHostingEnvironmentVnet(const QString &subscription_id, const QString &api_version, const OAIVnetParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void getPublishingUserCallback(OAIHttpRequestWorker *worker);
    void getSourceControlCallback(OAIHttpRequestWorker *worker);
    void getSubscriptionDeploymentLocationsCallback(OAIHttpRequestWorker *worker);
    void listBillingMetersCallback(OAIHttpRequestWorker *worker);
    void listGeoRegionsCallback(OAIHttpRequestWorker *worker);
    void listPremierAddOnOffersCallback(OAIHttpRequestWorker *worker);
    void listSiteIdentifiersAssignedToHostNameCallback(OAIHttpRequestWorker *worker);
    void listSkusCallback(OAIHttpRequestWorker *worker);
    void listSourceControlsCallback(OAIHttpRequestWorker *worker);
    void moveCallback(OAIHttpRequestWorker *worker);
    void updatePublishingUserCallback(OAIHttpRequestWorker *worker);
    void updateSourceControlCallback(OAIHttpRequestWorker *worker);
    void validateCallback(OAIHttpRequestWorker *worker);
    void validateMoveCallback(OAIHttpRequestWorker *worker);
    void verifyHostingEnvironmentVnetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkNameAvailabilitySignal(OAIResourceNameAvailability summary);
    void getPublishingUserSignal(OAIGetPublishingUser_200_response summary);
    void getSourceControlSignal(OAISourceControl summary);
    void getSubscriptionDeploymentLocationsSignal(OAIDeploymentLocations summary);
    void listBillingMetersSignal(OAIBillingMeterCollection summary);
    void listGeoRegionsSignal(OAIGeoRegionCollection summary);
    void listPremierAddOnOffersSignal(OAIPremierAddOnOfferCollection summary);
    void listSiteIdentifiersAssignedToHostNameSignal(OAIListSiteIdentifiersAssignedToHostName_200_response summary);
    void listSkusSignal(OAISkuInfos summary);
    void listSourceControlsSignal(OAISourceControlCollection summary);
    void moveSignal();
    void updatePublishingUserSignal(OAIGetPublishingUser_200_response summary);
    void updateSourceControlSignal(OAISourceControl summary);
    void validateSignal(OAIValidateResponse summary);
    void validateMoveSignal();
    void verifyHostingEnvironmentVnetSignal(OAIVnetValidationFailureDetails summary);


    void checkNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIResourceNameAvailability summary);
    void getPublishingUserSignalFull(OAIHttpRequestWorker *worker, OAIGetPublishingUser_200_response summary);
    void getSourceControlSignalFull(OAIHttpRequestWorker *worker, OAISourceControl summary);
    void getSubscriptionDeploymentLocationsSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentLocations summary);
    void listBillingMetersSignalFull(OAIHttpRequestWorker *worker, OAIBillingMeterCollection summary);
    void listGeoRegionsSignalFull(OAIHttpRequestWorker *worker, OAIGeoRegionCollection summary);
    void listPremierAddOnOffersSignalFull(OAIHttpRequestWorker *worker, OAIPremierAddOnOfferCollection summary);
    void listSiteIdentifiersAssignedToHostNameSignalFull(OAIHttpRequestWorker *worker, OAIListSiteIdentifiersAssignedToHostName_200_response summary);
    void listSkusSignalFull(OAIHttpRequestWorker *worker, OAISkuInfos summary);
    void listSourceControlsSignalFull(OAIHttpRequestWorker *worker, OAISourceControlCollection summary);
    void moveSignalFull(OAIHttpRequestWorker *worker);
    void updatePublishingUserSignalFull(OAIHttpRequestWorker *worker, OAIGetPublishingUser_200_response summary);
    void updateSourceControlSignalFull(OAIHttpRequestWorker *worker, OAISourceControl summary);
    void validateSignalFull(OAIHttpRequestWorker *worker, OAIValidateResponse summary);
    void validateMoveSignalFull(OAIHttpRequestWorker *worker);
    void verifyHostingEnvironmentVnetSignalFull(OAIHttpRequestWorker *worker, OAIVnetValidationFailureDetails summary);

    Q_DECL_DEPRECATED_X("Use checkNameAvailabilitySignalError() instead")
    void checkNameAvailabilitySignalE(OAIResourceNameAvailability summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkNameAvailabilitySignalError(OAIResourceNameAvailability summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublishingUserSignalError() instead")
    void getPublishingUserSignalE(OAIGetPublishingUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublishingUserSignalError(OAIGetPublishingUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceControlSignalError() instead")
    void getSourceControlSignalE(OAISourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceControlSignalError(OAISourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionDeploymentLocationsSignalError() instead")
    void getSubscriptionDeploymentLocationsSignalE(OAIDeploymentLocations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionDeploymentLocationsSignalError(OAIDeploymentLocations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBillingMetersSignalError() instead")
    void listBillingMetersSignalE(OAIBillingMeterCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBillingMetersSignalError(OAIBillingMeterCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGeoRegionsSignalError() instead")
    void listGeoRegionsSignalE(OAIGeoRegionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGeoRegionsSignalError(OAIGeoRegionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPremierAddOnOffersSignalError() instead")
    void listPremierAddOnOffersSignalE(OAIPremierAddOnOfferCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPremierAddOnOffersSignalError(OAIPremierAddOnOfferCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSiteIdentifiersAssignedToHostNameSignalError() instead")
    void listSiteIdentifiersAssignedToHostNameSignalE(OAIListSiteIdentifiersAssignedToHostName_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSiteIdentifiersAssignedToHostNameSignalError(OAIListSiteIdentifiersAssignedToHostName_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSkusSignalError() instead")
    void listSkusSignalE(OAISkuInfos summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSkusSignalError(OAISkuInfos summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceControlsSignalError() instead")
    void listSourceControlsSignalE(OAISourceControlCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceControlsSignalError(OAISourceControlCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveSignalError() instead")
    void moveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePublishingUserSignalError() instead")
    void updatePublishingUserSignalE(OAIGetPublishingUser_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePublishingUserSignalError(OAIGetPublishingUser_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSourceControlSignalError() instead")
    void updateSourceControlSignalE(OAISourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSourceControlSignalError(OAISourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateSignalError() instead")
    void validateSignalE(OAIValidateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateSignalError(OAIValidateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateMoveSignalError() instead")
    void validateMoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void validateMoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyHostingEnvironmentVnetSignalError() instead")
    void verifyHostingEnvironmentVnetSignalE(OAIVnetValidationFailureDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyHostingEnvironmentVnetSignalError(OAIVnetValidationFailureDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkNameAvailabilitySignalErrorFull() instead")
    void checkNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublishingUserSignalErrorFull() instead")
    void getPublishingUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublishingUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceControlSignalErrorFull() instead")
    void getSourceControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubscriptionDeploymentLocationsSignalErrorFull() instead")
    void getSubscriptionDeploymentLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubscriptionDeploymentLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBillingMetersSignalErrorFull() instead")
    void listBillingMetersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBillingMetersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGeoRegionsSignalErrorFull() instead")
    void listGeoRegionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGeoRegionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPremierAddOnOffersSignalErrorFull() instead")
    void listPremierAddOnOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPremierAddOnOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSiteIdentifiersAssignedToHostNameSignalErrorFull() instead")
    void listSiteIdentifiersAssignedToHostNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSiteIdentifiersAssignedToHostNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSkusSignalErrorFull() instead")
    void listSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSourceControlsSignalErrorFull() instead")
    void listSourceControlsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSourceControlsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveSignalErrorFull() instead")
    void moveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePublishingUserSignalErrorFull() instead")
    void updatePublishingUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePublishingUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSourceControlSignalErrorFull() instead")
    void updateSourceControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSourceControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateSignalErrorFull() instead")
    void validateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateMoveSignalErrorFull() instead")
    void validateMoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateMoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyHostingEnvironmentVnetSignalErrorFull() instead")
    void verifyHostingEnvironmentVnetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyHostingEnvironmentVnetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
