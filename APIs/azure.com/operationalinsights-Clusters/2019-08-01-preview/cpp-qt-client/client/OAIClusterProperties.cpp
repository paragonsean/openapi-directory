/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterProperties::OAIClusterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterProperties::OAIClusterProperties() {
    this->initializeModel();
}

OAIClusterProperties::~OAIClusterProperties() {}

void OAIClusterProperties::initializeModel() {

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_encryption_key_uri_isSet = false;
    m_encryption_key_uri_isValid = false;

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIClusterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterProperties::fromJsonObject(QJsonObject json) {

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_encryption_key_uri_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_uri, json[QString("encryptionKeyUri")]);
    m_encryption_key_uri_isSet = !json[QString("encryptionKeyUri")].isNull() && m_encryption_key_uri_isValid;

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIClusterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_encryption_key_uri_isSet) {
        obj.insert(QString("encryptionKeyUri"), ::OpenAPI::toJsonValue(m_encryption_key_uri));
    }
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIClusterProperties::getClusterId() const {
    return m_cluster_id;
}
void OAIClusterProperties::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIClusterProperties::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIClusterProperties::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QString OAIClusterProperties::getEncryptionKeyUri() const {
    return m_encryption_key_uri;
}
void OAIClusterProperties::setEncryptionKeyUri(const QString &encryption_key_uri) {
    m_encryption_key_uri = encryption_key_uri;
    m_encryption_key_uri_isSet = true;
}

bool OAIClusterProperties::is_encryption_key_uri_Set() const{
    return m_encryption_key_uri_isSet;
}

bool OAIClusterProperties::is_encryption_key_uri_Valid() const{
    return m_encryption_key_uri_isValid;
}

QString OAIClusterProperties::getNextLink() const {
    return m_next_link;
}
void OAIClusterProperties::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIClusterProperties::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIClusterProperties::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QString OAIClusterProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIClusterProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIClusterProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIClusterProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIClusterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
