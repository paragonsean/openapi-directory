/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClustersApi_H
#define OAI_OAIClustersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICluster.h"
#include "OAIClusterListResult.h"
#include "OAIClusterPatch.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClustersApi : public QObject {
    Q_OBJECT

public:
    OAIClustersApi(const int timeOut = 0);
    ~OAIClustersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICluster [required]
    */
    virtual void clustersCreateOrUpdate(const QString &resource_group_name, const QString &cluster_name, const QString &api_version, const QString &subscription_id, const OAICluster &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void clustersDelete(const QString &resource_group_name, const QString &cluster_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void clustersGet(const QString &resource_group_name, const QString &cluster_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void clustersList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void clustersListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIClusterPatch [required]
    */
    virtual void clustersUpdate(const QString &resource_group_name, const QString &cluster_name, const QString &api_version, const QString &subscription_id, const OAIClusterPatch &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clustersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void clustersDeleteCallback(OAIHttpRequestWorker *worker);
    void clustersGetCallback(OAIHttpRequestWorker *worker);
    void clustersListCallback(OAIHttpRequestWorker *worker);
    void clustersListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void clustersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clustersCreateOrUpdateSignal(OAICluster summary);
    void clustersDeleteSignal();
    void clustersGetSignal(OAICluster summary);
    void clustersListSignal(OAIClusterListResult summary);
    void clustersListByResourceGroupSignal(OAIClusterListResult summary);
    void clustersUpdateSignal(OAICluster summary);


    void clustersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void clustersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void clustersGetSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void clustersListSignalFull(OAIHttpRequestWorker *worker, OAIClusterListResult summary);
    void clustersListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIClusterListResult summary);
    void clustersUpdateSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);

    Q_DECL_DEPRECATED_X("Use clustersCreateOrUpdateSignalError() instead")
    void clustersCreateOrUpdateSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersCreateOrUpdateSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clustersDeleteSignalError() instead")
    void clustersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clustersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clustersGetSignalError() instead")
    void clustersGetSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersGetSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clustersListSignalError() instead")
    void clustersListSignalE(OAIClusterListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersListSignalError(OAIClusterListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clustersListByResourceGroupSignalError() instead")
    void clustersListByResourceGroupSignalE(OAIClusterListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersListByResourceGroupSignalError(OAIClusterListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clustersUpdateSignalError() instead")
    void clustersUpdateSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersUpdateSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clustersCreateOrUpdateSignalErrorFull() instead")
    void clustersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clustersDeleteSignalErrorFull() instead")
    void clustersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clustersGetSignalErrorFull() instead")
    void clustersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clustersListSignalErrorFull() instead")
    void clustersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clustersListByResourceGroupSignalErrorFull() instead")
    void clustersListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clustersUpdateSignalErrorFull() instead")
    void clustersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clustersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
