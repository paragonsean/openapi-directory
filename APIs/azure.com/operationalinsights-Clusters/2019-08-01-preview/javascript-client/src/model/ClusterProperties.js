/**
 * Azure Log Analytics
 * Azure Log Analytics API reference
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClusterProperties model module.
 * @module model/ClusterProperties
 * @version 2019-08-01-preview
 */
class ClusterProperties {
    /**
     * Constructs a new <code>ClusterProperties</code>.
     * Cluster properties.
     * @alias module:model/ClusterProperties
     */
    constructor() { 
        
        ClusterProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClusterProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterProperties} obj Optional instance to populate.
     * @return {module:model/ClusterProperties} The populated <code>ClusterProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterProperties();

            if (data.hasOwnProperty('clusterId')) {
                obj['clusterId'] = ApiClient.convertToType(data['clusterId'], 'String');
            }
            if (data.hasOwnProperty('encryptionKeyUri')) {
                obj['encryptionKeyUri'] = ApiClient.convertToType(data['encryptionKeyUri'], 'String');
            }
            if (data.hasOwnProperty('nextLink')) {
                obj['nextLink'] = ApiClient.convertToType(data['nextLink'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterId'] && !(typeof data['clusterId'] === 'string' || data['clusterId'] instanceof String)) {
            throw new Error("Expected the field `clusterId` to be a primitive type in the JSON string but got " + data['clusterId']);
        }
        // ensure the json data is a string
        if (data['encryptionKeyUri'] && !(typeof data['encryptionKeyUri'] === 'string' || data['encryptionKeyUri'] instanceof String)) {
            throw new Error("Expected the field `encryptionKeyUri` to be a primitive type in the JSON string but got " + data['encryptionKeyUri']);
        }
        // ensure the json data is a string
        if (data['nextLink'] && !(typeof data['nextLink'] === 'string' || data['nextLink'] instanceof String)) {
            throw new Error("Expected the field `nextLink` to be a primitive type in the JSON string but got " + data['nextLink']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * The ID associated with the cluster.
 * @member {String} clusterId
 */
ClusterProperties.prototype['clusterId'] = undefined;

/**
 * The Key Vault key or certificate path associated with the Log Analytics cluster.
 * @member {String} encryptionKeyUri
 */
ClusterProperties.prototype['encryptionKeyUri'] = undefined;

/**
 * The link used to get the next page of recommendations.
 * @member {String} nextLink
 */
ClusterProperties.prototype['nextLink'] = undefined;

/**
 * The provisioning state of the cluster.
 * @member {module:model/ClusterProperties.ProvisioningStateEnum} provisioningState
 */
ClusterProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ClusterProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "ProvisioningAccount"
     * @const
     */
    "ProvisioningAccount": "ProvisioningAccount"
};



export default ClusterProperties;

