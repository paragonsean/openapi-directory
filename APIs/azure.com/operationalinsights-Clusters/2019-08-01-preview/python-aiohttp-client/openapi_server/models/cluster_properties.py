# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_id: str=None, encryption_key_uri: str=None, next_link: str=None, provisioning_state: str=None):
        """ClusterProperties - a model defined in OpenAPI

        :param cluster_id: The cluster_id of this ClusterProperties.
        :param encryption_key_uri: The encryption_key_uri of this ClusterProperties.
        :param next_link: The next_link of this ClusterProperties.
        :param provisioning_state: The provisioning_state of this ClusterProperties.
        """
        self.openapi_types = {
            'cluster_id': str,
            'encryption_key_uri': str,
            'next_link': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'cluster_id': 'clusterId',
            'encryption_key_uri': 'encryptionKeyUri',
            'next_link': 'nextLink',
            'provisioning_state': 'provisioningState'
        }

        self._cluster_id = cluster_id
        self._encryption_key_uri = encryption_key_uri
        self._next_link = next_link
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterProperties of this ClusterProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ClusterProperties.

        The ID associated with the cluster.

        :return: The cluster_id of this ClusterProperties.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ClusterProperties.

        The ID associated with the cluster.

        :param cluster_id: The cluster_id of this ClusterProperties.
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def encryption_key_uri(self):
        """Gets the encryption_key_uri of this ClusterProperties.

        The Key Vault key or certificate path associated with the Log Analytics cluster.

        :return: The encryption_key_uri of this ClusterProperties.
        :rtype: str
        """
        return self._encryption_key_uri

    @encryption_key_uri.setter
    def encryption_key_uri(self, encryption_key_uri):
        """Sets the encryption_key_uri of this ClusterProperties.

        The Key Vault key or certificate path associated with the Log Analytics cluster.

        :param encryption_key_uri: The encryption_key_uri of this ClusterProperties.
        :type encryption_key_uri: str
        """

        self._encryption_key_uri = encryption_key_uri

    @property
    def next_link(self):
        """Gets the next_link of this ClusterProperties.

        The link used to get the next page of recommendations.

        :return: The next_link of this ClusterProperties.
        :rtype: str
        """
        return self._next_link

    @next_link.setter
    def next_link(self, next_link):
        """Sets the next_link of this ClusterProperties.

        The link used to get the next page of recommendations.

        :param next_link: The next_link of this ClusterProperties.
        :type next_link: str
        """

        self._next_link = next_link

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ClusterProperties.

        The provisioning state of the cluster.

        :return: The provisioning_state of this ClusterProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ClusterProperties.

        The provisioning state of the cluster.

        :param provisioning_state: The provisioning_state of this ClusterProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Succeeded", "Failed", "Canceled", "Deleting", "ProvisioningAccount"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
