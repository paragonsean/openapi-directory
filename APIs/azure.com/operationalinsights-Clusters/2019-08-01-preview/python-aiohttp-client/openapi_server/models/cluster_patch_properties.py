# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterPatchProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_key_uri: str=None):
        """ClusterPatchProperties - a model defined in OpenAPI

        :param encryption_key_uri: The encryption_key_uri of this ClusterPatchProperties.
        """
        self.openapi_types = {
            'encryption_key_uri': str
        }

        self.attribute_map = {
            'encryption_key_uri': 'encryptionKeyUri'
        }

        self._encryption_key_uri = encryption_key_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterPatchProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterPatchProperties of this ClusterPatchProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_key_uri(self):
        """Gets the encryption_key_uri of this ClusterPatchProperties.

        The Key Vault key or certificate path associated with the Log Analytics cluster.

        :return: The encryption_key_uri of this ClusterPatchProperties.
        :rtype: str
        """
        return self._encryption_key_uri

    @encryption_key_uri.setter
    def encryption_key_uri(self, encryption_key_uri):
        """Sets the encryption_key_uri of this ClusterPatchProperties.

        The Key Vault key or certificate path associated with the Log Analytics cluster.

        :param encryption_key_uri: The encryption_key_uri of this ClusterPatchProperties.
        :type encryption_key_uri: str
        """

        self._encryption_key_uri = encryption_key_uri
