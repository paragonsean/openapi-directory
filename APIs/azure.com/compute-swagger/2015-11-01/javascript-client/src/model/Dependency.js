/**
 * ComputeManagementConvenienceClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicDependency from './BasicDependency';

/**
 * The Dependency model module.
 * @module model/Dependency
 * @version 2015-11-01
 */
class Dependency {
    /**
     * Constructs a new <code>Dependency</code>.
     * Deployment dependency information.
     * @alias module:model/Dependency
     */
    constructor() { 
        
        Dependency.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dependency</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dependency} obj Optional instance to populate.
     * @return {module:model/Dependency} The populated <code>Dependency</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dependency();

            if (data.hasOwnProperty('dependsOn')) {
                obj['dependsOn'] = ApiClient.convertToType(data['dependsOn'], [BasicDependency]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dependency</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dependency</code>.
     */
    static validateJSON(data) {
        if (data['dependsOn']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dependsOn'])) {
                throw new Error("Expected the field `dependsOn` to be an array in the JSON data but got " + data['dependsOn']);
            }
            // validate the optional field `dependsOn` (array)
            for (const item of data['dependsOn']) {
                BasicDependency.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }

        return true;
    }


}



/**
 * Gets the list of dependencies.
 * @member {Array.<module:model/BasicDependency>} dependsOn
 */
Dependency.prototype['dependsOn'] = undefined;

/**
 * Gets or sets the ID of the dependency.
 * @member {String} id
 */
Dependency.prototype['id'] = undefined;

/**
 * Gets or sets the dependency resource name.
 * @member {String} resourceName
 */
Dependency.prototype['resourceName'] = undefined;

/**
 * Gets or sets the dependency resource type.
 * @member {String} resourceType
 */
Dependency.prototype['resourceType'] = undefined;






export default Dependency;

