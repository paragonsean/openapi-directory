/**
 * ComputeManagementConvenienceClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dependency from './Dependency';
import ParametersLink from './ParametersLink';
import Provider from './Provider';
import TemplateLink from './TemplateLink';

/**
 * The DeploymentPropertiesExtended model module.
 * @module model/DeploymentPropertiesExtended
 * @version 2015-11-01
 */
class DeploymentPropertiesExtended {
    /**
     * Constructs a new <code>DeploymentPropertiesExtended</code>.
     * Deployment properties with additional details.
     * @alias module:model/DeploymentPropertiesExtended
     */
    constructor() { 
        
        DeploymentPropertiesExtended.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeploymentPropertiesExtended</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeploymentPropertiesExtended} obj Optional instance to populate.
     * @return {module:model/DeploymentPropertiesExtended} The populated <code>DeploymentPropertiesExtended</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeploymentPropertiesExtended();

            if (data.hasOwnProperty('correlationId')) {
                obj['correlationId'] = ApiClient.convertToType(data['correlationId'], 'String');
            }
            if (data.hasOwnProperty('dependencies')) {
                obj['dependencies'] = ApiClient.convertToType(data['dependencies'], [Dependency]);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], Object);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('parametersLink')) {
                obj['parametersLink'] = ParametersLink.constructFromObject(data['parametersLink']);
            }
            if (data.hasOwnProperty('providers')) {
                obj['providers'] = ApiClient.convertToType(data['providers'], [Provider]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], Object);
            }
            if (data.hasOwnProperty('templateLink')) {
                obj['templateLink'] = TemplateLink.constructFromObject(data['templateLink']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeploymentPropertiesExtended</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeploymentPropertiesExtended</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['correlationId'] && !(typeof data['correlationId'] === 'string' || data['correlationId'] instanceof String)) {
            throw new Error("Expected the field `correlationId` to be a primitive type in the JSON string but got " + data['correlationId']);
        }
        if (data['dependencies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dependencies'])) {
                throw new Error("Expected the field `dependencies` to be an array in the JSON data but got " + data['dependencies']);
            }
            // validate the optional field `dependencies` (array)
            for (const item of data['dependencies']) {
                Dependency.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // validate the optional field `parametersLink`
        if (data['parametersLink']) { // data not null
          ParametersLink.validateJSON(data['parametersLink']);
        }
        if (data['providers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['providers'])) {
                throw new Error("Expected the field `providers` to be an array in the JSON data but got " + data['providers']);
            }
            // validate the optional field `providers` (array)
            for (const item of data['providers']) {
                Provider.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `templateLink`
        if (data['templateLink']) { // data not null
          TemplateLink.validateJSON(data['templateLink']);
        }

        return true;
    }


}



/**
 * Gets or sets the correlation ID of the deployment.
 * @member {String} correlationId
 */
DeploymentPropertiesExtended.prototype['correlationId'] = undefined;

/**
 * Gets the list of deployment dependencies.
 * @member {Array.<module:model/Dependency>} dependencies
 */
DeploymentPropertiesExtended.prototype['dependencies'] = undefined;

/**
 * Gets or sets the deployment mode.
 * @member {module:model/DeploymentPropertiesExtended.ModeEnum} mode
 */
DeploymentPropertiesExtended.prototype['mode'] = undefined;

/**
 * Gets or sets key/value pairs that represent deployment output.
 * @member {Object} outputs
 */
DeploymentPropertiesExtended.prototype['outputs'] = undefined;

/**
 * Deployment parameters. Use only one of Parameters or ParametersLink.
 * @member {Object} parameters
 */
DeploymentPropertiesExtended.prototype['parameters'] = undefined;

/**
 * @member {module:model/ParametersLink} parametersLink
 */
DeploymentPropertiesExtended.prototype['parametersLink'] = undefined;

/**
 * Gets the list of resource providers needed for the deployment.
 * @member {Array.<module:model/Provider>} providers
 */
DeploymentPropertiesExtended.prototype['providers'] = undefined;

/**
 * Gets or sets the state of the provisioning.
 * @member {String} provisioningState
 */
DeploymentPropertiesExtended.prototype['provisioningState'] = undefined;

/**
 * Gets or sets the template content. Use only one of Template or TemplateLink.
 * @member {Object} template
 */
DeploymentPropertiesExtended.prototype['template'] = undefined;

/**
 * @member {module:model/TemplateLink} templateLink
 */
DeploymentPropertiesExtended.prototype['templateLink'] = undefined;

/**
 * Gets or sets the timestamp of the template deployment.
 * @member {Date} timestamp
 */
DeploymentPropertiesExtended.prototype['timestamp'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
DeploymentPropertiesExtended['ModeEnum'] = {

    /**
     * value: "Incremental"
     * @const
     */
    "Incremental": "Incremental",

    /**
     * value: "Complete"
     * @const
     */
    "Complete": "Complete"
};



export default DeploymentPropertiesExtended;

