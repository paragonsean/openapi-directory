/**
 * ComputeManagementConvenienceClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeploymentParameters from './DeploymentParameters';
import TemplateLink from './TemplateLink';

/**
 * The DeploymentProperties model module.
 * @module model/DeploymentProperties
 * @version 2015-11-01
 */
class DeploymentProperties {
    /**
     * Constructs a new <code>DeploymentProperties</code>.
     * Deployment properties.
     * @alias module:model/DeploymentProperties
     * @param mode {module:model/DeploymentProperties.ModeEnum} Gets or sets the deployment mode.
     * @param templateLink {module:model/TemplateLink} 
     */
    constructor(mode, templateLink) { 
        
        DeploymentProperties.initialize(this, mode, templateLink);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mode, templateLink) { 
        obj['mode'] = mode;
        obj['templateLink'] = templateLink;
    }

    /**
     * Constructs a <code>DeploymentProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeploymentProperties} obj Optional instance to populate.
     * @return {module:model/DeploymentProperties} The populated <code>DeploymentProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeploymentProperties();

            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = DeploymentParameters.constructFromObject(data['parameters']);
            }
            if (data.hasOwnProperty('templateLink')) {
                obj['templateLink'] = TemplateLink.constructFromObject(data['templateLink']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeploymentProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeploymentProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeploymentProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // validate the optional field `parameters`
        if (data['parameters']) { // data not null
          DeploymentParameters.validateJSON(data['parameters']);
        }
        // validate the optional field `templateLink`
        if (data['templateLink']) { // data not null
          TemplateLink.validateJSON(data['templateLink']);
        }

        return true;
    }


}

DeploymentProperties.RequiredProperties = ["mode", "templateLink"];

/**
 * Gets or sets the deployment mode.
 * @member {module:model/DeploymentProperties.ModeEnum} mode
 */
DeploymentProperties.prototype['mode'] = undefined;

/**
 * @member {module:model/DeploymentParameters} parameters
 */
DeploymentProperties.prototype['parameters'] = undefined;

/**
 * @member {module:model/TemplateLink} templateLink
 */
DeploymentProperties.prototype['templateLink'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
DeploymentProperties['ModeEnum'] = {

    /**
     * value: "Incremental"
     * @const
     */
    "Incremental": "Incremental"
};



export default DeploymentProperties;

