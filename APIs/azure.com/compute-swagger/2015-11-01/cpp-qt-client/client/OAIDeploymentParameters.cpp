/**
 * ComputeManagementConvenienceClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentParameters::OAIDeploymentParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentParameters::OAIDeploymentParameters() {
    this->initializeModel();
}

OAIDeploymentParameters::~OAIDeploymentParameters() {}

void OAIDeploymentParameters::initializeModel() {

    m_admin_password_isSet = false;
    m_admin_password_isValid = false;

    m_admin_username_isSet = false;
    m_admin_username_isValid = false;

    m_dns_label_prefix_isSet = false;
    m_dns_label_prefix_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;
}

void OAIDeploymentParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentParameters::fromJsonObject(QJsonObject json) {

    m_admin_password_isValid = ::OpenAPI::fromJsonValue(m_admin_password, json[QString("adminPassword")]);
    m_admin_password_isSet = !json[QString("adminPassword")].isNull() && m_admin_password_isValid;

    m_admin_username_isValid = ::OpenAPI::fromJsonValue(m_admin_username, json[QString("adminUsername")]);
    m_admin_username_isSet = !json[QString("adminUsername")].isNull() && m_admin_username_isValid;

    m_dns_label_prefix_isValid = ::OpenAPI::fromJsonValue(m_dns_label_prefix, json[QString("dnsLabelPrefix")]);
    m_dns_label_prefix_isSet = !json[QString("dnsLabelPrefix")].isNull() && m_dns_label_prefix_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;
}

QString OAIDeploymentParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_password.isSet()) {
        obj.insert(QString("adminPassword"), ::OpenAPI::toJsonValue(m_admin_password));
    }
    if (m_admin_username.isSet()) {
        obj.insert(QString("adminUsername"), ::OpenAPI::toJsonValue(m_admin_username));
    }
    if (m_dns_label_prefix.isSet()) {
        obj.insert(QString("dnsLabelPrefix"), ::OpenAPI::toJsonValue(m_dns_label_prefix));
    }
    if (m_os_version.isSet()) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    return obj;
}

OAIDeploymentParameters_adminPassword OAIDeploymentParameters::getAdminPassword() const {
    return m_admin_password;
}
void OAIDeploymentParameters::setAdminPassword(const OAIDeploymentParameters_adminPassword &admin_password) {
    m_admin_password = admin_password;
    m_admin_password_isSet = true;
}

bool OAIDeploymentParameters::is_admin_password_Set() const{
    return m_admin_password_isSet;
}

bool OAIDeploymentParameters::is_admin_password_Valid() const{
    return m_admin_password_isValid;
}

OAIDeploymentParameters_adminUsername OAIDeploymentParameters::getAdminUsername() const {
    return m_admin_username;
}
void OAIDeploymentParameters::setAdminUsername(const OAIDeploymentParameters_adminUsername &admin_username) {
    m_admin_username = admin_username;
    m_admin_username_isSet = true;
}

bool OAIDeploymentParameters::is_admin_username_Set() const{
    return m_admin_username_isSet;
}

bool OAIDeploymentParameters::is_admin_username_Valid() const{
    return m_admin_username_isValid;
}

OAIDeploymentParameters_dnsLabelPrefix OAIDeploymentParameters::getDnsLabelPrefix() const {
    return m_dns_label_prefix;
}
void OAIDeploymentParameters::setDnsLabelPrefix(const OAIDeploymentParameters_dnsLabelPrefix &dns_label_prefix) {
    m_dns_label_prefix = dns_label_prefix;
    m_dns_label_prefix_isSet = true;
}

bool OAIDeploymentParameters::is_dns_label_prefix_Set() const{
    return m_dns_label_prefix_isSet;
}

bool OAIDeploymentParameters::is_dns_label_prefix_Valid() const{
    return m_dns_label_prefix_isValid;
}

OAIDeploymentParameters_osVersion OAIDeploymentParameters::getOsVersion() const {
    return m_os_version;
}
void OAIDeploymentParameters::setOsVersion(const OAIDeploymentParameters_osVersion &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIDeploymentParameters::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIDeploymentParameters::is_os_version_Valid() const{
    return m_os_version_isValid;
}

bool OAIDeploymentParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_username.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_label_prefix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
