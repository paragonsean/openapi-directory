/**
 * ComputeManagementConvenienceClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentPropertiesExtended.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentPropertiesExtended::OAIDeploymentPropertiesExtended(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentPropertiesExtended::OAIDeploymentPropertiesExtended() {
    this->initializeModel();
}

OAIDeploymentPropertiesExtended::~OAIDeploymentPropertiesExtended() {}

void OAIDeploymentPropertiesExtended::initializeModel() {

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_dependencies_isSet = false;
    m_dependencies_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_parameters_link_isSet = false;
    m_parameters_link_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_template_link_isSet = false;
    m_template_link_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIDeploymentPropertiesExtended::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentPropertiesExtended::fromJsonObject(QJsonObject json) {

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_dependencies_isValid = ::OpenAPI::fromJsonValue(m_dependencies, json[QString("dependencies")]);
    m_dependencies_isSet = !json[QString("dependencies")].isNull() && m_dependencies_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_parameters_link_isValid = ::OpenAPI::fromJsonValue(m_parameters_link, json[QString("parametersLink")]);
    m_parameters_link_isSet = !json[QString("parametersLink")].isNull() && m_parameters_link_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_template_link_isValid = ::OpenAPI::fromJsonValue(m_template_link, json[QString("templateLink")]);
    m_template_link_isSet = !json[QString("templateLink")].isNull() && m_template_link_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIDeploymentPropertiesExtended::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentPropertiesExtended::asJsonObject() const {
    QJsonObject obj;
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_dependencies.size() > 0) {
        obj.insert(QString("dependencies"), ::OpenAPI::toJsonValue(m_dependencies));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_outputs_isSet) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_parameters_link.isSet()) {
        obj.insert(QString("parametersLink"), ::OpenAPI::toJsonValue(m_parameters_link));
    }
    if (m_providers.size() > 0) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_template_link.isSet()) {
        obj.insert(QString("templateLink"), ::OpenAPI::toJsonValue(m_template_link));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIDeploymentPropertiesExtended::getCorrelationId() const {
    return m_correlation_id;
}
void OAIDeploymentPropertiesExtended::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAIDeploymentPropertiesExtended::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QList<OAIDependency> OAIDeploymentPropertiesExtended::getDependencies() const {
    return m_dependencies;
}
void OAIDeploymentPropertiesExtended::setDependencies(const QList<OAIDependency> &dependencies) {
    m_dependencies = dependencies;
    m_dependencies_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_dependencies_Set() const{
    return m_dependencies_isSet;
}

bool OAIDeploymentPropertiesExtended::is_dependencies_Valid() const{
    return m_dependencies_isValid;
}

QString OAIDeploymentPropertiesExtended::getMode() const {
    return m_mode;
}
void OAIDeploymentPropertiesExtended::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIDeploymentPropertiesExtended::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIObject OAIDeploymentPropertiesExtended::getOutputs() const {
    return m_outputs;
}
void OAIDeploymentPropertiesExtended::setOutputs(const OAIObject &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIDeploymentPropertiesExtended::is_outputs_Valid() const{
    return m_outputs_isValid;
}

OAIObject OAIDeploymentPropertiesExtended::getParameters() const {
    return m_parameters;
}
void OAIDeploymentPropertiesExtended::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDeploymentPropertiesExtended::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIParametersLink OAIDeploymentPropertiesExtended::getParametersLink() const {
    return m_parameters_link;
}
void OAIDeploymentPropertiesExtended::setParametersLink(const OAIParametersLink &parameters_link) {
    m_parameters_link = parameters_link;
    m_parameters_link_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_parameters_link_Set() const{
    return m_parameters_link_isSet;
}

bool OAIDeploymentPropertiesExtended::is_parameters_link_Valid() const{
    return m_parameters_link_isValid;
}

QList<OAIProvider> OAIDeploymentPropertiesExtended::getProviders() const {
    return m_providers;
}
void OAIDeploymentPropertiesExtended::setProviders(const QList<OAIProvider> &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAIDeploymentPropertiesExtended::is_providers_Valid() const{
    return m_providers_isValid;
}

QString OAIDeploymentPropertiesExtended::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDeploymentPropertiesExtended::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDeploymentPropertiesExtended::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIObject OAIDeploymentPropertiesExtended::getRTemplate() const {
    return m_r_template;
}
void OAIDeploymentPropertiesExtended::setRTemplate(const OAIObject &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIDeploymentPropertiesExtended::is_r_template_Valid() const{
    return m_r_template_isValid;
}

OAITemplateLink OAIDeploymentPropertiesExtended::getTemplateLink() const {
    return m_template_link;
}
void OAIDeploymentPropertiesExtended::setTemplateLink(const OAITemplateLink &template_link) {
    m_template_link = template_link;
    m_template_link_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_template_link_Set() const{
    return m_template_link_isSet;
}

bool OAIDeploymentPropertiesExtended::is_template_link_Valid() const{
    return m_template_link_isValid;
}

QDateTime OAIDeploymentPropertiesExtended::getTimestamp() const {
    return m_timestamp;
}
void OAIDeploymentPropertiesExtended::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDeploymentPropertiesExtended::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDeploymentPropertiesExtended::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIDeploymentPropertiesExtended::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentPropertiesExtended::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
