# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provider_resource_type import ProviderResourceType
from openapi_server import util


class Provider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, namespace: str=None, registration_state: str=None, resource_types: List[ProviderResourceType]=None):
        """Provider - a model defined in OpenAPI

        :param id: The id of this Provider.
        :param namespace: The namespace of this Provider.
        :param registration_state: The registration_state of this Provider.
        :param resource_types: The resource_types of this Provider.
        """
        self.openapi_types = {
            'id': str,
            'namespace': str,
            'registration_state': str,
            'resource_types': List[ProviderResourceType]
        }

        self.attribute_map = {
            'id': 'id',
            'namespace': 'namespace',
            'registration_state': 'registrationState',
            'resource_types': 'resourceTypes'
        }

        self._id = id
        self._namespace = namespace
        self._registration_state = registration_state
        self._resource_types = resource_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Provider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Provider of this Provider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Provider.

        Gets or sets the provider id.

        :return: The id of this Provider.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Provider.

        Gets or sets the provider id.

        :param id: The id of this Provider.
        :type id: str
        """

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this Provider.

        Gets or sets the namespace of the provider.

        :return: The namespace of this Provider.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Provider.

        Gets or sets the namespace of the provider.

        :param namespace: The namespace of this Provider.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def registration_state(self):
        """Gets the registration_state of this Provider.

        Gets or sets the registration state of the provider.

        :return: The registration_state of this Provider.
        :rtype: str
        """
        return self._registration_state

    @registration_state.setter
    def registration_state(self, registration_state):
        """Sets the registration_state of this Provider.

        Gets or sets the registration state of the provider.

        :param registration_state: The registration_state of this Provider.
        :type registration_state: str
        """

        self._registration_state = registration_state

    @property
    def resource_types(self):
        """Gets the resource_types of this Provider.

        Gets or sets the collection of provider resource types.

        :return: The resource_types of this Provider.
        :rtype: List[ProviderResourceType]
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this Provider.

        Gets or sets the collection of provider resource types.

        :param resource_types: The resource_types of this Provider.
        :type resource_types: List[ProviderResourceType]
        """

        self._resource_types = resource_types
