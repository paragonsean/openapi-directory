# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.runbook_association_property import RunbookAssociationProperty
from openapi_server.models.schedule_association_property import ScheduleAssociationProperty
from openapi_server import util


class JobScheduleCreateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: Dict[str, str]=None, run_on: str=None, runbook: RunbookAssociationProperty=None, schedule: ScheduleAssociationProperty=None):
        """JobScheduleCreateProperties - a model defined in OpenAPI

        :param parameters: The parameters of this JobScheduleCreateProperties.
        :param run_on: The run_on of this JobScheduleCreateProperties.
        :param runbook: The runbook of this JobScheduleCreateProperties.
        :param schedule: The schedule of this JobScheduleCreateProperties.
        """
        self.openapi_types = {
            'parameters': Dict[str, str],
            'run_on': str,
            'runbook': RunbookAssociationProperty,
            'schedule': ScheduleAssociationProperty
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'run_on': 'runOn',
            'runbook': 'runbook',
            'schedule': 'schedule'
        }

        self._parameters = parameters
        self._run_on = run_on
        self._runbook = runbook
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobScheduleCreateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobScheduleCreateProperties of this JobScheduleCreateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this JobScheduleCreateProperties.

        Gets or sets a list of job properties.

        :return: The parameters of this JobScheduleCreateProperties.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this JobScheduleCreateProperties.

        Gets or sets a list of job properties.

        :param parameters: The parameters of this JobScheduleCreateProperties.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def run_on(self):
        """Gets the run_on of this JobScheduleCreateProperties.

        Gets or sets the hybrid worker group that the scheduled job should run on.

        :return: The run_on of this JobScheduleCreateProperties.
        :rtype: str
        """
        return self._run_on

    @run_on.setter
    def run_on(self, run_on):
        """Sets the run_on of this JobScheduleCreateProperties.

        Gets or sets the hybrid worker group that the scheduled job should run on.

        :param run_on: The run_on of this JobScheduleCreateProperties.
        :type run_on: str
        """

        self._run_on = run_on

    @property
    def runbook(self):
        """Gets the runbook of this JobScheduleCreateProperties.


        :return: The runbook of this JobScheduleCreateProperties.
        :rtype: RunbookAssociationProperty
        """
        return self._runbook

    @runbook.setter
    def runbook(self, runbook):
        """Sets the runbook of this JobScheduleCreateProperties.


        :param runbook: The runbook of this JobScheduleCreateProperties.
        :type runbook: RunbookAssociationProperty
        """
        if runbook is None:
            raise ValueError("Invalid value for `runbook`, must not be `None`")

        self._runbook = runbook

    @property
    def schedule(self):
        """Gets the schedule of this JobScheduleCreateProperties.


        :return: The schedule of this JobScheduleCreateProperties.
        :rtype: ScheduleAssociationProperty
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this JobScheduleCreateProperties.


        :param schedule: The schedule of this JobScheduleCreateProperties.
        :type schedule: ScheduleAssociationProperty
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule
