/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpGroupPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpGroupPropertiesFormat::OAIIpGroupPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpGroupPropertiesFormat::OAIIpGroupPropertiesFormat() {
    this->initializeModel();
}

OAIIpGroupPropertiesFormat::~OAIIpGroupPropertiesFormat() {}

void OAIIpGroupPropertiesFormat::initializeModel() {

    m_firewalls_isSet = false;
    m_firewalls_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIIpGroupPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpGroupPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_firewalls_isValid = ::OpenAPI::fromJsonValue(m_firewalls, json[QString("firewalls")]);
    m_firewalls_isSet = !json[QString("firewalls")].isNull() && m_firewalls_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ipAddresses")]);
    m_ip_addresses_isSet = !json[QString("ipAddresses")].isNull() && m_ip_addresses_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIIpGroupPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpGroupPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_firewalls.size() > 0) {
        obj.insert(QString("firewalls"), ::OpenAPI::toJsonValue(m_firewalls));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ipAddresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QList<OAIIpGroupPropertiesFormat_firewalls_inner> OAIIpGroupPropertiesFormat::getFirewalls() const {
    return m_firewalls;
}
void OAIIpGroupPropertiesFormat::setFirewalls(const QList<OAIIpGroupPropertiesFormat_firewalls_inner> &firewalls) {
    m_firewalls = firewalls;
    m_firewalls_isSet = true;
}

bool OAIIpGroupPropertiesFormat::is_firewalls_Set() const{
    return m_firewalls_isSet;
}

bool OAIIpGroupPropertiesFormat::is_firewalls_Valid() const{
    return m_firewalls_isValid;
}

QList<QString> OAIIpGroupPropertiesFormat::getIpAddresses() const {
    return m_ip_addresses;
}
void OAIIpGroupPropertiesFormat::setIpAddresses(const QList<QString> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAIIpGroupPropertiesFormat::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAIIpGroupPropertiesFormat::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QString OAIIpGroupPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIIpGroupPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIIpGroupPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIIpGroupPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIIpGroupPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_firewalls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpGroupPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
