/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIpGroupsApi_H
#define OAI_OAIIpGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIpGroup.h"
#include "OAIIpGroupListResult.h"
#include "OAIIpGroups_List_default_response.h"
#include "OAIIpGroups_UpdateGroups_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIpGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIIpGroupsApi(const int timeOut = 0);
    ~OAIIpGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  ip_groups_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIIpGroup [required]
    */
    virtual void ipGroupsCreateOrUpdate(const QString &resource_group_name, const QString &ip_groups_name, const QString &api_version, const QString &subscription_id, const OAIIpGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  ip_groups_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void ipGroupsDelete(const QString &resource_group_name, const QString &ip_groups_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  ip_groups_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void ipGroupsGet(const QString &resource_group_name, const QString &ip_groups_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void ipGroupsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void ipGroupsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  ip_groups_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIIpGroups_UpdateGroups_request [required]
    */
    virtual void ipGroupsUpdateGroups(const QString &resource_group_name, const QString &ip_groups_name, const QString &api_version, const QString &subscription_id, const OAIIpGroups_UpdateGroups_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ipGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void ipGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void ipGroupsGetCallback(OAIHttpRequestWorker *worker);
    void ipGroupsListCallback(OAIHttpRequestWorker *worker);
    void ipGroupsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void ipGroupsUpdateGroupsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ipGroupsCreateOrUpdateSignal(OAIIpGroup summary);
    void ipGroupsDeleteSignal();
    void ipGroupsGetSignal(OAIIpGroup summary);
    void ipGroupsListSignal(OAIIpGroupListResult summary);
    void ipGroupsListByResourceGroupSignal(OAIIpGroupListResult summary);
    void ipGroupsUpdateGroupsSignal(OAIIpGroup summary);


    void ipGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIpGroup summary);
    void ipGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ipGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIIpGroup summary);
    void ipGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIIpGroupListResult summary);
    void ipGroupsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIIpGroupListResult summary);
    void ipGroupsUpdateGroupsSignalFull(OAIHttpRequestWorker *worker, OAIIpGroup summary);

    Q_DECL_DEPRECATED_X("Use ipGroupsCreateOrUpdateSignalError() instead")
    void ipGroupsCreateOrUpdateSignalE(OAIIpGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsCreateOrUpdateSignalError(OAIIpGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGroupsDeleteSignalError() instead")
    void ipGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGroupsGetSignalError() instead")
    void ipGroupsGetSignalE(OAIIpGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsGetSignalError(OAIIpGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGroupsListSignalError() instead")
    void ipGroupsListSignalE(OAIIpGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsListSignalError(OAIIpGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGroupsListByResourceGroupSignalError() instead")
    void ipGroupsListByResourceGroupSignalE(OAIIpGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsListByResourceGroupSignalError(OAIIpGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGroupsUpdateGroupsSignalError() instead")
    void ipGroupsUpdateGroupsSignalE(OAIIpGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsUpdateGroupsSignalError(OAIIpGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ipGroupsCreateOrUpdateSignalErrorFull() instead")
    void ipGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGroupsDeleteSignalErrorFull() instead")
    void ipGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGroupsGetSignalErrorFull() instead")
    void ipGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGroupsListSignalErrorFull() instead")
    void ipGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGroupsListByResourceGroupSignalErrorFull() instead")
    void ipGroupsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipGroupsUpdateGroupsSignalErrorFull() instead")
    void ipGroupsUpdateGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipGroupsUpdateGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
