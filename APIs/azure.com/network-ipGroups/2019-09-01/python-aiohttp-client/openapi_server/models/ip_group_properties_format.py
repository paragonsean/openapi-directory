# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_group_properties_format_firewalls_inner import IpGroupPropertiesFormatFirewallsInner
from openapi_server import util


class IpGroupPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firewalls: List[IpGroupPropertiesFormatFirewallsInner]=None, ip_addresses: List[str]=None, provisioning_state: str=None):
        """IpGroupPropertiesFormat - a model defined in OpenAPI

        :param firewalls: The firewalls of this IpGroupPropertiesFormat.
        :param ip_addresses: The ip_addresses of this IpGroupPropertiesFormat.
        :param provisioning_state: The provisioning_state of this IpGroupPropertiesFormat.
        """
        self.openapi_types = {
            'firewalls': List[IpGroupPropertiesFormatFirewallsInner],
            'ip_addresses': List[str],
            'provisioning_state': str
        }

        self.attribute_map = {
            'firewalls': 'firewalls',
            'ip_addresses': 'ipAddresses',
            'provisioning_state': 'provisioningState'
        }

        self._firewalls = firewalls
        self._ip_addresses = ip_addresses
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpGroupPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpGroupPropertiesFormat of this IpGroupPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firewalls(self):
        """Gets the firewalls of this IpGroupPropertiesFormat.

        List of references to Azure resources that this IpGroups is associated with.

        :return: The firewalls of this IpGroupPropertiesFormat.
        :rtype: List[IpGroupPropertiesFormatFirewallsInner]
        """
        return self._firewalls

    @firewalls.setter
    def firewalls(self, firewalls):
        """Sets the firewalls of this IpGroupPropertiesFormat.

        List of references to Azure resources that this IpGroups is associated with.

        :param firewalls: The firewalls of this IpGroupPropertiesFormat.
        :type firewalls: List[IpGroupPropertiesFormatFirewallsInner]
        """

        self._firewalls = firewalls

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this IpGroupPropertiesFormat.

        IpAddresses/IpAddressPrefixes in the IpGroups resource.

        :return: The ip_addresses of this IpGroupPropertiesFormat.
        :rtype: List[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this IpGroupPropertiesFormat.

        IpAddresses/IpAddressPrefixes in the IpGroups resource.

        :param ip_addresses: The ip_addresses of this IpGroupPropertiesFormat.
        :type ip_addresses: List[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this IpGroupPropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this IpGroupPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this IpGroupPropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this IpGroupPropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
