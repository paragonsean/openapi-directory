/**
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceCertificateAndAadDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceCertificateAndAadDetails::OAIResourceCertificateAndAadDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceCertificateAndAadDetails::OAIResourceCertificateAndAadDetails() {
    this->initializeModel();
}

OAIResourceCertificateAndAadDetails::~OAIResourceCertificateAndAadDetails() {}

void OAIResourceCertificateAndAadDetails::initializeModel() {

    m_aad_authority_isSet = false;
    m_aad_authority_isValid = false;

    m_aad_tenant_id_isSet = false;
    m_aad_tenant_id_isValid = false;

    m_azure_management_endpoint_audience_isSet = false;
    m_azure_management_endpoint_audience_isValid = false;

    m_service_principal_client_id_isSet = false;
    m_service_principal_client_id_isValid = false;

    m_service_principal_object_id_isSet = false;
    m_service_principal_object_id_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;

    m_valid_from_isSet = false;
    m_valid_from_isValid = false;

    m_valid_to_isSet = false;
    m_valid_to_isValid = false;
}

void OAIResourceCertificateAndAadDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceCertificateAndAadDetails::fromJsonObject(QJsonObject json) {

    m_aad_authority_isValid = ::OpenAPI::fromJsonValue(m_aad_authority, json[QString("aadAuthority")]);
    m_aad_authority_isSet = !json[QString("aadAuthority")].isNull() && m_aad_authority_isValid;

    m_aad_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_aad_tenant_id, json[QString("aadTenantId")]);
    m_aad_tenant_id_isSet = !json[QString("aadTenantId")].isNull() && m_aad_tenant_id_isValid;

    m_azure_management_endpoint_audience_isValid = ::OpenAPI::fromJsonValue(m_azure_management_endpoint_audience, json[QString("azureManagementEndpointAudience")]);
    m_azure_management_endpoint_audience_isSet = !json[QString("azureManagementEndpointAudience")].isNull() && m_azure_management_endpoint_audience_isValid;

    m_service_principal_client_id_isValid = ::OpenAPI::fromJsonValue(m_service_principal_client_id, json[QString("servicePrincipalClientId")]);
    m_service_principal_client_id_isSet = !json[QString("servicePrincipalClientId")].isNull() && m_service_principal_client_id_isValid;

    m_service_principal_object_id_isValid = ::OpenAPI::fromJsonValue(m_service_principal_object_id, json[QString("servicePrincipalObjectId")]);
    m_service_principal_object_id_isSet = !json[QString("servicePrincipalObjectId")].isNull() && m_service_principal_object_id_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;

    m_valid_from_isValid = ::OpenAPI::fromJsonValue(m_valid_from, json[QString("validFrom")]);
    m_valid_from_isSet = !json[QString("validFrom")].isNull() && m_valid_from_isValid;

    m_valid_to_isValid = ::OpenAPI::fromJsonValue(m_valid_to, json[QString("validTo")]);
    m_valid_to_isSet = !json[QString("validTo")].isNull() && m_valid_to_isValid;
}

QString OAIResourceCertificateAndAadDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceCertificateAndAadDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_aad_authority_isSet) {
        obj.insert(QString("aadAuthority"), ::OpenAPI::toJsonValue(m_aad_authority));
    }
    if (m_aad_tenant_id_isSet) {
        obj.insert(QString("aadTenantId"), ::OpenAPI::toJsonValue(m_aad_tenant_id));
    }
    if (m_azure_management_endpoint_audience_isSet) {
        obj.insert(QString("azureManagementEndpointAudience"), ::OpenAPI::toJsonValue(m_azure_management_endpoint_audience));
    }
    if (m_service_principal_client_id_isSet) {
        obj.insert(QString("servicePrincipalClientId"), ::OpenAPI::toJsonValue(m_service_principal_client_id));
    }
    if (m_service_principal_object_id_isSet) {
        obj.insert(QString("servicePrincipalObjectId"), ::OpenAPI::toJsonValue(m_service_principal_object_id));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    if (m_valid_from_isSet) {
        obj.insert(QString("validFrom"), ::OpenAPI::toJsonValue(m_valid_from));
    }
    if (m_valid_to_isSet) {
        obj.insert(QString("validTo"), ::OpenAPI::toJsonValue(m_valid_to));
    }
    return obj;
}

QString OAIResourceCertificateAndAadDetails::getAadAuthority() const {
    return m_aad_authority;
}
void OAIResourceCertificateAndAadDetails::setAadAuthority(const QString &aad_authority) {
    m_aad_authority = aad_authority;
    m_aad_authority_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_aad_authority_Set() const{
    return m_aad_authority_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_aad_authority_Valid() const{
    return m_aad_authority_isValid;
}

QString OAIResourceCertificateAndAadDetails::getAadTenantId() const {
    return m_aad_tenant_id;
}
void OAIResourceCertificateAndAadDetails::setAadTenantId(const QString &aad_tenant_id) {
    m_aad_tenant_id = aad_tenant_id;
    m_aad_tenant_id_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_aad_tenant_id_Set() const{
    return m_aad_tenant_id_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_aad_tenant_id_Valid() const{
    return m_aad_tenant_id_isValid;
}

QString OAIResourceCertificateAndAadDetails::getAzureManagementEndpointAudience() const {
    return m_azure_management_endpoint_audience;
}
void OAIResourceCertificateAndAadDetails::setAzureManagementEndpointAudience(const QString &azure_management_endpoint_audience) {
    m_azure_management_endpoint_audience = azure_management_endpoint_audience;
    m_azure_management_endpoint_audience_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_azure_management_endpoint_audience_Set() const{
    return m_azure_management_endpoint_audience_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_azure_management_endpoint_audience_Valid() const{
    return m_azure_management_endpoint_audience_isValid;
}

QString OAIResourceCertificateAndAadDetails::getServicePrincipalClientId() const {
    return m_service_principal_client_id;
}
void OAIResourceCertificateAndAadDetails::setServicePrincipalClientId(const QString &service_principal_client_id) {
    m_service_principal_client_id = service_principal_client_id;
    m_service_principal_client_id_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_service_principal_client_id_Set() const{
    return m_service_principal_client_id_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_service_principal_client_id_Valid() const{
    return m_service_principal_client_id_isValid;
}

QString OAIResourceCertificateAndAadDetails::getServicePrincipalObjectId() const {
    return m_service_principal_object_id;
}
void OAIResourceCertificateAndAadDetails::setServicePrincipalObjectId(const QString &service_principal_object_id) {
    m_service_principal_object_id = service_principal_object_id;
    m_service_principal_object_id_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_service_principal_object_id_Set() const{
    return m_service_principal_object_id_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_service_principal_object_id_Valid() const{
    return m_service_principal_object_id_isValid;
}

QString OAIResourceCertificateAndAadDetails::getAuthType() const {
    return m_auth_type;
}
void OAIResourceCertificateAndAadDetails::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QByteArray OAIResourceCertificateAndAadDetails::getCertificate() const {
    return m_certificate;
}
void OAIResourceCertificateAndAadDetails::setCertificate(const QByteArray &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAIResourceCertificateAndAadDetails::getFriendlyName() const {
    return m_friendly_name;
}
void OAIResourceCertificateAndAadDetails::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIResourceCertificateAndAadDetails::getIssuer() const {
    return m_issuer;
}
void OAIResourceCertificateAndAadDetails::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_issuer_Valid() const{
    return m_issuer_isValid;
}

qint64 OAIResourceCertificateAndAadDetails::getResourceId() const {
    return m_resource_id;
}
void OAIResourceCertificateAndAadDetails::setResourceId(const qint64 &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIResourceCertificateAndAadDetails::getSubject() const {
    return m_subject;
}
void OAIResourceCertificateAndAadDetails::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIResourceCertificateAndAadDetails::getThumbprint() const {
    return m_thumbprint;
}
void OAIResourceCertificateAndAadDetails::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

QDateTime OAIResourceCertificateAndAadDetails::getValidFrom() const {
    return m_valid_from;
}
void OAIResourceCertificateAndAadDetails::setValidFrom(const QDateTime &valid_from) {
    m_valid_from = valid_from;
    m_valid_from_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_valid_from_Set() const{
    return m_valid_from_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_valid_from_Valid() const{
    return m_valid_from_isValid;
}

QDateTime OAIResourceCertificateAndAadDetails::getValidTo() const {
    return m_valid_to;
}
void OAIResourceCertificateAndAadDetails::setValidTo(const QDateTime &valid_to) {
    m_valid_to = valid_to;
    m_valid_to_isSet = true;
}

bool OAIResourceCertificateAndAadDetails::is_valid_to_Set() const{
    return m_valid_to_isSet;
}

bool OAIResourceCertificateAndAadDetails::is_valid_to_Valid() const{
    return m_valid_to_isValid;
}

bool OAIResourceCertificateAndAadDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aad_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_management_endpoint_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceCertificateAndAadDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aad_authority_isValid && m_aad_tenant_id_isValid && m_azure_management_endpoint_audience_isValid && m_service_principal_client_id_isValid && m_service_principal_object_id_isValid && m_auth_type_isValid && true;
}

} // namespace OpenAPI
