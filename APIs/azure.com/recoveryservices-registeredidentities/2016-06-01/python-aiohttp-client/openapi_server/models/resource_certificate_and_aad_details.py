# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_certificate_details import ResourceCertificateDetails
import re
from openapi_server import util


class ResourceCertificateAndAadDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aad_authority: str=None, aad_tenant_id: str=None, azure_management_endpoint_audience: str=None, service_principal_client_id: str=None, service_principal_object_id: str=None, auth_type: str=None, certificate: str=None, friendly_name: str=None, issuer: str=None, resource_id: int=None, subject: str=None, thumbprint: str=None, valid_from: datetime=None, valid_to: datetime=None):
        """ResourceCertificateAndAadDetails - a model defined in OpenAPI

        :param aad_authority: The aad_authority of this ResourceCertificateAndAadDetails.
        :param aad_tenant_id: The aad_tenant_id of this ResourceCertificateAndAadDetails.
        :param azure_management_endpoint_audience: The azure_management_endpoint_audience of this ResourceCertificateAndAadDetails.
        :param service_principal_client_id: The service_principal_client_id of this ResourceCertificateAndAadDetails.
        :param service_principal_object_id: The service_principal_object_id of this ResourceCertificateAndAadDetails.
        :param auth_type: The auth_type of this ResourceCertificateAndAadDetails.
        :param certificate: The certificate of this ResourceCertificateAndAadDetails.
        :param friendly_name: The friendly_name of this ResourceCertificateAndAadDetails.
        :param issuer: The issuer of this ResourceCertificateAndAadDetails.
        :param resource_id: The resource_id of this ResourceCertificateAndAadDetails.
        :param subject: The subject of this ResourceCertificateAndAadDetails.
        :param thumbprint: The thumbprint of this ResourceCertificateAndAadDetails.
        :param valid_from: The valid_from of this ResourceCertificateAndAadDetails.
        :param valid_to: The valid_to of this ResourceCertificateAndAadDetails.
        """
        self.openapi_types = {
            'aad_authority': str,
            'aad_tenant_id': str,
            'azure_management_endpoint_audience': str,
            'service_principal_client_id': str,
            'service_principal_object_id': str,
            'auth_type': str,
            'certificate': str,
            'friendly_name': str,
            'issuer': str,
            'resource_id': int,
            'subject': str,
            'thumbprint': str,
            'valid_from': datetime,
            'valid_to': datetime
        }

        self.attribute_map = {
            'aad_authority': 'aadAuthority',
            'aad_tenant_id': 'aadTenantId',
            'azure_management_endpoint_audience': 'azureManagementEndpointAudience',
            'service_principal_client_id': 'servicePrincipalClientId',
            'service_principal_object_id': 'servicePrincipalObjectId',
            'auth_type': 'authType',
            'certificate': 'certificate',
            'friendly_name': 'friendlyName',
            'issuer': 'issuer',
            'resource_id': 'resourceId',
            'subject': 'subject',
            'thumbprint': 'thumbprint',
            'valid_from': 'validFrom',
            'valid_to': 'validTo'
        }

        self._aad_authority = aad_authority
        self._aad_tenant_id = aad_tenant_id
        self._azure_management_endpoint_audience = azure_management_endpoint_audience
        self._service_principal_client_id = service_principal_client_id
        self._service_principal_object_id = service_principal_object_id
        self._auth_type = auth_type
        self._certificate = certificate
        self._friendly_name = friendly_name
        self._issuer = issuer
        self._resource_id = resource_id
        self._subject = subject
        self._thumbprint = thumbprint
        self._valid_from = valid_from
        self._valid_to = valid_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceCertificateAndAadDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceCertificateAndAadDetails of this ResourceCertificateAndAadDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aad_authority(self):
        """Gets the aad_authority of this ResourceCertificateAndAadDetails.

        AAD tenant authority.

        :return: The aad_authority of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._aad_authority

    @aad_authority.setter
    def aad_authority(self, aad_authority):
        """Sets the aad_authority of this ResourceCertificateAndAadDetails.

        AAD tenant authority.

        :param aad_authority: The aad_authority of this ResourceCertificateAndAadDetails.
        :type aad_authority: str
        """
        if aad_authority is None:
            raise ValueError("Invalid value for `aad_authority`, must not be `None`")

        self._aad_authority = aad_authority

    @property
    def aad_tenant_id(self):
        """Gets the aad_tenant_id of this ResourceCertificateAndAadDetails.

        AAD tenant Id.

        :return: The aad_tenant_id of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._aad_tenant_id

    @aad_tenant_id.setter
    def aad_tenant_id(self, aad_tenant_id):
        """Sets the aad_tenant_id of this ResourceCertificateAndAadDetails.

        AAD tenant Id.

        :param aad_tenant_id: The aad_tenant_id of this ResourceCertificateAndAadDetails.
        :type aad_tenant_id: str
        """
        if aad_tenant_id is None:
            raise ValueError("Invalid value for `aad_tenant_id`, must not be `None`")

        self._aad_tenant_id = aad_tenant_id

    @property
    def azure_management_endpoint_audience(self):
        """Gets the azure_management_endpoint_audience of this ResourceCertificateAndAadDetails.

        Azure Management Endpoint Audience.

        :return: The azure_management_endpoint_audience of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._azure_management_endpoint_audience

    @azure_management_endpoint_audience.setter
    def azure_management_endpoint_audience(self, azure_management_endpoint_audience):
        """Sets the azure_management_endpoint_audience of this ResourceCertificateAndAadDetails.

        Azure Management Endpoint Audience.

        :param azure_management_endpoint_audience: The azure_management_endpoint_audience of this ResourceCertificateAndAadDetails.
        :type azure_management_endpoint_audience: str
        """
        if azure_management_endpoint_audience is None:
            raise ValueError("Invalid value for `azure_management_endpoint_audience`, must not be `None`")

        self._azure_management_endpoint_audience = azure_management_endpoint_audience

    @property
    def service_principal_client_id(self):
        """Gets the service_principal_client_id of this ResourceCertificateAndAadDetails.

        AAD service principal clientId.

        :return: The service_principal_client_id of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._service_principal_client_id

    @service_principal_client_id.setter
    def service_principal_client_id(self, service_principal_client_id):
        """Sets the service_principal_client_id of this ResourceCertificateAndAadDetails.

        AAD service principal clientId.

        :param service_principal_client_id: The service_principal_client_id of this ResourceCertificateAndAadDetails.
        :type service_principal_client_id: str
        """
        if service_principal_client_id is None:
            raise ValueError("Invalid value for `service_principal_client_id`, must not be `None`")

        self._service_principal_client_id = service_principal_client_id

    @property
    def service_principal_object_id(self):
        """Gets the service_principal_object_id of this ResourceCertificateAndAadDetails.

        AAD service principal ObjectId.

        :return: The service_principal_object_id of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._service_principal_object_id

    @service_principal_object_id.setter
    def service_principal_object_id(self, service_principal_object_id):
        """Sets the service_principal_object_id of this ResourceCertificateAndAadDetails.

        AAD service principal ObjectId.

        :param service_principal_object_id: The service_principal_object_id of this ResourceCertificateAndAadDetails.
        :type service_principal_object_id: str
        """
        if service_principal_object_id is None:
            raise ValueError("Invalid value for `service_principal_object_id`, must not be `None`")

        self._service_principal_object_id = service_principal_object_id

    @property
    def auth_type(self):
        """Gets the auth_type of this ResourceCertificateAndAadDetails.

        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.

        :return: The auth_type of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this ResourceCertificateAndAadDetails.

        This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.

        :param auth_type: The auth_type of this ResourceCertificateAndAadDetails.
        :type auth_type: str
        """
        if auth_type is None:
            raise ValueError("Invalid value for `auth_type`, must not be `None`")

        self._auth_type = auth_type

    @property
    def certificate(self):
        """Gets the certificate of this ResourceCertificateAndAadDetails.

        The base64 encoded certificate raw data string.

        :return: The certificate of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ResourceCertificateAndAadDetails.

        The base64 encoded certificate raw data string.

        :param certificate: The certificate of this ResourceCertificateAndAadDetails.
        :type certificate: str
        """
        if certificate is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', certificate):
            raise ValueError("Invalid value for `certificate`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._certificate = certificate

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ResourceCertificateAndAadDetails.

        Certificate friendly name.

        :return: The friendly_name of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ResourceCertificateAndAadDetails.

        Certificate friendly name.

        :param friendly_name: The friendly_name of this ResourceCertificateAndAadDetails.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def issuer(self):
        """Gets the issuer of this ResourceCertificateAndAadDetails.

        Certificate issuer.

        :return: The issuer of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this ResourceCertificateAndAadDetails.

        Certificate issuer.

        :param issuer: The issuer of this ResourceCertificateAndAadDetails.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def resource_id(self):
        """Gets the resource_id of this ResourceCertificateAndAadDetails.

        Resource ID of the vault.

        :return: The resource_id of this ResourceCertificateAndAadDetails.
        :rtype: int
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ResourceCertificateAndAadDetails.

        Resource ID of the vault.

        :param resource_id: The resource_id of this ResourceCertificateAndAadDetails.
        :type resource_id: int
        """

        self._resource_id = resource_id

    @property
    def subject(self):
        """Gets the subject of this ResourceCertificateAndAadDetails.

        Certificate Subject Name.

        :return: The subject of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ResourceCertificateAndAadDetails.

        Certificate Subject Name.

        :param subject: The subject of this ResourceCertificateAndAadDetails.
        :type subject: str
        """

        self._subject = subject

    @property
    def thumbprint(self):
        """Gets the thumbprint of this ResourceCertificateAndAadDetails.

        Certificate thumbprint.

        :return: The thumbprint of this ResourceCertificateAndAadDetails.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this ResourceCertificateAndAadDetails.

        Certificate thumbprint.

        :param thumbprint: The thumbprint of this ResourceCertificateAndAadDetails.
        :type thumbprint: str
        """

        self._thumbprint = thumbprint

    @property
    def valid_from(self):
        """Gets the valid_from of this ResourceCertificateAndAadDetails.

        Certificate Validity start Date time.

        :return: The valid_from of this ResourceCertificateAndAadDetails.
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this ResourceCertificateAndAadDetails.

        Certificate Validity start Date time.

        :param valid_from: The valid_from of this ResourceCertificateAndAadDetails.
        :type valid_from: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this ResourceCertificateAndAadDetails.

        Certificate Validity End Date time.

        :return: The valid_to of this ResourceCertificateAndAadDetails.
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this ResourceCertificateAndAadDetails.

        Certificate Validity End Date time.

        :param valid_to: The valid_to of this ResourceCertificateAndAadDetails.
        :type valid_to: datetime
        """

        self._valid_to = valid_to
