# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RawCertificateData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_type: str=None, certificate: str=None):
        """RawCertificateData - a model defined in OpenAPI

        :param auth_type: The auth_type of this RawCertificateData.
        :param certificate: The certificate of this RawCertificateData.
        """
        self.openapi_types = {
            'auth_type': str,
            'certificate': str
        }

        self.attribute_map = {
            'auth_type': 'authType',
            'certificate': 'certificate'
        }

        self._auth_type = auth_type
        self._certificate = certificate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RawCertificateData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RawCertificateData of this RawCertificateData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_type(self):
        """Gets the auth_type of this RawCertificateData.

        Specifies the authentication type.

        :return: The auth_type of this RawCertificateData.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this RawCertificateData.

        Specifies the authentication type.

        :param auth_type: The auth_type of this RawCertificateData.
        :type auth_type: str
        """
        allowed_values = ["Invalid", "ACS", "AAD", "AccessControlService", "AzureActiveDirectory"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def certificate(self):
        """Gets the certificate of this RawCertificateData.

        The base64 encoded certificate raw data string

        :return: The certificate of this RawCertificateData.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this RawCertificateData.

        The base64 encoded certificate raw data string

        :param certificate: The certificate of this RawCertificateData.
        :type certificate: str
        """
        if certificate is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', certificate):
            raise ValueError("Invalid value for `certificate`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._certificate = certificate
