/*
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ResourceCertificateDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Certificate details representing the Vault credentials for AAD.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:23.531971-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceCertificateAndAadDetails extends ResourceCertificateDetails {
  public static final String SERIALIZED_NAME_AAD_AUTHORITY = "aadAuthority";
  @SerializedName(SERIALIZED_NAME_AAD_AUTHORITY)
  private String aadAuthority;

  public static final String SERIALIZED_NAME_AAD_TENANT_ID = "aadTenantId";
  @SerializedName(SERIALIZED_NAME_AAD_TENANT_ID)
  private String aadTenantId;

  public static final String SERIALIZED_NAME_AZURE_MANAGEMENT_ENDPOINT_AUDIENCE = "azureManagementEndpointAudience";
  @SerializedName(SERIALIZED_NAME_AZURE_MANAGEMENT_ENDPOINT_AUDIENCE)
  private String azureManagementEndpointAudience;

  public static final String SERIALIZED_NAME_SERVICE_PRINCIPAL_CLIENT_ID = "servicePrincipalClientId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PRINCIPAL_CLIENT_ID)
  private String servicePrincipalClientId;

  public static final String SERIALIZED_NAME_SERVICE_PRINCIPAL_OBJECT_ID = "servicePrincipalObjectId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PRINCIPAL_OBJECT_ID)
  private String servicePrincipalObjectId;

  public ResourceCertificateAndAadDetails() {
    this.authType = this.getClass().getSimpleName();
  }

  public ResourceCertificateAndAadDetails aadAuthority(String aadAuthority) {
    this.aadAuthority = aadAuthority;
    return this;
  }

  /**
   * AAD tenant authority.
   * @return aadAuthority
   */
  @javax.annotation.Nonnull
  public String getAadAuthority() {
    return aadAuthority;
  }

  public void setAadAuthority(String aadAuthority) {
    this.aadAuthority = aadAuthority;
  }


  public ResourceCertificateAndAadDetails aadTenantId(String aadTenantId) {
    this.aadTenantId = aadTenantId;
    return this;
  }

  /**
   * AAD tenant Id.
   * @return aadTenantId
   */
  @javax.annotation.Nonnull
  public String getAadTenantId() {
    return aadTenantId;
  }

  public void setAadTenantId(String aadTenantId) {
    this.aadTenantId = aadTenantId;
  }


  public ResourceCertificateAndAadDetails azureManagementEndpointAudience(String azureManagementEndpointAudience) {
    this.azureManagementEndpointAudience = azureManagementEndpointAudience;
    return this;
  }

  /**
   * Azure Management Endpoint Audience.
   * @return azureManagementEndpointAudience
   */
  @javax.annotation.Nonnull
  public String getAzureManagementEndpointAudience() {
    return azureManagementEndpointAudience;
  }

  public void setAzureManagementEndpointAudience(String azureManagementEndpointAudience) {
    this.azureManagementEndpointAudience = azureManagementEndpointAudience;
  }


  public ResourceCertificateAndAadDetails servicePrincipalClientId(String servicePrincipalClientId) {
    this.servicePrincipalClientId = servicePrincipalClientId;
    return this;
  }

  /**
   * AAD service principal clientId.
   * @return servicePrincipalClientId
   */
  @javax.annotation.Nonnull
  public String getServicePrincipalClientId() {
    return servicePrincipalClientId;
  }

  public void setServicePrincipalClientId(String servicePrincipalClientId) {
    this.servicePrincipalClientId = servicePrincipalClientId;
  }


  public ResourceCertificateAndAadDetails servicePrincipalObjectId(String servicePrincipalObjectId) {
    this.servicePrincipalObjectId = servicePrincipalObjectId;
    return this;
  }

  /**
   * AAD service principal ObjectId.
   * @return servicePrincipalObjectId
   */
  @javax.annotation.Nonnull
  public String getServicePrincipalObjectId() {
    return servicePrincipalObjectId;
  }

  public void setServicePrincipalObjectId(String servicePrincipalObjectId) {
    this.servicePrincipalObjectId = servicePrincipalObjectId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceCertificateAndAadDetails resourceCertificateAndAadDetails = (ResourceCertificateAndAadDetails) o;
    return Objects.equals(this.aadAuthority, resourceCertificateAndAadDetails.aadAuthority) &&
        Objects.equals(this.aadTenantId, resourceCertificateAndAadDetails.aadTenantId) &&
        Objects.equals(this.azureManagementEndpointAudience, resourceCertificateAndAadDetails.azureManagementEndpointAudience) &&
        Objects.equals(this.servicePrincipalClientId, resourceCertificateAndAadDetails.servicePrincipalClientId) &&
        Objects.equals(this.servicePrincipalObjectId, resourceCertificateAndAadDetails.servicePrincipalObjectId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aadAuthority, aadTenantId, azureManagementEndpointAudience, servicePrincipalClientId, servicePrincipalObjectId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceCertificateAndAadDetails {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    aadAuthority: ").append(toIndentedString(aadAuthority)).append("\n");
    sb.append("    aadTenantId: ").append(toIndentedString(aadTenantId)).append("\n");
    sb.append("    azureManagementEndpointAudience: ").append(toIndentedString(azureManagementEndpointAudience)).append("\n");
    sb.append("    servicePrincipalClientId: ").append(toIndentedString(servicePrincipalClientId)).append("\n");
    sb.append("    servicePrincipalObjectId: ").append(toIndentedString(servicePrincipalObjectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authType");
    openapiFields.add("certificate");
    openapiFields.add("friendlyName");
    openapiFields.add("issuer");
    openapiFields.add("resourceId");
    openapiFields.add("subject");
    openapiFields.add("thumbprint");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aadAuthority");
    openapiRequiredFields.add("aadTenantId");
    openapiRequiredFields.add("azureManagementEndpointAudience");
    openapiRequiredFields.add("servicePrincipalClientId");
    openapiRequiredFields.add("servicePrincipalObjectId");
    openapiRequiredFields.add("authType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceCertificateAndAadDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceCertificateAndAadDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceCertificateAndAadDetails is not found in the empty JSON string", ResourceCertificateAndAadDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceCertificateAndAadDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceCertificateAndAadDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResourceCertificateAndAadDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceCertificateAndAadDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceCertificateAndAadDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceCertificateAndAadDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceCertificateAndAadDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceCertificateAndAadDetails>() {
           @Override
           public void write(JsonWriter out, ResourceCertificateAndAadDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceCertificateAndAadDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceCertificateAndAadDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceCertificateAndAadDetails
   * @throws IOException if the JSON string is invalid with respect to ResourceCertificateAndAadDetails
   */
  public static ResourceCertificateAndAadDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceCertificateAndAadDetails.class);
  }

  /**
   * Convert an instance of ResourceCertificateAndAadDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

