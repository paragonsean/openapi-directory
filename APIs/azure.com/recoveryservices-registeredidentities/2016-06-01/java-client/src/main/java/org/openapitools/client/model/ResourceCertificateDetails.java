/*
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Certificate details representing the Vault credentials.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:23.531971-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceCertificateDetails {
  public static final String SERIALIZED_NAME_AUTH_TYPE = "authType";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  protected String authType;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private byte[] certificate;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private Long resourceId;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_VALID_FROM = "validFrom";
  @SerializedName(SERIALIZED_NAME_VALID_FROM)
  private OffsetDateTime validFrom;

  public static final String SERIALIZED_NAME_VALID_TO = "validTo";
  @SerializedName(SERIALIZED_NAME_VALID_TO)
  private OffsetDateTime validTo;

  public ResourceCertificateDetails() {
    this.authType = this.getClass().getSimpleName();
  }

  public ResourceCertificateDetails authType(String authType) {
    this.authType = authType;
    return this;
  }

  /**
   * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
   * @return authType
   */
  @javax.annotation.Nonnull
  public String getAuthType() {
    return authType;
  }

  public void setAuthType(String authType) {
    this.authType = authType;
  }


  public ResourceCertificateDetails certificate(byte[] certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * The base64 encoded certificate raw data string.
   * @return certificate
   */
  @javax.annotation.Nullable
  public byte[] getCertificate() {
    return certificate;
  }

  public void setCertificate(byte[] certificate) {
    this.certificate = certificate;
  }


  public ResourceCertificateDetails friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Certificate friendly name.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ResourceCertificateDetails issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Certificate issuer.
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public ResourceCertificateDetails resourceId(Long resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Resource ID of the vault.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public Long getResourceId() {
    return resourceId;
  }

  public void setResourceId(Long resourceId) {
    this.resourceId = resourceId;
  }


  public ResourceCertificateDetails subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Certificate Subject Name.
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public ResourceCertificateDetails thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * Certificate thumbprint.
   * @return thumbprint
   */
  @javax.annotation.Nullable
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public ResourceCertificateDetails validFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
    return this;
  }

  /**
   * Certificate Validity start Date time.
   * @return validFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidFrom() {
    return validFrom;
  }

  public void setValidFrom(OffsetDateTime validFrom) {
    this.validFrom = validFrom;
  }


  public ResourceCertificateDetails validTo(OffsetDateTime validTo) {
    this.validTo = validTo;
    return this;
  }

  /**
   * Certificate Validity End Date time.
   * @return validTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidTo() {
    return validTo;
  }

  public void setValidTo(OffsetDateTime validTo) {
    this.validTo = validTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceCertificateDetails resourceCertificateDetails = (ResourceCertificateDetails) o;
    return Objects.equals(this.authType, resourceCertificateDetails.authType) &&
        Arrays.equals(this.certificate, resourceCertificateDetails.certificate) &&
        Objects.equals(this.friendlyName, resourceCertificateDetails.friendlyName) &&
        Objects.equals(this.issuer, resourceCertificateDetails.issuer) &&
        Objects.equals(this.resourceId, resourceCertificateDetails.resourceId) &&
        Objects.equals(this.subject, resourceCertificateDetails.subject) &&
        Objects.equals(this.thumbprint, resourceCertificateDetails.thumbprint) &&
        Objects.equals(this.validFrom, resourceCertificateDetails.validFrom) &&
        Objects.equals(this.validTo, resourceCertificateDetails.validTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authType, Arrays.hashCode(certificate), friendlyName, issuer, resourceId, subject, thumbprint, validFrom, validTo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceCertificateDetails {\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    validFrom: ").append(toIndentedString(validFrom)).append("\n");
    sb.append("    validTo: ").append(toIndentedString(validTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authType");
    openapiFields.add("certificate");
    openapiFields.add("friendlyName");
    openapiFields.add("issuer");
    openapiFields.add("resourceId");
    openapiFields.add("subject");
    openapiFields.add("thumbprint");
    openapiFields.add("validFrom");
    openapiFields.add("validTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceCertificateDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceCertificateDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceCertificateDetails is not found in the empty JSON string", ResourceCertificateDetails.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("authType").getAsString();
      switch (discriminatorValue) {
        case "ResourceCertificateAndAadDetails":
          ResourceCertificateAndAadDetails.validateJsonElement(jsonElement);
          break;
        case "ResourceCertificateAndAcsDetails":
          ResourceCertificateAndAcsDetails.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `authType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ResourceCertificateDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceCertificateDetails
   * @throws IOException if the JSON string is invalid with respect to ResourceCertificateDetails
   */
  public static ResourceCertificateDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceCertificateDetails.class);
  }

  /**
   * Convert an instance of ResourceCertificateDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

