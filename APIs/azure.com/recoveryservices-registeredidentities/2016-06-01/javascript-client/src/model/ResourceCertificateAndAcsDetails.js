/**
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceCertificateDetails from './ResourceCertificateDetails';

/**
 * The ResourceCertificateAndAcsDetails model module.
 * @module model/ResourceCertificateAndAcsDetails
 * @version 2016-06-01
 */
class ResourceCertificateAndAcsDetails {
    /**
     * Constructs a new <code>ResourceCertificateAndAcsDetails</code>.
     * Certificate details representing the Vault credentials for ACS.
     * @alias module:model/ResourceCertificateAndAcsDetails
     * @extends module:model/ResourceCertificateDetails
     * @implements module:model/ResourceCertificateDetails
     * @param authType {String} This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
     */
    constructor(authType) { 
        ResourceCertificateDetails.initialize(this, authType);
        ResourceCertificateAndAcsDetails.initialize(this, authType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authType) { 
        obj['globalAcsHostName'] = globalAcsHostName;
        obj['globalAcsNamespace'] = globalAcsNamespace;
        obj['globalAcsRPRealm'] = globalAcsRPRealm;
    }

    /**
     * Constructs a <code>ResourceCertificateAndAcsDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceCertificateAndAcsDetails} obj Optional instance to populate.
     * @return {module:model/ResourceCertificateAndAcsDetails} The populated <code>ResourceCertificateAndAcsDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceCertificateAndAcsDetails();
            ResourceCertificateDetails.constructFromObject(data, obj);
            ResourceCertificateDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('globalAcsHostName')) {
                obj['globalAcsHostName'] = ApiClient.convertToType(data['globalAcsHostName'], 'String');
            }
            if (data.hasOwnProperty('globalAcsNamespace')) {
                obj['globalAcsNamespace'] = ApiClient.convertToType(data['globalAcsNamespace'], 'String');
            }
            if (data.hasOwnProperty('globalAcsRPRealm')) {
                obj['globalAcsRPRealm'] = ApiClient.convertToType(data['globalAcsRPRealm'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceCertificateAndAcsDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceCertificateAndAcsDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceCertificateAndAcsDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['globalAcsHostName'] && !(typeof data['globalAcsHostName'] === 'string' || data['globalAcsHostName'] instanceof String)) {
            throw new Error("Expected the field `globalAcsHostName` to be a primitive type in the JSON string but got " + data['globalAcsHostName']);
        }
        // ensure the json data is a string
        if (data['globalAcsNamespace'] && !(typeof data['globalAcsNamespace'] === 'string' || data['globalAcsNamespace'] instanceof String)) {
            throw new Error("Expected the field `globalAcsNamespace` to be a primitive type in the JSON string but got " + data['globalAcsNamespace']);
        }
        // ensure the json data is a string
        if (data['globalAcsRPRealm'] && !(typeof data['globalAcsRPRealm'] === 'string' || data['globalAcsRPRealm'] instanceof String)) {
            throw new Error("Expected the field `globalAcsRPRealm` to be a primitive type in the JSON string but got " + data['globalAcsRPRealm']);
        }

        return true;
    }


}

ResourceCertificateAndAcsDetails.RequiredProperties = ["globalAcsHostName", "globalAcsNamespace", "globalAcsRPRealm", "authType"];

/**
 * Acs mgmt host name to connect to.
 * @member {String} globalAcsHostName
 */
ResourceCertificateAndAcsDetails.prototype['globalAcsHostName'] = undefined;

/**
 * ACS namespace name - tenant for our service.
 * @member {String} globalAcsNamespace
 */
ResourceCertificateAndAcsDetails.prototype['globalAcsNamespace'] = undefined;

/**
 * Global ACS namespace RP realm.
 * @member {String} globalAcsRPRealm
 */
ResourceCertificateAndAcsDetails.prototype['globalAcsRPRealm'] = undefined;


// Implement ResourceCertificateDetails interface:
/**
 * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
 * @member {String} authType
 */
ResourceCertificateDetails.prototype['authType'] = undefined;
/**
 * The base64 encoded certificate raw data string.
 * @member {Blob} certificate
 */
ResourceCertificateDetails.prototype['certificate'] = undefined;
/**
 * Certificate friendly name.
 * @member {String} friendlyName
 */
ResourceCertificateDetails.prototype['friendlyName'] = undefined;
/**
 * Certificate issuer.
 * @member {String} issuer
 */
ResourceCertificateDetails.prototype['issuer'] = undefined;
/**
 * Resource ID of the vault.
 * @member {Number} resourceId
 */
ResourceCertificateDetails.prototype['resourceId'] = undefined;
/**
 * Certificate Subject Name.
 * @member {String} subject
 */
ResourceCertificateDetails.prototype['subject'] = undefined;
/**
 * Certificate thumbprint.
 * @member {String} thumbprint
 */
ResourceCertificateDetails.prototype['thumbprint'] = undefined;
/**
 * Certificate Validity start Date time.
 * @member {Date} validFrom
 */
ResourceCertificateDetails.prototype['validFrom'] = undefined;
/**
 * Certificate Validity End Date time.
 * @member {Date} validTo
 */
ResourceCertificateDetails.prototype['validTo'] = undefined;




export default ResourceCertificateAndAcsDetails;

