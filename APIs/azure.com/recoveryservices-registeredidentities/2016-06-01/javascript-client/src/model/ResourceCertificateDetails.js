/**
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceCertificateDetails model module.
 * @module model/ResourceCertificateDetails
 * @version 2016-06-01
 */
class ResourceCertificateDetails {
    /**
     * Constructs a new <code>ResourceCertificateDetails</code>.
     * Certificate details representing the Vault credentials.
     * @alias module:model/ResourceCertificateDetails
     * @param authType {String} This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
     */
    constructor(authType) { 
        
        ResourceCertificateDetails.initialize(this, authType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authType) { 
        obj['authType'] = authType;
    }

    /**
     * Constructs a <code>ResourceCertificateDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceCertificateDetails} obj Optional instance to populate.
     * @return {module:model/ResourceCertificateDetails} The populated <code>ResourceCertificateDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceCertificateDetails();

            if (data.hasOwnProperty('authType')) {
                obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
            }
            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'Blob');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'Number');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
            if (data.hasOwnProperty('validFrom')) {
                obj['validFrom'] = ApiClient.convertToType(data['validFrom'], 'Date');
            }
            if (data.hasOwnProperty('validTo')) {
                obj['validTo'] = ApiClient.convertToType(data['validTo'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceCertificateDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceCertificateDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceCertificateDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authType'] && !(typeof data['authType'] === 'string' || data['authType'] instanceof String)) {
            throw new Error("Expected the field `authType` to be a primitive type in the JSON string but got " + data['authType']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }

        return true;
    }


}

ResourceCertificateDetails.RequiredProperties = ["authType"];

/**
 * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
 * @member {String} authType
 */
ResourceCertificateDetails.prototype['authType'] = undefined;

/**
 * The base64 encoded certificate raw data string.
 * @member {Blob} certificate
 */
ResourceCertificateDetails.prototype['certificate'] = undefined;

/**
 * Certificate friendly name.
 * @member {String} friendlyName
 */
ResourceCertificateDetails.prototype['friendlyName'] = undefined;

/**
 * Certificate issuer.
 * @member {String} issuer
 */
ResourceCertificateDetails.prototype['issuer'] = undefined;

/**
 * Resource ID of the vault.
 * @member {Number} resourceId
 */
ResourceCertificateDetails.prototype['resourceId'] = undefined;

/**
 * Certificate Subject Name.
 * @member {String} subject
 */
ResourceCertificateDetails.prototype['subject'] = undefined;

/**
 * Certificate thumbprint.
 * @member {String} thumbprint
 */
ResourceCertificateDetails.prototype['thumbprint'] = undefined;

/**
 * Certificate Validity start Date time.
 * @member {Date} validFrom
 */
ResourceCertificateDetails.prototype['validFrom'] = undefined;

/**
 * Certificate Validity End Date time.
 * @member {Date} validTo
 */
ResourceCertificateDetails.prototype['validTo'] = undefined;






export default ResourceCertificateDetails;

