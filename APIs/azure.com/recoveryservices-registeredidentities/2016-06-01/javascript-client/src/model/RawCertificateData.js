/**
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RawCertificateData model module.
 * @module model/RawCertificateData
 * @version 2016-06-01
 */
class RawCertificateData {
    /**
     * Constructs a new <code>RawCertificateData</code>.
     * Raw certificate data.
     * @alias module:model/RawCertificateData
     */
    constructor() { 
        
        RawCertificateData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RawCertificateData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RawCertificateData} obj Optional instance to populate.
     * @return {module:model/RawCertificateData} The populated <code>RawCertificateData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RawCertificateData();

            if (data.hasOwnProperty('authType')) {
                obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
            }
            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'Blob');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RawCertificateData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RawCertificateData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authType'] && !(typeof data['authType'] === 'string' || data['authType'] instanceof String)) {
            throw new Error("Expected the field `authType` to be a primitive type in the JSON string but got " + data['authType']);
        }

        return true;
    }


}



/**
 * Specifies the authentication type.
 * @member {module:model/RawCertificateData.AuthTypeEnum} authType
 */
RawCertificateData.prototype['authType'] = undefined;

/**
 * The base64 encoded certificate raw data string
 * @member {Blob} certificate
 */
RawCertificateData.prototype['certificate'] = undefined;





/**
 * Allowed values for the <code>authType</code> property.
 * @enum {String}
 * @readonly
 */
RawCertificateData['AuthTypeEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "ACS"
     * @const
     */
    "ACS": "ACS",

    /**
     * value: "AAD"
     * @const
     */
    "AAD": "AAD",

    /**
     * value: "AccessControlService"
     * @const
     */
    "AccessControlService": "AccessControlService",

    /**
     * value: "AzureActiveDirectory"
     * @const
     */
    "AzureActiveDirectory": "AzureActiveDirectory"
};



export default RawCertificateData;

