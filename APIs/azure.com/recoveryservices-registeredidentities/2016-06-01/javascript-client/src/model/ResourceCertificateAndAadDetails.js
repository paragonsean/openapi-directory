/**
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceCertificateDetails from './ResourceCertificateDetails';

/**
 * The ResourceCertificateAndAadDetails model module.
 * @module model/ResourceCertificateAndAadDetails
 * @version 2016-06-01
 */
class ResourceCertificateAndAadDetails {
    /**
     * Constructs a new <code>ResourceCertificateAndAadDetails</code>.
     * Certificate details representing the Vault credentials for AAD.
     * @alias module:model/ResourceCertificateAndAadDetails
     * @extends module:model/ResourceCertificateDetails
     * @implements module:model/ResourceCertificateDetails
     * @param authType {String} This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
     */
    constructor(authType) { 
        ResourceCertificateDetails.initialize(this, authType);
        ResourceCertificateAndAadDetails.initialize(this, authType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authType) { 
        obj['aadAuthority'] = aadAuthority;
        obj['aadTenantId'] = aadTenantId;
        obj['azureManagementEndpointAudience'] = azureManagementEndpointAudience;
        obj['servicePrincipalClientId'] = servicePrincipalClientId;
        obj['servicePrincipalObjectId'] = servicePrincipalObjectId;
    }

    /**
     * Constructs a <code>ResourceCertificateAndAadDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceCertificateAndAadDetails} obj Optional instance to populate.
     * @return {module:model/ResourceCertificateAndAadDetails} The populated <code>ResourceCertificateAndAadDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceCertificateAndAadDetails();
            ResourceCertificateDetails.constructFromObject(data, obj);
            ResourceCertificateDetails.constructFromObject(data, obj);

            if (data.hasOwnProperty('aadAuthority')) {
                obj['aadAuthority'] = ApiClient.convertToType(data['aadAuthority'], 'String');
            }
            if (data.hasOwnProperty('aadTenantId')) {
                obj['aadTenantId'] = ApiClient.convertToType(data['aadTenantId'], 'String');
            }
            if (data.hasOwnProperty('azureManagementEndpointAudience')) {
                obj['azureManagementEndpointAudience'] = ApiClient.convertToType(data['azureManagementEndpointAudience'], 'String');
            }
            if (data.hasOwnProperty('servicePrincipalClientId')) {
                obj['servicePrincipalClientId'] = ApiClient.convertToType(data['servicePrincipalClientId'], 'String');
            }
            if (data.hasOwnProperty('servicePrincipalObjectId')) {
                obj['servicePrincipalObjectId'] = ApiClient.convertToType(data['servicePrincipalObjectId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceCertificateAndAadDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceCertificateAndAadDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceCertificateAndAadDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aadAuthority'] && !(typeof data['aadAuthority'] === 'string' || data['aadAuthority'] instanceof String)) {
            throw new Error("Expected the field `aadAuthority` to be a primitive type in the JSON string but got " + data['aadAuthority']);
        }
        // ensure the json data is a string
        if (data['aadTenantId'] && !(typeof data['aadTenantId'] === 'string' || data['aadTenantId'] instanceof String)) {
            throw new Error("Expected the field `aadTenantId` to be a primitive type in the JSON string but got " + data['aadTenantId']);
        }
        // ensure the json data is a string
        if (data['azureManagementEndpointAudience'] && !(typeof data['azureManagementEndpointAudience'] === 'string' || data['azureManagementEndpointAudience'] instanceof String)) {
            throw new Error("Expected the field `azureManagementEndpointAudience` to be a primitive type in the JSON string but got " + data['azureManagementEndpointAudience']);
        }
        // ensure the json data is a string
        if (data['servicePrincipalClientId'] && !(typeof data['servicePrincipalClientId'] === 'string' || data['servicePrincipalClientId'] instanceof String)) {
            throw new Error("Expected the field `servicePrincipalClientId` to be a primitive type in the JSON string but got " + data['servicePrincipalClientId']);
        }
        // ensure the json data is a string
        if (data['servicePrincipalObjectId'] && !(typeof data['servicePrincipalObjectId'] === 'string' || data['servicePrincipalObjectId'] instanceof String)) {
            throw new Error("Expected the field `servicePrincipalObjectId` to be a primitive type in the JSON string but got " + data['servicePrincipalObjectId']);
        }

        return true;
    }


}

ResourceCertificateAndAadDetails.RequiredProperties = ["aadAuthority", "aadTenantId", "azureManagementEndpointAudience", "servicePrincipalClientId", "servicePrincipalObjectId", "authType"];

/**
 * AAD tenant authority.
 * @member {String} aadAuthority
 */
ResourceCertificateAndAadDetails.prototype['aadAuthority'] = undefined;

/**
 * AAD tenant Id.
 * @member {String} aadTenantId
 */
ResourceCertificateAndAadDetails.prototype['aadTenantId'] = undefined;

/**
 * Azure Management Endpoint Audience.
 * @member {String} azureManagementEndpointAudience
 */
ResourceCertificateAndAadDetails.prototype['azureManagementEndpointAudience'] = undefined;

/**
 * AAD service principal clientId.
 * @member {String} servicePrincipalClientId
 */
ResourceCertificateAndAadDetails.prototype['servicePrincipalClientId'] = undefined;

/**
 * AAD service principal ObjectId.
 * @member {String} servicePrincipalObjectId
 */
ResourceCertificateAndAadDetails.prototype['servicePrincipalObjectId'] = undefined;


// Implement ResourceCertificateDetails interface:
/**
 * This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
 * @member {String} authType
 */
ResourceCertificateDetails.prototype['authType'] = undefined;
/**
 * The base64 encoded certificate raw data string.
 * @member {Blob} certificate
 */
ResourceCertificateDetails.prototype['certificate'] = undefined;
/**
 * Certificate friendly name.
 * @member {String} friendlyName
 */
ResourceCertificateDetails.prototype['friendlyName'] = undefined;
/**
 * Certificate issuer.
 * @member {String} issuer
 */
ResourceCertificateDetails.prototype['issuer'] = undefined;
/**
 * Resource ID of the vault.
 * @member {Number} resourceId
 */
ResourceCertificateDetails.prototype['resourceId'] = undefined;
/**
 * Certificate Subject Name.
 * @member {String} subject
 */
ResourceCertificateDetails.prototype['subject'] = undefined;
/**
 * Certificate thumbprint.
 * @member {String} thumbprint
 */
ResourceCertificateDetails.prototype['thumbprint'] = undefined;
/**
 * Certificate Validity start Date time.
 * @member {Date} validFrom
 */
ResourceCertificateDetails.prototype['validFrom'] = undefined;
/**
 * Certificate Validity End Date time.
 * @member {Date} validTo
 */
ResourceCertificateDetails.prototype['validTo'] = undefined;




export default ResourceCertificateAndAadDetails;

