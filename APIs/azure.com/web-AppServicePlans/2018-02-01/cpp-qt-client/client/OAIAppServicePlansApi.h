/**
 * AppServicePlans API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppServicePlansApi_H
#define OAI_OAIAppServicePlansApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppServicePlanPatchResource.h"
#include "OAIAppServicePlans_CreateOrUpdateVnetRoute_request.h"
#include "OAIAppServicePlans_GetHybridConnection_200_response.h"
#include "OAIAppServicePlans_GetVnetFromServerFarm_200_response.h"
#include "OAIAppServicePlans_GetVnetGateway_200_response.h"
#include "OAIAppServicePlans_Get_200_response.h"
#include "OAIAppServicePlans_ListHybridConnectionKeys_200_response.h"
#include "OAIAppServicePlans_ListMetricDefintions_200_response.h"
#include "OAIAppServicePlans_ListMetrics_200_response.h"
#include "OAIAppServicePlans_ListUsages_200_response.h"
#include "OAIAppServicePlans_ListVnets_200_response_inner.h"
#include "OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner.h"
#include "OAIAppServicePlans_ListWebApps_200_response.h"
#include "OAIAppServicePlans_List_200_response.h"
#include "OAIAppServicePlans_List_200_response_value_inner_sku_capabilities_inner.h"
#include "OAIAppServicePlans_List_default_response.h"
#include "OAIHybridConnectionCollection.h"
#include "OAIHybridConnectionLimits.h"
#include "OAIObject.h"
#include "OAIResourceCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppServicePlansApi : public QObject {
    Q_OBJECT

public:
    OAIAppServicePlansApi(const int timeOut = 0);
    ~OAIAppServicePlansApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  app_service_plan OAIAppServicePlans_Get_200_response [required]
    */
    virtual void appServicePlansCreateOrUpdate(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIAppServicePlans_Get_200_response &app_service_plan);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  route OAIAppServicePlans_CreateOrUpdateVnetRoute_request [required]
    */
    virtual void appServicePlansCreateOrUpdateVnetRoute(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &route_name, const QString &subscription_id, const QString &api_version, const OAIAppServicePlans_CreateOrUpdateVnetRoute_request &route);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansDelete(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansDeleteHybridConnection(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansDeleteVnetRoute(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &route_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansGet(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansGetHybridConnection(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansGetHybridConnectionPlanLimit(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansGetRouteForVnet(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &route_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansGetServerFarmSkus(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansGetVnetFromServerFarm(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansGetVnetGateway(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  detailed bool [optional]
    */
    virtual void appServicePlansList(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &detailed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansListCapabilities(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansListHybridConnectionKeys(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansListHybridConnections(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansListMetricDefintions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void appServicePlansListMetrics(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansListRoutesForVnet(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void appServicePlansListUsages(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansListVnets(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top QString [optional]
    */
    virtual void appServicePlansListWebApps(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &top = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  relay_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansListWebAppsByHybridConnection(const QString &resource_group_name, const QString &name, const QString &namespace_name, const QString &relay_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appServicePlansRebootWorker(const QString &resource_group_name, const QString &name, const QString &worker_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  soft_restart bool [optional]
    */
    virtual void appServicePlansRestartWebApps(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &soft_restart = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  app_service_plan OAIAppServicePlanPatchResource [required]
    */
    virtual void appServicePlansUpdate(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIAppServicePlanPatchResource &app_service_plan);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIAppServicePlans_GetVnetGateway_200_response [required]
    */
    virtual void appServicePlansUpdateVnetGateway(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &subscription_id, const QString &api_version, const OAIAppServicePlans_GetVnetGateway_200_response &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  route OAIAppServicePlans_CreateOrUpdateVnetRoute_request [required]
    */
    virtual void appServicePlansUpdateVnetRoute(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &route_name, const QString &subscription_id, const QString &api_version, const OAIAppServicePlans_CreateOrUpdateVnetRoute_request &route);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appServicePlansCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void appServicePlansCreateOrUpdateVnetRouteCallback(OAIHttpRequestWorker *worker);
    void appServicePlansDeleteCallback(OAIHttpRequestWorker *worker);
    void appServicePlansDeleteHybridConnectionCallback(OAIHttpRequestWorker *worker);
    void appServicePlansDeleteVnetRouteCallback(OAIHttpRequestWorker *worker);
    void appServicePlansGetCallback(OAIHttpRequestWorker *worker);
    void appServicePlansGetHybridConnectionCallback(OAIHttpRequestWorker *worker);
    void appServicePlansGetHybridConnectionPlanLimitCallback(OAIHttpRequestWorker *worker);
    void appServicePlansGetRouteForVnetCallback(OAIHttpRequestWorker *worker);
    void appServicePlansGetServerFarmSkusCallback(OAIHttpRequestWorker *worker);
    void appServicePlansGetVnetFromServerFarmCallback(OAIHttpRequestWorker *worker);
    void appServicePlansGetVnetGatewayCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListCapabilitiesCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListHybridConnectionKeysCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListHybridConnectionsCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListMetricDefintionsCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListMetricsCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListRoutesForVnetCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListUsagesCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListVnetsCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListWebAppsCallback(OAIHttpRequestWorker *worker);
    void appServicePlansListWebAppsByHybridConnectionCallback(OAIHttpRequestWorker *worker);
    void appServicePlansRebootWorkerCallback(OAIHttpRequestWorker *worker);
    void appServicePlansRestartWebAppsCallback(OAIHttpRequestWorker *worker);
    void appServicePlansUpdateCallback(OAIHttpRequestWorker *worker);
    void appServicePlansUpdateVnetGatewayCallback(OAIHttpRequestWorker *worker);
    void appServicePlansUpdateVnetRouteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appServicePlansCreateOrUpdateSignal(OAIAppServicePlans_Get_200_response summary);
    void appServicePlansCreateOrUpdateVnetRouteSignal(OAIAppServicePlans_CreateOrUpdateVnetRoute_request summary);
    void appServicePlansDeleteSignal();
    void appServicePlansDeleteHybridConnectionSignal();
    void appServicePlansDeleteVnetRouteSignal();
    void appServicePlansGetSignal(OAIAppServicePlans_Get_200_response summary);
    void appServicePlansGetHybridConnectionSignal(OAIAppServicePlans_GetHybridConnection_200_response summary);
    void appServicePlansGetHybridConnectionPlanLimitSignal(OAIHybridConnectionLimits summary);
    void appServicePlansGetRouteForVnetSignal(QList<OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner> summary);
    void appServicePlansGetServerFarmSkusSignal(OAIObject summary);
    void appServicePlansGetVnetFromServerFarmSignal(OAIAppServicePlans_GetVnetFromServerFarm_200_response summary);
    void appServicePlansGetVnetGatewaySignal(OAIAppServicePlans_GetVnetGateway_200_response summary);
    void appServicePlansListSignal(OAIAppServicePlans_List_200_response summary);
    void appServicePlansListByResourceGroupSignal(OAIAppServicePlans_List_200_response summary);
    void appServicePlansListCapabilitiesSignal(QList<OAIAppServicePlans_List_200_response_value_inner_sku_capabilities_inner> summary);
    void appServicePlansListHybridConnectionKeysSignal(OAIAppServicePlans_ListHybridConnectionKeys_200_response summary);
    void appServicePlansListHybridConnectionsSignal(OAIHybridConnectionCollection summary);
    void appServicePlansListMetricDefintionsSignal(OAIAppServicePlans_ListMetricDefintions_200_response summary);
    void appServicePlansListMetricsSignal(OAIAppServicePlans_ListMetrics_200_response summary);
    void appServicePlansListRoutesForVnetSignal(QList<OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner> summary);
    void appServicePlansListUsagesSignal(OAIAppServicePlans_ListUsages_200_response summary);
    void appServicePlansListVnetsSignal(QList<OAIAppServicePlans_ListVnets_200_response_inner> summary);
    void appServicePlansListWebAppsSignal(OAIAppServicePlans_ListWebApps_200_response summary);
    void appServicePlansListWebAppsByHybridConnectionSignal(OAIResourceCollection summary);
    void appServicePlansRebootWorkerSignal();
    void appServicePlansRestartWebAppsSignal();
    void appServicePlansUpdateSignal(OAIAppServicePlans_Get_200_response summary);
    void appServicePlansUpdateVnetGatewaySignal(OAIAppServicePlans_GetVnetGateway_200_response summary);
    void appServicePlansUpdateVnetRouteSignal(OAIAppServicePlans_CreateOrUpdateVnetRoute_request summary);


    void appServicePlansCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_Get_200_response summary);
    void appServicePlansCreateOrUpdateVnetRouteSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_CreateOrUpdateVnetRoute_request summary);
    void appServicePlansDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appServicePlansDeleteHybridConnectionSignalFull(OAIHttpRequestWorker *worker);
    void appServicePlansDeleteVnetRouteSignalFull(OAIHttpRequestWorker *worker);
    void appServicePlansGetSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_Get_200_response summary);
    void appServicePlansGetHybridConnectionSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_GetHybridConnection_200_response summary);
    void appServicePlansGetHybridConnectionPlanLimitSignalFull(OAIHttpRequestWorker *worker, OAIHybridConnectionLimits summary);
    void appServicePlansGetRouteForVnetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner> summary);
    void appServicePlansGetServerFarmSkusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void appServicePlansGetVnetFromServerFarmSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_GetVnetFromServerFarm_200_response summary);
    void appServicePlansGetVnetGatewaySignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_GetVnetGateway_200_response summary);
    void appServicePlansListSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_List_200_response summary);
    void appServicePlansListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_List_200_response summary);
    void appServicePlansListCapabilitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppServicePlans_List_200_response_value_inner_sku_capabilities_inner> summary);
    void appServicePlansListHybridConnectionKeysSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_ListHybridConnectionKeys_200_response summary);
    void appServicePlansListHybridConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIHybridConnectionCollection summary);
    void appServicePlansListMetricDefintionsSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_ListMetricDefintions_200_response summary);
    void appServicePlansListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_ListMetrics_200_response summary);
    void appServicePlansListRoutesForVnetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner> summary);
    void appServicePlansListUsagesSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_ListUsages_200_response summary);
    void appServicePlansListVnetsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppServicePlans_ListVnets_200_response_inner> summary);
    void appServicePlansListWebAppsSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_ListWebApps_200_response summary);
    void appServicePlansListWebAppsByHybridConnectionSignalFull(OAIHttpRequestWorker *worker, OAIResourceCollection summary);
    void appServicePlansRebootWorkerSignalFull(OAIHttpRequestWorker *worker);
    void appServicePlansRestartWebAppsSignalFull(OAIHttpRequestWorker *worker);
    void appServicePlansUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_Get_200_response summary);
    void appServicePlansUpdateVnetGatewaySignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_GetVnetGateway_200_response summary);
    void appServicePlansUpdateVnetRouteSignalFull(OAIHttpRequestWorker *worker, OAIAppServicePlans_CreateOrUpdateVnetRoute_request summary);

    Q_DECL_DEPRECATED_X("Use appServicePlansCreateOrUpdateSignalError() instead")
    void appServicePlansCreateOrUpdateSignalE(OAIAppServicePlans_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansCreateOrUpdateSignalError(OAIAppServicePlans_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansCreateOrUpdateVnetRouteSignalError() instead")
    void appServicePlansCreateOrUpdateVnetRouteSignalE(OAIAppServicePlans_CreateOrUpdateVnetRoute_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansCreateOrUpdateVnetRouteSignalError(OAIAppServicePlans_CreateOrUpdateVnetRoute_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansDeleteSignalError() instead")
    void appServicePlansDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansDeleteHybridConnectionSignalError() instead")
    void appServicePlansDeleteHybridConnectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansDeleteHybridConnectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansDeleteVnetRouteSignalError() instead")
    void appServicePlansDeleteVnetRouteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansDeleteVnetRouteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetSignalError() instead")
    void appServicePlansGetSignalE(OAIAppServicePlans_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetSignalError(OAIAppServicePlans_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetHybridConnectionSignalError() instead")
    void appServicePlansGetHybridConnectionSignalE(OAIAppServicePlans_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetHybridConnectionSignalError(OAIAppServicePlans_GetHybridConnection_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetHybridConnectionPlanLimitSignalError() instead")
    void appServicePlansGetHybridConnectionPlanLimitSignalE(OAIHybridConnectionLimits summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetHybridConnectionPlanLimitSignalError(OAIHybridConnectionLimits summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetRouteForVnetSignalError() instead")
    void appServicePlansGetRouteForVnetSignalE(QList<OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetRouteForVnetSignalError(QList<OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetServerFarmSkusSignalError() instead")
    void appServicePlansGetServerFarmSkusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetServerFarmSkusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetVnetFromServerFarmSignalError() instead")
    void appServicePlansGetVnetFromServerFarmSignalE(OAIAppServicePlans_GetVnetFromServerFarm_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetVnetFromServerFarmSignalError(OAIAppServicePlans_GetVnetFromServerFarm_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetVnetGatewaySignalError() instead")
    void appServicePlansGetVnetGatewaySignalE(OAIAppServicePlans_GetVnetGateway_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetVnetGatewaySignalError(OAIAppServicePlans_GetVnetGateway_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListSignalError() instead")
    void appServicePlansListSignalE(OAIAppServicePlans_List_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListSignalError(OAIAppServicePlans_List_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListByResourceGroupSignalError() instead")
    void appServicePlansListByResourceGroupSignalE(OAIAppServicePlans_List_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListByResourceGroupSignalError(OAIAppServicePlans_List_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListCapabilitiesSignalError() instead")
    void appServicePlansListCapabilitiesSignalE(QList<OAIAppServicePlans_List_200_response_value_inner_sku_capabilities_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListCapabilitiesSignalError(QList<OAIAppServicePlans_List_200_response_value_inner_sku_capabilities_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListHybridConnectionKeysSignalError() instead")
    void appServicePlansListHybridConnectionKeysSignalE(OAIAppServicePlans_ListHybridConnectionKeys_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListHybridConnectionKeysSignalError(OAIAppServicePlans_ListHybridConnectionKeys_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListHybridConnectionsSignalError() instead")
    void appServicePlansListHybridConnectionsSignalE(OAIHybridConnectionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListHybridConnectionsSignalError(OAIHybridConnectionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListMetricDefintionsSignalError() instead")
    void appServicePlansListMetricDefintionsSignalE(OAIAppServicePlans_ListMetricDefintions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListMetricDefintionsSignalError(OAIAppServicePlans_ListMetricDefintions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListMetricsSignalError() instead")
    void appServicePlansListMetricsSignalE(OAIAppServicePlans_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListMetricsSignalError(OAIAppServicePlans_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListRoutesForVnetSignalError() instead")
    void appServicePlansListRoutesForVnetSignalE(QList<OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListRoutesForVnetSignalError(QList<OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListUsagesSignalError() instead")
    void appServicePlansListUsagesSignalE(OAIAppServicePlans_ListUsages_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListUsagesSignalError(OAIAppServicePlans_ListUsages_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListVnetsSignalError() instead")
    void appServicePlansListVnetsSignalE(QList<OAIAppServicePlans_ListVnets_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListVnetsSignalError(QList<OAIAppServicePlans_ListVnets_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListWebAppsSignalError() instead")
    void appServicePlansListWebAppsSignalE(OAIAppServicePlans_ListWebApps_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListWebAppsSignalError(OAIAppServicePlans_ListWebApps_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListWebAppsByHybridConnectionSignalError() instead")
    void appServicePlansListWebAppsByHybridConnectionSignalE(OAIResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListWebAppsByHybridConnectionSignalError(OAIResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansRebootWorkerSignalError() instead")
    void appServicePlansRebootWorkerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansRebootWorkerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansRestartWebAppsSignalError() instead")
    void appServicePlansRestartWebAppsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansRestartWebAppsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansUpdateSignalError() instead")
    void appServicePlansUpdateSignalE(OAIAppServicePlans_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansUpdateSignalError(OAIAppServicePlans_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansUpdateVnetGatewaySignalError() instead")
    void appServicePlansUpdateVnetGatewaySignalE(OAIAppServicePlans_GetVnetGateway_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansUpdateVnetGatewaySignalError(OAIAppServicePlans_GetVnetGateway_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansUpdateVnetRouteSignalError() instead")
    void appServicePlansUpdateVnetRouteSignalE(OAIAppServicePlans_CreateOrUpdateVnetRoute_request summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansUpdateVnetRouteSignalError(OAIAppServicePlans_CreateOrUpdateVnetRoute_request summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appServicePlansCreateOrUpdateSignalErrorFull() instead")
    void appServicePlansCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansCreateOrUpdateVnetRouteSignalErrorFull() instead")
    void appServicePlansCreateOrUpdateVnetRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansCreateOrUpdateVnetRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansDeleteSignalErrorFull() instead")
    void appServicePlansDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansDeleteHybridConnectionSignalErrorFull() instead")
    void appServicePlansDeleteHybridConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansDeleteHybridConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansDeleteVnetRouteSignalErrorFull() instead")
    void appServicePlansDeleteVnetRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansDeleteVnetRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetSignalErrorFull() instead")
    void appServicePlansGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetHybridConnectionSignalErrorFull() instead")
    void appServicePlansGetHybridConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetHybridConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetHybridConnectionPlanLimitSignalErrorFull() instead")
    void appServicePlansGetHybridConnectionPlanLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetHybridConnectionPlanLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetRouteForVnetSignalErrorFull() instead")
    void appServicePlansGetRouteForVnetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetRouteForVnetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetServerFarmSkusSignalErrorFull() instead")
    void appServicePlansGetServerFarmSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetServerFarmSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetVnetFromServerFarmSignalErrorFull() instead")
    void appServicePlansGetVnetFromServerFarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetVnetFromServerFarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansGetVnetGatewaySignalErrorFull() instead")
    void appServicePlansGetVnetGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansGetVnetGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListSignalErrorFull() instead")
    void appServicePlansListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListByResourceGroupSignalErrorFull() instead")
    void appServicePlansListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListCapabilitiesSignalErrorFull() instead")
    void appServicePlansListCapabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListCapabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListHybridConnectionKeysSignalErrorFull() instead")
    void appServicePlansListHybridConnectionKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListHybridConnectionKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListHybridConnectionsSignalErrorFull() instead")
    void appServicePlansListHybridConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListHybridConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListMetricDefintionsSignalErrorFull() instead")
    void appServicePlansListMetricDefintionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListMetricDefintionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListMetricsSignalErrorFull() instead")
    void appServicePlansListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListRoutesForVnetSignalErrorFull() instead")
    void appServicePlansListRoutesForVnetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListRoutesForVnetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListUsagesSignalErrorFull() instead")
    void appServicePlansListUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListVnetsSignalErrorFull() instead")
    void appServicePlansListVnetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListVnetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListWebAppsSignalErrorFull() instead")
    void appServicePlansListWebAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListWebAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansListWebAppsByHybridConnectionSignalErrorFull() instead")
    void appServicePlansListWebAppsByHybridConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansListWebAppsByHybridConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansRebootWorkerSignalErrorFull() instead")
    void appServicePlansRebootWorkerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansRebootWorkerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansRestartWebAppsSignalErrorFull() instead")
    void appServicePlansRestartWebAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansRestartWebAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansUpdateSignalErrorFull() instead")
    void appServicePlansUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansUpdateVnetGatewaySignalErrorFull() instead")
    void appServicePlansUpdateVnetGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansUpdateVnetGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appServicePlansUpdateVnetRouteSignalErrorFull() instead")
    void appServicePlansUpdateVnetRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appServicePlansUpdateVnetRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
