/**
 * AppServicePlans API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppServicePlans_GetHybridConnection_200_response_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppServicePlans_GetHybridConnection_200_response_properties::OAIAppServicePlans_GetHybridConnection_200_response_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppServicePlans_GetHybridConnection_200_response_properties::OAIAppServicePlans_GetHybridConnection_200_response_properties() {
    this->initializeModel();
}

OAIAppServicePlans_GetHybridConnection_200_response_properties::~OAIAppServicePlans_GetHybridConnection_200_response_properties() {}

void OAIAppServicePlans_GetHybridConnection_200_response_properties::initializeModel() {

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_relay_arm_uri_isSet = false;
    m_relay_arm_uri_isValid = false;

    m_relay_name_isSet = false;
    m_relay_name_isValid = false;

    m_send_key_name_isSet = false;
    m_send_key_name_isValid = false;

    m_send_key_value_isSet = false;
    m_send_key_value_isValid = false;

    m_service_bus_namespace_isSet = false;
    m_service_bus_namespace_isValid = false;

    m_service_bus_suffix_isSet = false;
    m_service_bus_suffix_isValid = false;
}

void OAIAppServicePlans_GetHybridConnection_200_response_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppServicePlans_GetHybridConnection_200_response_properties::fromJsonObject(QJsonObject json) {

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_relay_arm_uri_isValid = ::OpenAPI::fromJsonValue(m_relay_arm_uri, json[QString("relayArmUri")]);
    m_relay_arm_uri_isSet = !json[QString("relayArmUri")].isNull() && m_relay_arm_uri_isValid;

    m_relay_name_isValid = ::OpenAPI::fromJsonValue(m_relay_name, json[QString("relayName")]);
    m_relay_name_isSet = !json[QString("relayName")].isNull() && m_relay_name_isValid;

    m_send_key_name_isValid = ::OpenAPI::fromJsonValue(m_send_key_name, json[QString("sendKeyName")]);
    m_send_key_name_isSet = !json[QString("sendKeyName")].isNull() && m_send_key_name_isValid;

    m_send_key_value_isValid = ::OpenAPI::fromJsonValue(m_send_key_value, json[QString("sendKeyValue")]);
    m_send_key_value_isSet = !json[QString("sendKeyValue")].isNull() && m_send_key_value_isValid;

    m_service_bus_namespace_isValid = ::OpenAPI::fromJsonValue(m_service_bus_namespace, json[QString("serviceBusNamespace")]);
    m_service_bus_namespace_isSet = !json[QString("serviceBusNamespace")].isNull() && m_service_bus_namespace_isValid;

    m_service_bus_suffix_isValid = ::OpenAPI::fromJsonValue(m_service_bus_suffix, json[QString("serviceBusSuffix")]);
    m_service_bus_suffix_isSet = !json[QString("serviceBusSuffix")].isNull() && m_service_bus_suffix_isValid;
}

QString OAIAppServicePlans_GetHybridConnection_200_response_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppServicePlans_GetHybridConnection_200_response_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_relay_arm_uri_isSet) {
        obj.insert(QString("relayArmUri"), ::OpenAPI::toJsonValue(m_relay_arm_uri));
    }
    if (m_relay_name_isSet) {
        obj.insert(QString("relayName"), ::OpenAPI::toJsonValue(m_relay_name));
    }
    if (m_send_key_name_isSet) {
        obj.insert(QString("sendKeyName"), ::OpenAPI::toJsonValue(m_send_key_name));
    }
    if (m_send_key_value_isSet) {
        obj.insert(QString("sendKeyValue"), ::OpenAPI::toJsonValue(m_send_key_value));
    }
    if (m_service_bus_namespace_isSet) {
        obj.insert(QString("serviceBusNamespace"), ::OpenAPI::toJsonValue(m_service_bus_namespace));
    }
    if (m_service_bus_suffix_isSet) {
        obj.insert(QString("serviceBusSuffix"), ::OpenAPI::toJsonValue(m_service_bus_suffix));
    }
    return obj;
}

QString OAIAppServicePlans_GetHybridConnection_200_response_properties::getHostname() const {
    return m_hostname;
}
void OAIAppServicePlans_GetHybridConnection_200_response_properties::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_hostname_Valid() const{
    return m_hostname_isValid;
}

qint32 OAIAppServicePlans_GetHybridConnection_200_response_properties::getPort() const {
    return m_port;
}
void OAIAppServicePlans_GetHybridConnection_200_response_properties::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_port_Set() const{
    return m_port_isSet;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIAppServicePlans_GetHybridConnection_200_response_properties::getRelayArmUri() const {
    return m_relay_arm_uri;
}
void OAIAppServicePlans_GetHybridConnection_200_response_properties::setRelayArmUri(const QString &relay_arm_uri) {
    m_relay_arm_uri = relay_arm_uri;
    m_relay_arm_uri_isSet = true;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_relay_arm_uri_Set() const{
    return m_relay_arm_uri_isSet;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_relay_arm_uri_Valid() const{
    return m_relay_arm_uri_isValid;
}

QString OAIAppServicePlans_GetHybridConnection_200_response_properties::getRelayName() const {
    return m_relay_name;
}
void OAIAppServicePlans_GetHybridConnection_200_response_properties::setRelayName(const QString &relay_name) {
    m_relay_name = relay_name;
    m_relay_name_isSet = true;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_relay_name_Set() const{
    return m_relay_name_isSet;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_relay_name_Valid() const{
    return m_relay_name_isValid;
}

QString OAIAppServicePlans_GetHybridConnection_200_response_properties::getSendKeyName() const {
    return m_send_key_name;
}
void OAIAppServicePlans_GetHybridConnection_200_response_properties::setSendKeyName(const QString &send_key_name) {
    m_send_key_name = send_key_name;
    m_send_key_name_isSet = true;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_send_key_name_Set() const{
    return m_send_key_name_isSet;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_send_key_name_Valid() const{
    return m_send_key_name_isValid;
}

QString OAIAppServicePlans_GetHybridConnection_200_response_properties::getSendKeyValue() const {
    return m_send_key_value;
}
void OAIAppServicePlans_GetHybridConnection_200_response_properties::setSendKeyValue(const QString &send_key_value) {
    m_send_key_value = send_key_value;
    m_send_key_value_isSet = true;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_send_key_value_Set() const{
    return m_send_key_value_isSet;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_send_key_value_Valid() const{
    return m_send_key_value_isValid;
}

QString OAIAppServicePlans_GetHybridConnection_200_response_properties::getServiceBusNamespace() const {
    return m_service_bus_namespace;
}
void OAIAppServicePlans_GetHybridConnection_200_response_properties::setServiceBusNamespace(const QString &service_bus_namespace) {
    m_service_bus_namespace = service_bus_namespace;
    m_service_bus_namespace_isSet = true;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_service_bus_namespace_Set() const{
    return m_service_bus_namespace_isSet;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_service_bus_namespace_Valid() const{
    return m_service_bus_namespace_isValid;
}

QString OAIAppServicePlans_GetHybridConnection_200_response_properties::getServiceBusSuffix() const {
    return m_service_bus_suffix;
}
void OAIAppServicePlans_GetHybridConnection_200_response_properties::setServiceBusSuffix(const QString &service_bus_suffix) {
    m_service_bus_suffix = service_bus_suffix;
    m_service_bus_suffix_isSet = true;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_service_bus_suffix_Set() const{
    return m_service_bus_suffix_isSet;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::is_service_bus_suffix_Valid() const{
    return m_service_bus_suffix_isValid;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relay_arm_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relay_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_bus_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_bus_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppServicePlans_GetHybridConnection_200_response_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
