/**
 * AppServicePlans API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppServicePlanPatchResource from '../model/AppServicePlanPatchResource';
import AppServicePlansCreateOrUpdateVnetRouteRequest from '../model/AppServicePlansCreateOrUpdateVnetRouteRequest';
import AppServicePlansGet200Response from '../model/AppServicePlansGet200Response';
import AppServicePlansGetHybridConnection200Response from '../model/AppServicePlansGetHybridConnection200Response';
import AppServicePlansGetVnetFromServerFarm200Response from '../model/AppServicePlansGetVnetFromServerFarm200Response';
import AppServicePlansGetVnetGateway200Response from '../model/AppServicePlansGetVnetGateway200Response';
import AppServicePlansList200Response from '../model/AppServicePlansList200Response';
import AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner from '../model/AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner';
import AppServicePlansListDefaultResponse from '../model/AppServicePlansListDefaultResponse';
import AppServicePlansListHybridConnectionKeys200Response from '../model/AppServicePlansListHybridConnectionKeys200Response';
import AppServicePlansListMetricDefintions200Response from '../model/AppServicePlansListMetricDefintions200Response';
import AppServicePlansListMetrics200Response from '../model/AppServicePlansListMetrics200Response';
import AppServicePlansListUsages200Response from '../model/AppServicePlansListUsages200Response';
import AppServicePlansListVnets200ResponseInner from '../model/AppServicePlansListVnets200ResponseInner';
import AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner from '../model/AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner';
import AppServicePlansListWebApps200Response from '../model/AppServicePlansListWebApps200Response';
import HybridConnectionCollection from '../model/HybridConnectionCollection';
import HybridConnectionLimits from '../model/HybridConnectionLimits';
import ResourceCollection from '../model/ResourceCollection';

/**
* AppServicePlans service.
* @module api/AppServicePlansApi
* @version 2018-02-01
*/
export default class AppServicePlansApi {

    /**
    * Constructs a new AppServicePlansApi. 
    * @alias module:api/AppServicePlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appServicePlansCreateOrUpdate operation.
     * @callback module:api/AppServicePlansApi~appServicePlansCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an App Service Plan.
     * Creates or updates an App Service Plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServicePlansGet200Response} appServicePlan Details of the App Service plan.
     * @param {module:api/AppServicePlansApi~appServicePlansCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansGet200Response}
     */
    appServicePlansCreateOrUpdate(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan, callback) {
      let postBody = appServicePlan;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansCreateOrUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansCreateOrUpdate");
      }
      // verify the required parameter 'appServicePlan' is set
      if (appServicePlan === undefined || appServicePlan === null) {
        throw new Error("Missing the required parameter 'appServicePlan' when calling appServicePlansCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServicePlansGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansCreateOrUpdateVnetRoute operation.
     * @callback module:api/AppServicePlansApi~appServicePlansCreateOrUpdateVnetRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansCreateOrUpdateVnetRouteRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a Virtual Network route in an App Service plan.
     * Create or update a Virtual Network route in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} routeName Name of the Virtual Network route.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServicePlansCreateOrUpdateVnetRouteRequest} route Definition of the Virtual Network route.
     * @param {module:api/AppServicePlansApi~appServicePlansCreateOrUpdateVnetRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansCreateOrUpdateVnetRouteRequest}
     */
    appServicePlansCreateOrUpdateVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, callback) {
      let postBody = route;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling appServicePlansCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling appServicePlansCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'route' is set
      if (route === undefined || route === null) {
        throw new Error("Missing the required parameter 'route' when calling appServicePlansCreateOrUpdateVnetRoute");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServicePlansCreateOrUpdateVnetRouteRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansDelete operation.
     * @callback module:api/AppServicePlansApi~appServicePlansDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an App Service plan.
     * Delete an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServicePlansDelete(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansDeleteHybridConnection operation.
     * @callback module:api/AppServicePlansApi~appServicePlansDeleteHybridConnectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Hybrid Connection in use in an App Service plan.
     * Delete a Hybrid Connection in use in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} namespaceName Name of the Service Bus namespace.
     * @param {String} relayName Name of the Service Bus relay.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansDeleteHybridConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServicePlansDeleteHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansDeleteHybridConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansDeleteHybridConnection");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling appServicePlansDeleteHybridConnection");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling appServicePlansDeleteHybridConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansDeleteHybridConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansDeleteHybridConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansDeleteVnetRoute operation.
     * @callback module:api/AppServicePlansApi~appServicePlansDeleteVnetRouteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Virtual Network route in an App Service plan.
     * Delete a Virtual Network route in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} routeName Name of the Virtual Network route.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansDeleteVnetRouteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServicePlansDeleteVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansDeleteVnetRoute");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansDeleteVnetRoute");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling appServicePlansDeleteVnetRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling appServicePlansDeleteVnetRoute");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansDeleteVnetRoute");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansDeleteVnetRoute");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansGet operation.
     * @callback module:api/AppServicePlansApi~appServicePlansGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an App Service plan.
     * Get an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansGet200Response}
     */
    appServicePlansGet(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansGetHybridConnection operation.
     * @callback module:api/AppServicePlansApi~appServicePlansGetHybridConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansGetHybridConnection200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Hybrid Connection in use in an App Service plan.
     * Retrieve a Hybrid Connection in use in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} namespaceName Name of the Service Bus namespace.
     * @param {String} relayName Name of the Service Bus relay.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansGetHybridConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansGetHybridConnection200Response}
     */
    appServicePlansGetHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetHybridConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansGetHybridConnection");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling appServicePlansGetHybridConnection");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling appServicePlansGetHybridConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansGetHybridConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansGetHybridConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansGetHybridConnection200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansGetHybridConnectionPlanLimit operation.
     * @callback module:api/AppServicePlansApi~appServicePlansGetHybridConnectionPlanLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HybridConnectionLimits} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the maximum number of Hybrid Connections allowed in an App Service plan.
     * Get the maximum number of Hybrid Connections allowed in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansGetHybridConnectionPlanLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HybridConnectionLimits}
     */
    appServicePlansGetHybridConnectionPlanLimit(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetHybridConnectionPlanLimit");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansGetHybridConnectionPlanLimit");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansGetHybridConnectionPlanLimit");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansGetHybridConnectionPlanLimit");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HybridConnectionLimits;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionPlanLimits/limit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansGetRouteForVnet operation.
     * @callback module:api/AppServicePlansApi~appServicePlansGetRouteForVnetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Virtual Network route in an App Service plan.
     * Get a Virtual Network route in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} routeName Name of the Virtual Network route.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansGetRouteForVnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>}
     */
    appServicePlansGetRouteForVnet(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetRouteForVnet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansGetRouteForVnet");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling appServicePlansGetRouteForVnet");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling appServicePlansGetRouteForVnet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansGetRouteForVnet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansGetRouteForVnet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansGetServerFarmSkus operation.
     * @callback module:api/AppServicePlansApi~appServicePlansGetServerFarmSkusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all selectable SKUs for a given App Service Plan
     * Gets all selectable SKUs for a given App Service Plan
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of App Service Plan
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansGetServerFarmSkusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    appServicePlansGetServerFarmSkus(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetServerFarmSkus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansGetServerFarmSkus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansGetServerFarmSkus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansGetServerFarmSkus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansGetVnetFromServerFarm operation.
     * @callback module:api/AppServicePlansApi~appServicePlansGetVnetFromServerFarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansGetVnetFromServerFarm200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Virtual Network associated with an App Service plan.
     * Get a Virtual Network associated with an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansGetVnetFromServerFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansGetVnetFromServerFarm200Response}
     */
    appServicePlansGetVnetFromServerFarm(resourceGroupName, name, vnetName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetVnetFromServerFarm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansGetVnetFromServerFarm");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling appServicePlansGetVnetFromServerFarm");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansGetVnetFromServerFarm");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansGetVnetFromServerFarm");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansGetVnetFromServerFarm200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansGetVnetGateway operation.
     * @callback module:api/AppServicePlansApi~appServicePlansGetVnetGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansGetVnetGateway200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Virtual Network gateway.
     * Get a Virtual Network gateway.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansGetVnetGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansGetVnetGateway200Response}
     */
    appServicePlansGetVnetGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetVnetGateway");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansGetVnetGateway");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling appServicePlansGetVnetGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling appServicePlansGetVnetGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansGetVnetGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansGetVnetGateway");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansGetVnetGateway200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansList operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all App Service plans for a subscription.
     * Get all App Service plans for a subscription.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [detailed] Specify <code>true</code> to return all App Service plan properties. The default is <code>false</code>, which returns a subset of the properties.  Retrieval of all properties may increase the API latency.
     * @param {module:api/AppServicePlansApi~appServicePlansListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansList200Response}
     */
    appServicePlansList(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'detailed': opts['detailed'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansList200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListByResourceGroup operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all App Service plans in a resource group.
     * Get all App Service plans in a resource group.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansList200Response}
     */
    appServicePlansListByResourceGroup(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansList200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListCapabilities operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListCapabilitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all capabilities of an App Service plan.
     * List all capabilities of an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansListCapabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner>}
     */
    appServicePlansListCapabilities(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListCapabilities");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansListCapabilities");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListCapabilities");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListCapabilities");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/capabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListHybridConnectionKeys operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListHybridConnectionKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansListHybridConnectionKeys200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the send key name and value of a Hybrid Connection.
     * Get the send key name and value of a Hybrid Connection.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} namespaceName The name of the Service Bus namespace.
     * @param {String} relayName The name of the Service Bus relay.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansListHybridConnectionKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansListHybridConnectionKeys200Response}
     */
    appServicePlansListHybridConnectionKeys(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListHybridConnectionKeys");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansListHybridConnectionKeys");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling appServicePlansListHybridConnectionKeys");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling appServicePlansListHybridConnectionKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListHybridConnectionKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListHybridConnectionKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansListHybridConnectionKeys200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListHybridConnections operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListHybridConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HybridConnectionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all Hybrid Connections in use in an App Service plan.
     * Retrieve all Hybrid Connections in use in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansListHybridConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HybridConnectionCollection}
     */
    appServicePlansListHybridConnections(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListHybridConnections");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansListHybridConnections");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListHybridConnections");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListHybridConnections");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HybridConnectionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionRelays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListMetricDefintions operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListMetricDefintionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansListMetricDefintions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics that can be queried for an App Service plan, and their definitions.
     * Get metrics that can be queried for an App Service plan, and their definitions.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansListMetricDefintionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansListMetricDefintions200Response}
     */
    appServicePlansListMetricDefintions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListMetricDefintions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansListMetricDefintions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListMetricDefintions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListMetricDefintions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansListMetricDefintions200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListMetrics operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansListMetrics200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics for an App Service plan.
     * Get metrics for an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [details] Specify <code>true</code> to include instance details. The default is <code>false</code>.
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/AppServicePlansApi~appServicePlansListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansListMetrics200Response}
     */
    appServicePlansListMetrics(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListMetrics");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansListMetrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListMetrics");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'details': opts['details'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansListMetrics200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListRoutesForVnet operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListRoutesForVnetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all routes that are associated with a Virtual Network in an App Service plan.
     * Get all routes that are associated with a Virtual Network in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansListRoutesForVnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>}
     */
    appServicePlansListRoutesForVnet(resourceGroupName, name, vnetName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListRoutesForVnet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansListRoutesForVnet");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling appServicePlansListRoutesForVnet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListRoutesForVnet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListRoutesForVnet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListUsages operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansListUsages200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets server farm usage information
     * Gets server farm usage information
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of App Service Plan
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2').
     * @param {module:api/AppServicePlansApi~appServicePlansListUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansListUsages200Response}
     */
    appServicePlansListUsages(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListUsages");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansListUsages");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListUsages");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansListUsages200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListVnets operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListVnetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppServicePlansListVnets200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Virtual Networks associated with an App Service plan.
     * Get all Virtual Networks associated with an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansListVnetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppServicePlansListVnets200ResponseInner>}
     */
    appServicePlansListVnets(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListVnets");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansListVnets");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListVnets");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListVnets");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppServicePlansListVnets200ResponseInner];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListWebApps operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListWebAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansListWebApps200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all apps associated with an App Service plan.
     * Get all apps associated with an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Skip to a web app in the list of webapps associated with app service plan. If specified, the resulting list will contain web apps starting from (including) the skipToken. Otherwise, the resulting list contains web apps from the start of the list
     * @param {String} [filter] Supported filter: $filter=state eq running. Returns only web apps that are currently running
     * @param {String} [top] List page size. If specified, results are paged.
     * @param {module:api/AppServicePlansApi~appServicePlansListWebAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansListWebApps200Response}
     */
    appServicePlansListWebApps(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListWebApps");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansListWebApps");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListWebApps");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListWebApps");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$skipToken': opts['skipToken'],
        '$filter': opts['filter'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppServicePlansListWebApps200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansListWebAppsByHybridConnection operation.
     * @callback module:api/AppServicePlansApi~appServicePlansListWebAppsByHybridConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} namespaceName Name of the Hybrid Connection namespace.
     * @param {String} relayName Name of the Hybrid Connection relay.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansListWebAppsByHybridConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceCollection}
     */
    appServicePlansListWebAppsByHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansListWebAppsByHybridConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansListWebAppsByHybridConnection");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling appServicePlansListWebAppsByHybridConnection");
      }
      // verify the required parameter 'relayName' is set
      if (relayName === undefined || relayName === null) {
        throw new Error("Missing the required parameter 'relayName' when calling appServicePlansListWebAppsByHybridConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansListWebAppsByHybridConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansListWebAppsByHybridConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'namespaceName': namespaceName,
        'relayName': relayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansRebootWorker operation.
     * @callback module:api/AppServicePlansApi~appServicePlansRebootWorkerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboot a worker machine in an App Service plan.
     * Reboot a worker machine in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} workerName Name of worker machine, which typically starts with RD.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:api/AppServicePlansApi~appServicePlansRebootWorkerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServicePlansRebootWorker(resourceGroupName, name, workerName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansRebootWorker");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansRebootWorker");
      }
      // verify the required parameter 'workerName' is set
      if (workerName === undefined || workerName === null) {
        throw new Error("Missing the required parameter 'workerName' when calling appServicePlansRebootWorker");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansRebootWorker");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansRebootWorker");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerName': workerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansRestartWebApps operation.
     * @callback module:api/AppServicePlansApi~appServicePlansRestartWebAppsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart all apps in an App Service plan.
     * Restart all apps in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [softRestart] Specify <code>true</code> to perform a soft restart, applies the configuration settings and restarts the apps if necessary. The default is <code>false</code>, which always restarts and reprovisions the apps
     * @param {module:api/AppServicePlansApi~appServicePlansRestartWebAppsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appServicePlansRestartWebApps(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansRestartWebApps");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansRestartWebApps");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansRestartWebApps");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansRestartWebApps");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'softRestart': opts['softRestart'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansUpdate operation.
     * @callback module:api/AppServicePlansApi~appServicePlansUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an App Service Plan.
     * Creates or updates an App Service Plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServicePlanPatchResource} appServicePlan Details of the App Service plan.
     * @param {module:api/AppServicePlansApi~appServicePlansUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansGet200Response}
     */
    appServicePlansUpdate(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan, callback) {
      let postBody = appServicePlan;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansUpdate");
      }
      // verify the required parameter 'appServicePlan' is set
      if (appServicePlan === undefined || appServicePlan === null) {
        throw new Error("Missing the required parameter 'appServicePlan' when calling appServicePlansUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServicePlansGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansUpdateVnetGateway operation.
     * @callback module:api/AppServicePlansApi~appServicePlansUpdateVnetGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansGetVnetGateway200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Virtual Network gateway.
     * Update a Virtual Network gateway.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServicePlansGetVnetGateway200Response} connectionEnvelope Definition of the gateway.
     * @param {module:api/AppServicePlansApi~appServicePlansUpdateVnetGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansGetVnetGateway200Response}
     */
    appServicePlansUpdateVnetGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansUpdateVnetGateway");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansUpdateVnetGateway");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling appServicePlansUpdateVnetGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling appServicePlansUpdateVnetGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansUpdateVnetGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansUpdateVnetGateway");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling appServicePlansUpdateVnetGateway");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServicePlansGetVnetGateway200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appServicePlansUpdateVnetRoute operation.
     * @callback module:api/AppServicePlansApi~appServicePlansUpdateVnetRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppServicePlansCreateOrUpdateVnetRouteRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a Virtual Network route in an App Service plan.
     * Create or update a Virtual Network route in an App Service plan.
     * @param {String} resourceGroupName Name of the resource group to which the resource belongs.
     * @param {String} name Name of the App Service plan.
     * @param {String} vnetName Name of the Virtual Network.
     * @param {String} routeName Name of the Virtual Network route.
     * @param {String} subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
     * @param {String} apiVersion API Version
     * @param {module:model/AppServicePlansCreateOrUpdateVnetRouteRequest} route Definition of the Virtual Network route.
     * @param {module:api/AppServicePlansApi~appServicePlansUpdateVnetRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppServicePlansCreateOrUpdateVnetRouteRequest}
     */
    appServicePlansUpdateVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, callback) {
      let postBody = route;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appServicePlansUpdateVnetRoute");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appServicePlansUpdateVnetRoute");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling appServicePlansUpdateVnetRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling appServicePlansUpdateVnetRoute");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appServicePlansUpdateVnetRoute");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appServicePlansUpdateVnetRoute");
      }
      // verify the required parameter 'route' is set
      if (route === undefined || route === null) {
        throw new Error("Missing the required parameter 'route' when calling appServicePlansUpdateVnetRoute");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppServicePlansCreateOrUpdateVnetRouteRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
