/*
 * AppServicePlans API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppServicePlanPatchResource;
import org.openapitools.client.model.AppServicePlansCreateOrUpdateVnetRouteRequest;
import org.openapitools.client.model.AppServicePlansGet200Response;
import org.openapitools.client.model.AppServicePlansGetHybridConnection200Response;
import org.openapitools.client.model.AppServicePlansGetVnetFromServerFarm200Response;
import org.openapitools.client.model.AppServicePlansGetVnetGateway200Response;
import org.openapitools.client.model.AppServicePlansList200Response;
import org.openapitools.client.model.AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner;
import org.openapitools.client.model.AppServicePlansListHybridConnectionKeys200Response;
import org.openapitools.client.model.AppServicePlansListMetricDefintions200Response;
import org.openapitools.client.model.AppServicePlansListMetrics200Response;
import org.openapitools.client.model.AppServicePlansListUsages200Response;
import org.openapitools.client.model.AppServicePlansListVnets200ResponseInner;
import org.openapitools.client.model.AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner;
import org.openapitools.client.model.AppServicePlansListWebApps200Response;
import org.openapitools.client.model.HybridConnectionCollection;
import org.openapitools.client.model.HybridConnectionLimits;
import org.openapitools.client.model.ResourceCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppServicePlansApi
 */
@Disabled
public class AppServicePlansApiTest {

    private final AppServicePlansApi api = new AppServicePlansApi();

    /**
     * Creates or updates an App Service Plan.
     *
     * Creates or updates an App Service Plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansGet200Response appServicePlan = null;
        AppServicePlansGet200Response response = api.appServicePlansCreateOrUpdate(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan);
        // TODO: test validations
    }

    /**
     * Create or update a Virtual Network route in an App Service plan.
     *
     * Create or update a Virtual Network route in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansCreateOrUpdateVnetRouteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String routeName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansCreateOrUpdateVnetRouteRequest route = null;
        AppServicePlansCreateOrUpdateVnetRouteRequest response = api.appServicePlansCreateOrUpdateVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route);
        // TODO: test validations
    }

    /**
     * Delete an App Service plan.
     *
     * Delete an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.appServicePlansDelete(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a Hybrid Connection in use in an App Service plan.
     *
     * Delete a Hybrid Connection in use in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansDeleteHybridConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.appServicePlansDeleteHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a Virtual Network route in an App Service plan.
     *
     * Delete a Virtual Network route in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansDeleteVnetRouteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String routeName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.appServicePlansDeleteVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get an App Service plan.
     *
     * Get an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansGetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansGet200Response response = api.appServicePlansGet(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieve a Hybrid Connection in use in an App Service plan.
     *
     * Retrieve a Hybrid Connection in use in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansGetHybridConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansGetHybridConnection200Response response = api.appServicePlansGetHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the maximum number of Hybrid Connections allowed in an App Service plan.
     *
     * Get the maximum number of Hybrid Connections allowed in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansGetHybridConnectionPlanLimitTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        HybridConnectionLimits response = api.appServicePlansGetHybridConnectionPlanLimit(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a Virtual Network route in an App Service plan.
     *
     * Get a Virtual Network route in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansGetRouteForVnetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String routeName = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner> response = api.appServicePlansGetRouteForVnet(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all selectable SKUs for a given App Service Plan
     *
     * Gets all selectable SKUs for a given App Service Plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansGetServerFarmSkusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.appServicePlansGetServerFarmSkus(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a Virtual Network associated with an App Service plan.
     *
     * Get a Virtual Network associated with an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansGetVnetFromServerFarmTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansGetVnetFromServerFarm200Response response = api.appServicePlansGetVnetFromServerFarm(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a Virtual Network gateway.
     *
     * Get a Virtual Network gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansGetVnetGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansGetVnetGateway200Response response = api.appServicePlansGetVnetGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all App Service plans for a subscription.
     *
     * Get all App Service plans for a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        Boolean detailed = null;
        AppServicePlansList200Response response = api.appServicePlansList(subscriptionId, apiVersion, detailed);
        // TODO: test validations
    }

    /**
     * Get all App Service plans in a resource group.
     *
     * Get all App Service plans in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansList200Response response = api.appServicePlansListByResourceGroup(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List all capabilities of an App Service plan.
     *
     * List all capabilities of an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListCapabilitiesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner> response = api.appServicePlansListCapabilities(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the send key name and value of a Hybrid Connection.
     *
     * Get the send key name and value of a Hybrid Connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListHybridConnectionKeysTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansListHybridConnectionKeys200Response response = api.appServicePlansListHybridConnectionKeys(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieve all Hybrid Connections in use in an App Service plan.
     *
     * Retrieve all Hybrid Connections in use in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListHybridConnectionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        HybridConnectionCollection response = api.appServicePlansListHybridConnections(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metrics that can be queried for an App Service plan, and their definitions.
     *
     * Get metrics that can be queried for an App Service plan, and their definitions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListMetricDefintionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansListMetricDefintions200Response response = api.appServicePlansListMetricDefintions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metrics for an App Service plan.
     *
     * Get metrics for an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        String $filter = null;
        AppServicePlansListMetrics200Response response = api.appServicePlansListMetrics(resourceGroupName, name, subscriptionId, apiVersion, details, $filter);
        // TODO: test validations
    }

    /**
     * Get all routes that are associated with a Virtual Network in an App Service plan.
     *
     * Get all routes that are associated with a Virtual Network in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListRoutesForVnetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner> response = api.appServicePlansListRoutesForVnet(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets server farm usage information
     *
     * Gets server farm usage information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListUsagesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        AppServicePlansListUsages200Response response = api.appServicePlansListUsages(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Get all Virtual Networks associated with an App Service plan.
     *
     * Get all Virtual Networks associated with an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListVnetsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<AppServicePlansListVnets200ResponseInner> response = api.appServicePlansListVnets(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all apps associated with an App Service plan.
     *
     * Get all apps associated with an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListWebAppsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $skipToken = null;
        String $filter = null;
        String $top = null;
        AppServicePlansListWebApps200Response response = api.appServicePlansListWebApps(resourceGroupName, name, subscriptionId, apiVersion, $skipToken, $filter, $top);
        // TODO: test validations
    }

    /**
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     *
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansListWebAppsByHybridConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String namespaceName = null;
        String relayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ResourceCollection response = api.appServicePlansListWebAppsByHybridConnection(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Reboot a worker machine in an App Service plan.
     *
     * Reboot a worker machine in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansRebootWorkerTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.appServicePlansRebootWorker(resourceGroupName, name, workerName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Restart all apps in an App Service plan.
     *
     * Restart all apps in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansRestartWebAppsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean softRestart = null;
        api.appServicePlansRestartWebApps(resourceGroupName, name, subscriptionId, apiVersion, softRestart);
        // TODO: test validations
    }

    /**
     * Creates or updates an App Service Plan.
     *
     * Creates or updates an App Service Plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlanPatchResource appServicePlan = null;
        AppServicePlansGet200Response response = api.appServicePlansUpdate(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan);
        // TODO: test validations
    }

    /**
     * Update a Virtual Network gateway.
     *
     * Update a Virtual Network gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansUpdateVnetGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansGetVnetGateway200Response connectionEnvelope = null;
        AppServicePlansGetVnetGateway200Response response = api.appServicePlansUpdateVnetGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Create or update a Virtual Network route in an App Service plan.
     *
     * Create or update a Virtual Network route in an App Service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appServicePlansUpdateVnetRouteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String routeName = null;
        String subscriptionId = null;
        String apiVersion = null;
        AppServicePlansCreateOrUpdateVnetRouteRequest route = null;
        AppServicePlansCreateOrUpdateVnetRouteRequest response = api.appServicePlansUpdateVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route);
        // TODO: test validations
    }

}
