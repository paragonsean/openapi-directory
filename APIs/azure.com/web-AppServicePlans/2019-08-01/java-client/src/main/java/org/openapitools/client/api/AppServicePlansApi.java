/*
 * AppServicePlans API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppServicePlanPatchResource;
import org.openapitools.client.model.AppServicePlansCreateOrUpdateVnetRouteRequest;
import org.openapitools.client.model.AppServicePlansGet200Response;
import org.openapitools.client.model.AppServicePlansGetHybridConnection200Response;
import org.openapitools.client.model.AppServicePlansGetVnetFromServerFarm200Response;
import org.openapitools.client.model.AppServicePlansGetVnetGateway200Response;
import org.openapitools.client.model.AppServicePlansList200Response;
import org.openapitools.client.model.AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner;
import org.openapitools.client.model.AppServicePlansListDefaultResponse;
import org.openapitools.client.model.AppServicePlansListUsages200Response;
import org.openapitools.client.model.AppServicePlansListVnets200ResponseInner;
import org.openapitools.client.model.AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner;
import org.openapitools.client.model.AppServicePlansListWebApps200Response;
import org.openapitools.client.model.HybridConnectionCollection;
import org.openapitools.client.model.HybridConnectionKey;
import org.openapitools.client.model.HybridConnectionLimits;
import org.openapitools.client.model.ResourceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppServicePlansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppServicePlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppServicePlansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appServicePlansCreateOrUpdate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServicePlan Details of the App Service plan. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansCreateOrUpdateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServicePlansGet200Response appServicePlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appServicePlan;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansCreateOrUpdateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServicePlansGet200Response appServicePlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansCreateOrUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansCreateOrUpdate(Async)");
        }

        // verify the required parameter 'appServicePlan' is set
        if (appServicePlan == null) {
            throw new ApiException("Missing the required parameter 'appServicePlan' when calling appServicePlansCreateOrUpdate(Async)");
        }

        return appServicePlansCreateOrUpdateCall(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan, _callback);

    }

    /**
     * Creates or updates an App Service Plan.
     * Description for Creates or updates an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServicePlan Details of the App Service plan. (required)
     * @return AppServicePlansGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansGet200Response appServicePlansCreateOrUpdate(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServicePlansGet200Response appServicePlan) throws ApiException {
        ApiResponse<AppServicePlansGet200Response> localVarResp = appServicePlansCreateOrUpdateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan);
        return localVarResp.getData();
    }

    /**
     * Creates or updates an App Service Plan.
     * Description for Creates or updates an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServicePlan Details of the App Service plan. (required)
     * @return ApiResponse&lt;AppServicePlansGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansGet200Response> appServicePlansCreateOrUpdateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServicePlansGet200Response appServicePlan) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansCreateOrUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan, null);
        Type localVarReturnType = new TypeToken<AppServicePlansGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates an App Service Plan. (asynchronously)
     * Description for Creates or updates an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServicePlan Details of the App Service plan. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansCreateOrUpdateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServicePlansGet200Response appServicePlan, final ApiCallback<AppServicePlansGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansCreateOrUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansCreateOrUpdateVnetRoute
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param route Definition of the Virtual Network route. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansCreateOrUpdateVnetRouteCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, AppServicePlansCreateOrUpdateVnetRouteRequest route, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = route;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansCreateOrUpdateVnetRouteValidateBeforeCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, AppServicePlansCreateOrUpdateVnetRouteRequest route, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling appServicePlansCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling appServicePlansCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'route' is set
        if (route == null) {
            throw new ApiException("Missing the required parameter 'route' when calling appServicePlansCreateOrUpdateVnetRoute(Async)");
        }

        return appServicePlansCreateOrUpdateVnetRouteCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, _callback);

    }

    /**
     * Create or update a Virtual Network route in an App Service plan.
     * Description for Create or update a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param route Definition of the Virtual Network route. (required)
     * @return AppServicePlansCreateOrUpdateVnetRouteRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansCreateOrUpdateVnetRouteRequest appServicePlansCreateOrUpdateVnetRoute(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, AppServicePlansCreateOrUpdateVnetRouteRequest route) throws ApiException {
        ApiResponse<AppServicePlansCreateOrUpdateVnetRouteRequest> localVarResp = appServicePlansCreateOrUpdateVnetRouteWithHttpInfo(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route);
        return localVarResp.getData();
    }

    /**
     * Create or update a Virtual Network route in an App Service plan.
     * Description for Create or update a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param route Definition of the Virtual Network route. (required)
     * @return ApiResponse&lt;AppServicePlansCreateOrUpdateVnetRouteRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansCreateOrUpdateVnetRouteRequest> appServicePlansCreateOrUpdateVnetRouteWithHttpInfo(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, AppServicePlansCreateOrUpdateVnetRouteRequest route) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansCreateOrUpdateVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, null);
        Type localVarReturnType = new TypeToken<AppServicePlansCreateOrUpdateVnetRouteRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a Virtual Network route in an App Service plan. (asynchronously)
     * Description for Create or update a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param route Definition of the Virtual Network route. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansCreateOrUpdateVnetRouteAsync(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, AppServicePlansCreateOrUpdateVnetRouteRequest route, final ApiCallback<AppServicePlansCreateOrUpdateVnetRouteRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansCreateOrUpdateVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansCreateOrUpdateVnetRouteRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansDelete
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansDeleteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansDeleteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansDelete(Async)");
        }

        return appServicePlansDeleteCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete an App Service plan.
     * Description for Delete an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void appServicePlansDelete(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        appServicePlansDeleteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
    }

    /**
     * Delete an App Service plan.
     * Description for Delete an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServicePlansDeleteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansDeleteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an App Service plan. (asynchronously)
     * Description for Delete an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansDeleteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansDeleteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansDeleteHybridConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Service Bus namespace. (required)
     * @param relayName Name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hybrid connection does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansDeleteHybridConnectionCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansDeleteHybridConnectionValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansDeleteHybridConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansDeleteHybridConnection(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling appServicePlansDeleteHybridConnection(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling appServicePlansDeleteHybridConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansDeleteHybridConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansDeleteHybridConnection(Async)");
        }

        return appServicePlansDeleteHybridConnectionCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a Hybrid Connection in use in an App Service plan.
     * Description for Delete a Hybrid Connection in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Service Bus namespace. (required)
     * @param relayName Name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hybrid connection does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void appServicePlansDeleteHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        appServicePlansDeleteHybridConnectionWithHttpInfo(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
    }

    /**
     * Delete a Hybrid Connection in use in an App Service plan.
     * Description for Delete a Hybrid Connection in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Service Bus namespace. (required)
     * @param relayName Name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hybrid connection does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServicePlansDeleteHybridConnectionWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansDeleteHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Hybrid Connection in use in an App Service plan. (asynchronously)
     * Description for Delete a Hybrid Connection in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Service Bus namespace. (required)
     * @param relayName Name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted hybrid connection </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Hybrid connection does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansDeleteHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansDeleteHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansDeleteVnetRoute
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted Virtual Network route. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified Virtual Network route does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansDeleteVnetRouteCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansDeleteVnetRouteValidateBeforeCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansDeleteVnetRoute(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansDeleteVnetRoute(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling appServicePlansDeleteVnetRoute(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling appServicePlansDeleteVnetRoute(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansDeleteVnetRoute(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansDeleteVnetRoute(Async)");
        }

        return appServicePlansDeleteVnetRouteCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a Virtual Network route in an App Service plan.
     * Description for Delete a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted Virtual Network route. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified Virtual Network route does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void appServicePlansDeleteVnetRoute(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion) throws ApiException {
        appServicePlansDeleteVnetRouteWithHttpInfo(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion);
    }

    /**
     * Delete a Virtual Network route in an App Service plan.
     * Description for Delete a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted Virtual Network route. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified Virtual Network route does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServicePlansDeleteVnetRouteWithHttpInfo(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansDeleteVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Virtual Network route in an App Service plan. (asynchronously)
     * Description for Delete a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted Virtual Network route. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified Virtual Network route does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansDeleteVnetRouteAsync(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansDeleteVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansGet
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansGetValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansGet(Async)");
        }

        return appServicePlansGetCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get an App Service plan.
     * Description for Get an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServicePlansGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansGet200Response appServicePlansGet(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServicePlansGet200Response> localVarResp = appServicePlansGetWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get an App Service plan.
     * Description for Get an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServicePlansGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansGet200Response> appServicePlansGetWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansGetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServicePlansGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an App Service plan. (asynchronously)
     * Description for Get an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<AppServicePlansGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansGetValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansGetHybridConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Service Bus namespace. (required)
     * @param relayName Name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetHybridConnectionCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansGetHybridConnectionValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetHybridConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansGetHybridConnection(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling appServicePlansGetHybridConnection(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling appServicePlansGetHybridConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansGetHybridConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansGetHybridConnection(Async)");
        }

        return appServicePlansGetHybridConnectionCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieve a Hybrid Connection in use in an App Service plan.
     * Description for Retrieve a Hybrid Connection in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Service Bus namespace. (required)
     * @param relayName Name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServicePlansGetHybridConnection200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansGetHybridConnection200Response appServicePlansGetHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServicePlansGetHybridConnection200Response> localVarResp = appServicePlansGetHybridConnectionWithHttpInfo(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieve a Hybrid Connection in use in an App Service plan.
     * Description for Retrieve a Hybrid Connection in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Service Bus namespace. (required)
     * @param relayName Name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServicePlansGetHybridConnection200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansGetHybridConnection200Response> appServicePlansGetHybridConnectionWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansGetHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServicePlansGetHybridConnection200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a Hybrid Connection in use in an App Service plan. (asynchronously)
     * Description for Retrieve a Hybrid Connection in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Service Bus namespace. (required)
     * @param relayName Name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback<AppServicePlansGetHybridConnection200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansGetHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansGetHybridConnection200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansGetHybridConnectionPlanLimit
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetHybridConnectionPlanLimitCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionPlanLimits/limit"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansGetHybridConnectionPlanLimitValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetHybridConnectionPlanLimit(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansGetHybridConnectionPlanLimit(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansGetHybridConnectionPlanLimit(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansGetHybridConnectionPlanLimit(Async)");
        }

        return appServicePlansGetHybridConnectionPlanLimitCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the maximum number of Hybrid Connections allowed in an App Service plan.
     * Description for Get the maximum number of Hybrid Connections allowed in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return HybridConnectionLimits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public HybridConnectionLimits appServicePlansGetHybridConnectionPlanLimit(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HybridConnectionLimits> localVarResp = appServicePlansGetHybridConnectionPlanLimitWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the maximum number of Hybrid Connections allowed in an App Service plan.
     * Description for Get the maximum number of Hybrid Connections allowed in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HybridConnectionLimits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HybridConnectionLimits> appServicePlansGetHybridConnectionPlanLimitWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansGetHybridConnectionPlanLimitValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HybridConnectionLimits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the maximum number of Hybrid Connections allowed in an App Service plan. (asynchronously)
     * Description for Get the maximum number of Hybrid Connections allowed in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetHybridConnectionPlanLimitAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<HybridConnectionLimits> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansGetHybridConnectionPlanLimitValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HybridConnectionLimits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansGetRouteForVnet
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetRouteForVnetCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansGetRouteForVnetValidateBeforeCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetRouteForVnet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansGetRouteForVnet(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling appServicePlansGetRouteForVnet(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling appServicePlansGetRouteForVnet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansGetRouteForVnet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansGetRouteForVnet(Async)");
        }

        return appServicePlansGetRouteForVnetCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a Virtual Network route in an App Service plan.
     * Description for Get a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner> appServicePlansGetRouteForVnet(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>> localVarResp = appServicePlansGetRouteForVnetWithHttpInfo(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a Virtual Network route in an App Service plan.
     * Description for Get a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>> appServicePlansGetRouteForVnetWithHttpInfo(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansGetRouteForVnetValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Virtual Network route in an App Service plan. (asynchronously)
     * Description for Get a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetRouteForVnetAsync(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback<List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansGetRouteForVnetValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansGetServerFarmSkus
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetServerFarmSkusCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/skus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansGetServerFarmSkusValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetServerFarmSkus(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansGetServerFarmSkus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansGetServerFarmSkus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansGetServerFarmSkus(Async)");
        }

        return appServicePlansGetServerFarmSkusCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all selectable SKUs for a given App Service Plan
     * Description for Gets all selectable SKUs for a given App Service Plan
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object appServicePlansGetServerFarmSkus(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = appServicePlansGetServerFarmSkusWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all selectable SKUs for a given App Service Plan
     * Description for Gets all selectable SKUs for a given App Service Plan
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> appServicePlansGetServerFarmSkusWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansGetServerFarmSkusValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all selectable SKUs for a given App Service Plan (asynchronously)
     * Description for Gets all selectable SKUs for a given App Service Plan
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetServerFarmSkusAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansGetServerFarmSkusValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansGetVnetFromServerFarm
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network could not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetVnetFromServerFarmCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansGetVnetFromServerFarmValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetVnetFromServerFarm(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansGetVnetFromServerFarm(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling appServicePlansGetVnetFromServerFarm(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansGetVnetFromServerFarm(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansGetVnetFromServerFarm(Async)");
        }

        return appServicePlansGetVnetFromServerFarmCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a Virtual Network associated with an App Service plan.
     * Description for Get a Virtual Network associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServicePlansGetVnetFromServerFarm200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network could not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansGetVnetFromServerFarm200Response appServicePlansGetVnetFromServerFarm(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServicePlansGetVnetFromServerFarm200Response> localVarResp = appServicePlansGetVnetFromServerFarmWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a Virtual Network associated with an App Service plan.
     * Description for Get a Virtual Network associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServicePlansGetVnetFromServerFarm200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network could not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansGetVnetFromServerFarm200Response> appServicePlansGetVnetFromServerFarmWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansGetVnetFromServerFarmValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServicePlansGetVnetFromServerFarm200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Virtual Network associated with an App Service plan. (asynchronously)
     * Description for Get a Virtual Network associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network could not be found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetVnetFromServerFarmAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback<AppServicePlansGetVnetFromServerFarm200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansGetVnetFromServerFarmValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansGetVnetFromServerFarm200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansGetVnetGateway
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetVnetGatewayCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansGetVnetGatewayValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansGetVnetGateway(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansGetVnetGateway(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling appServicePlansGetVnetGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling appServicePlansGetVnetGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansGetVnetGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansGetVnetGateway(Async)");
        }

        return appServicePlansGetVnetGatewayCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a Virtual Network gateway.
     * Description for Get a Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServicePlansGetVnetGateway200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansGetVnetGateway200Response appServicePlansGetVnetGateway(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServicePlansGetVnetGateway200Response> localVarResp = appServicePlansGetVnetGatewayWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a Virtual Network gateway.
     * Description for Get a Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServicePlansGetVnetGateway200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansGetVnetGateway200Response> appServicePlansGetVnetGatewayWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansGetVnetGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServicePlansGetVnetGateway200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Virtual Network gateway. (asynchronously)
     * Description for Get a Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansGetVnetGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback<AppServicePlansGetVnetGateway200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansGetVnetGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansGetVnetGateway200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansList
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param detailed Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan properties. The default is &lt;code&gt;false&lt;/code&gt;, which returns a subset of the properties.  Retrieval of all properties may increase the API latency. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListCall(String subscriptionId, String apiVersion, Boolean detailed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansListValidateBeforeCall(String subscriptionId, String apiVersion, Boolean detailed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansList(Async)");
        }

        return appServicePlansListCall(subscriptionId, apiVersion, detailed, _callback);

    }

    /**
     * Get all App Service plans for a subscription.
     * Description for Get all App Service plans for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param detailed Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan properties. The default is &lt;code&gt;false&lt;/code&gt;, which returns a subset of the properties.  Retrieval of all properties may increase the API latency. (optional)
     * @return AppServicePlansList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansList200Response appServicePlansList(String subscriptionId, String apiVersion, Boolean detailed) throws ApiException {
        ApiResponse<AppServicePlansList200Response> localVarResp = appServicePlansListWithHttpInfo(subscriptionId, apiVersion, detailed);
        return localVarResp.getData();
    }

    /**
     * Get all App Service plans for a subscription.
     * Description for Get all App Service plans for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param detailed Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan properties. The default is &lt;code&gt;false&lt;/code&gt;, which returns a subset of the properties.  Retrieval of all properties may increase the API latency. (optional)
     * @return ApiResponse&lt;AppServicePlansList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansList200Response> appServicePlansListWithHttpInfo(String subscriptionId, String apiVersion, Boolean detailed) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansListValidateBeforeCall(subscriptionId, apiVersion, detailed, null);
        Type localVarReturnType = new TypeToken<AppServicePlansList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all App Service plans for a subscription. (asynchronously)
     * Description for Get all App Service plans for a subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param detailed Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan properties. The default is &lt;code&gt;false&lt;/code&gt;, which returns a subset of the properties.  Retrieval of all properties may increase the API latency. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListAsync(String subscriptionId, String apiVersion, Boolean detailed, final ApiCallback<AppServicePlansList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansListValidateBeforeCall(subscriptionId, apiVersion, detailed, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansListByResourceGroup
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansListByResourceGroup(Async)");
        }

        return appServicePlansListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all App Service plans in a resource group.
     * Description for Get all App Service plans in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return AppServicePlansList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansList200Response appServicePlansListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AppServicePlansList200Response> localVarResp = appServicePlansListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all App Service plans in a resource group.
     * Description for Get all App Service plans in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AppServicePlansList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansList200Response> appServicePlansListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AppServicePlansList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all App Service plans in a resource group. (asynchronously)
     * Description for Get all App Service plans in a resource group.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<AppServicePlansList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansListCapabilities
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListCapabilitiesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/capabilities"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansListCapabilitiesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansListCapabilities(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansListCapabilities(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansListCapabilities(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansListCapabilities(Async)");
        }

        return appServicePlansListCapabilitiesCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List all capabilities of an App Service plan.
     * Description for List all capabilities of an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner> appServicePlansListCapabilities(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner>> localVarResp = appServicePlansListCapabilitiesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all capabilities of an App Service plan.
     * Description for List all capabilities of an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner>> appServicePlansListCapabilitiesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansListCapabilitiesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all capabilities of an App Service plan. (asynchronously)
     * Description for List all capabilities of an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListCapabilitiesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansListCapabilitiesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<AppServicePlansList200ResponseValueInnerSkuCapabilitiesInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansListHybridConnectionKeys
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName The name of the Service Bus namespace. (required)
     * @param relayName The name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListHybridConnectionKeysCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansListHybridConnectionKeysValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansListHybridConnectionKeys(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansListHybridConnectionKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling appServicePlansListHybridConnectionKeys(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling appServicePlansListHybridConnectionKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansListHybridConnectionKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansListHybridConnectionKeys(Async)");
        }

        return appServicePlansListHybridConnectionKeysCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the send key name and value of a Hybrid Connection.
     * Description for Get the send key name and value of a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName The name of the Service Bus namespace. (required)
     * @param relayName The name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return HybridConnectionKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public HybridConnectionKey appServicePlansListHybridConnectionKeys(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HybridConnectionKey> localVarResp = appServicePlansListHybridConnectionKeysWithHttpInfo(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the send key name and value of a Hybrid Connection.
     * Description for Get the send key name and value of a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName The name of the Service Bus namespace. (required)
     * @param relayName The name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HybridConnectionKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HybridConnectionKey> appServicePlansListHybridConnectionKeysWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansListHybridConnectionKeysValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HybridConnectionKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the send key name and value of a Hybrid Connection. (asynchronously)
     * Description for Get the send key name and value of a Hybrid Connection.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName The name of the Service Bus namespace. (required)
     * @param relayName The name of the Service Bus relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListHybridConnectionKeysAsync(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback<HybridConnectionKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansListHybridConnectionKeysValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HybridConnectionKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansListHybridConnections
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListHybridConnectionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionRelays"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansListHybridConnectionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansListHybridConnections(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansListHybridConnections(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansListHybridConnections(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansListHybridConnections(Async)");
        }

        return appServicePlansListHybridConnectionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieve all Hybrid Connections in use in an App Service plan.
     * Description for Retrieve all Hybrid Connections in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return HybridConnectionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public HybridConnectionCollection appServicePlansListHybridConnections(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HybridConnectionCollection> localVarResp = appServicePlansListHybridConnectionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieve all Hybrid Connections in use in an App Service plan.
     * Description for Retrieve all Hybrid Connections in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HybridConnectionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HybridConnectionCollection> appServicePlansListHybridConnectionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansListHybridConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HybridConnectionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all Hybrid Connections in use in an App Service plan. (asynchronously)
     * Description for Retrieve all Hybrid Connections in use in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListHybridConnectionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<HybridConnectionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansListHybridConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HybridConnectionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansListRoutesForVnet
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListRoutesForVnetCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansListRoutesForVnetValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansListRoutesForVnet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansListRoutesForVnet(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling appServicePlansListRoutesForVnet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansListRoutesForVnet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansListRoutesForVnet(Async)");
        }

        return appServicePlansListRoutesForVnetCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all routes that are associated with a Virtual Network in an App Service plan.
     * Description for Get all routes that are associated with a Virtual Network in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner> appServicePlansListRoutesForVnet(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>> localVarResp = appServicePlansListRoutesForVnetWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all routes that are associated with a Virtual Network in an App Service plan.
     * Description for Get all routes that are associated with a Virtual Network in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>> appServicePlansListRoutesForVnetWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansListRoutesForVnetValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all routes that are associated with a Virtual Network in an App Service plan. (asynchronously)
     * Description for Get all routes that are associated with a Virtual Network in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListRoutesForVnetAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback<List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansListRoutesForVnetValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<AppServicePlansListVnets200ResponseInnerPropertiesRoutesInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansListUsages
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListUsagesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansListUsagesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansListUsages(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansListUsages(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansListUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansListUsages(Async)");
        }

        return appServicePlansListUsagesCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * Gets server farm usage information
     * Description for Gets server farm usage information
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;). (optional)
     * @return AppServicePlansListUsages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansListUsages200Response appServicePlansListUsages(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<AppServicePlansListUsages200Response> localVarResp = appServicePlansListUsagesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets server farm usage information
     * Description for Gets server farm usage information
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;). (optional)
     * @return ApiResponse&lt;AppServicePlansListUsages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansListUsages200Response> appServicePlansListUsagesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansListUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<AppServicePlansListUsages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets server farm usage information (asynchronously)
     * Description for Gets server farm usage information
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListUsagesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback<AppServicePlansListUsages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansListUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansListUsages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansListVnets
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListVnetsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansListVnetsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansListVnets(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansListVnets(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansListVnets(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansListVnets(Async)");
        }

        return appServicePlansListVnetsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all Virtual Networks associated with an App Service plan.
     * Description for Get all Virtual Networks associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return List&lt;AppServicePlansListVnets200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<AppServicePlansListVnets200ResponseInner> appServicePlansListVnets(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<AppServicePlansListVnets200ResponseInner>> localVarResp = appServicePlansListVnetsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all Virtual Networks associated with an App Service plan.
     * Description for Get all Virtual Networks associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;AppServicePlansListVnets200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppServicePlansListVnets200ResponseInner>> appServicePlansListVnetsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansListVnetsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<AppServicePlansListVnets200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Virtual Networks associated with an App Service plan. (asynchronously)
     * Description for Get all Virtual Networks associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListVnetsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<AppServicePlansListVnets200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansListVnetsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<AppServicePlansListVnets200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansListWebApps
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $skipToken Skip to a web app in the list of webapps associated with app service plan. If specified, the resulting list will contain web apps starting from (including) the skipToken. Otherwise, the resulting list contains web apps from the start of the list (optional)
     * @param $filter Supported filter: $filter&#x3D;state eq running. Returns only web apps that are currently running (optional)
     * @param $top List page size. If specified, results are paged. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListWebAppsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $skipToken, String $filter, String $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansListWebAppsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $skipToken, String $filter, String $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansListWebApps(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansListWebApps(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansListWebApps(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansListWebApps(Async)");
        }

        return appServicePlansListWebAppsCall(resourceGroupName, name, subscriptionId, apiVersion, $skipToken, $filter, $top, _callback);

    }

    /**
     * Get all apps associated with an App Service plan.
     * Description for Get all apps associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $skipToken Skip to a web app in the list of webapps associated with app service plan. If specified, the resulting list will contain web apps starting from (including) the skipToken. Otherwise, the resulting list contains web apps from the start of the list (optional)
     * @param $filter Supported filter: $filter&#x3D;state eq running. Returns only web apps that are currently running (optional)
     * @param $top List page size. If specified, results are paged. (optional)
     * @return AppServicePlansListWebApps200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansListWebApps200Response appServicePlansListWebApps(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $skipToken, String $filter, String $top) throws ApiException {
        ApiResponse<AppServicePlansListWebApps200Response> localVarResp = appServicePlansListWebAppsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, $skipToken, $filter, $top);
        return localVarResp.getData();
    }

    /**
     * Get all apps associated with an App Service plan.
     * Description for Get all apps associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $skipToken Skip to a web app in the list of webapps associated with app service plan. If specified, the resulting list will contain web apps starting from (including) the skipToken. Otherwise, the resulting list contains web apps from the start of the list (optional)
     * @param $filter Supported filter: $filter&#x3D;state eq running. Returns only web apps that are currently running (optional)
     * @param $top List page size. If specified, results are paged. (optional)
     * @return ApiResponse&lt;AppServicePlansListWebApps200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansListWebApps200Response> appServicePlansListWebAppsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $skipToken, String $filter, String $top) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansListWebAppsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $skipToken, $filter, $top, null);
        Type localVarReturnType = new TypeToken<AppServicePlansListWebApps200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all apps associated with an App Service plan. (asynchronously)
     * Description for Get all apps associated with an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param $skipToken Skip to a web app in the list of webapps associated with app service plan. If specified, the resulting list will contain web apps starting from (including) the skipToken. Otherwise, the resulting list contains web apps from the start of the list (optional)
     * @param $filter Supported filter: $filter&#x3D;state eq running. Returns only web apps that are currently running (optional)
     * @param $top List page size. If specified, results are paged. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListWebAppsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $skipToken, String $filter, String $top, final ApiCallback<AppServicePlansListWebApps200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansListWebAppsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $skipToken, $filter, $top, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansListWebApps200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansListWebAppsByHybridConnection
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Hybrid Connection namespace. (required)
     * @param relayName Name of the Hybrid Connection relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListWebAppsByHybridConnectionCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/sites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansListWebAppsByHybridConnectionValidateBeforeCall(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansListWebAppsByHybridConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansListWebAppsByHybridConnection(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling appServicePlansListWebAppsByHybridConnection(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling appServicePlansListWebAppsByHybridConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansListWebAppsByHybridConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansListWebAppsByHybridConnection(Async)");
        }

        return appServicePlansListWebAppsByHybridConnectionCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     * Description for Get all apps that use a Hybrid Connection in an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Hybrid Connection namespace. (required)
     * @param relayName Name of the Hybrid Connection relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ResourceCollection appServicePlansListWebAppsByHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ResourceCollection> localVarResp = appServicePlansListWebAppsByHybridConnectionWithHttpInfo(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all apps that use a Hybrid Connection in an App Service Plan.
     * Description for Get all apps that use a Hybrid Connection in an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Hybrid Connection namespace. (required)
     * @param relayName Name of the Hybrid Connection relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceCollection> appServicePlansListWebAppsByHybridConnectionWithHttpInfo(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansListWebAppsByHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all apps that use a Hybrid Connection in an App Service Plan. (asynchronously)
     * Description for Get all apps that use a Hybrid Connection in an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param namespaceName Name of the Hybrid Connection namespace. (required)
     * @param relayName Name of the Hybrid Connection relay. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansListWebAppsByHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName, String subscriptionId, String apiVersion, final ApiCallback<ResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansListWebAppsByHybridConnectionValidateBeforeCall(resourceGroupName, name, namespaceName, relayName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansRebootWorker
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param workerName Name of worker machine, which typically starts with RD. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansRebootWorkerCall(String resourceGroupName, String name, String workerName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerName" + "}", localVarApiClient.escapeString(workerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansRebootWorkerValidateBeforeCall(String resourceGroupName, String name, String workerName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansRebootWorker(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansRebootWorker(Async)");
        }

        // verify the required parameter 'workerName' is set
        if (workerName == null) {
            throw new ApiException("Missing the required parameter 'workerName' when calling appServicePlansRebootWorker(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansRebootWorker(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansRebootWorker(Async)");
        }

        return appServicePlansRebootWorkerCall(resourceGroupName, name, workerName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Reboot a worker machine in an App Service plan.
     * Description for Reboot a worker machine in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param workerName Name of worker machine, which typically starts with RD. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void appServicePlansRebootWorker(String resourceGroupName, String name, String workerName, String subscriptionId, String apiVersion) throws ApiException {
        appServicePlansRebootWorkerWithHttpInfo(resourceGroupName, name, workerName, subscriptionId, apiVersion);
    }

    /**
     * Reboot a worker machine in an App Service plan.
     * Description for Reboot a worker machine in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param workerName Name of worker machine, which typically starts with RD. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServicePlansRebootWorkerWithHttpInfo(String resourceGroupName, String name, String workerName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansRebootWorkerValidateBeforeCall(resourceGroupName, name, workerName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reboot a worker machine in an App Service plan. (asynchronously)
     * Description for Reboot a worker machine in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param workerName Name of worker machine, which typically starts with RD. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansRebootWorkerAsync(String resourceGroupName, String name, String workerName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansRebootWorkerValidateBeforeCall(resourceGroupName, name, workerName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansRestartWebApps
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify &lt;code&gt;true&lt;/code&gt; to perform a soft restart, applies the configuration settings and restarts the apps if necessary. The default is &lt;code&gt;false&lt;/code&gt;, which always restarts and reprovisions the apps (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansRestartWebAppsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (softRestart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("softRestart", softRestart));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansRestartWebAppsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansRestartWebApps(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansRestartWebApps(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansRestartWebApps(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansRestartWebApps(Async)");
        }

        return appServicePlansRestartWebAppsCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, _callback);

    }

    /**
     * Restart all apps in an App Service plan.
     * Description for Restart all apps in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify &lt;code&gt;true&lt;/code&gt; to perform a soft restart, applies the configuration settings and restarts the apps if necessary. The default is &lt;code&gt;false&lt;/code&gt;, which always restarts and reprovisions the apps (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public void appServicePlansRestartWebApps(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart) throws ApiException {
        appServicePlansRestartWebAppsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, softRestart);
    }

    /**
     * Restart all apps in an App Service plan.
     * Description for Restart all apps in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify &lt;code&gt;true&lt;/code&gt; to perform a soft restart, applies the configuration settings and restarts the apps if necessary. The default is &lt;code&gt;false&lt;/code&gt;, which always restarts and reprovisions the apps (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appServicePlansRestartWebAppsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansRestartWebAppsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Restart all apps in an App Service plan. (asynchronously)
     * Description for Restart all apps in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param softRestart Specify &lt;code&gt;true&lt;/code&gt; to perform a soft restart, applies the configuration settings and restarts the apps if necessary. The default is &lt;code&gt;false&lt;/code&gt;, which always restarts and reprovisions the apps (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansRestartWebAppsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansRestartWebAppsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansUpdate
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServicePlan Details of the App Service plan. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansUpdateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServicePlanPatchResource appServicePlan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appServicePlan;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansUpdateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServicePlanPatchResource appServicePlan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansUpdate(Async)");
        }

        // verify the required parameter 'appServicePlan' is set
        if (appServicePlan == null) {
            throw new ApiException("Missing the required parameter 'appServicePlan' when calling appServicePlansUpdate(Async)");
        }

        return appServicePlansUpdateCall(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan, _callback);

    }

    /**
     * Creates or updates an App Service Plan.
     * Description for Creates or updates an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServicePlan Details of the App Service plan. (required)
     * @return AppServicePlansGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansGet200Response appServicePlansUpdate(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServicePlanPatchResource appServicePlan) throws ApiException {
        ApiResponse<AppServicePlansGet200Response> localVarResp = appServicePlansUpdateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan);
        return localVarResp.getData();
    }

    /**
     * Creates or updates an App Service Plan.
     * Description for Creates or updates an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServicePlan Details of the App Service plan. (required)
     * @return ApiResponse&lt;AppServicePlansGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansGet200Response> appServicePlansUpdateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServicePlanPatchResource appServicePlan) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan, null);
        Type localVarReturnType = new TypeToken<AppServicePlansGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates an App Service Plan. (asynchronously)
     * Description for Creates or updates an App Service Plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param appServicePlan Details of the App Service plan. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansUpdateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, AppServicePlanPatchResource appServicePlan, final ApiCallback<AppServicePlansGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansUpdateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, appServicePlan, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansUpdateVnetGateway
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Definition of the gateway. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansUpdateVnetGatewayCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, AppServicePlansGetVnetGateway200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansUpdateVnetGatewayValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, AppServicePlansGetVnetGateway200Response connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansUpdateVnetGateway(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansUpdateVnetGateway(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling appServicePlansUpdateVnetGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling appServicePlansUpdateVnetGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansUpdateVnetGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansUpdateVnetGateway(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling appServicePlansUpdateVnetGateway(Async)");
        }

        return appServicePlansUpdateVnetGatewayCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Update a Virtual Network gateway.
     * Description for Update a Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Definition of the gateway. (required)
     * @return AppServicePlansGetVnetGateway200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansGetVnetGateway200Response appServicePlansUpdateVnetGateway(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, AppServicePlansGetVnetGateway200Response connectionEnvelope) throws ApiException {
        ApiResponse<AppServicePlansGetVnetGateway200Response> localVarResp = appServicePlansUpdateVnetGatewayWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Update a Virtual Network gateway.
     * Description for Update a Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Definition of the gateway. (required)
     * @return ApiResponse&lt;AppServicePlansGetVnetGateway200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansGetVnetGateway200Response> appServicePlansUpdateVnetGatewayWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, AppServicePlansGetVnetGateway200Response connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansUpdateVnetGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<AppServicePlansGetVnetGateway200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Virtual Network gateway. (asynchronously)
     * Description for Update a Virtual Network gateway.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope Definition of the gateway. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansUpdateVnetGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, AppServicePlansGetVnetGateway200Response connectionEnvelope, final ApiCallback<AppServicePlansGetVnetGateway200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansUpdateVnetGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansGetVnetGateway200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appServicePlansUpdateVnetRoute
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param route Definition of the Virtual Network route. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansUpdateVnetRouteCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, AppServicePlansCreateOrUpdateVnetRouteRequest route, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = route;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appServicePlansUpdateVnetRouteValidateBeforeCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, AppServicePlansCreateOrUpdateVnetRouteRequest route, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling appServicePlansUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling appServicePlansUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling appServicePlansUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling appServicePlansUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling appServicePlansUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling appServicePlansUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'route' is set
        if (route == null) {
            throw new ApiException("Missing the required parameter 'route' when calling appServicePlansUpdateVnetRoute(Async)");
        }

        return appServicePlansUpdateVnetRouteCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, _callback);

    }

    /**
     * Create or update a Virtual Network route in an App Service plan.
     * Description for Create or update a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param route Definition of the Virtual Network route. (required)
     * @return AppServicePlansCreateOrUpdateVnetRouteRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public AppServicePlansCreateOrUpdateVnetRouteRequest appServicePlansUpdateVnetRoute(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, AppServicePlansCreateOrUpdateVnetRouteRequest route) throws ApiException {
        ApiResponse<AppServicePlansCreateOrUpdateVnetRouteRequest> localVarResp = appServicePlansUpdateVnetRouteWithHttpInfo(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route);
        return localVarResp.getData();
    }

    /**
     * Create or update a Virtual Network route in an App Service plan.
     * Description for Create or update a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param route Definition of the Virtual Network route. (required)
     * @return ApiResponse&lt;AppServicePlansCreateOrUpdateVnetRouteRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppServicePlansCreateOrUpdateVnetRouteRequest> appServicePlansUpdateVnetRouteWithHttpInfo(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, AppServicePlansCreateOrUpdateVnetRouteRequest route) throws ApiException {
        okhttp3.Call localVarCall = appServicePlansUpdateVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, null);
        Type localVarReturnType = new TypeToken<AppServicePlansCreateOrUpdateVnetRouteRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a Virtual Network route in an App Service plan. (asynchronously)
     * Description for Create or update a Virtual Network route in an App Service plan.
     * @param resourceGroupName Name of the resource group to which the resource belongs. (required)
     * @param name Name of the App Service plan. (required)
     * @param vnetName Name of the Virtual Network. (required)
     * @param routeName Name of the Virtual Network route. (required)
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000). (required)
     * @param apiVersion API Version (required)
     * @param route Definition of the Virtual Network route. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> App Service error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appServicePlansUpdateVnetRouteAsync(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, AppServicePlansCreateOrUpdateVnetRouteRequest route, final ApiCallback<AppServicePlansCreateOrUpdateVnetRouteRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = appServicePlansUpdateVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, _callback);
        Type localVarReturnType = new TypeToken<AppServicePlansCreateOrUpdateVnetRouteRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
