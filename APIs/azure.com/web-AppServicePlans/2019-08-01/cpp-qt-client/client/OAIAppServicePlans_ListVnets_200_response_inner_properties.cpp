/**
 * AppServicePlans API Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppServicePlans_ListVnets_200_response_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppServicePlans_ListVnets_200_response_inner_properties::OAIAppServicePlans_ListVnets_200_response_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppServicePlans_ListVnets_200_response_inner_properties::OAIAppServicePlans_ListVnets_200_response_inner_properties() {
    this->initializeModel();
}

OAIAppServicePlans_ListVnets_200_response_inner_properties::~OAIAppServicePlans_ListVnets_200_response_inner_properties() {}

void OAIAppServicePlans_ListVnets_200_response_inner_properties::initializeModel() {

    m_cert_blob_isSet = false;
    m_cert_blob_isValid = false;

    m_cert_thumbprint_isSet = false;
    m_cert_thumbprint_isValid = false;

    m_dns_servers_isSet = false;
    m_dns_servers_isValid = false;

    m_is_swift_isSet = false;
    m_is_swift_isValid = false;

    m_resync_required_isSet = false;
    m_resync_required_isValid = false;

    m_routes_isSet = false;
    m_routes_isValid = false;

    m_vnet_resource_id_isSet = false;
    m_vnet_resource_id_isValid = false;
}

void OAIAppServicePlans_ListVnets_200_response_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppServicePlans_ListVnets_200_response_inner_properties::fromJsonObject(QJsonObject json) {

    m_cert_blob_isValid = ::OpenAPI::fromJsonValue(m_cert_blob, json[QString("certBlob")]);
    m_cert_blob_isSet = !json[QString("certBlob")].isNull() && m_cert_blob_isValid;

    m_cert_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_cert_thumbprint, json[QString("certThumbprint")]);
    m_cert_thumbprint_isSet = !json[QString("certThumbprint")].isNull() && m_cert_thumbprint_isValid;

    m_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_dns_servers, json[QString("dnsServers")]);
    m_dns_servers_isSet = !json[QString("dnsServers")].isNull() && m_dns_servers_isValid;

    m_is_swift_isValid = ::OpenAPI::fromJsonValue(m_is_swift, json[QString("isSwift")]);
    m_is_swift_isSet = !json[QString("isSwift")].isNull() && m_is_swift_isValid;

    m_resync_required_isValid = ::OpenAPI::fromJsonValue(m_resync_required, json[QString("resyncRequired")]);
    m_resync_required_isSet = !json[QString("resyncRequired")].isNull() && m_resync_required_isValid;

    m_routes_isValid = ::OpenAPI::fromJsonValue(m_routes, json[QString("routes")]);
    m_routes_isSet = !json[QString("routes")].isNull() && m_routes_isValid;

    m_vnet_resource_id_isValid = ::OpenAPI::fromJsonValue(m_vnet_resource_id, json[QString("vnetResourceId")]);
    m_vnet_resource_id_isSet = !json[QString("vnetResourceId")].isNull() && m_vnet_resource_id_isValid;
}

QString OAIAppServicePlans_ListVnets_200_response_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppServicePlans_ListVnets_200_response_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_blob_isSet) {
        obj.insert(QString("certBlob"), ::OpenAPI::toJsonValue(m_cert_blob));
    }
    if (m_cert_thumbprint_isSet) {
        obj.insert(QString("certThumbprint"), ::OpenAPI::toJsonValue(m_cert_thumbprint));
    }
    if (m_dns_servers_isSet) {
        obj.insert(QString("dnsServers"), ::OpenAPI::toJsonValue(m_dns_servers));
    }
    if (m_is_swift_isSet) {
        obj.insert(QString("isSwift"), ::OpenAPI::toJsonValue(m_is_swift));
    }
    if (m_resync_required_isSet) {
        obj.insert(QString("resyncRequired"), ::OpenAPI::toJsonValue(m_resync_required));
    }
    if (m_routes.size() > 0) {
        obj.insert(QString("routes"), ::OpenAPI::toJsonValue(m_routes));
    }
    if (m_vnet_resource_id_isSet) {
        obj.insert(QString("vnetResourceId"), ::OpenAPI::toJsonValue(m_vnet_resource_id));
    }
    return obj;
}

QString OAIAppServicePlans_ListVnets_200_response_inner_properties::getCertBlob() const {
    return m_cert_blob;
}
void OAIAppServicePlans_ListVnets_200_response_inner_properties::setCertBlob(const QString &cert_blob) {
    m_cert_blob = cert_blob;
    m_cert_blob_isSet = true;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_cert_blob_Set() const{
    return m_cert_blob_isSet;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_cert_blob_Valid() const{
    return m_cert_blob_isValid;
}

QString OAIAppServicePlans_ListVnets_200_response_inner_properties::getCertThumbprint() const {
    return m_cert_thumbprint;
}
void OAIAppServicePlans_ListVnets_200_response_inner_properties::setCertThumbprint(const QString &cert_thumbprint) {
    m_cert_thumbprint = cert_thumbprint;
    m_cert_thumbprint_isSet = true;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_cert_thumbprint_Set() const{
    return m_cert_thumbprint_isSet;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_cert_thumbprint_Valid() const{
    return m_cert_thumbprint_isValid;
}

QString OAIAppServicePlans_ListVnets_200_response_inner_properties::getDnsServers() const {
    return m_dns_servers;
}
void OAIAppServicePlans_ListVnets_200_response_inner_properties::setDnsServers(const QString &dns_servers) {
    m_dns_servers = dns_servers;
    m_dns_servers_isSet = true;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_dns_servers_Set() const{
    return m_dns_servers_isSet;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_dns_servers_Valid() const{
    return m_dns_servers_isValid;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::isIsSwift() const {
    return m_is_swift;
}
void OAIAppServicePlans_ListVnets_200_response_inner_properties::setIsSwift(const bool &is_swift) {
    m_is_swift = is_swift;
    m_is_swift_isSet = true;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_is_swift_Set() const{
    return m_is_swift_isSet;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_is_swift_Valid() const{
    return m_is_swift_isValid;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::isResyncRequired() const {
    return m_resync_required;
}
void OAIAppServicePlans_ListVnets_200_response_inner_properties::setResyncRequired(const bool &resync_required) {
    m_resync_required = resync_required;
    m_resync_required_isSet = true;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_resync_required_Set() const{
    return m_resync_required_isSet;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_resync_required_Valid() const{
    return m_resync_required_isValid;
}

QList<OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner> OAIAppServicePlans_ListVnets_200_response_inner_properties::getRoutes() const {
    return m_routes;
}
void OAIAppServicePlans_ListVnets_200_response_inner_properties::setRoutes(const QList<OAIAppServicePlans_ListVnets_200_response_inner_properties_routes_inner> &routes) {
    m_routes = routes;
    m_routes_isSet = true;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_routes_Set() const{
    return m_routes_isSet;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_routes_Valid() const{
    return m_routes_isValid;
}

QString OAIAppServicePlans_ListVnets_200_response_inner_properties::getVnetResourceId() const {
    return m_vnet_resource_id;
}
void OAIAppServicePlans_ListVnets_200_response_inner_properties::setVnetResourceId(const QString &vnet_resource_id) {
    m_vnet_resource_id = vnet_resource_id;
    m_vnet_resource_id_isSet = true;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_vnet_resource_id_Set() const{
    return m_vnet_resource_id_isSet;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::is_vnet_resource_id_Valid() const{
    return m_vnet_resource_id_isValid;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_blob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cert_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_servers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_swift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resync_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnet_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppServicePlans_ListVnets_200_response_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
