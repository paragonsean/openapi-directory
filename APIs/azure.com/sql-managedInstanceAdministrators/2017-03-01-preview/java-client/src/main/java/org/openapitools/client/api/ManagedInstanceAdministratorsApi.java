/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ManagedInstanceAdministrator;
import org.openapitools.client.model.ManagedInstanceAdministratorListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagedInstanceAdministratorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagedInstanceAdministratorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagedInstanceAdministratorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for managedInstanceAdministratorsCreateOrUpdate
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The requested administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested administrator parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 PrincipalNotFoundInTenant - AzureAD Lookup returned no results for this name.   * 400 ManagedInstanceIsBusy - Managed Instance is busy with another request.   * 400 InvalidPrincipalType - This principal type is not supported in Windows Azure SQL Database.   * 400 TenantNotFoundInActiveDirectory - Tenant is not available in active directory.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 ActiveDirectoryLookupTimedOut - The operation could not be completed at this time. Please try again later.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstanceAdministratorsCreateOrUpdateCall(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, ManagedInstanceAdministrator parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators/{administratorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "administratorName" + "}", localVarApiClient.escapeString(administratorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstanceAdministratorsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, ManagedInstanceAdministrator parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedInstanceAdministratorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedInstanceAdministratorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'administratorName' is set
        if (administratorName == null) {
            throw new ApiException("Missing the required parameter 'administratorName' when calling managedInstanceAdministratorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstanceAdministratorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstanceAdministratorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling managedInstanceAdministratorsCreateOrUpdate(Async)");
        }

        return managedInstanceAdministratorsCreateOrUpdateCall(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The requested administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested administrator parameters. (required)
     * @return ManagedInstanceAdministrator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 PrincipalNotFoundInTenant - AzureAD Lookup returned no results for this name.   * 400 ManagedInstanceIsBusy - Managed Instance is busy with another request.   * 400 InvalidPrincipalType - This principal type is not supported in Windows Azure SQL Database.   * 400 TenantNotFoundInActiveDirectory - Tenant is not available in active directory.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 ActiveDirectoryLookupTimedOut - The operation could not be completed at this time. Please try again later.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedInstanceAdministrator managedInstanceAdministratorsCreateOrUpdate(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, ManagedInstanceAdministrator parameters) throws ApiException {
        ApiResponse<ManagedInstanceAdministrator> localVarResp = managedInstanceAdministratorsCreateOrUpdateWithHttpInfo(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The requested administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested administrator parameters. (required)
     * @return ApiResponse&lt;ManagedInstanceAdministrator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 PrincipalNotFoundInTenant - AzureAD Lookup returned no results for this name.   * 400 ManagedInstanceIsBusy - Managed Instance is busy with another request.   * 400 InvalidPrincipalType - This principal type is not supported in Windows Azure SQL Database.   * 400 TenantNotFoundInActiveDirectory - Tenant is not available in active directory.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 ActiveDirectoryLookupTimedOut - The operation could not be completed at this time. Please try again later.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedInstanceAdministrator> managedInstanceAdministratorsCreateOrUpdateWithHttpInfo(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, ManagedInstanceAdministrator parameters) throws ApiException {
        okhttp3.Call localVarCall = managedInstanceAdministratorsCreateOrUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ManagedInstanceAdministrator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The requested administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param parameters The requested administrator parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully created the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 PrincipalNotFoundInTenant - AzureAD Lookup returned no results for this name.   * 400 ManagedInstanceIsBusy - Managed Instance is busy with another request.   * 400 InvalidPrincipalType - This principal type is not supported in Windows Azure SQL Database.   * 400 TenantNotFoundInActiveDirectory - Tenant is not available in active directory.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 ActiveDirectoryLookupTimedOut - The operation could not be completed at this time. Please try again later.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstanceAdministratorsCreateOrUpdateAsync(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, ManagedInstanceAdministrator parameters, final ApiCallback<ManagedInstanceAdministrator> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstanceAdministratorsCreateOrUpdateValidateBeforeCall(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ManagedInstanceAdministrator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedInstanceAdministratorsDelete
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 PrincipalNotFoundInTenant - AzureAD Lookup returned no results for this name.   * 400 ManagedInstanceIsBusy - Managed Instance is busy with another request.   * 400 InvalidPrincipalType - This principal type is not supported in Windows Azure SQL Database.   * 400 TenantNotFoundInActiveDirectory - Tenant is not available in active directory.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 ActiveDirectoryLookupTimedOut - The operation could not be completed at this time. Please try again later.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstanceAdministratorsDeleteCall(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators/{administratorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "administratorName" + "}", localVarApiClient.escapeString(administratorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstanceAdministratorsDeleteValidateBeforeCall(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedInstanceAdministratorsDelete(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedInstanceAdministratorsDelete(Async)");
        }

        // verify the required parameter 'administratorName' is set
        if (administratorName == null) {
            throw new ApiException("Missing the required parameter 'administratorName' when calling managedInstanceAdministratorsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstanceAdministratorsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstanceAdministratorsDelete(Async)");
        }

        return managedInstanceAdministratorsDeleteCall(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 PrincipalNotFoundInTenant - AzureAD Lookup returned no results for this name.   * 400 ManagedInstanceIsBusy - Managed Instance is busy with another request.   * 400 InvalidPrincipalType - This principal type is not supported in Windows Azure SQL Database.   * 400 TenantNotFoundInActiveDirectory - Tenant is not available in active directory.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 ActiveDirectoryLookupTimedOut - The operation could not be completed at this time. Please try again later.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public void managedInstanceAdministratorsDelete(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion) throws ApiException {
        managedInstanceAdministratorsDeleteWithHttpInfo(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Deletes a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 PrincipalNotFoundInTenant - AzureAD Lookup returned no results for this name.   * 400 ManagedInstanceIsBusy - Managed Instance is busy with another request.   * 400 InvalidPrincipalType - This principal type is not supported in Windows Azure SQL Database.   * 400 TenantNotFoundInActiveDirectory - Tenant is not available in active directory.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 ActiveDirectoryLookupTimedOut - The operation could not be completed at this time. Please try again later.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> managedInstanceAdministratorsDeleteWithHttpInfo(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedInstanceAdministratorsDeleteValidateBeforeCall(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 400 InvalidParameterValue - An invalid value was given to a parameter.   * 400 InvalidLoginName - The provided login name is invalid.   * 400 PrincipalNotFoundInTenant - AzureAD Lookup returned no results for this name.   * 400 ManagedInstanceIsBusy - Managed Instance is busy with another request.   * 400 InvalidPrincipalType - This principal type is not supported in Windows Azure SQL Database.   * 400 TenantNotFoundInActiveDirectory - Tenant is not available in active directory.   * 400 InvalidUsername - Supplied user name contains invalid characters.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 OperationIdNotFound - The operation with Id does not exist.   * 404 ResourceNotFound - The requested resource was not found.   * 409 OperationCancelled - The operation has been cancelled by user.   * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.   * 500 ActiveDirectoryLookupTimedOut - The operation could not be completed at this time. Please try again later.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstanceAdministratorsDeleteAsync(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstanceAdministratorsDeleteValidateBeforeCall(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedInstanceAdministratorsGet
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstanceAdministratorsGetCall(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators/{administratorName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "administratorName" + "}", localVarApiClient.escapeString(administratorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstanceAdministratorsGetValidateBeforeCall(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedInstanceAdministratorsGet(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedInstanceAdministratorsGet(Async)");
        }

        // verify the required parameter 'administratorName' is set
        if (administratorName == null) {
            throw new ApiException("Missing the required parameter 'administratorName' when calling managedInstanceAdministratorsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstanceAdministratorsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstanceAdministratorsGet(Async)");
        }

        return managedInstanceAdministratorsGetCall(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ManagedInstanceAdministrator
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedInstanceAdministrator managedInstanceAdministratorsGet(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ManagedInstanceAdministrator> localVarResp = managedInstanceAdministratorsGetWithHttpInfo(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;ManagedInstanceAdministrator&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedInstanceAdministrator> managedInstanceAdministratorsGetWithHttpInfo(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedInstanceAdministratorsGetValidateBeforeCall(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ManagedInstanceAdministrator>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a managed instance administrator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param administratorName The administrator name. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified managed instance administrator. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.   * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstanceAdministratorsGetAsync(String resourceGroupName, String managedInstanceName, String administratorName, String subscriptionId, String apiVersion, final ApiCallback<ManagedInstanceAdministrator> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstanceAdministratorsGetValidateBeforeCall(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ManagedInstanceAdministrator>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedInstanceAdministratorsListByInstance
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instance administrators. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstanceAdministratorsListByInstanceCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "managedInstanceName" + "}", localVarApiClient.escapeString(managedInstanceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedInstanceAdministratorsListByInstanceValidateBeforeCall(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedInstanceAdministratorsListByInstance(Async)");
        }

        // verify the required parameter 'managedInstanceName' is set
        if (managedInstanceName == null) {
            throw new ApiException("Missing the required parameter 'managedInstanceName' when calling managedInstanceAdministratorsListByInstance(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedInstanceAdministratorsListByInstance(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedInstanceAdministratorsListByInstance(Async)");
        }

        return managedInstanceAdministratorsListByInstanceCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a list of managed instance administrators.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ManagedInstanceAdministratorListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instance administrators. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ManagedInstanceAdministratorListResult managedInstanceAdministratorsListByInstance(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ManagedInstanceAdministratorListResult> localVarResp = managedInstanceAdministratorsListByInstanceWithHttpInfo(resourceGroupName, managedInstanceName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of managed instance administrators.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @return ApiResponse&lt;ManagedInstanceAdministratorListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instance administrators. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedInstanceAdministratorListResult> managedInstanceAdministratorsListByInstanceWithHttpInfo(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedInstanceAdministratorsListByInstanceValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ManagedInstanceAdministratorListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of managed instance administrators.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param managedInstanceName The name of the managed instance. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param apiVersion The API version to use for the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the list of managed instance administrators. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 SubscriptionNotFound - The requested subscription was not found.   * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.   * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.   * 404 ResourceNotFound - The requested resource was not found.   * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.   * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.   * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.   * 504 RequestTimeout - Service request exceeded the allowed timeout. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedInstanceAdministratorsListByInstanceAsync(String resourceGroupName, String managedInstanceName, String subscriptionId, String apiVersion, final ApiCallback<ManagedInstanceAdministratorListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedInstanceAdministratorsListByInstanceValidateBeforeCall(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ManagedInstanceAdministratorListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
