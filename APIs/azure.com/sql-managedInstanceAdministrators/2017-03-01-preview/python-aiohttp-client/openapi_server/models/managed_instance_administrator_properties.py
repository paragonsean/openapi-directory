# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagedInstanceAdministratorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrator_type: str=None, login: str=None, sid: str=None, tenant_id: str=None):
        """ManagedInstanceAdministratorProperties - a model defined in OpenAPI

        :param administrator_type: The administrator_type of this ManagedInstanceAdministratorProperties.
        :param login: The login of this ManagedInstanceAdministratorProperties.
        :param sid: The sid of this ManagedInstanceAdministratorProperties.
        :param tenant_id: The tenant_id of this ManagedInstanceAdministratorProperties.
        """
        self.openapi_types = {
            'administrator_type': str,
            'login': str,
            'sid': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'administrator_type': 'administratorType',
            'login': 'login',
            'sid': 'sid',
            'tenant_id': 'tenantId'
        }

        self._administrator_type = administrator_type
        self._login = login
        self._sid = sid
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedInstanceAdministratorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedInstanceAdministratorProperties of this ManagedInstanceAdministratorProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrator_type(self):
        """Gets the administrator_type of this ManagedInstanceAdministratorProperties.

        Type of the managed instance administrator.

        :return: The administrator_type of this ManagedInstanceAdministratorProperties.
        :rtype: str
        """
        return self._administrator_type

    @administrator_type.setter
    def administrator_type(self, administrator_type):
        """Sets the administrator_type of this ManagedInstanceAdministratorProperties.

        Type of the managed instance administrator.

        :param administrator_type: The administrator_type of this ManagedInstanceAdministratorProperties.
        :type administrator_type: str
        """
        allowed_values = ["ActiveDirectory"]  # noqa: E501
        if administrator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `administrator_type` ({0}), must be one of {1}"
                .format(administrator_type, allowed_values)
            )

        self._administrator_type = administrator_type

    @property
    def login(self):
        """Gets the login of this ManagedInstanceAdministratorProperties.

        Login name of the managed instance administrator.

        :return: The login of this ManagedInstanceAdministratorProperties.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this ManagedInstanceAdministratorProperties.

        Login name of the managed instance administrator.

        :param login: The login of this ManagedInstanceAdministratorProperties.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")

        self._login = login

    @property
    def sid(self):
        """Gets the sid of this ManagedInstanceAdministratorProperties.

        SID (object ID) of the managed instance administrator.

        :return: The sid of this ManagedInstanceAdministratorProperties.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this ManagedInstanceAdministratorProperties.

        SID (object ID) of the managed instance administrator.

        :param sid: The sid of this ManagedInstanceAdministratorProperties.
        :type sid: str
        """
        if sid is None:
            raise ValueError("Invalid value for `sid`, must not be `None`")

        self._sid = sid

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ManagedInstanceAdministratorProperties.

        Tenant ID of the managed instance administrator.

        :return: The tenant_id of this ManagedInstanceAdministratorProperties.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ManagedInstanceAdministratorProperties.

        Tenant ID of the managed instance administrator.

        :param tenant_id: The tenant_id of this ManagedInstanceAdministratorProperties.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
