/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagedInstanceAdministratorsApi_H
#define OAI_OAIManagedInstanceAdministratorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIManagedInstanceAdministrator.h"
#include "OAIManagedInstanceAdministratorListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagedInstanceAdministratorsApi : public QObject {
    Q_OBJECT

public:
    OAIManagedInstanceAdministratorsApi(const int timeOut = 0);
    ~OAIManagedInstanceAdministratorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  administrator_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIManagedInstanceAdministrator [required]
    */
    virtual void managedInstanceAdministratorsCreateOrUpdate(const QString &resource_group_name, const QString &managed_instance_name, const QString &administrator_name, const QString &subscription_id, const QString &api_version, const OAIManagedInstanceAdministrator &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  administrator_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedInstanceAdministratorsDelete(const QString &resource_group_name, const QString &managed_instance_name, const QString &administrator_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  administrator_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedInstanceAdministratorsGet(const QString &resource_group_name, const QString &managed_instance_name, const QString &administrator_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_instance_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedInstanceAdministratorsListByInstance(const QString &resource_group_name, const QString &managed_instance_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void managedInstanceAdministratorsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void managedInstanceAdministratorsDeleteCallback(OAIHttpRequestWorker *worker);
    void managedInstanceAdministratorsGetCallback(OAIHttpRequestWorker *worker);
    void managedInstanceAdministratorsListByInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void managedInstanceAdministratorsCreateOrUpdateSignal(OAIManagedInstanceAdministrator summary);
    void managedInstanceAdministratorsDeleteSignal();
    void managedInstanceAdministratorsGetSignal(OAIManagedInstanceAdministrator summary);
    void managedInstanceAdministratorsListByInstanceSignal(OAIManagedInstanceAdministratorListResult summary);


    void managedInstanceAdministratorsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstanceAdministrator summary);
    void managedInstanceAdministratorsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void managedInstanceAdministratorsGetSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstanceAdministrator summary);
    void managedInstanceAdministratorsListByInstanceSignalFull(OAIHttpRequestWorker *worker, OAIManagedInstanceAdministratorListResult summary);

    Q_DECL_DEPRECATED_X("Use managedInstanceAdministratorsCreateOrUpdateSignalError() instead")
    void managedInstanceAdministratorsCreateOrUpdateSignalE(OAIManagedInstanceAdministrator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceAdministratorsCreateOrUpdateSignalError(OAIManagedInstanceAdministrator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceAdministratorsDeleteSignalError() instead")
    void managedInstanceAdministratorsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceAdministratorsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceAdministratorsGetSignalError() instead")
    void managedInstanceAdministratorsGetSignalE(OAIManagedInstanceAdministrator summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceAdministratorsGetSignalError(OAIManagedInstanceAdministrator summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceAdministratorsListByInstanceSignalError() instead")
    void managedInstanceAdministratorsListByInstanceSignalE(OAIManagedInstanceAdministratorListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceAdministratorsListByInstanceSignalError(OAIManagedInstanceAdministratorListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use managedInstanceAdministratorsCreateOrUpdateSignalErrorFull() instead")
    void managedInstanceAdministratorsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceAdministratorsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceAdministratorsDeleteSignalErrorFull() instead")
    void managedInstanceAdministratorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceAdministratorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceAdministratorsGetSignalErrorFull() instead")
    void managedInstanceAdministratorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceAdministratorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedInstanceAdministratorsListByInstanceSignalErrorFull() instead")
    void managedInstanceAdministratorsListByInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedInstanceAdministratorsListByInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
