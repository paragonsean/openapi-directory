/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ManagedInstanceAdministrator from '../model/ManagedInstanceAdministrator';
import ManagedInstanceAdministratorListResult from '../model/ManagedInstanceAdministratorListResult';

/**
* ManagedInstanceAdministrators service.
* @module api/ManagedInstanceAdministratorsApi
* @version 2017-03-01-preview
*/
export default class ManagedInstanceAdministratorsApi {

    /**
    * Constructs a new ManagedInstanceAdministratorsApi. 
    * @alias module:api/ManagedInstanceAdministratorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the managedInstanceAdministratorsCreateOrUpdate operation.
     * @callback module:api/ManagedInstanceAdministratorsApi~managedInstanceAdministratorsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedInstanceAdministrator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a managed instance administrator.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {module:model/String} administratorName The requested administrator name.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:model/ManagedInstanceAdministrator} parameters The requested administrator parameters.
     * @param {module:api/ManagedInstanceAdministratorsApi~managedInstanceAdministratorsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedInstanceAdministrator}
     */
    managedInstanceAdministratorsCreateOrUpdate(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedInstanceAdministratorsCreateOrUpdate");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedInstanceAdministratorsCreateOrUpdate");
      }
      // verify the required parameter 'administratorName' is set
      if (administratorName === undefined || administratorName === null) {
        throw new Error("Missing the required parameter 'administratorName' when calling managedInstanceAdministratorsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedInstanceAdministratorsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedInstanceAdministratorsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managedInstanceAdministratorsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'administratorName': administratorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagedInstanceAdministrator;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators/{administratorName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedInstanceAdministratorsDelete operation.
     * @callback module:api/ManagedInstanceAdministratorsApi~managedInstanceAdministratorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a managed instance administrator.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {module:model/String} administratorName The administrator name.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ManagedInstanceAdministratorsApi~managedInstanceAdministratorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managedInstanceAdministratorsDelete(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedInstanceAdministratorsDelete");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedInstanceAdministratorsDelete");
      }
      // verify the required parameter 'administratorName' is set
      if (administratorName === undefined || administratorName === null) {
        throw new Error("Missing the required parameter 'administratorName' when calling managedInstanceAdministratorsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedInstanceAdministratorsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedInstanceAdministratorsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'administratorName': administratorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators/{administratorName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedInstanceAdministratorsGet operation.
     * @callback module:api/ManagedInstanceAdministratorsApi~managedInstanceAdministratorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedInstanceAdministrator} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a managed instance administrator.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {module:model/String} administratorName The administrator name.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ManagedInstanceAdministratorsApi~managedInstanceAdministratorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedInstanceAdministrator}
     */
    managedInstanceAdministratorsGet(resourceGroupName, managedInstanceName, administratorName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedInstanceAdministratorsGet");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedInstanceAdministratorsGet");
      }
      // verify the required parameter 'administratorName' is set
      if (administratorName === undefined || administratorName === null) {
        throw new Error("Missing the required parameter 'administratorName' when calling managedInstanceAdministratorsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedInstanceAdministratorsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedInstanceAdministratorsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'administratorName': administratorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedInstanceAdministrator;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators/{administratorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedInstanceAdministratorsListByInstance operation.
     * @callback module:api/ManagedInstanceAdministratorsApi~managedInstanceAdministratorsListByInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedInstanceAdministratorListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of managed instance administrators.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} managedInstanceName The name of the managed instance.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ManagedInstanceAdministratorsApi~managedInstanceAdministratorsListByInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedInstanceAdministratorListResult}
     */
    managedInstanceAdministratorsListByInstance(resourceGroupName, managedInstanceName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedInstanceAdministratorsListByInstance");
      }
      // verify the required parameter 'managedInstanceName' is set
      if (managedInstanceName === undefined || managedInstanceName === null) {
        throw new Error("Missing the required parameter 'managedInstanceName' when calling managedInstanceAdministratorsListByInstance");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedInstanceAdministratorsListByInstance");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedInstanceAdministratorsListByInstance");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'managedInstanceName': managedInstanceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedInstanceAdministratorListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
