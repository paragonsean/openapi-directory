/*
 * Relay
 * Use these API to manage Azure Relay resources through Azure Resources Manager.
 *
 * The version of the OpenAPI document: 2016-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the HybridConnection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:12.762705-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HybridConnectionProperties {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LISTENER_COUNT = "listenerCount";
  @SerializedName(SERIALIZED_NAME_LISTENER_COUNT)
  private Integer listenerCount;

  public static final String SERIALIZED_NAME_REQUIRES_CLIENT_AUTHORIZATION = "requiresClientAuthorization";
  @SerializedName(SERIALIZED_NAME_REQUIRES_CLIENT_AUTHORIZATION)
  private Boolean requiresClientAuthorization;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_METADATA = "userMetadata";
  @SerializedName(SERIALIZED_NAME_USER_METADATA)
  private String userMetadata;

  public HybridConnectionProperties() {
  }

  public HybridConnectionProperties(
     OffsetDateTime createdAt, 
     Integer listenerCount, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.createdAt = createdAt;
    this.listenerCount = listenerCount;
    this.updatedAt = updatedAt;
  }

  /**
   * The time the HybridConnection was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * The number of listeners for this HybridConnection. min : 1 and max:25 supported
   * minimum: 1
   * maximum: 25
   * @return listenerCount
   */
  @javax.annotation.Nullable
  public Integer getListenerCount() {
    return listenerCount;
  }



  public HybridConnectionProperties requiresClientAuthorization(Boolean requiresClientAuthorization) {
    this.requiresClientAuthorization = requiresClientAuthorization;
    return this;
  }

  /**
   * true if client authorization is needed for this HybridConnection; otherwise, false.
   * @return requiresClientAuthorization
   */
  @javax.annotation.Nullable
  public Boolean getRequiresClientAuthorization() {
    return requiresClientAuthorization;
  }

  public void setRequiresClientAuthorization(Boolean requiresClientAuthorization) {
    this.requiresClientAuthorization = requiresClientAuthorization;
  }


  /**
   * The time the namespace was updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  public HybridConnectionProperties userMetadata(String userMetadata) {
    this.userMetadata = userMetadata;
    return this;
  }

  /**
   * usermetadata is a placeholder to store user-defined string data for the HybridConnection endpoint.e.g. it can be used to store  descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
   * @return userMetadata
   */
  @javax.annotation.Nullable
  public String getUserMetadata() {
    return userMetadata;
  }

  public void setUserMetadata(String userMetadata) {
    this.userMetadata = userMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HybridConnectionProperties hybridConnectionProperties = (HybridConnectionProperties) o;
    return Objects.equals(this.createdAt, hybridConnectionProperties.createdAt) &&
        Objects.equals(this.listenerCount, hybridConnectionProperties.listenerCount) &&
        Objects.equals(this.requiresClientAuthorization, hybridConnectionProperties.requiresClientAuthorization) &&
        Objects.equals(this.updatedAt, hybridConnectionProperties.updatedAt) &&
        Objects.equals(this.userMetadata, hybridConnectionProperties.userMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, listenerCount, requiresClientAuthorization, updatedAt, userMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HybridConnectionProperties {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    listenerCount: ").append(toIndentedString(listenerCount)).append("\n");
    sb.append("    requiresClientAuthorization: ").append(toIndentedString(requiresClientAuthorization)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userMetadata: ").append(toIndentedString(userMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("listenerCount");
    openapiFields.add("requiresClientAuthorization");
    openapiFields.add("updatedAt");
    openapiFields.add("userMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HybridConnectionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HybridConnectionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HybridConnectionProperties is not found in the empty JSON string", HybridConnectionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HybridConnectionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HybridConnectionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("userMetadata") != null && !jsonObj.get("userMetadata").isJsonNull()) && !jsonObj.get("userMetadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userMetadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userMetadata").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HybridConnectionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HybridConnectionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HybridConnectionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HybridConnectionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<HybridConnectionProperties>() {
           @Override
           public void write(JsonWriter out, HybridConnectionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HybridConnectionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HybridConnectionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HybridConnectionProperties
   * @throws IOException if the JSON string is invalid with respect to HybridConnectionProperties
   */
  public static HybridConnectionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HybridConnectionProperties.class);
  }

  /**
   * Convert an instance of HybridConnectionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

