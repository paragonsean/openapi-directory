/*
 * Relay
 * Use these API to manage Azure Relay resources through Azure Resources Manager.
 *
 * The version of the OpenAPI document: 2016-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthorizationRule;
import org.openapitools.client.model.AuthorizationRuleKeys;
import org.openapitools.client.model.AuthorizationRuleListResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HybridConnection;
import org.openapitools.client.model.HybridConnectionListResult;
import org.openapitools.client.model.RegenerateKeysParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HybridConnectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HybridConnectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HybridConnectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for hybridConnectionsCreateOrUpdate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a HybridConnection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to Create Hybrid Connections succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsCreateOrUpdateCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, HybridConnection parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, HybridConnection parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling hybridConnectionsCreateOrUpdate(Async)");
        }

        return hybridConnectionsCreateOrUpdateCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or Updates a service HybridConnection. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a HybridConnection. (required)
     * @return HybridConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to Create Hybrid Connections succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HybridConnection hybridConnectionsCreateOrUpdate(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, HybridConnection parameters) throws ApiException {
        ApiResponse<HybridConnection> localVarResp = hybridConnectionsCreateOrUpdateWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or Updates a service HybridConnection. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a HybridConnection. (required)
     * @return ApiResponse&lt;HybridConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to Create Hybrid Connections succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HybridConnection> hybridConnectionsCreateOrUpdateWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, HybridConnection parameters) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<HybridConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or Updates a service HybridConnection. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a HybridConnection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to Create Hybrid Connections succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsCreateOrUpdateAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, HybridConnection parameters, final ApiCallback<HybridConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<HybridConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsCreateOrUpdateAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The authorization rule parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection Authorization rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsCreateOrUpdateAuthorizationRuleCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, AuthorizationRule parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsCreateOrUpdateAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, AuthorizationRule parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling hybridConnectionsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling hybridConnectionsCreateOrUpdateAuthorizationRule(Async)");
        }

        return hybridConnectionsCreateOrUpdateAuthorizationRuleCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or Updates an authorization rule for a HybridConnection
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The authorization rule parameters (required)
     * @return AuthorizationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection Authorization rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRule hybridConnectionsCreateOrUpdateAuthorizationRule(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, AuthorizationRule parameters) throws ApiException {
        ApiResponse<AuthorizationRule> localVarResp = hybridConnectionsCreateOrUpdateAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or Updates an authorization rule for a HybridConnection
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The authorization rule parameters (required)
     * @return ApiResponse&lt;AuthorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection Authorization rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRule> hybridConnectionsCreateOrUpdateAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, AuthorizationRule parameters) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or Updates an authorization rule for a HybridConnection
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The authorization rule parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection Authorization rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsCreateOrUpdateAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, AuthorizationRule parameters, final ApiCallback<AuthorizationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsDelete
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to delete Hybrid Connections succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Hybrid Connections was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsDeleteCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsDeleteValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsDelete(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsDelete(Async)");
        }

        return hybridConnectionsDeleteCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a HybridConnection .
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to delete Hybrid Connections succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Hybrid Connections was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void hybridConnectionsDelete(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        hybridConnectionsDeleteWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a HybridConnection .
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to delete Hybrid Connections succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Hybrid Connections was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hybridConnectionsDeleteWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsDeleteValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a HybridConnection .
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to delete Hybrid Connections succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Hybrid Connections was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsDeleteAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsDeleteValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsDeleteAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection authorizationRule deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Authorization rule does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsDeleteAuthorizationRuleCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsDeleteAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling hybridConnectionsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsDeleteAuthorizationRule(Async)");
        }

        return hybridConnectionsDeleteAuthorizationRuleCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a HybridConnection authorization rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection authorizationRule deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Authorization rule does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void hybridConnectionsDeleteAuthorizationRule(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        hybridConnectionsDeleteAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a HybridConnection authorization rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection authorizationRule deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Authorization rule does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hybridConnectionsDeleteAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a HybridConnection authorization rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection authorizationRule deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Authorization rule does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsDeleteAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsGet
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved hybridConnection description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsGetCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsGetValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsGet(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsGet(Async)");
        }

        return hybridConnectionsGetCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns the description for the specified HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return HybridConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved hybridConnection description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HybridConnection hybridConnectionsGet(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<HybridConnection> localVarResp = hybridConnectionsGetWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the description for the specified HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;HybridConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved hybridConnection description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HybridConnection> hybridConnectionsGetWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsGetValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<HybridConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the description for the specified HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved hybridConnection description </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsGetAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback<HybridConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsGetValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<HybridConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsGetAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection AuthorizationRule returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsGetAuthorizationRuleCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsGetAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling hybridConnectionsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsGetAuthorizationRule(Async)");
        }

        return hybridConnectionsGetAuthorizationRuleCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * HybridConnection authorizationRule for a HybridConnection by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection AuthorizationRule returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRule hybridConnectionsGetAuthorizationRule(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationRule> localVarResp = hybridConnectionsGetAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * HybridConnection authorizationRule for a HybridConnection by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection AuthorizationRule returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRule> hybridConnectionsGetAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * HybridConnection authorizationRule for a HybridConnection by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection AuthorizationRule returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsGetAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsListAuthorizationRules
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsListAuthorizationRulesCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}/authorizationRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsListAuthorizationRulesValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsListAuthorizationRules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsListAuthorizationRules(Async)");
        }

        return hybridConnectionsListAuthorizationRulesCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Authorization rules for a HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRuleListResult hybridConnectionsListAuthorizationRules(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationRuleListResult> localVarResp = hybridConnectionsListAuthorizationRulesWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Authorization rules for a HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRuleListResult> hybridConnectionsListAuthorizationRulesWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Authorization rules for a HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsListAuthorizationRulesAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsListByNamespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to retrieve HybridConnections by NameSpace succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsListByNamespaceCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsListByNamespaceValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsListByNamespace(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsListByNamespace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsListByNamespace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsListByNamespace(Async)");
        }

        return hybridConnectionsListByNamespaceCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists the HybridConnection within the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return HybridConnectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to retrieve HybridConnections by NameSpace succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HybridConnectionListResult hybridConnectionsListByNamespace(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<HybridConnectionListResult> localVarResp = hybridConnectionsListByNamespaceWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the HybridConnection within the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;HybridConnectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to retrieve HybridConnections by NameSpace succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HybridConnectionListResult> hybridConnectionsListByNamespaceWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsListByNamespaceValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<HybridConnectionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the HybridConnection within the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to retrieve HybridConnections by NameSpace succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsListByNamespaceAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback<HybridConnectionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsListByNamespaceValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<HybridConnectionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsListKeys
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to retirve ConnectionStrings to the HybridConnection succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsListKeysCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}/ListKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsListKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsListKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsListKeys(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsListKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling hybridConnectionsListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsListKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsListKeys(Async)");
        }

        return hybridConnectionsListKeysCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Primary and Secondary ConnectionStrings to the HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationRuleKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to retirve ConnectionStrings to the HybridConnection succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRuleKeys hybridConnectionsListKeys(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationRuleKeys> localVarResp = hybridConnectionsListKeysWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Primary and Secondary ConnectionStrings to the HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationRuleKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to retirve ConnectionStrings to the HybridConnection succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRuleKeys> hybridConnectionsListKeysWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsListKeysValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationRuleKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Primary and Secondary ConnectionStrings to the HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to retirve ConnectionStrings to the HybridConnection succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsListKeysAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationRuleKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsListKeysValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRuleKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsListPostAuthorizationRules
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsListPostAuthorizationRulesCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}/authorizationRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsListPostAuthorizationRulesValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsListPostAuthorizationRules(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsListPostAuthorizationRules(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsListPostAuthorizationRules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsListPostAuthorizationRules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsListPostAuthorizationRules(Async)");
        }

        return hybridConnectionsListPostAuthorizationRulesCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Authorization rules for a HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRuleListResult hybridConnectionsListPostAuthorizationRules(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationRuleListResult> localVarResp = hybridConnectionsListPostAuthorizationRulesWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Authorization rules for a HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRuleListResult> hybridConnectionsListPostAuthorizationRulesWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsListPostAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Authorization rules for a HybridConnection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsListPostAuthorizationRulesAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsListPostAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsPostAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection AuthorizationRule returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsPostAuthorizationRuleCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsPostAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling hybridConnectionsPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsPostAuthorizationRule(Async)");
        }

        return hybridConnectionsPostAuthorizationRuleCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * HybridConnection authorizationRule for a HybridConnection by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection AuthorizationRule returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRule hybridConnectionsPostAuthorizationRule(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationRule> localVarResp = hybridConnectionsPostAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * HybridConnection authorizationRule for a HybridConnection by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection AuthorizationRule returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRule> hybridConnectionsPostAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsPostAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * HybridConnection authorizationRule for a HybridConnection by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HybridConnection AuthorizationRule returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsPostAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsPostAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridConnectionsRegenerateKeys
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate Auth Rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to regenerate ConnectionStrings to HybridConnection succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsRegenerateKeysCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/HybridConnections/{hybridConnectionName}/authorizationRules/{authorizationRuleName}/regenerateKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "hybridConnectionName" + "}", localVarApiClient.escapeString(hybridConnectionName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridConnectionsRegenerateKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hybridConnectionsRegenerateKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling hybridConnectionsRegenerateKeys(Async)");
        }

        // verify the required parameter 'hybridConnectionName' is set
        if (hybridConnectionName == null) {
            throw new ApiException("Missing the required parameter 'hybridConnectionName' when calling hybridConnectionsRegenerateKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling hybridConnectionsRegenerateKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hybridConnectionsRegenerateKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hybridConnectionsRegenerateKeys(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling hybridConnectionsRegenerateKeys(Async)");
        }

        return hybridConnectionsRegenerateKeysCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Regenerates the Primary or Secondary ConnectionStrings to the HybridConnection
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate Auth Rule. (required)
     * @return AuthorizationRuleKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to regenerate ConnectionStrings to HybridConnection succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRuleKeys hybridConnectionsRegenerateKeys(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters) throws ApiException {
        ApiResponse<AuthorizationRuleKeys> localVarResp = hybridConnectionsRegenerateKeysWithHttpInfo(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates the Primary or Secondary ConnectionStrings to the HybridConnection
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate Auth Rule. (required)
     * @return ApiResponse&lt;AuthorizationRuleKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to regenerate ConnectionStrings to HybridConnection succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRuleKeys> hybridConnectionsRegenerateKeysWithHttpInfo(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = hybridConnectionsRegenerateKeysValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<AuthorizationRuleKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the Primary or Secondary ConnectionStrings to the HybridConnection
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param hybridConnectionName The hybrid connection name. (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate Auth Rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to regenerate ConnectionStrings to HybridConnection succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridConnectionsRegenerateKeysAsync(String resourceGroupName, String namespaceName, String hybridConnectionName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback<AuthorizationRuleKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridConnectionsRegenerateKeysValidateBeforeCall(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRuleKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
