/*
 * Relay
 * Use these API to manage Azure Relay resources through Azure Resources Manager.
 *
 * The version of the OpenAPI document: 2016-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthorizationRule;
import org.openapitools.client.model.AuthorizationRuleKeys;
import org.openapitools.client.model.AuthorizationRuleListResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.RegenerateKeysParameters;
import org.openapitools.client.model.WcfRelay;
import org.openapitools.client.model.WcfRelaysListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WcfRelaysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WcfRelaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WcfRelaysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for wCFRelaysCreateOrUpdate
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a WCFRelays. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to create WCFRelays succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysCreateOrUpdateCall(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, WcfRelay parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysCreateOrUpdateValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, WcfRelay parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling wCFRelaysCreateOrUpdate(Async)");
        }

        return wCFRelaysCreateOrUpdateCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or Updates a WCFRelay. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a WCFRelays. (required)
     * @return WcfRelay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to create WCFRelays succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public WcfRelay wCFRelaysCreateOrUpdate(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, WcfRelay parameters) throws ApiException {
        ApiResponse<WcfRelay> localVarResp = wCFRelaysCreateOrUpdateWithHttpInfo(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or Updates a WCFRelay. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a WCFRelays. (required)
     * @return ApiResponse&lt;WcfRelay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to create WCFRelays succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WcfRelay> wCFRelaysCreateOrUpdateWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, WcfRelay parameters) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<WcfRelay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or Updates a WCFRelay. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to create a WCFRelays. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to create WCFRelays succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysCreateOrUpdateAsync(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, WcfRelay parameters, final ApiCallback<WcfRelay> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysCreateOrUpdateValidateBeforeCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<WcfRelay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysCreateOrUpdateAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The authorization rule parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCFRelays Authorization rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysCreateOrUpdateAuthorizationRuleCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, AuthorizationRule parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysCreateOrUpdateAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, AuthorizationRule parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling wCFRelaysCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysCreateOrUpdateAuthorizationRule(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling wCFRelaysCreateOrUpdateAuthorizationRule(Async)");
        }

        return wCFRelaysCreateOrUpdateAuthorizationRuleCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or Updates an authorization rule for a WCFRelays
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The authorization rule parameters. (required)
     * @return AuthorizationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCFRelays Authorization rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRule wCFRelaysCreateOrUpdateAuthorizationRule(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, AuthorizationRule parameters) throws ApiException {
        ApiResponse<AuthorizationRule> localVarResp = wCFRelaysCreateOrUpdateAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or Updates an authorization rule for a WCFRelays
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The authorization rule parameters. (required)
     * @return ApiResponse&lt;AuthorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCFRelays Authorization rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRule> wCFRelaysCreateOrUpdateAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, AuthorizationRule parameters) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or Updates an authorization rule for a WCFRelays
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The authorization rule parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCFRelays Authorization rule created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysCreateOrUpdateAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, AuthorizationRule parameters, final ApiCallback<AuthorizationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysCreateOrUpdateAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysDelete
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCFRelays deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysDeleteCall(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysDeleteValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysDelete(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysDelete(Async)");
        }

        return wCFRelaysDeleteCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a WCFRelays .
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCFRelays deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void wCFRelaysDelete(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId) throws ApiException {
        wCFRelaysDeleteWithHttpInfo(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a WCFRelays .
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCFRelays deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> wCFRelaysDeleteWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysDeleteValidateBeforeCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a WCFRelays .
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCFRelays deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysDeleteAsync(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysDeleteValidateBeforeCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysDeleteAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to delete WCFRelay authorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request accepted but Authorization rule does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysDeleteAuthorizationRuleCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysDeleteAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling wCFRelaysDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysDeleteAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysDeleteAuthorizationRule(Async)");
        }

        return wCFRelaysDeleteAuthorizationRuleCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a WCFRelays authorization rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to delete WCFRelay authorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request accepted but Authorization rule does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void wCFRelaysDeleteAuthorizationRule(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        wCFRelaysDeleteAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a WCFRelays authorization rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to delete WCFRelay authorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request accepted but Authorization rule does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> wCFRelaysDeleteAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a WCFRelays authorization rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to delete WCFRelay authorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request accepted but Authorization rule does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysDeleteAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysDeleteAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysGet
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved WCFRelays description </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> WCFRelays not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysGetCall(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysGetValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysGet(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysGet(Async)");
        }

        return wCFRelaysGetCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns the description for the specified WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return WcfRelay
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved WCFRelays description </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> WCFRelays not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public WcfRelay wCFRelaysGet(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<WcfRelay> localVarResp = wCFRelaysGetWithHttpInfo(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the description for the specified WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;WcfRelay&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved WCFRelays description </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> WCFRelays not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WcfRelay> wCFRelaysGetWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysGetValidateBeforeCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<WcfRelay>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the description for the specified WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved WCFRelays description </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> WCFRelays not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysGetAsync(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback<WcfRelay> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysGetValidateBeforeCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<WcfRelay>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysGetAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request for WCFRelays AuthorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysGetAuthorizationRuleCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysGetAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling wCFRelaysGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysGetAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysGetAuthorizationRule(Async)");
        }

        return wCFRelaysGetAuthorizationRuleCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Get authorizationRule for a WCFRelays by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request for WCFRelays AuthorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRule wCFRelaysGetAuthorizationRule(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationRule> localVarResp = wCFRelaysGetAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get authorizationRule for a WCFRelays by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request for WCFRelays AuthorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRule> wCFRelaysGetAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get authorizationRule for a WCFRelays by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request for WCFRelays AuthorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysGetAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysGetAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysListAuthorizationRules
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysListAuthorizationRulesCall(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}/authorizationRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysListAuthorizationRulesValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysListAuthorizationRules(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysListAuthorizationRules(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysListAuthorizationRules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysListAuthorizationRules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysListAuthorizationRules(Async)");
        }

        return wCFRelaysListAuthorizationRulesCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Authorization rules for a WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRuleListResult wCFRelaysListAuthorizationRules(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationRuleListResult> localVarResp = wCFRelaysListAuthorizationRulesWithHttpInfo(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Authorization rules for a WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRuleListResult> wCFRelaysListAuthorizationRulesWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Authorization rules for a WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysListAuthorizationRulesAsync(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysListAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysListByNamespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCF Relays returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysListByNamespaceCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysListByNamespaceValidateBeforeCall(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysListByNamespace(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysListByNamespace(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysListByNamespace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysListByNamespace(Async)");
        }

        return wCFRelaysListByNamespaceCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists the WCFRelays within the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return WcfRelaysListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCF Relays returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public WcfRelaysListResult wCFRelaysListByNamespace(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<WcfRelaysListResult> localVarResp = wCFRelaysListByNamespaceWithHttpInfo(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the WCFRelays within the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;WcfRelaysListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCF Relays returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WcfRelaysListResult> wCFRelaysListByNamespaceWithHttpInfo(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysListByNamespaceValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<WcfRelaysListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the WCFRelays within the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> WCF Relays returned successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysListByNamespaceAsync(String resourceGroupName, String namespaceName, String apiVersion, String subscriptionId, final ApiCallback<WcfRelaysListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysListByNamespaceValidateBeforeCall(resourceGroupName, namespaceName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<WcfRelaysListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysListKeys
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysListKeysCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}/authorizationRules/{authorizationRuleName}/ListKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysListKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysListKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysListKeys(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysListKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling wCFRelaysListKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysListKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysListKeys(Async)");
        }

        return wCFRelaysListKeysCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Primary and Secondary ConnectionStrings to the WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationRuleKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRuleKeys wCFRelaysListKeys(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationRuleKeys> localVarResp = wCFRelaysListKeysWithHttpInfo(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Primary and Secondary ConnectionStrings to the WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationRuleKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRuleKeys> wCFRelaysListKeysWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysListKeysValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationRuleKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Primary and Secondary ConnectionStrings to the WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysListKeysAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationRuleKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysListKeysValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRuleKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysListPostAuthorizationRules
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysListPostAuthorizationRulesCall(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}/authorizationRules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysListPostAuthorizationRulesValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysListPostAuthorizationRules(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysListPostAuthorizationRules(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysListPostAuthorizationRules(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysListPostAuthorizationRules(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysListPostAuthorizationRules(Async)");
        }

        return wCFRelaysListPostAuthorizationRulesCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Authorization rules for a WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRuleListResult wCFRelaysListPostAuthorizationRules(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationRuleListResult> localVarResp = wCFRelaysListPostAuthorizationRulesWithHttpInfo(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Authorization rules for a WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRuleListResult> wCFRelaysListPostAuthorizationRulesWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysListPostAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Authorization rules for a WCFRelays.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Authorization rules successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysListPostAuthorizationRulesAsync(String resourceGroupName, String namespaceName, String relayName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysListPostAuthorizationRulesValidateBeforeCall(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysPostAuthorizationRule
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request for WCFRelays AuthorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysPostAuthorizationRuleCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}/authorizationRules/{authorizationRuleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysPostAuthorizationRuleValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling wCFRelaysPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysPostAuthorizationRule(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysPostAuthorizationRule(Async)");
        }

        return wCFRelaysPostAuthorizationRuleCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Get authorizationRule for a WCFRelays by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request for WCFRelays AuthorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRule wCFRelaysPostAuthorizationRule(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationRule> localVarResp = wCFRelaysPostAuthorizationRuleWithHttpInfo(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get authorizationRule for a WCFRelays by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request for WCFRelays AuthorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRule> wCFRelaysPostAuthorizationRuleWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysPostAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get authorizationRule for a WCFRelays by name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request for WCFRelays AuthorizationRule succeeded </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysPostAuthorizationRuleAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysPostAuthorizationRuleValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wCFRelaysRegenerateKeys
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate Auth Rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysRegenerateKeysCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Relay/namespaces/{namespaceName}/WcfRelays/{relayName}/authorizationRules/{authorizationRuleName}/regenerateKeys"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "relayName" + "}", localVarApiClient.escapeString(relayName.toString()))
            .replace("{" + "authorizationRuleName" + "}", localVarApiClient.escapeString(authorizationRuleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wCFRelaysRegenerateKeysValidateBeforeCall(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling wCFRelaysRegenerateKeys(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling wCFRelaysRegenerateKeys(Async)");
        }

        // verify the required parameter 'relayName' is set
        if (relayName == null) {
            throw new ApiException("Missing the required parameter 'relayName' when calling wCFRelaysRegenerateKeys(Async)");
        }

        // verify the required parameter 'authorizationRuleName' is set
        if (authorizationRuleName == null) {
            throw new ApiException("Missing the required parameter 'authorizationRuleName' when calling wCFRelaysRegenerateKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wCFRelaysRegenerateKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling wCFRelaysRegenerateKeys(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling wCFRelaysRegenerateKeys(Async)");
        }

        return wCFRelaysRegenerateKeysCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Regenerates the Primary or Secondary ConnectionStrings to the WCFRelays
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate Auth Rule. (required)
     * @return AuthorizationRuleKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationRuleKeys wCFRelaysRegenerateKeys(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters) throws ApiException {
        ApiResponse<AuthorizationRuleKeys> localVarResp = wCFRelaysRegenerateKeysWithHttpInfo(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates the Primary or Secondary ConnectionStrings to the WCFRelays
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate Auth Rule. (required)
     * @return ApiResponse&lt;AuthorizationRuleKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationRuleKeys> wCFRelaysRegenerateKeysWithHttpInfo(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = wCFRelaysRegenerateKeysValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<AuthorizationRuleKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the Primary or Secondary ConnectionStrings to the WCFRelays
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param namespaceName The Namespace Name (required)
     * @param relayName The relay name (required)
     * @param authorizationRuleName The authorizationRule name. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to regenerate Auth Rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Relay error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wCFRelaysRegenerateKeysAsync(String resourceGroupName, String namespaceName, String relayName, String authorizationRuleName, String apiVersion, String subscriptionId, RegenerateKeysParameters parameters, final ApiCallback<AuthorizationRuleKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = wCFRelaysRegenerateKeysValidateBeforeCall(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationRuleKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
