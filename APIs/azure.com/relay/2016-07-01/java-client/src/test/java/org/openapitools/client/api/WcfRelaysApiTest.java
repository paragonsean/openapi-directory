/*
 * Relay
 * Use these API to manage Azure Relay resources through Azure Resources Manager.
 *
 * The version of the OpenAPI document: 2016-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthorizationRule;
import org.openapitools.client.model.AuthorizationRuleKeys;
import org.openapitools.client.model.AuthorizationRuleListResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.RegenerateKeysParameters;
import org.openapitools.client.model.WcfRelay;
import org.openapitools.client.model.WcfRelaysListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WcfRelaysApi
 */
@Disabled
public class WcfRelaysApiTest {

    private final WcfRelaysApi api = new WcfRelaysApi();

    /**
     * Creates or Updates a WCFRelay. This operation is idempotent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        WcfRelay parameters = null;
        WcfRelay response = api.wCFRelaysCreateOrUpdate(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates or Updates an authorization rule for a WCFRelays
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysCreateOrUpdateAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRule parameters = null;
        AuthorizationRule response = api.wCFRelaysCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a WCFRelays .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.wCFRelaysDelete(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a WCFRelays authorization rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysDeleteAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.wCFRelaysDeleteAuthorizationRule(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns the description for the specified WCFRelays.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysGetTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        WcfRelay response = api.wCFRelaysGet(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get authorizationRule for a WCFRelays by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysGetAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRule response = api.wCFRelaysGetAuthorizationRule(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Authorization rules for a WCFRelays.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysListAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRuleListResult response = api.wCFRelaysListAuthorizationRules(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists the WCFRelays within the namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysListByNamespaceTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        WcfRelaysListResult response = api.wCFRelaysListByNamespace(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Primary and Secondary ConnectionStrings to the WCFRelays.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRuleKeys response = api.wCFRelaysListKeys(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Authorization rules for a WCFRelays.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysListPostAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRuleListResult response = api.wCFRelaysListPostAuthorizationRules(resourceGroupName, namespaceName, relayName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get authorizationRule for a WCFRelays by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysPostAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRule response = api.wCFRelaysPostAuthorizationRule(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Regenerates the Primary or Secondary ConnectionStrings to the WCFRelays
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void wCFRelaysRegenerateKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String relayName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RegenerateKeysParameters parameters = null;
        AuthorizationRuleKeys response = api.wCFRelaysRegenerateKeys(resourceGroupName, namespaceName, relayName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
