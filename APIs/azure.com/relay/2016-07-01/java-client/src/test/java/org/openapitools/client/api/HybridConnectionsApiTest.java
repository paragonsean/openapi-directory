/*
 * Relay
 * Use these API to manage Azure Relay resources through Azure Resources Manager.
 *
 * The version of the OpenAPI document: 2016-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthorizationRule;
import org.openapitools.client.model.AuthorizationRuleKeys;
import org.openapitools.client.model.AuthorizationRuleListResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HybridConnection;
import org.openapitools.client.model.HybridConnectionListResult;
import org.openapitools.client.model.RegenerateKeysParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HybridConnectionsApi
 */
@Disabled
public class HybridConnectionsApiTest {

    private final HybridConnectionsApi api = new HybridConnectionsApi();

    /**
     * Creates or Updates a service HybridConnection. This operation is idempotent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String apiVersion = null;
        String subscriptionId = null;
        HybridConnection parameters = null;
        HybridConnection response = api.hybridConnectionsCreateOrUpdate(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates or Updates an authorization rule for a HybridConnection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsCreateOrUpdateAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRule parameters = null;
        AuthorizationRule response = api.hybridConnectionsCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a HybridConnection .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.hybridConnectionsDelete(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a HybridConnection authorization rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsDeleteAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.hybridConnectionsDeleteAuthorizationRule(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns the description for the specified HybridConnection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsGetTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String apiVersion = null;
        String subscriptionId = null;
        HybridConnection response = api.hybridConnectionsGet(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * HybridConnection authorizationRule for a HybridConnection by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsGetAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRule response = api.hybridConnectionsGetAuthorizationRule(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Authorization rules for a HybridConnection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsListAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRuleListResult response = api.hybridConnectionsListAuthorizationRules(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists the HybridConnection within the namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsListByNamespaceTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        HybridConnectionListResult response = api.hybridConnectionsListByNamespace(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Primary and Secondary ConnectionStrings to the HybridConnection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRuleKeys response = api.hybridConnectionsListKeys(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Authorization rules for a HybridConnection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsListPostAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRuleListResult response = api.hybridConnectionsListPostAuthorizationRules(resourceGroupName, namespaceName, hybridConnectionName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * HybridConnection authorizationRule for a HybridConnection by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsPostAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRule response = api.hybridConnectionsPostAuthorizationRule(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Regenerates the Primary or Secondary ConnectionStrings to the HybridConnection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hybridConnectionsRegenerateKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String hybridConnectionName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RegenerateKeysParameters parameters = null;
        AuthorizationRuleKeys response = api.hybridConnectionsRegenerateKeys(resourceGroupName, namespaceName, hybridConnectionName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
