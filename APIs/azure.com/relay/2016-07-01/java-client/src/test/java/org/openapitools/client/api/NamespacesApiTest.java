/*
 * Relay
 * Use these API to manage Azure Relay resources through Azure Resources Manager.
 *
 * The version of the OpenAPI document: 2016-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthorizationRule;
import org.openapitools.client.model.AuthorizationRuleKeys;
import org.openapitools.client.model.AuthorizationRuleListResult;
import org.openapitools.client.model.CheckNameAvailability;
import org.openapitools.client.model.CheckNameAvailabilityResult;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.RegenerateKeysParameters;
import org.openapitools.client.model.RelayNamespace;
import org.openapitools.client.model.RelayNamespaceListResult;
import org.openapitools.client.model.RelayNamespaceUpdateParameter;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NamespacesApi
 */
@Disabled
public class NamespacesApiTest {

    private final NamespacesApi api = new NamespacesApi();

    /**
     * Check the give namespace name availability.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesCheckNameAvailabilityTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        CheckNameAvailability parameters = null;
        CheckNameAvailabilityResult response = api.namespacesCheckNameAvailability(apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Create Azure Relay namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RelayNamespace parameters = null;
        RelayNamespace response = api.namespacesCreateOrUpdate(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates or Updates an authorization rule for a namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesCreateOrUpdateAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRule parameters = null;
        AuthorizationRule response = api.namespacesCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.namespacesDelete(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a namespace authorization rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesDeleteAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.namespacesDeleteAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns the description for the specified namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesGetTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RelayNamespace response = api.namespacesGet(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Authorization rule for a namespace by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesGetAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRule response = api.namespacesGetAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        RelayNamespaceListResult response = api.namespacesList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Authorization rules for a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRuleListResult response = api.namespacesListAuthorizationRules(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the available namespaces within the ResourceGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RelayNamespaceListResult response = api.namespacesListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Primary and Secondary ConnectionStrings to the namespace 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRuleKeys response = api.namespacesListKeys(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Authorization rules for a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListPostAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRuleListResult response = api.namespacesListPostAuthorizationRules(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Authorization rule for a namespace by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesPostAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AuthorizationRule response = api.namespacesPostAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Regenerates the Primary or Secondary ConnectionStrings to the namespace 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesRegenerateKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RegenerateKeysParameters parameters = null;
        AuthorizationRuleKeys response = api.namespacesRegenerateKeys(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates or updates a namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RelayNamespaceUpdateParameter parameters = null;
        RelayNamespace response = api.namespacesUpdate(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
