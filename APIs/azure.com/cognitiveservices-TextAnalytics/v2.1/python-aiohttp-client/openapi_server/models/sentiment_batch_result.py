# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_record import ErrorRecord
from openapi_server.models.request_statistics import RequestStatistics
from openapi_server.models.sentiment_batch_result_item import SentimentBatchResultItem
from openapi_server import util


class SentimentBatchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents: List[SentimentBatchResultItem]=None, errors: List[ErrorRecord]=None, statistics: RequestStatistics=None):
        """SentimentBatchResult - a model defined in OpenAPI

        :param documents: The documents of this SentimentBatchResult.
        :param errors: The errors of this SentimentBatchResult.
        :param statistics: The statistics of this SentimentBatchResult.
        """
        self.openapi_types = {
            'documents': List[SentimentBatchResultItem],
            'errors': List[ErrorRecord],
            'statistics': RequestStatistics
        }

        self.attribute_map = {
            'documents': 'documents',
            'errors': 'errors',
            'statistics': 'statistics'
        }

        self._documents = documents
        self._errors = errors
        self._statistics = statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SentimentBatchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SentimentBatchResult of this SentimentBatchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents(self):
        """Gets the documents of this SentimentBatchResult.

        Response by document

        :return: The documents of this SentimentBatchResult.
        :rtype: List[SentimentBatchResultItem]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this SentimentBatchResult.

        Response by document

        :param documents: The documents of this SentimentBatchResult.
        :type documents: List[SentimentBatchResultItem]
        """

        self._documents = documents

    @property
    def errors(self):
        """Gets the errors of this SentimentBatchResult.

        Errors and Warnings by document

        :return: The errors of this SentimentBatchResult.
        :rtype: List[ErrorRecord]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SentimentBatchResult.

        Errors and Warnings by document

        :param errors: The errors of this SentimentBatchResult.
        :type errors: List[ErrorRecord]
        """

        self._errors = errors

    @property
    def statistics(self):
        """Gets the statistics of this SentimentBatchResult.


        :return: The statistics of this SentimentBatchResult.
        :rtype: RequestStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this SentimentBatchResult.


        :param statistics: The statistics of this SentimentBatchResult.
        :type statistics: RequestStatistics
        """

        self._statistics = statistics
