# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_statistics import DocumentStatistics
from openapi_server import util


class SentimentBatchResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, score: float=None, statistics: DocumentStatistics=None):
        """SentimentBatchResultItem - a model defined in OpenAPI

        :param id: The id of this SentimentBatchResultItem.
        :param score: The score of this SentimentBatchResultItem.
        :param statistics: The statistics of this SentimentBatchResultItem.
        """
        self.openapi_types = {
            'id': str,
            'score': float,
            'statistics': DocumentStatistics
        }

        self.attribute_map = {
            'id': 'id',
            'score': 'score',
            'statistics': 'statistics'
        }

        self._id = id
        self._score = score
        self._statistics = statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SentimentBatchResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SentimentBatchResultItem of this SentimentBatchResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SentimentBatchResultItem.

        Unique, non-empty document identifier.

        :return: The id of this SentimentBatchResultItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SentimentBatchResultItem.

        Unique, non-empty document identifier.

        :param id: The id of this SentimentBatchResultItem.
        :type id: str
        """

        self._id = id

    @property
    def score(self):
        """Gets the score of this SentimentBatchResultItem.

        A decimal number between 0 and 1 denoting the sentiment of the document. A score above 0.7 usually refers to a positive document while a score below 0.3 normally has a negative connotation. Mid values refer to neutral text.

        :return: The score of this SentimentBatchResultItem.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SentimentBatchResultItem.

        A decimal number between 0 and 1 denoting the sentiment of the document. A score above 0.7 usually refers to a positive document while a score below 0.3 normally has a negative connotation. Mid values refer to neutral text.

        :param score: The score of this SentimentBatchResultItem.
        :type score: float
        """

        self._score = score

    @property
    def statistics(self):
        """Gets the statistics of this SentimentBatchResultItem.


        :return: The statistics of this SentimentBatchResultItem.
        :rtype: DocumentStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this SentimentBatchResultItem.


        :param statistics: The statistics of this SentimentBatchResultItem.
        :type statistics: DocumentStatistics
        """

        self._statistics = statistics
