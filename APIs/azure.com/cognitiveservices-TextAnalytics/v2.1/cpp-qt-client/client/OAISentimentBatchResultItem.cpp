/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentimentBatchResultItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentimentBatchResultItem::OAISentimentBatchResultItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentimentBatchResultItem::OAISentimentBatchResultItem() {
    this->initializeModel();
}

OAISentimentBatchResultItem::~OAISentimentBatchResultItem() {}

void OAISentimentBatchResultItem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAISentimentBatchResultItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentimentBatchResultItem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAISentimentBatchResultItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentimentBatchResultItem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

QString OAISentimentBatchResultItem::getId() const {
    return m_id;
}
void OAISentimentBatchResultItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISentimentBatchResultItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAISentimentBatchResultItem::is_id_Valid() const{
    return m_id_isValid;
}

double OAISentimentBatchResultItem::getScore() const {
    return m_score;
}
void OAISentimentBatchResultItem::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAISentimentBatchResultItem::is_score_Set() const{
    return m_score_isSet;
}

bool OAISentimentBatchResultItem::is_score_Valid() const{
    return m_score_isValid;
}

OAIDocumentStatistics OAISentimentBatchResultItem::getStatistics() const {
    return m_statistics;
}
void OAISentimentBatchResultItem::setStatistics(const OAIDocumentStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAISentimentBatchResultItem::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAISentimentBatchResultItem::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAISentimentBatchResultItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentimentBatchResultItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
