/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguageInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguageInput::OAILanguageInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguageInput::OAILanguageInput() {
    this->initializeModel();
}

OAILanguageInput::~OAILanguageInput() {}

void OAILanguageInput::initializeModel() {

    m_country_hint_isSet = false;
    m_country_hint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAILanguageInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguageInput::fromJsonObject(QJsonObject json) {

    m_country_hint_isValid = ::OpenAPI::fromJsonValue(m_country_hint, json[QString("countryHint")]);
    m_country_hint_isSet = !json[QString("countryHint")].isNull() && m_country_hint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAILanguageInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguageInput::asJsonObject() const {
    QJsonObject obj;
    if (m_country_hint_isSet) {
        obj.insert(QString("countryHint"), ::OpenAPI::toJsonValue(m_country_hint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAILanguageInput::getCountryHint() const {
    return m_country_hint;
}
void OAILanguageInput::setCountryHint(const QString &country_hint) {
    m_country_hint = country_hint;
    m_country_hint_isSet = true;
}

bool OAILanguageInput::is_country_hint_Set() const{
    return m_country_hint_isSet;
}

bool OAILanguageInput::is_country_hint_Valid() const{
    return m_country_hint_isValid;
}

QString OAILanguageInput::getId() const {
    return m_id;
}
void OAILanguageInput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILanguageInput::is_id_Set() const{
    return m_id_isSet;
}

bool OAILanguageInput::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILanguageInput::getText() const {
    return m_text;
}
void OAILanguageInput::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAILanguageInput::is_text_Set() const{
    return m_text_isSet;
}

bool OAILanguageInput::is_text_Valid() const{
    return m_text_isValid;
}

bool OAILanguageInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_hint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguageInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
