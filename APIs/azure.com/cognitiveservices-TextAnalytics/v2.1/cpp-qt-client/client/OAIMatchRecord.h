/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMatchRecord.h
 *
 * 
 */

#ifndef OAIMatchRecord_H
#define OAIMatchRecord_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMatchRecord : public OAIObject {
public:
    OAIMatchRecord();
    OAIMatchRecord(QString json);
    ~OAIMatchRecord() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getEntityTypeScore() const;
    void setEntityTypeScore(const double &entity_type_score);
    bool is_entity_type_score_Set() const;
    bool is_entity_type_score_Valid() const;

    qint32 getLength() const;
    void setLength(const qint32 &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    double getWikipediaScore() const;
    void setWikipediaScore(const double &wikipedia_score);
    bool is_wikipedia_score_Set() const;
    bool is_wikipedia_score_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_entity_type_score;
    bool m_entity_type_score_isSet;
    bool m_entity_type_score_isValid;

    qint32 m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    double m_wikipedia_score;
    bool m_wikipedia_score_isSet;
    bool m_wikipedia_score_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMatchRecord)

#endif // OAIMatchRecord_H
