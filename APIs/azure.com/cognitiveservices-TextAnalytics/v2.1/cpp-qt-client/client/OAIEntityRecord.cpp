/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityRecord::OAIEntityRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityRecord::OAIEntityRecord() {
    this->initializeModel();
}

OAIEntityRecord::~OAIEntityRecord() {}

void OAIEntityRecord::initializeModel() {

    m_bing_id_isSet = false;
    m_bing_id_isValid = false;

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_wikipedia_id_isSet = false;
    m_wikipedia_id_isValid = false;

    m_wikipedia_language_isSet = false;
    m_wikipedia_language_isValid = false;

    m_wikipedia_url_isSet = false;
    m_wikipedia_url_isValid = false;
}

void OAIEntityRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityRecord::fromJsonObject(QJsonObject json) {

    m_bing_id_isValid = ::OpenAPI::fromJsonValue(m_bing_id, json[QString("bingId")]);
    m_bing_id_isSet = !json[QString("bingId")].isNull() && m_bing_id_isValid;

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_wikipedia_id_isValid = ::OpenAPI::fromJsonValue(m_wikipedia_id, json[QString("wikipediaId")]);
    m_wikipedia_id_isSet = !json[QString("wikipediaId")].isNull() && m_wikipedia_id_isValid;

    m_wikipedia_language_isValid = ::OpenAPI::fromJsonValue(m_wikipedia_language, json[QString("wikipediaLanguage")]);
    m_wikipedia_language_isSet = !json[QString("wikipediaLanguage")].isNull() && m_wikipedia_language_isValid;

    m_wikipedia_url_isValid = ::OpenAPI::fromJsonValue(m_wikipedia_url, json[QString("wikipediaUrl")]);
    m_wikipedia_url_isSet = !json[QString("wikipediaUrl")].isNull() && m_wikipedia_url_isValid;
}

QString OAIEntityRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_bing_id_isSet) {
        obj.insert(QString("bingId"), ::OpenAPI::toJsonValue(m_bing_id));
    }
    if (m_matches.size() > 0) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_wikipedia_id_isSet) {
        obj.insert(QString("wikipediaId"), ::OpenAPI::toJsonValue(m_wikipedia_id));
    }
    if (m_wikipedia_language_isSet) {
        obj.insert(QString("wikipediaLanguage"), ::OpenAPI::toJsonValue(m_wikipedia_language));
    }
    if (m_wikipedia_url_isSet) {
        obj.insert(QString("wikipediaUrl"), ::OpenAPI::toJsonValue(m_wikipedia_url));
    }
    return obj;
}

QString OAIEntityRecord::getBingId() const {
    return m_bing_id;
}
void OAIEntityRecord::setBingId(const QString &bing_id) {
    m_bing_id = bing_id;
    m_bing_id_isSet = true;
}

bool OAIEntityRecord::is_bing_id_Set() const{
    return m_bing_id_isSet;
}

bool OAIEntityRecord::is_bing_id_Valid() const{
    return m_bing_id_isValid;
}

QList<OAIMatchRecord> OAIEntityRecord::getMatches() const {
    return m_matches;
}
void OAIEntityRecord::setMatches(const QList<OAIMatchRecord> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAIEntityRecord::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAIEntityRecord::is_matches_Valid() const{
    return m_matches_isValid;
}

QString OAIEntityRecord::getName() const {
    return m_name;
}
void OAIEntityRecord::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEntityRecord::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEntityRecord::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEntityRecord::getSubType() const {
    return m_sub_type;
}
void OAIEntityRecord::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAIEntityRecord::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAIEntityRecord::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString OAIEntityRecord::getType() const {
    return m_type;
}
void OAIEntityRecord::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEntityRecord::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEntityRecord::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIEntityRecord::getWikipediaId() const {
    return m_wikipedia_id;
}
void OAIEntityRecord::setWikipediaId(const QString &wikipedia_id) {
    m_wikipedia_id = wikipedia_id;
    m_wikipedia_id_isSet = true;
}

bool OAIEntityRecord::is_wikipedia_id_Set() const{
    return m_wikipedia_id_isSet;
}

bool OAIEntityRecord::is_wikipedia_id_Valid() const{
    return m_wikipedia_id_isValid;
}

QString OAIEntityRecord::getWikipediaLanguage() const {
    return m_wikipedia_language;
}
void OAIEntityRecord::setWikipediaLanguage(const QString &wikipedia_language) {
    m_wikipedia_language = wikipedia_language;
    m_wikipedia_language_isSet = true;
}

bool OAIEntityRecord::is_wikipedia_language_Set() const{
    return m_wikipedia_language_isSet;
}

bool OAIEntityRecord::is_wikipedia_language_Valid() const{
    return m_wikipedia_language_isValid;
}

QString OAIEntityRecord::getWikipediaUrl() const {
    return m_wikipedia_url;
}
void OAIEntityRecord::setWikipediaUrl(const QString &wikipedia_url) {
    m_wikipedia_url = wikipedia_url;
    m_wikipedia_url_isSet = true;
}

bool OAIEntityRecord::is_wikipedia_url_Set() const{
    return m_wikipedia_url_isSet;
}

bool OAIEntityRecord::is_wikipedia_url_Valid() const{
    return m_wikipedia_url_isValid;
}

bool OAIEntityRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
