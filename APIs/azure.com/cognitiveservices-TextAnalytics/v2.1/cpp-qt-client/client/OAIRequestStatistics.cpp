/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestStatistics::OAIRequestStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestStatistics::OAIRequestStatistics() {
    this->initializeModel();
}

OAIRequestStatistics::~OAIRequestStatistics() {}

void OAIRequestStatistics::initializeModel() {

    m_documents_count_isSet = false;
    m_documents_count_isValid = false;

    m_erroneous_documents_count_isSet = false;
    m_erroneous_documents_count_isValid = false;

    m_transactions_count_isSet = false;
    m_transactions_count_isValid = false;

    m_valid_documents_count_isSet = false;
    m_valid_documents_count_isValid = false;
}

void OAIRequestStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestStatistics::fromJsonObject(QJsonObject json) {

    m_documents_count_isValid = ::OpenAPI::fromJsonValue(m_documents_count, json[QString("documentsCount")]);
    m_documents_count_isSet = !json[QString("documentsCount")].isNull() && m_documents_count_isValid;

    m_erroneous_documents_count_isValid = ::OpenAPI::fromJsonValue(m_erroneous_documents_count, json[QString("erroneousDocumentsCount")]);
    m_erroneous_documents_count_isSet = !json[QString("erroneousDocumentsCount")].isNull() && m_erroneous_documents_count_isValid;

    m_transactions_count_isValid = ::OpenAPI::fromJsonValue(m_transactions_count, json[QString("transactionsCount")]);
    m_transactions_count_isSet = !json[QString("transactionsCount")].isNull() && m_transactions_count_isValid;

    m_valid_documents_count_isValid = ::OpenAPI::fromJsonValue(m_valid_documents_count, json[QString("validDocumentsCount")]);
    m_valid_documents_count_isSet = !json[QString("validDocumentsCount")].isNull() && m_valid_documents_count_isValid;
}

QString OAIRequestStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_documents_count_isSet) {
        obj.insert(QString("documentsCount"), ::OpenAPI::toJsonValue(m_documents_count));
    }
    if (m_erroneous_documents_count_isSet) {
        obj.insert(QString("erroneousDocumentsCount"), ::OpenAPI::toJsonValue(m_erroneous_documents_count));
    }
    if (m_transactions_count_isSet) {
        obj.insert(QString("transactionsCount"), ::OpenAPI::toJsonValue(m_transactions_count));
    }
    if (m_valid_documents_count_isSet) {
        obj.insert(QString("validDocumentsCount"), ::OpenAPI::toJsonValue(m_valid_documents_count));
    }
    return obj;
}

qint32 OAIRequestStatistics::getDocumentsCount() const {
    return m_documents_count;
}
void OAIRequestStatistics::setDocumentsCount(const qint32 &documents_count) {
    m_documents_count = documents_count;
    m_documents_count_isSet = true;
}

bool OAIRequestStatistics::is_documents_count_Set() const{
    return m_documents_count_isSet;
}

bool OAIRequestStatistics::is_documents_count_Valid() const{
    return m_documents_count_isValid;
}

qint32 OAIRequestStatistics::getErroneousDocumentsCount() const {
    return m_erroneous_documents_count;
}
void OAIRequestStatistics::setErroneousDocumentsCount(const qint32 &erroneous_documents_count) {
    m_erroneous_documents_count = erroneous_documents_count;
    m_erroneous_documents_count_isSet = true;
}

bool OAIRequestStatistics::is_erroneous_documents_count_Set() const{
    return m_erroneous_documents_count_isSet;
}

bool OAIRequestStatistics::is_erroneous_documents_count_Valid() const{
    return m_erroneous_documents_count_isValid;
}

qint64 OAIRequestStatistics::getTransactionsCount() const {
    return m_transactions_count;
}
void OAIRequestStatistics::setTransactionsCount(const qint64 &transactions_count) {
    m_transactions_count = transactions_count;
    m_transactions_count_isSet = true;
}

bool OAIRequestStatistics::is_transactions_count_Set() const{
    return m_transactions_count_isSet;
}

bool OAIRequestStatistics::is_transactions_count_Valid() const{
    return m_transactions_count_isValid;
}

qint32 OAIRequestStatistics::getValidDocumentsCount() const {
    return m_valid_documents_count;
}
void OAIRequestStatistics::setValidDocumentsCount(const qint32 &valid_documents_count) {
    m_valid_documents_count = valid_documents_count;
    m_valid_documents_count_isSet = true;
}

bool OAIRequestStatistics::is_valid_documents_count_Set() const{
    return m_valid_documents_count_isSet;
}

bool OAIRequestStatistics::is_valid_documents_count_Valid() const{
    return m_valid_documents_count_isValid;
}

bool OAIRequestStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_erroneous_documents_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_documents_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
