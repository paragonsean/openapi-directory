/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentStatistics::OAIDocumentStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentStatistics::OAIDocumentStatistics() {
    this->initializeModel();
}

OAIDocumentStatistics::~OAIDocumentStatistics() {}

void OAIDocumentStatistics::initializeModel() {

    m_characters_count_isSet = false;
    m_characters_count_isValid = false;

    m_transactions_count_isSet = false;
    m_transactions_count_isValid = false;
}

void OAIDocumentStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentStatistics::fromJsonObject(QJsonObject json) {

    m_characters_count_isValid = ::OpenAPI::fromJsonValue(m_characters_count, json[QString("charactersCount")]);
    m_characters_count_isSet = !json[QString("charactersCount")].isNull() && m_characters_count_isValid;

    m_transactions_count_isValid = ::OpenAPI::fromJsonValue(m_transactions_count, json[QString("transactionsCount")]);
    m_transactions_count_isSet = !json[QString("transactionsCount")].isNull() && m_transactions_count_isValid;
}

QString OAIDocumentStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_characters_count_isSet) {
        obj.insert(QString("charactersCount"), ::OpenAPI::toJsonValue(m_characters_count));
    }
    if (m_transactions_count_isSet) {
        obj.insert(QString("transactionsCount"), ::OpenAPI::toJsonValue(m_transactions_count));
    }
    return obj;
}

qint32 OAIDocumentStatistics::getCharactersCount() const {
    return m_characters_count;
}
void OAIDocumentStatistics::setCharactersCount(const qint32 &characters_count) {
    m_characters_count = characters_count;
    m_characters_count_isSet = true;
}

bool OAIDocumentStatistics::is_characters_count_Set() const{
    return m_characters_count_isSet;
}

bool OAIDocumentStatistics::is_characters_count_Valid() const{
    return m_characters_count_isValid;
}

qint32 OAIDocumentStatistics::getTransactionsCount() const {
    return m_transactions_count;
}
void OAIDocumentStatistics::setTransactionsCount(const qint32 &transactions_count) {
    m_transactions_count = transactions_count;
    m_transactions_count_isSet = true;
}

bool OAIDocumentStatistics::is_transactions_count_Set() const{
    return m_transactions_count_isSet;
}

bool OAIDocumentStatistics::is_transactions_count_Valid() const{
    return m_transactions_count_isValid;
}

bool OAIDocumentStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_characters_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
