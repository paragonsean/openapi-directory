/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyPhraseBatchResultItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyPhraseBatchResultItem::OAIKeyPhraseBatchResultItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyPhraseBatchResultItem::OAIKeyPhraseBatchResultItem() {
    this->initializeModel();
}

OAIKeyPhraseBatchResultItem::~OAIKeyPhraseBatchResultItem() {}

void OAIKeyPhraseBatchResultItem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_phrases_isSet = false;
    m_key_phrases_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAIKeyPhraseBatchResultItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyPhraseBatchResultItem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_phrases_isValid = ::OpenAPI::fromJsonValue(m_key_phrases, json[QString("keyPhrases")]);
    m_key_phrases_isSet = !json[QString("keyPhrases")].isNull() && m_key_phrases_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAIKeyPhraseBatchResultItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyPhraseBatchResultItem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_phrases.size() > 0) {
        obj.insert(QString("keyPhrases"), ::OpenAPI::toJsonValue(m_key_phrases));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

QString OAIKeyPhraseBatchResultItem::getId() const {
    return m_id;
}
void OAIKeyPhraseBatchResultItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIKeyPhraseBatchResultItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIKeyPhraseBatchResultItem::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIKeyPhraseBatchResultItem::getKeyPhrases() const {
    return m_key_phrases;
}
void OAIKeyPhraseBatchResultItem::setKeyPhrases(const QList<QString> &key_phrases) {
    m_key_phrases = key_phrases;
    m_key_phrases_isSet = true;
}

bool OAIKeyPhraseBatchResultItem::is_key_phrases_Set() const{
    return m_key_phrases_isSet;
}

bool OAIKeyPhraseBatchResultItem::is_key_phrases_Valid() const{
    return m_key_phrases_isValid;
}

OAIDocumentStatistics OAIKeyPhraseBatchResultItem::getStatistics() const {
    return m_statistics;
}
void OAIKeyPhraseBatchResultItem::setStatistics(const OAIDocumentStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIKeyPhraseBatchResultItem::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIKeyPhraseBatchResultItem::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAIKeyPhraseBatchResultItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_phrases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyPhraseBatchResultItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
