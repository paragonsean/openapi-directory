/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedLanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedLanguage::OAIDetectedLanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedLanguage::OAIDetectedLanguage() {
    this->initializeModel();
}

OAIDetectedLanguage::~OAIDetectedLanguage() {}

void OAIDetectedLanguage::initializeModel() {

    m_iso6391_name_isSet = false;
    m_iso6391_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIDetectedLanguage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedLanguage::fromJsonObject(QJsonObject json) {

    m_iso6391_name_isValid = ::OpenAPI::fromJsonValue(m_iso6391_name, json[QString("iso6391Name")]);
    m_iso6391_name_isSet = !json[QString("iso6391Name")].isNull() && m_iso6391_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIDetectedLanguage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedLanguage::asJsonObject() const {
    QJsonObject obj;
    if (m_iso6391_name_isSet) {
        obj.insert(QString("iso6391Name"), ::OpenAPI::toJsonValue(m_iso6391_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QString OAIDetectedLanguage::getIso6391Name() const {
    return m_iso6391_name;
}
void OAIDetectedLanguage::setIso6391Name(const QString &iso6391_name) {
    m_iso6391_name = iso6391_name;
    m_iso6391_name_isSet = true;
}

bool OAIDetectedLanguage::is_iso6391_name_Set() const{
    return m_iso6391_name_isSet;
}

bool OAIDetectedLanguage::is_iso6391_name_Valid() const{
    return m_iso6391_name_isValid;
}

QString OAIDetectedLanguage::getName() const {
    return m_name;
}
void OAIDetectedLanguage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDetectedLanguage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDetectedLanguage::is_name_Valid() const{
    return m_name_isValid;
}

double OAIDetectedLanguage::getScore() const {
    return m_score;
}
void OAIDetectedLanguage::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIDetectedLanguage::is_score_Set() const{
    return m_score_isSet;
}

bool OAIDetectedLanguage::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIDetectedLanguage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iso6391_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedLanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
