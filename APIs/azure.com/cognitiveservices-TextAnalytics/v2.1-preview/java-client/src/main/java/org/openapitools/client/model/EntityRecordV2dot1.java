/*
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.1-preview
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MatchRecordV2dot1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EntityRecordV2dot1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:25.671116-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntityRecordV2dot1 {
  public static final String SERIALIZED_NAME_BING_ID = "bingId";
  @SerializedName(SERIALIZED_NAME_BING_ID)
  private String bingId;

  public static final String SERIALIZED_NAME_MATCHES = "matches";
  @SerializedName(SERIALIZED_NAME_MATCHES)
  private List<MatchRecordV2dot1> matches = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUB_TYPE = "subType";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  private String subType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WIKIPEDIA_ID = "wikipediaId";
  @SerializedName(SERIALIZED_NAME_WIKIPEDIA_ID)
  private String wikipediaId;

  public static final String SERIALIZED_NAME_WIKIPEDIA_LANGUAGE = "wikipediaLanguage";
  @SerializedName(SERIALIZED_NAME_WIKIPEDIA_LANGUAGE)
  private String wikipediaLanguage;

  public static final String SERIALIZED_NAME_WIKIPEDIA_URL = "wikipediaUrl";
  @SerializedName(SERIALIZED_NAME_WIKIPEDIA_URL)
  private String wikipediaUrl;

  public EntityRecordV2dot1() {
  }

  public EntityRecordV2dot1(
     String wikipediaUrl
  ) {
    this();
    this.wikipediaUrl = wikipediaUrl;
  }

  public EntityRecordV2dot1 bingId(String bingId) {
    this.bingId = bingId;
    return this;
  }

  /**
   * Bing unique identifier of the recognized entity. Use in conjunction with the Bing Entity Search API to fetch additional relevant information.
   * @return bingId
   */
  @javax.annotation.Nullable
  public String getBingId() {
    return bingId;
  }

  public void setBingId(String bingId) {
    this.bingId = bingId;
  }


  public EntityRecordV2dot1 matches(List<MatchRecordV2dot1> matches) {
    this.matches = matches;
    return this;
  }

  public EntityRecordV2dot1 addMatchesItem(MatchRecordV2dot1 matchesItem) {
    if (this.matches == null) {
      this.matches = new ArrayList<>();
    }
    this.matches.add(matchesItem);
    return this;
  }

  /**
   * List of instances this entity appears in the text.
   * @return matches
   */
  @javax.annotation.Nullable
  public List<MatchRecordV2dot1> getMatches() {
    return matches;
  }

  public void setMatches(List<MatchRecordV2dot1> matches) {
    this.matches = matches;
  }


  public EntityRecordV2dot1 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Entity formal name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EntityRecordV2dot1 subType(String subType) {
    this.subType = subType;
    return this;
  }

  /**
   * Entity sub type from Named Entity Recognition model
   * @return subType
   */
  @javax.annotation.Nullable
  public String getSubType() {
    return subType;
  }

  public void setSubType(String subType) {
    this.subType = subType;
  }


  public EntityRecordV2dot1 type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Entity type from Named Entity Recognition model
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public EntityRecordV2dot1 wikipediaId(String wikipediaId) {
    this.wikipediaId = wikipediaId;
    return this;
  }

  /**
   * Wikipedia unique identifier of the recognized entity.
   * @return wikipediaId
   */
  @javax.annotation.Nullable
  public String getWikipediaId() {
    return wikipediaId;
  }

  public void setWikipediaId(String wikipediaId) {
    this.wikipediaId = wikipediaId;
  }


  public EntityRecordV2dot1 wikipediaLanguage(String wikipediaLanguage) {
    this.wikipediaLanguage = wikipediaLanguage;
    return this;
  }

  /**
   * Wikipedia language for which the WikipediaId and WikipediaUrl refers to.
   * @return wikipediaLanguage
   */
  @javax.annotation.Nullable
  public String getWikipediaLanguage() {
    return wikipediaLanguage;
  }

  public void setWikipediaLanguage(String wikipediaLanguage) {
    this.wikipediaLanguage = wikipediaLanguage;
  }


  /**
   * URL for the entity&#39;s English Wikipedia page.
   * @return wikipediaUrl
   */
  @javax.annotation.Nullable
  public String getWikipediaUrl() {
    return wikipediaUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityRecordV2dot1 entityRecordV2dot1 = (EntityRecordV2dot1) o;
    return Objects.equals(this.bingId, entityRecordV2dot1.bingId) &&
        Objects.equals(this.matches, entityRecordV2dot1.matches) &&
        Objects.equals(this.name, entityRecordV2dot1.name) &&
        Objects.equals(this.subType, entityRecordV2dot1.subType) &&
        Objects.equals(this.type, entityRecordV2dot1.type) &&
        Objects.equals(this.wikipediaId, entityRecordV2dot1.wikipediaId) &&
        Objects.equals(this.wikipediaLanguage, entityRecordV2dot1.wikipediaLanguage) &&
        Objects.equals(this.wikipediaUrl, entityRecordV2dot1.wikipediaUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bingId, matches, name, subType, type, wikipediaId, wikipediaLanguage, wikipediaUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityRecordV2dot1 {\n");
    sb.append("    bingId: ").append(toIndentedString(bingId)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    wikipediaId: ").append(toIndentedString(wikipediaId)).append("\n");
    sb.append("    wikipediaLanguage: ").append(toIndentedString(wikipediaLanguage)).append("\n");
    sb.append("    wikipediaUrl: ").append(toIndentedString(wikipediaUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bingId");
    openapiFields.add("matches");
    openapiFields.add("name");
    openapiFields.add("subType");
    openapiFields.add("type");
    openapiFields.add("wikipediaId");
    openapiFields.add("wikipediaLanguage");
    openapiFields.add("wikipediaUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityRecordV2dot1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityRecordV2dot1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityRecordV2dot1 is not found in the empty JSON string", EntityRecordV2dot1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityRecordV2dot1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityRecordV2dot1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bingId") != null && !jsonObj.get("bingId").isJsonNull()) && !jsonObj.get("bingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bingId").toString()));
      }
      if (jsonObj.get("matches") != null && !jsonObj.get("matches").isJsonNull()) {
        JsonArray jsonArraymatches = jsonObj.getAsJsonArray("matches");
        if (jsonArraymatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matches` to be an array in the JSON string but got `%s`", jsonObj.get("matches").toString()));
          }

          // validate the optional field `matches` (array)
          for (int i = 0; i < jsonArraymatches.size(); i++) {
            MatchRecordV2dot1.validateJsonElement(jsonArraymatches.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("subType") != null && !jsonObj.get("subType").isJsonNull()) && !jsonObj.get("subType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subType").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("wikipediaId") != null && !jsonObj.get("wikipediaId").isJsonNull()) && !jsonObj.get("wikipediaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wikipediaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wikipediaId").toString()));
      }
      if ((jsonObj.get("wikipediaLanguage") != null && !jsonObj.get("wikipediaLanguage").isJsonNull()) && !jsonObj.get("wikipediaLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wikipediaLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wikipediaLanguage").toString()));
      }
      if ((jsonObj.get("wikipediaUrl") != null && !jsonObj.get("wikipediaUrl").isJsonNull()) && !jsonObj.get("wikipediaUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wikipediaUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wikipediaUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityRecordV2dot1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityRecordV2dot1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityRecordV2dot1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityRecordV2dot1.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityRecordV2dot1>() {
           @Override
           public void write(JsonWriter out, EntityRecordV2dot1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityRecordV2dot1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityRecordV2dot1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityRecordV2dot1
   * @throws IOException if the JSON string is invalid with respect to EntityRecordV2dot1
   */
  public static EntityRecordV2dot1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityRecordV2dot1.class);
  }

  /**
   * Convert an instance of EntityRecordV2dot1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

