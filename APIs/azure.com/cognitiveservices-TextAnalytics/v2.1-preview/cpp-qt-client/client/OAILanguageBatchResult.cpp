/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.1-preview
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguageBatchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguageBatchResult::OAILanguageBatchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguageBatchResult::OAILanguageBatchResult() {
    this->initializeModel();
}

OAILanguageBatchResult::~OAILanguageBatchResult() {}

void OAILanguageBatchResult::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;
}

void OAILanguageBatchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguageBatchResult::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;
}

QString OAILanguageBatchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguageBatchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    return obj;
}

QList<OAILanguageBatchResultItem> OAILanguageBatchResult::getDocuments() const {
    return m_documents;
}
void OAILanguageBatchResult::setDocuments(const QList<OAILanguageBatchResultItem> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAILanguageBatchResult::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAILanguageBatchResult::is_documents_Valid() const{
    return m_documents_isValid;
}

QList<OAIErrorRecord> OAILanguageBatchResult::getErrors() const {
    return m_errors;
}
void OAILanguageBatchResult::setErrors(const QList<OAIErrorRecord> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAILanguageBatchResult::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAILanguageBatchResult::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAILanguageBatchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguageBatchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
