/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentSentiment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentSentiment::OAIDocumentSentiment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentSentiment::OAIDocumentSentiment() {
    this->initializeModel();
}

OAIDocumentSentiment::~OAIDocumentSentiment() {}

void OAIDocumentSentiment::initializeModel() {

    m_document_scores_isSet = false;
    m_document_scores_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_sentences_isSet = false;
    m_sentences_isValid = false;

    m_sentiment_isSet = false;
    m_sentiment_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAIDocumentSentiment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentSentiment::fromJsonObject(QJsonObject json) {

    m_document_scores_isValid = ::OpenAPI::fromJsonValue(m_document_scores, json[QString("documentScores")]);
    m_document_scores_isSet = !json[QString("documentScores")].isNull() && m_document_scores_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_sentences_isValid = ::OpenAPI::fromJsonValue(m_sentences, json[QString("sentences")]);
    m_sentences_isSet = !json[QString("sentences")].isNull() && m_sentences_isValid;

    m_sentiment_isValid = ::OpenAPI::fromJsonValue(m_sentiment, json[QString("sentiment")]);
    m_sentiment_isSet = !json[QString("sentiment")].isNull() && m_sentiment_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAIDocumentSentiment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentSentiment::asJsonObject() const {
    QJsonObject obj;
    if (m_document_scores.isSet()) {
        obj.insert(QString("documentScores"), ::OpenAPI::toJsonValue(m_document_scores));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_sentences.size() > 0) {
        obj.insert(QString("sentences"), ::OpenAPI::toJsonValue(m_sentences));
    }
    if (m_sentiment_isSet) {
        obj.insert(QString("sentiment"), ::OpenAPI::toJsonValue(m_sentiment));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

OAISentimentConfidenceScorePerLabel OAIDocumentSentiment::getDocumentScores() const {
    return m_document_scores;
}
void OAIDocumentSentiment::setDocumentScores(const OAISentimentConfidenceScorePerLabel &document_scores) {
    m_document_scores = document_scores;
    m_document_scores_isSet = true;
}

bool OAIDocumentSentiment::is_document_scores_Set() const{
    return m_document_scores_isSet;
}

bool OAIDocumentSentiment::is_document_scores_Valid() const{
    return m_document_scores_isValid;
}

QString OAIDocumentSentiment::getId() const {
    return m_id;
}
void OAIDocumentSentiment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentSentiment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentSentiment::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAISentenceSentiment> OAIDocumentSentiment::getSentences() const {
    return m_sentences;
}
void OAIDocumentSentiment::setSentences(const QList<OAISentenceSentiment> &sentences) {
    m_sentences = sentences;
    m_sentences_isSet = true;
}

bool OAIDocumentSentiment::is_sentences_Set() const{
    return m_sentences_isSet;
}

bool OAIDocumentSentiment::is_sentences_Valid() const{
    return m_sentences_isValid;
}

QString OAIDocumentSentiment::getSentiment() const {
    return m_sentiment;
}
void OAIDocumentSentiment::setSentiment(const QString &sentiment) {
    m_sentiment = sentiment;
    m_sentiment_isSet = true;
}

bool OAIDocumentSentiment::is_sentiment_Set() const{
    return m_sentiment_isSet;
}

bool OAIDocumentSentiment::is_sentiment_Valid() const{
    return m_sentiment_isValid;
}

OAIDocumentStatistics OAIDocumentSentiment::getStatistics() const {
    return m_statistics;
}
void OAIDocumentSentiment::setStatistics(const OAIDocumentStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIDocumentSentiment::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIDocumentSentiment::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAIDocumentSentiment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_scores.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentSentiment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_scores_isValid && m_id_isValid && m_sentences_isValid && m_sentiment_isValid && true;
}

} // namespace OpenAPI
