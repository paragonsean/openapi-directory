/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkedEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkedEntity::OAILinkedEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkedEntity::OAILinkedEntity() {
    this->initializeModel();
}

OAILinkedEntity::~OAILinkedEntity() {}

void OAILinkedEntity::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAILinkedEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkedEntity::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("dataSource")]);
    m_data_source_isSet = !json[QString("dataSource")].isNull() && m_data_source_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAILinkedEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkedEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_isSet) {
        obj.insert(QString("dataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_matches.size() > 0) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAILinkedEntity::getDataSource() const {
    return m_data_source;
}
void OAILinkedEntity::setDataSource(const QString &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAILinkedEntity::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAILinkedEntity::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAILinkedEntity::getId() const {
    return m_id;
}
void OAILinkedEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILinkedEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAILinkedEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILinkedEntity::getLanguage() const {
    return m_language;
}
void OAILinkedEntity::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAILinkedEntity::is_language_Set() const{
    return m_language_isSet;
}

bool OAILinkedEntity::is_language_Valid() const{
    return m_language_isValid;
}

QList<OAIMatch> OAILinkedEntity::getMatches() const {
    return m_matches;
}
void OAILinkedEntity::setMatches(const QList<OAIMatch> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAILinkedEntity::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAILinkedEntity::is_matches_Valid() const{
    return m_matches_isValid;
}

QString OAILinkedEntity::getName() const {
    return m_name;
}
void OAILinkedEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILinkedEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAILinkedEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILinkedEntity::getUrl() const {
    return m_url;
}
void OAILinkedEntity::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILinkedEntity::is_url_Set() const{
    return m_url_isSet;
}

bool OAILinkedEntity::is_url_Valid() const{
    return m_url_isValid;
}

bool OAILinkedEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkedEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_source_isValid && m_language_isValid && m_matches_isValid && m_name_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
