/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentLinkedEntities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentLinkedEntities::OAIDocumentLinkedEntities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentLinkedEntities::OAIDocumentLinkedEntities() {
    this->initializeModel();
}

OAIDocumentLinkedEntities::~OAIDocumentLinkedEntities() {}

void OAIDocumentLinkedEntities::initializeModel() {

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAIDocumentLinkedEntities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentLinkedEntities::fromJsonObject(QJsonObject json) {

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAIDocumentLinkedEntities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentLinkedEntities::asJsonObject() const {
    QJsonObject obj;
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

QList<OAILinkedEntity> OAIDocumentLinkedEntities::getEntities() const {
    return m_entities;
}
void OAIDocumentLinkedEntities::setEntities(const QList<OAILinkedEntity> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIDocumentLinkedEntities::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIDocumentLinkedEntities::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIDocumentLinkedEntities::getId() const {
    return m_id;
}
void OAIDocumentLinkedEntities::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentLinkedEntities::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentLinkedEntities::is_id_Valid() const{
    return m_id_isValid;
}

OAIDocumentStatistics OAIDocumentLinkedEntities::getStatistics() const {
    return m_statistics;
}
void OAIDocumentLinkedEntities::setStatistics(const OAIDocumentStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIDocumentLinkedEntities::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIDocumentLinkedEntities::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAIDocumentLinkedEntities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentLinkedEntities::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entities_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
