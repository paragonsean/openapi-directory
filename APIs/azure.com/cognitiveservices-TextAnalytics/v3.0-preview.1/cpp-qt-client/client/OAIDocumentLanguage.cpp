/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentLanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentLanguage::OAIDocumentLanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentLanguage::OAIDocumentLanguage() {
    this->initializeModel();
}

OAIDocumentLanguage::~OAIDocumentLanguage() {}

void OAIDocumentLanguage::initializeModel() {

    m_detected_languages_isSet = false;
    m_detected_languages_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAIDocumentLanguage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentLanguage::fromJsonObject(QJsonObject json) {

    m_detected_languages_isValid = ::OpenAPI::fromJsonValue(m_detected_languages, json[QString("detectedLanguages")]);
    m_detected_languages_isSet = !json[QString("detectedLanguages")].isNull() && m_detected_languages_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAIDocumentLanguage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentLanguage::asJsonObject() const {
    QJsonObject obj;
    if (m_detected_languages.size() > 0) {
        obj.insert(QString("detectedLanguages"), ::OpenAPI::toJsonValue(m_detected_languages));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

QList<OAIDetectedLanguage> OAIDocumentLanguage::getDetectedLanguages() const {
    return m_detected_languages;
}
void OAIDocumentLanguage::setDetectedLanguages(const QList<OAIDetectedLanguage> &detected_languages) {
    m_detected_languages = detected_languages;
    m_detected_languages_isSet = true;
}

bool OAIDocumentLanguage::is_detected_languages_Set() const{
    return m_detected_languages_isSet;
}

bool OAIDocumentLanguage::is_detected_languages_Valid() const{
    return m_detected_languages_isValid;
}

QString OAIDocumentLanguage::getId() const {
    return m_id;
}
void OAIDocumentLanguage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentLanguage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentLanguage::is_id_Valid() const{
    return m_id_isValid;
}

OAIDocumentStatistics OAIDocumentLanguage::getStatistics() const {
    return m_statistics;
}
void OAIDocumentLanguage::setStatistics(const OAIDocumentStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIDocumentLanguage::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIDocumentLanguage::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAIDocumentLanguage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detected_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentLanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detected_languages_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
