/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentError::OAIDocumentError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentError::OAIDocumentError() {
    this->initializeModel();
}

OAIDocumentError::~OAIDocumentError() {}

void OAIDocumentError::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIDocumentError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentError::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIDocumentError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentError::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

OAITextAnalyticsError OAIDocumentError::getError() const {
    return m_error;
}
void OAIDocumentError::setError(const OAITextAnalyticsError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIDocumentError::is_error_Set() const{
    return m_error_isSet;
}

bool OAIDocumentError::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIDocumentError::getId() const {
    return m_id;
}
void OAIDocumentError::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentError::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDocumentError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
