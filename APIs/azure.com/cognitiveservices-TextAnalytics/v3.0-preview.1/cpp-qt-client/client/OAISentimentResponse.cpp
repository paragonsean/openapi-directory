/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentimentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentimentResponse::OAISentimentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentimentResponse::OAISentimentResponse() {
    this->initializeModel();
}

OAISentimentResponse::~OAISentimentResponse() {}

void OAISentimentResponse::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_model_version_isSet = false;
    m_model_version_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;
}

void OAISentimentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentimentResponse::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("modelVersion")]);
    m_model_version_isSet = !json[QString("modelVersion")].isNull() && m_model_version_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;
}

QString OAISentimentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentimentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_model_version_isSet) {
        obj.insert(QString("modelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    return obj;
}

QList<OAIDocumentSentiment> OAISentimentResponse::getDocuments() const {
    return m_documents;
}
void OAISentimentResponse::setDocuments(const QList<OAIDocumentSentiment> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAISentimentResponse::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAISentimentResponse::is_documents_Valid() const{
    return m_documents_isValid;
}

QList<OAIDocumentError> OAISentimentResponse::getErrors() const {
    return m_errors;
}
void OAISentimentResponse::setErrors(const QList<OAIDocumentError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAISentimentResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAISentimentResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAISentimentResponse::getModelVersion() const {
    return m_model_version;
}
void OAISentimentResponse::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAISentimentResponse::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAISentimentResponse::is_model_version_Valid() const{
    return m_model_version_isValid;
}

OAIRequestStatistics OAISentimentResponse::getStatistics() const {
    return m_statistics;
}
void OAISentimentResponse::setStatistics(const OAIRequestStatistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAISentimentResponse::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAISentimentResponse::is_statistics_Valid() const{
    return m_statistics_isValid;
}

bool OAISentimentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentimentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_documents_isValid && m_errors_isValid && m_model_version_isValid && true;
}

} // namespace OpenAPI
