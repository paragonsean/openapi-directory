/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentenceSentiment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentenceSentiment::OAISentenceSentiment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentenceSentiment::OAISentenceSentiment() {
    this->initializeModel();
}

OAISentenceSentiment::~OAISentenceSentiment() {}

void OAISentenceSentiment::initializeModel() {

    m_length_isSet = false;
    m_length_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_sentence_scores_isSet = false;
    m_sentence_scores_isValid = false;

    m_sentiment_isSet = false;
    m_sentiment_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAISentenceSentiment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentenceSentiment::fromJsonObject(QJsonObject json) {

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_sentence_scores_isValid = ::OpenAPI::fromJsonValue(m_sentence_scores, json[QString("sentenceScores")]);
    m_sentence_scores_isSet = !json[QString("sentenceScores")].isNull() && m_sentence_scores_isValid;

    m_sentiment_isValid = ::OpenAPI::fromJsonValue(m_sentiment, json[QString("sentiment")]);
    m_sentiment_isSet = !json[QString("sentiment")].isNull() && m_sentiment_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAISentenceSentiment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentenceSentiment::asJsonObject() const {
    QJsonObject obj;
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_sentence_scores.isSet()) {
        obj.insert(QString("sentenceScores"), ::OpenAPI::toJsonValue(m_sentence_scores));
    }
    if (m_sentiment_isSet) {
        obj.insert(QString("sentiment"), ::OpenAPI::toJsonValue(m_sentiment));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

qint32 OAISentenceSentiment::getLength() const {
    return m_length;
}
void OAISentenceSentiment::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAISentenceSentiment::is_length_Set() const{
    return m_length_isSet;
}

bool OAISentenceSentiment::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAISentenceSentiment::getOffset() const {
    return m_offset;
}
void OAISentenceSentiment::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAISentenceSentiment::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAISentenceSentiment::is_offset_Valid() const{
    return m_offset_isValid;
}

OAISentimentConfidenceScorePerLabel OAISentenceSentiment::getSentenceScores() const {
    return m_sentence_scores;
}
void OAISentenceSentiment::setSentenceScores(const OAISentimentConfidenceScorePerLabel &sentence_scores) {
    m_sentence_scores = sentence_scores;
    m_sentence_scores_isSet = true;
}

bool OAISentenceSentiment::is_sentence_scores_Set() const{
    return m_sentence_scores_isSet;
}

bool OAISentenceSentiment::is_sentence_scores_Valid() const{
    return m_sentence_scores_isValid;
}

QString OAISentenceSentiment::getSentiment() const {
    return m_sentiment;
}
void OAISentenceSentiment::setSentiment(const QString &sentiment) {
    m_sentiment = sentiment;
    m_sentiment_isSet = true;
}

bool OAISentenceSentiment::is_sentiment_Set() const{
    return m_sentiment_isSet;
}

bool OAISentenceSentiment::is_sentiment_Valid() const{
    return m_sentiment_isValid;
}

QList<QString> OAISentenceSentiment::getWarnings() const {
    return m_warnings;
}
void OAISentenceSentiment::setWarnings(const QList<QString> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAISentenceSentiment::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAISentenceSentiment::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAISentenceSentiment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentence_scores.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentenceSentiment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_length_isValid && m_offset_isValid && m_sentence_scores_isValid && m_sentiment_isValid && true;
}

} // namespace OpenAPI
