/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextAnalyticsError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextAnalyticsError::OAITextAnalyticsError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextAnalyticsError::OAITextAnalyticsError() {
    this->initializeModel();
}

OAITextAnalyticsError::~OAITextAnalyticsError() {}

void OAITextAnalyticsError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_inner_error_isSet = false;
    m_inner_error_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAITextAnalyticsError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextAnalyticsError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_inner_error_isValid = ::OpenAPI::fromJsonValue(m_inner_error, json[QString("innerError")]);
    m_inner_error_isSet = !json[QString("innerError")].isNull() && m_inner_error_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAITextAnalyticsError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextAnalyticsError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_inner_error.isSet()) {
        obj.insert(QString("innerError"), ::OpenAPI::toJsonValue(m_inner_error));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAITextAnalyticsError::getCode() const {
    return m_code;
}
void OAITextAnalyticsError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAITextAnalyticsError::is_code_Set() const{
    return m_code_isSet;
}

bool OAITextAnalyticsError::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAITextAnalyticsError> OAITextAnalyticsError::getDetails() const {
    return m_details;
}
void OAITextAnalyticsError::setDetails(const QList<OAITextAnalyticsError> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAITextAnalyticsError::is_details_Set() const{
    return m_details_isSet;
}

bool OAITextAnalyticsError::is_details_Valid() const{
    return m_details_isValid;
}

OAIInnerError OAITextAnalyticsError::getInnerError() const {
    return m_inner_error;
}
void OAITextAnalyticsError::setInnerError(const OAIInnerError &inner_error) {
    m_inner_error = inner_error;
    m_inner_error_isSet = true;
}

bool OAITextAnalyticsError::is_inner_error_Set() const{
    return m_inner_error_isSet;
}

bool OAITextAnalyticsError::is_inner_error_Valid() const{
    return m_inner_error_isValid;
}

QString OAITextAnalyticsError::getMessage() const {
    return m_message;
}
void OAITextAnalyticsError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITextAnalyticsError::is_message_Set() const{
    return m_message_isSet;
}

bool OAITextAnalyticsError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITextAnalyticsError::getTarget() const {
    return m_target;
}
void OAITextAnalyticsError::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAITextAnalyticsError::is_target_Set() const{
    return m_target_isSet;
}

bool OAITextAnalyticsError::is_target_Valid() const{
    return m_target_isValid;
}

bool OAITextAnalyticsError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inner_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextAnalyticsError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
