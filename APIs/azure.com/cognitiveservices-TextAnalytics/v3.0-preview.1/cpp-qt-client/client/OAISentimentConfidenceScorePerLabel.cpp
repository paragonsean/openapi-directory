/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentimentConfidenceScorePerLabel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentimentConfidenceScorePerLabel::OAISentimentConfidenceScorePerLabel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentimentConfidenceScorePerLabel::OAISentimentConfidenceScorePerLabel() {
    this->initializeModel();
}

OAISentimentConfidenceScorePerLabel::~OAISentimentConfidenceScorePerLabel() {}

void OAISentimentConfidenceScorePerLabel::initializeModel() {

    m_negative_isSet = false;
    m_negative_isValid = false;

    m_neutral_isSet = false;
    m_neutral_isValid = false;

    m_positive_isSet = false;
    m_positive_isValid = false;
}

void OAISentimentConfidenceScorePerLabel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentimentConfidenceScorePerLabel::fromJsonObject(QJsonObject json) {

    m_negative_isValid = ::OpenAPI::fromJsonValue(m_negative, json[QString("negative")]);
    m_negative_isSet = !json[QString("negative")].isNull() && m_negative_isValid;

    m_neutral_isValid = ::OpenAPI::fromJsonValue(m_neutral, json[QString("neutral")]);
    m_neutral_isSet = !json[QString("neutral")].isNull() && m_neutral_isValid;

    m_positive_isValid = ::OpenAPI::fromJsonValue(m_positive, json[QString("positive")]);
    m_positive_isSet = !json[QString("positive")].isNull() && m_positive_isValid;
}

QString OAISentimentConfidenceScorePerLabel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentimentConfidenceScorePerLabel::asJsonObject() const {
    QJsonObject obj;
    if (m_negative_isSet) {
        obj.insert(QString("negative"), ::OpenAPI::toJsonValue(m_negative));
    }
    if (m_neutral_isSet) {
        obj.insert(QString("neutral"), ::OpenAPI::toJsonValue(m_neutral));
    }
    if (m_positive_isSet) {
        obj.insert(QString("positive"), ::OpenAPI::toJsonValue(m_positive));
    }
    return obj;
}

double OAISentimentConfidenceScorePerLabel::getNegative() const {
    return m_negative;
}
void OAISentimentConfidenceScorePerLabel::setNegative(const double &negative) {
    m_negative = negative;
    m_negative_isSet = true;
}

bool OAISentimentConfidenceScorePerLabel::is_negative_Set() const{
    return m_negative_isSet;
}

bool OAISentimentConfidenceScorePerLabel::is_negative_Valid() const{
    return m_negative_isValid;
}

double OAISentimentConfidenceScorePerLabel::getNeutral() const {
    return m_neutral;
}
void OAISentimentConfidenceScorePerLabel::setNeutral(const double &neutral) {
    m_neutral = neutral;
    m_neutral_isSet = true;
}

bool OAISentimentConfidenceScorePerLabel::is_neutral_Set() const{
    return m_neutral_isSet;
}

bool OAISentimentConfidenceScorePerLabel::is_neutral_Valid() const{
    return m_neutral_isValid;
}

double OAISentimentConfidenceScorePerLabel::getPositive() const {
    return m_positive;
}
void OAISentimentConfidenceScorePerLabel::setPositive(const double &positive) {
    m_positive = positive;
    m_positive_isSet = true;
}

bool OAISentimentConfidenceScorePerLabel::is_positive_Set() const{
    return m_positive_isSet;
}

bool OAISentimentConfidenceScorePerLabel::is_positive_Valid() const{
    return m_positive_isValid;
}

bool OAISentimentConfidenceScorePerLabel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_negative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neutral_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentimentConfidenceScorePerLabel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_negative_isValid && m_neutral_isValid && m_positive_isValid && true;
}

} // namespace OpenAPI
