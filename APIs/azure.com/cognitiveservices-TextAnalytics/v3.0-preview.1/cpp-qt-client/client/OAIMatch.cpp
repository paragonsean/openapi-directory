/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch::OAIMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch::OAIMatch() {
    this->initializeModel();
}

OAIMatch::~OAIMatch() {}

void OAIMatch::initializeModel() {

    m_length_isSet = false;
    m_length_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch::fromJsonObject(QJsonObject json) {

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

qint32 OAIMatch::getLength() const {
    return m_length;
}
void OAIMatch::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIMatch::is_length_Set() const{
    return m_length_isSet;
}

bool OAIMatch::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAIMatch::getOffset() const {
    return m_offset;
}
void OAIMatch::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIMatch::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIMatch::is_offset_Valid() const{
    return m_offset_isValid;
}

double OAIMatch::getScore() const {
    return m_score;
}
void OAIMatch::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIMatch::is_score_Set() const{
    return m_score_isSet;
}

bool OAIMatch::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIMatch::getText() const {
    return m_text;
}
void OAIMatch::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMatch::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMatch::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_length_isValid && m_offset_isValid && m_score_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
