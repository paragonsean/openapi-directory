/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntity::OAIEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntity::OAIEntity() {
    this->initializeModel();
}

OAIEntity::~OAIEntity() {}

void OAIEntity::initializeModel() {

    m_length_isSet = false;
    m_length_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntity::fromJsonObject(QJsonObject json) {

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIEntity::getLength() const {
    return m_length;
}
void OAIEntity::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIEntity::is_length_Set() const{
    return m_length_isSet;
}

bool OAIEntity::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAIEntity::getOffset() const {
    return m_offset;
}
void OAIEntity::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIEntity::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIEntity::is_offset_Valid() const{
    return m_offset_isValid;
}

double OAIEntity::getScore() const {
    return m_score;
}
void OAIEntity::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIEntity::is_score_Set() const{
    return m_score_isSet;
}

bool OAIEntity::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIEntity::getSubtype() const {
    return m_subtype;
}
void OAIEntity::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIEntity::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIEntity::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAIEntity::getText() const {
    return m_text;
}
void OAIEntity::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIEntity::is_text_Set() const{
    return m_text_isSet;
}

bool OAIEntity::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIEntity::getType() const {
    return m_type;
}
void OAIEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEntity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_length_isValid && m_offset_isValid && m_score_isValid && m_text_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
