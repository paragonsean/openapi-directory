/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITextAnalyticsError.h
 *
 * 
 */

#ifndef OAITextAnalyticsError_H
#define OAITextAnalyticsError_H

#include <QJsonObject>

#include "OAIInnerError.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInnerError;

class OAITextAnalyticsError : public OAIObject {
public:
    OAITextAnalyticsError();
    OAITextAnalyticsError(QString json);
    ~OAITextAnalyticsError() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QList<OAITextAnalyticsError> getDetails() const;
    void setDetails(const QList<OAITextAnalyticsError> &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    OAIInnerError getInnerError() const;
    void setInnerError(const OAIInnerError &inner_error);
    bool is_inner_error_Set() const;
    bool is_inner_error_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getTarget() const;
    void setTarget(const QString &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QList<OAITextAnalyticsError> m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    OAIInnerError m_inner_error;
    bool m_inner_error_isSet;
    bool m_inner_error_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_target;
    bool m_target_isSet;
    bool m_target_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITextAnalyticsError)

#endif // OAITextAnalyticsError_H
