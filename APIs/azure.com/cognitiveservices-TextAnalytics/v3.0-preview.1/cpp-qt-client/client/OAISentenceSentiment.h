/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISentenceSentiment.h
 *
 * 
 */

#ifndef OAISentenceSentiment_H
#define OAISentenceSentiment_H

#include <QJsonObject>

#include "OAISentimentConfidenceScorePerLabel.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISentimentConfidenceScorePerLabel;

class OAISentenceSentiment : public OAIObject {
public:
    OAISentenceSentiment();
    OAISentenceSentiment(QString json);
    ~OAISentenceSentiment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getLength() const;
    void setLength(const qint32 &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    OAISentimentConfidenceScorePerLabel getSentenceScores() const;
    void setSentenceScores(const OAISentimentConfidenceScorePerLabel &sentence_scores);
    bool is_sentence_scores_Set() const;
    bool is_sentence_scores_Valid() const;

    QString getSentiment() const;
    void setSentiment(const QString &sentiment);
    bool is_sentiment_Set() const;
    bool is_sentiment_Valid() const;

    QList<QString> getWarnings() const;
    void setWarnings(const QList<QString> &warnings);
    bool is_warnings_Set() const;
    bool is_warnings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    OAISentimentConfidenceScorePerLabel m_sentence_scores;
    bool m_sentence_scores_isSet;
    bool m_sentence_scores_isValid;

    QString m_sentiment;
    bool m_sentiment_isSet;
    bool m_sentiment_isValid;

    QList<QString> m_warnings;
    bool m_warnings_isSet;
    bool m_warnings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISentenceSentiment)

#endif // OAISentenceSentiment_H
