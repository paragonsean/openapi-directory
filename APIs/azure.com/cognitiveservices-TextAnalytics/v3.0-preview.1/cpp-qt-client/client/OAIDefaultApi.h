/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEntitiesResult.h"
#include "OAIEntityLinkingResult.h"
#include "OAIKeyPhraseResult.h"
#include "OAILanguageBatchInput.h"
#include "OAILanguageResult.h"
#include "OAIMultiLanguageBatchInput.h"
#include "OAISentimentResponse.h"
#include "OAITextAnalyticsError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  input OAIMultiLanguageBatchInput [required]
    * @param[in]  model_version QString [optional]
    * @param[in]  show_stats bool [optional]
    */
    virtual void entitiesLinking(const OAIMultiLanguageBatchInput &input, const ::OpenAPI::OptionalParam<QString> &model_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_stats = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  input OAIMultiLanguageBatchInput [required]
    * @param[in]  model_version QString [optional]
    * @param[in]  show_stats bool [optional]
    */
    virtual void entitiesRecognitionGeneral(const OAIMultiLanguageBatchInput &input, const ::OpenAPI::OptionalParam<QString> &model_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_stats = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  input OAIMultiLanguageBatchInput [required]
    * @param[in]  model_version QString [optional]
    * @param[in]  show_stats bool [optional]
    */
    virtual void entitiesRecognitionPii(const OAIMultiLanguageBatchInput &input, const ::OpenAPI::OptionalParam<QString> &model_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_stats = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  input OAIMultiLanguageBatchInput [required]
    * @param[in]  model_version QString [optional]
    * @param[in]  show_stats bool [optional]
    */
    virtual void keyPhrases(const OAIMultiLanguageBatchInput &input, const ::OpenAPI::OptionalParam<QString> &model_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_stats = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  input OAILanguageBatchInput [required]
    * @param[in]  model_version QString [optional]
    * @param[in]  show_stats bool [optional]
    */
    virtual void languages(const OAILanguageBatchInput &input, const ::OpenAPI::OptionalParam<QString> &model_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_stats = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  input OAIMultiLanguageBatchInput [required]
    * @param[in]  model_version QString [optional]
    * @param[in]  show_stats bool [optional]
    */
    virtual void sentiment(const OAIMultiLanguageBatchInput &input, const ::OpenAPI::OptionalParam<QString> &model_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_stats = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void entitiesLinkingCallback(OAIHttpRequestWorker *worker);
    void entitiesRecognitionGeneralCallback(OAIHttpRequestWorker *worker);
    void entitiesRecognitionPiiCallback(OAIHttpRequestWorker *worker);
    void keyPhrasesCallback(OAIHttpRequestWorker *worker);
    void languagesCallback(OAIHttpRequestWorker *worker);
    void sentimentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void entitiesLinkingSignal(OAIEntityLinkingResult summary);
    void entitiesRecognitionGeneralSignal(OAIEntitiesResult summary);
    void entitiesRecognitionPiiSignal(OAIEntitiesResult summary);
    void keyPhrasesSignal(OAIKeyPhraseResult summary);
    void languagesSignal(OAILanguageResult summary);
    void sentimentSignal(OAISentimentResponse summary);


    void entitiesLinkingSignalFull(OAIHttpRequestWorker *worker, OAIEntityLinkingResult summary);
    void entitiesRecognitionGeneralSignalFull(OAIHttpRequestWorker *worker, OAIEntitiesResult summary);
    void entitiesRecognitionPiiSignalFull(OAIHttpRequestWorker *worker, OAIEntitiesResult summary);
    void keyPhrasesSignalFull(OAIHttpRequestWorker *worker, OAIKeyPhraseResult summary);
    void languagesSignalFull(OAIHttpRequestWorker *worker, OAILanguageResult summary);
    void sentimentSignalFull(OAIHttpRequestWorker *worker, OAISentimentResponse summary);

    Q_DECL_DEPRECATED_X("Use entitiesLinkingSignalError() instead")
    void entitiesLinkingSignalE(OAIEntityLinkingResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesLinkingSignalError(OAIEntityLinkingResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use entitiesRecognitionGeneralSignalError() instead")
    void entitiesRecognitionGeneralSignalE(OAIEntitiesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesRecognitionGeneralSignalError(OAIEntitiesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use entitiesRecognitionPiiSignalError() instead")
    void entitiesRecognitionPiiSignalE(OAIEntitiesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesRecognitionPiiSignalError(OAIEntitiesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyPhrasesSignalError() instead")
    void keyPhrasesSignalE(OAIKeyPhraseResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void keyPhrasesSignalError(OAIKeyPhraseResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesSignalError() instead")
    void languagesSignalE(OAILanguageResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesSignalError(OAILanguageResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentSignalError() instead")
    void sentimentSignalE(OAISentimentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentSignalError(OAISentimentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use entitiesLinkingSignalErrorFull() instead")
    void entitiesLinkingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesLinkingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use entitiesRecognitionGeneralSignalErrorFull() instead")
    void entitiesRecognitionGeneralSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesRecognitionGeneralSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use entitiesRecognitionPiiSignalErrorFull() instead")
    void entitiesRecognitionPiiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesRecognitionPiiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keyPhrasesSignalErrorFull() instead")
    void keyPhrasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keyPhrasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use languagesSignalErrorFull() instead")
    void languagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void languagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentSignalErrorFull() instead")
    void sentimentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
