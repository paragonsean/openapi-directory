/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILinkedEntity.h
 *
 * 
 */

#ifndef OAILinkedEntity_H
#define OAILinkedEntity_H

#include <QJsonObject>

#include "OAIMatch.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMatch;

class OAILinkedEntity : public OAIObject {
public:
    OAILinkedEntity();
    OAILinkedEntity(QString json);
    ~OAILinkedEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataSource() const;
    void setDataSource(const QString &data_source);
    bool is_data_source_Set() const;
    bool is_data_source_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QList<OAIMatch> getMatches() const;
    void setMatches(const QList<OAIMatch> &matches);
    bool is_matches_Set() const;
    bool is_matches_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_data_source;
    bool m_data_source_isSet;
    bool m_data_source_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QList<OAIMatch> m_matches;
    bool m_matches_isSet;
    bool m_matches_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILinkedEntity)

#endif // OAILinkedEntity_H
