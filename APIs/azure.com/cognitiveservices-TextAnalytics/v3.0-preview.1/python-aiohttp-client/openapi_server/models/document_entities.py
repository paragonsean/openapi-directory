# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_statistics import DocumentStatistics
from openapi_server.models.entity import Entity
from openapi_server import util


class DocumentEntities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entities: List[Entity]=None, id: str=None, statistics: DocumentStatistics=None):
        """DocumentEntities - a model defined in OpenAPI

        :param entities: The entities of this DocumentEntities.
        :param id: The id of this DocumentEntities.
        :param statistics: The statistics of this DocumentEntities.
        """
        self.openapi_types = {
            'entities': List[Entity],
            'id': str,
            'statistics': DocumentStatistics
        }

        self.attribute_map = {
            'entities': 'entities',
            'id': 'id',
            'statistics': 'statistics'
        }

        self._entities = entities
        self._id = id
        self._statistics = statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentEntities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentEntities of this DocumentEntities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entities(self):
        """Gets the entities of this DocumentEntities.

        Recognized entities in the document.

        :return: The entities of this DocumentEntities.
        :rtype: List[Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this DocumentEntities.

        Recognized entities in the document.

        :param entities: The entities of this DocumentEntities.
        :type entities: List[Entity]
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")

        self._entities = entities

    @property
    def id(self):
        """Gets the id of this DocumentEntities.

        Unique, non-empty document identifier.

        :return: The id of this DocumentEntities.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentEntities.

        Unique, non-empty document identifier.

        :param id: The id of this DocumentEntities.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def statistics(self):
        """Gets the statistics of this DocumentEntities.


        :return: The statistics of this DocumentEntities.
        :rtype: DocumentStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this DocumentEntities.


        :param statistics: The statistics of this DocumentEntities.
        :type statistics: DocumentStatistics
        """

        self._statistics = statistics
