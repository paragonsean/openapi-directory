# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sentiment_confidence_score_per_label import SentimentConfidenceScorePerLabel
from openapi_server import util


class SentenceSentiment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, length: int=None, offset: int=None, sentence_scores: SentimentConfidenceScorePerLabel=None, sentiment: str=None, warnings: List[str]=None):
        """SentenceSentiment - a model defined in OpenAPI

        :param length: The length of this SentenceSentiment.
        :param offset: The offset of this SentenceSentiment.
        :param sentence_scores: The sentence_scores of this SentenceSentiment.
        :param sentiment: The sentiment of this SentenceSentiment.
        :param warnings: The warnings of this SentenceSentiment.
        """
        self.openapi_types = {
            'length': int,
            'offset': int,
            'sentence_scores': SentimentConfidenceScorePerLabel,
            'sentiment': str,
            'warnings': List[str]
        }

        self.attribute_map = {
            'length': 'length',
            'offset': 'offset',
            'sentence_scores': 'sentenceScores',
            'sentiment': 'sentiment',
            'warnings': 'warnings'
        }

        self._length = length
        self._offset = offset
        self._sentence_scores = sentence_scores
        self._sentiment = sentiment
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SentenceSentiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SentenceSentiment of this SentenceSentiment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def length(self):
        """Gets the length of this SentenceSentiment.

        The length of the sentence by Unicode standard.

        :return: The length of this SentenceSentiment.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SentenceSentiment.

        The length of the sentence by Unicode standard.

        :param length: The length of this SentenceSentiment.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def offset(self):
        """Gets the offset of this SentenceSentiment.

        The sentence offset from the start of the document.

        :return: The offset of this SentenceSentiment.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SentenceSentiment.

        The sentence offset from the start of the document.

        :param offset: The offset of this SentenceSentiment.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def sentence_scores(self):
        """Gets the sentence_scores of this SentenceSentiment.


        :return: The sentence_scores of this SentenceSentiment.
        :rtype: SentimentConfidenceScorePerLabel
        """
        return self._sentence_scores

    @sentence_scores.setter
    def sentence_scores(self, sentence_scores):
        """Sets the sentence_scores of this SentenceSentiment.


        :param sentence_scores: The sentence_scores of this SentenceSentiment.
        :type sentence_scores: SentimentConfidenceScorePerLabel
        """
        if sentence_scores is None:
            raise ValueError("Invalid value for `sentence_scores`, must not be `None`")

        self._sentence_scores = sentence_scores

    @property
    def sentiment(self):
        """Gets the sentiment of this SentenceSentiment.

        The predicted Sentiment for the sentence.

        :return: The sentiment of this SentenceSentiment.
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this SentenceSentiment.

        The predicted Sentiment for the sentence.

        :param sentiment: The sentiment of this SentenceSentiment.
        :type sentiment: str
        """
        allowed_values = ["positive", "neutral", "negative"]  # noqa: E501
        if sentiment not in allowed_values:
            raise ValueError(
                "Invalid value for `sentiment` ({0}), must be one of {1}"
                .format(sentiment, allowed_values)
            )

        self._sentiment = sentiment

    @property
    def warnings(self):
        """Gets the warnings of this SentenceSentiment.

        The warnings generated for the sentence.

        :return: The warnings of this SentenceSentiment.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this SentenceSentiment.

        The warnings generated for the sentence.

        :param warnings: The warnings of this SentenceSentiment.
        :type warnings: List[str]
        """

        self._warnings = warnings
