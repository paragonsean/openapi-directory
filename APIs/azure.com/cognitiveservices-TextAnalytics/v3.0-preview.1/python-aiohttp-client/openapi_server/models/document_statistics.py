# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, characters_count: int=None, transactions_count: int=None):
        """DocumentStatistics - a model defined in OpenAPI

        :param characters_count: The characters_count of this DocumentStatistics.
        :param transactions_count: The transactions_count of this DocumentStatistics.
        """
        self.openapi_types = {
            'characters_count': int,
            'transactions_count': int
        }

        self.attribute_map = {
            'characters_count': 'charactersCount',
            'transactions_count': 'transactionsCount'
        }

        self._characters_count = characters_count
        self._transactions_count = transactions_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentStatistics of this DocumentStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def characters_count(self):
        """Gets the characters_count of this DocumentStatistics.

        Number of text elements recognized in the document.

        :return: The characters_count of this DocumentStatistics.
        :rtype: int
        """
        return self._characters_count

    @characters_count.setter
    def characters_count(self, characters_count):
        """Sets the characters_count of this DocumentStatistics.

        Number of text elements recognized in the document.

        :param characters_count: The characters_count of this DocumentStatistics.
        :type characters_count: int
        """
        if characters_count is None:
            raise ValueError("Invalid value for `characters_count`, must not be `None`")

        self._characters_count = characters_count

    @property
    def transactions_count(self):
        """Gets the transactions_count of this DocumentStatistics.

        Number of transactions for the document.

        :return: The transactions_count of this DocumentStatistics.
        :rtype: int
        """
        return self._transactions_count

    @transactions_count.setter
    def transactions_count(self, transactions_count):
        """Sets the transactions_count of this DocumentStatistics.

        Number of transactions for the document.

        :param transactions_count: The transactions_count of this DocumentStatistics.
        :type transactions_count: int
        """
        if transactions_count is None:
            raise ValueError("Invalid value for `transactions_count`, must not be `None`")

        self._transactions_count = transactions_count
