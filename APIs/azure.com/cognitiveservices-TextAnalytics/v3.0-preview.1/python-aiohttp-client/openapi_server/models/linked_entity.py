# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match import Match
from openapi_server import util


class LinkedEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source: str=None, id: str=None, language: str=None, matches: List[Match]=None, name: str=None, url: str=None):
        """LinkedEntity - a model defined in OpenAPI

        :param data_source: The data_source of this LinkedEntity.
        :param id: The id of this LinkedEntity.
        :param language: The language of this LinkedEntity.
        :param matches: The matches of this LinkedEntity.
        :param name: The name of this LinkedEntity.
        :param url: The url of this LinkedEntity.
        """
        self.openapi_types = {
            'data_source': str,
            'id': str,
            'language': str,
            'matches': List[Match],
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'data_source': 'dataSource',
            'id': 'id',
            'language': 'language',
            'matches': 'matches',
            'name': 'name',
            'url': 'url'
        }

        self._data_source = data_source
        self._id = id
        self._language = language
        self._matches = matches
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkedEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkedEntity of this LinkedEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source(self):
        """Gets the data_source of this LinkedEntity.

        Data source used to extract entity linking, such as Wiki/Bing etc.

        :return: The data_source of this LinkedEntity.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this LinkedEntity.

        Data source used to extract entity linking, such as Wiki/Bing etc.

        :param data_source: The data_source of this LinkedEntity.
        :type data_source: str
        """
        if data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")

        self._data_source = data_source

    @property
    def id(self):
        """Gets the id of this LinkedEntity.

        Unique identifier of the recognized entity from the data source.

        :return: The id of this LinkedEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LinkedEntity.

        Unique identifier of the recognized entity from the data source.

        :param id: The id of this LinkedEntity.
        :type id: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this LinkedEntity.

        Language used in the data source.

        :return: The language of this LinkedEntity.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LinkedEntity.

        Language used in the data source.

        :param language: The language of this LinkedEntity.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def matches(self):
        """Gets the matches of this LinkedEntity.

        List of instances this entity appears in the text.

        :return: The matches of this LinkedEntity.
        :rtype: List[Match]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this LinkedEntity.

        List of instances this entity appears in the text.

        :param matches: The matches of this LinkedEntity.
        :type matches: List[Match]
        """
        if matches is None:
            raise ValueError("Invalid value for `matches`, must not be `None`")

        self._matches = matches

    @property
    def name(self):
        """Gets the name of this LinkedEntity.

        Entity Linking formal name.

        :return: The name of this LinkedEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LinkedEntity.

        Entity Linking formal name.

        :param name: The name of this LinkedEntity.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def url(self):
        """Gets the url of this LinkedEntity.

        URL for the entity's page from the data source.

        :return: The url of this LinkedEntity.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LinkedEntity.

        URL for the entity's page from the data source.

        :param url: The url of this LinkedEntity.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
