# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents_count: int=None, erroneous_documents_count: int=None, transactions_count: int=None, valid_documents_count: int=None):
        """RequestStatistics - a model defined in OpenAPI

        :param documents_count: The documents_count of this RequestStatistics.
        :param erroneous_documents_count: The erroneous_documents_count of this RequestStatistics.
        :param transactions_count: The transactions_count of this RequestStatistics.
        :param valid_documents_count: The valid_documents_count of this RequestStatistics.
        """
        self.openapi_types = {
            'documents_count': int,
            'erroneous_documents_count': int,
            'transactions_count': int,
            'valid_documents_count': int
        }

        self.attribute_map = {
            'documents_count': 'documentsCount',
            'erroneous_documents_count': 'erroneousDocumentsCount',
            'transactions_count': 'transactionsCount',
            'valid_documents_count': 'validDocumentsCount'
        }

        self._documents_count = documents_count
        self._erroneous_documents_count = erroneous_documents_count
        self._transactions_count = transactions_count
        self._valid_documents_count = valid_documents_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestStatistics of this RequestStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents_count(self):
        """Gets the documents_count of this RequestStatistics.

        Number of documents submitted in the request.

        :return: The documents_count of this RequestStatistics.
        :rtype: int
        """
        return self._documents_count

    @documents_count.setter
    def documents_count(self, documents_count):
        """Sets the documents_count of this RequestStatistics.

        Number of documents submitted in the request.

        :param documents_count: The documents_count of this RequestStatistics.
        :type documents_count: int
        """
        if documents_count is None:
            raise ValueError("Invalid value for `documents_count`, must not be `None`")

        self._documents_count = documents_count

    @property
    def erroneous_documents_count(self):
        """Gets the erroneous_documents_count of this RequestStatistics.

        Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.

        :return: The erroneous_documents_count of this RequestStatistics.
        :rtype: int
        """
        return self._erroneous_documents_count

    @erroneous_documents_count.setter
    def erroneous_documents_count(self, erroneous_documents_count):
        """Sets the erroneous_documents_count of this RequestStatistics.

        Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.

        :param erroneous_documents_count: The erroneous_documents_count of this RequestStatistics.
        :type erroneous_documents_count: int
        """
        if erroneous_documents_count is None:
            raise ValueError("Invalid value for `erroneous_documents_count`, must not be `None`")

        self._erroneous_documents_count = erroneous_documents_count

    @property
    def transactions_count(self):
        """Gets the transactions_count of this RequestStatistics.

        Number of transactions for the request.

        :return: The transactions_count of this RequestStatistics.
        :rtype: int
        """
        return self._transactions_count

    @transactions_count.setter
    def transactions_count(self, transactions_count):
        """Sets the transactions_count of this RequestStatistics.

        Number of transactions for the request.

        :param transactions_count: The transactions_count of this RequestStatistics.
        :type transactions_count: int
        """
        if transactions_count is None:
            raise ValueError("Invalid value for `transactions_count`, must not be `None`")

        self._transactions_count = transactions_count

    @property
    def valid_documents_count(self):
        """Gets the valid_documents_count of this RequestStatistics.

        Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.

        :return: The valid_documents_count of this RequestStatistics.
        :rtype: int
        """
        return self._valid_documents_count

    @valid_documents_count.setter
    def valid_documents_count(self, valid_documents_count):
        """Sets the valid_documents_count of this RequestStatistics.

        Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.

        :param valid_documents_count: The valid_documents_count of this RequestStatistics.
        :type valid_documents_count: int
        """
        if valid_documents_count is None:
            raise ValueError("Invalid value for `valid_documents_count`, must not be `None`")

        self._valid_documents_count = valid_documents_count
