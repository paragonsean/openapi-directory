# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_error import DocumentError
from openapi_server.models.document_sentiment import DocumentSentiment
from openapi_server.models.request_statistics import RequestStatistics
from openapi_server import util


class SentimentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, documents: List[DocumentSentiment]=None, errors: List[DocumentError]=None, model_version: str=None, statistics: RequestStatistics=None):
        """SentimentResponse - a model defined in OpenAPI

        :param documents: The documents of this SentimentResponse.
        :param errors: The errors of this SentimentResponse.
        :param model_version: The model_version of this SentimentResponse.
        :param statistics: The statistics of this SentimentResponse.
        """
        self.openapi_types = {
            'documents': List[DocumentSentiment],
            'errors': List[DocumentError],
            'model_version': str,
            'statistics': RequestStatistics
        }

        self.attribute_map = {
            'documents': 'documents',
            'errors': 'errors',
            'model_version': 'modelVersion',
            'statistics': 'statistics'
        }

        self._documents = documents
        self._errors = errors
        self._model_version = model_version
        self._statistics = statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SentimentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SentimentResponse of this SentimentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def documents(self):
        """Gets the documents of this SentimentResponse.

        Sentiment analysis per document.

        :return: The documents of this SentimentResponse.
        :rtype: List[DocumentSentiment]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this SentimentResponse.

        Sentiment analysis per document.

        :param documents: The documents of this SentimentResponse.
        :type documents: List[DocumentSentiment]
        """
        if documents is None:
            raise ValueError("Invalid value for `documents`, must not be `None`")

        self._documents = documents

    @property
    def errors(self):
        """Gets the errors of this SentimentResponse.

        Errors by document id.

        :return: The errors of this SentimentResponse.
        :rtype: List[DocumentError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SentimentResponse.

        Errors by document id.

        :param errors: The errors of this SentimentResponse.
        :type errors: List[DocumentError]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def model_version(self):
        """Gets the model_version of this SentimentResponse.

        This field indicates which model is used for scoring.

        :return: The model_version of this SentimentResponse.
        :rtype: str
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this SentimentResponse.

        This field indicates which model is used for scoring.

        :param model_version: The model_version of this SentimentResponse.
        :type model_version: str
        """
        if model_version is None:
            raise ValueError("Invalid value for `model_version`, must not be `None`")

        self._model_version = model_version

    @property
    def statistics(self):
        """Gets the statistics of this SentimentResponse.


        :return: The statistics of this SentimentResponse.
        :rtype: RequestStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this SentimentResponse.


        :param statistics: The statistics of this SentimentResponse.
        :type statistics: RequestStatistics
        """

        self._statistics = statistics
