# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SentimentConfidenceScorePerLabel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, negative: float=None, neutral: float=None, positive: float=None):
        """SentimentConfidenceScorePerLabel - a model defined in OpenAPI

        :param negative: The negative of this SentimentConfidenceScorePerLabel.
        :param neutral: The neutral of this SentimentConfidenceScorePerLabel.
        :param positive: The positive of this SentimentConfidenceScorePerLabel.
        """
        self.openapi_types = {
            'negative': float,
            'neutral': float,
            'positive': float
        }

        self.attribute_map = {
            'negative': 'negative',
            'neutral': 'neutral',
            'positive': 'positive'
        }

        self._negative = negative
        self._neutral = neutral
        self._positive = positive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SentimentConfidenceScorePerLabel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SentimentConfidenceScorePerLabel of this SentimentConfidenceScorePerLabel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def negative(self):
        """Gets the negative of this SentimentConfidenceScorePerLabel.


        :return: The negative of this SentimentConfidenceScorePerLabel.
        :rtype: float
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this SentimentConfidenceScorePerLabel.


        :param negative: The negative of this SentimentConfidenceScorePerLabel.
        :type negative: float
        """
        if negative is None:
            raise ValueError("Invalid value for `negative`, must not be `None`")

        self._negative = negative

    @property
    def neutral(self):
        """Gets the neutral of this SentimentConfidenceScorePerLabel.


        :return: The neutral of this SentimentConfidenceScorePerLabel.
        :rtype: float
        """
        return self._neutral

    @neutral.setter
    def neutral(self, neutral):
        """Sets the neutral of this SentimentConfidenceScorePerLabel.


        :param neutral: The neutral of this SentimentConfidenceScorePerLabel.
        :type neutral: float
        """
        if neutral is None:
            raise ValueError("Invalid value for `neutral`, must not be `None`")

        self._neutral = neutral

    @property
    def positive(self):
        """Gets the positive of this SentimentConfidenceScorePerLabel.


        :return: The positive of this SentimentConfidenceScorePerLabel.
        :rtype: float
        """
        return self._positive

    @positive.setter
    def positive(self, positive):
        """Sets the positive of this SentimentConfidenceScorePerLabel.


        :param positive: The positive of this SentimentConfidenceScorePerLabel.
        :type positive: float
        """
        if positive is None:
            raise ValueError("Invalid value for `positive`, must not be `None`")

        self._positive = positive
