# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_statistics import DocumentStatistics
from openapi_server.models.sentence_sentiment import SentenceSentiment
from openapi_server.models.sentiment_confidence_score_per_label import SentimentConfidenceScorePerLabel
from openapi_server import util


class DocumentSentiment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_scores: SentimentConfidenceScorePerLabel=None, id: str=None, sentences: List[SentenceSentiment]=None, sentiment: str=None, statistics: DocumentStatistics=None):
        """DocumentSentiment - a model defined in OpenAPI

        :param document_scores: The document_scores of this DocumentSentiment.
        :param id: The id of this DocumentSentiment.
        :param sentences: The sentences of this DocumentSentiment.
        :param sentiment: The sentiment of this DocumentSentiment.
        :param statistics: The statistics of this DocumentSentiment.
        """
        self.openapi_types = {
            'document_scores': SentimentConfidenceScorePerLabel,
            'id': str,
            'sentences': List[SentenceSentiment],
            'sentiment': str,
            'statistics': DocumentStatistics
        }

        self.attribute_map = {
            'document_scores': 'documentScores',
            'id': 'id',
            'sentences': 'sentences',
            'sentiment': 'sentiment',
            'statistics': 'statistics'
        }

        self._document_scores = document_scores
        self._id = id
        self._sentences = sentences
        self._sentiment = sentiment
        self._statistics = statistics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentSentiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentSentiment of this DocumentSentiment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_scores(self):
        """Gets the document_scores of this DocumentSentiment.


        :return: The document_scores of this DocumentSentiment.
        :rtype: SentimentConfidenceScorePerLabel
        """
        return self._document_scores

    @document_scores.setter
    def document_scores(self, document_scores):
        """Sets the document_scores of this DocumentSentiment.


        :param document_scores: The document_scores of this DocumentSentiment.
        :type document_scores: SentimentConfidenceScorePerLabel
        """
        if document_scores is None:
            raise ValueError("Invalid value for `document_scores`, must not be `None`")

        self._document_scores = document_scores

    @property
    def id(self):
        """Gets the id of this DocumentSentiment.

        Unique, non-empty document identifier.

        :return: The id of this DocumentSentiment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentSentiment.

        Unique, non-empty document identifier.

        :param id: The id of this DocumentSentiment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def sentences(self):
        """Gets the sentences of this DocumentSentiment.

        Sentence level sentiment analysis.

        :return: The sentences of this DocumentSentiment.
        :rtype: List[SentenceSentiment]
        """
        return self._sentences

    @sentences.setter
    def sentences(self, sentences):
        """Sets the sentences of this DocumentSentiment.

        Sentence level sentiment analysis.

        :param sentences: The sentences of this DocumentSentiment.
        :type sentences: List[SentenceSentiment]
        """
        if sentences is None:
            raise ValueError("Invalid value for `sentences`, must not be `None`")

        self._sentences = sentences

    @property
    def sentiment(self):
        """Gets the sentiment of this DocumentSentiment.

        Predicted sentiment for document (Negative, Neutral, Positive, or Mixed).

        :return: The sentiment of this DocumentSentiment.
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this DocumentSentiment.

        Predicted sentiment for document (Negative, Neutral, Positive, or Mixed).

        :param sentiment: The sentiment of this DocumentSentiment.
        :type sentiment: str
        """
        allowed_values = ["positive", "neutral", "negative", "mixed"]  # noqa: E501
        if sentiment not in allowed_values:
            raise ValueError(
                "Invalid value for `sentiment` ({0}), must be one of {1}"
                .format(sentiment, allowed_values)
            )

        self._sentiment = sentiment

    @property
    def statistics(self):
        """Gets the statistics of this DocumentSentiment.


        :return: The statistics of this DocumentSentiment.
        :rtype: DocumentStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this DocumentSentiment.


        :param statistics: The statistics of this DocumentSentiment.
        :type statistics: DocumentStatistics
        """

        self._statistics = statistics
