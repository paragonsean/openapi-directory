# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Entity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, length: int=None, offset: int=None, score: float=None, subtype: str=None, text: str=None, type: str=None):
        """Entity - a model defined in OpenAPI

        :param length: The length of this Entity.
        :param offset: The offset of this Entity.
        :param score: The score of this Entity.
        :param subtype: The subtype of this Entity.
        :param text: The text of this Entity.
        :param type: The type of this Entity.
        """
        self.openapi_types = {
            'length': int,
            'offset': int,
            'score': float,
            'subtype': str,
            'text': str,
            'type': str
        }

        self.attribute_map = {
            'length': 'length',
            'offset': 'offset',
            'score': 'score',
            'subtype': 'subtype',
            'text': 'text',
            'type': 'type'
        }

        self._length = length
        self._offset = offset
        self._score = score
        self._subtype = subtype
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entity of this Entity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def length(self):
        """Gets the length of this Entity.

        Length (in Unicode characters) for the entity text.

        :return: The length of this Entity.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Entity.

        Length (in Unicode characters) for the entity text.

        :param length: The length of this Entity.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def offset(self):
        """Gets the offset of this Entity.

        Start position (in Unicode characters) for the entity text.

        :return: The offset of this Entity.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Entity.

        Start position (in Unicode characters) for the entity text.

        :param offset: The offset of this Entity.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset

    @property
    def score(self):
        """Gets the score of this Entity.

        Confidence score between 0 and 1 of the extracted entity.

        :return: The score of this Entity.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Entity.

        Confidence score between 0 and 1 of the extracted entity.

        :param score: The score of this Entity.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def subtype(self):
        """Gets the subtype of this Entity.

        Entity sub type, such as Age/Year/TimeRange etc

        :return: The subtype of this Entity.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this Entity.

        Entity sub type, such as Age/Year/TimeRange etc

        :param subtype: The subtype of this Entity.
        :type subtype: str
        """

        self._subtype = subtype

    @property
    def text(self):
        """Gets the text of this Entity.

        Entity text as appears in the request.

        :return: The text of this Entity.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Entity.

        Entity text as appears in the request.

        :param text: The text of this Entity.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def type(self):
        """Gets the type of this Entity.

        Entity type, such as Person/Location/Org/SSN etc

        :return: The type of this Entity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entity.

        Entity type, such as Person/Location/Org/SSN etc

        :param type: The type of this Entity.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
