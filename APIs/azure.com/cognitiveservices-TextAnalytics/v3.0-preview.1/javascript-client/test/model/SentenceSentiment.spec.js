/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TextAnalyticsClient);
  }
}(this, function(expect, TextAnalyticsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TextAnalyticsClient.SentenceSentiment();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SentenceSentiment', function() {
    it('should create an instance of SentenceSentiment', function() {
      // uncomment below and update the code to test SentenceSentiment
      //var instance = new TextAnalyticsClient.SentenceSentiment();
      //expect(instance).to.be.a(TextAnalyticsClient.SentenceSentiment);
    });

    it('should have the property length (base name: "length")', function() {
      // uncomment below and update the code to test the property length
      //var instance = new TextAnalyticsClient.SentenceSentiment();
      //expect(instance).to.be();
    });

    it('should have the property offset (base name: "offset")', function() {
      // uncomment below and update the code to test the property offset
      //var instance = new TextAnalyticsClient.SentenceSentiment();
      //expect(instance).to.be();
    });

    it('should have the property sentenceScores (base name: "sentenceScores")', function() {
      // uncomment below and update the code to test the property sentenceScores
      //var instance = new TextAnalyticsClient.SentenceSentiment();
      //expect(instance).to.be();
    });

    it('should have the property sentiment (base name: "sentiment")', function() {
      // uncomment below and update the code to test the property sentiment
      //var instance = new TextAnalyticsClient.SentenceSentiment();
      //expect(instance).to.be();
    });

    it('should have the property warnings (base name: "warnings")', function() {
      // uncomment below and update the code to test the property warnings
      //var instance = new TextAnalyticsClient.SentenceSentiment();
      //expect(instance).to.be();
    });

  });

}));
