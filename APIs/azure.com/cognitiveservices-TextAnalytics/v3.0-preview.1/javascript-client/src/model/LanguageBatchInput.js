/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LanguageInput from './LanguageInput';

/**
 * The LanguageBatchInput model module.
 * @module model/LanguageBatchInput
 * @version v3.0-preview.1
 */
class LanguageBatchInput {
    /**
     * Constructs a new <code>LanguageBatchInput</code>.
     * @alias module:model/LanguageBatchInput
     * @param documents {Array.<module:model/LanguageInput>} 
     */
    constructor(documents) { 
        
        LanguageBatchInput.initialize(this, documents);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documents) { 
        obj['documents'] = documents;
    }

    /**
     * Constructs a <code>LanguageBatchInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LanguageBatchInput} obj Optional instance to populate.
     * @return {module:model/LanguageBatchInput} The populated <code>LanguageBatchInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LanguageBatchInput();

            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [LanguageInput]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LanguageBatchInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LanguageBatchInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LanguageBatchInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['documents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documents'])) {
                throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
            }
            // validate the optional field `documents` (array)
            for (const item of data['documents']) {
                LanguageInput.validateJSON(item);
            };
        }

        return true;
    }


}

LanguageBatchInput.RequiredProperties = ["documents"];

/**
 * @member {Array.<module:model/LanguageInput>} documents
 */
LanguageBatchInput.prototype['documents'] = undefined;






export default LanguageBatchInput;

