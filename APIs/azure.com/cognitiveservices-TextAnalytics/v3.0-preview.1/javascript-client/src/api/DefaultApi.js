/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntitiesResult from '../model/EntitiesResult';
import EntityLinkingResult from '../model/EntityLinkingResult';
import KeyPhraseResult from '../model/KeyPhraseResult';
import LanguageBatchInput from '../model/LanguageBatchInput';
import LanguageResult from '../model/LanguageResult';
import MultiLanguageBatchInput from '../model/MultiLanguageBatchInput';
import SentimentResponse from '../model/SentimentResponse';
import TextAnalyticsError from '../model/TextAnalyticsError';

/**
* Default service.
* @module api/DefaultApi
* @version v3.0-preview.1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the entitiesLinking operation.
     * @callback module:api/DefaultApi~entitiesLinkingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityLinkingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Linked entities from a well-known knowledge base
     * The API returns a list of recognized entities with links to a well-known knowledge base. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages.
     * @param {module:model/MultiLanguageBatchInput} input Collection of documents to analyze.
     * @param {Object} opts Optional parameters
     * @param {String} [modelVersion] (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. 
     * @param {Boolean} [showStats] (Optional) if set to true, response will contain input and document level statistics.
     * @param {module:api/DefaultApi~entitiesLinkingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityLinkingResult}
     */
    entitiesLinking(input, opts, callback) {
      opts = opts || {};
      let postBody = input;
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling entitiesLinking");
      }

      let pathParams = {
      };
      let queryParams = {
        'model-version': opts['modelVersion'],
        'showStats': opts['showStats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = EntityLinkingResult;
      return this.apiClient.callApi(
        '/entities/linking', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entitiesRecognitionGeneral operation.
     * @callback module:api/DefaultApi~entitiesRecognitionGeneralCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitiesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Named Entity Recognition
     * The API returns a list of general named entities in a given document. For the list of supported entity types, check <a href=\"https://aka.ms/taner\">Supported Entity Types in Text Analytics API</a>. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages.
     * @param {module:model/MultiLanguageBatchInput} input Collection of documents to analyze.
     * @param {Object} opts Optional parameters
     * @param {String} [modelVersion] (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. 
     * @param {Boolean} [showStats] (Optional) if set to true, response will contain input and document level statistics.
     * @param {module:api/DefaultApi~entitiesRecognitionGeneralCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitiesResult}
     */
    entitiesRecognitionGeneral(input, opts, callback) {
      opts = opts || {};
      let postBody = input;
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling entitiesRecognitionGeneral");
      }

      let pathParams = {
      };
      let queryParams = {
        'model-version': opts['modelVersion'],
        'showStats': opts['showStats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = EntitiesResult;
      return this.apiClient.callApi(
        '/entities/recognition/general', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entitiesRecognitionPii operation.
     * @callback module:api/DefaultApi~entitiesRecognitionPiiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitiesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Entities containing personal information
     * The API returns a list of entities with personal information (\\\"SSN\\\", \\\"Bank Account\\\" etc) in the document. For the list of supported entity types, check <a href=\"https://aka.ms/tanerpii\">Supported Entity Types in Text Analytics API</a>. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages. 
     * @param {module:model/MultiLanguageBatchInput} input Collection of documents to analyze.
     * @param {Object} opts Optional parameters
     * @param {String} [modelVersion] (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. 
     * @param {Boolean} [showStats] (Optional) if set to true, response will contain input and document level statistics.
     * @param {module:api/DefaultApi~entitiesRecognitionPiiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitiesResult}
     */
    entitiesRecognitionPii(input, opts, callback) {
      opts = opts || {};
      let postBody = input;
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling entitiesRecognitionPii");
      }

      let pathParams = {
      };
      let queryParams = {
        'model-version': opts['modelVersion'],
        'showStats': opts['showStats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = EntitiesResult;
      return this.apiClient.callApi(
        '/entities/recognition/pii', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keyPhrases operation.
     * @callback module:api/DefaultApi~keyPhrasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyPhraseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Key Phrases
     * The API returns a list of strings denoting the key phrases in the input text. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages.
     * @param {module:model/MultiLanguageBatchInput} input Collection of documents to analyze. Documents can now contain a language field to indicate the text language
     * @param {Object} opts Optional parameters
     * @param {String} [modelVersion] (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. 
     * @param {Boolean} [showStats] (Optional) if set to true, response will contain input and document level statistics.
     * @param {module:api/DefaultApi~keyPhrasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyPhraseResult}
     */
    keyPhrases(input, opts, callback) {
      opts = opts || {};
      let postBody = input;
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling keyPhrases");
      }

      let pathParams = {
      };
      let queryParams = {
        'model-version': opts['modelVersion'],
        'showStats': opts['showStats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = KeyPhraseResult;
      return this.apiClient.callApi(
        '/keyPhrases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the languages operation.
     * @callback module:api/DefaultApi~languagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LanguageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect Language
     * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages.
     * @param {module:model/LanguageBatchInput} input Collection of documents to analyze.
     * @param {Object} opts Optional parameters
     * @param {String} [modelVersion] (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. 
     * @param {Boolean} [showStats] (Optional) if set to true, response will contain input and document level statistics.
     * @param {module:api/DefaultApi~languagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LanguageResult}
     */
    languages(input, opts, callback) {
      opts = opts || {};
      let postBody = input;
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling languages");
      }

      let pathParams = {
      };
      let queryParams = {
        'model-version': opts['modelVersion'],
        'showStats': opts['showStats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = LanguageResult;
      return this.apiClient.callApi(
        '/languages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sentiment operation.
     * @callback module:api/DefaultApi~sentimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SentimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sentiment
     * The API returns a sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) for the document and each sentence within it. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of enabled languages.
     * @param {module:model/MultiLanguageBatchInput} input Collection of documents to analyze.
     * @param {Object} opts Optional parameters
     * @param {String} [modelVersion] (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version. 
     * @param {Boolean} [showStats] (Optional) if set to true, response will contain input and document level statistics.
     * @param {module:api/DefaultApi~sentimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SentimentResponse}
     */
    sentiment(input, opts, callback) {
      opts = opts || {};
      let postBody = input;
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling sentiment");
      }

      let pathParams = {
      };
      let queryParams = {
        'model-version': opts['modelVersion'],
        'showStats': opts['showStats']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = SentimentResponse;
      return this.apiClient.callApi(
        '/sentiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
