/*
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DocumentStatistics;
import org.openapitools.client.model.SentenceSentiment;
import org.openapitools.client.model.SentimentConfidenceScorePerLabel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentSentiment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:26.212686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentSentiment {
  public static final String SERIALIZED_NAME_DOCUMENT_SCORES = "documentScores";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_SCORES)
  private SentimentConfidenceScorePerLabel documentScores;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SENTENCES = "sentences";
  @SerializedName(SERIALIZED_NAME_SENTENCES)
  private List<SentenceSentiment> sentences = new ArrayList<>();

  /**
   * Predicted sentiment for document (Negative, Neutral, Positive, or Mixed).
   */
  @JsonAdapter(SentimentEnum.Adapter.class)
  public enum SentimentEnum {
    POSITIVE("positive"),
    
    NEUTRAL("neutral"),
    
    NEGATIVE("negative"),
    
    MIXED("mixed");

    private String value;

    SentimentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SentimentEnum fromValue(String value) {
      for (SentimentEnum b : SentimentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SentimentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SentimentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SentimentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SentimentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SentimentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SENTIMENT = "sentiment";
  @SerializedName(SERIALIZED_NAME_SENTIMENT)
  private SentimentEnum sentiment;

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private DocumentStatistics statistics;

  public DocumentSentiment() {
  }

  public DocumentSentiment documentScores(SentimentConfidenceScorePerLabel documentScores) {
    this.documentScores = documentScores;
    return this;
  }

  /**
   * Get documentScores
   * @return documentScores
   */
  @javax.annotation.Nonnull
  public SentimentConfidenceScorePerLabel getDocumentScores() {
    return documentScores;
  }

  public void setDocumentScores(SentimentConfidenceScorePerLabel documentScores) {
    this.documentScores = documentScores;
  }


  public DocumentSentiment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique, non-empty document identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DocumentSentiment sentences(List<SentenceSentiment> sentences) {
    this.sentences = sentences;
    return this;
  }

  public DocumentSentiment addSentencesItem(SentenceSentiment sentencesItem) {
    if (this.sentences == null) {
      this.sentences = new ArrayList<>();
    }
    this.sentences.add(sentencesItem);
    return this;
  }

  /**
   * Sentence level sentiment analysis.
   * @return sentences
   */
  @javax.annotation.Nonnull
  public List<SentenceSentiment> getSentences() {
    return sentences;
  }

  public void setSentences(List<SentenceSentiment> sentences) {
    this.sentences = sentences;
  }


  public DocumentSentiment sentiment(SentimentEnum sentiment) {
    this.sentiment = sentiment;
    return this;
  }

  /**
   * Predicted sentiment for document (Negative, Neutral, Positive, or Mixed).
   * @return sentiment
   */
  @javax.annotation.Nonnull
  public SentimentEnum getSentiment() {
    return sentiment;
  }

  public void setSentiment(SentimentEnum sentiment) {
    this.sentiment = sentiment;
  }


  public DocumentSentiment statistics(DocumentStatistics statistics) {
    this.statistics = statistics;
    return this;
  }

  /**
   * Get statistics
   * @return statistics
   */
  @javax.annotation.Nullable
  public DocumentStatistics getStatistics() {
    return statistics;
  }

  public void setStatistics(DocumentStatistics statistics) {
    this.statistics = statistics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentSentiment documentSentiment = (DocumentSentiment) o;
    return Objects.equals(this.documentScores, documentSentiment.documentScores) &&
        Objects.equals(this.id, documentSentiment.id) &&
        Objects.equals(this.sentences, documentSentiment.sentences) &&
        Objects.equals(this.sentiment, documentSentiment.sentiment) &&
        Objects.equals(this.statistics, documentSentiment.statistics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentScores, id, sentences, sentiment, statistics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentSentiment {\n");
    sb.append("    documentScores: ").append(toIndentedString(documentScores)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sentences: ").append(toIndentedString(sentences)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentScores");
    openapiFields.add("id");
    openapiFields.add("sentences");
    openapiFields.add("sentiment");
    openapiFields.add("statistics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentScores");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("sentences");
    openapiRequiredFields.add("sentiment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentSentiment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentSentiment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentSentiment is not found in the empty JSON string", DocumentSentiment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentSentiment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentSentiment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentSentiment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `documentScores`
      SentimentConfidenceScorePerLabel.validateJsonElement(jsonObj.get("documentScores"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sentences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentences` to be an array in the JSON string but got `%s`", jsonObj.get("sentences").toString()));
      }

      JsonArray jsonArraysentences = jsonObj.getAsJsonArray("sentences");
      // validate the required field `sentences` (array)
      for (int i = 0; i < jsonArraysentences.size(); i++) {
        SentenceSentiment.validateJsonElement(jsonArraysentences.get(i));
      };
      if (!jsonObj.get("sentiment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentiment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentiment").toString()));
      }
      // validate the required field `sentiment`
      SentimentEnum.validateJsonElement(jsonObj.get("sentiment"));
      // validate the optional field `statistics`
      if (jsonObj.get("statistics") != null && !jsonObj.get("statistics").isJsonNull()) {
        DocumentStatistics.validateJsonElement(jsonObj.get("statistics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentSentiment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentSentiment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentSentiment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentSentiment.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentSentiment>() {
           @Override
           public void write(JsonWriter out, DocumentSentiment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentSentiment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentSentiment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentSentiment
   * @throws IOException if the JSON string is invalid with respect to DocumentSentiment
   */
  public static DocumentSentiment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentSentiment.class);
  }

  /**
   * Convert an instance of DocumentSentiment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

