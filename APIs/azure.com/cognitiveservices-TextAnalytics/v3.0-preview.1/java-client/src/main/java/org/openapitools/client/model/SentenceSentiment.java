/*
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SentimentConfidenceScorePerLabel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SentenceSentiment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:26.212686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SentenceSentiment {
  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_SENTENCE_SCORES = "sentenceScores";
  @SerializedName(SERIALIZED_NAME_SENTENCE_SCORES)
  private SentimentConfidenceScorePerLabel sentenceScores;

  /**
   * The predicted Sentiment for the sentence.
   */
  @JsonAdapter(SentimentEnum.Adapter.class)
  public enum SentimentEnum {
    POSITIVE("positive"),
    
    NEUTRAL("neutral"),
    
    NEGATIVE("negative");

    private String value;

    SentimentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SentimentEnum fromValue(String value) {
      for (SentimentEnum b : SentimentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SentimentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SentimentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SentimentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SentimentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SentimentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SENTIMENT = "sentiment";
  @SerializedName(SERIALIZED_NAME_SENTIMENT)
  private SentimentEnum sentiment;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<String> warnings = new ArrayList<>();

  public SentenceSentiment() {
  }

  public SentenceSentiment length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * The length of the sentence by Unicode standard.
   * @return length
   */
  @javax.annotation.Nonnull
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public SentenceSentiment offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The sentence offset from the start of the document.
   * @return offset
   */
  @javax.annotation.Nonnull
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public SentenceSentiment sentenceScores(SentimentConfidenceScorePerLabel sentenceScores) {
    this.sentenceScores = sentenceScores;
    return this;
  }

  /**
   * Get sentenceScores
   * @return sentenceScores
   */
  @javax.annotation.Nonnull
  public SentimentConfidenceScorePerLabel getSentenceScores() {
    return sentenceScores;
  }

  public void setSentenceScores(SentimentConfidenceScorePerLabel sentenceScores) {
    this.sentenceScores = sentenceScores;
  }


  public SentenceSentiment sentiment(SentimentEnum sentiment) {
    this.sentiment = sentiment;
    return this;
  }

  /**
   * The predicted Sentiment for the sentence.
   * @return sentiment
   */
  @javax.annotation.Nonnull
  public SentimentEnum getSentiment() {
    return sentiment;
  }

  public void setSentiment(SentimentEnum sentiment) {
    this.sentiment = sentiment;
  }


  public SentenceSentiment warnings(List<String> warnings) {
    this.warnings = warnings;
    return this;
  }

  public SentenceSentiment addWarningsItem(String warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * The warnings generated for the sentence.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<String> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<String> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentenceSentiment sentenceSentiment = (SentenceSentiment) o;
    return Objects.equals(this.length, sentenceSentiment.length) &&
        Objects.equals(this.offset, sentenceSentiment.offset) &&
        Objects.equals(this.sentenceScores, sentenceSentiment.sentenceScores) &&
        Objects.equals(this.sentiment, sentenceSentiment.sentiment) &&
        Objects.equals(this.warnings, sentenceSentiment.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(length, offset, sentenceScores, sentiment, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentenceSentiment {\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    sentenceScores: ").append(toIndentedString(sentenceScores)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("length");
    openapiFields.add("offset");
    openapiFields.add("sentenceScores");
    openapiFields.add("sentiment");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("length");
    openapiRequiredFields.add("offset");
    openapiRequiredFields.add("sentenceScores");
    openapiRequiredFields.add("sentiment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SentenceSentiment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SentenceSentiment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SentenceSentiment is not found in the empty JSON string", SentenceSentiment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SentenceSentiment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SentenceSentiment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SentenceSentiment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `sentenceScores`
      SentimentConfidenceScorePerLabel.validateJsonElement(jsonObj.get("sentenceScores"));
      if (!jsonObj.get("sentiment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentiment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentiment").toString()));
      }
      // validate the required field `sentiment`
      SentimentEnum.validateJsonElement(jsonObj.get("sentiment"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull() && !jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SentenceSentiment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SentenceSentiment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SentenceSentiment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SentenceSentiment.class));

       return (TypeAdapter<T>) new TypeAdapter<SentenceSentiment>() {
           @Override
           public void write(JsonWriter out, SentenceSentiment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SentenceSentiment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SentenceSentiment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SentenceSentiment
   * @throws IOException if the JSON string is invalid with respect to SentenceSentiment
   */
  public static SentenceSentiment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SentenceSentiment.class);
  }

  /**
   * Convert an instance of SentenceSentiment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

