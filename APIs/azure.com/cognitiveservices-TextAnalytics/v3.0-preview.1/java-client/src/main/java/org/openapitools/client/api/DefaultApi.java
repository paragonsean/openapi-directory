/*
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EntitiesResult;
import org.openapitools.client.model.EntityLinkingResult;
import org.openapitools.client.model.KeyPhraseResult;
import org.openapitools.client.model.LanguageBatchInput;
import org.openapitools.client.model.LanguageResult;
import org.openapitools.client.model.MultiLanguageBatchInput;
import org.openapitools.client.model.SentimentResponse;
import org.openapitools.client.model.TextAnalyticsError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for entitiesLinking
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of recognized entities with links to a well-known knowledge base returned for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesLinkingCall(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/entities/linking";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model-version", modelVersion));
        }

        if (showStats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showStats", showStats));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesLinkingValidateBeforeCall(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling entitiesLinking(Async)");
        }

        return entitiesLinkingCall(input, modelVersion, showStats, _callback);

    }

    /**
     * Linked entities from a well-known knowledge base
     * The API returns a list of recognized entities with links to a well-known knowledge base. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return EntityLinkingResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of recognized entities with links to a well-known knowledge base returned for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public EntityLinkingResult entitiesLinking(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        ApiResponse<EntityLinkingResult> localVarResp = entitiesLinkingWithHttpInfo(input, modelVersion, showStats);
        return localVarResp.getData();
    }

    /**
     * Linked entities from a well-known knowledge base
     * The API returns a list of recognized entities with links to a well-known knowledge base. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return ApiResponse&lt;EntityLinkingResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of recognized entities with links to a well-known knowledge base returned for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityLinkingResult> entitiesLinkingWithHttpInfo(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        okhttp3.Call localVarCall = entitiesLinkingValidateBeforeCall(input, modelVersion, showStats, null);
        Type localVarReturnType = new TypeToken<EntityLinkingResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Linked entities from a well-known knowledge base (asynchronously)
     * The API returns a list of recognized entities with links to a well-known knowledge base. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of recognized entities with links to a well-known knowledge base returned for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesLinkingAsync(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback<EntityLinkingResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesLinkingValidateBeforeCall(input, modelVersion, showStats, _callback);
        Type localVarReturnType = new TypeToken<EntityLinkingResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesRecognitionGeneral
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of recognized entities returned for each valid document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesRecognitionGeneralCall(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/entities/recognition/general";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model-version", modelVersion));
        }

        if (showStats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showStats", showStats));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesRecognitionGeneralValidateBeforeCall(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling entitiesRecognitionGeneral(Async)");
        }

        return entitiesRecognitionGeneralCall(input, modelVersion, showStats, _callback);

    }

    /**
     * Named Entity Recognition
     * The API returns a list of general named entities in a given document. For the list of supported entity types, check &lt;a href&#x3D;\&quot;https://aka.ms/taner\&quot;&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return EntitiesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of recognized entities returned for each valid document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public EntitiesResult entitiesRecognitionGeneral(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        ApiResponse<EntitiesResult> localVarResp = entitiesRecognitionGeneralWithHttpInfo(input, modelVersion, showStats);
        return localVarResp.getData();
    }

    /**
     * Named Entity Recognition
     * The API returns a list of general named entities in a given document. For the list of supported entity types, check &lt;a href&#x3D;\&quot;https://aka.ms/taner\&quot;&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return ApiResponse&lt;EntitiesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of recognized entities returned for each valid document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntitiesResult> entitiesRecognitionGeneralWithHttpInfo(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        okhttp3.Call localVarCall = entitiesRecognitionGeneralValidateBeforeCall(input, modelVersion, showStats, null);
        Type localVarReturnType = new TypeToken<EntitiesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Named Entity Recognition (asynchronously)
     * The API returns a list of general named entities in a given document. For the list of supported entity types, check &lt;a href&#x3D;\&quot;https://aka.ms/taner\&quot;&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of recognized entities returned for each valid document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesRecognitionGeneralAsync(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback<EntitiesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesRecognitionGeneralValidateBeforeCall(input, modelVersion, showStats, _callback);
        Type localVarReturnType = new TypeToken<EntitiesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesRecognitionPii
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of entities containing personal information returned for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesRecognitionPiiCall(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/entities/recognition/pii";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model-version", modelVersion));
        }

        if (showStats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showStats", showStats));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesRecognitionPiiValidateBeforeCall(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling entitiesRecognitionPii(Async)");
        }

        return entitiesRecognitionPiiCall(input, modelVersion, showStats, _callback);

    }

    /**
     * Entities containing personal information
     * The API returns a list of entities with personal information (\\\&quot;SSN\\\&quot;, \\\&quot;Bank Account\\\&quot; etc) in the document. For the list of supported entity types, check &lt;a href&#x3D;\&quot;https://aka.ms/tanerpii\&quot;&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages. 
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return EntitiesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of entities containing personal information returned for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public EntitiesResult entitiesRecognitionPii(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        ApiResponse<EntitiesResult> localVarResp = entitiesRecognitionPiiWithHttpInfo(input, modelVersion, showStats);
        return localVarResp.getData();
    }

    /**
     * Entities containing personal information
     * The API returns a list of entities with personal information (\\\&quot;SSN\\\&quot;, \\\&quot;Bank Account\\\&quot; etc) in the document. For the list of supported entity types, check &lt;a href&#x3D;\&quot;https://aka.ms/tanerpii\&quot;&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages. 
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return ApiResponse&lt;EntitiesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of entities containing personal information returned for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntitiesResult> entitiesRecognitionPiiWithHttpInfo(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        okhttp3.Call localVarCall = entitiesRecognitionPiiValidateBeforeCall(input, modelVersion, showStats, null);
        Type localVarReturnType = new TypeToken<EntitiesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Entities containing personal information (asynchronously)
     * The API returns a list of entities with personal information (\\\&quot;SSN\\\&quot;, \\\&quot;Bank Account\\\&quot; etc) in the document. For the list of supported entity types, check &lt;a href&#x3D;\&quot;https://aka.ms/tanerpii\&quot;&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages. 
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a list of entities containing personal information returned for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesRecognitionPiiAsync(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback<EntitiesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesRecognitionPiiValidateBeforeCall(input, modelVersion, showStats, _callback);
        Type localVarReturnType = new TypeToken<EntitiesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyPhrases
     * @param input Collection of documents to analyze. Documents can now contain a language field to indicate the text language (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response results in 0 or more key phrases identified in each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyPhrasesCall(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/keyPhrases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model-version", modelVersion));
        }

        if (showStats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showStats", showStats));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyPhrasesValidateBeforeCall(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling keyPhrases(Async)");
        }

        return keyPhrasesCall(input, modelVersion, showStats, _callback);

    }

    /**
     * Key Phrases
     * The API returns a list of strings denoting the key phrases in the input text. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. Documents can now contain a language field to indicate the text language (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return KeyPhraseResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response results in 0 or more key phrases identified in each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public KeyPhraseResult keyPhrases(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        ApiResponse<KeyPhraseResult> localVarResp = keyPhrasesWithHttpInfo(input, modelVersion, showStats);
        return localVarResp.getData();
    }

    /**
     * Key Phrases
     * The API returns a list of strings denoting the key phrases in the input text. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. Documents can now contain a language field to indicate the text language (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return ApiResponse&lt;KeyPhraseResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response results in 0 or more key phrases identified in each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyPhraseResult> keyPhrasesWithHttpInfo(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        okhttp3.Call localVarCall = keyPhrasesValidateBeforeCall(input, modelVersion, showStats, null);
        Type localVarReturnType = new TypeToken<KeyPhraseResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Key Phrases (asynchronously)
     * The API returns a list of strings denoting the key phrases in the input text. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. Documents can now contain a language field to indicate the text language (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response results in 0 or more key phrases identified in each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyPhrasesAsync(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback<KeyPhraseResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyPhrasesValidateBeforeCall(input, modelVersion, showStats, _callback);
        Type localVarReturnType = new TypeToken<KeyPhraseResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for languages
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in the detected language with the highest probability for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesCall(LanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model-version", modelVersion));
        }

        if (showStats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showStats", showStats));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesValidateBeforeCall(LanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling languages(Async)");
        }

        return languagesCall(input, modelVersion, showStats, _callback);

    }

    /**
     * Detect Language
     * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return LanguageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in the detected language with the highest probability for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public LanguageResult languages(LanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        ApiResponse<LanguageResult> localVarResp = languagesWithHttpInfo(input, modelVersion, showStats);
        return localVarResp.getData();
    }

    /**
     * Detect Language
     * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return ApiResponse&lt;LanguageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in the detected language with the highest probability for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LanguageResult> languagesWithHttpInfo(LanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        okhttp3.Call localVarCall = languagesValidateBeforeCall(input, modelVersion, showStats, null);
        Type localVarReturnType = new TypeToken<LanguageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect Language (asynchronously)
     * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in the detected language with the highest probability for each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesAsync(LanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback<LanguageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesValidateBeforeCall(input, modelVersion, showStats, _callback);
        Type localVarReturnType = new TypeToken<LanguageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sentiment
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a document sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentimentCall(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/sentiment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modelVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model-version", modelVersion));
        }

        if (showStats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showStats", showStats));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sentimentValidateBeforeCall(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling sentiment(Async)");
        }

        return sentimentCall(input, modelVersion, showStats, _callback);

    }

    /**
     * Sentiment
     * The API returns a sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) for the document and each sentence within it. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return SentimentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a document sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public SentimentResponse sentiment(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        ApiResponse<SentimentResponse> localVarResp = sentimentWithHttpInfo(input, modelVersion, showStats);
        return localVarResp.getData();
    }

    /**
     * Sentiment
     * The API returns a sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) for the document and each sentence within it. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @return ApiResponse&lt;SentimentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a document sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SentimentResponse> sentimentWithHttpInfo(MultiLanguageBatchInput input, String modelVersion, Boolean showStats) throws ApiException {
        okhttp3.Call localVarCall = sentimentValidateBeforeCall(input, modelVersion, showStats, null);
        Type localVarReturnType = new TypeToken<SentimentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sentiment (asynchronously)
     * The API returns a sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) for the document and each sentence within it. See the &lt;a href&#x3D;\&quot;https://aka.ms/talangs\&quot;&gt;Supported languages in Text Analytics API&lt;/a&gt; for the list of enabled languages.
     * @param input Collection of documents to analyze. (required)
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.  (optional)
     * @param showStats (Optional) if set to true, response will contain input and document level statistics. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful call results in a document sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentimentAsync(MultiLanguageBatchInput input, String modelVersion, Boolean showStats, final ApiCallback<SentimentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sentimentValidateBeforeCall(input, modelVersion, showStats, _callback);
        Type localVarReturnType = new TypeToken<SentimentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
