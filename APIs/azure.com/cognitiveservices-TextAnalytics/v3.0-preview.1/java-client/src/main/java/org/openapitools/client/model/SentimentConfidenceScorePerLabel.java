/*
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:26.212686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SentimentConfidenceScorePerLabel {
  public static final String SERIALIZED_NAME_NEGATIVE = "negative";
  @SerializedName(SERIALIZED_NAME_NEGATIVE)
  private Double negative;

  public static final String SERIALIZED_NAME_NEUTRAL = "neutral";
  @SerializedName(SERIALIZED_NAME_NEUTRAL)
  private Double neutral;

  public static final String SERIALIZED_NAME_POSITIVE = "positive";
  @SerializedName(SERIALIZED_NAME_POSITIVE)
  private Double positive;

  public SentimentConfidenceScorePerLabel() {
  }

  public SentimentConfidenceScorePerLabel negative(Double negative) {
    this.negative = negative;
    return this;
  }

  /**
   * Get negative
   * @return negative
   */
  @javax.annotation.Nonnull
  public Double getNegative() {
    return negative;
  }

  public void setNegative(Double negative) {
    this.negative = negative;
  }


  public SentimentConfidenceScorePerLabel neutral(Double neutral) {
    this.neutral = neutral;
    return this;
  }

  /**
   * Get neutral
   * @return neutral
   */
  @javax.annotation.Nonnull
  public Double getNeutral() {
    return neutral;
  }

  public void setNeutral(Double neutral) {
    this.neutral = neutral;
  }


  public SentimentConfidenceScorePerLabel positive(Double positive) {
    this.positive = positive;
    return this;
  }

  /**
   * Get positive
   * @return positive
   */
  @javax.annotation.Nonnull
  public Double getPositive() {
    return positive;
  }

  public void setPositive(Double positive) {
    this.positive = positive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentimentConfidenceScorePerLabel sentimentConfidenceScorePerLabel = (SentimentConfidenceScorePerLabel) o;
    return Objects.equals(this.negative, sentimentConfidenceScorePerLabel.negative) &&
        Objects.equals(this.neutral, sentimentConfidenceScorePerLabel.neutral) &&
        Objects.equals(this.positive, sentimentConfidenceScorePerLabel.positive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negative, neutral, positive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentimentConfidenceScorePerLabel {\n");
    sb.append("    negative: ").append(toIndentedString(negative)).append("\n");
    sb.append("    neutral: ").append(toIndentedString(neutral)).append("\n");
    sb.append("    positive: ").append(toIndentedString(positive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("negative");
    openapiFields.add("neutral");
    openapiFields.add("positive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("negative");
    openapiRequiredFields.add("neutral");
    openapiRequiredFields.add("positive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SentimentConfidenceScorePerLabel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SentimentConfidenceScorePerLabel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SentimentConfidenceScorePerLabel is not found in the empty JSON string", SentimentConfidenceScorePerLabel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SentimentConfidenceScorePerLabel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SentimentConfidenceScorePerLabel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SentimentConfidenceScorePerLabel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SentimentConfidenceScorePerLabel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SentimentConfidenceScorePerLabel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SentimentConfidenceScorePerLabel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SentimentConfidenceScorePerLabel.class));

       return (TypeAdapter<T>) new TypeAdapter<SentimentConfidenceScorePerLabel>() {
           @Override
           public void write(JsonWriter out, SentimentConfidenceScorePerLabel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SentimentConfidenceScorePerLabel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SentimentConfidenceScorePerLabel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SentimentConfidenceScorePerLabel
   * @throws IOException if the JSON string is invalid with respect to SentimentConfidenceScorePerLabel
   */
  public static SentimentConfidenceScorePerLabel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SentimentConfidenceScorePerLabel.class);
  }

  /**
   * Convert an instance of SentimentConfidenceScorePerLabel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

