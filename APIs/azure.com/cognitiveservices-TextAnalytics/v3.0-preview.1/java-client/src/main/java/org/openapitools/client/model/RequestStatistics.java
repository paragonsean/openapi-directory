/*
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v3.0-preview.1
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * if showStats&#x3D;true was specified in the request this field will contain information about the request payload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:26.212686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestStatistics {
  public static final String SERIALIZED_NAME_DOCUMENTS_COUNT = "documentsCount";
  @SerializedName(SERIALIZED_NAME_DOCUMENTS_COUNT)
  private Integer documentsCount;

  public static final String SERIALIZED_NAME_ERRONEOUS_DOCUMENTS_COUNT = "erroneousDocumentsCount";
  @SerializedName(SERIALIZED_NAME_ERRONEOUS_DOCUMENTS_COUNT)
  private Integer erroneousDocumentsCount;

  public static final String SERIALIZED_NAME_TRANSACTIONS_COUNT = "transactionsCount";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_COUNT)
  private Long transactionsCount;

  public static final String SERIALIZED_NAME_VALID_DOCUMENTS_COUNT = "validDocumentsCount";
  @SerializedName(SERIALIZED_NAME_VALID_DOCUMENTS_COUNT)
  private Integer validDocumentsCount;

  public RequestStatistics() {
  }

  public RequestStatistics documentsCount(Integer documentsCount) {
    this.documentsCount = documentsCount;
    return this;
  }

  /**
   * Number of documents submitted in the request.
   * @return documentsCount
   */
  @javax.annotation.Nonnull
  public Integer getDocumentsCount() {
    return documentsCount;
  }

  public void setDocumentsCount(Integer documentsCount) {
    this.documentsCount = documentsCount;
  }


  public RequestStatistics erroneousDocumentsCount(Integer erroneousDocumentsCount) {
    this.erroneousDocumentsCount = erroneousDocumentsCount;
    return this;
  }

  /**
   * Number of invalid documents. This includes empty, over-size limit or non-supported languages documents.
   * @return erroneousDocumentsCount
   */
  @javax.annotation.Nonnull
  public Integer getErroneousDocumentsCount() {
    return erroneousDocumentsCount;
  }

  public void setErroneousDocumentsCount(Integer erroneousDocumentsCount) {
    this.erroneousDocumentsCount = erroneousDocumentsCount;
  }


  public RequestStatistics transactionsCount(Long transactionsCount) {
    this.transactionsCount = transactionsCount;
    return this;
  }

  /**
   * Number of transactions for the request.
   * @return transactionsCount
   */
  @javax.annotation.Nonnull
  public Long getTransactionsCount() {
    return transactionsCount;
  }

  public void setTransactionsCount(Long transactionsCount) {
    this.transactionsCount = transactionsCount;
  }


  public RequestStatistics validDocumentsCount(Integer validDocumentsCount) {
    this.validDocumentsCount = validDocumentsCount;
    return this;
  }

  /**
   * Number of valid documents. This excludes empty, over-size limit or non-supported languages documents.
   * @return validDocumentsCount
   */
  @javax.annotation.Nonnull
  public Integer getValidDocumentsCount() {
    return validDocumentsCount;
  }

  public void setValidDocumentsCount(Integer validDocumentsCount) {
    this.validDocumentsCount = validDocumentsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestStatistics requestStatistics = (RequestStatistics) o;
    return Objects.equals(this.documentsCount, requestStatistics.documentsCount) &&
        Objects.equals(this.erroneousDocumentsCount, requestStatistics.erroneousDocumentsCount) &&
        Objects.equals(this.transactionsCount, requestStatistics.transactionsCount) &&
        Objects.equals(this.validDocumentsCount, requestStatistics.validDocumentsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentsCount, erroneousDocumentsCount, transactionsCount, validDocumentsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestStatistics {\n");
    sb.append("    documentsCount: ").append(toIndentedString(documentsCount)).append("\n");
    sb.append("    erroneousDocumentsCount: ").append(toIndentedString(erroneousDocumentsCount)).append("\n");
    sb.append("    transactionsCount: ").append(toIndentedString(transactionsCount)).append("\n");
    sb.append("    validDocumentsCount: ").append(toIndentedString(validDocumentsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentsCount");
    openapiFields.add("erroneousDocumentsCount");
    openapiFields.add("transactionsCount");
    openapiFields.add("validDocumentsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentsCount");
    openapiRequiredFields.add("erroneousDocumentsCount");
    openapiRequiredFields.add("transactionsCount");
    openapiRequiredFields.add("validDocumentsCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestStatistics is not found in the empty JSON string", RequestStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestStatistics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestStatistics>() {
           @Override
           public void write(JsonWriter out, RequestStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestStatistics
   * @throws IOException if the JSON string is invalid with respect to RequestStatistics
   */
  public static RequestStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestStatistics.class);
  }

  /**
   * Convert an instance of RequestStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

