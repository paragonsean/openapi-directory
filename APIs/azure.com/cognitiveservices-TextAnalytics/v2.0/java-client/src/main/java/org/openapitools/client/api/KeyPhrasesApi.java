/*
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.0
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.KeyPhraseBatchResult;
import org.openapitools.client.model.MultiLanguageBatchInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KeyPhrasesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KeyPhrasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KeyPhrasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for keyPhrases
     * @param input Collection of documents to analyze. Documents can now contain a language field to indicate the text language (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response results in 0 or more key phrases identified in each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyPhrasesCall(MultiLanguageBatchInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/keyPhrases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyPhrasesValidateBeforeCall(MultiLanguageBatchInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling keyPhrases(Async)");
        }

        return keyPhrasesCall(input, _callback);

    }

    /**
     * The API returns a list of strings denoting the key talking points in the input text.
     * See the &lt;a href&#x3D;\&quot;https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages\&quot;&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by key phrase extraction.
     * @param input Collection of documents to analyze. Documents can now contain a language field to indicate the text language (required)
     * @return KeyPhraseBatchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response results in 0 or more key phrases identified in each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public KeyPhraseBatchResult keyPhrases(MultiLanguageBatchInput input) throws ApiException {
        ApiResponse<KeyPhraseBatchResult> localVarResp = keyPhrasesWithHttpInfo(input);
        return localVarResp.getData();
    }

    /**
     * The API returns a list of strings denoting the key talking points in the input text.
     * See the &lt;a href&#x3D;\&quot;https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages\&quot;&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by key phrase extraction.
     * @param input Collection of documents to analyze. Documents can now contain a language field to indicate the text language (required)
     * @return ApiResponse&lt;KeyPhraseBatchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response results in 0 or more key phrases identified in each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyPhraseBatchResult> keyPhrasesWithHttpInfo(MultiLanguageBatchInput input) throws ApiException {
        okhttp3.Call localVarCall = keyPhrasesValidateBeforeCall(input, null);
        Type localVarReturnType = new TypeToken<KeyPhraseBatchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The API returns a list of strings denoting the key talking points in the input text. (asynchronously)
     * See the &lt;a href&#x3D;\&quot;https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages\&quot;&gt;Text Analytics Documentation&lt;/a&gt; for details about the languages that are supported by key phrase extraction.
     * @param input Collection of documents to analyze. Documents can now contain a language field to indicate the text language (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response results in 0 or more key phrases identified in each valid document </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyPhrasesAsync(MultiLanguageBatchInput input, final ApiCallback<KeyPhraseBatchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyPhrasesValidateBeforeCall(input, _callback);
        Type localVarReturnType = new TypeToken<KeyPhraseBatchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
