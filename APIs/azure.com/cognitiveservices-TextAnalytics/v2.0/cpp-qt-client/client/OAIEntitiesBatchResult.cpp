/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.0
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitiesBatchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitiesBatchResult::OAIEntitiesBatchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitiesBatchResult::OAIEntitiesBatchResult() {
    this->initializeModel();
}

OAIEntitiesBatchResult::~OAIEntitiesBatchResult() {}

void OAIEntitiesBatchResult::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;
}

void OAIEntitiesBatchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntitiesBatchResult::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;
}

QString OAIEntitiesBatchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntitiesBatchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    return obj;
}

QList<OAIEntitiesBatchResultItem> OAIEntitiesBatchResult::getDocuments() const {
    return m_documents;
}
void OAIEntitiesBatchResult::setDocuments(const QList<OAIEntitiesBatchResultItem> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIEntitiesBatchResult::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIEntitiesBatchResult::is_documents_Valid() const{
    return m_documents_isValid;
}

QList<OAIErrorRecord> OAIEntitiesBatchResult::getErrors() const {
    return m_errors;
}
void OAIEntitiesBatchResult::setErrors(const QList<OAIErrorRecord> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIEntitiesBatchResult::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIEntitiesBatchResult::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIEntitiesBatchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntitiesBatchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
