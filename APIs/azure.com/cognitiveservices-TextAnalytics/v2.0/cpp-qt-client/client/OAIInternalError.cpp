/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.0
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInternalError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInternalError::OAIInternalError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInternalError::OAIInternalError() {
    this->initializeModel();
}

OAIInternalError::~OAIInternalError() {}

void OAIInternalError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_inner_error_isSet = false;
    m_inner_error_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIInternalError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInternalError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_inner_error_isValid = ::OpenAPI::fromJsonValue(m_inner_error, json[QString("innerError")]);
    m_inner_error_isSet = !json[QString("innerError")].isNull() && m_inner_error_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIInternalError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInternalError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_inner_error.isSet()) {
        obj.insert(QString("innerError"), ::OpenAPI::toJsonValue(m_inner_error));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIInternalError::getCode() const {
    return m_code;
}
void OAIInternalError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIInternalError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIInternalError::is_code_Valid() const{
    return m_code_isValid;
}

OAIInternalError OAIInternalError::getInnerError() const {
    return m_inner_error;
}
void OAIInternalError::setInnerError(const OAIInternalError &inner_error) {
    m_inner_error = inner_error;
    m_inner_error_isSet = true;
}

bool OAIInternalError::is_inner_error_Set() const{
    return m_inner_error_isSet;
}

bool OAIInternalError::is_inner_error_Valid() const{
    return m_inner_error_isValid;
}

QString OAIInternalError::getMessage() const {
    return m_message;
}
void OAIInternalError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIInternalError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIInternalError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIInternalError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inner_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInternalError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
