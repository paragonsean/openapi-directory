/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.0
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiLanguageInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiLanguageInput::OAIMultiLanguageInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiLanguageInput::OAIMultiLanguageInput() {
    this->initializeModel();
}

OAIMultiLanguageInput::~OAIMultiLanguageInput() {}

void OAIMultiLanguageInput::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIMultiLanguageInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiLanguageInput::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIMultiLanguageInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiLanguageInput::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIMultiLanguageInput::getId() const {
    return m_id;
}
void OAIMultiLanguageInput::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMultiLanguageInput::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMultiLanguageInput::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMultiLanguageInput::getLanguage() const {
    return m_language;
}
void OAIMultiLanguageInput::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIMultiLanguageInput::is_language_Set() const{
    return m_language_isSet;
}

bool OAIMultiLanguageInput::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIMultiLanguageInput::getText() const {
    return m_text;
}
void OAIMultiLanguageInput::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMultiLanguageInput::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMultiLanguageInput::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIMultiLanguageInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiLanguageInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
