/**
 * Text Analytics Client
 * The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection. No training data is needed to use this API; just bring your text data. This API uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
 *
 * The version of the OpenAPI document: v2.0
 * Contact: mlapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitiesBatchResultItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitiesBatchResultItem::OAIEntitiesBatchResultItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitiesBatchResultItem::OAIEntitiesBatchResultItem() {
    this->initializeModel();
}

OAIEntitiesBatchResultItem::~OAIEntitiesBatchResultItem() {}

void OAIEntitiesBatchResultItem::initializeModel() {

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIEntitiesBatchResultItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntitiesBatchResultItem::fromJsonObject(QJsonObject json) {

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIEntitiesBatchResultItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntitiesBatchResultItem::asJsonObject() const {
    QJsonObject obj;
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QList<OAIEntityRecord> OAIEntitiesBatchResultItem::getEntities() const {
    return m_entities;
}
void OAIEntitiesBatchResultItem::setEntities(const QList<OAIEntityRecord> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIEntitiesBatchResultItem::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIEntitiesBatchResultItem::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIEntitiesBatchResultItem::getId() const {
    return m_id;
}
void OAIEntitiesBatchResultItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEntitiesBatchResultItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEntitiesBatchResultItem::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIEntitiesBatchResultItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntitiesBatchResultItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
