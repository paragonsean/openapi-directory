# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectedLanguage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iso6391_name: str=None, name: str=None, score: float=None):
        """DetectedLanguage - a model defined in OpenAPI

        :param iso6391_name: The iso6391_name of this DetectedLanguage.
        :param name: The name of this DetectedLanguage.
        :param score: The score of this DetectedLanguage.
        """
        self.openapi_types = {
            'iso6391_name': str,
            'name': str,
            'score': float
        }

        self.attribute_map = {
            'iso6391_name': 'iso6391Name',
            'name': 'name',
            'score': 'score'
        }

        self._iso6391_name = iso6391_name
        self._name = name
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectedLanguage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectedLanguage of this DetectedLanguage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iso6391_name(self):
        """Gets the iso6391_name of this DetectedLanguage.

        A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr).

        :return: The iso6391_name of this DetectedLanguage.
        :rtype: str
        """
        return self._iso6391_name

    @iso6391_name.setter
    def iso6391_name(self, iso6391_name):
        """Sets the iso6391_name of this DetectedLanguage.

        A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr).

        :param iso6391_name: The iso6391_name of this DetectedLanguage.
        :type iso6391_name: str
        """

        self._iso6391_name = iso6391_name

    @property
    def name(self):
        """Gets the name of this DetectedLanguage.

        Long name of a detected language (e.g. English, French).

        :return: The name of this DetectedLanguage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DetectedLanguage.

        Long name of a detected language (e.g. English, French).

        :param name: The name of this DetectedLanguage.
        :type name: str
        """

        self._name = name

    @property
    def score(self):
        """Gets the score of this DetectedLanguage.

        A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true.

        :return: The score of this DetectedLanguage.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this DetectedLanguage.

        A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true.

        :param score: The score of this DetectedLanguage.
        :type score: float
        """

        self._score = score
