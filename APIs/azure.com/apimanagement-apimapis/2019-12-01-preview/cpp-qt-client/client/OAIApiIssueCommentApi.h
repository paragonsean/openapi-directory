/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiIssueCommentApi_H
#define OAI_OAIApiIssueCommentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiIssueComment_Get_200_response.h"
#include "OAIApiIssueComment_ListByService_200_response.h"
#include "OAIApi_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiIssueCommentApi : public QObject {
    Q_OBJECT

public:
    OAIApiIssueCommentApi(const int timeOut = 0);
    ~OAIApiIssueCommentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  comment_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiIssueComment_Get_200_response [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void apiIssueCommentCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &issue_id, const QString &comment_id, const QString &api_version, const QString &subscription_id, const OAIApiIssueComment_Get_200_response &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  comment_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiIssueCommentDelete(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &issue_id, const QString &comment_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  comment_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiIssueCommentGet(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &issue_id, const QString &comment_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  comment_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiIssueCommentGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &issue_id, const QString &comment_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void apiIssueCommentListByService(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &issue_id, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiIssueCommentCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void apiIssueCommentDeleteCallback(OAIHttpRequestWorker *worker);
    void apiIssueCommentGetCallback(OAIHttpRequestWorker *worker);
    void apiIssueCommentGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void apiIssueCommentListByServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiIssueCommentCreateOrUpdateSignal(OAIApiIssueComment_Get_200_response summary);
    void apiIssueCommentDeleteSignal();
    void apiIssueCommentGetSignal(OAIApiIssueComment_Get_200_response summary);
    void apiIssueCommentGetEntityTagSignal();
    void apiIssueCommentListByServiceSignal(OAIApiIssueComment_ListByService_200_response summary);


    void apiIssueCommentCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiIssueComment_Get_200_response summary);
    void apiIssueCommentDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiIssueCommentGetSignalFull(OAIHttpRequestWorker *worker, OAIApiIssueComment_Get_200_response summary);
    void apiIssueCommentGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void apiIssueCommentListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIApiIssueComment_ListByService_200_response summary);

    Q_DECL_DEPRECATED_X("Use apiIssueCommentCreateOrUpdateSignalError() instead")
    void apiIssueCommentCreateOrUpdateSignalE(OAIApiIssueComment_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCommentCreateOrUpdateSignalError(OAIApiIssueComment_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueCommentDeleteSignalError() instead")
    void apiIssueCommentDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCommentDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueCommentGetSignalError() instead")
    void apiIssueCommentGetSignalE(OAIApiIssueComment_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCommentGetSignalError(OAIApiIssueComment_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueCommentGetEntityTagSignalError() instead")
    void apiIssueCommentGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCommentGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueCommentListByServiceSignalError() instead")
    void apiIssueCommentListByServiceSignalE(OAIApiIssueComment_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCommentListByServiceSignalError(OAIApiIssueComment_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiIssueCommentCreateOrUpdateSignalErrorFull() instead")
    void apiIssueCommentCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCommentCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueCommentDeleteSignalErrorFull() instead")
    void apiIssueCommentDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCommentDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueCommentGetSignalErrorFull() instead")
    void apiIssueCommentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCommentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueCommentGetEntityTagSignalErrorFull() instead")
    void apiIssueCommentGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCommentGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueCommentListByServiceSignalErrorFull() instead")
    void apiIssueCommentListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCommentListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
