/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiApi_H
#define OAI_OAIApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_CreateOrUpdate_request.h"
#include "OAIApi_Get_200_response.h"
#include "OAIApi_ListByService_200_response.h"
#include "OAIApi_ListByService_default_response.h"
#include "OAIApi_Update_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiApi : public QObject {
    Q_OBJECT

public:
    OAIApiApi(const int timeOut = 0);
    ~OAIApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApi_CreateOrUpdate_request [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void apiCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &api_version, const QString &subscription_id, const OAIApi_CreateOrUpdate_request &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  delete_revisions bool [optional]
    */
    virtual void apiDelete(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<bool> &delete_revisions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiGet(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  expand_api_version_set bool [optional]
    */
    virtual void apiListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_api_version_set = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApi_Update_request [required]
    */
    virtual void apiUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIApi_Update_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void apiDeleteCallback(OAIHttpRequestWorker *worker);
    void apiGetCallback(OAIHttpRequestWorker *worker);
    void apiGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void apiListByServiceCallback(OAIHttpRequestWorker *worker);
    void apiUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiCreateOrUpdateSignal(OAIApi_Get_200_response summary);
    void apiDeleteSignal();
    void apiGetSignal(OAIApi_Get_200_response summary);
    void apiGetEntityTagSignal();
    void apiListByServiceSignal(OAIApi_ListByService_200_response summary);
    void apiUpdateSignal();


    void apiCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApi_Get_200_response summary);
    void apiDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiGetSignalFull(OAIHttpRequestWorker *worker, OAIApi_Get_200_response summary);
    void apiGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void apiListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIApi_ListByService_200_response summary);
    void apiUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiCreateOrUpdateSignalError() instead")
    void apiCreateOrUpdateSignalE(OAIApi_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiCreateOrUpdateSignalError(OAIApi_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDeleteSignalError() instead")
    void apiDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiGetSignalError() instead")
    void apiGetSignalE(OAIApi_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiGetSignalError(OAIApi_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiGetEntityTagSignalError() instead")
    void apiGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiListByServiceSignalError() instead")
    void apiListByServiceSignalE(OAIApi_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiListByServiceSignalError(OAIApi_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUpdateSignalError() instead")
    void apiUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiCreateOrUpdateSignalErrorFull() instead")
    void apiCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDeleteSignalErrorFull() instead")
    void apiDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiGetSignalErrorFull() instead")
    void apiGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiGetEntityTagSignalErrorFull() instead")
    void apiGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiListByServiceSignalErrorFull() instead")
    void apiListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiUpdateSignalErrorFull() instead")
    void apiUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
