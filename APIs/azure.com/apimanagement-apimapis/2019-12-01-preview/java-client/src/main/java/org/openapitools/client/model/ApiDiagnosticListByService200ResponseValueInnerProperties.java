/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend;
import org.openapitools.client.model.ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Diagnostic Entity Properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:26.555622-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiDiagnosticListByService200ResponseValueInnerProperties {
  /**
   * Specifies for what type of messages sampling settings should not apply.
   */
  @JsonAdapter(AlwaysLogEnum.Adapter.class)
  public enum AlwaysLogEnum {
    ALL_ERRORS("allErrors");

    private String value;

    AlwaysLogEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlwaysLogEnum fromValue(String value) {
      for (AlwaysLogEnum b : AlwaysLogEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlwaysLogEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlwaysLogEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlwaysLogEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlwaysLogEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlwaysLogEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALWAYS_LOG = "alwaysLog";
  @SerializedName(SERIALIZED_NAME_ALWAYS_LOG)
  private AlwaysLogEnum alwaysLog;

  public static final String SERIALIZED_NAME_BACKEND = "backend";
  @SerializedName(SERIALIZED_NAME_BACKEND)
  private ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend backend;

  public static final String SERIALIZED_NAME_FRONTEND = "frontend";
  @SerializedName(SERIALIZED_NAME_FRONTEND)
  private ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend frontend;

  /**
   * Sets correlation protocol to use for Application Insights diagnostics.
   */
  @JsonAdapter(HttpCorrelationProtocolEnum.Adapter.class)
  public enum HttpCorrelationProtocolEnum {
    NONE("None"),
    
    LEGACY("Legacy"),
    
    W3_C("W3C");

    private String value;

    HttpCorrelationProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HttpCorrelationProtocolEnum fromValue(String value) {
      for (HttpCorrelationProtocolEnum b : HttpCorrelationProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HttpCorrelationProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HttpCorrelationProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HttpCorrelationProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HttpCorrelationProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HttpCorrelationProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HTTP_CORRELATION_PROTOCOL = "httpCorrelationProtocol";
  @SerializedName(SERIALIZED_NAME_HTTP_CORRELATION_PROTOCOL)
  private HttpCorrelationProtocolEnum httpCorrelationProtocol;

  public static final String SERIALIZED_NAME_LOG_CLIENT_IP = "logClientIp";
  @SerializedName(SERIALIZED_NAME_LOG_CLIENT_IP)
  private Boolean logClientIp;

  public static final String SERIALIZED_NAME_LOGGER_ID = "loggerId";
  @SerializedName(SERIALIZED_NAME_LOGGER_ID)
  private String loggerId;

  public static final String SERIALIZED_NAME_SAMPLING = "sampling";
  @SerializedName(SERIALIZED_NAME_SAMPLING)
  private ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling sampling;

  /**
   * The verbosity level applied to traces emitted by trace policies.
   */
  @JsonAdapter(VerbosityEnum.Adapter.class)
  public enum VerbosityEnum {
    VERBOSE("verbose"),
    
    INFORMATION("information"),
    
    ERROR("error");

    private String value;

    VerbosityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerbosityEnum fromValue(String value) {
      for (VerbosityEnum b : VerbosityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerbosityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerbosityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerbosityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerbosityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerbosityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERBOSITY = "verbosity";
  @SerializedName(SERIALIZED_NAME_VERBOSITY)
  private VerbosityEnum verbosity;

  public ApiDiagnosticListByService200ResponseValueInnerProperties() {
  }

  public ApiDiagnosticListByService200ResponseValueInnerProperties alwaysLog(AlwaysLogEnum alwaysLog) {
    this.alwaysLog = alwaysLog;
    return this;
  }

  /**
   * Specifies for what type of messages sampling settings should not apply.
   * @return alwaysLog
   */
  @javax.annotation.Nullable
  public AlwaysLogEnum getAlwaysLog() {
    return alwaysLog;
  }

  public void setAlwaysLog(AlwaysLogEnum alwaysLog) {
    this.alwaysLog = alwaysLog;
  }


  public ApiDiagnosticListByService200ResponseValueInnerProperties backend(ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend backend) {
    this.backend = backend;
    return this;
  }

  /**
   * Get backend
   * @return backend
   */
  @javax.annotation.Nullable
  public ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend getBackend() {
    return backend;
  }

  public void setBackend(ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend backend) {
    this.backend = backend;
  }


  public ApiDiagnosticListByService200ResponseValueInnerProperties frontend(ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend frontend) {
    this.frontend = frontend;
    return this;
  }

  /**
   * Get frontend
   * @return frontend
   */
  @javax.annotation.Nullable
  public ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend getFrontend() {
    return frontend;
  }

  public void setFrontend(ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend frontend) {
    this.frontend = frontend;
  }


  public ApiDiagnosticListByService200ResponseValueInnerProperties httpCorrelationProtocol(HttpCorrelationProtocolEnum httpCorrelationProtocol) {
    this.httpCorrelationProtocol = httpCorrelationProtocol;
    return this;
  }

  /**
   * Sets correlation protocol to use for Application Insights diagnostics.
   * @return httpCorrelationProtocol
   */
  @javax.annotation.Nullable
  public HttpCorrelationProtocolEnum getHttpCorrelationProtocol() {
    return httpCorrelationProtocol;
  }

  public void setHttpCorrelationProtocol(HttpCorrelationProtocolEnum httpCorrelationProtocol) {
    this.httpCorrelationProtocol = httpCorrelationProtocol;
  }


  public ApiDiagnosticListByService200ResponseValueInnerProperties logClientIp(Boolean logClientIp) {
    this.logClientIp = logClientIp;
    return this;
  }

  /**
   * Log the ClientIP. Default is false.
   * @return logClientIp
   */
  @javax.annotation.Nullable
  public Boolean getLogClientIp() {
    return logClientIp;
  }

  public void setLogClientIp(Boolean logClientIp) {
    this.logClientIp = logClientIp;
  }


  public ApiDiagnosticListByService200ResponseValueInnerProperties loggerId(String loggerId) {
    this.loggerId = loggerId;
    return this;
  }

  /**
   * Resource Id of a target logger.
   * @return loggerId
   */
  @javax.annotation.Nonnull
  public String getLoggerId() {
    return loggerId;
  }

  public void setLoggerId(String loggerId) {
    this.loggerId = loggerId;
  }


  public ApiDiagnosticListByService200ResponseValueInnerProperties sampling(ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling sampling) {
    this.sampling = sampling;
    return this;
  }

  /**
   * Get sampling
   * @return sampling
   */
  @javax.annotation.Nullable
  public ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling getSampling() {
    return sampling;
  }

  public void setSampling(ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling sampling) {
    this.sampling = sampling;
  }


  public ApiDiagnosticListByService200ResponseValueInnerProperties verbosity(VerbosityEnum verbosity) {
    this.verbosity = verbosity;
    return this;
  }

  /**
   * The verbosity level applied to traces emitted by trace policies.
   * @return verbosity
   */
  @javax.annotation.Nullable
  public VerbosityEnum getVerbosity() {
    return verbosity;
  }

  public void setVerbosity(VerbosityEnum verbosity) {
    this.verbosity = verbosity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiDiagnosticListByService200ResponseValueInnerProperties apiDiagnosticListByService200ResponseValueInnerProperties = (ApiDiagnosticListByService200ResponseValueInnerProperties) o;
    return Objects.equals(this.alwaysLog, apiDiagnosticListByService200ResponseValueInnerProperties.alwaysLog) &&
        Objects.equals(this.backend, apiDiagnosticListByService200ResponseValueInnerProperties.backend) &&
        Objects.equals(this.frontend, apiDiagnosticListByService200ResponseValueInnerProperties.frontend) &&
        Objects.equals(this.httpCorrelationProtocol, apiDiagnosticListByService200ResponseValueInnerProperties.httpCorrelationProtocol) &&
        Objects.equals(this.logClientIp, apiDiagnosticListByService200ResponseValueInnerProperties.logClientIp) &&
        Objects.equals(this.loggerId, apiDiagnosticListByService200ResponseValueInnerProperties.loggerId) &&
        Objects.equals(this.sampling, apiDiagnosticListByService200ResponseValueInnerProperties.sampling) &&
        Objects.equals(this.verbosity, apiDiagnosticListByService200ResponseValueInnerProperties.verbosity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alwaysLog, backend, frontend, httpCorrelationProtocol, logClientIp, loggerId, sampling, verbosity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiDiagnosticListByService200ResponseValueInnerProperties {\n");
    sb.append("    alwaysLog: ").append(toIndentedString(alwaysLog)).append("\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("    frontend: ").append(toIndentedString(frontend)).append("\n");
    sb.append("    httpCorrelationProtocol: ").append(toIndentedString(httpCorrelationProtocol)).append("\n");
    sb.append("    logClientIp: ").append(toIndentedString(logClientIp)).append("\n");
    sb.append("    loggerId: ").append(toIndentedString(loggerId)).append("\n");
    sb.append("    sampling: ").append(toIndentedString(sampling)).append("\n");
    sb.append("    verbosity: ").append(toIndentedString(verbosity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alwaysLog");
    openapiFields.add("backend");
    openapiFields.add("frontend");
    openapiFields.add("httpCorrelationProtocol");
    openapiFields.add("logClientIp");
    openapiFields.add("loggerId");
    openapiFields.add("sampling");
    openapiFields.add("verbosity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("loggerId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiDiagnosticListByService200ResponseValueInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiDiagnosticListByService200ResponseValueInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiDiagnosticListByService200ResponseValueInnerProperties is not found in the empty JSON string", ApiDiagnosticListByService200ResponseValueInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiDiagnosticListByService200ResponseValueInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiDiagnosticListByService200ResponseValueInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiDiagnosticListByService200ResponseValueInnerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alwaysLog") != null && !jsonObj.get("alwaysLog").isJsonNull()) && !jsonObj.get("alwaysLog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alwaysLog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alwaysLog").toString()));
      }
      // validate the optional field `alwaysLog`
      if (jsonObj.get("alwaysLog") != null && !jsonObj.get("alwaysLog").isJsonNull()) {
        AlwaysLogEnum.validateJsonElement(jsonObj.get("alwaysLog"));
      }
      // validate the optional field `backend`
      if (jsonObj.get("backend") != null && !jsonObj.get("backend").isJsonNull()) {
        ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend.validateJsonElement(jsonObj.get("backend"));
      }
      // validate the optional field `frontend`
      if (jsonObj.get("frontend") != null && !jsonObj.get("frontend").isJsonNull()) {
        ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend.validateJsonElement(jsonObj.get("frontend"));
      }
      if ((jsonObj.get("httpCorrelationProtocol") != null && !jsonObj.get("httpCorrelationProtocol").isJsonNull()) && !jsonObj.get("httpCorrelationProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpCorrelationProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpCorrelationProtocol").toString()));
      }
      // validate the optional field `httpCorrelationProtocol`
      if (jsonObj.get("httpCorrelationProtocol") != null && !jsonObj.get("httpCorrelationProtocol").isJsonNull()) {
        HttpCorrelationProtocolEnum.validateJsonElement(jsonObj.get("httpCorrelationProtocol"));
      }
      if (!jsonObj.get("loggerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loggerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loggerId").toString()));
      }
      // validate the optional field `sampling`
      if (jsonObj.get("sampling") != null && !jsonObj.get("sampling").isJsonNull()) {
        ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.validateJsonElement(jsonObj.get("sampling"));
      }
      if ((jsonObj.get("verbosity") != null && !jsonObj.get("verbosity").isJsonNull()) && !jsonObj.get("verbosity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbosity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbosity").toString()));
      }
      // validate the optional field `verbosity`
      if (jsonObj.get("verbosity") != null && !jsonObj.get("verbosity").isJsonNull()) {
        VerbosityEnum.validateJsonElement(jsonObj.get("verbosity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiDiagnosticListByService200ResponseValueInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiDiagnosticListByService200ResponseValueInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiDiagnosticListByService200ResponseValueInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiDiagnosticListByService200ResponseValueInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiDiagnosticListByService200ResponseValueInnerProperties>() {
           @Override
           public void write(JsonWriter out, ApiDiagnosticListByService200ResponseValueInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiDiagnosticListByService200ResponseValueInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiDiagnosticListByService200ResponseValueInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiDiagnosticListByService200ResponseValueInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ApiDiagnosticListByService200ResponseValueInnerProperties
   */
  public static ApiDiagnosticListByService200ResponseValueInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiDiagnosticListByService200ResponseValueInnerProperties.class);
  }

  /**
   * Convert an instance of ApiDiagnosticListByService200ResponseValueInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

