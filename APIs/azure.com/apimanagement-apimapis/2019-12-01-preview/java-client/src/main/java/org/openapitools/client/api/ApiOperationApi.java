/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiListByServiceDefaultResponse;
import org.openapitools.client.model.ApiOperationGet200Response;
import org.openapitools.client.model.ApiOperationListByApi200Response;
import org.openapitools.client.model.ApiOperationUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiOperationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiOperationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiOperationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiOperationCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create parameters. (required)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successfully updated. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> Operation was successfully created. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationCreateOrUpdateCall(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, ApiOperationGet200Response parameters, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOperationCreateOrUpdateValidateBeforeCall(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, ApiOperationGet200Response parameters, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling apiOperationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling apiOperationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling apiOperationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling apiOperationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiOperationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling apiOperationCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling apiOperationCreateOrUpdate(Async)");
        }

        return apiOperationCreateOrUpdateCall(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, parameters, ifMatch, _callback);

    }

    /**
     * 
     * Creates a new operation in the API or updates an existing one.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create parameters. (required)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @return ApiOperationGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successfully updated. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> Operation was successfully created. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiOperationGet200Response apiOperationCreateOrUpdate(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, ApiOperationGet200Response parameters, String ifMatch) throws ApiException {
        ApiResponse<ApiOperationGet200Response> localVarResp = apiOperationCreateOrUpdateWithHttpInfo(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, parameters, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new operation in the API or updates an existing one.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create parameters. (required)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @return ApiResponse&lt;ApiOperationGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successfully updated. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> Operation was successfully created. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiOperationGet200Response> apiOperationCreateOrUpdateWithHttpInfo(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, ApiOperationGet200Response parameters, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = apiOperationCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, parameters, ifMatch, null);
        Type localVarReturnType = new TypeToken<ApiOperationGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new operation in the API or updates an existing one.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create parameters. (required)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation was successfully updated. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> Operation was successfully created. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationCreateOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, ApiOperationGet200Response parameters, String ifMatch, final ApiCallback<ApiOperationGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOperationCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, parameters, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<ApiOperationGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOperationDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API operation successfully removed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> API operation successfully removed by previous request or does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationDeleteCall(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOperationDeleteValidateBeforeCall(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling apiOperationDelete(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling apiOperationDelete(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling apiOperationDelete(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling apiOperationDelete(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling apiOperationDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiOperationDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling apiOperationDelete(Async)");
        }

        return apiOperationDeleteCall(resourceGroupName, serviceName, apiId, operationId, ifMatch, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified operation in the API.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API operation successfully removed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> API operation successfully removed by previous request or does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void apiOperationDelete(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch, String apiVersion, String subscriptionId) throws ApiException {
        apiOperationDeleteWithHttpInfo(resourceGroupName, serviceName, apiId, operationId, ifMatch, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified operation in the API.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API operation successfully removed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> API operation successfully removed by previous request or does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiOperationDeleteWithHttpInfo(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = apiOperationDeleteValidateBeforeCall(resourceGroupName, serviceName, apiId, operationId, ifMatch, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified operation in the API.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API operation successfully removed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> API operation successfully removed by previous request or does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationDeleteAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOperationDeleteValidateBeforeCall(resourceGroupName, serviceName, apiId, operationId, ifMatch, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOperationGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Operation entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationGetCall(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOperationGetValidateBeforeCall(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling apiOperationGet(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling apiOperationGet(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling apiOperationGet(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling apiOperationGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiOperationGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling apiOperationGet(Async)");
        }

        return apiOperationGetCall(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the details of the API Operation specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiOperationGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Operation entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiOperationGet200Response apiOperationGet(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ApiOperationGet200Response> localVarResp = apiOperationGetWithHttpInfo(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of the API Operation specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ApiOperationGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Operation entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiOperationGet200Response> apiOperationGetWithHttpInfo(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = apiOperationGetValidateBeforeCall(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ApiOperationGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of the API Operation specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Operation entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationGetAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, final ApiCallback<ApiOperationGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOperationGetValidateBeforeCall(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ApiOperationGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOperationGetEntityTag
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified API operation entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationGetEntityTagCall(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOperationGetEntityTagValidateBeforeCall(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling apiOperationGetEntityTag(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling apiOperationGetEntityTag(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling apiOperationGetEntityTag(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling apiOperationGetEntityTag(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiOperationGetEntityTag(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling apiOperationGetEntityTag(Async)");
        }

        return apiOperationGetEntityTagCall(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the entity state (Etag) version of the API operation specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified API operation entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void apiOperationGetEntityTag(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId) throws ApiException {
        apiOperationGetEntityTagWithHttpInfo(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId);
    }

    /**
     * 
     * Gets the entity state (Etag) version of the API operation specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified API operation entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiOperationGetEntityTagWithHttpInfo(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = apiOperationGetEntityTagValidateBeforeCall(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets the entity state (Etag) version of the API operation specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified API operation entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationGetEntityTagAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOperationGetEntityTagValidateBeforeCall(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOperationListByApi
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt; (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @param tags Include tags in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of operation summary entities at the API level. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationListByApiCall(String resourceGroupName, String serviceName, String apiId, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOperationListByApiValidateBeforeCall(String resourceGroupName, String serviceName, String apiId, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling apiOperationListByApi(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling apiOperationListByApi(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling apiOperationListByApi(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiOperationListByApi(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling apiOperationListByApi(Async)");
        }

        return apiOperationListByApiCall(resourceGroupName, serviceName, apiId, apiVersion, subscriptionId, $filter, $top, $skip, tags, _callback);

    }

    /**
     * 
     * Lists a collection of the operations for the specified API.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt; (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @param tags Include tags in the response. (optional)
     * @return ApiOperationListByApi200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of operation summary entities at the API level. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiOperationListByApi200Response apiOperationListByApi(String resourceGroupName, String serviceName, String apiId, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String tags) throws ApiException {
        ApiResponse<ApiOperationListByApi200Response> localVarResp = apiOperationListByApiWithHttpInfo(resourceGroupName, serviceName, apiId, apiVersion, subscriptionId, $filter, $top, $skip, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists a collection of the operations for the specified API.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt; (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @param tags Include tags in the response. (optional)
     * @return ApiResponse&lt;ApiOperationListByApi200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of operation summary entities at the API level. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiOperationListByApi200Response> apiOperationListByApiWithHttpInfo(String resourceGroupName, String serviceName, String apiId, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String tags) throws ApiException {
        okhttp3.Call localVarCall = apiOperationListByApiValidateBeforeCall(resourceGroupName, serviceName, apiId, apiVersion, subscriptionId, $filter, $top, $skip, tags, null);
        Type localVarReturnType = new TypeToken<ApiOperationListByApi200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists a collection of the operations for the specified API.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt; (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @param tags Include tags in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of operation summary entities at the API level. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationListByApiAsync(String resourceGroupName, String serviceName, String apiId, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, String tags, final ApiCallback<ApiOperationListByApi200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOperationListByApiValidateBeforeCall(resourceGroupName, serviceName, apiId, apiVersion, subscriptionId, $filter, $top, $skip, tags, _callback);
        Type localVarReturnType = new TypeToken<ApiOperationListByApi200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiOperationUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters API Operation Update parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationUpdateCall(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch, String apiVersion, String subscriptionId, ApiOperationUpdateRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "apiId" + "}", localVarApiClient.escapeString(apiId.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiOperationUpdateValidateBeforeCall(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch, String apiVersion, String subscriptionId, ApiOperationUpdateRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling apiOperationUpdate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling apiOperationUpdate(Async)");
        }

        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling apiOperationUpdate(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling apiOperationUpdate(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling apiOperationUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling apiOperationUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling apiOperationUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling apiOperationUpdate(Async)");
        }

        return apiOperationUpdateCall(resourceGroupName, serviceName, apiId, operationId, ifMatch, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Updates the details of the operation in the API specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters API Operation Update parameters. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void apiOperationUpdate(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch, String apiVersion, String subscriptionId, ApiOperationUpdateRequest parameters) throws ApiException {
        apiOperationUpdateWithHttpInfo(resourceGroupName, serviceName, apiId, operationId, ifMatch, apiVersion, subscriptionId, parameters);
    }

    /**
     * 
     * Updates the details of the operation in the API specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters API Operation Update parameters. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiOperationUpdateWithHttpInfo(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch, String apiVersion, String subscriptionId, ApiOperationUpdateRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = apiOperationUpdateValidateBeforeCall(resourceGroupName, serviceName, apiId, operationId, ifMatch, apiVersion, subscriptionId, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the details of the operation in the API specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev&#x3D;n as a suffix where n is the revision number. (required)
     * @param operationId Operation identifier within an API. Must be unique in the current API Management service instance. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters API Operation Update parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiOperationUpdateAsync(String resourceGroupName, String serviceName, String apiId, String operationId, String ifMatch, String apiVersion, String subscriptionId, ApiOperationUpdateRequest parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiOperationUpdateValidateBeforeCall(resourceGroupName, serviceName, apiId, operationId, ifMatch, apiVersion, subscriptionId, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
