/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApiCreateOrUpdateRequestPropertiesWsdlSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Api Create or Update Properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:26.555622-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiCreateOrUpdateRequestProperties {
  /**
   * Type of Api to create.   * &#x60;http&#x60; creates a SOAP to REST API   * &#x60;soap&#x60; creates a SOAP pass-through API .
   */
  @JsonAdapter(ApiTypeEnum.Adapter.class)
  public enum ApiTypeEnum {
    HTTP("http"),
    
    SOAP("soap");

    private String value;

    ApiTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiTypeEnum fromValue(String value) {
      for (ApiTypeEnum b : ApiTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_TYPE = "apiType";
  @SerializedName(SERIALIZED_NAME_API_TYPE)
  private ApiTypeEnum apiType;

  /**
   * Format of the Content in which the API is getting imported.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    WADL_XML("wadl-xml"),
    
    WADL_LINK_JSON("wadl-link-json"),
    
    SWAGGER_JSON("swagger-json"),
    
    SWAGGER_LINK_JSON("swagger-link-json"),
    
    WSDL("wsdl"),
    
    WSDL_LINK("wsdl-link"),
    
    OPENAPI("openapi"),
    
    OPENAPI_JSON("openapi+json"),
    
    OPENAPI_LINK("openapi-link"),
    
    OPENAPI_JSON_LINK("openapi+json-link");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_WSDL_SELECTOR = "wsdlSelector";
  @SerializedName(SERIALIZED_NAME_WSDL_SELECTOR)
  private ApiCreateOrUpdateRequestPropertiesWsdlSelector wsdlSelector;

  public ApiCreateOrUpdateRequestProperties() {
  }

  public ApiCreateOrUpdateRequestProperties apiType(ApiTypeEnum apiType) {
    this.apiType = apiType;
    return this;
  }

  /**
   * Type of Api to create.   * &#x60;http&#x60; creates a SOAP to REST API   * &#x60;soap&#x60; creates a SOAP pass-through API .
   * @return apiType
   */
  @javax.annotation.Nullable
  public ApiTypeEnum getApiType() {
    return apiType;
  }

  public void setApiType(ApiTypeEnum apiType) {
    this.apiType = apiType;
  }


  public ApiCreateOrUpdateRequestProperties format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Format of the Content in which the API is getting imported.
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public ApiCreateOrUpdateRequestProperties value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Content value when Importing an API.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  public ApiCreateOrUpdateRequestProperties wsdlSelector(ApiCreateOrUpdateRequestPropertiesWsdlSelector wsdlSelector) {
    this.wsdlSelector = wsdlSelector;
    return this;
  }

  /**
   * Get wsdlSelector
   * @return wsdlSelector
   */
  @javax.annotation.Nullable
  public ApiCreateOrUpdateRequestPropertiesWsdlSelector getWsdlSelector() {
    return wsdlSelector;
  }

  public void setWsdlSelector(ApiCreateOrUpdateRequestPropertiesWsdlSelector wsdlSelector) {
    this.wsdlSelector = wsdlSelector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiCreateOrUpdateRequestProperties apiCreateOrUpdateRequestProperties = (ApiCreateOrUpdateRequestProperties) o;
    return Objects.equals(this.apiType, apiCreateOrUpdateRequestProperties.apiType) &&
        Objects.equals(this.format, apiCreateOrUpdateRequestProperties.format) &&
        Objects.equals(this.value, apiCreateOrUpdateRequestProperties.value) &&
        Objects.equals(this.wsdlSelector, apiCreateOrUpdateRequestProperties.wsdlSelector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiType, format, value, wsdlSelector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiCreateOrUpdateRequestProperties {\n");
    sb.append("    apiType: ").append(toIndentedString(apiType)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    wsdlSelector: ").append(toIndentedString(wsdlSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiType");
    openapiFields.add("format");
    openapiFields.add("value");
    openapiFields.add("wsdlSelector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiCreateOrUpdateRequestProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiCreateOrUpdateRequestProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiCreateOrUpdateRequestProperties is not found in the empty JSON string", ApiCreateOrUpdateRequestProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiCreateOrUpdateRequestProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiCreateOrUpdateRequestProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiType") != null && !jsonObj.get("apiType").isJsonNull()) && !jsonObj.get("apiType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiType").toString()));
      }
      // validate the optional field `apiType`
      if (jsonObj.get("apiType") != null && !jsonObj.get("apiType").isJsonNull()) {
        ApiTypeEnum.validateJsonElement(jsonObj.get("apiType"));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      // validate the optional field `wsdlSelector`
      if (jsonObj.get("wsdlSelector") != null && !jsonObj.get("wsdlSelector").isJsonNull()) {
        ApiCreateOrUpdateRequestPropertiesWsdlSelector.validateJsonElement(jsonObj.get("wsdlSelector"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiCreateOrUpdateRequestProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiCreateOrUpdateRequestProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiCreateOrUpdateRequestProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiCreateOrUpdateRequestProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiCreateOrUpdateRequestProperties>() {
           @Override
           public void write(JsonWriter out, ApiCreateOrUpdateRequestProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiCreateOrUpdateRequestProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiCreateOrUpdateRequestProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiCreateOrUpdateRequestProperties
   * @throws IOException if the JSON string is invalid with respect to ApiCreateOrUpdateRequestProperties
   */
  public static ApiCreateOrUpdateRequestProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiCreateOrUpdateRequestProperties.class);
  }

  /**
   * Convert an instance of ApiCreateOrUpdateRequestProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

