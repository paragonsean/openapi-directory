/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiIssueCommentGet200Response;
import org.openapitools.client.model.ApiIssueCommentListByService200Response;
import org.openapitools.client.model.ApiListByServiceDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiIssueCommentApi
 */
@Disabled
public class ApiIssueCommentApiTest {

    private final ApiIssueCommentApi api = new ApiIssueCommentApi();

    /**
     * Creates a new Comment for the Issue in an API or updates an existing one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiIssueCommentCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String issueId = null;
        String commentId = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApiIssueCommentGet200Response parameters = null;
        String ifMatch = null;
        ApiIssueCommentGet200Response response = api.apiIssueCommentCreateOrUpdate(resourceGroupName, serviceName, apiId, issueId, commentId, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes the specified comment from an Issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiIssueCommentDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String issueId = null;
        String commentId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.apiIssueCommentDelete(resourceGroupName, serviceName, apiId, issueId, commentId, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the details of the issue Comment for an API specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiIssueCommentGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String issueId = null;
        String commentId = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApiIssueCommentGet200Response response = api.apiIssueCommentGet(resourceGroupName, serviceName, apiId, issueId, commentId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the issue Comment for an API specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiIssueCommentGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String issueId = null;
        String commentId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.apiIssueCommentGetEntityTag(resourceGroupName, serviceName, apiId, issueId, commentId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all comments for the Issue associated with the specified API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiIssueCommentListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String issueId = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        ApiIssueCommentListByService200Response response = api.apiIssueCommentListByService(resourceGroupName, serviceName, apiId, issueId, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

}
