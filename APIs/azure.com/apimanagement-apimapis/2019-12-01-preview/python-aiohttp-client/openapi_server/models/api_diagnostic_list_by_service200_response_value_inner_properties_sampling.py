# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percentage: float=None, sampling_type: str=None):
        """ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling - a model defined in OpenAPI

        :param percentage: The percentage of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.
        :param sampling_type: The sampling_type of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.
        """
        self.openapi_types = {
            'percentage': float,
            'sampling_type': str
        }

        self.attribute_map = {
            'percentage': 'percentage',
            'sampling_type': 'samplingType'
        }

        self._percentage = percentage
        self._sampling_type = sampling_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiDiagnostic_ListByService_200_response_value_inner_properties_sampling of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percentage(self):
        """Gets the percentage of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.

        Rate of sampling for fixed-rate sampling.

        :return: The percentage of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.

        Rate of sampling for fixed-rate sampling.

        :param percentage: The percentage of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.
        :type percentage: float
        """
        if percentage is not None and percentage > 1E+2:
            raise ValueError("Invalid value for `percentage`, must be a value less than or equal to `1E+2`")
        if percentage is not None and percentage < 0:
            raise ValueError("Invalid value for `percentage`, must be a value greater than or equal to `0`")

        self._percentage = percentage

    @property
    def sampling_type(self):
        """Gets the sampling_type of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.

        Sampling type.

        :return: The sampling_type of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.
        :rtype: str
        """
        return self._sampling_type

    @sampling_type.setter
    def sampling_type(self, sampling_type):
        """Sets the sampling_type of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.

        Sampling type.

        :param sampling_type: The sampling_type of this ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling.
        :type sampling_type: str
        """
        allowed_values = ["fixed"]  # noqa: E501
        if sampling_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sampling_type` ({0}), must be one of {1}"
                .format(sampling_type, allowed_values)
            )

        self._sampling_type = sampling_type
