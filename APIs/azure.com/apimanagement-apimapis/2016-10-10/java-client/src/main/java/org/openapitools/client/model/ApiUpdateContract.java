/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthenticationSettingsContract;
import org.openapitools.client.model.SubscriptionKeyParameterNamesContract;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * API Update Contract details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:23.321876-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiUpdateContract {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  /**
   * Gets or Sets protocols
   */
  @JsonAdapter(ProtocolsEnum.Adapter.class)
  public enum ProtocolsEnum {
    HTTP("Http"),
    
    HTTPS("Https");

    private String value;

    ProtocolsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolsEnum fromValue(String value) {
      for (ProtocolsEnum b : ProtocolsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOLS = "protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private List<ProtocolsEnum> protocols = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_URL = "serviceUrl";
  @SerializedName(SERIALIZED_NAME_SERVICE_URL)
  private String serviceUrl;

  public static final String SERIALIZED_NAME_AUTHENTICATION_SETTINGS = "authenticationSettings";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_SETTINGS)
  private AuthenticationSettingsContract authenticationSettings;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_KEY_PARAMETER_NAMES = "subscriptionKeyParameterNames";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_KEY_PARAMETER_NAMES)
  private SubscriptionKeyParameterNamesContract subscriptionKeyParameterNames;

  /**
   * Type of API.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    HTTP("Http"),
    
    SOAP("Soap");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ApiUpdateContract() {
  }

  public ApiUpdateContract(
     String id
  ) {
    this();
    this.id = id;
  }

  /**
   * API identifier path: /apis/{apiId}
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public ApiUpdateContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * API name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApiUpdateContract path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ApiUpdateContract protocols(List<ProtocolsEnum> protocols) {
    this.protocols = protocols;
    return this;
  }

  public ApiUpdateContract addProtocolsItem(ProtocolsEnum protocolsItem) {
    if (this.protocols == null) {
      this.protocols = new ArrayList<>();
    }
    this.protocols.add(protocolsItem);
    return this;
  }

  /**
   * Describes on which protocols the operations in this API can be invoked.
   * @return protocols
   */
  @javax.annotation.Nullable
  public List<ProtocolsEnum> getProtocols() {
    return protocols;
  }

  public void setProtocols(List<ProtocolsEnum> protocols) {
    this.protocols = protocols;
  }


  public ApiUpdateContract serviceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
    return this;
  }

  /**
   * Absolute URL of the backend service implementing this API.
   * @return serviceUrl
   */
  @javax.annotation.Nullable
  public String getServiceUrl() {
    return serviceUrl;
  }

  public void setServiceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
  }


  public ApiUpdateContract authenticationSettings(AuthenticationSettingsContract authenticationSettings) {
    this.authenticationSettings = authenticationSettings;
    return this;
  }

  /**
   * Get authenticationSettings
   * @return authenticationSettings
   */
  @javax.annotation.Nullable
  public AuthenticationSettingsContract getAuthenticationSettings() {
    return authenticationSettings;
  }

  public void setAuthenticationSettings(AuthenticationSettingsContract authenticationSettings) {
    this.authenticationSettings = authenticationSettings;
  }


  public ApiUpdateContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the API. May include HTML formatting tags.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApiUpdateContract subscriptionKeyParameterNames(SubscriptionKeyParameterNamesContract subscriptionKeyParameterNames) {
    this.subscriptionKeyParameterNames = subscriptionKeyParameterNames;
    return this;
  }

  /**
   * Get subscriptionKeyParameterNames
   * @return subscriptionKeyParameterNames
   */
  @javax.annotation.Nullable
  public SubscriptionKeyParameterNamesContract getSubscriptionKeyParameterNames() {
    return subscriptionKeyParameterNames;
  }

  public void setSubscriptionKeyParameterNames(SubscriptionKeyParameterNamesContract subscriptionKeyParameterNames) {
    this.subscriptionKeyParameterNames = subscriptionKeyParameterNames;
  }


  public ApiUpdateContract type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of API.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiUpdateContract apiUpdateContract = (ApiUpdateContract) o;
    return Objects.equals(this.id, apiUpdateContract.id) &&
        Objects.equals(this.name, apiUpdateContract.name) &&
        Objects.equals(this.path, apiUpdateContract.path) &&
        Objects.equals(this.protocols, apiUpdateContract.protocols) &&
        Objects.equals(this.serviceUrl, apiUpdateContract.serviceUrl) &&
        Objects.equals(this.authenticationSettings, apiUpdateContract.authenticationSettings) &&
        Objects.equals(this.description, apiUpdateContract.description) &&
        Objects.equals(this.subscriptionKeyParameterNames, apiUpdateContract.subscriptionKeyParameterNames) &&
        Objects.equals(this.type, apiUpdateContract.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, path, protocols, serviceUrl, authenticationSettings, description, subscriptionKeyParameterNames, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiUpdateContract {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("    serviceUrl: ").append(toIndentedString(serviceUrl)).append("\n");
    sb.append("    authenticationSettings: ").append(toIndentedString(authenticationSettings)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    subscriptionKeyParameterNames: ").append(toIndentedString(subscriptionKeyParameterNames)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationSettings");
    openapiFields.add("description");
    openapiFields.add("subscriptionKeyParameterNames");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiUpdateContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiUpdateContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiUpdateContract is not found in the empty JSON string", ApiUpdateContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiUpdateContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiUpdateContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("protocols") != null && !jsonObj.get("protocols").isJsonNull() && !jsonObj.get("protocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocols` to be an array in the JSON string but got `%s`", jsonObj.get("protocols").toString()));
      }
      if ((jsonObj.get("serviceUrl") != null && !jsonObj.get("serviceUrl").isJsonNull()) && !jsonObj.get("serviceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceUrl").toString()));
      }
      // validate the optional field `authenticationSettings`
      if (jsonObj.get("authenticationSettings") != null && !jsonObj.get("authenticationSettings").isJsonNull()) {
        AuthenticationSettingsContract.validateJsonElement(jsonObj.get("authenticationSettings"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `subscriptionKeyParameterNames`
      if (jsonObj.get("subscriptionKeyParameterNames") != null && !jsonObj.get("subscriptionKeyParameterNames").isJsonNull()) {
        SubscriptionKeyParameterNamesContract.validateJsonElement(jsonObj.get("subscriptionKeyParameterNames"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiUpdateContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiUpdateContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiUpdateContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiUpdateContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiUpdateContract>() {
           @Override
           public void write(JsonWriter out, ApiUpdateContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiUpdateContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiUpdateContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiUpdateContract
   * @throws IOException if the JSON string is invalid with respect to ApiUpdateContract
   */
  public static ApiUpdateContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiUpdateContract.class);
  }

  /**
   * Convert an instance of ApiUpdateContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

