/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiEntityBaseContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiEntityBaseContract::OAIApiEntityBaseContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiEntityBaseContract::OAIApiEntityBaseContract() {
    this->initializeModel();
}

OAIApiEntityBaseContract::~OAIApiEntityBaseContract() {}

void OAIApiEntityBaseContract::initializeModel() {

    m_authentication_settings_isSet = false;
    m_authentication_settings_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_subscription_key_parameter_names_isSet = false;
    m_subscription_key_parameter_names_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIApiEntityBaseContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiEntityBaseContract::fromJsonObject(QJsonObject json) {

    m_authentication_settings_isValid = ::OpenAPI::fromJsonValue(m_authentication_settings, json[QString("authenticationSettings")]);
    m_authentication_settings_isSet = !json[QString("authenticationSettings")].isNull() && m_authentication_settings_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_subscription_key_parameter_names_isValid = ::OpenAPI::fromJsonValue(m_subscription_key_parameter_names, json[QString("subscriptionKeyParameterNames")]);
    m_subscription_key_parameter_names_isSet = !json[QString("subscriptionKeyParameterNames")].isNull() && m_subscription_key_parameter_names_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIApiEntityBaseContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiEntityBaseContract::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_settings.isSet()) {
        obj.insert(QString("authenticationSettings"), ::OpenAPI::toJsonValue(m_authentication_settings));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_subscription_key_parameter_names.isSet()) {
        obj.insert(QString("subscriptionKeyParameterNames"), ::OpenAPI::toJsonValue(m_subscription_key_parameter_names));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAuthenticationSettingsContract OAIApiEntityBaseContract::getAuthenticationSettings() const {
    return m_authentication_settings;
}
void OAIApiEntityBaseContract::setAuthenticationSettings(const OAIAuthenticationSettingsContract &authentication_settings) {
    m_authentication_settings = authentication_settings;
    m_authentication_settings_isSet = true;
}

bool OAIApiEntityBaseContract::is_authentication_settings_Set() const{
    return m_authentication_settings_isSet;
}

bool OAIApiEntityBaseContract::is_authentication_settings_Valid() const{
    return m_authentication_settings_isValid;
}

QString OAIApiEntityBaseContract::getDescription() const {
    return m_description;
}
void OAIApiEntityBaseContract::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiEntityBaseContract::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiEntityBaseContract::is_description_Valid() const{
    return m_description_isValid;
}

OAISubscriptionKeyParameterNamesContract OAIApiEntityBaseContract::getSubscriptionKeyParameterNames() const {
    return m_subscription_key_parameter_names;
}
void OAIApiEntityBaseContract::setSubscriptionKeyParameterNames(const OAISubscriptionKeyParameterNamesContract &subscription_key_parameter_names) {
    m_subscription_key_parameter_names = subscription_key_parameter_names;
    m_subscription_key_parameter_names_isSet = true;
}

bool OAIApiEntityBaseContract::is_subscription_key_parameter_names_Set() const{
    return m_subscription_key_parameter_names_isSet;
}

bool OAIApiEntityBaseContract::is_subscription_key_parameter_names_Valid() const{
    return m_subscription_key_parameter_names_isValid;
}

QString OAIApiEntityBaseContract::getType() const {
    return m_type;
}
void OAIApiEntityBaseContract::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApiEntityBaseContract::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApiEntityBaseContract::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIApiEntityBaseContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_key_parameter_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiEntityBaseContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
