/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResultContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResultContract::OAIResultContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResultContract::OAIResultContract() {
    this->initializeModel();
}

OAIResultContract::~OAIResultContract() {}

void OAIResultContract::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_representations_isSet = false;
    m_representations_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIResultContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResultContract::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_representations_isValid = ::OpenAPI::fromJsonValue(m_representations, json[QString("representations")]);
    m_representations_isSet = !json[QString("representations")].isNull() && m_representations_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;
}

QString OAIResultContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResultContract::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_representations.size() > 0) {
        obj.insert(QString("representations"), ::OpenAPI::toJsonValue(m_representations));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

QString OAIResultContract::getDescription() const {
    return m_description;
}
void OAIResultContract::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIResultContract::is_description_Set() const{
    return m_description_isSet;
}

bool OAIResultContract::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIRepresentationContract> OAIResultContract::getRepresentations() const {
    return m_representations;
}
void OAIResultContract::setRepresentations(const QList<OAIRepresentationContract> &representations) {
    m_representations = representations;
    m_representations_isSet = true;
}

bool OAIResultContract::is_representations_Set() const{
    return m_representations_isSet;
}

bool OAIResultContract::is_representations_Valid() const{
    return m_representations_isValid;
}

qint32 OAIResultContract::getStatusCode() const {
    return m_status_code;
}
void OAIResultContract::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIResultContract::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIResultContract::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIResultContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_representations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResultContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_code_isValid && true;
}

} // namespace OpenAPI
