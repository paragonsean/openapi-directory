/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParameterContract from './ParameterContract';
import RepresentationContract from './RepresentationContract';

/**
 * The RequestContract model module.
 * @module model/RequestContract
 * @version 2016-10-10
 */
class RequestContract {
    /**
     * Constructs a new <code>RequestContract</code>.
     * Operation request details.
     * @alias module:model/RequestContract
     */
    constructor() { 
        
        RequestContract.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RequestContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RequestContract} obj Optional instance to populate.
     * @return {module:model/RequestContract} The populated <code>RequestContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RequestContract();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [ParameterContract]);
            }
            if (data.hasOwnProperty('queryParameters')) {
                obj['queryParameters'] = ApiClient.convertToType(data['queryParameters'], [ParameterContract]);
            }
            if (data.hasOwnProperty('representations')) {
                obj['representations'] = ApiClient.convertToType(data['representations'], [RepresentationContract]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RequestContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RequestContract</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                ParameterContract.validateJSON(item);
            };
        }
        if (data['queryParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queryParameters'])) {
                throw new Error("Expected the field `queryParameters` to be an array in the JSON data but got " + data['queryParameters']);
            }
            // validate the optional field `queryParameters` (array)
            for (const item of data['queryParameters']) {
                ParameterContract.validateJSON(item);
            };
        }
        if (data['representations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['representations'])) {
                throw new Error("Expected the field `representations` to be an array in the JSON data but got " + data['representations']);
            }
            // validate the optional field `representations` (array)
            for (const item of data['representations']) {
                RepresentationContract.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Operation request description.
 * @member {String} description
 */
RequestContract.prototype['description'] = undefined;

/**
 * Collection of operation request headers.
 * @member {Array.<module:model/ParameterContract>} headers
 */
RequestContract.prototype['headers'] = undefined;

/**
 * Collection of operation request query parameters.
 * @member {Array.<module:model/ParameterContract>} queryParameters
 */
RequestContract.prototype['queryParameters'] = undefined;

/**
 * Collection of operation request representations.
 * @member {Array.<module:model/RepresentationContract>} representations
 */
RequestContract.prototype['representations'] = undefined;






export default RequestContract;

