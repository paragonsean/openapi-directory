# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepresentationContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, sample: str=None):
        """RepresentationContract - a model defined in OpenAPI

        :param content_type: The content_type of this RepresentationContract.
        :param sample: The sample of this RepresentationContract.
        """
        self.openapi_types = {
            'content_type': str,
            'sample': str
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'sample': 'sample'
        }

        self._content_type = content_type
        self._sample = sample

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepresentationContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepresentationContract of this RepresentationContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this RepresentationContract.

        Specifies a registered or custom content type for this representation, e.g. application/xml.

        :return: The content_type of this RepresentationContract.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this RepresentationContract.

        Specifies a registered or custom content type for this representation, e.g. application/xml.

        :param content_type: The content_type of this RepresentationContract.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def sample(self):
        """Gets the sample of this RepresentationContract.

        An example of the representation.

        :return: The sample of this RepresentationContract.
        :rtype: str
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this RepresentationContract.

        An example of the representation.

        :param sample: The sample of this RepresentationContract.
        :type sample: str
        """

        self._sample = sample
