# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_settings_contract import AuthenticationSettingsContract
from openapi_server.models.subscription_key_parameter_names_contract import SubscriptionKeyParameterNamesContract
from openapi_server import util


class ApiEntityBaseContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_settings: AuthenticationSettingsContract=None, description: str=None, subscription_key_parameter_names: SubscriptionKeyParameterNamesContract=None, type: str=None):
        """ApiEntityBaseContract - a model defined in OpenAPI

        :param authentication_settings: The authentication_settings of this ApiEntityBaseContract.
        :param description: The description of this ApiEntityBaseContract.
        :param subscription_key_parameter_names: The subscription_key_parameter_names of this ApiEntityBaseContract.
        :param type: The type of this ApiEntityBaseContract.
        """
        self.openapi_types = {
            'authentication_settings': AuthenticationSettingsContract,
            'description': str,
            'subscription_key_parameter_names': SubscriptionKeyParameterNamesContract,
            'type': str
        }

        self.attribute_map = {
            'authentication_settings': 'authenticationSettings',
            'description': 'description',
            'subscription_key_parameter_names': 'subscriptionKeyParameterNames',
            'type': 'type'
        }

        self._authentication_settings = authentication_settings
        self._description = description
        self._subscription_key_parameter_names = subscription_key_parameter_names
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiEntityBaseContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiEntityBaseContract of this ApiEntityBaseContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_settings(self):
        """Gets the authentication_settings of this ApiEntityBaseContract.


        :return: The authentication_settings of this ApiEntityBaseContract.
        :rtype: AuthenticationSettingsContract
        """
        return self._authentication_settings

    @authentication_settings.setter
    def authentication_settings(self, authentication_settings):
        """Sets the authentication_settings of this ApiEntityBaseContract.


        :param authentication_settings: The authentication_settings of this ApiEntityBaseContract.
        :type authentication_settings: AuthenticationSettingsContract
        """

        self._authentication_settings = authentication_settings

    @property
    def description(self):
        """Gets the description of this ApiEntityBaseContract.

        Description of the API. May include HTML formatting tags.

        :return: The description of this ApiEntityBaseContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiEntityBaseContract.

        Description of the API. May include HTML formatting tags.

        :param description: The description of this ApiEntityBaseContract.
        :type description: str
        """

        self._description = description

    @property
    def subscription_key_parameter_names(self):
        """Gets the subscription_key_parameter_names of this ApiEntityBaseContract.


        :return: The subscription_key_parameter_names of this ApiEntityBaseContract.
        :rtype: SubscriptionKeyParameterNamesContract
        """
        return self._subscription_key_parameter_names

    @subscription_key_parameter_names.setter
    def subscription_key_parameter_names(self, subscription_key_parameter_names):
        """Sets the subscription_key_parameter_names of this ApiEntityBaseContract.


        :param subscription_key_parameter_names: The subscription_key_parameter_names of this ApiEntityBaseContract.
        :type subscription_key_parameter_names: SubscriptionKeyParameterNamesContract
        """

        self._subscription_key_parameter_names = subscription_key_parameter_names

    @property
    def type(self):
        """Gets the type of this ApiEntityBaseContract.

        Type of API.

        :return: The type of this ApiEntityBaseContract.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiEntityBaseContract.

        Type of API.

        :param type: The type of this ApiEntityBaseContract.
        :type type: str
        """
        allowed_values = ["Http", "Soap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
