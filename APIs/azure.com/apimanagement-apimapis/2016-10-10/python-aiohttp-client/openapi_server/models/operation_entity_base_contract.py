# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_contract import ParameterContract
from openapi_server.models.request_contract import RequestContract
from openapi_server.models.result_contract import ResultContract
from openapi_server import util


class OperationEntityBaseContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, request: RequestContract=None, responses: List[ResultContract]=None, template_parameters: List[ParameterContract]=None):
        """OperationEntityBaseContract - a model defined in OpenAPI

        :param description: The description of this OperationEntityBaseContract.
        :param request: The request of this OperationEntityBaseContract.
        :param responses: The responses of this OperationEntityBaseContract.
        :param template_parameters: The template_parameters of this OperationEntityBaseContract.
        """
        self.openapi_types = {
            'description': str,
            'request': RequestContract,
            'responses': List[ResultContract],
            'template_parameters': List[ParameterContract]
        }

        self.attribute_map = {
            'description': 'description',
            'request': 'request',
            'responses': 'responses',
            'template_parameters': 'templateParameters'
        }

        self._description = description
        self._request = request
        self._responses = responses
        self._template_parameters = template_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationEntityBaseContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationEntityBaseContract of this OperationEntityBaseContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this OperationEntityBaseContract.

        Description of the operation. May include HTML formatting tags.

        :return: The description of this OperationEntityBaseContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OperationEntityBaseContract.

        Description of the operation. May include HTML formatting tags.

        :param description: The description of this OperationEntityBaseContract.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")

        self._description = description

    @property
    def request(self):
        """Gets the request of this OperationEntityBaseContract.


        :return: The request of this OperationEntityBaseContract.
        :rtype: RequestContract
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this OperationEntityBaseContract.


        :param request: The request of this OperationEntityBaseContract.
        :type request: RequestContract
        """

        self._request = request

    @property
    def responses(self):
        """Gets the responses of this OperationEntityBaseContract.

        Array of Operation responses.

        :return: The responses of this OperationEntityBaseContract.
        :rtype: List[ResultContract]
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this OperationEntityBaseContract.

        Array of Operation responses.

        :param responses: The responses of this OperationEntityBaseContract.
        :type responses: List[ResultContract]
        """

        self._responses = responses

    @property
    def template_parameters(self):
        """Gets the template_parameters of this OperationEntityBaseContract.

        Collection of URL template parameters.

        :return: The template_parameters of this OperationEntityBaseContract.
        :rtype: List[ParameterContract]
        """
        return self._template_parameters

    @template_parameters.setter
    def template_parameters(self, template_parameters):
        """Sets the template_parameters of this OperationEntityBaseContract.

        Collection of URL template parameters.

        :param template_parameters: The template_parameters of this OperationEntityBaseContract.
        :type template_parameters: List[ParameterContract]
        """

        self._template_parameters = template_parameters
