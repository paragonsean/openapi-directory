# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_settings_contract import AuthenticationSettingsContract
from openapi_server.models.subscription_key_parameter_names_contract import SubscriptionKeyParameterNamesContract
from openapi_server import util


class ApiContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, path: str=None, protocols: List[str]=None, service_url: str=None, authentication_settings: AuthenticationSettingsContract=None, description: str=None, subscription_key_parameter_names: SubscriptionKeyParameterNamesContract=None, type: str=None):
        """ApiContract - a model defined in OpenAPI

        :param id: The id of this ApiContract.
        :param name: The name of this ApiContract.
        :param path: The path of this ApiContract.
        :param protocols: The protocols of this ApiContract.
        :param service_url: The service_url of this ApiContract.
        :param authentication_settings: The authentication_settings of this ApiContract.
        :param description: The description of this ApiContract.
        :param subscription_key_parameter_names: The subscription_key_parameter_names of this ApiContract.
        :param type: The type of this ApiContract.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'path': str,
            'protocols': List[str],
            'service_url': str,
            'authentication_settings': AuthenticationSettingsContract,
            'description': str,
            'subscription_key_parameter_names': SubscriptionKeyParameterNamesContract,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'path': 'path',
            'protocols': 'protocols',
            'service_url': 'serviceUrl',
            'authentication_settings': 'authenticationSettings',
            'description': 'description',
            'subscription_key_parameter_names': 'subscriptionKeyParameterNames',
            'type': 'type'
        }

        self._id = id
        self._name = name
        self._path = path
        self._protocols = protocols
        self._service_url = service_url
        self._authentication_settings = authentication_settings
        self._description = description
        self._subscription_key_parameter_names = subscription_key_parameter_names
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiContract of this ApiContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ApiContract.

        API identifier path: /apis/{apiId}

        :return: The id of this ApiContract.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiContract.

        API identifier path: /apis/{apiId}

        :param id: The id of this ApiContract.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiContract.

        API name.

        :return: The name of this ApiContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiContract.

        API name.

        :param name: The name of this ApiContract.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 300:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this ApiContract.

        Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.

        :return: The path of this ApiContract.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ApiContract.

        Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.

        :param path: The path of this ApiContract.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")
        if path is not None and len(path) > 400:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `400`")
        if path is not None and len(path) < 0:
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `0`")

        self._path = path

    @property
    def protocols(self):
        """Gets the protocols of this ApiContract.

        Describes on which protocols the operations in this API can be invoked.

        :return: The protocols of this ApiContract.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ApiContract.

        Describes on which protocols the operations in this API can be invoked.

        :param protocols: The protocols of this ApiContract.
        :type protocols: List[str]
        """
        allowed_values = ["Http", "Https"]  # noqa: E501
        if not set(protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    @property
    def service_url(self):
        """Gets the service_url of this ApiContract.

        Absolute URL of the backend service implementing this API.

        :return: The service_url of this ApiContract.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """Sets the service_url of this ApiContract.

        Absolute URL of the backend service implementing this API.

        :param service_url: The service_url of this ApiContract.
        :type service_url: str
        """
        if service_url is None:
            raise ValueError("Invalid value for `service_url`, must not be `None`")
        if service_url is not None and len(service_url) > 2000:
            raise ValueError("Invalid value for `service_url`, length must be less than or equal to `2000`")
        if service_url is not None and len(service_url) < 1:
            raise ValueError("Invalid value for `service_url`, length must be greater than or equal to `1`")

        self._service_url = service_url

    @property
    def authentication_settings(self):
        """Gets the authentication_settings of this ApiContract.


        :return: The authentication_settings of this ApiContract.
        :rtype: AuthenticationSettingsContract
        """
        return self._authentication_settings

    @authentication_settings.setter
    def authentication_settings(self, authentication_settings):
        """Sets the authentication_settings of this ApiContract.


        :param authentication_settings: The authentication_settings of this ApiContract.
        :type authentication_settings: AuthenticationSettingsContract
        """

        self._authentication_settings = authentication_settings

    @property
    def description(self):
        """Gets the description of this ApiContract.

        Description of the API. May include HTML formatting tags.

        :return: The description of this ApiContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiContract.

        Description of the API. May include HTML formatting tags.

        :param description: The description of this ApiContract.
        :type description: str
        """

        self._description = description

    @property
    def subscription_key_parameter_names(self):
        """Gets the subscription_key_parameter_names of this ApiContract.


        :return: The subscription_key_parameter_names of this ApiContract.
        :rtype: SubscriptionKeyParameterNamesContract
        """
        return self._subscription_key_parameter_names

    @subscription_key_parameter_names.setter
    def subscription_key_parameter_names(self, subscription_key_parameter_names):
        """Sets the subscription_key_parameter_names of this ApiContract.


        :param subscription_key_parameter_names: The subscription_key_parameter_names of this ApiContract.
        :type subscription_key_parameter_names: SubscriptionKeyParameterNamesContract
        """

        self._subscription_key_parameter_names = subscription_key_parameter_names

    @property
    def type(self):
        """Gets the type of this ApiContract.

        Type of API.

        :return: The type of this ApiContract.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiContract.

        Type of API.

        :param type: The type of this ApiContract.
        :type type: str
        """
        allowed_values = ["Http", "Soap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
