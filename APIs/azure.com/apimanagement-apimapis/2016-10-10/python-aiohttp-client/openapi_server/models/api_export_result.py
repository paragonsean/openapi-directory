# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ApiExportResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, request_id: str=None, status_code: str=None):
        """ApiExportResult - a model defined in OpenAPI

        :param content: The content of this ApiExportResult.
        :param request_id: The request_id of this ApiExportResult.
        :param status_code: The status_code of this ApiExportResult.
        """
        self.openapi_types = {
            'content': str,
            'request_id': str,
            'status_code': str
        }

        self.attribute_map = {
            'content': 'content',
            'request_id': 'requestId',
            'status_code': 'statusCode'
        }

        self._content = content
        self._request_id = request_id
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiExportResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiExportResult of this ApiExportResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ApiExportResult.

        Response content bytes.

        :return: The content of this ApiExportResult.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ApiExportResult.

        Response content bytes.

        :param content: The content of this ApiExportResult.
        :type content: str
        """
        if content is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', content):
            raise ValueError("Invalid value for `content`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._content = content

    @property
    def request_id(self):
        """Gets the request_id of this ApiExportResult.


        :return: The request_id of this ApiExportResult.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ApiExportResult.


        :param request_id: The request_id of this ApiExportResult.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def status_code(self):
        """Gets the status_code of this ApiExportResult.


        :return: The status_code of this ApiExportResult.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ApiExportResult.


        :param status_code: The status_code of this ApiExportResult.
        :type status_code: str
        """
        allowed_values = ["Continue", "OK", "Created", "Accepted", "NotFound", "Conflict"]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"
                .format(status_code, allowed_values)
            )

        self._status_code = status_code
