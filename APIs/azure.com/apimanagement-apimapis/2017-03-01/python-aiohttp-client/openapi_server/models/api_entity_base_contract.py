# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_contract_properties_all_of_authentication_settings import ApiContractPropertiesAllOfAuthenticationSettings
from openapi_server.models.api_entity_base_contract_subscription_key_parameter_names import ApiEntityBaseContractSubscriptionKeyParameterNames
from openapi_server import util


class ApiEntityBaseContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_revision: str=None, api_version: str=None, api_version_set_id: str=None, authentication_settings: ApiContractPropertiesAllOfAuthenticationSettings=None, description: str=None, is_current: bool=None, is_online: bool=None, subscription_key_parameter_names: ApiEntityBaseContractSubscriptionKeyParameterNames=None, type: str=None):
        """ApiEntityBaseContract - a model defined in OpenAPI

        :param api_revision: The api_revision of this ApiEntityBaseContract.
        :param api_version: The api_version of this ApiEntityBaseContract.
        :param api_version_set_id: The api_version_set_id of this ApiEntityBaseContract.
        :param authentication_settings: The authentication_settings of this ApiEntityBaseContract.
        :param description: The description of this ApiEntityBaseContract.
        :param is_current: The is_current of this ApiEntityBaseContract.
        :param is_online: The is_online of this ApiEntityBaseContract.
        :param subscription_key_parameter_names: The subscription_key_parameter_names of this ApiEntityBaseContract.
        :param type: The type of this ApiEntityBaseContract.
        """
        self.openapi_types = {
            'api_revision': str,
            'api_version': str,
            'api_version_set_id': str,
            'authentication_settings': ApiContractPropertiesAllOfAuthenticationSettings,
            'description': str,
            'is_current': bool,
            'is_online': bool,
            'subscription_key_parameter_names': ApiEntityBaseContractSubscriptionKeyParameterNames,
            'type': str
        }

        self.attribute_map = {
            'api_revision': 'apiRevision',
            'api_version': 'apiVersion',
            'api_version_set_id': 'apiVersionSetId',
            'authentication_settings': 'authenticationSettings',
            'description': 'description',
            'is_current': 'isCurrent',
            'is_online': 'isOnline',
            'subscription_key_parameter_names': 'subscriptionKeyParameterNames',
            'type': 'type'
        }

        self._api_revision = api_revision
        self._api_version = api_version
        self._api_version_set_id = api_version_set_id
        self._authentication_settings = authentication_settings
        self._description = description
        self._is_current = is_current
        self._is_online = is_online
        self._subscription_key_parameter_names = subscription_key_parameter_names
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiEntityBaseContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiEntityBaseContract of this ApiEntityBaseContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_revision(self):
        """Gets the api_revision of this ApiEntityBaseContract.

        Describes the Revision of the Api. If no value is provided, default revision 1 is created

        :return: The api_revision of this ApiEntityBaseContract.
        :rtype: str
        """
        return self._api_revision

    @api_revision.setter
    def api_revision(self, api_revision):
        """Sets the api_revision of this ApiEntityBaseContract.

        Describes the Revision of the Api. If no value is provided, default revision 1 is created

        :param api_revision: The api_revision of this ApiEntityBaseContract.
        :type api_revision: str
        """
        if api_revision is not None and len(api_revision) > 100:
            raise ValueError("Invalid value for `api_revision`, length must be less than or equal to `100`")
        if api_revision is not None and len(api_revision) < 1:
            raise ValueError("Invalid value for `api_revision`, length must be greater than or equal to `1`")

        self._api_revision = api_revision

    @property
    def api_version(self):
        """Gets the api_version of this ApiEntityBaseContract.

        Indicates the Version identifier of the API if the API is versioned

        :return: The api_version of this ApiEntityBaseContract.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ApiEntityBaseContract.

        Indicates the Version identifier of the API if the API is versioned

        :param api_version: The api_version of this ApiEntityBaseContract.
        :type api_version: str
        """
        if api_version is not None and len(api_version) > 100:
            raise ValueError("Invalid value for `api_version`, length must be less than or equal to `100`")

        self._api_version = api_version

    @property
    def api_version_set_id(self):
        """Gets the api_version_set_id of this ApiEntityBaseContract.

        A resource identifier for the related ApiVersionSet.

        :return: The api_version_set_id of this ApiEntityBaseContract.
        :rtype: str
        """
        return self._api_version_set_id

    @api_version_set_id.setter
    def api_version_set_id(self, api_version_set_id):
        """Sets the api_version_set_id of this ApiEntityBaseContract.

        A resource identifier for the related ApiVersionSet.

        :param api_version_set_id: The api_version_set_id of this ApiEntityBaseContract.
        :type api_version_set_id: str
        """

        self._api_version_set_id = api_version_set_id

    @property
    def authentication_settings(self):
        """Gets the authentication_settings of this ApiEntityBaseContract.


        :return: The authentication_settings of this ApiEntityBaseContract.
        :rtype: ApiContractPropertiesAllOfAuthenticationSettings
        """
        return self._authentication_settings

    @authentication_settings.setter
    def authentication_settings(self, authentication_settings):
        """Sets the authentication_settings of this ApiEntityBaseContract.


        :param authentication_settings: The authentication_settings of this ApiEntityBaseContract.
        :type authentication_settings: ApiContractPropertiesAllOfAuthenticationSettings
        """

        self._authentication_settings = authentication_settings

    @property
    def description(self):
        """Gets the description of this ApiEntityBaseContract.

        Description of the API. May include HTML formatting tags.

        :return: The description of this ApiEntityBaseContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiEntityBaseContract.

        Description of the API. May include HTML formatting tags.

        :param description: The description of this ApiEntityBaseContract.
        :type description: str
        """

        self._description = description

    @property
    def is_current(self):
        """Gets the is_current of this ApiEntityBaseContract.

        Indicates if API revision is current api revision.

        :return: The is_current of this ApiEntityBaseContract.
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this ApiEntityBaseContract.

        Indicates if API revision is current api revision.

        :param is_current: The is_current of this ApiEntityBaseContract.
        :type is_current: bool
        """

        self._is_current = is_current

    @property
    def is_online(self):
        """Gets the is_online of this ApiEntityBaseContract.

        Indicates if API revision is accessible via the gateway.

        :return: The is_online of this ApiEntityBaseContract.
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this ApiEntityBaseContract.

        Indicates if API revision is accessible via the gateway.

        :param is_online: The is_online of this ApiEntityBaseContract.
        :type is_online: bool
        """

        self._is_online = is_online

    @property
    def subscription_key_parameter_names(self):
        """Gets the subscription_key_parameter_names of this ApiEntityBaseContract.


        :return: The subscription_key_parameter_names of this ApiEntityBaseContract.
        :rtype: ApiEntityBaseContractSubscriptionKeyParameterNames
        """
        return self._subscription_key_parameter_names

    @subscription_key_parameter_names.setter
    def subscription_key_parameter_names(self, subscription_key_parameter_names):
        """Sets the subscription_key_parameter_names of this ApiEntityBaseContract.


        :param subscription_key_parameter_names: The subscription_key_parameter_names of this ApiEntityBaseContract.
        :type subscription_key_parameter_names: ApiEntityBaseContractSubscriptionKeyParameterNames
        """

        self._subscription_key_parameter_names = subscription_key_parameter_names

    @property
    def type(self):
        """Gets the type of this ApiEntityBaseContract.

        Type of API.

        :return: The type of this ApiEntityBaseContract.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiEntityBaseContract.

        Type of API.

        :param type: The type of this ApiEntityBaseContract.
        :type type: str
        """
        allowed_values = ["http", "soap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
