# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_contract import ParameterContract
from openapi_server import util


class RepresentationContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, form_parameters: List[ParameterContract]=None, sample: str=None, schema_id: str=None, type_name: str=None):
        """RepresentationContract - a model defined in OpenAPI

        :param content_type: The content_type of this RepresentationContract.
        :param form_parameters: The form_parameters of this RepresentationContract.
        :param sample: The sample of this RepresentationContract.
        :param schema_id: The schema_id of this RepresentationContract.
        :param type_name: The type_name of this RepresentationContract.
        """
        self.openapi_types = {
            'content_type': str,
            'form_parameters': List[ParameterContract],
            'sample': str,
            'schema_id': str,
            'type_name': str
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'form_parameters': 'formParameters',
            'sample': 'sample',
            'schema_id': 'schemaId',
            'type_name': 'typeName'
        }

        self._content_type = content_type
        self._form_parameters = form_parameters
        self._sample = sample
        self._schema_id = schema_id
        self._type_name = type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepresentationContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepresentationContract of this RepresentationContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this RepresentationContract.

        Specifies a registered or custom content type for this representation, e.g. application/xml.

        :return: The content_type of this RepresentationContract.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this RepresentationContract.

        Specifies a registered or custom content type for this representation, e.g. application/xml.

        :param content_type: The content_type of this RepresentationContract.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def form_parameters(self):
        """Gets the form_parameters of this RepresentationContract.

        Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..

        :return: The form_parameters of this RepresentationContract.
        :rtype: List[ParameterContract]
        """
        return self._form_parameters

    @form_parameters.setter
    def form_parameters(self, form_parameters):
        """Sets the form_parameters of this RepresentationContract.

        Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..

        :param form_parameters: The form_parameters of this RepresentationContract.
        :type form_parameters: List[ParameterContract]
        """

        self._form_parameters = form_parameters

    @property
    def sample(self):
        """Gets the sample of this RepresentationContract.

        An example of the representation.

        :return: The sample of this RepresentationContract.
        :rtype: str
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this RepresentationContract.

        An example of the representation.

        :param sample: The sample of this RepresentationContract.
        :type sample: str
        """

        self._sample = sample

    @property
    def schema_id(self):
        """Gets the schema_id of this RepresentationContract.

        Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.

        :return: The schema_id of this RepresentationContract.
        :rtype: str
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this RepresentationContract.

        Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.

        :param schema_id: The schema_id of this RepresentationContract.
        :type schema_id: str
        """

        self._schema_id = schema_id

    @property
    def type_name(self):
        """Gets the type_name of this RepresentationContract.

        Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.

        :return: The type_name of this RepresentationContract.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this RepresentationContract.

        Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.

        :param type_name: The type_name of this RepresentationContract.
        :type type_name: str
        """

        self._type_name = type_name
