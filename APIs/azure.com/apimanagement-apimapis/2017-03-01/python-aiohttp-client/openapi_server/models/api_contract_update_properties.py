# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_contract_properties_all_of_authentication_settings import ApiContractPropertiesAllOfAuthenticationSettings
from openapi_server.models.api_entity_base_contract_subscription_key_parameter_names import ApiEntityBaseContractSubscriptionKeyParameterNames
from openapi_server import util


class ApiContractUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, path: str=None, protocols: List[str]=None, service_url: str=None, api_revision: str=None, api_version: str=None, api_version_set_id: str=None, authentication_settings: ApiContractPropertiesAllOfAuthenticationSettings=None, description: str=None, is_current: bool=None, is_online: bool=None, subscription_key_parameter_names: ApiEntityBaseContractSubscriptionKeyParameterNames=None, type: str=None):
        """ApiContractUpdateProperties - a model defined in OpenAPI

        :param display_name: The display_name of this ApiContractUpdateProperties.
        :param path: The path of this ApiContractUpdateProperties.
        :param protocols: The protocols of this ApiContractUpdateProperties.
        :param service_url: The service_url of this ApiContractUpdateProperties.
        :param api_revision: The api_revision of this ApiContractUpdateProperties.
        :param api_version: The api_version of this ApiContractUpdateProperties.
        :param api_version_set_id: The api_version_set_id of this ApiContractUpdateProperties.
        :param authentication_settings: The authentication_settings of this ApiContractUpdateProperties.
        :param description: The description of this ApiContractUpdateProperties.
        :param is_current: The is_current of this ApiContractUpdateProperties.
        :param is_online: The is_online of this ApiContractUpdateProperties.
        :param subscription_key_parameter_names: The subscription_key_parameter_names of this ApiContractUpdateProperties.
        :param type: The type of this ApiContractUpdateProperties.
        """
        self.openapi_types = {
            'display_name': str,
            'path': str,
            'protocols': List[str],
            'service_url': str,
            'api_revision': str,
            'api_version': str,
            'api_version_set_id': str,
            'authentication_settings': ApiContractPropertiesAllOfAuthenticationSettings,
            'description': str,
            'is_current': bool,
            'is_online': bool,
            'subscription_key_parameter_names': ApiEntityBaseContractSubscriptionKeyParameterNames,
            'type': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'path': 'path',
            'protocols': 'protocols',
            'service_url': 'serviceUrl',
            'api_revision': 'apiRevision',
            'api_version': 'apiVersion',
            'api_version_set_id': 'apiVersionSetId',
            'authentication_settings': 'authenticationSettings',
            'description': 'description',
            'is_current': 'isCurrent',
            'is_online': 'isOnline',
            'subscription_key_parameter_names': 'subscriptionKeyParameterNames',
            'type': 'type'
        }

        self._display_name = display_name
        self._path = path
        self._protocols = protocols
        self._service_url = service_url
        self._api_revision = api_revision
        self._api_version = api_version
        self._api_version_set_id = api_version_set_id
        self._authentication_settings = authentication_settings
        self._description = description
        self._is_current = is_current
        self._is_online = is_online
        self._subscription_key_parameter_names = subscription_key_parameter_names
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiContractUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiContractUpdateProperties of this ApiContractUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ApiContractUpdateProperties.

        API name.

        :return: The display_name of this ApiContractUpdateProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApiContractUpdateProperties.

        API name.

        :param display_name: The display_name of this ApiContractUpdateProperties.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 300:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `300`")
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")

        self._display_name = display_name

    @property
    def path(self):
        """Gets the path of this ApiContractUpdateProperties.

        Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.

        :return: The path of this ApiContractUpdateProperties.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ApiContractUpdateProperties.

        Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.

        :param path: The path of this ApiContractUpdateProperties.
        :type path: str
        """
        if path is not None and len(path) > 400:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `400`")
        if path is not None and len(path) < 0:
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `0`")

        self._path = path

    @property
    def protocols(self):
        """Gets the protocols of this ApiContractUpdateProperties.

        Describes on which protocols the operations in this API can be invoked.

        :return: The protocols of this ApiContractUpdateProperties.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ApiContractUpdateProperties.

        Describes on which protocols the operations in this API can be invoked.

        :param protocols: The protocols of this ApiContractUpdateProperties.
        :type protocols: List[str]
        """
        allowed_values = ["http", "https"]  # noqa: E501
        if not set(protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    @property
    def service_url(self):
        """Gets the service_url of this ApiContractUpdateProperties.

        Absolute URL of the backend service implementing this API.

        :return: The service_url of this ApiContractUpdateProperties.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """Sets the service_url of this ApiContractUpdateProperties.

        Absolute URL of the backend service implementing this API.

        :param service_url: The service_url of this ApiContractUpdateProperties.
        :type service_url: str
        """
        if service_url is not None and len(service_url) > 2000:
            raise ValueError("Invalid value for `service_url`, length must be less than or equal to `2000`")
        if service_url is not None and len(service_url) < 1:
            raise ValueError("Invalid value for `service_url`, length must be greater than or equal to `1`")

        self._service_url = service_url

    @property
    def api_revision(self):
        """Gets the api_revision of this ApiContractUpdateProperties.

        Describes the Revision of the Api. If no value is provided, default revision 1 is created

        :return: The api_revision of this ApiContractUpdateProperties.
        :rtype: str
        """
        return self._api_revision

    @api_revision.setter
    def api_revision(self, api_revision):
        """Sets the api_revision of this ApiContractUpdateProperties.

        Describes the Revision of the Api. If no value is provided, default revision 1 is created

        :param api_revision: The api_revision of this ApiContractUpdateProperties.
        :type api_revision: str
        """
        if api_revision is not None and len(api_revision) > 100:
            raise ValueError("Invalid value for `api_revision`, length must be less than or equal to `100`")
        if api_revision is not None and len(api_revision) < 1:
            raise ValueError("Invalid value for `api_revision`, length must be greater than or equal to `1`")

        self._api_revision = api_revision

    @property
    def api_version(self):
        """Gets the api_version of this ApiContractUpdateProperties.

        Indicates the Version identifier of the API if the API is versioned

        :return: The api_version of this ApiContractUpdateProperties.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ApiContractUpdateProperties.

        Indicates the Version identifier of the API if the API is versioned

        :param api_version: The api_version of this ApiContractUpdateProperties.
        :type api_version: str
        """
        if api_version is not None and len(api_version) > 100:
            raise ValueError("Invalid value for `api_version`, length must be less than or equal to `100`")

        self._api_version = api_version

    @property
    def api_version_set_id(self):
        """Gets the api_version_set_id of this ApiContractUpdateProperties.

        A resource identifier for the related ApiVersionSet.

        :return: The api_version_set_id of this ApiContractUpdateProperties.
        :rtype: str
        """
        return self._api_version_set_id

    @api_version_set_id.setter
    def api_version_set_id(self, api_version_set_id):
        """Sets the api_version_set_id of this ApiContractUpdateProperties.

        A resource identifier for the related ApiVersionSet.

        :param api_version_set_id: The api_version_set_id of this ApiContractUpdateProperties.
        :type api_version_set_id: str
        """

        self._api_version_set_id = api_version_set_id

    @property
    def authentication_settings(self):
        """Gets the authentication_settings of this ApiContractUpdateProperties.


        :return: The authentication_settings of this ApiContractUpdateProperties.
        :rtype: ApiContractPropertiesAllOfAuthenticationSettings
        """
        return self._authentication_settings

    @authentication_settings.setter
    def authentication_settings(self, authentication_settings):
        """Sets the authentication_settings of this ApiContractUpdateProperties.


        :param authentication_settings: The authentication_settings of this ApiContractUpdateProperties.
        :type authentication_settings: ApiContractPropertiesAllOfAuthenticationSettings
        """

        self._authentication_settings = authentication_settings

    @property
    def description(self):
        """Gets the description of this ApiContractUpdateProperties.

        Description of the API. May include HTML formatting tags.

        :return: The description of this ApiContractUpdateProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiContractUpdateProperties.

        Description of the API. May include HTML formatting tags.

        :param description: The description of this ApiContractUpdateProperties.
        :type description: str
        """

        self._description = description

    @property
    def is_current(self):
        """Gets the is_current of this ApiContractUpdateProperties.

        Indicates if API revision is current api revision.

        :return: The is_current of this ApiContractUpdateProperties.
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this ApiContractUpdateProperties.

        Indicates if API revision is current api revision.

        :param is_current: The is_current of this ApiContractUpdateProperties.
        :type is_current: bool
        """

        self._is_current = is_current

    @property
    def is_online(self):
        """Gets the is_online of this ApiContractUpdateProperties.

        Indicates if API revision is accessible via the gateway.

        :return: The is_online of this ApiContractUpdateProperties.
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this ApiContractUpdateProperties.

        Indicates if API revision is accessible via the gateway.

        :param is_online: The is_online of this ApiContractUpdateProperties.
        :type is_online: bool
        """

        self._is_online = is_online

    @property
    def subscription_key_parameter_names(self):
        """Gets the subscription_key_parameter_names of this ApiContractUpdateProperties.


        :return: The subscription_key_parameter_names of this ApiContractUpdateProperties.
        :rtype: ApiEntityBaseContractSubscriptionKeyParameterNames
        """
        return self._subscription_key_parameter_names

    @subscription_key_parameter_names.setter
    def subscription_key_parameter_names(self, subscription_key_parameter_names):
        """Sets the subscription_key_parameter_names of this ApiContractUpdateProperties.


        :param subscription_key_parameter_names: The subscription_key_parameter_names of this ApiContractUpdateProperties.
        :type subscription_key_parameter_names: ApiEntityBaseContractSubscriptionKeyParameterNames
        """

        self._subscription_key_parameter_names = subscription_key_parameter_names

    @property
    def type(self):
        """Gets the type of this ApiContractUpdateProperties.

        Type of API.

        :return: The type of this ApiContractUpdateProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiContractUpdateProperties.

        Type of API.

        :param type: The type of this ApiContractUpdateProperties.
        :type type: str
        """
        allowed_values = ["http", "soap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
