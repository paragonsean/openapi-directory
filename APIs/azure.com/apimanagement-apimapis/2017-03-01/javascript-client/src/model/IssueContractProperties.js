/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IssueContractProperties model module.
 * @module model/IssueContractProperties
 * @version 2017-03-01
 */
class IssueContractProperties {
    /**
     * Constructs a new <code>IssueContractProperties</code>.
     * Issue contract Properties.
     * @alias module:model/IssueContractProperties
     * @param description {String} Text describing the issue.
     * @param title {String} The issue title.
     * @param userId {String} A resource identifier for the user created the issue.
     */
    constructor(description, title, userId) { 
        
        IssueContractProperties.initialize(this, description, title, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, title, userId) { 
        obj['description'] = description;
        obj['title'] = title;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>IssueContractProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueContractProperties} obj Optional instance to populate.
     * @return {module:model/IssueContractProperties} The populated <code>IssueContractProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueContractProperties();

            if (data.hasOwnProperty('apiId')) {
                obj['apiId'] = ApiClient.convertToType(data['apiId'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueContractProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueContractProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IssueContractProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['apiId'] && !(typeof data['apiId'] === 'string' || data['apiId'] instanceof String)) {
            throw new Error("Expected the field `apiId` to be a primitive type in the JSON string but got " + data['apiId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}

IssueContractProperties.RequiredProperties = ["description", "title", "userId"];

/**
 * A resource identifier for the API the issue was created for.
 * @member {String} apiId
 */
IssueContractProperties.prototype['apiId'] = undefined;

/**
 * Date and time when the issue was created.
 * @member {Date} createdDate
 */
IssueContractProperties.prototype['createdDate'] = undefined;

/**
 * Text describing the issue.
 * @member {String} description
 */
IssueContractProperties.prototype['description'] = undefined;

/**
 * Status of the issue.
 * @member {module:model/IssueContractProperties.StateEnum} state
 */
IssueContractProperties.prototype['state'] = undefined;

/**
 * The issue title.
 * @member {String} title
 */
IssueContractProperties.prototype['title'] = undefined;

/**
 * A resource identifier for the user created the issue.
 * @member {String} userId
 */
IssueContractProperties.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
IssueContractProperties['StateEnum'] = {

    /**
     * value: "proposed"
     * @const
     */
    "proposed": "proposed",

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "removed"
     * @const
     */
    "removed": "removed",

    /**
     * value: "resolved"
     * @const
     */
    "resolved": "resolved",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed"
};



export default IssueContractProperties;

