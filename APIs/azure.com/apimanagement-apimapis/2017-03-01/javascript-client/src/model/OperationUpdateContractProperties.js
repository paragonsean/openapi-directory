/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OperationEntityBaseContract from './OperationEntityBaseContract';
import ParameterContract from './ParameterContract';
import RequestContract from './RequestContract';
import ResponseContract from './ResponseContract';

/**
 * The OperationUpdateContractProperties model module.
 * @module model/OperationUpdateContractProperties
 * @version 2017-03-01
 */
class OperationUpdateContractProperties {
    /**
     * Constructs a new <code>OperationUpdateContractProperties</code>.
     * Operation Update Contract Properties.
     * @alias module:model/OperationUpdateContractProperties
     * @implements module:model/OperationEntityBaseContract
     */
    constructor() { 
        OperationEntityBaseContract.initialize(this);
        OperationUpdateContractProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OperationUpdateContractProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperationUpdateContractProperties} obj Optional instance to populate.
     * @return {module:model/OperationUpdateContractProperties} The populated <code>OperationUpdateContractProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperationUpdateContractProperties();
            OperationEntityBaseContract.constructFromObject(data, obj);

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('urlTemplate')) {
                obj['urlTemplate'] = ApiClient.convertToType(data['urlTemplate'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('policies')) {
                obj['policies'] = ApiClient.convertToType(data['policies'], 'String');
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = RequestContract.constructFromObject(data['request']);
            }
            if (data.hasOwnProperty('responses')) {
                obj['responses'] = ApiClient.convertToType(data['responses'], [ResponseContract]);
            }
            if (data.hasOwnProperty('templateParameters')) {
                obj['templateParameters'] = ApiClient.convertToType(data['templateParameters'], [ParameterContract]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperationUpdateContractProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperationUpdateContractProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['urlTemplate'] && !(typeof data['urlTemplate'] === 'string' || data['urlTemplate'] instanceof String)) {
            throw new Error("Expected the field `urlTemplate` to be a primitive type in the JSON string but got " + data['urlTemplate']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['policies'] && !(typeof data['policies'] === 'string' || data['policies'] instanceof String)) {
            throw new Error("Expected the field `policies` to be a primitive type in the JSON string but got " + data['policies']);
        }
        // validate the optional field `request`
        if (data['request']) { // data not null
          RequestContract.validateJSON(data['request']);
        }
        if (data['responses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['responses'])) {
                throw new Error("Expected the field `responses` to be an array in the JSON data but got " + data['responses']);
            }
            // validate the optional field `responses` (array)
            for (const item of data['responses']) {
                ResponseContract.validateJSON(item);
            };
        }
        if (data['templateParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['templateParameters'])) {
                throw new Error("Expected the field `templateParameters` to be an array in the JSON data but got " + data['templateParameters']);
            }
            // validate the optional field `templateParameters` (array)
            for (const item of data['templateParameters']) {
                ParameterContract.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Operation Name.
 * @member {String} displayName
 */
OperationUpdateContractProperties.prototype['displayName'] = undefined;

/**
 * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
 * @member {String} method
 */
OperationUpdateContractProperties.prototype['method'] = undefined;

/**
 * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
 * @member {String} urlTemplate
 */
OperationUpdateContractProperties.prototype['urlTemplate'] = undefined;

/**
 * Description of the operation. May include HTML formatting tags.
 * @member {String} description
 */
OperationUpdateContractProperties.prototype['description'] = undefined;

/**
 * Operation Policies
 * @member {String} policies
 */
OperationUpdateContractProperties.prototype['policies'] = undefined;

/**
 * @member {module:model/RequestContract} request
 */
OperationUpdateContractProperties.prototype['request'] = undefined;

/**
 * Array of Operation responses.
 * @member {Array.<module:model/ResponseContract>} responses
 */
OperationUpdateContractProperties.prototype['responses'] = undefined;

/**
 * Collection of URL template parameters.
 * @member {Array.<module:model/ParameterContract>} templateParameters
 */
OperationUpdateContractProperties.prototype['templateParameters'] = undefined;


// Implement OperationEntityBaseContract interface:
/**
 * Description of the operation. May include HTML formatting tags.
 * @member {String} description
 */
OperationEntityBaseContract.prototype['description'] = undefined;
/**
 * Operation Policies
 * @member {String} policies
 */
OperationEntityBaseContract.prototype['policies'] = undefined;
/**
 * @member {module:model/RequestContract} request
 */
OperationEntityBaseContract.prototype['request'] = undefined;
/**
 * Array of Operation responses.
 * @member {Array.<module:model/ResponseContract>} responses
 */
OperationEntityBaseContract.prototype['responses'] = undefined;
/**
 * Collection of URL template parameters.
 * @member {Array.<module:model/ParameterContract>} templateParameters
 */
OperationEntityBaseContract.prototype['templateParameters'] = undefined;




export default OperationUpdateContractProperties;

