/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ParameterContract;
import org.openapitools.client.model.RepresentationContract;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Operation response details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:40.041986-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResponseContract {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<ParameterContract> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPRESENTATIONS = "representations";
  @SerializedName(SERIALIZED_NAME_REPRESENTATIONS)
  private List<RepresentationContract> representations = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public ResponseContract() {
  }

  public ResponseContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Operation response description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ResponseContract headers(List<ParameterContract> headers) {
    this.headers = headers;
    return this;
  }

  public ResponseContract addHeadersItem(ParameterContract headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * Collection of operation response headers.
   * @return headers
   */
  @javax.annotation.Nullable
  public List<ParameterContract> getHeaders() {
    return headers;
  }

  public void setHeaders(List<ParameterContract> headers) {
    this.headers = headers;
  }


  public ResponseContract representations(List<RepresentationContract> representations) {
    this.representations = representations;
    return this;
  }

  public ResponseContract addRepresentationsItem(RepresentationContract representationsItem) {
    if (this.representations == null) {
      this.representations = new ArrayList<>();
    }
    this.representations.add(representationsItem);
    return this;
  }

  /**
   * Collection of operation response representations.
   * @return representations
   */
  @javax.annotation.Nullable
  public List<RepresentationContract> getRepresentations() {
    return representations;
  }

  public void setRepresentations(List<RepresentationContract> representations) {
    this.representations = representations;
  }


  public ResponseContract statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Operation response HTTP status code.
   * @return statusCode
   */
  @javax.annotation.Nonnull
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseContract responseContract = (ResponseContract) o;
    return Objects.equals(this.description, responseContract.description) &&
        Objects.equals(this.headers, responseContract.headers) &&
        Objects.equals(this.representations, responseContract.representations) &&
        Objects.equals(this.statusCode, responseContract.statusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, headers, representations, statusCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseContract {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    representations: ").append(toIndentedString(representations)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("headers");
    openapiFields.add("representations");
    openapiFields.add("statusCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("statusCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseContract is not found in the empty JSON string", ResponseContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResponseContract.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
          }

          // validate the optional field `headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            ParameterContract.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      if (jsonObj.get("representations") != null && !jsonObj.get("representations").isJsonNull()) {
        JsonArray jsonArrayrepresentations = jsonObj.getAsJsonArray("representations");
        if (jsonArrayrepresentations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("representations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `representations` to be an array in the JSON string but got `%s`", jsonObj.get("representations").toString()));
          }

          // validate the optional field `representations` (array)
          for (int i = 0; i < jsonArrayrepresentations.size(); i++) {
            RepresentationContract.validateJsonElement(jsonArrayrepresentations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseContract>() {
           @Override
           public void write(JsonWriter out, ResponseContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseContract
   * @throws IOException if the JSON string is invalid with respect to ResponseContract
   */
  public static ResponseContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseContract.class);
  }

  /**
   * Convert an instance of ResponseContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

