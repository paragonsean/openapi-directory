/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApiContractPropertiesAllOfAuthenticationSettings;
import org.openapitools.client.model.ApiEntityBaseContractSubscriptionKeyParameterNames;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * API base contract details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:40.041986-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiEntityBaseContract {
  public static final String SERIALIZED_NAME_API_REVISION = "apiRevision";
  @SerializedName(SERIALIZED_NAME_API_REVISION)
  private String apiRevision;

  public static final String SERIALIZED_NAME_API_VERSION = "apiVersion";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_API_VERSION_SET_ID = "apiVersionSetId";
  @SerializedName(SERIALIZED_NAME_API_VERSION_SET_ID)
  private String apiVersionSetId;

  public static final String SERIALIZED_NAME_AUTHENTICATION_SETTINGS = "authenticationSettings";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_SETTINGS)
  private ApiContractPropertiesAllOfAuthenticationSettings authenticationSettings;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_CURRENT = "isCurrent";
  @SerializedName(SERIALIZED_NAME_IS_CURRENT)
  private Boolean isCurrent;

  public static final String SERIALIZED_NAME_IS_ONLINE = "isOnline";
  @SerializedName(SERIALIZED_NAME_IS_ONLINE)
  private Boolean isOnline;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_KEY_PARAMETER_NAMES = "subscriptionKeyParameterNames";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_KEY_PARAMETER_NAMES)
  private ApiEntityBaseContractSubscriptionKeyParameterNames subscriptionKeyParameterNames;

  /**
   * Type of API.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    HTTP("http"),
    
    SOAP("soap");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ApiEntityBaseContract() {
  }

  public ApiEntityBaseContract(
     Boolean isCurrent, 
     Boolean isOnline
  ) {
    this();
    this.isCurrent = isCurrent;
    this.isOnline = isOnline;
  }

  public ApiEntityBaseContract apiRevision(String apiRevision) {
    this.apiRevision = apiRevision;
    return this;
  }

  /**
   * Describes the Revision of the Api. If no value is provided, default revision 1 is created
   * @return apiRevision
   */
  @javax.annotation.Nullable
  public String getApiRevision() {
    return apiRevision;
  }

  public void setApiRevision(String apiRevision) {
    this.apiRevision = apiRevision;
  }


  public ApiEntityBaseContract apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * Indicates the Version identifier of the API if the API is versioned
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public ApiEntityBaseContract apiVersionSetId(String apiVersionSetId) {
    this.apiVersionSetId = apiVersionSetId;
    return this;
  }

  /**
   * A resource identifier for the related ApiVersionSet.
   * @return apiVersionSetId
   */
  @javax.annotation.Nullable
  public String getApiVersionSetId() {
    return apiVersionSetId;
  }

  public void setApiVersionSetId(String apiVersionSetId) {
    this.apiVersionSetId = apiVersionSetId;
  }


  public ApiEntityBaseContract authenticationSettings(ApiContractPropertiesAllOfAuthenticationSettings authenticationSettings) {
    this.authenticationSettings = authenticationSettings;
    return this;
  }

  /**
   * Get authenticationSettings
   * @return authenticationSettings
   */
  @javax.annotation.Nullable
  public ApiContractPropertiesAllOfAuthenticationSettings getAuthenticationSettings() {
    return authenticationSettings;
  }

  public void setAuthenticationSettings(ApiContractPropertiesAllOfAuthenticationSettings authenticationSettings) {
    this.authenticationSettings = authenticationSettings;
  }


  public ApiEntityBaseContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the API. May include HTML formatting tags.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Indicates if API revision is current api revision.
   * @return isCurrent
   */
  @javax.annotation.Nullable
  public Boolean getIsCurrent() {
    return isCurrent;
  }



  /**
   * Indicates if API revision is accessible via the gateway.
   * @return isOnline
   */
  @javax.annotation.Nullable
  public Boolean getIsOnline() {
    return isOnline;
  }



  public ApiEntityBaseContract subscriptionKeyParameterNames(ApiEntityBaseContractSubscriptionKeyParameterNames subscriptionKeyParameterNames) {
    this.subscriptionKeyParameterNames = subscriptionKeyParameterNames;
    return this;
  }

  /**
   * Get subscriptionKeyParameterNames
   * @return subscriptionKeyParameterNames
   */
  @javax.annotation.Nullable
  public ApiEntityBaseContractSubscriptionKeyParameterNames getSubscriptionKeyParameterNames() {
    return subscriptionKeyParameterNames;
  }

  public void setSubscriptionKeyParameterNames(ApiEntityBaseContractSubscriptionKeyParameterNames subscriptionKeyParameterNames) {
    this.subscriptionKeyParameterNames = subscriptionKeyParameterNames;
  }


  public ApiEntityBaseContract type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of API.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiEntityBaseContract apiEntityBaseContract = (ApiEntityBaseContract) o;
    return Objects.equals(this.apiRevision, apiEntityBaseContract.apiRevision) &&
        Objects.equals(this.apiVersion, apiEntityBaseContract.apiVersion) &&
        Objects.equals(this.apiVersionSetId, apiEntityBaseContract.apiVersionSetId) &&
        Objects.equals(this.authenticationSettings, apiEntityBaseContract.authenticationSettings) &&
        Objects.equals(this.description, apiEntityBaseContract.description) &&
        Objects.equals(this.isCurrent, apiEntityBaseContract.isCurrent) &&
        Objects.equals(this.isOnline, apiEntityBaseContract.isOnline) &&
        Objects.equals(this.subscriptionKeyParameterNames, apiEntityBaseContract.subscriptionKeyParameterNames) &&
        Objects.equals(this.type, apiEntityBaseContract.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiRevision, apiVersion, apiVersionSetId, authenticationSettings, description, isCurrent, isOnline, subscriptionKeyParameterNames, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiEntityBaseContract {\n");
    sb.append("    apiRevision: ").append(toIndentedString(apiRevision)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    apiVersionSetId: ").append(toIndentedString(apiVersionSetId)).append("\n");
    sb.append("    authenticationSettings: ").append(toIndentedString(authenticationSettings)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isCurrent: ").append(toIndentedString(isCurrent)).append("\n");
    sb.append("    isOnline: ").append(toIndentedString(isOnline)).append("\n");
    sb.append("    subscriptionKeyParameterNames: ").append(toIndentedString(subscriptionKeyParameterNames)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiRevision");
    openapiFields.add("apiVersion");
    openapiFields.add("apiVersionSetId");
    openapiFields.add("authenticationSettings");
    openapiFields.add("description");
    openapiFields.add("isCurrent");
    openapiFields.add("isOnline");
    openapiFields.add("subscriptionKeyParameterNames");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiEntityBaseContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiEntityBaseContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiEntityBaseContract is not found in the empty JSON string", ApiEntityBaseContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiEntityBaseContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiEntityBaseContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiRevision") != null && !jsonObj.get("apiRevision").isJsonNull()) && !jsonObj.get("apiRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiRevision").toString()));
      }
      if ((jsonObj.get("apiVersion") != null && !jsonObj.get("apiVersion").isJsonNull()) && !jsonObj.get("apiVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersion").toString()));
      }
      if ((jsonObj.get("apiVersionSetId") != null && !jsonObj.get("apiVersionSetId").isJsonNull()) && !jsonObj.get("apiVersionSetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersionSetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersionSetId").toString()));
      }
      // validate the optional field `authenticationSettings`
      if (jsonObj.get("authenticationSettings") != null && !jsonObj.get("authenticationSettings").isJsonNull()) {
        ApiContractPropertiesAllOfAuthenticationSettings.validateJsonElement(jsonObj.get("authenticationSettings"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `subscriptionKeyParameterNames`
      if (jsonObj.get("subscriptionKeyParameterNames") != null && !jsonObj.get("subscriptionKeyParameterNames").isJsonNull()) {
        ApiEntityBaseContractSubscriptionKeyParameterNames.validateJsonElement(jsonObj.get("subscriptionKeyParameterNames"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiEntityBaseContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiEntityBaseContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiEntityBaseContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiEntityBaseContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiEntityBaseContract>() {
           @Override
           public void write(JsonWriter out, ApiEntityBaseContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiEntityBaseContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiEntityBaseContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiEntityBaseContract
   * @throws IOException if the JSON string is invalid with respect to ApiEntityBaseContract
   */
  public static ApiEntityBaseContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiEntityBaseContract.class);
  }

  /**
   * Convert an instance of ApiEntityBaseContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

