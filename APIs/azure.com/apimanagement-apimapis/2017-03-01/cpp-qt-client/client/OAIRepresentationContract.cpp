/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepresentationContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepresentationContract::OAIRepresentationContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepresentationContract::OAIRepresentationContract() {
    this->initializeModel();
}

OAIRepresentationContract::~OAIRepresentationContract() {}

void OAIRepresentationContract::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_form_parameters_isSet = false;
    m_form_parameters_isValid = false;

    m_sample_isSet = false;
    m_sample_isValid = false;

    m_schema_id_isSet = false;
    m_schema_id_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;
}

void OAIRepresentationContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepresentationContract::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_form_parameters_isValid = ::OpenAPI::fromJsonValue(m_form_parameters, json[QString("formParameters")]);
    m_form_parameters_isSet = !json[QString("formParameters")].isNull() && m_form_parameters_isValid;

    m_sample_isValid = ::OpenAPI::fromJsonValue(m_sample, json[QString("sample")]);
    m_sample_isSet = !json[QString("sample")].isNull() && m_sample_isValid;

    m_schema_id_isValid = ::OpenAPI::fromJsonValue(m_schema_id, json[QString("schemaId")]);
    m_schema_id_isSet = !json[QString("schemaId")].isNull() && m_schema_id_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("typeName")]);
    m_type_name_isSet = !json[QString("typeName")].isNull() && m_type_name_isValid;
}

QString OAIRepresentationContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepresentationContract::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_form_parameters.size() > 0) {
        obj.insert(QString("formParameters"), ::OpenAPI::toJsonValue(m_form_parameters));
    }
    if (m_sample_isSet) {
        obj.insert(QString("sample"), ::OpenAPI::toJsonValue(m_sample));
    }
    if (m_schema_id_isSet) {
        obj.insert(QString("schemaId"), ::OpenAPI::toJsonValue(m_schema_id));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("typeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    return obj;
}

QString OAIRepresentationContract::getContentType() const {
    return m_content_type;
}
void OAIRepresentationContract::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIRepresentationContract::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIRepresentationContract::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QList<OAIParameterContract> OAIRepresentationContract::getFormParameters() const {
    return m_form_parameters;
}
void OAIRepresentationContract::setFormParameters(const QList<OAIParameterContract> &form_parameters) {
    m_form_parameters = form_parameters;
    m_form_parameters_isSet = true;
}

bool OAIRepresentationContract::is_form_parameters_Set() const{
    return m_form_parameters_isSet;
}

bool OAIRepresentationContract::is_form_parameters_Valid() const{
    return m_form_parameters_isValid;
}

QString OAIRepresentationContract::getSample() const {
    return m_sample;
}
void OAIRepresentationContract::setSample(const QString &sample) {
    m_sample = sample;
    m_sample_isSet = true;
}

bool OAIRepresentationContract::is_sample_Set() const{
    return m_sample_isSet;
}

bool OAIRepresentationContract::is_sample_Valid() const{
    return m_sample_isValid;
}

QString OAIRepresentationContract::getSchemaId() const {
    return m_schema_id;
}
void OAIRepresentationContract::setSchemaId(const QString &schema_id) {
    m_schema_id = schema_id;
    m_schema_id_isSet = true;
}

bool OAIRepresentationContract::is_schema_id_Set() const{
    return m_schema_id_isSet;
}

bool OAIRepresentationContract::is_schema_id_Valid() const{
    return m_schema_id_isValid;
}

QString OAIRepresentationContract::getTypeName() const {
    return m_type_name;
}
void OAIRepresentationContract::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIRepresentationContract::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIRepresentationContract::is_type_name_Valid() const{
    return m_type_name_isValid;
}

bool OAIRepresentationContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepresentationContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_type_isValid && true;
}

} // namespace OpenAPI
