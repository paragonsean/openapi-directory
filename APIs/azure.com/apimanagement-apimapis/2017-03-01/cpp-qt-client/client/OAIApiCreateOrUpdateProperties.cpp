/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiCreateOrUpdateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiCreateOrUpdateProperties::OAIApiCreateOrUpdateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiCreateOrUpdateProperties::OAIApiCreateOrUpdateProperties() {
    this->initializeModel();
}

OAIApiCreateOrUpdateProperties::~OAIApiCreateOrUpdateProperties() {}

void OAIApiCreateOrUpdateProperties::initializeModel() {

    m_content_format_isSet = false;
    m_content_format_isValid = false;

    m_content_value_isSet = false;
    m_content_value_isValid = false;

    m_wsdl_selector_isSet = false;
    m_wsdl_selector_isValid = false;

    m_api_version_set_isSet = false;
    m_api_version_set_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_service_url_isSet = false;
    m_service_url_isValid = false;

    m_api_revision_isSet = false;
    m_api_revision_isValid = false;

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_api_version_set_id_isSet = false;
    m_api_version_set_id_isValid = false;

    m_authentication_settings_isSet = false;
    m_authentication_settings_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_current_isSet = false;
    m_is_current_isValid = false;

    m_is_online_isSet = false;
    m_is_online_isValid = false;

    m_subscription_key_parameter_names_isSet = false;
    m_subscription_key_parameter_names_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIApiCreateOrUpdateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiCreateOrUpdateProperties::fromJsonObject(QJsonObject json) {

    m_content_format_isValid = ::OpenAPI::fromJsonValue(m_content_format, json[QString("contentFormat")]);
    m_content_format_isSet = !json[QString("contentFormat")].isNull() && m_content_format_isValid;

    m_content_value_isValid = ::OpenAPI::fromJsonValue(m_content_value, json[QString("contentValue")]);
    m_content_value_isSet = !json[QString("contentValue")].isNull() && m_content_value_isValid;

    m_wsdl_selector_isValid = ::OpenAPI::fromJsonValue(m_wsdl_selector, json[QString("wsdlSelector")]);
    m_wsdl_selector_isSet = !json[QString("wsdlSelector")].isNull() && m_wsdl_selector_isValid;

    m_api_version_set_isValid = ::OpenAPI::fromJsonValue(m_api_version_set, json[QString("apiVersionSet")]);
    m_api_version_set_isSet = !json[QString("apiVersionSet")].isNull() && m_api_version_set_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("protocols")]);
    m_protocols_isSet = !json[QString("protocols")].isNull() && m_protocols_isValid;

    m_service_url_isValid = ::OpenAPI::fromJsonValue(m_service_url, json[QString("serviceUrl")]);
    m_service_url_isSet = !json[QString("serviceUrl")].isNull() && m_service_url_isValid;

    m_api_revision_isValid = ::OpenAPI::fromJsonValue(m_api_revision, json[QString("apiRevision")]);
    m_api_revision_isSet = !json[QString("apiRevision")].isNull() && m_api_revision_isValid;

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("apiVersion")]);
    m_api_version_isSet = !json[QString("apiVersion")].isNull() && m_api_version_isValid;

    m_api_version_set_id_isValid = ::OpenAPI::fromJsonValue(m_api_version_set_id, json[QString("apiVersionSetId")]);
    m_api_version_set_id_isSet = !json[QString("apiVersionSetId")].isNull() && m_api_version_set_id_isValid;

    m_authentication_settings_isValid = ::OpenAPI::fromJsonValue(m_authentication_settings, json[QString("authenticationSettings")]);
    m_authentication_settings_isSet = !json[QString("authenticationSettings")].isNull() && m_authentication_settings_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_current_isValid = ::OpenAPI::fromJsonValue(m_is_current, json[QString("isCurrent")]);
    m_is_current_isSet = !json[QString("isCurrent")].isNull() && m_is_current_isValid;

    m_is_online_isValid = ::OpenAPI::fromJsonValue(m_is_online, json[QString("isOnline")]);
    m_is_online_isSet = !json[QString("isOnline")].isNull() && m_is_online_isValid;

    m_subscription_key_parameter_names_isValid = ::OpenAPI::fromJsonValue(m_subscription_key_parameter_names, json[QString("subscriptionKeyParameterNames")]);
    m_subscription_key_parameter_names_isSet = !json[QString("subscriptionKeyParameterNames")].isNull() && m_subscription_key_parameter_names_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIApiCreateOrUpdateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiCreateOrUpdateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_content_format_isSet) {
        obj.insert(QString("contentFormat"), ::OpenAPI::toJsonValue(m_content_format));
    }
    if (m_content_value_isSet) {
        obj.insert(QString("contentValue"), ::OpenAPI::toJsonValue(m_content_value));
    }
    if (m_wsdl_selector.isSet()) {
        obj.insert(QString("wsdlSelector"), ::OpenAPI::toJsonValue(m_wsdl_selector));
    }
    if (m_api_version_set.isSet()) {
        obj.insert(QString("apiVersionSet"), ::OpenAPI::toJsonValue(m_api_version_set));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_protocols.size() > 0) {
        obj.insert(QString("protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_service_url_isSet) {
        obj.insert(QString("serviceUrl"), ::OpenAPI::toJsonValue(m_service_url));
    }
    if (m_api_revision_isSet) {
        obj.insert(QString("apiRevision"), ::OpenAPI::toJsonValue(m_api_revision));
    }
    if (m_api_version_isSet) {
        obj.insert(QString("apiVersion"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_api_version_set_id_isSet) {
        obj.insert(QString("apiVersionSetId"), ::OpenAPI::toJsonValue(m_api_version_set_id));
    }
    if (m_authentication_settings.isSet()) {
        obj.insert(QString("authenticationSettings"), ::OpenAPI::toJsonValue(m_authentication_settings));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_current_isSet) {
        obj.insert(QString("isCurrent"), ::OpenAPI::toJsonValue(m_is_current));
    }
    if (m_is_online_isSet) {
        obj.insert(QString("isOnline"), ::OpenAPI::toJsonValue(m_is_online));
    }
    if (m_subscription_key_parameter_names.isSet()) {
        obj.insert(QString("subscriptionKeyParameterNames"), ::OpenAPI::toJsonValue(m_subscription_key_parameter_names));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIApiCreateOrUpdateProperties::getContentFormat() const {
    return m_content_format;
}
void OAIApiCreateOrUpdateProperties::setContentFormat(const QString &content_format) {
    m_content_format = content_format;
    m_content_format_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_content_format_Set() const{
    return m_content_format_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_content_format_Valid() const{
    return m_content_format_isValid;
}

QString OAIApiCreateOrUpdateProperties::getContentValue() const {
    return m_content_value;
}
void OAIApiCreateOrUpdateProperties::setContentValue(const QString &content_value) {
    m_content_value = content_value;
    m_content_value_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_content_value_Set() const{
    return m_content_value_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_content_value_Valid() const{
    return m_content_value_isValid;
}

OAIObject OAIApiCreateOrUpdateProperties::getWsdlSelector() const {
    return m_wsdl_selector;
}
void OAIApiCreateOrUpdateProperties::setWsdlSelector(const OAIObject &wsdl_selector) {
    m_wsdl_selector = wsdl_selector;
    m_wsdl_selector_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_wsdl_selector_Set() const{
    return m_wsdl_selector_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_wsdl_selector_Valid() const{
    return m_wsdl_selector_isValid;
}

OAIObject OAIApiCreateOrUpdateProperties::getApiVersionSet() const {
    return m_api_version_set;
}
void OAIApiCreateOrUpdateProperties::setApiVersionSet(const OAIObject &api_version_set) {
    m_api_version_set = api_version_set;
    m_api_version_set_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_api_version_set_Set() const{
    return m_api_version_set_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_api_version_set_Valid() const{
    return m_api_version_set_isValid;
}

QString OAIApiCreateOrUpdateProperties::getDisplayName() const {
    return m_display_name;
}
void OAIApiCreateOrUpdateProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIApiCreateOrUpdateProperties::getPath() const {
    return m_path;
}
void OAIApiCreateOrUpdateProperties::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_path_Set() const{
    return m_path_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_path_Valid() const{
    return m_path_isValid;
}

QList<QString> OAIApiCreateOrUpdateProperties::getProtocols() const {
    return m_protocols;
}
void OAIApiCreateOrUpdateProperties::setProtocols(const QList<QString> &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_protocols_Valid() const{
    return m_protocols_isValid;
}

QString OAIApiCreateOrUpdateProperties::getServiceUrl() const {
    return m_service_url;
}
void OAIApiCreateOrUpdateProperties::setServiceUrl(const QString &service_url) {
    m_service_url = service_url;
    m_service_url_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_service_url_Set() const{
    return m_service_url_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_service_url_Valid() const{
    return m_service_url_isValid;
}

QString OAIApiCreateOrUpdateProperties::getApiRevision() const {
    return m_api_revision;
}
void OAIApiCreateOrUpdateProperties::setApiRevision(const QString &api_revision) {
    m_api_revision = api_revision;
    m_api_revision_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_api_revision_Set() const{
    return m_api_revision_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_api_revision_Valid() const{
    return m_api_revision_isValid;
}

QString OAIApiCreateOrUpdateProperties::getApiVersion() const {
    return m_api_version;
}
void OAIApiCreateOrUpdateProperties::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIApiCreateOrUpdateProperties::getApiVersionSetId() const {
    return m_api_version_set_id;
}
void OAIApiCreateOrUpdateProperties::setApiVersionSetId(const QString &api_version_set_id) {
    m_api_version_set_id = api_version_set_id;
    m_api_version_set_id_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_api_version_set_id_Set() const{
    return m_api_version_set_id_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_api_version_set_id_Valid() const{
    return m_api_version_set_id_isValid;
}

OAIApiContractProperties_allOf_authenticationSettings OAIApiCreateOrUpdateProperties::getAuthenticationSettings() const {
    return m_authentication_settings;
}
void OAIApiCreateOrUpdateProperties::setAuthenticationSettings(const OAIApiContractProperties_allOf_authenticationSettings &authentication_settings) {
    m_authentication_settings = authentication_settings;
    m_authentication_settings_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_authentication_settings_Set() const{
    return m_authentication_settings_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_authentication_settings_Valid() const{
    return m_authentication_settings_isValid;
}

QString OAIApiCreateOrUpdateProperties::getDescription() const {
    return m_description;
}
void OAIApiCreateOrUpdateProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIApiCreateOrUpdateProperties::isIsCurrent() const {
    return m_is_current;
}
void OAIApiCreateOrUpdateProperties::setIsCurrent(const bool &is_current) {
    m_is_current = is_current;
    m_is_current_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_is_current_Set() const{
    return m_is_current_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_is_current_Valid() const{
    return m_is_current_isValid;
}

bool OAIApiCreateOrUpdateProperties::isIsOnline() const {
    return m_is_online;
}
void OAIApiCreateOrUpdateProperties::setIsOnline(const bool &is_online) {
    m_is_online = is_online;
    m_is_online_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_is_online_Set() const{
    return m_is_online_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_is_online_Valid() const{
    return m_is_online_isValid;
}

OAIApiContractProperties_allOf_subscriptionKeyParameterNames OAIApiCreateOrUpdateProperties::getSubscriptionKeyParameterNames() const {
    return m_subscription_key_parameter_names;
}
void OAIApiCreateOrUpdateProperties::setSubscriptionKeyParameterNames(const OAIApiContractProperties_allOf_subscriptionKeyParameterNames &subscription_key_parameter_names) {
    m_subscription_key_parameter_names = subscription_key_parameter_names;
    m_subscription_key_parameter_names_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_subscription_key_parameter_names_Set() const{
    return m_subscription_key_parameter_names_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_subscription_key_parameter_names_Valid() const{
    return m_subscription_key_parameter_names_isValid;
}

QString OAIApiCreateOrUpdateProperties::getType() const {
    return m_type;
}
void OAIApiCreateOrUpdateProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIApiCreateOrUpdateProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIApiCreateOrUpdateProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIApiCreateOrUpdateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wsdl_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_key_parameter_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiCreateOrUpdateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_path_isValid && true;
}

} // namespace OpenAPI
