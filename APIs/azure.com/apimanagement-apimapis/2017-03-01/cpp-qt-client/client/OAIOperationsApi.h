/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOperationsApi_H
#define OAI_OAIOperationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_ListByService_default_response.h"
#include "OAIOperationCollection.h"
#include "OAIOperationContract.h"
#include "OAIOperationUpdateContract.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOperationsApi : public QObject {
    Q_OBJECT

public:
    OAIOperationsApi(const int timeOut = 0);
    ~OAIOperationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIOperationContract [required]
    */
    virtual void apiOperationCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &operation_id, const QString &api_version, const QString &subscription_id, const OAIOperationContract &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiOperationDelete(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &operation_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiOperationGet(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &operation_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiOperationGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &operation_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void apiOperationListByApi(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIOperationUpdateContract [required]
    */
    virtual void apiOperationUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &operation_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIOperationUpdateContract &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiOperationCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void apiOperationDeleteCallback(OAIHttpRequestWorker *worker);
    void apiOperationGetCallback(OAIHttpRequestWorker *worker);
    void apiOperationGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void apiOperationListByApiCallback(OAIHttpRequestWorker *worker);
    void apiOperationUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiOperationCreateOrUpdateSignal(OAIOperationContract summary);
    void apiOperationDeleteSignal();
    void apiOperationGetSignal(OAIOperationContract summary);
    void apiOperationGetEntityTagSignal();
    void apiOperationListByApiSignal(OAIOperationCollection summary);
    void apiOperationUpdateSignal();


    void apiOperationCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOperationContract summary);
    void apiOperationDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiOperationGetSignalFull(OAIHttpRequestWorker *worker, OAIOperationContract summary);
    void apiOperationGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void apiOperationListByApiSignalFull(OAIHttpRequestWorker *worker, OAIOperationCollection summary);
    void apiOperationUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiOperationCreateOrUpdateSignalError() instead")
    void apiOperationCreateOrUpdateSignalE(OAIOperationContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationCreateOrUpdateSignalError(OAIOperationContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationDeleteSignalError() instead")
    void apiOperationDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationGetSignalError() instead")
    void apiOperationGetSignalE(OAIOperationContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationGetSignalError(OAIOperationContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationGetEntityTagSignalError() instead")
    void apiOperationGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationListByApiSignalError() instead")
    void apiOperationListByApiSignalE(OAIOperationCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationListByApiSignalError(OAIOperationCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationUpdateSignalError() instead")
    void apiOperationUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiOperationCreateOrUpdateSignalErrorFull() instead")
    void apiOperationCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationDeleteSignalErrorFull() instead")
    void apiOperationDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationGetSignalErrorFull() instead")
    void apiOperationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationGetEntityTagSignalErrorFull() instead")
    void apiOperationGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationListByApiSignalErrorFull() instead")
    void apiOperationListByApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationListByApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationUpdateSignalErrorFull() instead")
    void apiOperationUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
