/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApiDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties.h
 *
 * Sampling settings for an ApplicationInsights logger.
 */

#ifndef OAIApiDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties_H
#define OAIApiDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIApiDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties : public OAIObject {
public:
    OAIApiDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties();
    OAIApiDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties(QString json);
    ~OAIApiDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEvaluationInterval() const;
    void setEvaluationInterval(const QString &evaluation_interval);
    bool is_evaluation_interval_Set() const;
    bool is_evaluation_interval_Valid() const;

    double getInitialPercentage() const;
    void setInitialPercentage(const double &initial_percentage);
    bool is_initial_percentage_Set() const;
    bool is_initial_percentage_Valid() const;

    double getMaxPercentage() const;
    void setMaxPercentage(const double &max_percentage);
    bool is_max_percentage_Set() const;
    bool is_max_percentage_Valid() const;

    qint32 getMaxTelemetryItemsPerSecond() const;
    void setMaxTelemetryItemsPerSecond(const qint32 &max_telemetry_items_per_second);
    bool is_max_telemetry_items_per_second_Set() const;
    bool is_max_telemetry_items_per_second_Valid() const;

    double getMinPercentage() const;
    void setMinPercentage(const double &min_percentage);
    bool is_min_percentage_Set() const;
    bool is_min_percentage_Valid() const;

    double getMovingAverageRatio() const;
    void setMovingAverageRatio(const double &moving_average_ratio);
    bool is_moving_average_ratio_Set() const;
    bool is_moving_average_ratio_Valid() const;

    double getPercentage() const;
    void setPercentage(const double &percentage);
    bool is_percentage_Set() const;
    bool is_percentage_Valid() const;

    QString getPercentageDecreaseTimeout() const;
    void setPercentageDecreaseTimeout(const QString &percentage_decrease_timeout);
    bool is_percentage_decrease_timeout_Set() const;
    bool is_percentage_decrease_timeout_Valid() const;

    QString getPercentageIncreaseTimeout() const;
    void setPercentageIncreaseTimeout(const QString &percentage_increase_timeout);
    bool is_percentage_increase_timeout_Set() const;
    bool is_percentage_increase_timeout_Valid() const;

    QString getSamplingType() const;
    void setSamplingType(const QString &sampling_type);
    bool is_sampling_type_Set() const;
    bool is_sampling_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_evaluation_interval;
    bool m_evaluation_interval_isSet;
    bool m_evaluation_interval_isValid;

    double m_initial_percentage;
    bool m_initial_percentage_isSet;
    bool m_initial_percentage_isValid;

    double m_max_percentage;
    bool m_max_percentage_isSet;
    bool m_max_percentage_isValid;

    qint32 m_max_telemetry_items_per_second;
    bool m_max_telemetry_items_per_second_isSet;
    bool m_max_telemetry_items_per_second_isValid;

    double m_min_percentage;
    bool m_min_percentage_isSet;
    bool m_min_percentage_isValid;

    double m_moving_average_ratio;
    bool m_moving_average_ratio_isSet;
    bool m_moving_average_ratio_isValid;

    double m_percentage;
    bool m_percentage_isSet;
    bool m_percentage_isValid;

    QString m_percentage_decrease_timeout;
    bool m_percentage_decrease_timeout_isSet;
    bool m_percentage_decrease_timeout_isValid;

    QString m_percentage_increase_timeout;
    bool m_percentage_increase_timeout_isSet;
    bool m_percentage_increase_timeout_isValid;

    QString m_sampling_type;
    bool m_sampling_type_isSet;
    bool m_sampling_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApiDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties)

#endif // OAIApiDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties_H
