/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiDiagnosticLoggersApi_H
#define OAI_OAIApiDiagnosticLoggersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiDiagnosticLogger_CreateOrUpdate_200_response.h"
#include "OAIApiDiagnosticLogger_ListByService_200_response.h"
#include "OAIApi_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiDiagnosticLoggersApi : public QObject {
    Q_OBJECT

public:
    OAIApiDiagnosticLoggersApi(const int timeOut = 0);
    ~OAIApiDiagnosticLoggersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  loggerid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiDiagnosticLoggerCheckEntityExists(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &diagnostic_id, const QString &loggerid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  loggerid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiDiagnosticLoggerCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &diagnostic_id, const QString &loggerid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  loggerid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiDiagnosticLoggerDelete(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &diagnostic_id, const QString &loggerid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void apiDiagnosticLoggerListByService(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &api_version, const QString &subscription_id, const QString &diagnostic_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiDiagnosticLoggerCheckEntityExistsCallback(OAIHttpRequestWorker *worker);
    void apiDiagnosticLoggerCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void apiDiagnosticLoggerDeleteCallback(OAIHttpRequestWorker *worker);
    void apiDiagnosticLoggerListByServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiDiagnosticLoggerCheckEntityExistsSignal();
    void apiDiagnosticLoggerCreateOrUpdateSignal(OAIApiDiagnosticLogger_CreateOrUpdate_200_response summary);
    void apiDiagnosticLoggerDeleteSignal();
    void apiDiagnosticLoggerListByServiceSignal(OAIApiDiagnosticLogger_ListByService_200_response summary);


    void apiDiagnosticLoggerCheckEntityExistsSignalFull(OAIHttpRequestWorker *worker);
    void apiDiagnosticLoggerCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiDiagnosticLogger_CreateOrUpdate_200_response summary);
    void apiDiagnosticLoggerDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiDiagnosticLoggerListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIApiDiagnosticLogger_ListByService_200_response summary);

    Q_DECL_DEPRECATED_X("Use apiDiagnosticLoggerCheckEntityExistsSignalError() instead")
    void apiDiagnosticLoggerCheckEntityExistsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiagnosticLoggerCheckEntityExistsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiagnosticLoggerCreateOrUpdateSignalError() instead")
    void apiDiagnosticLoggerCreateOrUpdateSignalE(OAIApiDiagnosticLogger_CreateOrUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiagnosticLoggerCreateOrUpdateSignalError(OAIApiDiagnosticLogger_CreateOrUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiagnosticLoggerDeleteSignalError() instead")
    void apiDiagnosticLoggerDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiagnosticLoggerDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiagnosticLoggerListByServiceSignalError() instead")
    void apiDiagnosticLoggerListByServiceSignalE(OAIApiDiagnosticLogger_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiagnosticLoggerListByServiceSignalError(OAIApiDiagnosticLogger_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiDiagnosticLoggerCheckEntityExistsSignalErrorFull() instead")
    void apiDiagnosticLoggerCheckEntityExistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiagnosticLoggerCheckEntityExistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiagnosticLoggerCreateOrUpdateSignalErrorFull() instead")
    void apiDiagnosticLoggerCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiagnosticLoggerCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiagnosticLoggerDeleteSignalErrorFull() instead")
    void apiDiagnosticLoggerDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiagnosticLoggerDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiDiagnosticLoggerListByServiceSignalErrorFull() instead")
    void apiDiagnosticLoggerListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiDiagnosticLoggerListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
