/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationUpdateContractProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationUpdateContractProperties::OAIOperationUpdateContractProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationUpdateContractProperties::OAIOperationUpdateContractProperties() {
    this->initializeModel();
}

OAIOperationUpdateContractProperties::~OAIOperationUpdateContractProperties() {}

void OAIOperationUpdateContractProperties::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_url_template_isSet = false;
    m_url_template_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_responses_isSet = false;
    m_responses_isValid = false;

    m_template_parameters_isSet = false;
    m_template_parameters_isValid = false;
}

void OAIOperationUpdateContractProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationUpdateContractProperties::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_url_template_isValid = ::OpenAPI::fromJsonValue(m_url_template, json[QString("urlTemplate")]);
    m_url_template_isSet = !json[QString("urlTemplate")].isNull() && m_url_template_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_responses_isValid = ::OpenAPI::fromJsonValue(m_responses, json[QString("responses")]);
    m_responses_isSet = !json[QString("responses")].isNull() && m_responses_isValid;

    m_template_parameters_isValid = ::OpenAPI::fromJsonValue(m_template_parameters, json[QString("templateParameters")]);
    m_template_parameters_isSet = !json[QString("templateParameters")].isNull() && m_template_parameters_isValid;
}

QString OAIOperationUpdateContractProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationUpdateContractProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_url_template_isSet) {
        obj.insert(QString("urlTemplate"), ::OpenAPI::toJsonValue(m_url_template));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_policies_isSet) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_responses.size() > 0) {
        obj.insert(QString("responses"), ::OpenAPI::toJsonValue(m_responses));
    }
    if (m_template_parameters.size() > 0) {
        obj.insert(QString("templateParameters"), ::OpenAPI::toJsonValue(m_template_parameters));
    }
    return obj;
}

QString OAIOperationUpdateContractProperties::getDisplayName() const {
    return m_display_name;
}
void OAIOperationUpdateContractProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIOperationUpdateContractProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIOperationUpdateContractProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIOperationUpdateContractProperties::getMethod() const {
    return m_method;
}
void OAIOperationUpdateContractProperties::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIOperationUpdateContractProperties::is_method_Set() const{
    return m_method_isSet;
}

bool OAIOperationUpdateContractProperties::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIOperationUpdateContractProperties::getUrlTemplate() const {
    return m_url_template;
}
void OAIOperationUpdateContractProperties::setUrlTemplate(const QString &url_template) {
    m_url_template = url_template;
    m_url_template_isSet = true;
}

bool OAIOperationUpdateContractProperties::is_url_template_Set() const{
    return m_url_template_isSet;
}

bool OAIOperationUpdateContractProperties::is_url_template_Valid() const{
    return m_url_template_isValid;
}

QString OAIOperationUpdateContractProperties::getDescription() const {
    return m_description;
}
void OAIOperationUpdateContractProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOperationUpdateContractProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOperationUpdateContractProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOperationUpdateContractProperties::getPolicies() const {
    return m_policies;
}
void OAIOperationUpdateContractProperties::setPolicies(const QString &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIOperationUpdateContractProperties::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIOperationUpdateContractProperties::is_policies_Valid() const{
    return m_policies_isValid;
}

OAIRequestContract OAIOperationUpdateContractProperties::getRequest() const {
    return m_request;
}
void OAIOperationUpdateContractProperties::setRequest(const OAIRequestContract &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIOperationUpdateContractProperties::is_request_Set() const{
    return m_request_isSet;
}

bool OAIOperationUpdateContractProperties::is_request_Valid() const{
    return m_request_isValid;
}

QList<OAIResponseContract> OAIOperationUpdateContractProperties::getResponses() const {
    return m_responses;
}
void OAIOperationUpdateContractProperties::setResponses(const QList<OAIResponseContract> &responses) {
    m_responses = responses;
    m_responses_isSet = true;
}

bool OAIOperationUpdateContractProperties::is_responses_Set() const{
    return m_responses_isSet;
}

bool OAIOperationUpdateContractProperties::is_responses_Valid() const{
    return m_responses_isValid;
}

QList<OAIParameterContract> OAIOperationUpdateContractProperties::getTemplateParameters() const {
    return m_template_parameters;
}
void OAIOperationUpdateContractProperties::setTemplateParameters(const QList<OAIParameterContract> &template_parameters) {
    m_template_parameters = template_parameters;
    m_template_parameters_isSet = true;
}

bool OAIOperationUpdateContractProperties::is_template_parameters_Set() const{
    return m_template_parameters_isSet;
}

bool OAIOperationUpdateContractProperties::is_template_parameters_Valid() const{
    return m_template_parameters_isValid;
}

bool OAIOperationUpdateContractProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_responses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationUpdateContractProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
