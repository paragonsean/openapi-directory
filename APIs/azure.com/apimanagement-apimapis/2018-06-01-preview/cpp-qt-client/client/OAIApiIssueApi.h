/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiIssueApi_H
#define OAI_OAIApiIssueApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiIssue_Get_200_response.h"
#include "OAIApiIssue_ListByService_200_response.h"
#include "OAIApiIssue_Update_request.h"
#include "OAIApi_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiIssueApi : public QObject {
    Q_OBJECT

public:
    OAIApiIssueApi(const int timeOut = 0);
    ~OAIApiIssueApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiIssue_Get_200_response [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void apiIssueCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &issue_id, const QString &api_version, const QString &subscription_id, const OAIApiIssue_Get_200_response &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiIssueDelete(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &issue_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand_comments_attachments bool [optional]
    */
    virtual void apiIssueGet(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &issue_id, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<bool> &expand_comments_attachments = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiIssueGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &issue_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  expand_comments_attachments bool [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void apiIssueListByService(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &expand_comments_attachments = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiIssue_Update_request [required]
    */
    virtual void apiIssueUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &issue_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIApiIssue_Update_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiIssueCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void apiIssueDeleteCallback(OAIHttpRequestWorker *worker);
    void apiIssueGetCallback(OAIHttpRequestWorker *worker);
    void apiIssueGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void apiIssueListByServiceCallback(OAIHttpRequestWorker *worker);
    void apiIssueUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiIssueCreateOrUpdateSignal(OAIApiIssue_Get_200_response summary);
    void apiIssueDeleteSignal();
    void apiIssueGetSignal(OAIApiIssue_Get_200_response summary);
    void apiIssueGetEntityTagSignal();
    void apiIssueListByServiceSignal(OAIApiIssue_ListByService_200_response summary);
    void apiIssueUpdateSignal();


    void apiIssueCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiIssue_Get_200_response summary);
    void apiIssueDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiIssueGetSignalFull(OAIHttpRequestWorker *worker, OAIApiIssue_Get_200_response summary);
    void apiIssueGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void apiIssueListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIApiIssue_ListByService_200_response summary);
    void apiIssueUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiIssueCreateOrUpdateSignalError() instead")
    void apiIssueCreateOrUpdateSignalE(OAIApiIssue_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCreateOrUpdateSignalError(OAIApiIssue_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueDeleteSignalError() instead")
    void apiIssueDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueGetSignalError() instead")
    void apiIssueGetSignalE(OAIApiIssue_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueGetSignalError(OAIApiIssue_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueGetEntityTagSignalError() instead")
    void apiIssueGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueListByServiceSignalError() instead")
    void apiIssueListByServiceSignalE(OAIApiIssue_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueListByServiceSignalError(OAIApiIssue_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueUpdateSignalError() instead")
    void apiIssueUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiIssueCreateOrUpdateSignalErrorFull() instead")
    void apiIssueCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueDeleteSignalErrorFull() instead")
    void apiIssueDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueGetSignalErrorFull() instead")
    void apiIssueGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueGetEntityTagSignalErrorFull() instead")
    void apiIssueGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueListByServiceSignalErrorFull() instead")
    void apiIssueListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiIssueUpdateSignalErrorFull() instead")
    void apiIssueUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiIssueUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
