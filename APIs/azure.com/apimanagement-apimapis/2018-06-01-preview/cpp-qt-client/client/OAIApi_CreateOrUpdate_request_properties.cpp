/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi_CreateOrUpdate_request_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi_CreateOrUpdate_request_properties::OAIApi_CreateOrUpdate_request_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi_CreateOrUpdate_request_properties::OAIApi_CreateOrUpdate_request_properties() {
    this->initializeModel();
}

OAIApi_CreateOrUpdate_request_properties::~OAIApi_CreateOrUpdate_request_properties() {}

void OAIApi_CreateOrUpdate_request_properties::initializeModel() {

    m_api_type_isSet = false;
    m_api_type_isValid = false;

    m_content_format_isSet = false;
    m_content_format_isValid = false;

    m_content_value_isSet = false;
    m_content_value_isValid = false;

    m_wsdl_selector_isSet = false;
    m_wsdl_selector_isValid = false;
}

void OAIApi_CreateOrUpdate_request_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi_CreateOrUpdate_request_properties::fromJsonObject(QJsonObject json) {

    m_api_type_isValid = ::OpenAPI::fromJsonValue(m_api_type, json[QString("apiType")]);
    m_api_type_isSet = !json[QString("apiType")].isNull() && m_api_type_isValid;

    m_content_format_isValid = ::OpenAPI::fromJsonValue(m_content_format, json[QString("contentFormat")]);
    m_content_format_isSet = !json[QString("contentFormat")].isNull() && m_content_format_isValid;

    m_content_value_isValid = ::OpenAPI::fromJsonValue(m_content_value, json[QString("contentValue")]);
    m_content_value_isSet = !json[QString("contentValue")].isNull() && m_content_value_isValid;

    m_wsdl_selector_isValid = ::OpenAPI::fromJsonValue(m_wsdl_selector, json[QString("wsdlSelector")]);
    m_wsdl_selector_isSet = !json[QString("wsdlSelector")].isNull() && m_wsdl_selector_isValid;
}

QString OAIApi_CreateOrUpdate_request_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi_CreateOrUpdate_request_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_api_type_isSet) {
        obj.insert(QString("apiType"), ::OpenAPI::toJsonValue(m_api_type));
    }
    if (m_content_format_isSet) {
        obj.insert(QString("contentFormat"), ::OpenAPI::toJsonValue(m_content_format));
    }
    if (m_content_value_isSet) {
        obj.insert(QString("contentValue"), ::OpenAPI::toJsonValue(m_content_value));
    }
    if (m_wsdl_selector.isSet()) {
        obj.insert(QString("wsdlSelector"), ::OpenAPI::toJsonValue(m_wsdl_selector));
    }
    return obj;
}

QString OAIApi_CreateOrUpdate_request_properties::getApiType() const {
    return m_api_type;
}
void OAIApi_CreateOrUpdate_request_properties::setApiType(const QString &api_type) {
    m_api_type = api_type;
    m_api_type_isSet = true;
}

bool OAIApi_CreateOrUpdate_request_properties::is_api_type_Set() const{
    return m_api_type_isSet;
}

bool OAIApi_CreateOrUpdate_request_properties::is_api_type_Valid() const{
    return m_api_type_isValid;
}

QString OAIApi_CreateOrUpdate_request_properties::getContentFormat() const {
    return m_content_format;
}
void OAIApi_CreateOrUpdate_request_properties::setContentFormat(const QString &content_format) {
    m_content_format = content_format;
    m_content_format_isSet = true;
}

bool OAIApi_CreateOrUpdate_request_properties::is_content_format_Set() const{
    return m_content_format_isSet;
}

bool OAIApi_CreateOrUpdate_request_properties::is_content_format_Valid() const{
    return m_content_format_isValid;
}

QString OAIApi_CreateOrUpdate_request_properties::getContentValue() const {
    return m_content_value;
}
void OAIApi_CreateOrUpdate_request_properties::setContentValue(const QString &content_value) {
    m_content_value = content_value;
    m_content_value_isSet = true;
}

bool OAIApi_CreateOrUpdate_request_properties::is_content_value_Set() const{
    return m_content_value_isSet;
}

bool OAIApi_CreateOrUpdate_request_properties::is_content_value_Valid() const{
    return m_content_value_isValid;
}

OAIApi_CreateOrUpdate_request_properties_wsdlSelector OAIApi_CreateOrUpdate_request_properties::getWsdlSelector() const {
    return m_wsdl_selector;
}
void OAIApi_CreateOrUpdate_request_properties::setWsdlSelector(const OAIApi_CreateOrUpdate_request_properties_wsdlSelector &wsdl_selector) {
    m_wsdl_selector = wsdl_selector;
    m_wsdl_selector_isSet = true;
}

bool OAIApi_CreateOrUpdate_request_properties::is_wsdl_selector_Set() const{
    return m_wsdl_selector_isSet;
}

bool OAIApi_CreateOrUpdate_request_properties::is_wsdl_selector_Valid() const{
    return m_wsdl_selector_isValid;
}

bool OAIApi_CreateOrUpdate_request_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wsdl_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi_CreateOrUpdate_request_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
