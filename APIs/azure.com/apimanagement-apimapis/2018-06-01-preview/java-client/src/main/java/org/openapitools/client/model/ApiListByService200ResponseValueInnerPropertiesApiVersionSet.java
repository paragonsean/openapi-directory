/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An API Version Set contains the common configuration for a set of API Versions relating 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:37.783793-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiListByService200ResponseValueInnerPropertiesApiVersionSet {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_VERSION_HEADER_NAME = "versionHeaderName";
  @SerializedName(SERIALIZED_NAME_VERSION_HEADER_NAME)
  private String versionHeaderName;

  public static final String SERIALIZED_NAME_VERSION_QUERY_NAME = "versionQueryName";
  @SerializedName(SERIALIZED_NAME_VERSION_QUERY_NAME)
  private String versionQueryName;

  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   */
  @JsonAdapter(VersioningSchemeEnum.Adapter.class)
  public enum VersioningSchemeEnum {
    SEGMENT("Segment"),
    
    QUERY("Query"),
    
    HEADER("Header");

    private String value;

    VersioningSchemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersioningSchemeEnum fromValue(String value) {
      for (VersioningSchemeEnum b : VersioningSchemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersioningSchemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersioningSchemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersioningSchemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersioningSchemeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VersioningSchemeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSIONING_SCHEME = "versioningScheme";
  @SerializedName(SERIALIZED_NAME_VERSIONING_SCHEME)
  private VersioningSchemeEnum versioningScheme;

  public ApiListByService200ResponseValueInnerPropertiesApiVersionSet() {
  }

  public ApiListByService200ResponseValueInnerPropertiesApiVersionSet description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of API Version Set.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApiListByService200ResponseValueInnerPropertiesApiVersionSet id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier for existing API Version Set. Omit this value to create a new Version Set.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ApiListByService200ResponseValueInnerPropertiesApiVersionSet versionHeaderName(String versionHeaderName) {
    this.versionHeaderName = versionHeaderName;
    return this;
  }

  /**
   * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to &#x60;header&#x60;.
   * @return versionHeaderName
   */
  @javax.annotation.Nullable
  public String getVersionHeaderName() {
    return versionHeaderName;
  }

  public void setVersionHeaderName(String versionHeaderName) {
    this.versionHeaderName = versionHeaderName;
  }


  public ApiListByService200ResponseValueInnerPropertiesApiVersionSet versionQueryName(String versionQueryName) {
    this.versionQueryName = versionQueryName;
    return this;
  }

  /**
   * Name of query parameter that indicates the API Version if versioningScheme is set to &#x60;query&#x60;.
   * @return versionQueryName
   */
  @javax.annotation.Nullable
  public String getVersionQueryName() {
    return versionQueryName;
  }

  public void setVersionQueryName(String versionQueryName) {
    this.versionQueryName = versionQueryName;
  }


  public ApiListByService200ResponseValueInnerPropertiesApiVersionSet versioningScheme(VersioningSchemeEnum versioningScheme) {
    this.versioningScheme = versioningScheme;
    return this;
  }

  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   * @return versioningScheme
   */
  @javax.annotation.Nullable
  public VersioningSchemeEnum getVersioningScheme() {
    return versioningScheme;
  }

  public void setVersioningScheme(VersioningSchemeEnum versioningScheme) {
    this.versioningScheme = versioningScheme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiListByService200ResponseValueInnerPropertiesApiVersionSet apiListByService200ResponseValueInnerPropertiesApiVersionSet = (ApiListByService200ResponseValueInnerPropertiesApiVersionSet) o;
    return Objects.equals(this.description, apiListByService200ResponseValueInnerPropertiesApiVersionSet.description) &&
        Objects.equals(this.id, apiListByService200ResponseValueInnerPropertiesApiVersionSet.id) &&
        Objects.equals(this.versionHeaderName, apiListByService200ResponseValueInnerPropertiesApiVersionSet.versionHeaderName) &&
        Objects.equals(this.versionQueryName, apiListByService200ResponseValueInnerPropertiesApiVersionSet.versionQueryName) &&
        Objects.equals(this.versioningScheme, apiListByService200ResponseValueInnerPropertiesApiVersionSet.versioningScheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, versionHeaderName, versionQueryName, versioningScheme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiListByService200ResponseValueInnerPropertiesApiVersionSet {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    versionHeaderName: ").append(toIndentedString(versionHeaderName)).append("\n");
    sb.append("    versionQueryName: ").append(toIndentedString(versionQueryName)).append("\n");
    sb.append("    versioningScheme: ").append(toIndentedString(versioningScheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("versionHeaderName");
    openapiFields.add("versionQueryName");
    openapiFields.add("versioningScheme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiListByService200ResponseValueInnerPropertiesApiVersionSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiListByService200ResponseValueInnerPropertiesApiVersionSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiListByService200ResponseValueInnerPropertiesApiVersionSet is not found in the empty JSON string", ApiListByService200ResponseValueInnerPropertiesApiVersionSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiListByService200ResponseValueInnerPropertiesApiVersionSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiListByService200ResponseValueInnerPropertiesApiVersionSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("versionHeaderName") != null && !jsonObj.get("versionHeaderName").isJsonNull()) && !jsonObj.get("versionHeaderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionHeaderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionHeaderName").toString()));
      }
      if ((jsonObj.get("versionQueryName") != null && !jsonObj.get("versionQueryName").isJsonNull()) && !jsonObj.get("versionQueryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionQueryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionQueryName").toString()));
      }
      if ((jsonObj.get("versioningScheme") != null && !jsonObj.get("versioningScheme").isJsonNull()) && !jsonObj.get("versioningScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versioningScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versioningScheme").toString()));
      }
      // validate the optional field `versioningScheme`
      if (jsonObj.get("versioningScheme") != null && !jsonObj.get("versioningScheme").isJsonNull()) {
        VersioningSchemeEnum.validateJsonElement(jsonObj.get("versioningScheme"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiListByService200ResponseValueInnerPropertiesApiVersionSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiListByService200ResponseValueInnerPropertiesApiVersionSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiListByService200ResponseValueInnerPropertiesApiVersionSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiListByService200ResponseValueInnerPropertiesApiVersionSet.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiListByService200ResponseValueInnerPropertiesApiVersionSet>() {
           @Override
           public void write(JsonWriter out, ApiListByService200ResponseValueInnerPropertiesApiVersionSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiListByService200ResponseValueInnerPropertiesApiVersionSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiListByService200ResponseValueInnerPropertiesApiVersionSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiListByService200ResponseValueInnerPropertiesApiVersionSet
   * @throws IOException if the JSON string is invalid with respect to ApiListByService200ResponseValueInnerPropertiesApiVersionSet
   */
  public static ApiListByService200ResponseValueInnerPropertiesApiVersionSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiListByService200ResponseValueInnerPropertiesApiVersionSet.class);
  }

  /**
   * Convert an instance of ApiListByService200ResponseValueInnerPropertiesApiVersionSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

