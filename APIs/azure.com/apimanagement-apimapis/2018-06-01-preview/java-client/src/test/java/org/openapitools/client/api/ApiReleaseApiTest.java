/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiListByServiceDefaultResponse;
import org.openapitools.client.model.ApiReleaseGet200Response;
import org.openapitools.client.model.ApiReleaseList200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiReleaseApi
 */
@Disabled
public class ApiReleaseApiTest {

    private final ApiReleaseApi api = new ApiReleaseApi();

    /**
     * Creates a new Release for the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseCreateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String releaseId = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApiReleaseGet200Response parameters = null;
        String ifMatch = null;
        ApiReleaseGet200Response response = api.apiReleaseCreate(resourceGroupName, serviceName, apiId, releaseId, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes the specified release in the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String releaseId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.apiReleaseDelete(resourceGroupName, serviceName, apiId, releaseId, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns the details of an API release.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String releaseId = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApiReleaseGet200Response response = api.apiReleaseGet(resourceGroupName, serviceName, apiId, releaseId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns the etag of an API release.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String releaseId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.apiReleaseGetEntityTag(resourceGroupName, serviceName, apiId, releaseId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all releases of an API. An API release is created when making an API Revision current. Releases are also used to rollback to previous revisions. Results will be paged and can be constrained by the $top and $skip parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseListTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        ApiReleaseList200Response response = api.apiReleaseList(resourceGroupName, serviceName, apiId, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates the details of the release of the API specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiReleaseUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String releaseId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApiReleaseGet200Response parameters = null;
        api.apiReleaseUpdate(resourceGroupName, serviceName, apiId, releaseId, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
