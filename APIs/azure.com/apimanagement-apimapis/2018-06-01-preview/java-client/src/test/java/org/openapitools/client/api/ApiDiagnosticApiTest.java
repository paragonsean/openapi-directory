/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiDiagnosticGet200Response;
import org.openapitools.client.model.ApiDiagnosticListByService200Response;
import org.openapitools.client.model.ApiListByServiceDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiDiagnosticApi
 */
@Disabled
public class ApiDiagnosticApiTest {

    private final ApiDiagnosticApi api = new ApiDiagnosticApi();

    /**
     * Creates a new Diagnostic for an API or updates an existing one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDiagnosticCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String diagnosticId = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApiDiagnosticGet200Response parameters = null;
        String ifMatch = null;
        ApiDiagnosticGet200Response response = api.apiDiagnosticCreateOrUpdate(resourceGroupName, serviceName, apiId, diagnosticId, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes the specified Diagnostic from an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDiagnosticDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String diagnosticId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.apiDiagnosticDelete(resourceGroupName, serviceName, apiId, diagnosticId, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the details of the Diagnostic for an API specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDiagnosticGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String diagnosticId = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApiDiagnosticGet200Response response = api.apiDiagnosticGet(resourceGroupName, serviceName, apiId, diagnosticId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the Diagnostic for an API specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDiagnosticGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String diagnosticId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.apiDiagnosticGetEntityTag(resourceGroupName, serviceName, apiId, diagnosticId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all diagnostics of an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDiagnosticListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        ApiDiagnosticListByService200Response response = api.apiDiagnosticListByService(resourceGroupName, serviceName, apiId, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates the details of the Diagnostic for an API specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiDiagnosticUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiId = null;
        String diagnosticId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApiDiagnosticGet200Response parameters = null;
        api.apiDiagnosticUpdate(resourceGroupName, serviceName, apiId, diagnosticId, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
