/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiListByServiceDefaultResponse from '../model/ApiListByServiceDefaultResponse';
import ApiOperationGet200Response from '../model/ApiOperationGet200Response';
import ApiOperationListByApi200Response from '../model/ApiOperationListByApi200Response';
import ApiOperationUpdateRequest from '../model/ApiOperationUpdateRequest';

/**
* ApiOperation service.
* @module api/ApiOperationApi
* @version 2018-06-01-preview
*/
export default class ApiOperationApi {

    /**
    * Constructs a new ApiOperationApi. 
    * @alias module:api/ApiOperationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiOperationCreateOrUpdate operation.
     * @callback module:api/ApiOperationApi~apiOperationCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiOperationGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new operation in the API or updates an existing one.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} serviceName The name of the API Management service.
     * @param {String} apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param {String} operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ApiOperationGet200Response} parameters Create parameters.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @param {module:api/ApiOperationApi~apiOperationCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiOperationGet200Response}
     */
    apiOperationCreateOrUpdate(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling apiOperationCreateOrUpdate");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling apiOperationCreateOrUpdate");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling apiOperationCreateOrUpdate");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling apiOperationCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling apiOperationCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiOperationCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling apiOperationCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serviceName': serviceName,
        'apiId': apiId,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiOperationGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiOperationDelete operation.
     * @callback module:api/ApiOperationApi~apiOperationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified operation in the API.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} serviceName The name of the API Management service.
     * @param {String} apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param {String} operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param {String} ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ApiOperationApi~apiOperationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiOperationDelete(resourceGroupName, serviceName, apiId, operationId, ifMatch, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling apiOperationDelete");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling apiOperationDelete");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling apiOperationDelete");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling apiOperationDelete");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling apiOperationDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling apiOperationDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiOperationDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serviceName': serviceName,
        'apiId': apiId,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiOperationGet operation.
     * @callback module:api/ApiOperationApi~apiOperationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiOperationGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of the API Operation specified by its identifier.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} serviceName The name of the API Management service.
     * @param {String} apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param {String} operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ApiOperationApi~apiOperationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiOperationGet200Response}
     */
    apiOperationGet(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling apiOperationGet");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling apiOperationGet");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling apiOperationGet");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling apiOperationGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling apiOperationGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiOperationGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serviceName': serviceName,
        'apiId': apiId,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiOperationGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiOperationGetEntityTag operation.
     * @callback module:api/ApiOperationApi~apiOperationGetEntityTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the entity state (Etag) version of the API operation specified by its identifier.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} serviceName The name of the API Management service.
     * @param {String} apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param {String} operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ApiOperationApi~apiOperationGetEntityTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiOperationGetEntityTag(resourceGroupName, serviceName, apiId, operationId, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling apiOperationGetEntityTag");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling apiOperationGetEntityTag");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling apiOperationGetEntityTag");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling apiOperationGetEntityTag");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling apiOperationGetEntityTag");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiOperationGetEntityTag");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serviceName': serviceName,
        'apiId': apiId,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiOperationListByApi operation.
     * @callback module:api/ApiOperationApi~apiOperationListByApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiOperationListByApi200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists a collection of the operations for the specified API.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} serviceName The name of the API Management service.
     * @param {String} apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] | Field       | Supported operators    | Supported functions               | |-------------|------------------------|-----------------------------------|   |name | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith| |displayName | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith| |method | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith| |description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith| |urlTemplate | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith| 
     * @param {Number} [top] Number of records to return.
     * @param {Number} [skip] Number of records to skip.
     * @param {String} [tags] 
     * @param {module:api/ApiOperationApi~apiOperationListByApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiOperationListByApi200Response}
     */
    apiOperationListByApi(resourceGroupName, serviceName, apiId, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling apiOperationListByApi");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling apiOperationListByApi");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling apiOperationListByApi");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling apiOperationListByApi");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiOperationListByApi");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serviceName': serviceName,
        'apiId': apiId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        'tags': opts['tags'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiOperationListByApi200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiOperationUpdate operation.
     * @callback module:api/ApiOperationApi~apiOperationUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the details of the operation in the API specified by its identifier.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} serviceName The name of the API Management service.
     * @param {String} apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param {String} operationId Operation identifier within an API. Must be unique in the current API Management service instance.
     * @param {String} ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ApiOperationUpdateRequest} parameters API Operation Update parameters.
     * @param {module:api/ApiOperationApi~apiOperationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiOperationUpdate(resourceGroupName, serviceName, apiId, operationId, ifMatch, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling apiOperationUpdate");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling apiOperationUpdate");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling apiOperationUpdate");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling apiOperationUpdate");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling apiOperationUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling apiOperationUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiOperationUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling apiOperationUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serviceName': serviceName,
        'apiId': apiId,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
