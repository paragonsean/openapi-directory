# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiUpdateRequestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, path: str=None, protocols: List[str]=None, service_url: str=None):
        """ApiUpdateRequestProperties - a model defined in OpenAPI

        :param display_name: The display_name of this ApiUpdateRequestProperties.
        :param path: The path of this ApiUpdateRequestProperties.
        :param protocols: The protocols of this ApiUpdateRequestProperties.
        :param service_url: The service_url of this ApiUpdateRequestProperties.
        """
        self.openapi_types = {
            'display_name': str,
            'path': str,
            'protocols': List[str],
            'service_url': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'path': 'path',
            'protocols': 'protocols',
            'service_url': 'serviceUrl'
        }

        self._display_name = display_name
        self._path = path
        self._protocols = protocols
        self._service_url = service_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiUpdateRequestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api_Update_request_properties of this ApiUpdateRequestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ApiUpdateRequestProperties.

        API name.

        :return: The display_name of this ApiUpdateRequestProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApiUpdateRequestProperties.

        API name.

        :param display_name: The display_name of this ApiUpdateRequestProperties.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 300:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `300`")
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")

        self._display_name = display_name

    @property
    def path(self):
        """Gets the path of this ApiUpdateRequestProperties.

        Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.

        :return: The path of this ApiUpdateRequestProperties.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ApiUpdateRequestProperties.

        Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.

        :param path: The path of this ApiUpdateRequestProperties.
        :type path: str
        """
        if path is not None and len(path) > 400:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `400`")
        if path is not None and len(path) < 0:
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `0`")

        self._path = path

    @property
    def protocols(self):
        """Gets the protocols of this ApiUpdateRequestProperties.

        Describes on which protocols the operations in this API can be invoked.

        :return: The protocols of this ApiUpdateRequestProperties.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ApiUpdateRequestProperties.

        Describes on which protocols the operations in this API can be invoked.

        :param protocols: The protocols of this ApiUpdateRequestProperties.
        :type protocols: List[str]
        """
        allowed_values = ["http", "https"]  # noqa: E501
        if not set(protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    @property
    def service_url(self):
        """Gets the service_url of this ApiUpdateRequestProperties.

        Absolute URL of the backend service implementing this API.

        :return: The service_url of this ApiUpdateRequestProperties.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """Sets the service_url of this ApiUpdateRequestProperties.

        Absolute URL of the backend service implementing this API.

        :param service_url: The service_url of this ApiUpdateRequestProperties.
        :type service_url: str
        """
        if service_url is not None and len(service_url) > 2000:
            raise ValueError("Invalid value for `service_url`, length must be less than or equal to `2000`")
        if service_url is not None and len(service_url) < 1:
            raise ValueError("Invalid value for `service_url`, length must be greater than or equal to `1`")

        self._service_url = service_url
