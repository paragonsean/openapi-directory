/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterContract::OAIParameterContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterContract::OAIParameterContract() {
    this->initializeModel();
}

OAIParameterContract::~OAIParameterContract() {}

void OAIParameterContract::initializeModel() {

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIParameterContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterContract::fromJsonObject(QJsonObject json) {

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIParameterContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterContract::asJsonObject() const {
    QJsonObject obj;
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIParameterContract::getDefaultValue() const {
    return m_default_value;
}
void OAIParameterContract::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIParameterContract::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIParameterContract::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIParameterContract::getDescription() const {
    return m_description;
}
void OAIParameterContract::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIParameterContract::is_description_Set() const{
    return m_description_isSet;
}

bool OAIParameterContract::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIParameterContract::getName() const {
    return m_name;
}
void OAIParameterContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParameterContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParameterContract::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIParameterContract::isRequired() const {
    return m_required;
}
void OAIParameterContract::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIParameterContract::is_required_Set() const{
    return m_required_isSet;
}

bool OAIParameterContract::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIParameterContract::getType() const {
    return m_type;
}
void OAIParameterContract::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIParameterContract::is_type_Set() const{
    return m_type_isSet;
}

bool OAIParameterContract::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIParameterContract::getValues() const {
    return m_values;
}
void OAIParameterContract::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIParameterContract::is_values_Set() const{
    return m_values_isSet;
}

bool OAIParameterContract::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIParameterContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
