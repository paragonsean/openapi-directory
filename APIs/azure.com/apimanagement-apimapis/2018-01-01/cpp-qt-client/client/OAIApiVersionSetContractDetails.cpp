/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiVersionSetContractDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiVersionSetContractDetails::OAIApiVersionSetContractDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiVersionSetContractDetails::OAIApiVersionSetContractDetails() {
    this->initializeModel();
}

OAIApiVersionSetContractDetails::~OAIApiVersionSetContractDetails() {}

void OAIApiVersionSetContractDetails::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_version_header_name_isSet = false;
    m_version_header_name_isValid = false;

    m_version_query_name_isSet = false;
    m_version_query_name_isValid = false;

    m_versioning_scheme_isSet = false;
    m_versioning_scheme_isValid = false;
}

void OAIApiVersionSetContractDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiVersionSetContractDetails::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_version_header_name_isValid = ::OpenAPI::fromJsonValue(m_version_header_name, json[QString("versionHeaderName")]);
    m_version_header_name_isSet = !json[QString("versionHeaderName")].isNull() && m_version_header_name_isValid;

    m_version_query_name_isValid = ::OpenAPI::fromJsonValue(m_version_query_name, json[QString("versionQueryName")]);
    m_version_query_name_isSet = !json[QString("versionQueryName")].isNull() && m_version_query_name_isValid;

    m_versioning_scheme_isValid = ::OpenAPI::fromJsonValue(m_versioning_scheme, json[QString("versioningScheme")]);
    m_versioning_scheme_isSet = !json[QString("versioningScheme")].isNull() && m_versioning_scheme_isValid;
}

QString OAIApiVersionSetContractDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiVersionSetContractDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_version_header_name_isSet) {
        obj.insert(QString("versionHeaderName"), ::OpenAPI::toJsonValue(m_version_header_name));
    }
    if (m_version_query_name_isSet) {
        obj.insert(QString("versionQueryName"), ::OpenAPI::toJsonValue(m_version_query_name));
    }
    if (m_versioning_scheme_isSet) {
        obj.insert(QString("versioningScheme"), ::OpenAPI::toJsonValue(m_versioning_scheme));
    }
    return obj;
}

QString OAIApiVersionSetContractDetails::getDescription() const {
    return m_description;
}
void OAIApiVersionSetContractDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiVersionSetContractDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiVersionSetContractDetails::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApiVersionSetContractDetails::getId() const {
    return m_id;
}
void OAIApiVersionSetContractDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApiVersionSetContractDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApiVersionSetContractDetails::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApiVersionSetContractDetails::getVersionHeaderName() const {
    return m_version_header_name;
}
void OAIApiVersionSetContractDetails::setVersionHeaderName(const QString &version_header_name) {
    m_version_header_name = version_header_name;
    m_version_header_name_isSet = true;
}

bool OAIApiVersionSetContractDetails::is_version_header_name_Set() const{
    return m_version_header_name_isSet;
}

bool OAIApiVersionSetContractDetails::is_version_header_name_Valid() const{
    return m_version_header_name_isValid;
}

QString OAIApiVersionSetContractDetails::getVersionQueryName() const {
    return m_version_query_name;
}
void OAIApiVersionSetContractDetails::setVersionQueryName(const QString &version_query_name) {
    m_version_query_name = version_query_name;
    m_version_query_name_isSet = true;
}

bool OAIApiVersionSetContractDetails::is_version_query_name_Set() const{
    return m_version_query_name_isSet;
}

bool OAIApiVersionSetContractDetails::is_version_query_name_Valid() const{
    return m_version_query_name_isValid;
}

QString OAIApiVersionSetContractDetails::getVersioningScheme() const {
    return m_versioning_scheme;
}
void OAIApiVersionSetContractDetails::setVersioningScheme(const QString &versioning_scheme) {
    m_versioning_scheme = versioning_scheme;
    m_versioning_scheme_isSet = true;
}

bool OAIApiVersionSetContractDetails::is_versioning_scheme_Set() const{
    return m_versioning_scheme_isSet;
}

bool OAIApiVersionSetContractDetails::is_versioning_scheme_Valid() const{
    return m_versioning_scheme_isValid;
}

bool OAIApiVersionSetContractDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_header_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_query_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versioning_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiVersionSetContractDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
