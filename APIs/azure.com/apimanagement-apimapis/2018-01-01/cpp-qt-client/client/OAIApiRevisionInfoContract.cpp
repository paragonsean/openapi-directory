/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiRevisionInfoContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiRevisionInfoContract::OAIApiRevisionInfoContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiRevisionInfoContract::OAIApiRevisionInfoContract() {
    this->initializeModel();
}

OAIApiRevisionInfoContract::~OAIApiRevisionInfoContract() {}

void OAIApiRevisionInfoContract::initializeModel() {

    m_api_revision_description_isSet = false;
    m_api_revision_description_isValid = false;

    m_api_version_name_isSet = false;
    m_api_version_name_isValid = false;

    m_api_version_set_isSet = false;
    m_api_version_set_isValid = false;

    m_source_api_id_isSet = false;
    m_source_api_id_isValid = false;
}

void OAIApiRevisionInfoContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiRevisionInfoContract::fromJsonObject(QJsonObject json) {

    m_api_revision_description_isValid = ::OpenAPI::fromJsonValue(m_api_revision_description, json[QString("apiRevisionDescription")]);
    m_api_revision_description_isSet = !json[QString("apiRevisionDescription")].isNull() && m_api_revision_description_isValid;

    m_api_version_name_isValid = ::OpenAPI::fromJsonValue(m_api_version_name, json[QString("apiVersionName")]);
    m_api_version_name_isSet = !json[QString("apiVersionName")].isNull() && m_api_version_name_isValid;

    m_api_version_set_isValid = ::OpenAPI::fromJsonValue(m_api_version_set, json[QString("apiVersionSet")]);
    m_api_version_set_isSet = !json[QString("apiVersionSet")].isNull() && m_api_version_set_isValid;

    m_source_api_id_isValid = ::OpenAPI::fromJsonValue(m_source_api_id, json[QString("sourceApiId")]);
    m_source_api_id_isSet = !json[QString("sourceApiId")].isNull() && m_source_api_id_isValid;
}

QString OAIApiRevisionInfoContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiRevisionInfoContract::asJsonObject() const {
    QJsonObject obj;
    if (m_api_revision_description_isSet) {
        obj.insert(QString("apiRevisionDescription"), ::OpenAPI::toJsonValue(m_api_revision_description));
    }
    if (m_api_version_name_isSet) {
        obj.insert(QString("apiVersionName"), ::OpenAPI::toJsonValue(m_api_version_name));
    }
    if (m_api_version_set.isSet()) {
        obj.insert(QString("apiVersionSet"), ::OpenAPI::toJsonValue(m_api_version_set));
    }
    if (m_source_api_id_isSet) {
        obj.insert(QString("sourceApiId"), ::OpenAPI::toJsonValue(m_source_api_id));
    }
    return obj;
}

QString OAIApiRevisionInfoContract::getApiRevisionDescription() const {
    return m_api_revision_description;
}
void OAIApiRevisionInfoContract::setApiRevisionDescription(const QString &api_revision_description) {
    m_api_revision_description = api_revision_description;
    m_api_revision_description_isSet = true;
}

bool OAIApiRevisionInfoContract::is_api_revision_description_Set() const{
    return m_api_revision_description_isSet;
}

bool OAIApiRevisionInfoContract::is_api_revision_description_Valid() const{
    return m_api_revision_description_isValid;
}

QString OAIApiRevisionInfoContract::getApiVersionName() const {
    return m_api_version_name;
}
void OAIApiRevisionInfoContract::setApiVersionName(const QString &api_version_name) {
    m_api_version_name = api_version_name;
    m_api_version_name_isSet = true;
}

bool OAIApiRevisionInfoContract::is_api_version_name_Set() const{
    return m_api_version_name_isSet;
}

bool OAIApiRevisionInfoContract::is_api_version_name_Valid() const{
    return m_api_version_name_isValid;
}

OAIApiVersionSetContractDetails OAIApiRevisionInfoContract::getApiVersionSet() const {
    return m_api_version_set;
}
void OAIApiRevisionInfoContract::setApiVersionSet(const OAIApiVersionSetContractDetails &api_version_set) {
    m_api_version_set = api_version_set;
    m_api_version_set_isSet = true;
}

bool OAIApiRevisionInfoContract::is_api_version_set_Set() const{
    return m_api_version_set_isSet;
}

bool OAIApiRevisionInfoContract::is_api_version_set_Valid() const{
    return m_api_version_set_isValid;
}

QString OAIApiRevisionInfoContract::getSourceApiId() const {
    return m_source_api_id;
}
void OAIApiRevisionInfoContract::setSourceApiId(const QString &source_api_id) {
    m_source_api_id = source_api_id;
    m_source_api_id_isSet = true;
}

bool OAIApiRevisionInfoContract::is_source_api_id_Set() const{
    return m_source_api_id_isSet;
}

bool OAIApiRevisionInfoContract::is_source_api_id_Valid() const{
    return m_source_api_id_isValid;
}

bool OAIApiRevisionInfoContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_revision_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_version_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_api_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiRevisionInfoContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
