/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueCommentContractProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueCommentContractProperties::OAIIssueCommentContractProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueCommentContractProperties::OAIIssueCommentContractProperties() {
    this->initializeModel();
}

OAIIssueCommentContractProperties::~OAIIssueCommentContractProperties() {}

void OAIIssueCommentContractProperties::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIIssueCommentContractProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueCommentContractProperties::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIIssueCommentContractProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueCommentContractProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIIssueCommentContractProperties::getCreatedDate() const {
    return m_created_date;
}
void OAIIssueCommentContractProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIIssueCommentContractProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIIssueCommentContractProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIIssueCommentContractProperties::getText() const {
    return m_text;
}
void OAIIssueCommentContractProperties::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIIssueCommentContractProperties::is_text_Set() const{
    return m_text_isSet;
}

bool OAIIssueCommentContractProperties::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIIssueCommentContractProperties::getUserId() const {
    return m_user_id;
}
void OAIIssueCommentContractProperties::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIIssueCommentContractProperties::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIIssueCommentContractProperties::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIIssueCommentContractProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueCommentContractProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
