/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiEntityBaseContract_authenticationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiEntityBaseContract_authenticationSettings::OAIApiEntityBaseContract_authenticationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiEntityBaseContract_authenticationSettings::OAIApiEntityBaseContract_authenticationSettings() {
    this->initializeModel();
}

OAIApiEntityBaseContract_authenticationSettings::~OAIApiEntityBaseContract_authenticationSettings() {}

void OAIApiEntityBaseContract_authenticationSettings::initializeModel() {

    m_o_auth2_isSet = false;
    m_o_auth2_isValid = false;

    m_openid_isSet = false;
    m_openid_isValid = false;

    m_subscription_key_required_isSet = false;
    m_subscription_key_required_isValid = false;
}

void OAIApiEntityBaseContract_authenticationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiEntityBaseContract_authenticationSettings::fromJsonObject(QJsonObject json) {

    m_o_auth2_isValid = ::OpenAPI::fromJsonValue(m_o_auth2, json[QString("oAuth2")]);
    m_o_auth2_isSet = !json[QString("oAuth2")].isNull() && m_o_auth2_isValid;

    m_openid_isValid = ::OpenAPI::fromJsonValue(m_openid, json[QString("openid")]);
    m_openid_isSet = !json[QString("openid")].isNull() && m_openid_isValid;

    m_subscription_key_required_isValid = ::OpenAPI::fromJsonValue(m_subscription_key_required, json[QString("subscriptionKeyRequired")]);
    m_subscription_key_required_isSet = !json[QString("subscriptionKeyRequired")].isNull() && m_subscription_key_required_isValid;
}

QString OAIApiEntityBaseContract_authenticationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiEntityBaseContract_authenticationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_o_auth2.isSet()) {
        obj.insert(QString("oAuth2"), ::OpenAPI::toJsonValue(m_o_auth2));
    }
    if (m_openid.isSet()) {
        obj.insert(QString("openid"), ::OpenAPI::toJsonValue(m_openid));
    }
    if (m_subscription_key_required_isSet) {
        obj.insert(QString("subscriptionKeyRequired"), ::OpenAPI::toJsonValue(m_subscription_key_required));
    }
    return obj;
}

OAIApiEntityBaseContract_authenticationSettings_oAuth2 OAIApiEntityBaseContract_authenticationSettings::getOAuth2() const {
    return m_o_auth2;
}
void OAIApiEntityBaseContract_authenticationSettings::setOAuth2(const OAIApiEntityBaseContract_authenticationSettings_oAuth2 &o_auth2) {
    m_o_auth2 = o_auth2;
    m_o_auth2_isSet = true;
}

bool OAIApiEntityBaseContract_authenticationSettings::is_o_auth2_Set() const{
    return m_o_auth2_isSet;
}

bool OAIApiEntityBaseContract_authenticationSettings::is_o_auth2_Valid() const{
    return m_o_auth2_isValid;
}

OAIApiEntityBaseContract_authenticationSettings_openid OAIApiEntityBaseContract_authenticationSettings::getOpenid() const {
    return m_openid;
}
void OAIApiEntityBaseContract_authenticationSettings::setOpenid(const OAIApiEntityBaseContract_authenticationSettings_openid &openid) {
    m_openid = openid;
    m_openid_isSet = true;
}

bool OAIApiEntityBaseContract_authenticationSettings::is_openid_Set() const{
    return m_openid_isSet;
}

bool OAIApiEntityBaseContract_authenticationSettings::is_openid_Valid() const{
    return m_openid_isValid;
}

bool OAIApiEntityBaseContract_authenticationSettings::isSubscriptionKeyRequired() const {
    return m_subscription_key_required;
}
void OAIApiEntityBaseContract_authenticationSettings::setSubscriptionKeyRequired(const bool &subscription_key_required) {
    m_subscription_key_required = subscription_key_required;
    m_subscription_key_required_isSet = true;
}

bool OAIApiEntityBaseContract_authenticationSettings::is_subscription_key_required_Set() const{
    return m_subscription_key_required_isSet;
}

bool OAIApiEntityBaseContract_authenticationSettings::is_subscription_key_required_Valid() const{
    return m_subscription_key_required_isValid;
}

bool OAIApiEntityBaseContract_authenticationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_o_auth2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_openid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_key_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiEntityBaseContract_authenticationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
