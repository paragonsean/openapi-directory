/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiDiagnosticLoggerCreateOrUpdate200Response from '../model/ApiDiagnosticLoggerCreateOrUpdate200Response';
import ApiDiagnosticLoggerListByService200Response from '../model/ApiDiagnosticLoggerListByService200Response';
import ApiListByServiceDefaultResponse from '../model/ApiListByServiceDefaultResponse';

/**
* ApiDiagnosticLoggers service.
* @module api/ApiDiagnosticLoggersApi
* @version 2018-01-01
*/
export default class ApiDiagnosticLoggersApi {

    /**
    * Constructs a new ApiDiagnosticLoggersApi. 
    * @alias module:api/ApiDiagnosticLoggersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiDiagnosticLoggerCheckEntityExists operation.
     * @callback module:api/ApiDiagnosticLoggersApi~apiDiagnosticLoggerCheckEntityExistsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks that logger entity specified by identifier is associated with the diagnostics entity.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} serviceName The name of the API Management service.
     * @param {String} apiId API identifier. Must be unique in the current API Management service instance.
     * @param {String} diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance.
     * @param {String} loggerid Logger identifier. Must be unique in the API Management service instance.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ApiDiagnosticLoggersApi~apiDiagnosticLoggerCheckEntityExistsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDiagnosticLoggerCheckEntityExists(resourceGroupName, serviceName, apiId, diagnosticId, loggerid, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling apiDiagnosticLoggerCheckEntityExists");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling apiDiagnosticLoggerCheckEntityExists");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling apiDiagnosticLoggerCheckEntityExists");
      }
      // verify the required parameter 'diagnosticId' is set
      if (diagnosticId === undefined || diagnosticId === null) {
        throw new Error("Missing the required parameter 'diagnosticId' when calling apiDiagnosticLoggerCheckEntityExists");
      }
      // verify the required parameter 'loggerid' is set
      if (loggerid === undefined || loggerid === null) {
        throw new Error("Missing the required parameter 'loggerid' when calling apiDiagnosticLoggerCheckEntityExists");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling apiDiagnosticLoggerCheckEntityExists");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiDiagnosticLoggerCheckEntityExists");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serviceName': serviceName,
        'apiId': apiId,
        'diagnosticId': diagnosticId,
        'loggerid': loggerid,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}/loggers/{loggerid}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiagnosticLoggerCreateOrUpdate operation.
     * @callback module:api/ApiDiagnosticLoggersApi~apiDiagnosticLoggerCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDiagnosticLoggerCreateOrUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attaches a logger to a diagnostic for an API.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} serviceName The name of the API Management service.
     * @param {String} apiId API identifier. Must be unique in the current API Management service instance.
     * @param {String} diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance.
     * @param {String} loggerid Logger identifier. Must be unique in the API Management service instance.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ApiDiagnosticLoggersApi~apiDiagnosticLoggerCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDiagnosticLoggerCreateOrUpdate200Response}
     */
    apiDiagnosticLoggerCreateOrUpdate(resourceGroupName, serviceName, apiId, diagnosticId, loggerid, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling apiDiagnosticLoggerCreateOrUpdate");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling apiDiagnosticLoggerCreateOrUpdate");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling apiDiagnosticLoggerCreateOrUpdate");
      }
      // verify the required parameter 'diagnosticId' is set
      if (diagnosticId === undefined || diagnosticId === null) {
        throw new Error("Missing the required parameter 'diagnosticId' when calling apiDiagnosticLoggerCreateOrUpdate");
      }
      // verify the required parameter 'loggerid' is set
      if (loggerid === undefined || loggerid === null) {
        throw new Error("Missing the required parameter 'loggerid' when calling apiDiagnosticLoggerCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling apiDiagnosticLoggerCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiDiagnosticLoggerCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serviceName': serviceName,
        'apiId': apiId,
        'diagnosticId': diagnosticId,
        'loggerid': loggerid,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiDiagnosticLoggerCreateOrUpdate200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}/loggers/{loggerid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiagnosticLoggerDelete operation.
     * @callback module:api/ApiDiagnosticLoggersApi~apiDiagnosticLoggerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Logger from Diagnostic for an API.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} serviceName The name of the API Management service.
     * @param {String} apiId API identifier. Must be unique in the current API Management service instance.
     * @param {String} diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance.
     * @param {String} loggerid Logger identifier. Must be unique in the API Management service instance.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ApiDiagnosticLoggersApi~apiDiagnosticLoggerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDiagnosticLoggerDelete(resourceGroupName, serviceName, apiId, diagnosticId, loggerid, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling apiDiagnosticLoggerDelete");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling apiDiagnosticLoggerDelete");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling apiDiagnosticLoggerDelete");
      }
      // verify the required parameter 'diagnosticId' is set
      if (diagnosticId === undefined || diagnosticId === null) {
        throw new Error("Missing the required parameter 'diagnosticId' when calling apiDiagnosticLoggerDelete");
      }
      // verify the required parameter 'loggerid' is set
      if (loggerid === undefined || loggerid === null) {
        throw new Error("Missing the required parameter 'loggerid' when calling apiDiagnosticLoggerDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling apiDiagnosticLoggerDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiDiagnosticLoggerDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serviceName': serviceName,
        'apiId': apiId,
        'diagnosticId': diagnosticId,
        'loggerid': loggerid,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}/loggers/{loggerid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiagnosticLoggerListByService operation.
     * @callback module:api/ApiDiagnosticLoggersApi~apiDiagnosticLoggerListByServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiDiagnosticLoggerListByService200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all loggers associated with the specified Diagnostic of an API.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} serviceName The name of the API Management service.
     * @param {String} apiId API identifier. Must be unique in the current API Management service instance.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] | Field       | Supported operators    | Supported functions               | |-------------|------------------------|-----------------------------------| | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith | | type        | eq                     |                                   |
     * @param {Number} [top] Number of records to return.
     * @param {Number} [skip] Number of records to skip.
     * @param {module:api/ApiDiagnosticLoggersApi~apiDiagnosticLoggerListByServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiDiagnosticLoggerListByService200Response}
     */
    apiDiagnosticLoggerListByService(resourceGroupName, serviceName, apiId, apiVersion, subscriptionId, diagnosticId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling apiDiagnosticLoggerListByService");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling apiDiagnosticLoggerListByService");
      }
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling apiDiagnosticLoggerListByService");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling apiDiagnosticLoggerListByService");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiDiagnosticLoggerListByService");
      }
      // verify the required parameter 'diagnosticId' is set
      if (diagnosticId === undefined || diagnosticId === null) {
        throw new Error("Missing the required parameter 'diagnosticId' when calling apiDiagnosticLoggerListByService");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serviceName': serviceName,
        'apiId': apiId,
        'subscriptionId': subscriptionId,
        'diagnosticId': diagnosticId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiDiagnosticLoggerListByService200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}/loggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
