/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParameterContract from './ParameterContract';

/**
 * The RepresentationContract model module.
 * @module model/RepresentationContract
 * @version 2018-01-01
 */
class RepresentationContract {
    /**
     * Constructs a new <code>RepresentationContract</code>.
     * Operation request/response representation details.
     * @alias module:model/RepresentationContract
     * @param contentType {String} Specifies a registered or custom content type for this representation, e.g. application/xml.
     */
    constructor(contentType) { 
        
        RepresentationContract.initialize(this, contentType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentType) { 
        obj['contentType'] = contentType;
    }

    /**
     * Constructs a <code>RepresentationContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepresentationContract} obj Optional instance to populate.
     * @return {module:model/RepresentationContract} The populated <code>RepresentationContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepresentationContract();

            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('formParameters')) {
                obj['formParameters'] = ApiClient.convertToType(data['formParameters'], [ParameterContract]);
            }
            if (data.hasOwnProperty('sample')) {
                obj['sample'] = ApiClient.convertToType(data['sample'], 'String');
            }
            if (data.hasOwnProperty('schemaId')) {
                obj['schemaId'] = ApiClient.convertToType(data['schemaId'], 'String');
            }
            if (data.hasOwnProperty('typeName')) {
                obj['typeName'] = ApiClient.convertToType(data['typeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepresentationContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepresentationContract</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepresentationContract.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        if (data['formParameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['formParameters'])) {
                throw new Error("Expected the field `formParameters` to be an array in the JSON data but got " + data['formParameters']);
            }
            // validate the optional field `formParameters` (array)
            for (const item of data['formParameters']) {
                ParameterContract.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sample'] && !(typeof data['sample'] === 'string' || data['sample'] instanceof String)) {
            throw new Error("Expected the field `sample` to be a primitive type in the JSON string but got " + data['sample']);
        }
        // ensure the json data is a string
        if (data['schemaId'] && !(typeof data['schemaId'] === 'string' || data['schemaId'] instanceof String)) {
            throw new Error("Expected the field `schemaId` to be a primitive type in the JSON string but got " + data['schemaId']);
        }
        // ensure the json data is a string
        if (data['typeName'] && !(typeof data['typeName'] === 'string' || data['typeName'] instanceof String)) {
            throw new Error("Expected the field `typeName` to be a primitive type in the JSON string but got " + data['typeName']);
        }

        return true;
    }


}

RepresentationContract.RequiredProperties = ["contentType"];

/**
 * Specifies a registered or custom content type for this representation, e.g. application/xml.
 * @member {String} contentType
 */
RepresentationContract.prototype['contentType'] = undefined;

/**
 * Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'..
 * @member {Array.<module:model/ParameterContract>} formParameters
 */
RepresentationContract.prototype['formParameters'] = undefined;

/**
 * An example of the representation.
 * @member {String} sample
 */
RepresentationContract.prototype['sample'] = undefined;

/**
 * Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
 * @member {String} schemaId
 */
RepresentationContract.prototype['schemaId'] = undefined;

/**
 * Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'.
 * @member {String} typeName
 */
RepresentationContract.prototype['typeName'] = undefined;






export default RepresentationContract;

