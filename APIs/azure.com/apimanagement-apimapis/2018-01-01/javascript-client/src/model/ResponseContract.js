/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParameterContract from './ParameterContract';
import RepresentationContract from './RepresentationContract';

/**
 * The ResponseContract model module.
 * @module model/ResponseContract
 * @version 2018-01-01
 */
class ResponseContract {
    /**
     * Constructs a new <code>ResponseContract</code>.
     * Operation response details.
     * @alias module:model/ResponseContract
     * @param statusCode {Number} Operation response HTTP status code.
     */
    constructor(statusCode) { 
        
        ResponseContract.initialize(this, statusCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, statusCode) { 
        obj['statusCode'] = statusCode;
    }

    /**
     * Constructs a <code>ResponseContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseContract} obj Optional instance to populate.
     * @return {module:model/ResponseContract} The populated <code>ResponseContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseContract();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [ParameterContract]);
            }
            if (data.hasOwnProperty('representations')) {
                obj['representations'] = ApiClient.convertToType(data['representations'], [RepresentationContract]);
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseContract</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResponseContract.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                ParameterContract.validateJSON(item);
            };
        }
        if (data['representations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['representations'])) {
                throw new Error("Expected the field `representations` to be an array in the JSON data but got " + data['representations']);
            }
            // validate the optional field `representations` (array)
            for (const item of data['representations']) {
                RepresentationContract.validateJSON(item);
            };
        }

        return true;
    }


}

ResponseContract.RequiredProperties = ["statusCode"];

/**
 * Operation response description.
 * @member {String} description
 */
ResponseContract.prototype['description'] = undefined;

/**
 * Collection of operation response headers.
 * @member {Array.<module:model/ParameterContract>} headers
 */
ResponseContract.prototype['headers'] = undefined;

/**
 * Collection of operation response representations.
 * @member {Array.<module:model/RepresentationContract>} representations
 */
ResponseContract.prototype['representations'] = undefined;

/**
 * Operation response HTTP status code.
 * @member {Number} statusCode
 */
ResponseContract.prototype['statusCode'] = undefined;






export default ResponseContract;

