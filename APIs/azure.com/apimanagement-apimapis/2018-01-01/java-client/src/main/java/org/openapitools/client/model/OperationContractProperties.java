/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ParameterContract;
import org.openapitools.client.model.RequestContract;
import org.openapitools.client.model.ResponseContract;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Operation Contract Properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:33.372145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationContractProperties {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_URL_TEMPLATE = "urlTemplate";
  @SerializedName(SERIALIZED_NAME_URL_TEMPLATE)
  private String urlTemplate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private String policies;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private RequestContract request;

  public static final String SERIALIZED_NAME_RESPONSES = "responses";
  @SerializedName(SERIALIZED_NAME_RESPONSES)
  private List<ResponseContract> responses = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE_PARAMETERS = "templateParameters";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_PARAMETERS)
  private List<ParameterContract> templateParameters = new ArrayList<>();

  public OperationContractProperties() {
  }

  public OperationContractProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Operation Name.
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public OperationContractProperties method(String method) {
    this.method = method;
    return this;
  }

  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
   * @return method
   */
  @javax.annotation.Nonnull
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public OperationContractProperties urlTemplate(String urlTemplate) {
    this.urlTemplate = urlTemplate;
    return this;
  }

  /**
   * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date&#x3D;{date}
   * @return urlTemplate
   */
  @javax.annotation.Nonnull
  public String getUrlTemplate() {
    return urlTemplate;
  }

  public void setUrlTemplate(String urlTemplate) {
    this.urlTemplate = urlTemplate;
  }


  public OperationContractProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the operation. May include HTML formatting tags.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OperationContractProperties policies(String policies) {
    this.policies = policies;
    return this;
  }

  /**
   * Operation Policies
   * @return policies
   */
  @javax.annotation.Nullable
  public String getPolicies() {
    return policies;
  }

  public void setPolicies(String policies) {
    this.policies = policies;
  }


  public OperationContractProperties request(RequestContract request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nullable
  public RequestContract getRequest() {
    return request;
  }

  public void setRequest(RequestContract request) {
    this.request = request;
  }


  public OperationContractProperties responses(List<ResponseContract> responses) {
    this.responses = responses;
    return this;
  }

  public OperationContractProperties addResponsesItem(ResponseContract responsesItem) {
    if (this.responses == null) {
      this.responses = new ArrayList<>();
    }
    this.responses.add(responsesItem);
    return this;
  }

  /**
   * Array of Operation responses.
   * @return responses
   */
  @javax.annotation.Nullable
  public List<ResponseContract> getResponses() {
    return responses;
  }

  public void setResponses(List<ResponseContract> responses) {
    this.responses = responses;
  }


  public OperationContractProperties templateParameters(List<ParameterContract> templateParameters) {
    this.templateParameters = templateParameters;
    return this;
  }

  public OperationContractProperties addTemplateParametersItem(ParameterContract templateParametersItem) {
    if (this.templateParameters == null) {
      this.templateParameters = new ArrayList<>();
    }
    this.templateParameters.add(templateParametersItem);
    return this;
  }

  /**
   * Collection of URL template parameters.
   * @return templateParameters
   */
  @javax.annotation.Nullable
  public List<ParameterContract> getTemplateParameters() {
    return templateParameters;
  }

  public void setTemplateParameters(List<ParameterContract> templateParameters) {
    this.templateParameters = templateParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationContractProperties operationContractProperties = (OperationContractProperties) o;
    return Objects.equals(this.displayName, operationContractProperties.displayName) &&
        Objects.equals(this.method, operationContractProperties.method) &&
        Objects.equals(this.urlTemplate, operationContractProperties.urlTemplate) &&
        Objects.equals(this.description, operationContractProperties.description) &&
        Objects.equals(this.policies, operationContractProperties.policies) &&
        Objects.equals(this.request, operationContractProperties.request) &&
        Objects.equals(this.responses, operationContractProperties.responses) &&
        Objects.equals(this.templateParameters, operationContractProperties.templateParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, method, urlTemplate, description, policies, request, responses, templateParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationContractProperties {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    urlTemplate: ").append(toIndentedString(urlTemplate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    responses: ").append(toIndentedString(responses)).append("\n");
    sb.append("    templateParameters: ").append(toIndentedString(templateParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("policies");
    openapiFields.add("request");
    openapiFields.add("responses");
    openapiFields.add("templateParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("urlTemplate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationContractProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationContractProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationContractProperties is not found in the empty JSON string", OperationContractProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationContractProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationContractProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OperationContractProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (!jsonObj.get("urlTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlTemplate").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) && !jsonObj.get("policies").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policies` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policies").toString()));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        RequestContract.validateJsonElement(jsonObj.get("request"));
      }
      if (jsonObj.get("responses") != null && !jsonObj.get("responses").isJsonNull()) {
        JsonArray jsonArrayresponses = jsonObj.getAsJsonArray("responses");
        if (jsonArrayresponses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("responses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responses` to be an array in the JSON string but got `%s`", jsonObj.get("responses").toString()));
          }

          // validate the optional field `responses` (array)
          for (int i = 0; i < jsonArrayresponses.size(); i++) {
            ResponseContract.validateJsonElement(jsonArrayresponses.get(i));
          };
        }
      }
      if (jsonObj.get("templateParameters") != null && !jsonObj.get("templateParameters").isJsonNull()) {
        JsonArray jsonArraytemplateParameters = jsonObj.getAsJsonArray("templateParameters");
        if (jsonArraytemplateParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("templateParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `templateParameters` to be an array in the JSON string but got `%s`", jsonObj.get("templateParameters").toString()));
          }

          // validate the optional field `templateParameters` (array)
          for (int i = 0; i < jsonArraytemplateParameters.size(); i++) {
            ParameterContract.validateJsonElement(jsonArraytemplateParameters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationContractProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationContractProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationContractProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationContractProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationContractProperties>() {
           @Override
           public void write(JsonWriter out, OperationContractProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationContractProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationContractProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationContractProperties
   * @throws IOException if the JSON string is invalid with respect to OperationContractProperties
   */
  public static OperationContractProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationContractProperties.class);
  }

  /**
   * Convert an instance of OperationContractProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

