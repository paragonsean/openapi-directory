/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApiVersionSetContractDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object used to create an API Revision or Version based on an existing API Revision
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:33.372145-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiRevisionInfoContract {
  public static final String SERIALIZED_NAME_API_REVISION_DESCRIPTION = "apiRevisionDescription";
  @SerializedName(SERIALIZED_NAME_API_REVISION_DESCRIPTION)
  private String apiRevisionDescription;

  public static final String SERIALIZED_NAME_API_VERSION_NAME = "apiVersionName";
  @SerializedName(SERIALIZED_NAME_API_VERSION_NAME)
  private String apiVersionName;

  public static final String SERIALIZED_NAME_API_VERSION_SET = "apiVersionSet";
  @SerializedName(SERIALIZED_NAME_API_VERSION_SET)
  private ApiVersionSetContractDetails apiVersionSet;

  public static final String SERIALIZED_NAME_SOURCE_API_ID = "sourceApiId";
  @SerializedName(SERIALIZED_NAME_SOURCE_API_ID)
  private String sourceApiId;

  public ApiRevisionInfoContract() {
  }

  public ApiRevisionInfoContract apiRevisionDescription(String apiRevisionDescription) {
    this.apiRevisionDescription = apiRevisionDescription;
    return this;
  }

  /**
   * Description of new API Revision.
   * @return apiRevisionDescription
   */
  @javax.annotation.Nullable
  public String getApiRevisionDescription() {
    return apiRevisionDescription;
  }

  public void setApiRevisionDescription(String apiRevisionDescription) {
    this.apiRevisionDescription = apiRevisionDescription;
  }


  public ApiRevisionInfoContract apiVersionName(String apiVersionName) {
    this.apiVersionName = apiVersionName;
    return this;
  }

  /**
   * Version identifier for the new API Version.
   * @return apiVersionName
   */
  @javax.annotation.Nullable
  public String getApiVersionName() {
    return apiVersionName;
  }

  public void setApiVersionName(String apiVersionName) {
    this.apiVersionName = apiVersionName;
  }


  public ApiRevisionInfoContract apiVersionSet(ApiVersionSetContractDetails apiVersionSet) {
    this.apiVersionSet = apiVersionSet;
    return this;
  }

  /**
   * Get apiVersionSet
   * @return apiVersionSet
   */
  @javax.annotation.Nullable
  public ApiVersionSetContractDetails getApiVersionSet() {
    return apiVersionSet;
  }

  public void setApiVersionSet(ApiVersionSetContractDetails apiVersionSet) {
    this.apiVersionSet = apiVersionSet;
  }


  public ApiRevisionInfoContract sourceApiId(String sourceApiId) {
    this.sourceApiId = sourceApiId;
    return this;
  }

  /**
   * Resource identifier of API to be used to create the revision from.
   * @return sourceApiId
   */
  @javax.annotation.Nullable
  public String getSourceApiId() {
    return sourceApiId;
  }

  public void setSourceApiId(String sourceApiId) {
    this.sourceApiId = sourceApiId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiRevisionInfoContract apiRevisionInfoContract = (ApiRevisionInfoContract) o;
    return Objects.equals(this.apiRevisionDescription, apiRevisionInfoContract.apiRevisionDescription) &&
        Objects.equals(this.apiVersionName, apiRevisionInfoContract.apiVersionName) &&
        Objects.equals(this.apiVersionSet, apiRevisionInfoContract.apiVersionSet) &&
        Objects.equals(this.sourceApiId, apiRevisionInfoContract.sourceApiId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiRevisionDescription, apiVersionName, apiVersionSet, sourceApiId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiRevisionInfoContract {\n");
    sb.append("    apiRevisionDescription: ").append(toIndentedString(apiRevisionDescription)).append("\n");
    sb.append("    apiVersionName: ").append(toIndentedString(apiVersionName)).append("\n");
    sb.append("    apiVersionSet: ").append(toIndentedString(apiVersionSet)).append("\n");
    sb.append("    sourceApiId: ").append(toIndentedString(sourceApiId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiRevisionDescription");
    openapiFields.add("apiVersionName");
    openapiFields.add("apiVersionSet");
    openapiFields.add("sourceApiId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiRevisionInfoContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiRevisionInfoContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiRevisionInfoContract is not found in the empty JSON string", ApiRevisionInfoContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiRevisionInfoContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiRevisionInfoContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiRevisionDescription") != null && !jsonObj.get("apiRevisionDescription").isJsonNull()) && !jsonObj.get("apiRevisionDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiRevisionDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiRevisionDescription").toString()));
      }
      if ((jsonObj.get("apiVersionName") != null && !jsonObj.get("apiVersionName").isJsonNull()) && !jsonObj.get("apiVersionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiVersionName").toString()));
      }
      // validate the optional field `apiVersionSet`
      if (jsonObj.get("apiVersionSet") != null && !jsonObj.get("apiVersionSet").isJsonNull()) {
        ApiVersionSetContractDetails.validateJsonElement(jsonObj.get("apiVersionSet"));
      }
      if ((jsonObj.get("sourceApiId") != null && !jsonObj.get("sourceApiId").isJsonNull()) && !jsonObj.get("sourceApiId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceApiId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceApiId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiRevisionInfoContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiRevisionInfoContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiRevisionInfoContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiRevisionInfoContract.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiRevisionInfoContract>() {
           @Override
           public void write(JsonWriter out, ApiRevisionInfoContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiRevisionInfoContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiRevisionInfoContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiRevisionInfoContract
   * @throws IOException if the JSON string is invalid with respect to ApiRevisionInfoContract
   */
  public static ApiRevisionInfoContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiRevisionInfoContract.class);
  }

  /**
   * Convert an instance of ApiRevisionInfoContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

