# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiEntityBaseContractAuthenticationSettingsOpenid(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bearer_token_sending_methods: List[str]=None, openid_provider_id: str=None):
        """ApiEntityBaseContractAuthenticationSettingsOpenid - a model defined in OpenAPI

        :param bearer_token_sending_methods: The bearer_token_sending_methods of this ApiEntityBaseContractAuthenticationSettingsOpenid.
        :param openid_provider_id: The openid_provider_id of this ApiEntityBaseContractAuthenticationSettingsOpenid.
        """
        self.openapi_types = {
            'bearer_token_sending_methods': List[str],
            'openid_provider_id': str
        }

        self.attribute_map = {
            'bearer_token_sending_methods': 'bearerTokenSendingMethods',
            'openid_provider_id': 'openidProviderId'
        }

        self._bearer_token_sending_methods = bearer_token_sending_methods
        self._openid_provider_id = openid_provider_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiEntityBaseContractAuthenticationSettingsOpenid':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiEntityBaseContract_authenticationSettings_openid of this ApiEntityBaseContractAuthenticationSettingsOpenid.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bearer_token_sending_methods(self):
        """Gets the bearer_token_sending_methods of this ApiEntityBaseContractAuthenticationSettingsOpenid.

        How to send token to the server.

        :return: The bearer_token_sending_methods of this ApiEntityBaseContractAuthenticationSettingsOpenid.
        :rtype: List[str]
        """
        return self._bearer_token_sending_methods

    @bearer_token_sending_methods.setter
    def bearer_token_sending_methods(self, bearer_token_sending_methods):
        """Sets the bearer_token_sending_methods of this ApiEntityBaseContractAuthenticationSettingsOpenid.

        How to send token to the server.

        :param bearer_token_sending_methods: The bearer_token_sending_methods of this ApiEntityBaseContractAuthenticationSettingsOpenid.
        :type bearer_token_sending_methods: List[str]
        """
        allowed_values = ["authorizationHeader", "query"]  # noqa: E501
        if not set(bearer_token_sending_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `bearer_token_sending_methods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(bearer_token_sending_methods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._bearer_token_sending_methods = bearer_token_sending_methods

    @property
    def openid_provider_id(self):
        """Gets the openid_provider_id of this ApiEntityBaseContractAuthenticationSettingsOpenid.

        OAuth authorization server identifier.

        :return: The openid_provider_id of this ApiEntityBaseContractAuthenticationSettingsOpenid.
        :rtype: str
        """
        return self._openid_provider_id

    @openid_provider_id.setter
    def openid_provider_id(self, openid_provider_id):
        """Sets the openid_provider_id of this ApiEntityBaseContractAuthenticationSettingsOpenid.

        OAuth authorization server identifier.

        :param openid_provider_id: The openid_provider_id of this ApiEntityBaseContractAuthenticationSettingsOpenid.
        :type openid_provider_id: str
        """

        self._openid_provider_id = openid_provider_id
