# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueContractProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, title: str=None, user_id: str=None, api_id: str=None, created_date: datetime=None, state: str=None):
        """IssueContractProperties - a model defined in OpenAPI

        :param description: The description of this IssueContractProperties.
        :param title: The title of this IssueContractProperties.
        :param user_id: The user_id of this IssueContractProperties.
        :param api_id: The api_id of this IssueContractProperties.
        :param created_date: The created_date of this IssueContractProperties.
        :param state: The state of this IssueContractProperties.
        """
        self.openapi_types = {
            'description': str,
            'title': str,
            'user_id': str,
            'api_id': str,
            'created_date': datetime,
            'state': str
        }

        self.attribute_map = {
            'description': 'description',
            'title': 'title',
            'user_id': 'userId',
            'api_id': 'apiId',
            'created_date': 'createdDate',
            'state': 'state'
        }

        self._description = description
        self._title = title
        self._user_id = user_id
        self._api_id = api_id
        self._created_date = created_date
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueContractProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueContractProperties of this IssueContractProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this IssueContractProperties.

        Text describing the issue.

        :return: The description of this IssueContractProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IssueContractProperties.

        Text describing the issue.

        :param description: The description of this IssueContractProperties.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def title(self):
        """Gets the title of this IssueContractProperties.

        The issue title.

        :return: The title of this IssueContractProperties.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IssueContractProperties.

        The issue title.

        :param title: The title of this IssueContractProperties.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def user_id(self):
        """Gets the user_id of this IssueContractProperties.

        A resource identifier for the user created the issue.

        :return: The user_id of this IssueContractProperties.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this IssueContractProperties.

        A resource identifier for the user created the issue.

        :param user_id: The user_id of this IssueContractProperties.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def api_id(self):
        """Gets the api_id of this IssueContractProperties.

        A resource identifier for the API the issue was created for.

        :return: The api_id of this IssueContractProperties.
        :rtype: str
        """
        return self._api_id

    @api_id.setter
    def api_id(self, api_id):
        """Sets the api_id of this IssueContractProperties.

        A resource identifier for the API the issue was created for.

        :param api_id: The api_id of this IssueContractProperties.
        :type api_id: str
        """

        self._api_id = api_id

    @property
    def created_date(self):
        """Gets the created_date of this IssueContractProperties.

        Date and time when the issue was created.

        :return: The created_date of this IssueContractProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this IssueContractProperties.

        Date and time when the issue was created.

        :param created_date: The created_date of this IssueContractProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def state(self):
        """Gets the state of this IssueContractProperties.

        Status of the issue.

        :return: The state of this IssueContractProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IssueContractProperties.

        Status of the issue.

        :param state: The state of this IssueContractProperties.
        :type state: str
        """
        allowed_values = ["proposed", "open", "removed", "resolved", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
