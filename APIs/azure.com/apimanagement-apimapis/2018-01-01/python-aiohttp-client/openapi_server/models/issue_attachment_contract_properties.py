# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueAttachmentContractProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, content_format: str=None, title: str=None):
        """IssueAttachmentContractProperties - a model defined in OpenAPI

        :param content: The content of this IssueAttachmentContractProperties.
        :param content_format: The content_format of this IssueAttachmentContractProperties.
        :param title: The title of this IssueAttachmentContractProperties.
        """
        self.openapi_types = {
            'content': str,
            'content_format': str,
            'title': str
        }

        self.attribute_map = {
            'content': 'content',
            'content_format': 'contentFormat',
            'title': 'title'
        }

        self._content = content
        self._content_format = content_format
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueAttachmentContractProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueAttachmentContractProperties of this IssueAttachmentContractProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this IssueAttachmentContractProperties.

        An HTTP link or Base64-encoded binary data.

        :return: The content of this IssueAttachmentContractProperties.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this IssueAttachmentContractProperties.

        An HTTP link or Base64-encoded binary data.

        :param content: The content of this IssueAttachmentContractProperties.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def content_format(self):
        """Gets the content_format of this IssueAttachmentContractProperties.

        Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property.

        :return: The content_format of this IssueAttachmentContractProperties.
        :rtype: str
        """
        return self._content_format

    @content_format.setter
    def content_format(self, content_format):
        """Sets the content_format of this IssueAttachmentContractProperties.

        Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property.

        :param content_format: The content_format of this IssueAttachmentContractProperties.
        :type content_format: str
        """
        if content_format is None:
            raise ValueError("Invalid value for `content_format`, must not be `None`")

        self._content_format = content_format

    @property
    def title(self):
        """Gets the title of this IssueAttachmentContractProperties.

        Filename by which the binary data will be saved.

        :return: The title of this IssueAttachmentContractProperties.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this IssueAttachmentContractProperties.

        Filename by which the binary data will be saved.

        :param title: The title of this IssueAttachmentContractProperties.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
