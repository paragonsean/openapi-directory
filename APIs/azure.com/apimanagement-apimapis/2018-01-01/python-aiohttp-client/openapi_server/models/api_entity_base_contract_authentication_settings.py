# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_entity_base_contract_authentication_settings_o_auth2 import ApiEntityBaseContractAuthenticationSettingsOAuth2
from openapi_server.models.api_entity_base_contract_authentication_settings_openid import ApiEntityBaseContractAuthenticationSettingsOpenid
from openapi_server import util


class ApiEntityBaseContractAuthenticationSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, o_auth2: ApiEntityBaseContractAuthenticationSettingsOAuth2=None, openid: ApiEntityBaseContractAuthenticationSettingsOpenid=None, subscription_key_required: bool=None):
        """ApiEntityBaseContractAuthenticationSettings - a model defined in OpenAPI

        :param o_auth2: The o_auth2 of this ApiEntityBaseContractAuthenticationSettings.
        :param openid: The openid of this ApiEntityBaseContractAuthenticationSettings.
        :param subscription_key_required: The subscription_key_required of this ApiEntityBaseContractAuthenticationSettings.
        """
        self.openapi_types = {
            'o_auth2': ApiEntityBaseContractAuthenticationSettingsOAuth2,
            'openid': ApiEntityBaseContractAuthenticationSettingsOpenid,
            'subscription_key_required': bool
        }

        self.attribute_map = {
            'o_auth2': 'oAuth2',
            'openid': 'openid',
            'subscription_key_required': 'subscriptionKeyRequired'
        }

        self._o_auth2 = o_auth2
        self._openid = openid
        self._subscription_key_required = subscription_key_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiEntityBaseContractAuthenticationSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiEntityBaseContract_authenticationSettings of this ApiEntityBaseContractAuthenticationSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def o_auth2(self):
        """Gets the o_auth2 of this ApiEntityBaseContractAuthenticationSettings.


        :return: The o_auth2 of this ApiEntityBaseContractAuthenticationSettings.
        :rtype: ApiEntityBaseContractAuthenticationSettingsOAuth2
        """
        return self._o_auth2

    @o_auth2.setter
    def o_auth2(self, o_auth2):
        """Sets the o_auth2 of this ApiEntityBaseContractAuthenticationSettings.


        :param o_auth2: The o_auth2 of this ApiEntityBaseContractAuthenticationSettings.
        :type o_auth2: ApiEntityBaseContractAuthenticationSettingsOAuth2
        """

        self._o_auth2 = o_auth2

    @property
    def openid(self):
        """Gets the openid of this ApiEntityBaseContractAuthenticationSettings.


        :return: The openid of this ApiEntityBaseContractAuthenticationSettings.
        :rtype: ApiEntityBaseContractAuthenticationSettingsOpenid
        """
        return self._openid

    @openid.setter
    def openid(self, openid):
        """Sets the openid of this ApiEntityBaseContractAuthenticationSettings.


        :param openid: The openid of this ApiEntityBaseContractAuthenticationSettings.
        :type openid: ApiEntityBaseContractAuthenticationSettingsOpenid
        """

        self._openid = openid

    @property
    def subscription_key_required(self):
        """Gets the subscription_key_required of this ApiEntityBaseContractAuthenticationSettings.

        Specifies whether subscription key is required during call to this API, true - API is included into closed products only, false - API is included into open products alone, null - there is a mix of products.

        :return: The subscription_key_required of this ApiEntityBaseContractAuthenticationSettings.
        :rtype: bool
        """
        return self._subscription_key_required

    @subscription_key_required.setter
    def subscription_key_required(self, subscription_key_required):
        """Sets the subscription_key_required of this ApiEntityBaseContractAuthenticationSettings.

        Specifies whether subscription key is required during call to this API, true - API is included into closed products only, false - API is included into open products alone, null - there is a mix of products.

        :param subscription_key_required: The subscription_key_required of this ApiEntityBaseContractAuthenticationSettings.
        :type subscription_key_required: bool
        """

        self._subscription_key_required = subscription_key_required
