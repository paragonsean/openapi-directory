# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_contract import ParameterContract
from openapi_server.models.request_contract import RequestContract
from openapi_server.models.response_contract import ResponseContract
from openapi_server import util


class OperationUpdateContractProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, method: str=None, url_template: str=None, description: str=None, policies: str=None, request: RequestContract=None, responses: List[ResponseContract]=None, template_parameters: List[ParameterContract]=None):
        """OperationUpdateContractProperties - a model defined in OpenAPI

        :param display_name: The display_name of this OperationUpdateContractProperties.
        :param method: The method of this OperationUpdateContractProperties.
        :param url_template: The url_template of this OperationUpdateContractProperties.
        :param description: The description of this OperationUpdateContractProperties.
        :param policies: The policies of this OperationUpdateContractProperties.
        :param request: The request of this OperationUpdateContractProperties.
        :param responses: The responses of this OperationUpdateContractProperties.
        :param template_parameters: The template_parameters of this OperationUpdateContractProperties.
        """
        self.openapi_types = {
            'display_name': str,
            'method': str,
            'url_template': str,
            'description': str,
            'policies': str,
            'request': RequestContract,
            'responses': List[ResponseContract],
            'template_parameters': List[ParameterContract]
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'method': 'method',
            'url_template': 'urlTemplate',
            'description': 'description',
            'policies': 'policies',
            'request': 'request',
            'responses': 'responses',
            'template_parameters': 'templateParameters'
        }

        self._display_name = display_name
        self._method = method
        self._url_template = url_template
        self._description = description
        self._policies = policies
        self._request = request
        self._responses = responses
        self._template_parameters = template_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationUpdateContractProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationUpdateContractProperties of this OperationUpdateContractProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this OperationUpdateContractProperties.

        Operation Name.

        :return: The display_name of this OperationUpdateContractProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this OperationUpdateContractProperties.

        Operation Name.

        :param display_name: The display_name of this OperationUpdateContractProperties.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 300:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `300`")
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")

        self._display_name = display_name

    @property
    def method(self):
        """Gets the method of this OperationUpdateContractProperties.

        A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.

        :return: The method of this OperationUpdateContractProperties.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this OperationUpdateContractProperties.

        A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.

        :param method: The method of this OperationUpdateContractProperties.
        :type method: str
        """

        self._method = method

    @property
    def url_template(self):
        """Gets the url_template of this OperationUpdateContractProperties.

        Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}

        :return: The url_template of this OperationUpdateContractProperties.
        :rtype: str
        """
        return self._url_template

    @url_template.setter
    def url_template(self, url_template):
        """Sets the url_template of this OperationUpdateContractProperties.

        Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}

        :param url_template: The url_template of this OperationUpdateContractProperties.
        :type url_template: str
        """
        if url_template is not None and len(url_template) > 1000:
            raise ValueError("Invalid value for `url_template`, length must be less than or equal to `1000`")
        if url_template is not None and len(url_template) < 1:
            raise ValueError("Invalid value for `url_template`, length must be greater than or equal to `1`")

        self._url_template = url_template

    @property
    def description(self):
        """Gets the description of this OperationUpdateContractProperties.

        Description of the operation. May include HTML formatting tags.

        :return: The description of this OperationUpdateContractProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OperationUpdateContractProperties.

        Description of the operation. May include HTML formatting tags.

        :param description: The description of this OperationUpdateContractProperties.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")

        self._description = description

    @property
    def policies(self):
        """Gets the policies of this OperationUpdateContractProperties.

        Operation Policies

        :return: The policies of this OperationUpdateContractProperties.
        :rtype: str
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this OperationUpdateContractProperties.

        Operation Policies

        :param policies: The policies of this OperationUpdateContractProperties.
        :type policies: str
        """

        self._policies = policies

    @property
    def request(self):
        """Gets the request of this OperationUpdateContractProperties.


        :return: The request of this OperationUpdateContractProperties.
        :rtype: RequestContract
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this OperationUpdateContractProperties.


        :param request: The request of this OperationUpdateContractProperties.
        :type request: RequestContract
        """

        self._request = request

    @property
    def responses(self):
        """Gets the responses of this OperationUpdateContractProperties.

        Array of Operation responses.

        :return: The responses of this OperationUpdateContractProperties.
        :rtype: List[ResponseContract]
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this OperationUpdateContractProperties.

        Array of Operation responses.

        :param responses: The responses of this OperationUpdateContractProperties.
        :type responses: List[ResponseContract]
        """

        self._responses = responses

    @property
    def template_parameters(self):
        """Gets the template_parameters of this OperationUpdateContractProperties.

        Collection of URL template parameters.

        :return: The template_parameters of this OperationUpdateContractProperties.
        :rtype: List[ParameterContract]
        """
        return self._template_parameters

    @template_parameters.setter
    def template_parameters(self, template_parameters):
        """Sets the template_parameters of this OperationUpdateContractProperties.

        Collection of URL template parameters.

        :param template_parameters: The template_parameters of this OperationUpdateContractProperties.
        :type template_parameters: List[ParameterContract]
        """

        self._template_parameters = template_parameters
