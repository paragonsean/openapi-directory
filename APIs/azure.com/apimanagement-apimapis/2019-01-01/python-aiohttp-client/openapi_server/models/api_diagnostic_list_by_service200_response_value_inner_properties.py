# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_diagnostic_list_by_service200_response_value_inner_properties_backend import ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend
from openapi_server.models.api_diagnostic_list_by_service200_response_value_inner_properties_sampling import ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling
from openapi_server import util


class ApiDiagnosticListByService200ResponseValueInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, always_log: str=None, backend: ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend=None, enable_http_correlation_headers: bool=None, frontend: ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend=None, http_correlation_protocol: str=None, logger_id: str=None, sampling: ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling=None, verbosity: str=None):
        """ApiDiagnosticListByService200ResponseValueInnerProperties - a model defined in OpenAPI

        :param always_log: The always_log of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :param backend: The backend of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :param enable_http_correlation_headers: The enable_http_correlation_headers of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :param frontend: The frontend of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :param http_correlation_protocol: The http_correlation_protocol of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :param logger_id: The logger_id of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :param sampling: The sampling of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :param verbosity: The verbosity of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        """
        self.openapi_types = {
            'always_log': str,
            'backend': ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend,
            'enable_http_correlation_headers': bool,
            'frontend': ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend,
            'http_correlation_protocol': str,
            'logger_id': str,
            'sampling': ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling,
            'verbosity': str
        }

        self.attribute_map = {
            'always_log': 'alwaysLog',
            'backend': 'backend',
            'enable_http_correlation_headers': 'enableHttpCorrelationHeaders',
            'frontend': 'frontend',
            'http_correlation_protocol': 'httpCorrelationProtocol',
            'logger_id': 'loggerId',
            'sampling': 'sampling',
            'verbosity': 'verbosity'
        }

        self._always_log = always_log
        self._backend = backend
        self._enable_http_correlation_headers = enable_http_correlation_headers
        self._frontend = frontend
        self._http_correlation_protocol = http_correlation_protocol
        self._logger_id = logger_id
        self._sampling = sampling
        self._verbosity = verbosity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiDiagnosticListByService200ResponseValueInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiDiagnostic_ListByService_200_response_value_inner_properties of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def always_log(self):
        """Gets the always_log of this ApiDiagnosticListByService200ResponseValueInnerProperties.

        Specifies for what type of messages sampling settings should not apply.

        :return: The always_log of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._always_log

    @always_log.setter
    def always_log(self, always_log):
        """Sets the always_log of this ApiDiagnosticListByService200ResponseValueInnerProperties.

        Specifies for what type of messages sampling settings should not apply.

        :param always_log: The always_log of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :type always_log: str
        """
        allowed_values = ["allErrors"]  # noqa: E501
        if always_log not in allowed_values:
            raise ValueError(
                "Invalid value for `always_log` ({0}), must be one of {1}"
                .format(always_log, allowed_values)
            )

        self._always_log = always_log

    @property
    def backend(self):
        """Gets the backend of this ApiDiagnosticListByService200ResponseValueInnerProperties.


        :return: The backend of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :rtype: ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this ApiDiagnosticListByService200ResponseValueInnerProperties.


        :param backend: The backend of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :type backend: ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend
        """

        self._backend = backend

    @property
    def enable_http_correlation_headers(self):
        """Gets the enable_http_correlation_headers of this ApiDiagnosticListByService200ResponseValueInnerProperties.

        Whether to process Correlation Headers coming to Api Management Service. Only applicable to Application Insights diagnostics. Default is true.

        :return: The enable_http_correlation_headers of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :rtype: bool
        """
        return self._enable_http_correlation_headers

    @enable_http_correlation_headers.setter
    def enable_http_correlation_headers(self, enable_http_correlation_headers):
        """Sets the enable_http_correlation_headers of this ApiDiagnosticListByService200ResponseValueInnerProperties.

        Whether to process Correlation Headers coming to Api Management Service. Only applicable to Application Insights diagnostics. Default is true.

        :param enable_http_correlation_headers: The enable_http_correlation_headers of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :type enable_http_correlation_headers: bool
        """

        self._enable_http_correlation_headers = enable_http_correlation_headers

    @property
    def frontend(self):
        """Gets the frontend of this ApiDiagnosticListByService200ResponseValueInnerProperties.


        :return: The frontend of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :rtype: ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend
        """
        return self._frontend

    @frontend.setter
    def frontend(self, frontend):
        """Sets the frontend of this ApiDiagnosticListByService200ResponseValueInnerProperties.


        :param frontend: The frontend of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :type frontend: ApiDiagnosticListByService200ResponseValueInnerPropertiesBackend
        """

        self._frontend = frontend

    @property
    def http_correlation_protocol(self):
        """Gets the http_correlation_protocol of this ApiDiagnosticListByService200ResponseValueInnerProperties.

        Sets correlation protocol to use for Application Insights diagnostics.

        :return: The http_correlation_protocol of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._http_correlation_protocol

    @http_correlation_protocol.setter
    def http_correlation_protocol(self, http_correlation_protocol):
        """Sets the http_correlation_protocol of this ApiDiagnosticListByService200ResponseValueInnerProperties.

        Sets correlation protocol to use for Application Insights diagnostics.

        :param http_correlation_protocol: The http_correlation_protocol of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :type http_correlation_protocol: str
        """
        allowed_values = ["None", "Legacy", "W3C"]  # noqa: E501
        if http_correlation_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `http_correlation_protocol` ({0}), must be one of {1}"
                .format(http_correlation_protocol, allowed_values)
            )

        self._http_correlation_protocol = http_correlation_protocol

    @property
    def logger_id(self):
        """Gets the logger_id of this ApiDiagnosticListByService200ResponseValueInnerProperties.

        Resource Id of a target logger.

        :return: The logger_id of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._logger_id

    @logger_id.setter
    def logger_id(self, logger_id):
        """Sets the logger_id of this ApiDiagnosticListByService200ResponseValueInnerProperties.

        Resource Id of a target logger.

        :param logger_id: The logger_id of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :type logger_id: str
        """
        if logger_id is None:
            raise ValueError("Invalid value for `logger_id`, must not be `None`")

        self._logger_id = logger_id

    @property
    def sampling(self):
        """Gets the sampling of this ApiDiagnosticListByService200ResponseValueInnerProperties.


        :return: The sampling of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :rtype: ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling
        """
        return self._sampling

    @sampling.setter
    def sampling(self, sampling):
        """Sets the sampling of this ApiDiagnosticListByService200ResponseValueInnerProperties.


        :param sampling: The sampling of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :type sampling: ApiDiagnosticListByService200ResponseValueInnerPropertiesSampling
        """

        self._sampling = sampling

    @property
    def verbosity(self):
        """Gets the verbosity of this ApiDiagnosticListByService200ResponseValueInnerProperties.

        The verbosity level applied to traces emitted by trace policies.

        :return: The verbosity of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._verbosity

    @verbosity.setter
    def verbosity(self, verbosity):
        """Sets the verbosity of this ApiDiagnosticListByService200ResponseValueInnerProperties.

        The verbosity level applied to traces emitted by trace policies.

        :param verbosity: The verbosity of this ApiDiagnosticListByService200ResponseValueInnerProperties.
        :type verbosity: str
        """
        allowed_values = ["verbose", "information", "error"]  # noqa: E501
        if verbosity not in allowed_values:
            raise ValueError(
                "Invalid value for `verbosity` ({0}), must be one of {1}"
                .format(verbosity, allowed_values)
            )

        self._verbosity = verbosity
