# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiDiagnosticListByService200ResponseValueInnerPropertiesBackendRequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes: int=None):
        """ApiDiagnosticListByService200ResponseValueInnerPropertiesBackendRequestBody - a model defined in OpenAPI

        :param bytes: The bytes of this ApiDiagnosticListByService200ResponseValueInnerPropertiesBackendRequestBody.
        """
        self.openapi_types = {
            'bytes': int
        }

        self.attribute_map = {
            'bytes': 'bytes'
        }

        self._bytes = bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiDiagnosticListByService200ResponseValueInnerPropertiesBackendRequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body of this ApiDiagnosticListByService200ResponseValueInnerPropertiesBackendRequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes(self):
        """Gets the bytes of this ApiDiagnosticListByService200ResponseValueInnerPropertiesBackendRequestBody.

        Number of request body bytes to log.

        :return: The bytes of this ApiDiagnosticListByService200ResponseValueInnerPropertiesBackendRequestBody.
        :rtype: int
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this ApiDiagnosticListByService200ResponseValueInnerPropertiesBackendRequestBody.

        Number of request body bytes to log.

        :param bytes: The bytes of this ApiDiagnosticListByService200ResponseValueInnerPropertiesBackendRequestBody.
        :type bytes: int
        """
        if bytes is not None and bytes > 8192:
            raise ValueError("Invalid value for `bytes`, must be a value less than or equal to `8192`")

        self._bytes = bytes
