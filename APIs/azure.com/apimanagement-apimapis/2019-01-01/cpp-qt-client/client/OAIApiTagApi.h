/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiTagApi_H
#define OAI_OAIApiTagApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApi_ListByService_default_response.h"
#include "OAITag_GetByOperation_200_response.h"
#include "OAITag_ListByOperation_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiTagApi : public QObject {
    Q_OBJECT

public:
    OAIApiTagApi(const int timeOut = 0);
    ~OAIApiTagApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void tagAssignToApi(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &tag_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void tagDetachFromApi(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &tag_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void tagGetByApi(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &tag_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void tagGetEntityStateByApi(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &tag_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void tagListByApi(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tagAssignToApiCallback(OAIHttpRequestWorker *worker);
    void tagDetachFromApiCallback(OAIHttpRequestWorker *worker);
    void tagGetByApiCallback(OAIHttpRequestWorker *worker);
    void tagGetEntityStateByApiCallback(OAIHttpRequestWorker *worker);
    void tagListByApiCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tagAssignToApiSignal(OAITag_GetByOperation_200_response summary);
    void tagDetachFromApiSignal();
    void tagGetByApiSignal(OAITag_GetByOperation_200_response summary);
    void tagGetEntityStateByApiSignal();
    void tagListByApiSignal(OAITag_ListByOperation_200_response summary);


    void tagAssignToApiSignalFull(OAIHttpRequestWorker *worker, OAITag_GetByOperation_200_response summary);
    void tagDetachFromApiSignalFull(OAIHttpRequestWorker *worker);
    void tagGetByApiSignalFull(OAIHttpRequestWorker *worker, OAITag_GetByOperation_200_response summary);
    void tagGetEntityStateByApiSignalFull(OAIHttpRequestWorker *worker);
    void tagListByApiSignalFull(OAIHttpRequestWorker *worker, OAITag_ListByOperation_200_response summary);

    Q_DECL_DEPRECATED_X("Use tagAssignToApiSignalError() instead")
    void tagAssignToApiSignalE(OAITag_GetByOperation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagAssignToApiSignalError(OAITag_GetByOperation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagDetachFromApiSignalError() instead")
    void tagDetachFromApiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagDetachFromApiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagGetByApiSignalError() instead")
    void tagGetByApiSignalE(OAITag_GetByOperation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagGetByApiSignalError(OAITag_GetByOperation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagGetEntityStateByApiSignalError() instead")
    void tagGetEntityStateByApiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagGetEntityStateByApiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagListByApiSignalError() instead")
    void tagListByApiSignalE(OAITag_ListByOperation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagListByApiSignalError(OAITag_ListByOperation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tagAssignToApiSignalErrorFull() instead")
    void tagAssignToApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagAssignToApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagDetachFromApiSignalErrorFull() instead")
    void tagDetachFromApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagDetachFromApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagGetByApiSignalErrorFull() instead")
    void tagGetByApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagGetByApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagGetEntityStateByApiSignalErrorFull() instead")
    void tagGetEntityStateByApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagGetEntityStateByApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagListByApiSignalErrorFull() instead")
    void tagListByApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagListByApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
