/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiOperationPolicyApi_H
#define OAI_OAIApiOperationPolicyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiOperationPolicy_Get_200_response.h"
#include "OAIApiOperationPolicy_ListByOperation_200_response.h"
#include "OAIApi_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiOperationPolicyApi : public QObject {
    Q_OBJECT

public:
    OAIApiOperationPolicyApi(const int timeOut = 0);
    ~OAIApiOperationPolicyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiOperationPolicy_Get_200_response [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void apiOperationPolicyCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &operation_id, const QString &policy_id, const QString &api_version, const QString &subscription_id, const OAIApiOperationPolicy_Get_200_response &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiOperationPolicyDelete(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &operation_id, const QString &policy_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void apiOperationPolicyGet(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &operation_id, const QString &policy_id, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiOperationPolicyGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &operation_id, const QString &policy_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiOperationPolicyListByOperation(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &operation_id, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiOperationPolicyCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void apiOperationPolicyDeleteCallback(OAIHttpRequestWorker *worker);
    void apiOperationPolicyGetCallback(OAIHttpRequestWorker *worker);
    void apiOperationPolicyGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void apiOperationPolicyListByOperationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiOperationPolicyCreateOrUpdateSignal(OAIApiOperationPolicy_Get_200_response summary);
    void apiOperationPolicyDeleteSignal();
    void apiOperationPolicyGetSignal(OAIApiOperationPolicy_Get_200_response summary);
    void apiOperationPolicyGetEntityTagSignal();
    void apiOperationPolicyListByOperationSignal(OAIApiOperationPolicy_ListByOperation_200_response summary);


    void apiOperationPolicyCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiOperationPolicy_Get_200_response summary);
    void apiOperationPolicyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiOperationPolicyGetSignalFull(OAIHttpRequestWorker *worker, OAIApiOperationPolicy_Get_200_response summary);
    void apiOperationPolicyGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void apiOperationPolicyListByOperationSignalFull(OAIHttpRequestWorker *worker, OAIApiOperationPolicy_ListByOperation_200_response summary);

    Q_DECL_DEPRECATED_X("Use apiOperationPolicyCreateOrUpdateSignalError() instead")
    void apiOperationPolicyCreateOrUpdateSignalE(OAIApiOperationPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationPolicyCreateOrUpdateSignalError(OAIApiOperationPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationPolicyDeleteSignalError() instead")
    void apiOperationPolicyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationPolicyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationPolicyGetSignalError() instead")
    void apiOperationPolicyGetSignalE(OAIApiOperationPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationPolicyGetSignalError(OAIApiOperationPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationPolicyGetEntityTagSignalError() instead")
    void apiOperationPolicyGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationPolicyGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationPolicyListByOperationSignalError() instead")
    void apiOperationPolicyListByOperationSignalE(OAIApiOperationPolicy_ListByOperation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationPolicyListByOperationSignalError(OAIApiOperationPolicy_ListByOperation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiOperationPolicyCreateOrUpdateSignalErrorFull() instead")
    void apiOperationPolicyCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationPolicyCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationPolicyDeleteSignalErrorFull() instead")
    void apiOperationPolicyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationPolicyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationPolicyGetSignalErrorFull() instead")
    void apiOperationPolicyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationPolicyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationPolicyGetEntityTagSignalErrorFull() instead")
    void apiOperationPolicyGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationPolicyGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiOperationPolicyListByOperationSignalErrorFull() instead")
    void apiOperationPolicyListByOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiOperationPolicyListByOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
