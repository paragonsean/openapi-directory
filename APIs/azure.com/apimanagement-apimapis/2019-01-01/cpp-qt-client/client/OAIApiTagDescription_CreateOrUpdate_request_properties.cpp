/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiTagDescription_CreateOrUpdate_request_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiTagDescription_CreateOrUpdate_request_properties::OAIApiTagDescription_CreateOrUpdate_request_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiTagDescription_CreateOrUpdate_request_properties::OAIApiTagDescription_CreateOrUpdate_request_properties() {
    this->initializeModel();
}

OAIApiTagDescription_CreateOrUpdate_request_properties::~OAIApiTagDescription_CreateOrUpdate_request_properties() {}

void OAIApiTagDescription_CreateOrUpdate_request_properties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_docs_description_isSet = false;
    m_external_docs_description_isValid = false;

    m_external_docs_url_isSet = false;
    m_external_docs_url_isValid = false;
}

void OAIApiTagDescription_CreateOrUpdate_request_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiTagDescription_CreateOrUpdate_request_properties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_docs_description_isValid = ::OpenAPI::fromJsonValue(m_external_docs_description, json[QString("externalDocsDescription")]);
    m_external_docs_description_isSet = !json[QString("externalDocsDescription")].isNull() && m_external_docs_description_isValid;

    m_external_docs_url_isValid = ::OpenAPI::fromJsonValue(m_external_docs_url, json[QString("externalDocsUrl")]);
    m_external_docs_url_isSet = !json[QString("externalDocsUrl")].isNull() && m_external_docs_url_isValid;
}

QString OAIApiTagDescription_CreateOrUpdate_request_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiTagDescription_CreateOrUpdate_request_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_docs_description_isSet) {
        obj.insert(QString("externalDocsDescription"), ::OpenAPI::toJsonValue(m_external_docs_description));
    }
    if (m_external_docs_url_isSet) {
        obj.insert(QString("externalDocsUrl"), ::OpenAPI::toJsonValue(m_external_docs_url));
    }
    return obj;
}

QString OAIApiTagDescription_CreateOrUpdate_request_properties::getDescription() const {
    return m_description;
}
void OAIApiTagDescription_CreateOrUpdate_request_properties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiTagDescription_CreateOrUpdate_request_properties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiTagDescription_CreateOrUpdate_request_properties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApiTagDescription_CreateOrUpdate_request_properties::getExternalDocsDescription() const {
    return m_external_docs_description;
}
void OAIApiTagDescription_CreateOrUpdate_request_properties::setExternalDocsDescription(const QString &external_docs_description) {
    m_external_docs_description = external_docs_description;
    m_external_docs_description_isSet = true;
}

bool OAIApiTagDescription_CreateOrUpdate_request_properties::is_external_docs_description_Set() const{
    return m_external_docs_description_isSet;
}

bool OAIApiTagDescription_CreateOrUpdate_request_properties::is_external_docs_description_Valid() const{
    return m_external_docs_description_isValid;
}

QString OAIApiTagDescription_CreateOrUpdate_request_properties::getExternalDocsUrl() const {
    return m_external_docs_url;
}
void OAIApiTagDescription_CreateOrUpdate_request_properties::setExternalDocsUrl(const QString &external_docs_url) {
    m_external_docs_url = external_docs_url;
    m_external_docs_url_isSet = true;
}

bool OAIApiTagDescription_CreateOrUpdate_request_properties::is_external_docs_url_Set() const{
    return m_external_docs_url_isSet;
}

bool OAIApiTagDescription_CreateOrUpdate_request_properties::is_external_docs_url_Valid() const{
    return m_external_docs_url_isValid;
}

bool OAIApiTagDescription_CreateOrUpdate_request_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_docs_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_docs_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiTagDescription_CreateOrUpdate_request_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
