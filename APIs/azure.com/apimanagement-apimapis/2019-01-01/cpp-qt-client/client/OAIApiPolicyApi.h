/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiPolicyApi_H
#define OAI_OAIApiPolicyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiOperationPolicy_Get_200_response.h"
#include "OAIApiOperationPolicy_ListByOperation_200_response.h"
#include "OAIApi_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiPolicyApi : public QObject {
    Q_OBJECT

public:
    OAIApiPolicyApi(const int timeOut = 0);
    ~OAIApiPolicyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiOperationPolicy_Get_200_response [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void apiPolicyCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &policy_id, const QString &api_version, const QString &subscription_id, const OAIApiOperationPolicy_Get_200_response &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiPolicyDelete(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &policy_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void apiPolicyGet(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &policy_id, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiPolicyGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &policy_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiPolicyListByApi(const QString &resource_group_name, const QString &service_name, const QString &api_id, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiPolicyCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void apiPolicyDeleteCallback(OAIHttpRequestWorker *worker);
    void apiPolicyGetCallback(OAIHttpRequestWorker *worker);
    void apiPolicyGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void apiPolicyListByApiCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiPolicyCreateOrUpdateSignal(OAIApiOperationPolicy_Get_200_response summary);
    void apiPolicyDeleteSignal();
    void apiPolicyGetSignal(OAIApiOperationPolicy_Get_200_response summary);
    void apiPolicyGetEntityTagSignal();
    void apiPolicyListByApiSignal(OAIApiOperationPolicy_ListByOperation_200_response summary);


    void apiPolicyCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiOperationPolicy_Get_200_response summary);
    void apiPolicyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiPolicyGetSignalFull(OAIHttpRequestWorker *worker, OAIApiOperationPolicy_Get_200_response summary);
    void apiPolicyGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void apiPolicyListByApiSignalFull(OAIHttpRequestWorker *worker, OAIApiOperationPolicy_ListByOperation_200_response summary);

    Q_DECL_DEPRECATED_X("Use apiPolicyCreateOrUpdateSignalError() instead")
    void apiPolicyCreateOrUpdateSignalE(OAIApiOperationPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyCreateOrUpdateSignalError(OAIApiOperationPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPolicyDeleteSignalError() instead")
    void apiPolicyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPolicyGetSignalError() instead")
    void apiPolicyGetSignalE(OAIApiOperationPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyGetSignalError(OAIApiOperationPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPolicyGetEntityTagSignalError() instead")
    void apiPolicyGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPolicyListByApiSignalError() instead")
    void apiPolicyListByApiSignalE(OAIApiOperationPolicy_ListByOperation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyListByApiSignalError(OAIApiOperationPolicy_ListByOperation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiPolicyCreateOrUpdateSignalErrorFull() instead")
    void apiPolicyCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPolicyDeleteSignalErrorFull() instead")
    void apiPolicyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPolicyGetSignalErrorFull() instead")
    void apiPolicyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPolicyGetEntityTagSignalErrorFull() instead")
    void apiPolicyGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiPolicyListByApiSignalErrorFull() instead")
    void apiPolicyListByApiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyListByApiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
