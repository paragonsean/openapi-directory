/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on API entity and their Operations associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiIssue_ListByService_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiIssue_ListByService_200_response_value_inner_properties::OAIApiIssue_ListByService_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiIssue_ListByService_200_response_value_inner_properties::OAIApiIssue_ListByService_200_response_value_inner_properties() {
    this->initializeModel();
}

OAIApiIssue_ListByService_200_response_value_inner_properties::~OAIApiIssue_ListByService_200_response_value_inner_properties() {}

void OAIApiIssue_ListByService_200_response_value_inner_properties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIApiIssue_ListByService_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiIssue_ListByService_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIApiIssue_ListByService_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiIssue_ListByService_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIApiIssue_ListByService_200_response_value_inner_properties::getDescription() const {
    return m_description;
}
void OAIApiIssue_ListByService_200_response_value_inner_properties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiIssue_ListByService_200_response_value_inner_properties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiIssue_ListByService_200_response_value_inner_properties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApiIssue_ListByService_200_response_value_inner_properties::getTitle() const {
    return m_title;
}
void OAIApiIssue_ListByService_200_response_value_inner_properties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIApiIssue_ListByService_200_response_value_inner_properties::is_title_Set() const{
    return m_title_isSet;
}

bool OAIApiIssue_ListByService_200_response_value_inner_properties::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIApiIssue_ListByService_200_response_value_inner_properties::getUserId() const {
    return m_user_id;
}
void OAIApiIssue_ListByService_200_response_value_inner_properties::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIApiIssue_ListByService_200_response_value_inner_properties::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIApiIssue_ListByService_200_response_value_inner_properties::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIApiIssue_ListByService_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiIssue_ListByService_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_title_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
