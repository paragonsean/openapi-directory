/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWatcherApi_H
#define OAI_OAIWatcherApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWatcher.h"
#include "OAIWatcherListResult.h"
#include "OAIWatcherUpdateParameters.h"
#include "OAIWatcher_ListByAutomationAccount_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWatcherApi : public QObject {
    Q_OBJECT

public:
    OAIWatcherApi(const int timeOut = 0);
    ~OAIWatcherApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  watcher_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIWatcher [required]
    */
    virtual void watcherCreateOrUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &watcher_name, const QString &subscription_id, const QString &api_version, const OAIWatcher &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  watcher_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void watcherDelete(const QString &resource_group_name, const QString &automation_account_name, const QString &watcher_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  watcher_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void watcherGet(const QString &resource_group_name, const QString &automation_account_name, const QString &watcher_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void watcherListByAutomationAccount(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  watcher_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void watcherStart(const QString &resource_group_name, const QString &automation_account_name, const QString &watcher_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  watcher_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void watcherStop(const QString &resource_group_name, const QString &automation_account_name, const QString &watcher_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  watcher_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIWatcherUpdateParameters [required]
    */
    virtual void watcherUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &watcher_name, const QString &subscription_id, const QString &api_version, const OAIWatcherUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void watcherCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void watcherDeleteCallback(OAIHttpRequestWorker *worker);
    void watcherGetCallback(OAIHttpRequestWorker *worker);
    void watcherListByAutomationAccountCallback(OAIHttpRequestWorker *worker);
    void watcherStartCallback(OAIHttpRequestWorker *worker);
    void watcherStopCallback(OAIHttpRequestWorker *worker);
    void watcherUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void watcherCreateOrUpdateSignal(OAIWatcher summary);
    void watcherDeleteSignal();
    void watcherGetSignal(OAIWatcher summary);
    void watcherListByAutomationAccountSignal(OAIWatcherListResult summary);
    void watcherStartSignal();
    void watcherStopSignal();
    void watcherUpdateSignal(OAIWatcher summary);


    void watcherCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWatcher summary);
    void watcherDeleteSignalFull(OAIHttpRequestWorker *worker);
    void watcherGetSignalFull(OAIHttpRequestWorker *worker, OAIWatcher summary);
    void watcherListByAutomationAccountSignalFull(OAIHttpRequestWorker *worker, OAIWatcherListResult summary);
    void watcherStartSignalFull(OAIHttpRequestWorker *worker);
    void watcherStopSignalFull(OAIHttpRequestWorker *worker);
    void watcherUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWatcher summary);

    Q_DECL_DEPRECATED_X("Use watcherCreateOrUpdateSignalError() instead")
    void watcherCreateOrUpdateSignalE(OAIWatcher summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherCreateOrUpdateSignalError(OAIWatcher summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherDeleteSignalError() instead")
    void watcherDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void watcherDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherGetSignalError() instead")
    void watcherGetSignalE(OAIWatcher summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherGetSignalError(OAIWatcher summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherListByAutomationAccountSignalError() instead")
    void watcherListByAutomationAccountSignalE(OAIWatcherListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherListByAutomationAccountSignalError(OAIWatcherListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherStartSignalError() instead")
    void watcherStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void watcherStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherStopSignalError() instead")
    void watcherStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void watcherStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherUpdateSignalError() instead")
    void watcherUpdateSignalE(OAIWatcher summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherUpdateSignalError(OAIWatcher summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use watcherCreateOrUpdateSignalErrorFull() instead")
    void watcherCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherDeleteSignalErrorFull() instead")
    void watcherDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherGetSignalErrorFull() instead")
    void watcherGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherListByAutomationAccountSignalErrorFull() instead")
    void watcherListByAutomationAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherListByAutomationAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherStartSignalErrorFull() instead")
    void watcherStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherStopSignalErrorFull() instead")
    void watcherStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watcherUpdateSignalErrorFull() instead")
    void watcherUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watcherUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
