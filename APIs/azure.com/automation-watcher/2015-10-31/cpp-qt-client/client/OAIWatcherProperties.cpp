/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatcherProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatcherProperties::OAIWatcherProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatcherProperties::OAIWatcherProperties() {
    this->initializeModel();
}

OAIWatcherProperties::~OAIWatcherProperties() {}

void OAIWatcherProperties::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_execution_frequency_in_seconds_isSet = false;
    m_execution_frequency_in_seconds_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_script_name_isSet = false;
    m_script_name_isValid = false;

    m_script_parameters_isSet = false;
    m_script_parameters_isValid = false;

    m_script_run_on_isSet = false;
    m_script_run_on_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIWatcherProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatcherProperties::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_execution_frequency_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_execution_frequency_in_seconds, json[QString("executionFrequencyInSeconds")]);
    m_execution_frequency_in_seconds_isSet = !json[QString("executionFrequencyInSeconds")].isNull() && m_execution_frequency_in_seconds_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("lastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("lastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_script_name_isValid = ::OpenAPI::fromJsonValue(m_script_name, json[QString("scriptName")]);
    m_script_name_isSet = !json[QString("scriptName")].isNull() && m_script_name_isValid;

    m_script_parameters_isValid = ::OpenAPI::fromJsonValue(m_script_parameters, json[QString("scriptParameters")]);
    m_script_parameters_isSet = !json[QString("scriptParameters")].isNull() && m_script_parameters_isValid;

    m_script_run_on_isValid = ::OpenAPI::fromJsonValue(m_script_run_on, json[QString("scriptRunOn")]);
    m_script_run_on_isSet = !json[QString("scriptRunOn")].isNull() && m_script_run_on_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIWatcherProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatcherProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_execution_frequency_in_seconds_isSet) {
        obj.insert(QString("executionFrequencyInSeconds"), ::OpenAPI::toJsonValue(m_execution_frequency_in_seconds));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("lastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_script_name_isSet) {
        obj.insert(QString("scriptName"), ::OpenAPI::toJsonValue(m_script_name));
    }
    if (m_script_parameters.size() > 0) {
        obj.insert(QString("scriptParameters"), ::OpenAPI::toJsonValue(m_script_parameters));
    }
    if (m_script_run_on_isSet) {
        obj.insert(QString("scriptRunOn"), ::OpenAPI::toJsonValue(m_script_run_on));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIWatcherProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIWatcherProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIWatcherProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIWatcherProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIWatcherProperties::getDescription() const {
    return m_description;
}
void OAIWatcherProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWatcherProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWatcherProperties::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIWatcherProperties::getExecutionFrequencyInSeconds() const {
    return m_execution_frequency_in_seconds;
}
void OAIWatcherProperties::setExecutionFrequencyInSeconds(const qint64 &execution_frequency_in_seconds) {
    m_execution_frequency_in_seconds = execution_frequency_in_seconds;
    m_execution_frequency_in_seconds_isSet = true;
}

bool OAIWatcherProperties::is_execution_frequency_in_seconds_Set() const{
    return m_execution_frequency_in_seconds_isSet;
}

bool OAIWatcherProperties::is_execution_frequency_in_seconds_Valid() const{
    return m_execution_frequency_in_seconds_isValid;
}

QString OAIWatcherProperties::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIWatcherProperties::setLastModifiedBy(const QString &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIWatcherProperties::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIWatcherProperties::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QDateTime OAIWatcherProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIWatcherProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIWatcherProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIWatcherProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIWatcherProperties::getScriptName() const {
    return m_script_name;
}
void OAIWatcherProperties::setScriptName(const QString &script_name) {
    m_script_name = script_name;
    m_script_name_isSet = true;
}

bool OAIWatcherProperties::is_script_name_Set() const{
    return m_script_name_isSet;
}

bool OAIWatcherProperties::is_script_name_Valid() const{
    return m_script_name_isValid;
}

QMap<QString, QString> OAIWatcherProperties::getScriptParameters() const {
    return m_script_parameters;
}
void OAIWatcherProperties::setScriptParameters(const QMap<QString, QString> &script_parameters) {
    m_script_parameters = script_parameters;
    m_script_parameters_isSet = true;
}

bool OAIWatcherProperties::is_script_parameters_Set() const{
    return m_script_parameters_isSet;
}

bool OAIWatcherProperties::is_script_parameters_Valid() const{
    return m_script_parameters_isValid;
}

QString OAIWatcherProperties::getScriptRunOn() const {
    return m_script_run_on;
}
void OAIWatcherProperties::setScriptRunOn(const QString &script_run_on) {
    m_script_run_on = script_run_on;
    m_script_run_on_isSet = true;
}

bool OAIWatcherProperties::is_script_run_on_Set() const{
    return m_script_run_on_isSet;
}

bool OAIWatcherProperties::is_script_run_on_Valid() const{
    return m_script_run_on_isValid;
}

QString OAIWatcherProperties::getStatus() const {
    return m_status;
}
void OAIWatcherProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWatcherProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWatcherProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIWatcherProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_frequency_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_run_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatcherProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
