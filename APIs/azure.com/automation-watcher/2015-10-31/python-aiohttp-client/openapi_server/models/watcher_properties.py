# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WatcherProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, description: str=None, execution_frequency_in_seconds: int=None, last_modified_by: str=None, last_modified_time: datetime=None, script_name: str=None, script_parameters: Dict[str, str]=None, script_run_on: str=None, status: str=None):
        """WatcherProperties - a model defined in OpenAPI

        :param creation_time: The creation_time of this WatcherProperties.
        :param description: The description of this WatcherProperties.
        :param execution_frequency_in_seconds: The execution_frequency_in_seconds of this WatcherProperties.
        :param last_modified_by: The last_modified_by of this WatcherProperties.
        :param last_modified_time: The last_modified_time of this WatcherProperties.
        :param script_name: The script_name of this WatcherProperties.
        :param script_parameters: The script_parameters of this WatcherProperties.
        :param script_run_on: The script_run_on of this WatcherProperties.
        :param status: The status of this WatcherProperties.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'description': str,
            'execution_frequency_in_seconds': int,
            'last_modified_by': str,
            'last_modified_time': datetime,
            'script_name': str,
            'script_parameters': Dict[str, str],
            'script_run_on': str,
            'status': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'description': 'description',
            'execution_frequency_in_seconds': 'executionFrequencyInSeconds',
            'last_modified_by': 'lastModifiedBy',
            'last_modified_time': 'lastModifiedTime',
            'script_name': 'scriptName',
            'script_parameters': 'scriptParameters',
            'script_run_on': 'scriptRunOn',
            'status': 'status'
        }

        self._creation_time = creation_time
        self._description = description
        self._execution_frequency_in_seconds = execution_frequency_in_seconds
        self._last_modified_by = last_modified_by
        self._last_modified_time = last_modified_time
        self._script_name = script_name
        self._script_parameters = script_parameters
        self._script_run_on = script_run_on
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WatcherProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WatcherProperties of this WatcherProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this WatcherProperties.

        Gets or sets the creation time.

        :return: The creation_time of this WatcherProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this WatcherProperties.

        Gets or sets the creation time.

        :param creation_time: The creation_time of this WatcherProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this WatcherProperties.

        Gets or sets the description.

        :return: The description of this WatcherProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WatcherProperties.

        Gets or sets the description.

        :param description: The description of this WatcherProperties.
        :type description: str
        """

        self._description = description

    @property
    def execution_frequency_in_seconds(self):
        """Gets the execution_frequency_in_seconds of this WatcherProperties.

        Gets or sets the frequency at which the watcher is invoked.

        :return: The execution_frequency_in_seconds of this WatcherProperties.
        :rtype: int
        """
        return self._execution_frequency_in_seconds

    @execution_frequency_in_seconds.setter
    def execution_frequency_in_seconds(self, execution_frequency_in_seconds):
        """Sets the execution_frequency_in_seconds of this WatcherProperties.

        Gets or sets the frequency at which the watcher is invoked.

        :param execution_frequency_in_seconds: The execution_frequency_in_seconds of this WatcherProperties.
        :type execution_frequency_in_seconds: int
        """

        self._execution_frequency_in_seconds = execution_frequency_in_seconds

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this WatcherProperties.

        Details of the user who last modified the watcher.

        :return: The last_modified_by of this WatcherProperties.
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this WatcherProperties.

        Details of the user who last modified the watcher.

        :param last_modified_by: The last_modified_by of this WatcherProperties.
        :type last_modified_by: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this WatcherProperties.

        Gets or sets the last modified time.

        :return: The last_modified_time of this WatcherProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this WatcherProperties.

        Gets or sets the last modified time.

        :param last_modified_time: The last_modified_time of this WatcherProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def script_name(self):
        """Gets the script_name of this WatcherProperties.

        Gets or sets the name of the script the watcher is attached to, i.e. the name of an existing runbook.

        :return: The script_name of this WatcherProperties.
        :rtype: str
        """
        return self._script_name

    @script_name.setter
    def script_name(self, script_name):
        """Sets the script_name of this WatcherProperties.

        Gets or sets the name of the script the watcher is attached to, i.e. the name of an existing runbook.

        :param script_name: The script_name of this WatcherProperties.
        :type script_name: str
        """

        self._script_name = script_name

    @property
    def script_parameters(self):
        """Gets the script_parameters of this WatcherProperties.

        Gets or sets the parameters of the script.

        :return: The script_parameters of this WatcherProperties.
        :rtype: Dict[str, str]
        """
        return self._script_parameters

    @script_parameters.setter
    def script_parameters(self, script_parameters):
        """Sets the script_parameters of this WatcherProperties.

        Gets or sets the parameters of the script.

        :param script_parameters: The script_parameters of this WatcherProperties.
        :type script_parameters: Dict[str, str]
        """

        self._script_parameters = script_parameters

    @property
    def script_run_on(self):
        """Gets the script_run_on of this WatcherProperties.

        Gets or sets the name of the hybrid worker group the watcher will run on.

        :return: The script_run_on of this WatcherProperties.
        :rtype: str
        """
        return self._script_run_on

    @script_run_on.setter
    def script_run_on(self, script_run_on):
        """Sets the script_run_on of this WatcherProperties.

        Gets or sets the name of the hybrid worker group the watcher will run on.

        :param script_run_on: The script_run_on of this WatcherProperties.
        :type script_run_on: str
        """

        self._script_run_on = script_run_on

    @property
    def status(self):
        """Gets the status of this WatcherProperties.

        Gets the current status of the watcher.

        :return: The status of this WatcherProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WatcherProperties.

        Gets the current status of the watcher.

        :param status: The status of this WatcherProperties.
        :type status: str
        """

        self._status = status
