/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of the watcher properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:52:04.108016-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WatcherProperties {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXECUTION_FREQUENCY_IN_SECONDS = "executionFrequencyInSeconds";
  @SerializedName(SERIALIZED_NAME_EXECUTION_FREQUENCY_IN_SECONDS)
  private Long executionFrequencyInSeconds;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BY = "lastModifiedBy";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BY)
  private String lastModifiedBy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_SCRIPT_NAME = "scriptName";
  @SerializedName(SERIALIZED_NAME_SCRIPT_NAME)
  private String scriptName;

  public static final String SERIALIZED_NAME_SCRIPT_PARAMETERS = "scriptParameters";
  @SerializedName(SERIALIZED_NAME_SCRIPT_PARAMETERS)
  private Map<String, String> scriptParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_SCRIPT_RUN_ON = "scriptRunOn";
  @SerializedName(SERIALIZED_NAME_SCRIPT_RUN_ON)
  private String scriptRunOn;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public WatcherProperties() {
  }

  public WatcherProperties(
     OffsetDateTime creationTime, 
     String lastModifiedBy, 
     OffsetDateTime lastModifiedTime, 
     String status
  ) {
    this();
    this.creationTime = creationTime;
    this.lastModifiedBy = lastModifiedBy;
    this.lastModifiedTime = lastModifiedTime;
    this.status = status;
  }

  /**
   * Gets or sets the creation time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  public WatcherProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets the description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WatcherProperties executionFrequencyInSeconds(Long executionFrequencyInSeconds) {
    this.executionFrequencyInSeconds = executionFrequencyInSeconds;
    return this;
  }

  /**
   * Gets or sets the frequency at which the watcher is invoked.
   * @return executionFrequencyInSeconds
   */
  @javax.annotation.Nullable
  public Long getExecutionFrequencyInSeconds() {
    return executionFrequencyInSeconds;
  }

  public void setExecutionFrequencyInSeconds(Long executionFrequencyInSeconds) {
    this.executionFrequencyInSeconds = executionFrequencyInSeconds;
  }


  /**
   * Details of the user who last modified the watcher.
   * @return lastModifiedBy
   */
  @javax.annotation.Nullable
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }



  /**
   * Gets or sets the last modified time.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }



  public WatcherProperties scriptName(String scriptName) {
    this.scriptName = scriptName;
    return this;
  }

  /**
   * Gets or sets the name of the script the watcher is attached to, i.e. the name of an existing runbook.
   * @return scriptName
   */
  @javax.annotation.Nullable
  public String getScriptName() {
    return scriptName;
  }

  public void setScriptName(String scriptName) {
    this.scriptName = scriptName;
  }


  public WatcherProperties scriptParameters(Map<String, String> scriptParameters) {
    this.scriptParameters = scriptParameters;
    return this;
  }

  public WatcherProperties putScriptParametersItem(String key, String scriptParametersItem) {
    if (this.scriptParameters == null) {
      this.scriptParameters = new HashMap<>();
    }
    this.scriptParameters.put(key, scriptParametersItem);
    return this;
  }

  /**
   * Gets or sets the parameters of the script.
   * @return scriptParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getScriptParameters() {
    return scriptParameters;
  }

  public void setScriptParameters(Map<String, String> scriptParameters) {
    this.scriptParameters = scriptParameters;
  }


  public WatcherProperties scriptRunOn(String scriptRunOn) {
    this.scriptRunOn = scriptRunOn;
    return this;
  }

  /**
   * Gets or sets the name of the hybrid worker group the watcher will run on.
   * @return scriptRunOn
   */
  @javax.annotation.Nullable
  public String getScriptRunOn() {
    return scriptRunOn;
  }

  public void setScriptRunOn(String scriptRunOn) {
    this.scriptRunOn = scriptRunOn;
  }


  /**
   * Gets the current status of the watcher.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatcherProperties watcherProperties = (WatcherProperties) o;
    return Objects.equals(this.creationTime, watcherProperties.creationTime) &&
        Objects.equals(this.description, watcherProperties.description) &&
        Objects.equals(this.executionFrequencyInSeconds, watcherProperties.executionFrequencyInSeconds) &&
        Objects.equals(this.lastModifiedBy, watcherProperties.lastModifiedBy) &&
        Objects.equals(this.lastModifiedTime, watcherProperties.lastModifiedTime) &&
        Objects.equals(this.scriptName, watcherProperties.scriptName) &&
        Objects.equals(this.scriptParameters, watcherProperties.scriptParameters) &&
        Objects.equals(this.scriptRunOn, watcherProperties.scriptRunOn) &&
        Objects.equals(this.status, watcherProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, description, executionFrequencyInSeconds, lastModifiedBy, lastModifiedTime, scriptName, scriptParameters, scriptRunOn, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatcherProperties {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    executionFrequencyInSeconds: ").append(toIndentedString(executionFrequencyInSeconds)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    scriptName: ").append(toIndentedString(scriptName)).append("\n");
    sb.append("    scriptParameters: ").append(toIndentedString(scriptParameters)).append("\n");
    sb.append("    scriptRunOn: ").append(toIndentedString(scriptRunOn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("description");
    openapiFields.add("executionFrequencyInSeconds");
    openapiFields.add("lastModifiedBy");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("scriptName");
    openapiFields.add("scriptParameters");
    openapiFields.add("scriptRunOn");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WatcherProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WatcherProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WatcherProperties is not found in the empty JSON string", WatcherProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WatcherProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WatcherProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("lastModifiedBy") != null && !jsonObj.get("lastModifiedBy").isJsonNull()) && !jsonObj.get("lastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBy").toString()));
      }
      if ((jsonObj.get("scriptName") != null && !jsonObj.get("scriptName").isJsonNull()) && !jsonObj.get("scriptName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptName").toString()));
      }
      if ((jsonObj.get("scriptRunOn") != null && !jsonObj.get("scriptRunOn").isJsonNull()) && !jsonObj.get("scriptRunOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptRunOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptRunOn").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WatcherProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WatcherProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WatcherProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WatcherProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WatcherProperties>() {
           @Override
           public void write(JsonWriter out, WatcherProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WatcherProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WatcherProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WatcherProperties
   * @throws IOException if the JSON string is invalid with respect to WatcherProperties
   */
  public static WatcherProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WatcherProperties.class);
  }

  /**
   * Convert an instance of WatcherProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

