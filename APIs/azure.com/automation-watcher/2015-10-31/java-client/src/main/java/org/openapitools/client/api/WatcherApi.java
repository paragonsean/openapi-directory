/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Watcher;
import org.openapitools.client.model.WatcherListByAutomationAccountDefaultResponse;
import org.openapitools.client.model.WatcherListResult;
import org.openapitools.client.model.WatcherUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WatcherApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WatcherApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WatcherApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for watcherCreateOrUpdate
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The create or update parameters for watcher. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherCreateOrUpdateCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, Watcher parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "watcherName" + "}", localVarApiClient.escapeString(watcherName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watcherCreateOrUpdateValidateBeforeCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, Watcher parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling watcherCreateOrUpdate(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling watcherCreateOrUpdate(Async)");
        }

        // verify the required parameter 'watcherName' is set
        if (watcherName == null) {
            throw new ApiException("Missing the required parameter 'watcherName' when calling watcherCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling watcherCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling watcherCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling watcherCreateOrUpdate(Async)");
        }

        return watcherCreateOrUpdateCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Create the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The create or update parameters for watcher. (required)
     * @return Watcher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public Watcher watcherCreateOrUpdate(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, Watcher parameters) throws ApiException {
        ApiResponse<Watcher> localVarResp = watcherCreateOrUpdateWithHttpInfo(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The create or update parameters for watcher. (required)
     * @return ApiResponse&lt;Watcher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public ApiResponse<Watcher> watcherCreateOrUpdateWithHttpInfo(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, Watcher parameters) throws ApiException {
        okhttp3.Call localVarCall = watcherCreateOrUpdateValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Watcher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The create or update parameters for watcher. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherCreateOrUpdateAsync(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, Watcher parameters, final ApiCallback<Watcher> _callback) throws ApiException {

        okhttp3.Call localVarCall = watcherCreateOrUpdateValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Watcher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watcherDelete
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherDeleteCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "watcherName" + "}", localVarApiClient.escapeString(watcherName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watcherDeleteValidateBeforeCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling watcherDelete(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling watcherDelete(Async)");
        }

        // verify the required parameter 'watcherName' is set
        if (watcherName == null) {
            throw new ApiException("Missing the required parameter 'watcherName' when calling watcherDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling watcherDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling watcherDelete(Async)");
        }

        return watcherDeleteCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Delete the watcher by name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public void watcherDelete(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion) throws ApiException {
        watcherDeleteWithHttpInfo(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Delete the watcher by name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public ApiResponse<Void> watcherDeleteWithHttpInfo(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = watcherDeleteValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the watcher by name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherDeleteAsync(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = watcherDeleteValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for watcherGet
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherGetCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "watcherName" + "}", localVarApiClient.escapeString(watcherName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watcherGetValidateBeforeCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling watcherGet(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling watcherGet(Async)");
        }

        // verify the required parameter 'watcherName' is set
        if (watcherName == null) {
            throw new ApiException("Missing the required parameter 'watcherName' when calling watcherGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling watcherGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling watcherGet(Async)");
        }

        return watcherGetCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Retrieve the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return Watcher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public Watcher watcherGet(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Watcher> localVarResp = watcherGetWithHttpInfo(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Watcher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public ApiResponse<Watcher> watcherGetWithHttpInfo(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = watcherGetValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Watcher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherGetAsync(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback<Watcher> _callback) throws ApiException {

        okhttp3.Call localVarCall = watcherGetValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Watcher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watcherListByAutomationAccount
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherListByAutomationAccountCall(String resourceGroupName, String automationAccountName, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watcherListByAutomationAccountValidateBeforeCall(String resourceGroupName, String automationAccountName, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling watcherListByAutomationAccount(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling watcherListByAutomationAccount(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling watcherListByAutomationAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling watcherListByAutomationAccount(Async)");
        }

        return watcherListByAutomationAccountCall(resourceGroupName, automationAccountName, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Retrieve a list of watchers.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return WatcherListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public WatcherListResult watcherListByAutomationAccount(String resourceGroupName, String automationAccountName, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<WatcherListResult> localVarResp = watcherListByAutomationAccountWithHttpInfo(resourceGroupName, automationAccountName, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of watchers.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;WatcherListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public ApiResponse<WatcherListResult> watcherListByAutomationAccountWithHttpInfo(String resourceGroupName, String automationAccountName, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = watcherListByAutomationAccountValidateBeforeCall(resourceGroupName, automationAccountName, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<WatcherListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of watchers.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherListByAutomationAccountAsync(String resourceGroupName, String automationAccountName, String subscriptionId, String apiVersion, String $filter, final ApiCallback<WatcherListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = watcherListByAutomationAccountValidateBeforeCall(resourceGroupName, automationAccountName, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<WatcherListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watcherStart
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherStartCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "watcherName" + "}", localVarApiClient.escapeString(watcherName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watcherStartValidateBeforeCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling watcherStart(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling watcherStart(Async)");
        }

        // verify the required parameter 'watcherName' is set
        if (watcherName == null) {
            throw new ApiException("Missing the required parameter 'watcherName' when calling watcherStart(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling watcherStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling watcherStart(Async)");
        }

        return watcherStartCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Resume the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public void watcherStart(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion) throws ApiException {
        watcherStartWithHttpInfo(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Resume the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public ApiResponse<Void> watcherStartWithHttpInfo(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = watcherStartValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Resume the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherStartAsync(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = watcherStartValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for watcherStop
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherStopCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "watcherName" + "}", localVarApiClient.escapeString(watcherName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watcherStopValidateBeforeCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling watcherStop(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling watcherStop(Async)");
        }

        // verify the required parameter 'watcherName' is set
        if (watcherName == null) {
            throw new ApiException("Missing the required parameter 'watcherName' when calling watcherStop(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling watcherStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling watcherStop(Async)");
        }

        return watcherStopCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Resume the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public void watcherStop(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion) throws ApiException {
        watcherStopWithHttpInfo(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion);
    }

    /**
     * 
     * Resume the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public ApiResponse<Void> watcherStopWithHttpInfo(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = watcherStopValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Resume the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherStopAsync(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = watcherStopValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for watcherUpdate
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The update parameters for watcher. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherUpdateCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, WatcherUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/watchers/{watcherName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "automationAccountName" + "}", localVarApiClient.escapeString(automationAccountName.toString()))
            .replace("{" + "watcherName" + "}", localVarApiClient.escapeString(watcherName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watcherUpdateValidateBeforeCall(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, WatcherUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling watcherUpdate(Async)");
        }

        // verify the required parameter 'automationAccountName' is set
        if (automationAccountName == null) {
            throw new ApiException("Missing the required parameter 'automationAccountName' when calling watcherUpdate(Async)");
        }

        // verify the required parameter 'watcherName' is set
        if (watcherName == null) {
            throw new ApiException("Missing the required parameter 'watcherName' when calling watcherUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling watcherUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling watcherUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling watcherUpdate(Async)");
        }

        return watcherUpdateCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Update the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The update parameters for watcher. (required)
     * @return Watcher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public Watcher watcherUpdate(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, WatcherUpdateParameters parameters) throws ApiException {
        ApiResponse<Watcher> localVarResp = watcherUpdateWithHttpInfo(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The update parameters for watcher. (required)
     * @return ApiResponse&lt;Watcher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public ApiResponse<Watcher> watcherUpdateWithHttpInfo(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, WatcherUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = watcherUpdateValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Watcher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the watcher identified by watcher name.
     * @param resourceGroupName Name of an Azure Resource group. (required)
     * @param automationAccountName The name of the automation account. (required)
     * @param watcherName The watcher name. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The update parameters for watcher. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Automation error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="http://aka.ms/azureautomationsdk/watcheroperations"> Documentation</a>
     */
    public okhttp3.Call watcherUpdateAsync(String resourceGroupName, String automationAccountName, String watcherName, String subscriptionId, String apiVersion, WatcherUpdateParameters parameters, final ApiCallback<Watcher> _callback) throws ApiException {

        okhttp3.Call localVarCall = watcherUpdateValidateBeforeCall(resourceGroupName, automationAccountName, watcherName, subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Watcher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
