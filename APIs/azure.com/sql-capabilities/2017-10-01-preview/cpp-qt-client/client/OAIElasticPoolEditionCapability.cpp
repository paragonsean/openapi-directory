/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticPoolEditionCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticPoolEditionCapability::OAIElasticPoolEditionCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticPoolEditionCapability::OAIElasticPoolEditionCapability() {
    this->initializeModel();
}

OAIElasticPoolEditionCapability::~OAIElasticPoolEditionCapability() {}

void OAIElasticPoolEditionCapability::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_elastic_pool_performance_levels_isSet = false;
    m_supported_elastic_pool_performance_levels_isValid = false;

    m_zone_redundant_isSet = false;
    m_zone_redundant_isValid = false;
}

void OAIElasticPoolEditionCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticPoolEditionCapability::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_elastic_pool_performance_levels_isValid = ::OpenAPI::fromJsonValue(m_supported_elastic_pool_performance_levels, json[QString("supportedElasticPoolPerformanceLevels")]);
    m_supported_elastic_pool_performance_levels_isSet = !json[QString("supportedElasticPoolPerformanceLevels")].isNull() && m_supported_elastic_pool_performance_levels_isValid;

    m_zone_redundant_isValid = ::OpenAPI::fromJsonValue(m_zone_redundant, json[QString("zoneRedundant")]);
    m_zone_redundant_isSet = !json[QString("zoneRedundant")].isNull() && m_zone_redundant_isValid;
}

QString OAIElasticPoolEditionCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticPoolEditionCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_elastic_pool_performance_levels.size() > 0) {
        obj.insert(QString("supportedElasticPoolPerformanceLevels"), ::OpenAPI::toJsonValue(m_supported_elastic_pool_performance_levels));
    }
    if (m_zone_redundant_isSet) {
        obj.insert(QString("zoneRedundant"), ::OpenAPI::toJsonValue(m_zone_redundant));
    }
    return obj;
}

QString OAIElasticPoolEditionCapability::getName() const {
    return m_name;
}
void OAIElasticPoolEditionCapability::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIElasticPoolEditionCapability::is_name_Set() const{
    return m_name_isSet;
}

bool OAIElasticPoolEditionCapability::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIElasticPoolEditionCapability::getReason() const {
    return m_reason;
}
void OAIElasticPoolEditionCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIElasticPoolEditionCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIElasticPoolEditionCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIElasticPoolEditionCapability::getStatus() const {
    return m_status;
}
void OAIElasticPoolEditionCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIElasticPoolEditionCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIElasticPoolEditionCapability::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIElasticPoolPerformanceLevelCapability> OAIElasticPoolEditionCapability::getSupportedElasticPoolPerformanceLevels() const {
    return m_supported_elastic_pool_performance_levels;
}
void OAIElasticPoolEditionCapability::setSupportedElasticPoolPerformanceLevels(const QList<OAIElasticPoolPerformanceLevelCapability> &supported_elastic_pool_performance_levels) {
    m_supported_elastic_pool_performance_levels = supported_elastic_pool_performance_levels;
    m_supported_elastic_pool_performance_levels_isSet = true;
}

bool OAIElasticPoolEditionCapability::is_supported_elastic_pool_performance_levels_Set() const{
    return m_supported_elastic_pool_performance_levels_isSet;
}

bool OAIElasticPoolEditionCapability::is_supported_elastic_pool_performance_levels_Valid() const{
    return m_supported_elastic_pool_performance_levels_isValid;
}

bool OAIElasticPoolEditionCapability::isZoneRedundant() const {
    return m_zone_redundant;
}
void OAIElasticPoolEditionCapability::setZoneRedundant(const bool &zone_redundant) {
    m_zone_redundant = zone_redundant;
    m_zone_redundant_isSet = true;
}

bool OAIElasticPoolEditionCapability::is_zone_redundant_Set() const{
    return m_zone_redundant_isSet;
}

bool OAIElasticPoolEditionCapability::is_zone_redundant_Valid() const{
    return m_zone_redundant_isValid;
}

bool OAIElasticPoolEditionCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_elastic_pool_performance_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_redundant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticPoolEditionCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
