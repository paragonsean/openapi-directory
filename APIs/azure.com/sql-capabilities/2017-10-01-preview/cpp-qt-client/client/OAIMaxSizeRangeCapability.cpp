/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaxSizeRangeCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaxSizeRangeCapability::OAIMaxSizeRangeCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaxSizeRangeCapability::OAIMaxSizeRangeCapability() {
    this->initializeModel();
}

OAIMaxSizeRangeCapability::~OAIMaxSizeRangeCapability() {}

void OAIMaxSizeRangeCapability::initializeModel() {

    m_log_size_isSet = false;
    m_log_size_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_scale_size_isSet = false;
    m_scale_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIMaxSizeRangeCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaxSizeRangeCapability::fromJsonObject(QJsonObject json) {

    m_log_size_isValid = ::OpenAPI::fromJsonValue(m_log_size, json[QString("logSize")]);
    m_log_size_isSet = !json[QString("logSize")].isNull() && m_log_size_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_scale_size_isValid = ::OpenAPI::fromJsonValue(m_scale_size, json[QString("scaleSize")]);
    m_scale_size_isSet = !json[QString("scaleSize")].isNull() && m_scale_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIMaxSizeRangeCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaxSizeRangeCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_log_size.isSet()) {
        obj.insert(QString("logSize"), ::OpenAPI::toJsonValue(m_log_size));
    }
    if (m_max_value.isSet()) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value.isSet()) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_scale_size.isSet()) {
        obj.insert(QString("scaleSize"), ::OpenAPI::toJsonValue(m_scale_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAILogSizeCapability OAIMaxSizeRangeCapability::getLogSize() const {
    return m_log_size;
}
void OAIMaxSizeRangeCapability::setLogSize(const OAILogSizeCapability &log_size) {
    m_log_size = log_size;
    m_log_size_isSet = true;
}

bool OAIMaxSizeRangeCapability::is_log_size_Set() const{
    return m_log_size_isSet;
}

bool OAIMaxSizeRangeCapability::is_log_size_Valid() const{
    return m_log_size_isValid;
}

OAIMaxSizeCapability OAIMaxSizeRangeCapability::getMaxValue() const {
    return m_max_value;
}
void OAIMaxSizeRangeCapability::setMaxValue(const OAIMaxSizeCapability &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIMaxSizeRangeCapability::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIMaxSizeRangeCapability::is_max_value_Valid() const{
    return m_max_value_isValid;
}

OAIMaxSizeCapability OAIMaxSizeRangeCapability::getMinValue() const {
    return m_min_value;
}
void OAIMaxSizeRangeCapability::setMinValue(const OAIMaxSizeCapability &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIMaxSizeRangeCapability::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIMaxSizeRangeCapability::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QString OAIMaxSizeRangeCapability::getReason() const {
    return m_reason;
}
void OAIMaxSizeRangeCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIMaxSizeRangeCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIMaxSizeRangeCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIMaxSizeCapability OAIMaxSizeRangeCapability::getScaleSize() const {
    return m_scale_size;
}
void OAIMaxSizeRangeCapability::setScaleSize(const OAIMaxSizeCapability &scale_size) {
    m_scale_size = scale_size;
    m_scale_size_isSet = true;
}

bool OAIMaxSizeRangeCapability::is_scale_size_Set() const{
    return m_scale_size_isSet;
}

bool OAIMaxSizeRangeCapability::is_scale_size_Valid() const{
    return m_scale_size_isValid;
}

QString OAIMaxSizeRangeCapability::getStatus() const {
    return m_status;
}
void OAIMaxSizeRangeCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMaxSizeRangeCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMaxSizeRangeCapability::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIMaxSizeRangeCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaxSizeRangeCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
