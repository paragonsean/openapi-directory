/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceObjectiveCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceObjectiveCapability::OAIServiceObjectiveCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceObjectiveCapability::OAIServiceObjectiveCapability() {
    this->initializeModel();
}

OAIServiceObjectiveCapability::~OAIServiceObjectiveCapability() {}

void OAIServiceObjectiveCapability::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_included_max_size_isSet = false;
    m_included_max_size_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_performance_level_isSet = false;
    m_performance_level_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_license_types_isSet = false;
    m_supported_license_types_isValid = false;

    m_supported_max_sizes_isSet = false;
    m_supported_max_sizes_isValid = false;
}

void OAIServiceObjectiveCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceObjectiveCapability::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_included_max_size_isValid = ::OpenAPI::fromJsonValue(m_included_max_size, json[QString("includedMaxSize")]);
    m_included_max_size_isSet = !json[QString("includedMaxSize")].isNull() && m_included_max_size_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_performance_level_isValid = ::OpenAPI::fromJsonValue(m_performance_level, json[QString("performanceLevel")]);
    m_performance_level_isSet = !json[QString("performanceLevel")].isNull() && m_performance_level_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_license_types_isValid = ::OpenAPI::fromJsonValue(m_supported_license_types, json[QString("supportedLicenseTypes")]);
    m_supported_license_types_isSet = !json[QString("supportedLicenseTypes")].isNull() && m_supported_license_types_isValid;

    m_supported_max_sizes_isValid = ::OpenAPI::fromJsonValue(m_supported_max_sizes, json[QString("supportedMaxSizes")]);
    m_supported_max_sizes_isSet = !json[QString("supportedMaxSizes")].isNull() && m_supported_max_sizes_isValid;
}

QString OAIServiceObjectiveCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceObjectiveCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_included_max_size.isSet()) {
        obj.insert(QString("includedMaxSize"), ::OpenAPI::toJsonValue(m_included_max_size));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_performance_level.isSet()) {
        obj.insert(QString("performanceLevel"), ::OpenAPI::toJsonValue(m_performance_level));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_license_types.size() > 0) {
        obj.insert(QString("supportedLicenseTypes"), ::OpenAPI::toJsonValue(m_supported_license_types));
    }
    if (m_supported_max_sizes.size() > 0) {
        obj.insert(QString("supportedMaxSizes"), ::OpenAPI::toJsonValue(m_supported_max_sizes));
    }
    return obj;
}

QString OAIServiceObjectiveCapability::getId() const {
    return m_id;
}
void OAIServiceObjectiveCapability::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceObjectiveCapability::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceObjectiveCapability::is_id_Valid() const{
    return m_id_isValid;
}

OAIMaxSizeCapability OAIServiceObjectiveCapability::getIncludedMaxSize() const {
    return m_included_max_size;
}
void OAIServiceObjectiveCapability::setIncludedMaxSize(const OAIMaxSizeCapability &included_max_size) {
    m_included_max_size = included_max_size;
    m_included_max_size_isSet = true;
}

bool OAIServiceObjectiveCapability::is_included_max_size_Set() const{
    return m_included_max_size_isSet;
}

bool OAIServiceObjectiveCapability::is_included_max_size_Valid() const{
    return m_included_max_size_isValid;
}

QString OAIServiceObjectiveCapability::getName() const {
    return m_name;
}
void OAIServiceObjectiveCapability::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceObjectiveCapability::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceObjectiveCapability::is_name_Valid() const{
    return m_name_isValid;
}

OAIPerformanceLevelCapability OAIServiceObjectiveCapability::getPerformanceLevel() const {
    return m_performance_level;
}
void OAIServiceObjectiveCapability::setPerformanceLevel(const OAIPerformanceLevelCapability &performance_level) {
    m_performance_level = performance_level;
    m_performance_level_isSet = true;
}

bool OAIServiceObjectiveCapability::is_performance_level_Set() const{
    return m_performance_level_isSet;
}

bool OAIServiceObjectiveCapability::is_performance_level_Valid() const{
    return m_performance_level_isValid;
}

QString OAIServiceObjectiveCapability::getReason() const {
    return m_reason;
}
void OAIServiceObjectiveCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIServiceObjectiveCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIServiceObjectiveCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIElasticPoolPerformanceLevelCapability_sku OAIServiceObjectiveCapability::getSku() const {
    return m_sku;
}
void OAIServiceObjectiveCapability::setSku(const OAIElasticPoolPerformanceLevelCapability_sku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIServiceObjectiveCapability::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIServiceObjectiveCapability::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIServiceObjectiveCapability::getStatus() const {
    return m_status;
}
void OAIServiceObjectiveCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServiceObjectiveCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServiceObjectiveCapability::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAILicenseTypeCapability> OAIServiceObjectiveCapability::getSupportedLicenseTypes() const {
    return m_supported_license_types;
}
void OAIServiceObjectiveCapability::setSupportedLicenseTypes(const QList<OAILicenseTypeCapability> &supported_license_types) {
    m_supported_license_types = supported_license_types;
    m_supported_license_types_isSet = true;
}

bool OAIServiceObjectiveCapability::is_supported_license_types_Set() const{
    return m_supported_license_types_isSet;
}

bool OAIServiceObjectiveCapability::is_supported_license_types_Valid() const{
    return m_supported_license_types_isValid;
}

QList<OAIMaxSizeRangeCapability> OAIServiceObjectiveCapability::getSupportedMaxSizes() const {
    return m_supported_max_sizes;
}
void OAIServiceObjectiveCapability::setSupportedMaxSizes(const QList<OAIMaxSizeRangeCapability> &supported_max_sizes) {
    m_supported_max_sizes = supported_max_sizes;
    m_supported_max_sizes_isSet = true;
}

bool OAIServiceObjectiveCapability::is_supported_max_sizes_Set() const{
    return m_supported_max_sizes_isSet;
}

bool OAIServiceObjectiveCapability::is_supported_max_sizes_Valid() const{
    return m_supported_max_sizes_isValid;
}

bool OAIServiceObjectiveCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_max_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_license_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_max_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceObjectiveCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
