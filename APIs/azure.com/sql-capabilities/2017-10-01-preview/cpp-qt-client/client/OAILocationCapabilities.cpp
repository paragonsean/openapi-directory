/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationCapabilities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationCapabilities::OAILocationCapabilities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationCapabilities::OAILocationCapabilities() {
    this->initializeModel();
}

OAILocationCapabilities::~OAILocationCapabilities() {}

void OAILocationCapabilities::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_managed_instance_versions_isSet = false;
    m_supported_managed_instance_versions_isValid = false;

    m_supported_server_versions_isSet = false;
    m_supported_server_versions_isValid = false;
}

void OAILocationCapabilities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationCapabilities::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_managed_instance_versions_isValid = ::OpenAPI::fromJsonValue(m_supported_managed_instance_versions, json[QString("supportedManagedInstanceVersions")]);
    m_supported_managed_instance_versions_isSet = !json[QString("supportedManagedInstanceVersions")].isNull() && m_supported_managed_instance_versions_isValid;

    m_supported_server_versions_isValid = ::OpenAPI::fromJsonValue(m_supported_server_versions, json[QString("supportedServerVersions")]);
    m_supported_server_versions_isSet = !json[QString("supportedServerVersions")].isNull() && m_supported_server_versions_isValid;
}

QString OAILocationCapabilities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationCapabilities::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_managed_instance_versions.size() > 0) {
        obj.insert(QString("supportedManagedInstanceVersions"), ::OpenAPI::toJsonValue(m_supported_managed_instance_versions));
    }
    if (m_supported_server_versions.size() > 0) {
        obj.insert(QString("supportedServerVersions"), ::OpenAPI::toJsonValue(m_supported_server_versions));
    }
    return obj;
}

QString OAILocationCapabilities::getName() const {
    return m_name;
}
void OAILocationCapabilities::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocationCapabilities::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocationCapabilities::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILocationCapabilities::getReason() const {
    return m_reason;
}
void OAILocationCapabilities::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAILocationCapabilities::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAILocationCapabilities::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAILocationCapabilities::getStatus() const {
    return m_status;
}
void OAILocationCapabilities::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILocationCapabilities::is_status_Set() const{
    return m_status_isSet;
}

bool OAILocationCapabilities::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIManagedInstanceVersionCapability> OAILocationCapabilities::getSupportedManagedInstanceVersions() const {
    return m_supported_managed_instance_versions;
}
void OAILocationCapabilities::setSupportedManagedInstanceVersions(const QList<OAIManagedInstanceVersionCapability> &supported_managed_instance_versions) {
    m_supported_managed_instance_versions = supported_managed_instance_versions;
    m_supported_managed_instance_versions_isSet = true;
}

bool OAILocationCapabilities::is_supported_managed_instance_versions_Set() const{
    return m_supported_managed_instance_versions_isSet;
}

bool OAILocationCapabilities::is_supported_managed_instance_versions_Valid() const{
    return m_supported_managed_instance_versions_isValid;
}

QList<OAIServerVersionCapability> OAILocationCapabilities::getSupportedServerVersions() const {
    return m_supported_server_versions;
}
void OAILocationCapabilities::setSupportedServerVersions(const QList<OAIServerVersionCapability> &supported_server_versions) {
    m_supported_server_versions = supported_server_versions;
    m_supported_server_versions_isSet = true;
}

bool OAILocationCapabilities::is_supported_server_versions_Set() const{
    return m_supported_server_versions_isSet;
}

bool OAILocationCapabilities::is_supported_server_versions_Valid() const{
    return m_supported_server_versions_isValid;
}

bool OAILocationCapabilities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_managed_instance_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_server_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationCapabilities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
