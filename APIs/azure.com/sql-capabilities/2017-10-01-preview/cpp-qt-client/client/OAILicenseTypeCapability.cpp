/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseTypeCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseTypeCapability::OAILicenseTypeCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseTypeCapability::OAILicenseTypeCapability() {
    this->initializeModel();
}

OAILicenseTypeCapability::~OAILicenseTypeCapability() {}

void OAILicenseTypeCapability::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAILicenseTypeCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseTypeCapability::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAILicenseTypeCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseTypeCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAILicenseTypeCapability::getName() const {
    return m_name;
}
void OAILicenseTypeCapability::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILicenseTypeCapability::is_name_Set() const{
    return m_name_isSet;
}

bool OAILicenseTypeCapability::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILicenseTypeCapability::getReason() const {
    return m_reason;
}
void OAILicenseTypeCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAILicenseTypeCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAILicenseTypeCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAILicenseTypeCapability::getStatus() const {
    return m_status;
}
void OAILicenseTypeCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILicenseTypeCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAILicenseTypeCapability::is_status_Valid() const{
    return m_status_isValid;
}

bool OAILicenseTypeCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseTypeCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
