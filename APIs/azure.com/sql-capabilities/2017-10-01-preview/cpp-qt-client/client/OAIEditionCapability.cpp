/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditionCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditionCapability::OAIEditionCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditionCapability::OAIEditionCapability() {
    this->initializeModel();
}

OAIEditionCapability::~OAIEditionCapability() {}

void OAIEditionCapability::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_service_level_objectives_isSet = false;
    m_supported_service_level_objectives_isValid = false;

    m_zone_redundant_isSet = false;
    m_zone_redundant_isValid = false;
}

void OAIEditionCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditionCapability::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_service_level_objectives_isValid = ::OpenAPI::fromJsonValue(m_supported_service_level_objectives, json[QString("supportedServiceLevelObjectives")]);
    m_supported_service_level_objectives_isSet = !json[QString("supportedServiceLevelObjectives")].isNull() && m_supported_service_level_objectives_isValid;

    m_zone_redundant_isValid = ::OpenAPI::fromJsonValue(m_zone_redundant, json[QString("zoneRedundant")]);
    m_zone_redundant_isSet = !json[QString("zoneRedundant")].isNull() && m_zone_redundant_isValid;
}

QString OAIEditionCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditionCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_service_level_objectives.size() > 0) {
        obj.insert(QString("supportedServiceLevelObjectives"), ::OpenAPI::toJsonValue(m_supported_service_level_objectives));
    }
    if (m_zone_redundant_isSet) {
        obj.insert(QString("zoneRedundant"), ::OpenAPI::toJsonValue(m_zone_redundant));
    }
    return obj;
}

QString OAIEditionCapability::getName() const {
    return m_name;
}
void OAIEditionCapability::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEditionCapability::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEditionCapability::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEditionCapability::getReason() const {
    return m_reason;
}
void OAIEditionCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIEditionCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIEditionCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIEditionCapability::getStatus() const {
    return m_status;
}
void OAIEditionCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEditionCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEditionCapability::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIServiceObjectiveCapability> OAIEditionCapability::getSupportedServiceLevelObjectives() const {
    return m_supported_service_level_objectives;
}
void OAIEditionCapability::setSupportedServiceLevelObjectives(const QList<OAIServiceObjectiveCapability> &supported_service_level_objectives) {
    m_supported_service_level_objectives = supported_service_level_objectives;
    m_supported_service_level_objectives_isSet = true;
}

bool OAIEditionCapability::is_supported_service_level_objectives_Set() const{
    return m_supported_service_level_objectives_isSet;
}

bool OAIEditionCapability::is_supported_service_level_objectives_Valid() const{
    return m_supported_service_level_objectives_isValid;
}

bool OAIEditionCapability::isZoneRedundant() const {
    return m_zone_redundant;
}
void OAIEditionCapability::setZoneRedundant(const bool &zone_redundant) {
    m_zone_redundant = zone_redundant;
    m_zone_redundant_isSet = true;
}

bool OAIEditionCapability::is_zone_redundant_Set() const{
    return m_zone_redundant_isSet;
}

bool OAIEditionCapability::is_zone_redundant_Valid() const{
    return m_zone_redundant_isValid;
}

bool OAIEditionCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_service_level_objectives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_redundant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditionCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
