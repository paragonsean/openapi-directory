/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An ARM Resource SKU.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:16.594860-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElasticPoolPerformanceLevelCapabilitySku {
  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private Integer capacity;

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private String tier;

  public ElasticPoolPerformanceLevelCapabilitySku() {
  }

  public ElasticPoolPerformanceLevelCapabilitySku capacity(Integer capacity) {
    this.capacity = capacity;
    return this;
  }

  /**
   * Capacity of the particular SKU.
   * @return capacity
   */
  @javax.annotation.Nullable
  public Integer getCapacity() {
    return capacity;
  }

  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }


  public ElasticPoolPerformanceLevelCapabilitySku family(String family) {
    this.family = family;
    return this;
  }

  /**
   * If the service has different generations of hardware, for the same SKU, then that can be captured here.
   * @return family
   */
  @javax.annotation.Nullable
  public String getFamily() {
    return family;
  }

  public void setFamily(String family) {
    this.family = family;
  }


  public ElasticPoolPerformanceLevelCapabilitySku name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the SKU, typically, a letter + Number code, e.g. P3.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ElasticPoolPerformanceLevelCapabilitySku size(String size) {
    this.size = size;
    return this;
  }

  /**
   * Size of the particular SKU
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public ElasticPoolPerformanceLevelCapabilitySku tier(String tier) {
    this.tier = tier;
    return this;
  }

  /**
   * The tier or edition of the particular SKU, e.g. Basic, Premium.
   * @return tier
   */
  @javax.annotation.Nullable
  public String getTier() {
    return tier;
  }

  public void setTier(String tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticPoolPerformanceLevelCapabilitySku elasticPoolPerformanceLevelCapabilitySku = (ElasticPoolPerformanceLevelCapabilitySku) o;
    return Objects.equals(this.capacity, elasticPoolPerformanceLevelCapabilitySku.capacity) &&
        Objects.equals(this.family, elasticPoolPerformanceLevelCapabilitySku.family) &&
        Objects.equals(this.name, elasticPoolPerformanceLevelCapabilitySku.name) &&
        Objects.equals(this.size, elasticPoolPerformanceLevelCapabilitySku.size) &&
        Objects.equals(this.tier, elasticPoolPerformanceLevelCapabilitySku.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacity, family, name, size, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticPoolPerformanceLevelCapabilitySku {\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacity");
    openapiFields.add("family");
    openapiFields.add("name");
    openapiFields.add("size");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElasticPoolPerformanceLevelCapabilitySku
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElasticPoolPerformanceLevelCapabilitySku.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElasticPoolPerformanceLevelCapabilitySku is not found in the empty JSON string", ElasticPoolPerformanceLevelCapabilitySku.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElasticPoolPerformanceLevelCapabilitySku.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElasticPoolPerformanceLevelCapabilitySku` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ElasticPoolPerformanceLevelCapabilitySku.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) && !jsonObj.get("family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElasticPoolPerformanceLevelCapabilitySku.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElasticPoolPerformanceLevelCapabilitySku' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElasticPoolPerformanceLevelCapabilitySku> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElasticPoolPerformanceLevelCapabilitySku.class));

       return (TypeAdapter<T>) new TypeAdapter<ElasticPoolPerformanceLevelCapabilitySku>() {
           @Override
           public void write(JsonWriter out, ElasticPoolPerformanceLevelCapabilitySku value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElasticPoolPerformanceLevelCapabilitySku read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElasticPoolPerformanceLevelCapabilitySku given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElasticPoolPerformanceLevelCapabilitySku
   * @throws IOException if the JSON string is invalid with respect to ElasticPoolPerformanceLevelCapabilitySku
   */
  public static ElasticPoolPerformanceLevelCapabilitySku fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElasticPoolPerformanceLevelCapabilitySku.class);
  }

  /**
   * Convert an instance of ElasticPoolPerformanceLevelCapabilitySku to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

