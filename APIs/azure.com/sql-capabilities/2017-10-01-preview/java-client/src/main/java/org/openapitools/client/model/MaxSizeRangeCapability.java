/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LogSizeCapability;
import org.openapitools.client.model.MaxSizeCapability;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The maximum size range capability.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:16.594860-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MaxSizeRangeCapability {
  public static final String SERIALIZED_NAME_LOG_SIZE = "logSize";
  @SerializedName(SERIALIZED_NAME_LOG_SIZE)
  private LogSizeCapability logSize;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private MaxSizeCapability maxValue;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private MaxSizeCapability minValue;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_SCALE_SIZE = "scaleSize";
  @SerializedName(SERIALIZED_NAME_SCALE_SIZE)
  private MaxSizeCapability scaleSize;

  /**
   * The status of the capability.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    VISIBLE("Visible"),
    
    AVAILABLE("Available"),
    
    DEFAULT("Default"),
    
    DISABLED("Disabled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public MaxSizeRangeCapability() {
  }

  public MaxSizeRangeCapability(
     StatusEnum status
  ) {
    this();
    this.status = status;
  }

  public MaxSizeRangeCapability logSize(LogSizeCapability logSize) {
    this.logSize = logSize;
    return this;
  }

  /**
   * Get logSize
   * @return logSize
   */
  @javax.annotation.Nullable
  public LogSizeCapability getLogSize() {
    return logSize;
  }

  public void setLogSize(LogSizeCapability logSize) {
    this.logSize = logSize;
  }


  public MaxSizeRangeCapability maxValue(MaxSizeCapability maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Get maxValue
   * @return maxValue
   */
  @javax.annotation.Nullable
  public MaxSizeCapability getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(MaxSizeCapability maxValue) {
    this.maxValue = maxValue;
  }


  public MaxSizeRangeCapability minValue(MaxSizeCapability minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * Get minValue
   * @return minValue
   */
  @javax.annotation.Nullable
  public MaxSizeCapability getMinValue() {
    return minValue;
  }

  public void setMinValue(MaxSizeCapability minValue) {
    this.minValue = minValue;
  }


  public MaxSizeRangeCapability reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason for the capability not being available.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public MaxSizeRangeCapability scaleSize(MaxSizeCapability scaleSize) {
    this.scaleSize = scaleSize;
    return this;
  }

  /**
   * Get scaleSize
   * @return scaleSize
   */
  @javax.annotation.Nullable
  public MaxSizeCapability getScaleSize() {
    return scaleSize;
  }

  public void setScaleSize(MaxSizeCapability scaleSize) {
    this.scaleSize = scaleSize;
  }


  /**
   * The status of the capability.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaxSizeRangeCapability maxSizeRangeCapability = (MaxSizeRangeCapability) o;
    return Objects.equals(this.logSize, maxSizeRangeCapability.logSize) &&
        Objects.equals(this.maxValue, maxSizeRangeCapability.maxValue) &&
        Objects.equals(this.minValue, maxSizeRangeCapability.minValue) &&
        Objects.equals(this.reason, maxSizeRangeCapability.reason) &&
        Objects.equals(this.scaleSize, maxSizeRangeCapability.scaleSize) &&
        Objects.equals(this.status, maxSizeRangeCapability.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logSize, maxValue, minValue, reason, scaleSize, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaxSizeRangeCapability {\n");
    sb.append("    logSize: ").append(toIndentedString(logSize)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    scaleSize: ").append(toIndentedString(scaleSize)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logSize");
    openapiFields.add("maxValue");
    openapiFields.add("minValue");
    openapiFields.add("reason");
    openapiFields.add("scaleSize");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MaxSizeRangeCapability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaxSizeRangeCapability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaxSizeRangeCapability is not found in the empty JSON string", MaxSizeRangeCapability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MaxSizeRangeCapability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaxSizeRangeCapability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `logSize`
      if (jsonObj.get("logSize") != null && !jsonObj.get("logSize").isJsonNull()) {
        LogSizeCapability.validateJsonElement(jsonObj.get("logSize"));
      }
      // validate the optional field `maxValue`
      if (jsonObj.get("maxValue") != null && !jsonObj.get("maxValue").isJsonNull()) {
        MaxSizeCapability.validateJsonElement(jsonObj.get("maxValue"));
      }
      // validate the optional field `minValue`
      if (jsonObj.get("minValue") != null && !jsonObj.get("minValue").isJsonNull()) {
        MaxSizeCapability.validateJsonElement(jsonObj.get("minValue"));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `scaleSize`
      if (jsonObj.get("scaleSize") != null && !jsonObj.get("scaleSize").isJsonNull()) {
        MaxSizeCapability.validateJsonElement(jsonObj.get("scaleSize"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaxSizeRangeCapability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaxSizeRangeCapability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaxSizeRangeCapability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaxSizeRangeCapability.class));

       return (TypeAdapter<T>) new TypeAdapter<MaxSizeRangeCapability>() {
           @Override
           public void write(JsonWriter out, MaxSizeRangeCapability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaxSizeRangeCapability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MaxSizeRangeCapability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MaxSizeRangeCapability
   * @throws IOException if the JSON string is invalid with respect to MaxSizeRangeCapability
   */
  public static MaxSizeRangeCapability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaxSizeRangeCapability.class);
  }

  /**
   * Convert an instance of MaxSizeRangeCapability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

