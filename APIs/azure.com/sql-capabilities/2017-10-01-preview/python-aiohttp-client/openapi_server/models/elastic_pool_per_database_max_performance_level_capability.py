# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.elastic_pool_per_database_min_performance_level_capability import ElasticPoolPerDatabaseMinPerformanceLevelCapability
from openapi_server import util


class ElasticPoolPerDatabaseMaxPerformanceLevelCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit: float=None, reason: str=None, status: str=None, supported_per_database_min_performance_levels: List[ElasticPoolPerDatabaseMinPerformanceLevelCapability]=None, unit: str=None):
        """ElasticPoolPerDatabaseMaxPerformanceLevelCapability - a model defined in OpenAPI

        :param limit: The limit of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :param reason: The reason of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :param status: The status of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :param supported_per_database_min_performance_levels: The supported_per_database_min_performance_levels of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :param unit: The unit of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        """
        self.openapi_types = {
            'limit': float,
            'reason': str,
            'status': str,
            'supported_per_database_min_performance_levels': List[ElasticPoolPerDatabaseMinPerformanceLevelCapability],
            'unit': str
        }

        self.attribute_map = {
            'limit': 'limit',
            'reason': 'reason',
            'status': 'status',
            'supported_per_database_min_performance_levels': 'supportedPerDatabaseMinPerformanceLevels',
            'unit': 'unit'
        }

        self._limit = limit
        self._reason = reason
        self._status = status
        self._supported_per_database_min_performance_levels = supported_per_database_min_performance_levels
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticPoolPerDatabaseMaxPerformanceLevelCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticPoolPerDatabaseMaxPerformanceLevelCapability of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self):
        """Gets the limit of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.

        The maximum performance level per database.

        :return: The limit of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.

        The maximum performance level per database.

        :param limit: The limit of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :type limit: float
        """

        self._limit = limit

    @property
    def reason(self):
        """Gets the reason of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.

        The reason for the capability not being available.

        :return: The reason of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.

        The reason for the capability not being available.

        :param reason: The reason of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :type reason: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.

        The status of the capability.

        :return: The status of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.

        The status of the capability.

        :param status: The status of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :type status: str
        """
        allowed_values = ["Visible", "Available", "Default", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def supported_per_database_min_performance_levels(self):
        """Gets the supported_per_database_min_performance_levels of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.

        The list of supported min database performance levels.

        :return: The supported_per_database_min_performance_levels of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :rtype: List[ElasticPoolPerDatabaseMinPerformanceLevelCapability]
        """
        return self._supported_per_database_min_performance_levels

    @supported_per_database_min_performance_levels.setter
    def supported_per_database_min_performance_levels(self, supported_per_database_min_performance_levels):
        """Sets the supported_per_database_min_performance_levels of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.

        The list of supported min database performance levels.

        :param supported_per_database_min_performance_levels: The supported_per_database_min_performance_levels of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :type supported_per_database_min_performance_levels: List[ElasticPoolPerDatabaseMinPerformanceLevelCapability]
        """

        self._supported_per_database_min_performance_levels = supported_per_database_min_performance_levels

    @property
    def unit(self):
        """Gets the unit of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.

        Unit type used to measure performance level.

        :return: The unit of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.

        Unit type used to measure performance level.

        :param unit: The unit of this ElasticPoolPerDatabaseMaxPerformanceLevelCapability.
        :type unit: str
        """
        allowed_values = ["DTU", "VCores"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
