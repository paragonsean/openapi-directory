# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_size_capability import LogSizeCapability
from openapi_server.models.max_size_capability import MaxSizeCapability
from openapi_server import util


class MaxSizeRangeCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_size: LogSizeCapability=None, max_value: MaxSizeCapability=None, min_value: MaxSizeCapability=None, reason: str=None, scale_size: MaxSizeCapability=None, status: str=None):
        """MaxSizeRangeCapability - a model defined in OpenAPI

        :param log_size: The log_size of this MaxSizeRangeCapability.
        :param max_value: The max_value of this MaxSizeRangeCapability.
        :param min_value: The min_value of this MaxSizeRangeCapability.
        :param reason: The reason of this MaxSizeRangeCapability.
        :param scale_size: The scale_size of this MaxSizeRangeCapability.
        :param status: The status of this MaxSizeRangeCapability.
        """
        self.openapi_types = {
            'log_size': LogSizeCapability,
            'max_value': MaxSizeCapability,
            'min_value': MaxSizeCapability,
            'reason': str,
            'scale_size': MaxSizeCapability,
            'status': str
        }

        self.attribute_map = {
            'log_size': 'logSize',
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'reason': 'reason',
            'scale_size': 'scaleSize',
            'status': 'status'
        }

        self._log_size = log_size
        self._max_value = max_value
        self._min_value = min_value
        self._reason = reason
        self._scale_size = scale_size
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaxSizeRangeCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaxSizeRangeCapability of this MaxSizeRangeCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_size(self):
        """Gets the log_size of this MaxSizeRangeCapability.


        :return: The log_size of this MaxSizeRangeCapability.
        :rtype: LogSizeCapability
        """
        return self._log_size

    @log_size.setter
    def log_size(self, log_size):
        """Sets the log_size of this MaxSizeRangeCapability.


        :param log_size: The log_size of this MaxSizeRangeCapability.
        :type log_size: LogSizeCapability
        """

        self._log_size = log_size

    @property
    def max_value(self):
        """Gets the max_value of this MaxSizeRangeCapability.


        :return: The max_value of this MaxSizeRangeCapability.
        :rtype: MaxSizeCapability
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this MaxSizeRangeCapability.


        :param max_value: The max_value of this MaxSizeRangeCapability.
        :type max_value: MaxSizeCapability
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this MaxSizeRangeCapability.


        :return: The min_value of this MaxSizeRangeCapability.
        :rtype: MaxSizeCapability
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this MaxSizeRangeCapability.


        :param min_value: The min_value of this MaxSizeRangeCapability.
        :type min_value: MaxSizeCapability
        """

        self._min_value = min_value

    @property
    def reason(self):
        """Gets the reason of this MaxSizeRangeCapability.

        The reason for the capability not being available.

        :return: The reason of this MaxSizeRangeCapability.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this MaxSizeRangeCapability.

        The reason for the capability not being available.

        :param reason: The reason of this MaxSizeRangeCapability.
        :type reason: str
        """

        self._reason = reason

    @property
    def scale_size(self):
        """Gets the scale_size of this MaxSizeRangeCapability.


        :return: The scale_size of this MaxSizeRangeCapability.
        :rtype: MaxSizeCapability
        """
        return self._scale_size

    @scale_size.setter
    def scale_size(self, scale_size):
        """Sets the scale_size of this MaxSizeRangeCapability.


        :param scale_size: The scale_size of this MaxSizeRangeCapability.
        :type scale_size: MaxSizeCapability
        """

        self._scale_size = scale_size

    @property
    def status(self):
        """Gets the status of this MaxSizeRangeCapability.

        The status of the capability.

        :return: The status of this MaxSizeRangeCapability.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MaxSizeRangeCapability.

        The status of the capability.

        :param status: The status of this MaxSizeRangeCapability.
        :type status: str
        """
        allowed_values = ["Visible", "Available", "Default", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
