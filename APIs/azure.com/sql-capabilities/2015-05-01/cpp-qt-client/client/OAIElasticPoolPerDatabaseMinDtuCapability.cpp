/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticPoolPerDatabaseMinDtuCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticPoolPerDatabaseMinDtuCapability::OAIElasticPoolPerDatabaseMinDtuCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticPoolPerDatabaseMinDtuCapability::OAIElasticPoolPerDatabaseMinDtuCapability() {
    this->initializeModel();
}

OAIElasticPoolPerDatabaseMinDtuCapability::~OAIElasticPoolPerDatabaseMinDtuCapability() {}

void OAIElasticPoolPerDatabaseMinDtuCapability::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIElasticPoolPerDatabaseMinDtuCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticPoolPerDatabaseMinDtuCapability::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIElasticPoolPerDatabaseMinDtuCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticPoolPerDatabaseMinDtuCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIElasticPoolPerDatabaseMinDtuCapability::getLimit() const {
    return m_limit;
}
void OAIElasticPoolPerDatabaseMinDtuCapability::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIElasticPoolPerDatabaseMinDtuCapability::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIElasticPoolPerDatabaseMinDtuCapability::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIElasticPoolPerDatabaseMinDtuCapability::getReason() const {
    return m_reason;
}
void OAIElasticPoolPerDatabaseMinDtuCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIElasticPoolPerDatabaseMinDtuCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIElasticPoolPerDatabaseMinDtuCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIElasticPoolPerDatabaseMinDtuCapability::getStatus() const {
    return m_status;
}
void OAIElasticPoolPerDatabaseMinDtuCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIElasticPoolPerDatabaseMinDtuCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIElasticPoolPerDatabaseMinDtuCapability::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIElasticPoolPerDatabaseMinDtuCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticPoolPerDatabaseMinDtuCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
