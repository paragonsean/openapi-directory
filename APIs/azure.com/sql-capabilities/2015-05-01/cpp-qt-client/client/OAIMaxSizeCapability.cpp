/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaxSizeCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaxSizeCapability::OAIMaxSizeCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaxSizeCapability::OAIMaxSizeCapability() {
    this->initializeModel();
}

OAIMaxSizeCapability::~OAIMaxSizeCapability() {}

void OAIMaxSizeCapability::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIMaxSizeCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaxSizeCapability::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIMaxSizeCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaxSizeCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

qint32 OAIMaxSizeCapability::getLimit() const {
    return m_limit;
}
void OAIMaxSizeCapability::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIMaxSizeCapability::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIMaxSizeCapability::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIMaxSizeCapability::getReason() const {
    return m_reason;
}
void OAIMaxSizeCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIMaxSizeCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIMaxSizeCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIMaxSizeCapability::getStatus() const {
    return m_status;
}
void OAIMaxSizeCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMaxSizeCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMaxSizeCapability::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMaxSizeCapability::getUnit() const {
    return m_unit;
}
void OAIMaxSizeCapability::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMaxSizeCapability::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMaxSizeCapability::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMaxSizeCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaxSizeCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
