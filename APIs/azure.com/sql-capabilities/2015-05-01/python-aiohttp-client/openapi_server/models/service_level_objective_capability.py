# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.max_size_capability import MaxSizeCapability
from openapi_server.models.performance_level_capability import PerformanceLevelCapability
from openapi_server import util


class ServiceLevelObjectiveCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, included_max_size: MaxSizeCapability=None, name: str=None, performance_level: PerformanceLevelCapability=None, reason: str=None, status: str=None, supported_max_sizes: List[MaxSizeCapability]=None):
        """ServiceLevelObjectiveCapability - a model defined in OpenAPI

        :param id: The id of this ServiceLevelObjectiveCapability.
        :param included_max_size: The included_max_size of this ServiceLevelObjectiveCapability.
        :param name: The name of this ServiceLevelObjectiveCapability.
        :param performance_level: The performance_level of this ServiceLevelObjectiveCapability.
        :param reason: The reason of this ServiceLevelObjectiveCapability.
        :param status: The status of this ServiceLevelObjectiveCapability.
        :param supported_max_sizes: The supported_max_sizes of this ServiceLevelObjectiveCapability.
        """
        self.openapi_types = {
            'id': str,
            'included_max_size': MaxSizeCapability,
            'name': str,
            'performance_level': PerformanceLevelCapability,
            'reason': str,
            'status': str,
            'supported_max_sizes': List[MaxSizeCapability]
        }

        self.attribute_map = {
            'id': 'id',
            'included_max_size': 'includedMaxSize',
            'name': 'name',
            'performance_level': 'performanceLevel',
            'reason': 'reason',
            'status': 'status',
            'supported_max_sizes': 'supportedMaxSizes'
        }

        self._id = id
        self._included_max_size = included_max_size
        self._name = name
        self._performance_level = performance_level
        self._reason = reason
        self._status = status
        self._supported_max_sizes = supported_max_sizes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceLevelObjectiveCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceLevelObjectiveCapability of this ServiceLevelObjectiveCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ServiceLevelObjectiveCapability.

        The unique ID of the service objective.

        :return: The id of this ServiceLevelObjectiveCapability.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceLevelObjectiveCapability.

        The unique ID of the service objective.

        :param id: The id of this ServiceLevelObjectiveCapability.
        :type id: str
        """

        self._id = id

    @property
    def included_max_size(self):
        """Gets the included_max_size of this ServiceLevelObjectiveCapability.


        :return: The included_max_size of this ServiceLevelObjectiveCapability.
        :rtype: MaxSizeCapability
        """
        return self._included_max_size

    @included_max_size.setter
    def included_max_size(self, included_max_size):
        """Sets the included_max_size of this ServiceLevelObjectiveCapability.


        :param included_max_size: The included_max_size of this ServiceLevelObjectiveCapability.
        :type included_max_size: MaxSizeCapability
        """

        self._included_max_size = included_max_size

    @property
    def name(self):
        """Gets the name of this ServiceLevelObjectiveCapability.

        The service objective name.

        :return: The name of this ServiceLevelObjectiveCapability.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceLevelObjectiveCapability.

        The service objective name.

        :param name: The name of this ServiceLevelObjectiveCapability.
        :type name: str
        """

        self._name = name

    @property
    def performance_level(self):
        """Gets the performance_level of this ServiceLevelObjectiveCapability.


        :return: The performance_level of this ServiceLevelObjectiveCapability.
        :rtype: PerformanceLevelCapability
        """
        return self._performance_level

    @performance_level.setter
    def performance_level(self, performance_level):
        """Sets the performance_level of this ServiceLevelObjectiveCapability.


        :param performance_level: The performance_level of this ServiceLevelObjectiveCapability.
        :type performance_level: PerformanceLevelCapability
        """

        self._performance_level = performance_level

    @property
    def reason(self):
        """Gets the reason of this ServiceLevelObjectiveCapability.

        The reason for the capability not being available.

        :return: The reason of this ServiceLevelObjectiveCapability.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ServiceLevelObjectiveCapability.

        The reason for the capability not being available.

        :param reason: The reason of this ServiceLevelObjectiveCapability.
        :type reason: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this ServiceLevelObjectiveCapability.

        The status of the capability.

        :return: The status of this ServiceLevelObjectiveCapability.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceLevelObjectiveCapability.

        The status of the capability.

        :param status: The status of this ServiceLevelObjectiveCapability.
        :type status: str
        """
        allowed_values = ["Visible", "Available", "Default", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def supported_max_sizes(self):
        """Gets the supported_max_sizes of this ServiceLevelObjectiveCapability.

        The list of supported maximum database sizes for this service objective.

        :return: The supported_max_sizes of this ServiceLevelObjectiveCapability.
        :rtype: List[MaxSizeCapability]
        """
        return self._supported_max_sizes

    @supported_max_sizes.setter
    def supported_max_sizes(self, supported_max_sizes):
        """Sets the supported_max_sizes of this ServiceLevelObjectiveCapability.

        The list of supported maximum database sizes for this service objective.

        :param supported_max_sizes: The supported_max_sizes of this ServiceLevelObjectiveCapability.
        :type supported_max_sizes: List[MaxSizeCapability]
        """

        self._supported_max_sizes = supported_max_sizes
