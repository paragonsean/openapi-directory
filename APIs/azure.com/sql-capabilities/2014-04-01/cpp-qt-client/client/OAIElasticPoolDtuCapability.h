/**
 * Azure SQL Database capabilities
 * Describes the Azure SQL capabilities available to a subscription for a given location.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIElasticPoolDtuCapability.h
 *
 * The Elastic Pool DTU capability.
 */

#ifndef OAIElasticPoolDtuCapability_H
#define OAIElasticPoolDtuCapability_H

#include <QJsonObject>

#include "OAICapabilityStatus.h"
#include "OAIElasticPoolPerDatabaseMaxDtuCapability.h"
#include "OAIMaxSizeCapability.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMaxSizeCapability;
class OAIElasticPoolPerDatabaseMaxDtuCapability;

class OAIElasticPoolDtuCapability : public OAIObject {
public:
    OAIElasticPoolDtuCapability();
    OAIElasticPoolDtuCapability(QString json);
    ~OAIElasticPoolDtuCapability() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMaxSizeCapability getIncludedMaxSize() const;
    void setIncludedMaxSize(const OAIMaxSizeCapability &included_max_size);
    bool is_included_max_size_Set() const;
    bool is_included_max_size_Valid() const;

    qint64 getLimit() const;
    void setLimit(const qint64 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    qint64 getMaxDatabaseCount() const;
    void setMaxDatabaseCount(const qint64 &max_database_count);
    bool is_max_database_count_Set() const;
    bool is_max_database_count_Valid() const;

    OAICapabilityStatus getStatus() const;
    void setStatus(const OAICapabilityStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<OAIMaxSizeCapability> getSupportedMaxSizes() const;
    void setSupportedMaxSizes(const QList<OAIMaxSizeCapability> &supported_max_sizes);
    bool is_supported_max_sizes_Set() const;
    bool is_supported_max_sizes_Valid() const;

    QList<OAIElasticPoolPerDatabaseMaxDtuCapability> getSupportedPerDatabaseMaxDtus() const;
    void setSupportedPerDatabaseMaxDtus(const QList<OAIElasticPoolPerDatabaseMaxDtuCapability> &supported_per_database_max_dtus);
    bool is_supported_per_database_max_dtus_Set() const;
    bool is_supported_per_database_max_dtus_Valid() const;

    QList<OAIMaxSizeCapability> getSupportedPerDatabaseMaxSizes() const;
    void setSupportedPerDatabaseMaxSizes(const QList<OAIMaxSizeCapability> &supported_per_database_max_sizes);
    bool is_supported_per_database_max_sizes_Set() const;
    bool is_supported_per_database_max_sizes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMaxSizeCapability m_included_max_size;
    bool m_included_max_size_isSet;
    bool m_included_max_size_isValid;

    qint64 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    qint64 m_max_database_count;
    bool m_max_database_count_isSet;
    bool m_max_database_count_isValid;

    OAICapabilityStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<OAIMaxSizeCapability> m_supported_max_sizes;
    bool m_supported_max_sizes_isSet;
    bool m_supported_max_sizes_isValid;

    QList<OAIElasticPoolPerDatabaseMaxDtuCapability> m_supported_per_database_max_dtus;
    bool m_supported_per_database_max_dtus_isSet;
    bool m_supported_per_database_max_dtus_isValid;

    QList<OAIMaxSizeCapability> m_supported_per_database_max_sizes;
    bool m_supported_per_database_max_sizes_isSet;
    bool m_supported_per_database_max_sizes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIElasticPoolDtuCapability)

#endif // OAIElasticPoolDtuCapability_H
