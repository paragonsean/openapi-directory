/**
 * Azure SQL Database capabilities
 * Describes the Azure SQL capabilities available to a subscription for a given location.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationCapabilities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationCapabilities::OAILocationCapabilities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationCapabilities::OAILocationCapabilities() {
    this->initializeModel();
}

OAILocationCapabilities::~OAILocationCapabilities() {}

void OAILocationCapabilities::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_server_versions_isSet = false;
    m_supported_server_versions_isValid = false;
}

void OAILocationCapabilities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationCapabilities::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_server_versions_isValid = ::OpenAPI::fromJsonValue(m_supported_server_versions, json[QString("supportedServerVersions")]);
    m_supported_server_versions_isSet = !json[QString("supportedServerVersions")].isNull() && m_supported_server_versions_isValid;
}

QString OAILocationCapabilities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationCapabilities::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_server_versions.size() > 0) {
        obj.insert(QString("supportedServerVersions"), ::OpenAPI::toJsonValue(m_supported_server_versions));
    }
    return obj;
}

QString OAILocationCapabilities::getName() const {
    return m_name;
}
void OAILocationCapabilities::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILocationCapabilities::is_name_Set() const{
    return m_name_isSet;
}

bool OAILocationCapabilities::is_name_Valid() const{
    return m_name_isValid;
}

OAICapabilityStatus OAILocationCapabilities::getStatus() const {
    return m_status;
}
void OAILocationCapabilities::setStatus(const OAICapabilityStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILocationCapabilities::is_status_Set() const{
    return m_status_isSet;
}

bool OAILocationCapabilities::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIServerVersionCapability> OAILocationCapabilities::getSupportedServerVersions() const {
    return m_supported_server_versions;
}
void OAILocationCapabilities::setSupportedServerVersions(const QList<OAIServerVersionCapability> &supported_server_versions) {
    m_supported_server_versions = supported_server_versions;
    m_supported_server_versions_isSet = true;
}

bool OAILocationCapabilities::is_supported_server_versions_Set() const{
    return m_supported_server_versions_isSet;
}

bool OAILocationCapabilities::is_supported_server_versions_Valid() const{
    return m_supported_server_versions_isValid;
}

bool OAILocationCapabilities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_server_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationCapabilities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
