/*
 * Azure SQL Database capabilities
 * Describes the Azure SQL capabilities available to a subscription for a given location.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CapabilityStatus;
import org.openapitools.client.model.ElasticPoolPerDatabaseMaxDtuCapability;
import org.openapitools.client.model.MaxSizeCapability;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Elastic Pool DTU capability.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:12.416881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElasticPoolDtuCapability {
  public static final String SERIALIZED_NAME_INCLUDED_MAX_SIZE = "includedMaxSize";
  @SerializedName(SERIALIZED_NAME_INCLUDED_MAX_SIZE)
  private MaxSizeCapability includedMaxSize;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Long limit;

  public static final String SERIALIZED_NAME_MAX_DATABASE_COUNT = "maxDatabaseCount";
  @SerializedName(SERIALIZED_NAME_MAX_DATABASE_COUNT)
  private Long maxDatabaseCount;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CapabilityStatus status;

  public static final String SERIALIZED_NAME_SUPPORTED_MAX_SIZES = "supportedMaxSizes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_MAX_SIZES)
  private List<MaxSizeCapability> supportedMaxSizes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_PER_DATABASE_MAX_DTUS = "supportedPerDatabaseMaxDtus";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_PER_DATABASE_MAX_DTUS)
  private List<ElasticPoolPerDatabaseMaxDtuCapability> supportedPerDatabaseMaxDtus = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_PER_DATABASE_MAX_SIZES = "supportedPerDatabaseMaxSizes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_PER_DATABASE_MAX_SIZES)
  private List<MaxSizeCapability> supportedPerDatabaseMaxSizes = new ArrayList<>();

  public ElasticPoolDtuCapability() {
  }

  public ElasticPoolDtuCapability(
     Long limit, 
     Long maxDatabaseCount, 
     List<MaxSizeCapability> supportedMaxSizes, 
     List<ElasticPoolPerDatabaseMaxDtuCapability> supportedPerDatabaseMaxDtus, 
     List<MaxSizeCapability> supportedPerDatabaseMaxSizes
  ) {
    this();
    this.limit = limit;
    this.maxDatabaseCount = maxDatabaseCount;
    this.supportedMaxSizes = supportedMaxSizes;
    this.supportedPerDatabaseMaxDtus = supportedPerDatabaseMaxDtus;
    this.supportedPerDatabaseMaxSizes = supportedPerDatabaseMaxSizes;
  }

  public ElasticPoolDtuCapability includedMaxSize(MaxSizeCapability includedMaxSize) {
    this.includedMaxSize = includedMaxSize;
    return this;
  }

  /**
   * Get includedMaxSize
   * @return includedMaxSize
   */
  @javax.annotation.Nullable
  public MaxSizeCapability getIncludedMaxSize() {
    return includedMaxSize;
  }

  public void setIncludedMaxSize(MaxSizeCapability includedMaxSize) {
    this.includedMaxSize = includedMaxSize;
  }


  /**
   * The maximum size of the database (see &#39;unit&#39; for the units).
   * @return limit
   */
  @javax.annotation.Nullable
  public Long getLimit() {
    return limit;
  }



  /**
   * The maximum number of databases supported.
   * @return maxDatabaseCount
   */
  @javax.annotation.Nullable
  public Long getMaxDatabaseCount() {
    return maxDatabaseCount;
  }



  public ElasticPoolDtuCapability status(CapabilityStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CapabilityStatus getStatus() {
    return status;
  }

  public void setStatus(CapabilityStatus status) {
    this.status = status;
  }


  /**
   * The list of supported max sizes.
   * @return supportedMaxSizes
   */
  @javax.annotation.Nullable
  public List<MaxSizeCapability> getSupportedMaxSizes() {
    return supportedMaxSizes;
  }



  /**
   * The list of supported max database DTUs.
   * @return supportedPerDatabaseMaxDtus
   */
  @javax.annotation.Nullable
  public List<ElasticPoolPerDatabaseMaxDtuCapability> getSupportedPerDatabaseMaxDtus() {
    return supportedPerDatabaseMaxDtus;
  }



  /**
   * The list of supported max database sizes.
   * @return supportedPerDatabaseMaxSizes
   */
  @javax.annotation.Nullable
  public List<MaxSizeCapability> getSupportedPerDatabaseMaxSizes() {
    return supportedPerDatabaseMaxSizes;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticPoolDtuCapability elasticPoolDtuCapability = (ElasticPoolDtuCapability) o;
    return Objects.equals(this.includedMaxSize, elasticPoolDtuCapability.includedMaxSize) &&
        Objects.equals(this.limit, elasticPoolDtuCapability.limit) &&
        Objects.equals(this.maxDatabaseCount, elasticPoolDtuCapability.maxDatabaseCount) &&
        Objects.equals(this.status, elasticPoolDtuCapability.status) &&
        Objects.equals(this.supportedMaxSizes, elasticPoolDtuCapability.supportedMaxSizes) &&
        Objects.equals(this.supportedPerDatabaseMaxDtus, elasticPoolDtuCapability.supportedPerDatabaseMaxDtus) &&
        Objects.equals(this.supportedPerDatabaseMaxSizes, elasticPoolDtuCapability.supportedPerDatabaseMaxSizes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includedMaxSize, limit, maxDatabaseCount, status, supportedMaxSizes, supportedPerDatabaseMaxDtus, supportedPerDatabaseMaxSizes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticPoolDtuCapability {\n");
    sb.append("    includedMaxSize: ").append(toIndentedString(includedMaxSize)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    maxDatabaseCount: ").append(toIndentedString(maxDatabaseCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supportedMaxSizes: ").append(toIndentedString(supportedMaxSizes)).append("\n");
    sb.append("    supportedPerDatabaseMaxDtus: ").append(toIndentedString(supportedPerDatabaseMaxDtus)).append("\n");
    sb.append("    supportedPerDatabaseMaxSizes: ").append(toIndentedString(supportedPerDatabaseMaxSizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("includedMaxSize");
    openapiFields.add("limit");
    openapiFields.add("maxDatabaseCount");
    openapiFields.add("status");
    openapiFields.add("supportedMaxSizes");
    openapiFields.add("supportedPerDatabaseMaxDtus");
    openapiFields.add("supportedPerDatabaseMaxSizes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElasticPoolDtuCapability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElasticPoolDtuCapability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElasticPoolDtuCapability is not found in the empty JSON string", ElasticPoolDtuCapability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElasticPoolDtuCapability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElasticPoolDtuCapability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `includedMaxSize`
      if (jsonObj.get("includedMaxSize") != null && !jsonObj.get("includedMaxSize").isJsonNull()) {
        MaxSizeCapability.validateJsonElement(jsonObj.get("includedMaxSize"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        CapabilityStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("supportedMaxSizes") != null && !jsonObj.get("supportedMaxSizes").isJsonNull()) {
        JsonArray jsonArraysupportedMaxSizes = jsonObj.getAsJsonArray("supportedMaxSizes");
        if (jsonArraysupportedMaxSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedMaxSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedMaxSizes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedMaxSizes").toString()));
          }

          // validate the optional field `supportedMaxSizes` (array)
          for (int i = 0; i < jsonArraysupportedMaxSizes.size(); i++) {
            MaxSizeCapability.validateJsonElement(jsonArraysupportedMaxSizes.get(i));
          };
        }
      }
      if (jsonObj.get("supportedPerDatabaseMaxDtus") != null && !jsonObj.get("supportedPerDatabaseMaxDtus").isJsonNull()) {
        JsonArray jsonArraysupportedPerDatabaseMaxDtus = jsonObj.getAsJsonArray("supportedPerDatabaseMaxDtus");
        if (jsonArraysupportedPerDatabaseMaxDtus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedPerDatabaseMaxDtus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedPerDatabaseMaxDtus` to be an array in the JSON string but got `%s`", jsonObj.get("supportedPerDatabaseMaxDtus").toString()));
          }

          // validate the optional field `supportedPerDatabaseMaxDtus` (array)
          for (int i = 0; i < jsonArraysupportedPerDatabaseMaxDtus.size(); i++) {
            ElasticPoolPerDatabaseMaxDtuCapability.validateJsonElement(jsonArraysupportedPerDatabaseMaxDtus.get(i));
          };
        }
      }
      if (jsonObj.get("supportedPerDatabaseMaxSizes") != null && !jsonObj.get("supportedPerDatabaseMaxSizes").isJsonNull()) {
        JsonArray jsonArraysupportedPerDatabaseMaxSizes = jsonObj.getAsJsonArray("supportedPerDatabaseMaxSizes");
        if (jsonArraysupportedPerDatabaseMaxSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedPerDatabaseMaxSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedPerDatabaseMaxSizes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedPerDatabaseMaxSizes").toString()));
          }

          // validate the optional field `supportedPerDatabaseMaxSizes` (array)
          for (int i = 0; i < jsonArraysupportedPerDatabaseMaxSizes.size(); i++) {
            MaxSizeCapability.validateJsonElement(jsonArraysupportedPerDatabaseMaxSizes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElasticPoolDtuCapability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElasticPoolDtuCapability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElasticPoolDtuCapability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElasticPoolDtuCapability.class));

       return (TypeAdapter<T>) new TypeAdapter<ElasticPoolDtuCapability>() {
           @Override
           public void write(JsonWriter out, ElasticPoolDtuCapability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElasticPoolDtuCapability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElasticPoolDtuCapability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElasticPoolDtuCapability
   * @throws IOException if the JSON string is invalid with respect to ElasticPoolDtuCapability
   */
  public static ElasticPoolDtuCapability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElasticPoolDtuCapability.class);
  }

  /**
   * Convert an instance of ElasticPoolDtuCapability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

