/*
 * Azure SQL Database capabilities
 * Describes the Azure SQL capabilities available to a subscription for a given location.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CapabilityStatus;
import org.openapitools.client.model.ElasticPoolDtuCapability;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The elastic pool edition capabilities.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:12.416881-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElasticPoolEditionCapability {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CapabilityStatus status;

  public static final String SERIALIZED_NAME_SUPPORTED_ELASTIC_POOL_DTUS = "supportedElasticPoolDtus";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_ELASTIC_POOL_DTUS)
  private List<ElasticPoolDtuCapability> supportedElasticPoolDtus = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONE_REDUNDANT = "zoneRedundant";
  @SerializedName(SERIALIZED_NAME_ZONE_REDUNDANT)
  private Boolean zoneRedundant;

  public ElasticPoolEditionCapability() {
  }

  public ElasticPoolEditionCapability(
     String name, 
     List<ElasticPoolDtuCapability> supportedElasticPoolDtus, 
     Boolean zoneRedundant
  ) {
    this();
    this.name = name;
    this.supportedElasticPoolDtus = supportedElasticPoolDtus;
    this.zoneRedundant = zoneRedundant;
  }

  /**
   * The elastic pool edition name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public ElasticPoolEditionCapability status(CapabilityStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CapabilityStatus getStatus() {
    return status;
  }

  public void setStatus(CapabilityStatus status) {
    this.status = status;
  }


  /**
   * The list of supported elastic pool DTU levels for the edition.
   * @return supportedElasticPoolDtus
   */
  @javax.annotation.Nullable
  public List<ElasticPoolDtuCapability> getSupportedElasticPoolDtus() {
    return supportedElasticPoolDtus;
  }



  /**
   * Whether or not zone redundancy is supported for the edition.
   * @return zoneRedundant
   */
  @javax.annotation.Nullable
  public Boolean getZoneRedundant() {
    return zoneRedundant;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticPoolEditionCapability elasticPoolEditionCapability = (ElasticPoolEditionCapability) o;
    return Objects.equals(this.name, elasticPoolEditionCapability.name) &&
        Objects.equals(this.status, elasticPoolEditionCapability.status) &&
        Objects.equals(this.supportedElasticPoolDtus, elasticPoolEditionCapability.supportedElasticPoolDtus) &&
        Objects.equals(this.zoneRedundant, elasticPoolEditionCapability.zoneRedundant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, status, supportedElasticPoolDtus, zoneRedundant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticPoolEditionCapability {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supportedElasticPoolDtus: ").append(toIndentedString(supportedElasticPoolDtus)).append("\n");
    sb.append("    zoneRedundant: ").append(toIndentedString(zoneRedundant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("supportedElasticPoolDtus");
    openapiFields.add("zoneRedundant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElasticPoolEditionCapability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElasticPoolEditionCapability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElasticPoolEditionCapability is not found in the empty JSON string", ElasticPoolEditionCapability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElasticPoolEditionCapability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElasticPoolEditionCapability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        CapabilityStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("supportedElasticPoolDtus") != null && !jsonObj.get("supportedElasticPoolDtus").isJsonNull()) {
        JsonArray jsonArraysupportedElasticPoolDtus = jsonObj.getAsJsonArray("supportedElasticPoolDtus");
        if (jsonArraysupportedElasticPoolDtus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedElasticPoolDtus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedElasticPoolDtus` to be an array in the JSON string but got `%s`", jsonObj.get("supportedElasticPoolDtus").toString()));
          }

          // validate the optional field `supportedElasticPoolDtus` (array)
          for (int i = 0; i < jsonArraysupportedElasticPoolDtus.size(); i++) {
            ElasticPoolDtuCapability.validateJsonElement(jsonArraysupportedElasticPoolDtus.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElasticPoolEditionCapability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElasticPoolEditionCapability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElasticPoolEditionCapability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElasticPoolEditionCapability.class));

       return (TypeAdapter<T>) new TypeAdapter<ElasticPoolEditionCapability>() {
           @Override
           public void write(JsonWriter out, ElasticPoolEditionCapability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElasticPoolEditionCapability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElasticPoolEditionCapability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElasticPoolEditionCapability
   * @throws IOException if the JSON string is invalid with respect to ElasticPoolEditionCapability
   */
  public static ElasticPoolEditionCapability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElasticPoolEditionCapability.class);
  }

  /**
   * Convert an instance of ElasticPoolEditionCapability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

