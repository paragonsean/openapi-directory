/**
 * Azure SQL Database capabilities
 * Describes the Azure SQL capabilities available to a subscription for a given location.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CapabilityStatus from './CapabilityStatus';
import MaxSizeCapability from './MaxSizeCapability';
import PerformanceLevel from './PerformanceLevel';

/**
 * The ServiceObjectiveCapability model module.
 * @module model/ServiceObjectiveCapability
 * @version 2014-04-01
 */
class ServiceObjectiveCapability {
    /**
     * Constructs a new <code>ServiceObjectiveCapability</code>.
     * The service objectives capability.
     * @alias module:model/ServiceObjectiveCapability
     */
    constructor() { 
        
        ServiceObjectiveCapability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceObjectiveCapability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceObjectiveCapability} obj Optional instance to populate.
     * @return {module:model/ServiceObjectiveCapability} The populated <code>ServiceObjectiveCapability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceObjectiveCapability();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('includedMaxSize')) {
                obj['includedMaxSize'] = MaxSizeCapability.constructFromObject(data['includedMaxSize']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('performanceLevel')) {
                obj['performanceLevel'] = PerformanceLevel.constructFromObject(data['performanceLevel']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = CapabilityStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('supportedMaxSizes')) {
                obj['supportedMaxSizes'] = ApiClient.convertToType(data['supportedMaxSizes'], [MaxSizeCapability]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceObjectiveCapability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceObjectiveCapability</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `includedMaxSize`
        if (data['includedMaxSize']) { // data not null
          MaxSizeCapability.validateJSON(data['includedMaxSize']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `performanceLevel`
        if (data['performanceLevel']) { // data not null
          PerformanceLevel.validateJSON(data['performanceLevel']);
        }
        if (data['supportedMaxSizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportedMaxSizes'])) {
                throw new Error("Expected the field `supportedMaxSizes` to be an array in the JSON data but got " + data['supportedMaxSizes']);
            }
            // validate the optional field `supportedMaxSizes` (array)
            for (const item of data['supportedMaxSizes']) {
                MaxSizeCapability.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The unique ID of the service objective.
 * @member {String} id
 */
ServiceObjectiveCapability.prototype['id'] = undefined;

/**
 * @member {module:model/MaxSizeCapability} includedMaxSize
 */
ServiceObjectiveCapability.prototype['includedMaxSize'] = undefined;

/**
 * The service objective name.
 * @member {String} name
 */
ServiceObjectiveCapability.prototype['name'] = undefined;

/**
 * @member {module:model/PerformanceLevel} performanceLevel
 */
ServiceObjectiveCapability.prototype['performanceLevel'] = undefined;

/**
 * @member {module:model/CapabilityStatus} status
 */
ServiceObjectiveCapability.prototype['status'] = undefined;

/**
 * The list of supported maximum database sizes for this service objective.
 * @member {Array.<module:model/MaxSizeCapability>} supportedMaxSizes
 */
ServiceObjectiveCapability.prototype['supportedMaxSizes'] = undefined;






export default ServiceObjectiveCapability;

