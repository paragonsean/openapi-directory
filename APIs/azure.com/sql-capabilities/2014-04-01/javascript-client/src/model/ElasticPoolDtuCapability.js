/**
 * Azure SQL Database capabilities
 * Describes the Azure SQL capabilities available to a subscription for a given location.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CapabilityStatus from './CapabilityStatus';
import ElasticPoolPerDatabaseMaxDtuCapability from './ElasticPoolPerDatabaseMaxDtuCapability';
import MaxSizeCapability from './MaxSizeCapability';

/**
 * The ElasticPoolDtuCapability model module.
 * @module model/ElasticPoolDtuCapability
 * @version 2014-04-01
 */
class ElasticPoolDtuCapability {
    /**
     * Constructs a new <code>ElasticPoolDtuCapability</code>.
     * The Elastic Pool DTU capability.
     * @alias module:model/ElasticPoolDtuCapability
     */
    constructor() { 
        
        ElasticPoolDtuCapability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ElasticPoolDtuCapability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElasticPoolDtuCapability} obj Optional instance to populate.
     * @return {module:model/ElasticPoolDtuCapability} The populated <code>ElasticPoolDtuCapability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElasticPoolDtuCapability();

            if (data.hasOwnProperty('includedMaxSize')) {
                obj['includedMaxSize'] = MaxSizeCapability.constructFromObject(data['includedMaxSize']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('maxDatabaseCount')) {
                obj['maxDatabaseCount'] = ApiClient.convertToType(data['maxDatabaseCount'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = CapabilityStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('supportedMaxSizes')) {
                obj['supportedMaxSizes'] = ApiClient.convertToType(data['supportedMaxSizes'], [MaxSizeCapability]);
            }
            if (data.hasOwnProperty('supportedPerDatabaseMaxDtus')) {
                obj['supportedPerDatabaseMaxDtus'] = ApiClient.convertToType(data['supportedPerDatabaseMaxDtus'], [ElasticPoolPerDatabaseMaxDtuCapability]);
            }
            if (data.hasOwnProperty('supportedPerDatabaseMaxSizes')) {
                obj['supportedPerDatabaseMaxSizes'] = ApiClient.convertToType(data['supportedPerDatabaseMaxSizes'], [MaxSizeCapability]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElasticPoolDtuCapability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElasticPoolDtuCapability</code>.
     */
    static validateJSON(data) {
        // validate the optional field `includedMaxSize`
        if (data['includedMaxSize']) { // data not null
          MaxSizeCapability.validateJSON(data['includedMaxSize']);
        }
        if (data['supportedMaxSizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportedMaxSizes'])) {
                throw new Error("Expected the field `supportedMaxSizes` to be an array in the JSON data but got " + data['supportedMaxSizes']);
            }
            // validate the optional field `supportedMaxSizes` (array)
            for (const item of data['supportedMaxSizes']) {
                MaxSizeCapability.validateJSON(item);
            };
        }
        if (data['supportedPerDatabaseMaxDtus']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportedPerDatabaseMaxDtus'])) {
                throw new Error("Expected the field `supportedPerDatabaseMaxDtus` to be an array in the JSON data but got " + data['supportedPerDatabaseMaxDtus']);
            }
            // validate the optional field `supportedPerDatabaseMaxDtus` (array)
            for (const item of data['supportedPerDatabaseMaxDtus']) {
                ElasticPoolPerDatabaseMaxDtuCapability.validateJSON(item);
            };
        }
        if (data['supportedPerDatabaseMaxSizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportedPerDatabaseMaxSizes'])) {
                throw new Error("Expected the field `supportedPerDatabaseMaxSizes` to be an array in the JSON data but got " + data['supportedPerDatabaseMaxSizes']);
            }
            // validate the optional field `supportedPerDatabaseMaxSizes` (array)
            for (const item of data['supportedPerDatabaseMaxSizes']) {
                MaxSizeCapability.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/MaxSizeCapability} includedMaxSize
 */
ElasticPoolDtuCapability.prototype['includedMaxSize'] = undefined;

/**
 * The maximum size of the database (see 'unit' for the units).
 * @member {Number} limit
 */
ElasticPoolDtuCapability.prototype['limit'] = undefined;

/**
 * The maximum number of databases supported.
 * @member {Number} maxDatabaseCount
 */
ElasticPoolDtuCapability.prototype['maxDatabaseCount'] = undefined;

/**
 * @member {module:model/CapabilityStatus} status
 */
ElasticPoolDtuCapability.prototype['status'] = undefined;

/**
 * The list of supported max sizes.
 * @member {Array.<module:model/MaxSizeCapability>} supportedMaxSizes
 */
ElasticPoolDtuCapability.prototype['supportedMaxSizes'] = undefined;

/**
 * The list of supported max database DTUs.
 * @member {Array.<module:model/ElasticPoolPerDatabaseMaxDtuCapability>} supportedPerDatabaseMaxDtus
 */
ElasticPoolDtuCapability.prototype['supportedPerDatabaseMaxDtus'] = undefined;

/**
 * The list of supported max database sizes.
 * @member {Array.<module:model/MaxSizeCapability>} supportedPerDatabaseMaxSizes
 */
ElasticPoolDtuCapability.prototype['supportedPerDatabaseMaxSizes'] = undefined;






export default ElasticPoolDtuCapability;

