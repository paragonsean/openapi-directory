/**
 * Azure SQL Database capabilities
 * Describes the Azure SQL capabilities available to a subscription for a given location.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CapabilityStatus from './CapabilityStatus';
import ServiceObjectiveCapability from './ServiceObjectiveCapability';

/**
 * The EditionCapability model module.
 * @module model/EditionCapability
 * @version 2014-04-01
 */
class EditionCapability {
    /**
     * Constructs a new <code>EditionCapability</code>.
     * The database edition capabilities.
     * @alias module:model/EditionCapability
     */
    constructor() { 
        
        EditionCapability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EditionCapability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditionCapability} obj Optional instance to populate.
     * @return {module:model/EditionCapability} The populated <code>EditionCapability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditionCapability();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = CapabilityStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('supportedServiceLevelObjectives')) {
                obj['supportedServiceLevelObjectives'] = ApiClient.convertToType(data['supportedServiceLevelObjectives'], [ServiceObjectiveCapability]);
            }
            if (data.hasOwnProperty('zoneRedundant')) {
                obj['zoneRedundant'] = ApiClient.convertToType(data['zoneRedundant'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditionCapability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditionCapability</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['supportedServiceLevelObjectives']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supportedServiceLevelObjectives'])) {
                throw new Error("Expected the field `supportedServiceLevelObjectives` to be an array in the JSON data but got " + data['supportedServiceLevelObjectives']);
            }
            // validate the optional field `supportedServiceLevelObjectives` (array)
            for (const item of data['supportedServiceLevelObjectives']) {
                ServiceObjectiveCapability.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The edition name.
 * @member {String} name
 */
EditionCapability.prototype['name'] = undefined;

/**
 * @member {module:model/CapabilityStatus} status
 */
EditionCapability.prototype['status'] = undefined;

/**
 * The list of supported service objectives for the edition.
 * @member {Array.<module:model/ServiceObjectiveCapability>} supportedServiceLevelObjectives
 */
EditionCapability.prototype['supportedServiceLevelObjectives'] = undefined;

/**
 * Whether or not zone redundancy is supported for the edition.
 * @member {Boolean} zoneRedundant
 */
EditionCapability.prototype['zoneRedundant'] = undefined;






export default EditionCapability;

