/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageCapability::OAIStorageCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageCapability::OAIStorageCapability() {
    this->initializeModel();
}

OAIStorageCapability::~OAIStorageCapability() {}

void OAIStorageCapability::initializeModel() {

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_storage_account_type_isSet = false;
    m_storage_account_type_isValid = false;
}

void OAIStorageCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageCapability::fromJsonObject(QJsonObject json) {

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_storage_account_type_isValid = ::OpenAPI::fromJsonValue(m_storage_account_type, json[QString("storageAccountType")]);
    m_storage_account_type_isSet = !json[QString("storageAccountType")].isNull() && m_storage_account_type_isValid;
}

QString OAIStorageCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_storage_account_type_isSet) {
        obj.insert(QString("storageAccountType"), ::OpenAPI::toJsonValue(m_storage_account_type));
    }
    return obj;
}

QString OAIStorageCapability::getReason() const {
    return m_reason;
}
void OAIStorageCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIStorageCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIStorageCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIStorageCapability::getStatus() const {
    return m_status;
}
void OAIStorageCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStorageCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStorageCapability::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStorageCapability::getStorageAccountType() const {
    return m_storage_account_type;
}
void OAIStorageCapability::setStorageAccountType(const QString &storage_account_type) {
    m_storage_account_type = storage_account_type;
    m_storage_account_type_isSet = true;
}

bool OAIStorageCapability::is_storage_account_type_Set() const{
    return m_storage_account_type_isSet;
}

bool OAIStorageCapability::is_storage_account_type_Valid() const{
    return m_storage_account_type_isValid;
}

bool OAIStorageCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
