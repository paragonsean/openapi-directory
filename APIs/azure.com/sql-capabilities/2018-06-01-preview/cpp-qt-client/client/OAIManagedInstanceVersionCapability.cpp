/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedInstanceVersionCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedInstanceVersionCapability::OAIManagedInstanceVersionCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedInstanceVersionCapability::OAIManagedInstanceVersionCapability() {
    this->initializeModel();
}

OAIManagedInstanceVersionCapability::~OAIManagedInstanceVersionCapability() {}

void OAIManagedInstanceVersionCapability::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_editions_isSet = false;
    m_supported_editions_isValid = false;

    m_supported_instance_pool_editions_isSet = false;
    m_supported_instance_pool_editions_isValid = false;
}

void OAIManagedInstanceVersionCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedInstanceVersionCapability::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_editions_isValid = ::OpenAPI::fromJsonValue(m_supported_editions, json[QString("supportedEditions")]);
    m_supported_editions_isSet = !json[QString("supportedEditions")].isNull() && m_supported_editions_isValid;

    m_supported_instance_pool_editions_isValid = ::OpenAPI::fromJsonValue(m_supported_instance_pool_editions, json[QString("supportedInstancePoolEditions")]);
    m_supported_instance_pool_editions_isSet = !json[QString("supportedInstancePoolEditions")].isNull() && m_supported_instance_pool_editions_isValid;
}

QString OAIManagedInstanceVersionCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedInstanceVersionCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_editions.size() > 0) {
        obj.insert(QString("supportedEditions"), ::OpenAPI::toJsonValue(m_supported_editions));
    }
    if (m_supported_instance_pool_editions.size() > 0) {
        obj.insert(QString("supportedInstancePoolEditions"), ::OpenAPI::toJsonValue(m_supported_instance_pool_editions));
    }
    return obj;
}

QString OAIManagedInstanceVersionCapability::getName() const {
    return m_name;
}
void OAIManagedInstanceVersionCapability::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManagedInstanceVersionCapability::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManagedInstanceVersionCapability::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIManagedInstanceVersionCapability::getReason() const {
    return m_reason;
}
void OAIManagedInstanceVersionCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIManagedInstanceVersionCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIManagedInstanceVersionCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIManagedInstanceVersionCapability::getStatus() const {
    return m_status;
}
void OAIManagedInstanceVersionCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIManagedInstanceVersionCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIManagedInstanceVersionCapability::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIManagedInstanceEditionCapability> OAIManagedInstanceVersionCapability::getSupportedEditions() const {
    return m_supported_editions;
}
void OAIManagedInstanceVersionCapability::setSupportedEditions(const QList<OAIManagedInstanceEditionCapability> &supported_editions) {
    m_supported_editions = supported_editions;
    m_supported_editions_isSet = true;
}

bool OAIManagedInstanceVersionCapability::is_supported_editions_Set() const{
    return m_supported_editions_isSet;
}

bool OAIManagedInstanceVersionCapability::is_supported_editions_Valid() const{
    return m_supported_editions_isValid;
}

QList<OAIInstancePoolEditionCapability> OAIManagedInstanceVersionCapability::getSupportedInstancePoolEditions() const {
    return m_supported_instance_pool_editions;
}
void OAIManagedInstanceVersionCapability::setSupportedInstancePoolEditions(const QList<OAIInstancePoolEditionCapability> &supported_instance_pool_editions) {
    m_supported_instance_pool_editions = supported_instance_pool_editions;
    m_supported_instance_pool_editions_isSet = true;
}

bool OAIManagedInstanceVersionCapability::is_supported_instance_pool_editions_Set() const{
    return m_supported_instance_pool_editions_isSet;
}

bool OAIManagedInstanceVersionCapability::is_supported_instance_pool_editions_Valid() const{
    return m_supported_instance_pool_editions_isValid;
}

bool OAIManagedInstanceVersionCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_editions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_instance_pool_editions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedInstanceVersionCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
