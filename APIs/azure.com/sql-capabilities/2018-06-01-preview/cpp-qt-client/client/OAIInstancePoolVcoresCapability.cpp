/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstancePoolVcoresCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstancePoolVcoresCapability::OAIInstancePoolVcoresCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstancePoolVcoresCapability::OAIInstancePoolVcoresCapability() {
    this->initializeModel();
}

OAIInstancePoolVcoresCapability::~OAIInstancePoolVcoresCapability() {}

void OAIInstancePoolVcoresCapability::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_storage_limit_isSet = false;
    m_storage_limit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIInstancePoolVcoresCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstancePoolVcoresCapability::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_storage_limit_isValid = ::OpenAPI::fromJsonValue(m_storage_limit, json[QString("storageLimit")]);
    m_storage_limit_isSet = !json[QString("storageLimit")].isNull() && m_storage_limit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIInstancePoolVcoresCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstancePoolVcoresCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_storage_limit.isSet()) {
        obj.insert(QString("storageLimit"), ::OpenAPI::toJsonValue(m_storage_limit));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIInstancePoolVcoresCapability::getName() const {
    return m_name;
}
void OAIInstancePoolVcoresCapability::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstancePoolVcoresCapability::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstancePoolVcoresCapability::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInstancePoolVcoresCapability::getReason() const {
    return m_reason;
}
void OAIInstancePoolVcoresCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIInstancePoolVcoresCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIInstancePoolVcoresCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIInstancePoolVcoresCapability::getStatus() const {
    return m_status;
}
void OAIInstancePoolVcoresCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInstancePoolVcoresCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInstancePoolVcoresCapability::is_status_Valid() const{
    return m_status_isValid;
}

OAIMaxSizeCapability OAIInstancePoolVcoresCapability::getStorageLimit() const {
    return m_storage_limit;
}
void OAIInstancePoolVcoresCapability::setStorageLimit(const OAIMaxSizeCapability &storage_limit) {
    m_storage_limit = storage_limit;
    m_storage_limit_isSet = true;
}

bool OAIInstancePoolVcoresCapability::is_storage_limit_Set() const{
    return m_storage_limit_isSet;
}

bool OAIInstancePoolVcoresCapability::is_storage_limit_Valid() const{
    return m_storage_limit_isValid;
}

qint32 OAIInstancePoolVcoresCapability::getValue() const {
    return m_value;
}
void OAIInstancePoolVcoresCapability::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIInstancePoolVcoresCapability::is_value_Set() const{
    return m_value_isSet;
}

bool OAIInstancePoolVcoresCapability::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIInstancePoolVcoresCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstancePoolVcoresCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
