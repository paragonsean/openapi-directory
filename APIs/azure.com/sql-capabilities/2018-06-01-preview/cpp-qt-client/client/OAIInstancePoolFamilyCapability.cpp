/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstancePoolFamilyCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstancePoolFamilyCapability::OAIInstancePoolFamilyCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstancePoolFamilyCapability::OAIInstancePoolFamilyCapability() {
    this->initializeModel();
}

OAIInstancePoolFamilyCapability::~OAIInstancePoolFamilyCapability() {}

void OAIInstancePoolFamilyCapability::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_license_types_isSet = false;
    m_supported_license_types_isValid = false;

    m_supported_vcores_values_isSet = false;
    m_supported_vcores_values_isValid = false;
}

void OAIInstancePoolFamilyCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstancePoolFamilyCapability::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_license_types_isValid = ::OpenAPI::fromJsonValue(m_supported_license_types, json[QString("supportedLicenseTypes")]);
    m_supported_license_types_isSet = !json[QString("supportedLicenseTypes")].isNull() && m_supported_license_types_isValid;

    m_supported_vcores_values_isValid = ::OpenAPI::fromJsonValue(m_supported_vcores_values, json[QString("supportedVcoresValues")]);
    m_supported_vcores_values_isSet = !json[QString("supportedVcoresValues")].isNull() && m_supported_vcores_values_isValid;
}

QString OAIInstancePoolFamilyCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstancePoolFamilyCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_license_types.size() > 0) {
        obj.insert(QString("supportedLicenseTypes"), ::OpenAPI::toJsonValue(m_supported_license_types));
    }
    if (m_supported_vcores_values.size() > 0) {
        obj.insert(QString("supportedVcoresValues"), ::OpenAPI::toJsonValue(m_supported_vcores_values));
    }
    return obj;
}

QString OAIInstancePoolFamilyCapability::getName() const {
    return m_name;
}
void OAIInstancePoolFamilyCapability::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstancePoolFamilyCapability::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstancePoolFamilyCapability::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInstancePoolFamilyCapability::getReason() const {
    return m_reason;
}
void OAIInstancePoolFamilyCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIInstancePoolFamilyCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIInstancePoolFamilyCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIInstancePoolFamilyCapability::getStatus() const {
    return m_status;
}
void OAIInstancePoolFamilyCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInstancePoolFamilyCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInstancePoolFamilyCapability::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAILicenseTypeCapability> OAIInstancePoolFamilyCapability::getSupportedLicenseTypes() const {
    return m_supported_license_types;
}
void OAIInstancePoolFamilyCapability::setSupportedLicenseTypes(const QList<OAILicenseTypeCapability> &supported_license_types) {
    m_supported_license_types = supported_license_types;
    m_supported_license_types_isSet = true;
}

bool OAIInstancePoolFamilyCapability::is_supported_license_types_Set() const{
    return m_supported_license_types_isSet;
}

bool OAIInstancePoolFamilyCapability::is_supported_license_types_Valid() const{
    return m_supported_license_types_isValid;
}

QList<OAIInstancePoolVcoresCapability> OAIInstancePoolFamilyCapability::getSupportedVcoresValues() const {
    return m_supported_vcores_values;
}
void OAIInstancePoolFamilyCapability::setSupportedVcoresValues(const QList<OAIInstancePoolVcoresCapability> &supported_vcores_values) {
    m_supported_vcores_values = supported_vcores_values;
    m_supported_vcores_values_isSet = true;
}

bool OAIInstancePoolFamilyCapability::is_supported_vcores_values_Set() const{
    return m_supported_vcores_values_isSet;
}

bool OAIInstancePoolFamilyCapability::is_supported_vcores_values_Valid() const{
    return m_supported_vcores_values_isValid;
}

bool OAIInstancePoolFamilyCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_license_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_vcores_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstancePoolFamilyCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
