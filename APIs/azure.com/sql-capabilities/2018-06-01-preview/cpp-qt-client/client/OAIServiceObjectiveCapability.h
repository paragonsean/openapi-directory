/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServiceObjectiveCapability.h
 *
 * The service objectives capability.
 */

#ifndef OAIServiceObjectiveCapability_H
#define OAIServiceObjectiveCapability_H

#include <QJsonObject>

#include "OAIAutoPauseDelayTimeRange.h"
#include "OAIElasticPoolPerformanceLevelCapability_sku.h"
#include "OAILicenseTypeCapability.h"
#include "OAIMaxSizeCapability.h"
#include "OAIMaxSizeRangeCapability.h"
#include "OAIMinCapacityCapability.h"
#include "OAIPerformanceLevelCapability.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMaxSizeCapability;
class OAIPerformanceLevelCapability;
class OAIElasticPoolPerformanceLevelCapability_sku;
class OAIAutoPauseDelayTimeRange;
class OAILicenseTypeCapability;
class OAIMaxSizeRangeCapability;
class OAIMinCapacityCapability;

class OAIServiceObjectiveCapability : public OAIObject {
public:
    OAIServiceObjectiveCapability();
    OAIServiceObjectiveCapability(QString json);
    ~OAIServiceObjectiveCapability() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComputeModel() const;
    void setComputeModel(const QString &compute_model);
    bool is_compute_model_Set() const;
    bool is_compute_model_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIMaxSizeCapability getIncludedMaxSize() const;
    void setIncludedMaxSize(const OAIMaxSizeCapability &included_max_size);
    bool is_included_max_size_Set() const;
    bool is_included_max_size_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIPerformanceLevelCapability getPerformanceLevel() const;
    void setPerformanceLevel(const OAIPerformanceLevelCapability &performance_level);
    bool is_performance_level_Set() const;
    bool is_performance_level_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    OAIElasticPoolPerformanceLevelCapability_sku getSku() const;
    void setSku(const OAIElasticPoolPerformanceLevelCapability_sku &sku);
    bool is_sku_Set() const;
    bool is_sku_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIAutoPauseDelayTimeRange getSupportedAutoPauseDelay() const;
    void setSupportedAutoPauseDelay(const OAIAutoPauseDelayTimeRange &supported_auto_pause_delay);
    bool is_supported_auto_pause_delay_Set() const;
    bool is_supported_auto_pause_delay_Valid() const;

    QList<OAILicenseTypeCapability> getSupportedLicenseTypes() const;
    void setSupportedLicenseTypes(const QList<OAILicenseTypeCapability> &supported_license_types);
    bool is_supported_license_types_Set() const;
    bool is_supported_license_types_Valid() const;

    QList<OAIMaxSizeRangeCapability> getSupportedMaxSizes() const;
    void setSupportedMaxSizes(const QList<OAIMaxSizeRangeCapability> &supported_max_sizes);
    bool is_supported_max_sizes_Set() const;
    bool is_supported_max_sizes_Valid() const;

    QList<OAIMinCapacityCapability> getSupportedMinCapacities() const;
    void setSupportedMinCapacities(const QList<OAIMinCapacityCapability> &supported_min_capacities);
    bool is_supported_min_capacities_Set() const;
    bool is_supported_min_capacities_Valid() const;

    bool isZoneRedundant() const;
    void setZoneRedundant(const bool &zone_redundant);
    bool is_zone_redundant_Set() const;
    bool is_zone_redundant_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_compute_model;
    bool m_compute_model_isSet;
    bool m_compute_model_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIMaxSizeCapability m_included_max_size;
    bool m_included_max_size_isSet;
    bool m_included_max_size_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIPerformanceLevelCapability m_performance_level;
    bool m_performance_level_isSet;
    bool m_performance_level_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    OAIElasticPoolPerformanceLevelCapability_sku m_sku;
    bool m_sku_isSet;
    bool m_sku_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIAutoPauseDelayTimeRange m_supported_auto_pause_delay;
    bool m_supported_auto_pause_delay_isSet;
    bool m_supported_auto_pause_delay_isValid;

    QList<OAILicenseTypeCapability> m_supported_license_types;
    bool m_supported_license_types_isSet;
    bool m_supported_license_types_isValid;

    QList<OAIMaxSizeRangeCapability> m_supported_max_sizes;
    bool m_supported_max_sizes_isSet;
    bool m_supported_max_sizes_isValid;

    QList<OAIMinCapacityCapability> m_supported_min_capacities;
    bool m_supported_min_capacities_isSet;
    bool m_supported_min_capacities_isValid;

    bool m_zone_redundant;
    bool m_zone_redundant_isSet;
    bool m_zone_redundant_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServiceObjectiveCapability)

#endif // OAIServiceObjectiveCapability_H
