/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedInstanceVcoresCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedInstanceVcoresCapability::OAIManagedInstanceVcoresCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedInstanceVcoresCapability::OAIManagedInstanceVcoresCapability() {
    this->initializeModel();
}

OAIManagedInstanceVcoresCapability::~OAIManagedInstanceVcoresCapability() {}

void OAIManagedInstanceVcoresCapability::initializeModel() {

    m_included_max_size_isSet = false;
    m_included_max_size_isValid = false;

    m_instance_pool_supported_isSet = false;
    m_instance_pool_supported_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_standalone_supported_isSet = false;
    m_standalone_supported_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_storage_sizes_isSet = false;
    m_supported_storage_sizes_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIManagedInstanceVcoresCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedInstanceVcoresCapability::fromJsonObject(QJsonObject json) {

    m_included_max_size_isValid = ::OpenAPI::fromJsonValue(m_included_max_size, json[QString("includedMaxSize")]);
    m_included_max_size_isSet = !json[QString("includedMaxSize")].isNull() && m_included_max_size_isValid;

    m_instance_pool_supported_isValid = ::OpenAPI::fromJsonValue(m_instance_pool_supported, json[QString("instancePoolSupported")]);
    m_instance_pool_supported_isSet = !json[QString("instancePoolSupported")].isNull() && m_instance_pool_supported_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_standalone_supported_isValid = ::OpenAPI::fromJsonValue(m_standalone_supported, json[QString("standaloneSupported")]);
    m_standalone_supported_isSet = !json[QString("standaloneSupported")].isNull() && m_standalone_supported_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_storage_sizes_isValid = ::OpenAPI::fromJsonValue(m_supported_storage_sizes, json[QString("supportedStorageSizes")]);
    m_supported_storage_sizes_isSet = !json[QString("supportedStorageSizes")].isNull() && m_supported_storage_sizes_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIManagedInstanceVcoresCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedInstanceVcoresCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_included_max_size.isSet()) {
        obj.insert(QString("includedMaxSize"), ::OpenAPI::toJsonValue(m_included_max_size));
    }
    if (m_instance_pool_supported_isSet) {
        obj.insert(QString("instancePoolSupported"), ::OpenAPI::toJsonValue(m_instance_pool_supported));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_standalone_supported_isSet) {
        obj.insert(QString("standaloneSupported"), ::OpenAPI::toJsonValue(m_standalone_supported));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_storage_sizes.size() > 0) {
        obj.insert(QString("supportedStorageSizes"), ::OpenAPI::toJsonValue(m_supported_storage_sizes));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIMaxSizeCapability OAIManagedInstanceVcoresCapability::getIncludedMaxSize() const {
    return m_included_max_size;
}
void OAIManagedInstanceVcoresCapability::setIncludedMaxSize(const OAIMaxSizeCapability &included_max_size) {
    m_included_max_size = included_max_size;
    m_included_max_size_isSet = true;
}

bool OAIManagedInstanceVcoresCapability::is_included_max_size_Set() const{
    return m_included_max_size_isSet;
}

bool OAIManagedInstanceVcoresCapability::is_included_max_size_Valid() const{
    return m_included_max_size_isValid;
}

bool OAIManagedInstanceVcoresCapability::isInstancePoolSupported() const {
    return m_instance_pool_supported;
}
void OAIManagedInstanceVcoresCapability::setInstancePoolSupported(const bool &instance_pool_supported) {
    m_instance_pool_supported = instance_pool_supported;
    m_instance_pool_supported_isSet = true;
}

bool OAIManagedInstanceVcoresCapability::is_instance_pool_supported_Set() const{
    return m_instance_pool_supported_isSet;
}

bool OAIManagedInstanceVcoresCapability::is_instance_pool_supported_Valid() const{
    return m_instance_pool_supported_isValid;
}

QString OAIManagedInstanceVcoresCapability::getName() const {
    return m_name;
}
void OAIManagedInstanceVcoresCapability::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManagedInstanceVcoresCapability::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManagedInstanceVcoresCapability::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIManagedInstanceVcoresCapability::getReason() const {
    return m_reason;
}
void OAIManagedInstanceVcoresCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIManagedInstanceVcoresCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIManagedInstanceVcoresCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIManagedInstanceVcoresCapability::isStandaloneSupported() const {
    return m_standalone_supported;
}
void OAIManagedInstanceVcoresCapability::setStandaloneSupported(const bool &standalone_supported) {
    m_standalone_supported = standalone_supported;
    m_standalone_supported_isSet = true;
}

bool OAIManagedInstanceVcoresCapability::is_standalone_supported_Set() const{
    return m_standalone_supported_isSet;
}

bool OAIManagedInstanceVcoresCapability::is_standalone_supported_Valid() const{
    return m_standalone_supported_isValid;
}

QString OAIManagedInstanceVcoresCapability::getStatus() const {
    return m_status;
}
void OAIManagedInstanceVcoresCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIManagedInstanceVcoresCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIManagedInstanceVcoresCapability::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIMaxSizeRangeCapability> OAIManagedInstanceVcoresCapability::getSupportedStorageSizes() const {
    return m_supported_storage_sizes;
}
void OAIManagedInstanceVcoresCapability::setSupportedStorageSizes(const QList<OAIMaxSizeRangeCapability> &supported_storage_sizes) {
    m_supported_storage_sizes = supported_storage_sizes;
    m_supported_storage_sizes_isSet = true;
}

bool OAIManagedInstanceVcoresCapability::is_supported_storage_sizes_Set() const{
    return m_supported_storage_sizes_isSet;
}

bool OAIManagedInstanceVcoresCapability::is_supported_storage_sizes_Valid() const{
    return m_supported_storage_sizes_isValid;
}

qint32 OAIManagedInstanceVcoresCapability::getValue() const {
    return m_value;
}
void OAIManagedInstanceVcoresCapability::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIManagedInstanceVcoresCapability::is_value_Set() const{
    return m_value_isSet;
}

bool OAIManagedInstanceVcoresCapability::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIManagedInstanceVcoresCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_included_max_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_pool_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standalone_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_storage_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedInstanceVcoresCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
