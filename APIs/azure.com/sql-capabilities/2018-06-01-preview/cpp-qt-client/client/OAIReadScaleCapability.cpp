/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadScaleCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadScaleCapability::OAIReadScaleCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadScaleCapability::OAIReadScaleCapability() {
    this->initializeModel();
}

OAIReadScaleCapability::~OAIReadScaleCapability() {}

void OAIReadScaleCapability::initializeModel() {

    m_max_number_of_replicas_isSet = false;
    m_max_number_of_replicas_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIReadScaleCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadScaleCapability::fromJsonObject(QJsonObject json) {

    m_max_number_of_replicas_isValid = ::OpenAPI::fromJsonValue(m_max_number_of_replicas, json[QString("maxNumberOfReplicas")]);
    m_max_number_of_replicas_isSet = !json[QString("maxNumberOfReplicas")].isNull() && m_max_number_of_replicas_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIReadScaleCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadScaleCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_max_number_of_replicas_isSet) {
        obj.insert(QString("maxNumberOfReplicas"), ::OpenAPI::toJsonValue(m_max_number_of_replicas));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIReadScaleCapability::getMaxNumberOfReplicas() const {
    return m_max_number_of_replicas;
}
void OAIReadScaleCapability::setMaxNumberOfReplicas(const qint32 &max_number_of_replicas) {
    m_max_number_of_replicas = max_number_of_replicas;
    m_max_number_of_replicas_isSet = true;
}

bool OAIReadScaleCapability::is_max_number_of_replicas_Set() const{
    return m_max_number_of_replicas_isSet;
}

bool OAIReadScaleCapability::is_max_number_of_replicas_Valid() const{
    return m_max_number_of_replicas_isValid;
}

QString OAIReadScaleCapability::getReason() const {
    return m_reason;
}
void OAIReadScaleCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIReadScaleCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIReadScaleCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIReadScaleCapability::getStatus() const {
    return m_status;
}
void OAIReadScaleCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReadScaleCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReadScaleCapability::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIReadScaleCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_number_of_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadScaleCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
