/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIElasticPoolPerformanceLevelCapability.h
 *
 * The Elastic Pool performance level capability.
 */

#ifndef OAIElasticPoolPerformanceLevelCapability_H
#define OAIElasticPoolPerformanceLevelCapability_H

#include <QJsonObject>

#include "OAIElasticPoolPerDatabaseMaxPerformanceLevelCapability.h"
#include "OAIElasticPoolPerformanceLevelCapability_sku.h"
#include "OAILicenseTypeCapability.h"
#include "OAIMaxSizeCapability.h"
#include "OAIMaxSizeRangeCapability.h"
#include "OAIPerformanceLevelCapability.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMaxSizeCapability;
class OAIPerformanceLevelCapability;
class OAIElasticPoolPerformanceLevelCapability_sku;
class OAILicenseTypeCapability;
class OAIMaxSizeRangeCapability;
class OAIElasticPoolPerDatabaseMaxPerformanceLevelCapability;

class OAIElasticPoolPerformanceLevelCapability : public OAIObject {
public:
    OAIElasticPoolPerformanceLevelCapability();
    OAIElasticPoolPerformanceLevelCapability(QString json);
    ~OAIElasticPoolPerformanceLevelCapability() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMaxSizeCapability getIncludedMaxSize() const;
    void setIncludedMaxSize(const OAIMaxSizeCapability &included_max_size);
    bool is_included_max_size_Set() const;
    bool is_included_max_size_Valid() const;

    qint32 getMaxDatabaseCount() const;
    void setMaxDatabaseCount(const qint32 &max_database_count);
    bool is_max_database_count_Set() const;
    bool is_max_database_count_Valid() const;

    OAIPerformanceLevelCapability getPerformanceLevel() const;
    void setPerformanceLevel(const OAIPerformanceLevelCapability &performance_level);
    bool is_performance_level_Set() const;
    bool is_performance_level_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    OAIElasticPoolPerformanceLevelCapability_sku getSku() const;
    void setSku(const OAIElasticPoolPerformanceLevelCapability_sku &sku);
    bool is_sku_Set() const;
    bool is_sku_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<OAILicenseTypeCapability> getSupportedLicenseTypes() const;
    void setSupportedLicenseTypes(const QList<OAILicenseTypeCapability> &supported_license_types);
    bool is_supported_license_types_Set() const;
    bool is_supported_license_types_Valid() const;

    QList<OAIMaxSizeRangeCapability> getSupportedMaxSizes() const;
    void setSupportedMaxSizes(const QList<OAIMaxSizeRangeCapability> &supported_max_sizes);
    bool is_supported_max_sizes_Set() const;
    bool is_supported_max_sizes_Valid() const;

    QList<OAIElasticPoolPerDatabaseMaxPerformanceLevelCapability> getSupportedPerDatabaseMaxPerformanceLevels() const;
    void setSupportedPerDatabaseMaxPerformanceLevels(const QList<OAIElasticPoolPerDatabaseMaxPerformanceLevelCapability> &supported_per_database_max_performance_levels);
    bool is_supported_per_database_max_performance_levels_Set() const;
    bool is_supported_per_database_max_performance_levels_Valid() const;

    QList<OAIMaxSizeRangeCapability> getSupportedPerDatabaseMaxSizes() const;
    void setSupportedPerDatabaseMaxSizes(const QList<OAIMaxSizeRangeCapability> &supported_per_database_max_sizes);
    bool is_supported_per_database_max_sizes_Set() const;
    bool is_supported_per_database_max_sizes_Valid() const;

    bool isZoneRedundant() const;
    void setZoneRedundant(const bool &zone_redundant);
    bool is_zone_redundant_Set() const;
    bool is_zone_redundant_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMaxSizeCapability m_included_max_size;
    bool m_included_max_size_isSet;
    bool m_included_max_size_isValid;

    qint32 m_max_database_count;
    bool m_max_database_count_isSet;
    bool m_max_database_count_isValid;

    OAIPerformanceLevelCapability m_performance_level;
    bool m_performance_level_isSet;
    bool m_performance_level_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    OAIElasticPoolPerformanceLevelCapability_sku m_sku;
    bool m_sku_isSet;
    bool m_sku_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<OAILicenseTypeCapability> m_supported_license_types;
    bool m_supported_license_types_isSet;
    bool m_supported_license_types_isValid;

    QList<OAIMaxSizeRangeCapability> m_supported_max_sizes;
    bool m_supported_max_sizes_isSet;
    bool m_supported_max_sizes_isValid;

    QList<OAIElasticPoolPerDatabaseMaxPerformanceLevelCapability> m_supported_per_database_max_performance_levels;
    bool m_supported_per_database_max_performance_levels_isSet;
    bool m_supported_per_database_max_performance_levels_isValid;

    QList<OAIMaxSizeRangeCapability> m_supported_per_database_max_sizes;
    bool m_supported_per_database_max_sizes_isSet;
    bool m_supported_per_database_max_sizes_isValid;

    bool m_zone_redundant;
    bool m_zone_redundant_isSet;
    bool m_zone_redundant_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIElasticPoolPerformanceLevelCapability)

#endif // OAIElasticPoolPerformanceLevelCapability_H
