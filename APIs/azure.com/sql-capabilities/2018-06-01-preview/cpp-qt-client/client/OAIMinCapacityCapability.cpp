/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMinCapacityCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMinCapacityCapability::OAIMinCapacityCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMinCapacityCapability::OAIMinCapacityCapability() {
    this->initializeModel();
}

OAIMinCapacityCapability::~OAIMinCapacityCapability() {}

void OAIMinCapacityCapability::initializeModel() {

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIMinCapacityCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMinCapacityCapability::fromJsonObject(QJsonObject json) {

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIMinCapacityCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMinCapacityCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIMinCapacityCapability::getReason() const {
    return m_reason;
}
void OAIMinCapacityCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIMinCapacityCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIMinCapacityCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIMinCapacityCapability::getStatus() const {
    return m_status;
}
void OAIMinCapacityCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMinCapacityCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMinCapacityCapability::is_status_Valid() const{
    return m_status_isValid;
}

double OAIMinCapacityCapability::getValue() const {
    return m_value;
}
void OAIMinCapacityCapability::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIMinCapacityCapability::is_value_Set() const{
    return m_value_isSet;
}

bool OAIMinCapacityCapability::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIMinCapacityCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMinCapacityCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
