/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedInstanceEditionCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedInstanceEditionCapability::OAIManagedInstanceEditionCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedInstanceEditionCapability::OAIManagedInstanceEditionCapability() {
    this->initializeModel();
}

OAIManagedInstanceEditionCapability::~OAIManagedInstanceEditionCapability() {}

void OAIManagedInstanceEditionCapability::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_families_isSet = false;
    m_supported_families_isValid = false;
}

void OAIManagedInstanceEditionCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedInstanceEditionCapability::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_families_isValid = ::OpenAPI::fromJsonValue(m_supported_families, json[QString("supportedFamilies")]);
    m_supported_families_isSet = !json[QString("supportedFamilies")].isNull() && m_supported_families_isValid;
}

QString OAIManagedInstanceEditionCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedInstanceEditionCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_families.size() > 0) {
        obj.insert(QString("supportedFamilies"), ::OpenAPI::toJsonValue(m_supported_families));
    }
    return obj;
}

QString OAIManagedInstanceEditionCapability::getName() const {
    return m_name;
}
void OAIManagedInstanceEditionCapability::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManagedInstanceEditionCapability::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManagedInstanceEditionCapability::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIManagedInstanceEditionCapability::getReason() const {
    return m_reason;
}
void OAIManagedInstanceEditionCapability::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIManagedInstanceEditionCapability::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIManagedInstanceEditionCapability::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIManagedInstanceEditionCapability::getStatus() const {
    return m_status;
}
void OAIManagedInstanceEditionCapability::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIManagedInstanceEditionCapability::is_status_Set() const{
    return m_status_isSet;
}

bool OAIManagedInstanceEditionCapability::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIManagedInstanceFamilyCapability> OAIManagedInstanceEditionCapability::getSupportedFamilies() const {
    return m_supported_families;
}
void OAIManagedInstanceEditionCapability::setSupportedFamilies(const QList<OAIManagedInstanceFamilyCapability> &supported_families) {
    m_supported_families = supported_families;
    m_supported_families_isSet = true;
}

bool OAIManagedInstanceEditionCapability::is_supported_families_Set() const{
    return m_supported_families_isSet;
}

bool OAIManagedInstanceEditionCapability::is_supported_families_Valid() const{
    return m_supported_families_isValid;
}

bool OAIManagedInstanceEditionCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_families.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedInstanceEditionCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
