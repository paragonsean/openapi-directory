/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceLevelCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceLevelCapability::OAIPerformanceLevelCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceLevelCapability::OAIPerformanceLevelCapability() {
    this->initializeModel();
}

OAIPerformanceLevelCapability::~OAIPerformanceLevelCapability() {}

void OAIPerformanceLevelCapability::initializeModel() {

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPerformanceLevelCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceLevelCapability::fromJsonObject(QJsonObject json) {

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPerformanceLevelCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceLevelCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPerformanceLevelCapability::getUnit() const {
    return m_unit;
}
void OAIPerformanceLevelCapability::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIPerformanceLevelCapability::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIPerformanceLevelCapability::is_unit_Valid() const{
    return m_unit_isValid;
}

double OAIPerformanceLevelCapability::getValue() const {
    return m_value;
}
void OAIPerformanceLevelCapability::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPerformanceLevelCapability::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPerformanceLevelCapability::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPerformanceLevelCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceLevelCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
