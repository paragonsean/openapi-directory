# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoPauseDelayTimeRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default: int=None, do_not_pause_value: int=None, max_value: int=None, min_value: int=None, step_size: int=None, unit: str=None):
        """AutoPauseDelayTimeRange - a model defined in OpenAPI

        :param default: The default of this AutoPauseDelayTimeRange.
        :param do_not_pause_value: The do_not_pause_value of this AutoPauseDelayTimeRange.
        :param max_value: The max_value of this AutoPauseDelayTimeRange.
        :param min_value: The min_value of this AutoPauseDelayTimeRange.
        :param step_size: The step_size of this AutoPauseDelayTimeRange.
        :param unit: The unit of this AutoPauseDelayTimeRange.
        """
        self.openapi_types = {
            'default': int,
            'do_not_pause_value': int,
            'max_value': int,
            'min_value': int,
            'step_size': int,
            'unit': str
        }

        self.attribute_map = {
            'default': 'default',
            'do_not_pause_value': 'doNotPauseValue',
            'max_value': 'maxValue',
            'min_value': 'minValue',
            'step_size': 'stepSize',
            'unit': 'unit'
        }

        self._default = default
        self._do_not_pause_value = do_not_pause_value
        self._max_value = max_value
        self._min_value = min_value
        self._step_size = step_size
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoPauseDelayTimeRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoPauseDelayTimeRange of this AutoPauseDelayTimeRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default(self):
        """Gets the default of this AutoPauseDelayTimeRange.

        Default value is no value is provided

        :return: The default of this AutoPauseDelayTimeRange.
        :rtype: int
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this AutoPauseDelayTimeRange.

        Default value is no value is provided

        :param default: The default of this AutoPauseDelayTimeRange.
        :type default: int
        """

        self._default = default

    @property
    def do_not_pause_value(self):
        """Gets the do_not_pause_value of this AutoPauseDelayTimeRange.

        Value that is used to not pause (infinite delay before pause)

        :return: The do_not_pause_value of this AutoPauseDelayTimeRange.
        :rtype: int
        """
        return self._do_not_pause_value

    @do_not_pause_value.setter
    def do_not_pause_value(self, do_not_pause_value):
        """Sets the do_not_pause_value of this AutoPauseDelayTimeRange.

        Value that is used to not pause (infinite delay before pause)

        :param do_not_pause_value: The do_not_pause_value of this AutoPauseDelayTimeRange.
        :type do_not_pause_value: int
        """

        self._do_not_pause_value = do_not_pause_value

    @property
    def max_value(self):
        """Gets the max_value of this AutoPauseDelayTimeRange.

        Maximum value

        :return: The max_value of this AutoPauseDelayTimeRange.
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this AutoPauseDelayTimeRange.

        Maximum value

        :param max_value: The max_value of this AutoPauseDelayTimeRange.
        :type max_value: int
        """

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this AutoPauseDelayTimeRange.

        Minimum value

        :return: The min_value of this AutoPauseDelayTimeRange.
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this AutoPauseDelayTimeRange.

        Minimum value

        :param min_value: The min_value of this AutoPauseDelayTimeRange.
        :type min_value: int
        """

        self._min_value = min_value

    @property
    def step_size(self):
        """Gets the step_size of this AutoPauseDelayTimeRange.

        Step value for discrete values between the minimum value and the maximum value.

        :return: The step_size of this AutoPauseDelayTimeRange.
        :rtype: int
        """
        return self._step_size

    @step_size.setter
    def step_size(self, step_size):
        """Sets the step_size of this AutoPauseDelayTimeRange.

        Step value for discrete values between the minimum value and the maximum value.

        :param step_size: The step_size of this AutoPauseDelayTimeRange.
        :type step_size: int
        """

        self._step_size = step_size

    @property
    def unit(self):
        """Gets the unit of this AutoPauseDelayTimeRange.

        Unit of time that delay is expressed in

        :return: The unit of this AutoPauseDelayTimeRange.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this AutoPauseDelayTimeRange.

        Unit of time that delay is expressed in

        :param unit: The unit of this AutoPauseDelayTimeRange.
        :type unit: str
        """
        allowed_values = ["Minutes"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
