# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_pool_vcores_capability import InstancePoolVcoresCapability
from openapi_server.models.license_type_capability import LicenseTypeCapability
from openapi_server import util


class InstancePoolFamilyCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, reason: str=None, status: str=None, supported_license_types: List[LicenseTypeCapability]=None, supported_vcores_values: List[InstancePoolVcoresCapability]=None):
        """InstancePoolFamilyCapability - a model defined in OpenAPI

        :param name: The name of this InstancePoolFamilyCapability.
        :param reason: The reason of this InstancePoolFamilyCapability.
        :param status: The status of this InstancePoolFamilyCapability.
        :param supported_license_types: The supported_license_types of this InstancePoolFamilyCapability.
        :param supported_vcores_values: The supported_vcores_values of this InstancePoolFamilyCapability.
        """
        self.openapi_types = {
            'name': str,
            'reason': str,
            'status': str,
            'supported_license_types': List[LicenseTypeCapability],
            'supported_vcores_values': List[InstancePoolVcoresCapability]
        }

        self.attribute_map = {
            'name': 'name',
            'reason': 'reason',
            'status': 'status',
            'supported_license_types': 'supportedLicenseTypes',
            'supported_vcores_values': 'supportedVcoresValues'
        }

        self._name = name
        self._reason = reason
        self._status = status
        self._supported_license_types = supported_license_types
        self._supported_vcores_values = supported_vcores_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstancePoolFamilyCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstancePoolFamilyCapability of this InstancePoolFamilyCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this InstancePoolFamilyCapability.

        Family name.

        :return: The name of this InstancePoolFamilyCapability.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstancePoolFamilyCapability.

        Family name.

        :param name: The name of this InstancePoolFamilyCapability.
        :type name: str
        """

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this InstancePoolFamilyCapability.

        The reason for the capability not being available.

        :return: The reason of this InstancePoolFamilyCapability.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this InstancePoolFamilyCapability.

        The reason for the capability not being available.

        :param reason: The reason of this InstancePoolFamilyCapability.
        :type reason: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this InstancePoolFamilyCapability.

        The status of the capability.

        :return: The status of this InstancePoolFamilyCapability.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InstancePoolFamilyCapability.

        The status of the capability.

        :param status: The status of this InstancePoolFamilyCapability.
        :type status: str
        """
        allowed_values = ["Visible", "Available", "Default", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def supported_license_types(self):
        """Gets the supported_license_types of this InstancePoolFamilyCapability.

        List of supported license types.

        :return: The supported_license_types of this InstancePoolFamilyCapability.
        :rtype: List[LicenseTypeCapability]
        """
        return self._supported_license_types

    @supported_license_types.setter
    def supported_license_types(self, supported_license_types):
        """Sets the supported_license_types of this InstancePoolFamilyCapability.

        List of supported license types.

        :param supported_license_types: The supported_license_types of this InstancePoolFamilyCapability.
        :type supported_license_types: List[LicenseTypeCapability]
        """

        self._supported_license_types = supported_license_types

    @property
    def supported_vcores_values(self):
        """Gets the supported_vcores_values of this InstancePoolFamilyCapability.

        List of supported virtual cores values.

        :return: The supported_vcores_values of this InstancePoolFamilyCapability.
        :rtype: List[InstancePoolVcoresCapability]
        """
        return self._supported_vcores_values

    @supported_vcores_values.setter
    def supported_vcores_values(self, supported_vcores_values):
        """Sets the supported_vcores_values of this InstancePoolFamilyCapability.

        List of supported virtual cores values.

        :param supported_vcores_values: The supported_vcores_values of this InstancePoolFamilyCapability.
        :type supported_vcores_values: List[InstancePoolVcoresCapability]
        """

        self._supported_vcores_values = supported_vcores_values
