# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.elastic_pool_per_database_max_performance_level_capability import ElasticPoolPerDatabaseMaxPerformanceLevelCapability
from openapi_server.models.elastic_pool_performance_level_capability_sku import ElasticPoolPerformanceLevelCapabilitySku
from openapi_server.models.license_type_capability import LicenseTypeCapability
from openapi_server.models.max_size_capability import MaxSizeCapability
from openapi_server.models.max_size_range_capability import MaxSizeRangeCapability
from openapi_server.models.performance_level_capability import PerformanceLevelCapability
from openapi_server import util


class ElasticPoolPerformanceLevelCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, included_max_size: MaxSizeCapability=None, max_database_count: int=None, performance_level: PerformanceLevelCapability=None, reason: str=None, sku: ElasticPoolPerformanceLevelCapabilitySku=None, status: str=None, supported_license_types: List[LicenseTypeCapability]=None, supported_max_sizes: List[MaxSizeRangeCapability]=None, supported_per_database_max_performance_levels: List[ElasticPoolPerDatabaseMaxPerformanceLevelCapability]=None, supported_per_database_max_sizes: List[MaxSizeRangeCapability]=None, zone_redundant: bool=None):
        """ElasticPoolPerformanceLevelCapability - a model defined in OpenAPI

        :param included_max_size: The included_max_size of this ElasticPoolPerformanceLevelCapability.
        :param max_database_count: The max_database_count of this ElasticPoolPerformanceLevelCapability.
        :param performance_level: The performance_level of this ElasticPoolPerformanceLevelCapability.
        :param reason: The reason of this ElasticPoolPerformanceLevelCapability.
        :param sku: The sku of this ElasticPoolPerformanceLevelCapability.
        :param status: The status of this ElasticPoolPerformanceLevelCapability.
        :param supported_license_types: The supported_license_types of this ElasticPoolPerformanceLevelCapability.
        :param supported_max_sizes: The supported_max_sizes of this ElasticPoolPerformanceLevelCapability.
        :param supported_per_database_max_performance_levels: The supported_per_database_max_performance_levels of this ElasticPoolPerformanceLevelCapability.
        :param supported_per_database_max_sizes: The supported_per_database_max_sizes of this ElasticPoolPerformanceLevelCapability.
        :param zone_redundant: The zone_redundant of this ElasticPoolPerformanceLevelCapability.
        """
        self.openapi_types = {
            'included_max_size': MaxSizeCapability,
            'max_database_count': int,
            'performance_level': PerformanceLevelCapability,
            'reason': str,
            'sku': ElasticPoolPerformanceLevelCapabilitySku,
            'status': str,
            'supported_license_types': List[LicenseTypeCapability],
            'supported_max_sizes': List[MaxSizeRangeCapability],
            'supported_per_database_max_performance_levels': List[ElasticPoolPerDatabaseMaxPerformanceLevelCapability],
            'supported_per_database_max_sizes': List[MaxSizeRangeCapability],
            'zone_redundant': bool
        }

        self.attribute_map = {
            'included_max_size': 'includedMaxSize',
            'max_database_count': 'maxDatabaseCount',
            'performance_level': 'performanceLevel',
            'reason': 'reason',
            'sku': 'sku',
            'status': 'status',
            'supported_license_types': 'supportedLicenseTypes',
            'supported_max_sizes': 'supportedMaxSizes',
            'supported_per_database_max_performance_levels': 'supportedPerDatabaseMaxPerformanceLevels',
            'supported_per_database_max_sizes': 'supportedPerDatabaseMaxSizes',
            'zone_redundant': 'zoneRedundant'
        }

        self._included_max_size = included_max_size
        self._max_database_count = max_database_count
        self._performance_level = performance_level
        self._reason = reason
        self._sku = sku
        self._status = status
        self._supported_license_types = supported_license_types
        self._supported_max_sizes = supported_max_sizes
        self._supported_per_database_max_performance_levels = supported_per_database_max_performance_levels
        self._supported_per_database_max_sizes = supported_per_database_max_sizes
        self._zone_redundant = zone_redundant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticPoolPerformanceLevelCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticPoolPerformanceLevelCapability of this ElasticPoolPerformanceLevelCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def included_max_size(self):
        """Gets the included_max_size of this ElasticPoolPerformanceLevelCapability.


        :return: The included_max_size of this ElasticPoolPerformanceLevelCapability.
        :rtype: MaxSizeCapability
        """
        return self._included_max_size

    @included_max_size.setter
    def included_max_size(self, included_max_size):
        """Sets the included_max_size of this ElasticPoolPerformanceLevelCapability.


        :param included_max_size: The included_max_size of this ElasticPoolPerformanceLevelCapability.
        :type included_max_size: MaxSizeCapability
        """

        self._included_max_size = included_max_size

    @property
    def max_database_count(self):
        """Gets the max_database_count of this ElasticPoolPerformanceLevelCapability.

        The maximum number of databases supported.

        :return: The max_database_count of this ElasticPoolPerformanceLevelCapability.
        :rtype: int
        """
        return self._max_database_count

    @max_database_count.setter
    def max_database_count(self, max_database_count):
        """Sets the max_database_count of this ElasticPoolPerformanceLevelCapability.

        The maximum number of databases supported.

        :param max_database_count: The max_database_count of this ElasticPoolPerformanceLevelCapability.
        :type max_database_count: int
        """

        self._max_database_count = max_database_count

    @property
    def performance_level(self):
        """Gets the performance_level of this ElasticPoolPerformanceLevelCapability.


        :return: The performance_level of this ElasticPoolPerformanceLevelCapability.
        :rtype: PerformanceLevelCapability
        """
        return self._performance_level

    @performance_level.setter
    def performance_level(self, performance_level):
        """Sets the performance_level of this ElasticPoolPerformanceLevelCapability.


        :param performance_level: The performance_level of this ElasticPoolPerformanceLevelCapability.
        :type performance_level: PerformanceLevelCapability
        """

        self._performance_level = performance_level

    @property
    def reason(self):
        """Gets the reason of this ElasticPoolPerformanceLevelCapability.

        The reason for the capability not being available.

        :return: The reason of this ElasticPoolPerformanceLevelCapability.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ElasticPoolPerformanceLevelCapability.

        The reason for the capability not being available.

        :param reason: The reason of this ElasticPoolPerformanceLevelCapability.
        :type reason: str
        """

        self._reason = reason

    @property
    def sku(self):
        """Gets the sku of this ElasticPoolPerformanceLevelCapability.


        :return: The sku of this ElasticPoolPerformanceLevelCapability.
        :rtype: ElasticPoolPerformanceLevelCapabilitySku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ElasticPoolPerformanceLevelCapability.


        :param sku: The sku of this ElasticPoolPerformanceLevelCapability.
        :type sku: ElasticPoolPerformanceLevelCapabilitySku
        """

        self._sku = sku

    @property
    def status(self):
        """Gets the status of this ElasticPoolPerformanceLevelCapability.

        The status of the capability.

        :return: The status of this ElasticPoolPerformanceLevelCapability.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ElasticPoolPerformanceLevelCapability.

        The status of the capability.

        :param status: The status of this ElasticPoolPerformanceLevelCapability.
        :type status: str
        """
        allowed_values = ["Visible", "Available", "Default", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def supported_license_types(self):
        """Gets the supported_license_types of this ElasticPoolPerformanceLevelCapability.

        List of supported license types.

        :return: The supported_license_types of this ElasticPoolPerformanceLevelCapability.
        :rtype: List[LicenseTypeCapability]
        """
        return self._supported_license_types

    @supported_license_types.setter
    def supported_license_types(self, supported_license_types):
        """Sets the supported_license_types of this ElasticPoolPerformanceLevelCapability.

        List of supported license types.

        :param supported_license_types: The supported_license_types of this ElasticPoolPerformanceLevelCapability.
        :type supported_license_types: List[LicenseTypeCapability]
        """

        self._supported_license_types = supported_license_types

    @property
    def supported_max_sizes(self):
        """Gets the supported_max_sizes of this ElasticPoolPerformanceLevelCapability.

        The list of supported max sizes.

        :return: The supported_max_sizes of this ElasticPoolPerformanceLevelCapability.
        :rtype: List[MaxSizeRangeCapability]
        """
        return self._supported_max_sizes

    @supported_max_sizes.setter
    def supported_max_sizes(self, supported_max_sizes):
        """Sets the supported_max_sizes of this ElasticPoolPerformanceLevelCapability.

        The list of supported max sizes.

        :param supported_max_sizes: The supported_max_sizes of this ElasticPoolPerformanceLevelCapability.
        :type supported_max_sizes: List[MaxSizeRangeCapability]
        """

        self._supported_max_sizes = supported_max_sizes

    @property
    def supported_per_database_max_performance_levels(self):
        """Gets the supported_per_database_max_performance_levels of this ElasticPoolPerformanceLevelCapability.

        The list of supported per database max performance levels.

        :return: The supported_per_database_max_performance_levels of this ElasticPoolPerformanceLevelCapability.
        :rtype: List[ElasticPoolPerDatabaseMaxPerformanceLevelCapability]
        """
        return self._supported_per_database_max_performance_levels

    @supported_per_database_max_performance_levels.setter
    def supported_per_database_max_performance_levels(self, supported_per_database_max_performance_levels):
        """Sets the supported_per_database_max_performance_levels of this ElasticPoolPerformanceLevelCapability.

        The list of supported per database max performance levels.

        :param supported_per_database_max_performance_levels: The supported_per_database_max_performance_levels of this ElasticPoolPerformanceLevelCapability.
        :type supported_per_database_max_performance_levels: List[ElasticPoolPerDatabaseMaxPerformanceLevelCapability]
        """

        self._supported_per_database_max_performance_levels = supported_per_database_max_performance_levels

    @property
    def supported_per_database_max_sizes(self):
        """Gets the supported_per_database_max_sizes of this ElasticPoolPerformanceLevelCapability.

        The list of supported per database max sizes.

        :return: The supported_per_database_max_sizes of this ElasticPoolPerformanceLevelCapability.
        :rtype: List[MaxSizeRangeCapability]
        """
        return self._supported_per_database_max_sizes

    @supported_per_database_max_sizes.setter
    def supported_per_database_max_sizes(self, supported_per_database_max_sizes):
        """Sets the supported_per_database_max_sizes of this ElasticPoolPerformanceLevelCapability.

        The list of supported per database max sizes.

        :param supported_per_database_max_sizes: The supported_per_database_max_sizes of this ElasticPoolPerformanceLevelCapability.
        :type supported_per_database_max_sizes: List[MaxSizeRangeCapability]
        """

        self._supported_per_database_max_sizes = supported_per_database_max_sizes

    @property
    def zone_redundant(self):
        """Gets the zone_redundant of this ElasticPoolPerformanceLevelCapability.

        Whether or not zone redundancy is supported for the performance level.

        :return: The zone_redundant of this ElasticPoolPerformanceLevelCapability.
        :rtype: bool
        """
        return self._zone_redundant

    @zone_redundant.setter
    def zone_redundant(self, zone_redundant):
        """Sets the zone_redundant of this ElasticPoolPerformanceLevelCapability.

        Whether or not zone redundancy is supported for the performance level.

        :param zone_redundant: The zone_redundant of this ElasticPoolPerformanceLevelCapability.
        :type zone_redundant: bool
        """

        self._zone_redundant = zone_redundant
