# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_pause_delay_time_range import AutoPauseDelayTimeRange
from openapi_server.models.elastic_pool_performance_level_capability_sku import ElasticPoolPerformanceLevelCapabilitySku
from openapi_server.models.license_type_capability import LicenseTypeCapability
from openapi_server.models.max_size_capability import MaxSizeCapability
from openapi_server.models.max_size_range_capability import MaxSizeRangeCapability
from openapi_server.models.min_capacity_capability import MinCapacityCapability
from openapi_server.models.performance_level_capability import PerformanceLevelCapability
from openapi_server import util


class ServiceObjectiveCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_model: str=None, id: str=None, included_max_size: MaxSizeCapability=None, name: str=None, performance_level: PerformanceLevelCapability=None, reason: str=None, sku: ElasticPoolPerformanceLevelCapabilitySku=None, status: str=None, supported_auto_pause_delay: AutoPauseDelayTimeRange=None, supported_license_types: List[LicenseTypeCapability]=None, supported_max_sizes: List[MaxSizeRangeCapability]=None, supported_min_capacities: List[MinCapacityCapability]=None, zone_redundant: bool=None):
        """ServiceObjectiveCapability - a model defined in OpenAPI

        :param compute_model: The compute_model of this ServiceObjectiveCapability.
        :param id: The id of this ServiceObjectiveCapability.
        :param included_max_size: The included_max_size of this ServiceObjectiveCapability.
        :param name: The name of this ServiceObjectiveCapability.
        :param performance_level: The performance_level of this ServiceObjectiveCapability.
        :param reason: The reason of this ServiceObjectiveCapability.
        :param sku: The sku of this ServiceObjectiveCapability.
        :param status: The status of this ServiceObjectiveCapability.
        :param supported_auto_pause_delay: The supported_auto_pause_delay of this ServiceObjectiveCapability.
        :param supported_license_types: The supported_license_types of this ServiceObjectiveCapability.
        :param supported_max_sizes: The supported_max_sizes of this ServiceObjectiveCapability.
        :param supported_min_capacities: The supported_min_capacities of this ServiceObjectiveCapability.
        :param zone_redundant: The zone_redundant of this ServiceObjectiveCapability.
        """
        self.openapi_types = {
            'compute_model': str,
            'id': str,
            'included_max_size': MaxSizeCapability,
            'name': str,
            'performance_level': PerformanceLevelCapability,
            'reason': str,
            'sku': ElasticPoolPerformanceLevelCapabilitySku,
            'status': str,
            'supported_auto_pause_delay': AutoPauseDelayTimeRange,
            'supported_license_types': List[LicenseTypeCapability],
            'supported_max_sizes': List[MaxSizeRangeCapability],
            'supported_min_capacities': List[MinCapacityCapability],
            'zone_redundant': bool
        }

        self.attribute_map = {
            'compute_model': 'computeModel',
            'id': 'id',
            'included_max_size': 'includedMaxSize',
            'name': 'name',
            'performance_level': 'performanceLevel',
            'reason': 'reason',
            'sku': 'sku',
            'status': 'status',
            'supported_auto_pause_delay': 'supportedAutoPauseDelay',
            'supported_license_types': 'supportedLicenseTypes',
            'supported_max_sizes': 'supportedMaxSizes',
            'supported_min_capacities': 'supportedMinCapacities',
            'zone_redundant': 'zoneRedundant'
        }

        self._compute_model = compute_model
        self._id = id
        self._included_max_size = included_max_size
        self._name = name
        self._performance_level = performance_level
        self._reason = reason
        self._sku = sku
        self._status = status
        self._supported_auto_pause_delay = supported_auto_pause_delay
        self._supported_license_types = supported_license_types
        self._supported_max_sizes = supported_max_sizes
        self._supported_min_capacities = supported_min_capacities
        self._zone_redundant = zone_redundant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceObjectiveCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceObjectiveCapability of this ServiceObjectiveCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_model(self):
        """Gets the compute_model of this ServiceObjectiveCapability.

        The compute model

        :return: The compute_model of this ServiceObjectiveCapability.
        :rtype: str
        """
        return self._compute_model

    @compute_model.setter
    def compute_model(self, compute_model):
        """Sets the compute_model of this ServiceObjectiveCapability.

        The compute model

        :param compute_model: The compute_model of this ServiceObjectiveCapability.
        :type compute_model: str
        """

        self._compute_model = compute_model

    @property
    def id(self):
        """Gets the id of this ServiceObjectiveCapability.

        The unique ID of the service objective.

        :return: The id of this ServiceObjectiveCapability.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceObjectiveCapability.

        The unique ID of the service objective.

        :param id: The id of this ServiceObjectiveCapability.
        :type id: str
        """

        self._id = id

    @property
    def included_max_size(self):
        """Gets the included_max_size of this ServiceObjectiveCapability.


        :return: The included_max_size of this ServiceObjectiveCapability.
        :rtype: MaxSizeCapability
        """
        return self._included_max_size

    @included_max_size.setter
    def included_max_size(self, included_max_size):
        """Sets the included_max_size of this ServiceObjectiveCapability.


        :param included_max_size: The included_max_size of this ServiceObjectiveCapability.
        :type included_max_size: MaxSizeCapability
        """

        self._included_max_size = included_max_size

    @property
    def name(self):
        """Gets the name of this ServiceObjectiveCapability.

        The service objective name.

        :return: The name of this ServiceObjectiveCapability.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceObjectiveCapability.

        The service objective name.

        :param name: The name of this ServiceObjectiveCapability.
        :type name: str
        """

        self._name = name

    @property
    def performance_level(self):
        """Gets the performance_level of this ServiceObjectiveCapability.


        :return: The performance_level of this ServiceObjectiveCapability.
        :rtype: PerformanceLevelCapability
        """
        return self._performance_level

    @performance_level.setter
    def performance_level(self, performance_level):
        """Sets the performance_level of this ServiceObjectiveCapability.


        :param performance_level: The performance_level of this ServiceObjectiveCapability.
        :type performance_level: PerformanceLevelCapability
        """

        self._performance_level = performance_level

    @property
    def reason(self):
        """Gets the reason of this ServiceObjectiveCapability.

        The reason for the capability not being available.

        :return: The reason of this ServiceObjectiveCapability.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ServiceObjectiveCapability.

        The reason for the capability not being available.

        :param reason: The reason of this ServiceObjectiveCapability.
        :type reason: str
        """

        self._reason = reason

    @property
    def sku(self):
        """Gets the sku of this ServiceObjectiveCapability.


        :return: The sku of this ServiceObjectiveCapability.
        :rtype: ElasticPoolPerformanceLevelCapabilitySku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ServiceObjectiveCapability.


        :param sku: The sku of this ServiceObjectiveCapability.
        :type sku: ElasticPoolPerformanceLevelCapabilitySku
        """

        self._sku = sku

    @property
    def status(self):
        """Gets the status of this ServiceObjectiveCapability.

        The status of the capability.

        :return: The status of this ServiceObjectiveCapability.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceObjectiveCapability.

        The status of the capability.

        :param status: The status of this ServiceObjectiveCapability.
        :type status: str
        """
        allowed_values = ["Visible", "Available", "Default", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def supported_auto_pause_delay(self):
        """Gets the supported_auto_pause_delay of this ServiceObjectiveCapability.


        :return: The supported_auto_pause_delay of this ServiceObjectiveCapability.
        :rtype: AutoPauseDelayTimeRange
        """
        return self._supported_auto_pause_delay

    @supported_auto_pause_delay.setter
    def supported_auto_pause_delay(self, supported_auto_pause_delay):
        """Sets the supported_auto_pause_delay of this ServiceObjectiveCapability.


        :param supported_auto_pause_delay: The supported_auto_pause_delay of this ServiceObjectiveCapability.
        :type supported_auto_pause_delay: AutoPauseDelayTimeRange
        """

        self._supported_auto_pause_delay = supported_auto_pause_delay

    @property
    def supported_license_types(self):
        """Gets the supported_license_types of this ServiceObjectiveCapability.

        List of supported license types.

        :return: The supported_license_types of this ServiceObjectiveCapability.
        :rtype: List[LicenseTypeCapability]
        """
        return self._supported_license_types

    @supported_license_types.setter
    def supported_license_types(self, supported_license_types):
        """Sets the supported_license_types of this ServiceObjectiveCapability.

        List of supported license types.

        :param supported_license_types: The supported_license_types of this ServiceObjectiveCapability.
        :type supported_license_types: List[LicenseTypeCapability]
        """

        self._supported_license_types = supported_license_types

    @property
    def supported_max_sizes(self):
        """Gets the supported_max_sizes of this ServiceObjectiveCapability.

        The list of supported maximum database sizes.

        :return: The supported_max_sizes of this ServiceObjectiveCapability.
        :rtype: List[MaxSizeRangeCapability]
        """
        return self._supported_max_sizes

    @supported_max_sizes.setter
    def supported_max_sizes(self, supported_max_sizes):
        """Sets the supported_max_sizes of this ServiceObjectiveCapability.

        The list of supported maximum database sizes.

        :param supported_max_sizes: The supported_max_sizes of this ServiceObjectiveCapability.
        :type supported_max_sizes: List[MaxSizeRangeCapability]
        """

        self._supported_max_sizes = supported_max_sizes

    @property
    def supported_min_capacities(self):
        """Gets the supported_min_capacities of this ServiceObjectiveCapability.

        List of supported min capacities

        :return: The supported_min_capacities of this ServiceObjectiveCapability.
        :rtype: List[MinCapacityCapability]
        """
        return self._supported_min_capacities

    @supported_min_capacities.setter
    def supported_min_capacities(self, supported_min_capacities):
        """Sets the supported_min_capacities of this ServiceObjectiveCapability.

        List of supported min capacities

        :param supported_min_capacities: The supported_min_capacities of this ServiceObjectiveCapability.
        :type supported_min_capacities: List[MinCapacityCapability]
        """

        self._supported_min_capacities = supported_min_capacities

    @property
    def zone_redundant(self):
        """Gets the zone_redundant of this ServiceObjectiveCapability.

        Whether or not zone redundancy is supported for the service objective.

        :return: The zone_redundant of this ServiceObjectiveCapability.
        :rtype: bool
        """
        return self._zone_redundant

    @zone_redundant.setter
    def zone_redundant(self, zone_redundant):
        """Sets the zone_redundant of this ServiceObjectiveCapability.

        Whether or not zone redundancy is supported for the service objective.

        :param zone_redundant: The zone_redundant of this ServiceObjectiveCapability.
        :type zone_redundant: bool
        """

        self._zone_redundant = zone_redundant
