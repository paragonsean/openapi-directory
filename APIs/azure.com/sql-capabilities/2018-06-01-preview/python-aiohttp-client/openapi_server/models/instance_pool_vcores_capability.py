# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.max_size_capability import MaxSizeCapability
from openapi_server import util


class InstancePoolVcoresCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, reason: str=None, status: str=None, storage_limit: MaxSizeCapability=None, value: int=None):
        """InstancePoolVcoresCapability - a model defined in OpenAPI

        :param name: The name of this InstancePoolVcoresCapability.
        :param reason: The reason of this InstancePoolVcoresCapability.
        :param status: The status of this InstancePoolVcoresCapability.
        :param storage_limit: The storage_limit of this InstancePoolVcoresCapability.
        :param value: The value of this InstancePoolVcoresCapability.
        """
        self.openapi_types = {
            'name': str,
            'reason': str,
            'status': str,
            'storage_limit': MaxSizeCapability,
            'value': int
        }

        self.attribute_map = {
            'name': 'name',
            'reason': 'reason',
            'status': 'status',
            'storage_limit': 'storageLimit',
            'value': 'value'
        }

        self._name = name
        self._reason = reason
        self._status = status
        self._storage_limit = storage_limit
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstancePoolVcoresCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstancePoolVcoresCapability of this InstancePoolVcoresCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this InstancePoolVcoresCapability.

        The virtual cores identifier.

        :return: The name of this InstancePoolVcoresCapability.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstancePoolVcoresCapability.

        The virtual cores identifier.

        :param name: The name of this InstancePoolVcoresCapability.
        :type name: str
        """

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this InstancePoolVcoresCapability.

        The reason for the capability not being available.

        :return: The reason of this InstancePoolVcoresCapability.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this InstancePoolVcoresCapability.

        The reason for the capability not being available.

        :param reason: The reason of this InstancePoolVcoresCapability.
        :type reason: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this InstancePoolVcoresCapability.

        The status of the capability.

        :return: The status of this InstancePoolVcoresCapability.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InstancePoolVcoresCapability.

        The status of the capability.

        :param status: The status of this InstancePoolVcoresCapability.
        :type status: str
        """
        allowed_values = ["Visible", "Available", "Default", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def storage_limit(self):
        """Gets the storage_limit of this InstancePoolVcoresCapability.


        :return: The storage_limit of this InstancePoolVcoresCapability.
        :rtype: MaxSizeCapability
        """
        return self._storage_limit

    @storage_limit.setter
    def storage_limit(self, storage_limit):
        """Sets the storage_limit of this InstancePoolVcoresCapability.


        :param storage_limit: The storage_limit of this InstancePoolVcoresCapability.
        :type storage_limit: MaxSizeCapability
        """

        self._storage_limit = storage_limit

    @property
    def value(self):
        """Gets the value of this InstancePoolVcoresCapability.

        The virtual cores value.

        :return: The value of this InstancePoolVcoresCapability.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InstancePoolVcoresCapability.

        The virtual cores value.

        :param value: The value of this InstancePoolVcoresCapability.
        :type value: int
        """

        self._value = value
