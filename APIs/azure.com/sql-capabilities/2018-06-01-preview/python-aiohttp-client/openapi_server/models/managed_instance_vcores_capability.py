# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.max_size_capability import MaxSizeCapability
from openapi_server.models.max_size_range_capability import MaxSizeRangeCapability
from openapi_server import util


class ManagedInstanceVcoresCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, included_max_size: MaxSizeCapability=None, instance_pool_supported: bool=None, name: str=None, reason: str=None, standalone_supported: bool=None, status: str=None, supported_storage_sizes: List[MaxSizeRangeCapability]=None, value: int=None):
        """ManagedInstanceVcoresCapability - a model defined in OpenAPI

        :param included_max_size: The included_max_size of this ManagedInstanceVcoresCapability.
        :param instance_pool_supported: The instance_pool_supported of this ManagedInstanceVcoresCapability.
        :param name: The name of this ManagedInstanceVcoresCapability.
        :param reason: The reason of this ManagedInstanceVcoresCapability.
        :param standalone_supported: The standalone_supported of this ManagedInstanceVcoresCapability.
        :param status: The status of this ManagedInstanceVcoresCapability.
        :param supported_storage_sizes: The supported_storage_sizes of this ManagedInstanceVcoresCapability.
        :param value: The value of this ManagedInstanceVcoresCapability.
        """
        self.openapi_types = {
            'included_max_size': MaxSizeCapability,
            'instance_pool_supported': bool,
            'name': str,
            'reason': str,
            'standalone_supported': bool,
            'status': str,
            'supported_storage_sizes': List[MaxSizeRangeCapability],
            'value': int
        }

        self.attribute_map = {
            'included_max_size': 'includedMaxSize',
            'instance_pool_supported': 'instancePoolSupported',
            'name': 'name',
            'reason': 'reason',
            'standalone_supported': 'standaloneSupported',
            'status': 'status',
            'supported_storage_sizes': 'supportedStorageSizes',
            'value': 'value'
        }

        self._included_max_size = included_max_size
        self._instance_pool_supported = instance_pool_supported
        self._name = name
        self._reason = reason
        self._standalone_supported = standalone_supported
        self._status = status
        self._supported_storage_sizes = supported_storage_sizes
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedInstanceVcoresCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedInstanceVcoresCapability of this ManagedInstanceVcoresCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def included_max_size(self):
        """Gets the included_max_size of this ManagedInstanceVcoresCapability.


        :return: The included_max_size of this ManagedInstanceVcoresCapability.
        :rtype: MaxSizeCapability
        """
        return self._included_max_size

    @included_max_size.setter
    def included_max_size(self, included_max_size):
        """Sets the included_max_size of this ManagedInstanceVcoresCapability.


        :param included_max_size: The included_max_size of this ManagedInstanceVcoresCapability.
        :type included_max_size: MaxSizeCapability
        """

        self._included_max_size = included_max_size

    @property
    def instance_pool_supported(self):
        """Gets the instance_pool_supported of this ManagedInstanceVcoresCapability.

        True if this service objective is supported for managed instances in an instance pool.

        :return: The instance_pool_supported of this ManagedInstanceVcoresCapability.
        :rtype: bool
        """
        return self._instance_pool_supported

    @instance_pool_supported.setter
    def instance_pool_supported(self, instance_pool_supported):
        """Sets the instance_pool_supported of this ManagedInstanceVcoresCapability.

        True if this service objective is supported for managed instances in an instance pool.

        :param instance_pool_supported: The instance_pool_supported of this ManagedInstanceVcoresCapability.
        :type instance_pool_supported: bool
        """

        self._instance_pool_supported = instance_pool_supported

    @property
    def name(self):
        """Gets the name of this ManagedInstanceVcoresCapability.

        The virtual cores identifier.

        :return: The name of this ManagedInstanceVcoresCapability.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManagedInstanceVcoresCapability.

        The virtual cores identifier.

        :param name: The name of this ManagedInstanceVcoresCapability.
        :type name: str
        """

        self._name = name

    @property
    def reason(self):
        """Gets the reason of this ManagedInstanceVcoresCapability.

        The reason for the capability not being available.

        :return: The reason of this ManagedInstanceVcoresCapability.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ManagedInstanceVcoresCapability.

        The reason for the capability not being available.

        :param reason: The reason of this ManagedInstanceVcoresCapability.
        :type reason: str
        """

        self._reason = reason

    @property
    def standalone_supported(self):
        """Gets the standalone_supported of this ManagedInstanceVcoresCapability.

        True if this service objective is supported for standalone managed instances.

        :return: The standalone_supported of this ManagedInstanceVcoresCapability.
        :rtype: bool
        """
        return self._standalone_supported

    @standalone_supported.setter
    def standalone_supported(self, standalone_supported):
        """Sets the standalone_supported of this ManagedInstanceVcoresCapability.

        True if this service objective is supported for standalone managed instances.

        :param standalone_supported: The standalone_supported of this ManagedInstanceVcoresCapability.
        :type standalone_supported: bool
        """

        self._standalone_supported = standalone_supported

    @property
    def status(self):
        """Gets the status of this ManagedInstanceVcoresCapability.

        The status of the capability.

        :return: The status of this ManagedInstanceVcoresCapability.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ManagedInstanceVcoresCapability.

        The status of the capability.

        :param status: The status of this ManagedInstanceVcoresCapability.
        :type status: str
        """
        allowed_values = ["Visible", "Available", "Default", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def supported_storage_sizes(self):
        """Gets the supported_storage_sizes of this ManagedInstanceVcoresCapability.

        Storage size ranges.

        :return: The supported_storage_sizes of this ManagedInstanceVcoresCapability.
        :rtype: List[MaxSizeRangeCapability]
        """
        return self._supported_storage_sizes

    @supported_storage_sizes.setter
    def supported_storage_sizes(self, supported_storage_sizes):
        """Sets the supported_storage_sizes of this ManagedInstanceVcoresCapability.

        Storage size ranges.

        :param supported_storage_sizes: The supported_storage_sizes of this ManagedInstanceVcoresCapability.
        :type supported_storage_sizes: List[MaxSizeRangeCapability]
        """

        self._supported_storage_sizes = supported_storage_sizes

    @property
    def value(self):
        """Gets the value of this ManagedInstanceVcoresCapability.

        The virtual cores value.

        :return: The value of this ManagedInstanceVcoresCapability.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ManagedInstanceVcoresCapability.

        The virtual cores value.

        :param value: The value of this ManagedInstanceVcoresCapability.
        :type value: int
        """

        self._value = value
