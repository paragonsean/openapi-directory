/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MaxSizeCapability;
import org.openapitools.client.model.MaxSizeRangeCapability;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The managed instance virtual cores capability.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:18.348155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedInstanceVcoresCapability {
  public static final String SERIALIZED_NAME_INCLUDED_MAX_SIZE = "includedMaxSize";
  @SerializedName(SERIALIZED_NAME_INCLUDED_MAX_SIZE)
  private MaxSizeCapability includedMaxSize;

  public static final String SERIALIZED_NAME_INSTANCE_POOL_SUPPORTED = "instancePoolSupported";
  @SerializedName(SERIALIZED_NAME_INSTANCE_POOL_SUPPORTED)
  private Boolean instancePoolSupported;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_STANDALONE_SUPPORTED = "standaloneSupported";
  @SerializedName(SERIALIZED_NAME_STANDALONE_SUPPORTED)
  private Boolean standaloneSupported;

  /**
   * The status of the capability.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    VISIBLE("Visible"),
    
    AVAILABLE("Available"),
    
    DEFAULT("Default"),
    
    DISABLED("Disabled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUPPORTED_STORAGE_SIZES = "supportedStorageSizes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_STORAGE_SIZES)
  private List<MaxSizeRangeCapability> supportedStorageSizes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public ManagedInstanceVcoresCapability() {
  }

  public ManagedInstanceVcoresCapability(
     Boolean instancePoolSupported, 
     String name, 
     Boolean standaloneSupported, 
     StatusEnum status, 
     List<MaxSizeRangeCapability> supportedStorageSizes, 
     Integer value
  ) {
    this();
    this.instancePoolSupported = instancePoolSupported;
    this.name = name;
    this.standaloneSupported = standaloneSupported;
    this.status = status;
    this.supportedStorageSizes = supportedStorageSizes;
    this.value = value;
  }

  public ManagedInstanceVcoresCapability includedMaxSize(MaxSizeCapability includedMaxSize) {
    this.includedMaxSize = includedMaxSize;
    return this;
  }

  /**
   * Get includedMaxSize
   * @return includedMaxSize
   */
  @javax.annotation.Nullable
  public MaxSizeCapability getIncludedMaxSize() {
    return includedMaxSize;
  }

  public void setIncludedMaxSize(MaxSizeCapability includedMaxSize) {
    this.includedMaxSize = includedMaxSize;
  }


  /**
   * True if this service objective is supported for managed instances in an instance pool.
   * @return instancePoolSupported
   */
  @javax.annotation.Nullable
  public Boolean getInstancePoolSupported() {
    return instancePoolSupported;
  }



  /**
   * The virtual cores identifier.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public ManagedInstanceVcoresCapability reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason for the capability not being available.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  /**
   * True if this service objective is supported for standalone managed instances.
   * @return standaloneSupported
   */
  @javax.annotation.Nullable
  public Boolean getStandaloneSupported() {
    return standaloneSupported;
  }



  /**
   * The status of the capability.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * Storage size ranges.
   * @return supportedStorageSizes
   */
  @javax.annotation.Nullable
  public List<MaxSizeRangeCapability> getSupportedStorageSizes() {
    return supportedStorageSizes;
  }



  /**
   * The virtual cores value.
   * @return value
   */
  @javax.annotation.Nullable
  public Integer getValue() {
    return value;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedInstanceVcoresCapability managedInstanceVcoresCapability = (ManagedInstanceVcoresCapability) o;
    return Objects.equals(this.includedMaxSize, managedInstanceVcoresCapability.includedMaxSize) &&
        Objects.equals(this.instancePoolSupported, managedInstanceVcoresCapability.instancePoolSupported) &&
        Objects.equals(this.name, managedInstanceVcoresCapability.name) &&
        Objects.equals(this.reason, managedInstanceVcoresCapability.reason) &&
        Objects.equals(this.standaloneSupported, managedInstanceVcoresCapability.standaloneSupported) &&
        Objects.equals(this.status, managedInstanceVcoresCapability.status) &&
        Objects.equals(this.supportedStorageSizes, managedInstanceVcoresCapability.supportedStorageSizes) &&
        Objects.equals(this.value, managedInstanceVcoresCapability.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includedMaxSize, instancePoolSupported, name, reason, standaloneSupported, status, supportedStorageSizes, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedInstanceVcoresCapability {\n");
    sb.append("    includedMaxSize: ").append(toIndentedString(includedMaxSize)).append("\n");
    sb.append("    instancePoolSupported: ").append(toIndentedString(instancePoolSupported)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    standaloneSupported: ").append(toIndentedString(standaloneSupported)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supportedStorageSizes: ").append(toIndentedString(supportedStorageSizes)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("includedMaxSize");
    openapiFields.add("instancePoolSupported");
    openapiFields.add("name");
    openapiFields.add("reason");
    openapiFields.add("standaloneSupported");
    openapiFields.add("status");
    openapiFields.add("supportedStorageSizes");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedInstanceVcoresCapability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedInstanceVcoresCapability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedInstanceVcoresCapability is not found in the empty JSON string", ManagedInstanceVcoresCapability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedInstanceVcoresCapability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedInstanceVcoresCapability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `includedMaxSize`
      if (jsonObj.get("includedMaxSize") != null && !jsonObj.get("includedMaxSize").isJsonNull()) {
        MaxSizeCapability.validateJsonElement(jsonObj.get("includedMaxSize"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("supportedStorageSizes") != null && !jsonObj.get("supportedStorageSizes").isJsonNull()) {
        JsonArray jsonArraysupportedStorageSizes = jsonObj.getAsJsonArray("supportedStorageSizes");
        if (jsonArraysupportedStorageSizes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportedStorageSizes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportedStorageSizes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedStorageSizes").toString()));
          }

          // validate the optional field `supportedStorageSizes` (array)
          for (int i = 0; i < jsonArraysupportedStorageSizes.size(); i++) {
            MaxSizeRangeCapability.validateJsonElement(jsonArraysupportedStorageSizes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedInstanceVcoresCapability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedInstanceVcoresCapability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedInstanceVcoresCapability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedInstanceVcoresCapability.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedInstanceVcoresCapability>() {
           @Override
           public void write(JsonWriter out, ManagedInstanceVcoresCapability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedInstanceVcoresCapability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedInstanceVcoresCapability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedInstanceVcoresCapability
   * @throws IOException if the JSON string is invalid with respect to ManagedInstanceVcoresCapability
   */
  public static ManagedInstanceVcoresCapability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedInstanceVcoresCapability.class);
  }

  /**
   * Convert an instance of ManagedInstanceVcoresCapability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

