/**
 * SubscriptionClient
 * Subscription client provides an interface to create and manage Azure subscriptions programmatically.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionCreationParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionCreationParameters::OAISubscriptionCreationParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionCreationParameters::OAISubscriptionCreationParameters() {
    this->initializeModel();
}

OAISubscriptionCreationParameters::~OAISubscriptionCreationParameters() {}

void OAISubscriptionCreationParameters::initializeModel() {

    m_additional_parameters_isSet = false;
    m_additional_parameters_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_offer_type_isSet = false;
    m_offer_type_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;
}

void OAISubscriptionCreationParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionCreationParameters::fromJsonObject(QJsonObject json) {

    m_additional_parameters_isValid = ::OpenAPI::fromJsonValue(m_additional_parameters, json[QString("additionalParameters")]);
    m_additional_parameters_isSet = !json[QString("additionalParameters")].isNull() && m_additional_parameters_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_offer_type_isValid = ::OpenAPI::fromJsonValue(m_offer_type, json[QString("offerType")]);
    m_offer_type_isSet = !json[QString("offerType")].isNull() && m_offer_type_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;
}

QString OAISubscriptionCreationParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionCreationParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_parameters.size() > 0) {
        obj.insert(QString("additionalParameters"), ::OpenAPI::toJsonValue(m_additional_parameters));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_offer_type_isSet) {
        obj.insert(QString("offerType"), ::OpenAPI::toJsonValue(m_offer_type));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    return obj;
}

QMap<QString, OAIObject> OAISubscriptionCreationParameters::getAdditionalParameters() const {
    return m_additional_parameters;
}
void OAISubscriptionCreationParameters::setAdditionalParameters(const QMap<QString, OAIObject> &additional_parameters) {
    m_additional_parameters = additional_parameters;
    m_additional_parameters_isSet = true;
}

bool OAISubscriptionCreationParameters::is_additional_parameters_Set() const{
    return m_additional_parameters_isSet;
}

bool OAISubscriptionCreationParameters::is_additional_parameters_Valid() const{
    return m_additional_parameters_isValid;
}

QString OAISubscriptionCreationParameters::getDisplayName() const {
    return m_display_name;
}
void OAISubscriptionCreationParameters::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISubscriptionCreationParameters::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISubscriptionCreationParameters::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAISubscriptionCreationParameters::getOfferType() const {
    return m_offer_type;
}
void OAISubscriptionCreationParameters::setOfferType(const QString &offer_type) {
    m_offer_type = offer_type;
    m_offer_type_isSet = true;
}

bool OAISubscriptionCreationParameters::is_offer_type_Set() const{
    return m_offer_type_isSet;
}

bool OAISubscriptionCreationParameters::is_offer_type_Valid() const{
    return m_offer_type_isValid;
}

QList<OAIAdPrincipal> OAISubscriptionCreationParameters::getOwners() const {
    return m_owners;
}
void OAISubscriptionCreationParameters::setOwners(const QList<OAIAdPrincipal> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAISubscriptionCreationParameters::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAISubscriptionCreationParameters::is_owners_Valid() const{
    return m_owners_isValid;
}

bool OAISubscriptionCreationParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionCreationParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
