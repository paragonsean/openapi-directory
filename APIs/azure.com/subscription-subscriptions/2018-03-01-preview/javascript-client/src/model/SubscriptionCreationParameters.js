/**
 * SubscriptionClient
 * Subscription client provides an interface to create and manage Azure subscriptions programmatically.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdPrincipal from './AdPrincipal';

/**
 * The SubscriptionCreationParameters model module.
 * @module model/SubscriptionCreationParameters
 * @version 2018-03-01-preview
 */
class SubscriptionCreationParameters {
    /**
     * Constructs a new <code>SubscriptionCreationParameters</code>.
     * Subscription Creation Parameters required to create a new Azure subscription.
     * @alias module:model/SubscriptionCreationParameters
     */
    constructor() { 
        
        SubscriptionCreationParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscriptionCreationParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionCreationParameters} obj Optional instance to populate.
     * @return {module:model/SubscriptionCreationParameters} The populated <code>SubscriptionCreationParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionCreationParameters();

            if (data.hasOwnProperty('additionalParameters')) {
                obj['additionalParameters'] = ApiClient.convertToType(data['additionalParameters'], {'String': Object});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('offerType')) {
                obj['offerType'] = ApiClient.convertToType(data['offerType'], 'String');
            }
            if (data.hasOwnProperty('owners')) {
                obj['owners'] = ApiClient.convertToType(data['owners'], [AdPrincipal]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionCreationParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionCreationParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['offerType'] && !(typeof data['offerType'] === 'string' || data['offerType'] instanceof String)) {
            throw new Error("Expected the field `offerType` to be a primitive type in the JSON string but got " + data['offerType']);
        }
        if (data['owners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['owners'])) {
                throw new Error("Expected the field `owners` to be an array in the JSON data but got " + data['owners']);
            }
            // validate the optional field `owners` (array)
            for (const item of data['owners']) {
                AdPrincipal.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Additional, untyped parameters to support custom subscription creation scenarios.
 * @member {Object.<String, Object>} additionalParameters
 */
SubscriptionCreationParameters.prototype['additionalParameters'] = undefined;

/**
 * The display name of the subscription.
 * @member {String} displayName
 */
SubscriptionCreationParameters.prototype['displayName'] = undefined;

/**
 * The offer type of the subscription. For example, MS-AZR-0017P (EnterpriseAgreement) and MS-AZR-0148P (EnterpriseAgreement devTest) are available. Only valid when creating a subscription in a enrollment account scope.
 * @member {module:model/SubscriptionCreationParameters.OfferTypeEnum} offerType
 */
SubscriptionCreationParameters.prototype['offerType'] = undefined;

/**
 * The list of principals that should be granted Owner access on the subscription. Principals should be of type User, Service Principal or Security Group.
 * @member {Array.<module:model/AdPrincipal>} owners
 */
SubscriptionCreationParameters.prototype['owners'] = undefined;





/**
 * Allowed values for the <code>offerType</code> property.
 * @enum {String}
 * @readonly
 */
SubscriptionCreationParameters['OfferTypeEnum'] = {

    /**
     * value: "MS-AZR-0017P"
     * @const
     */
    "0017P": "MS-AZR-0017P",

    /**
     * value: "MS-AZR-0148P"
     * @const
     */
    "0148P": "MS-AZR-0148P"
};



export default SubscriptionCreationParameters;

