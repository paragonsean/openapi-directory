/**
 * SubscriptionClient
 * Subscription client provides an interface to create and manage Azure subscriptions programmatically.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdPrincipal model module.
 * @module model/AdPrincipal
 * @version 2018-03-01-preview
 */
class AdPrincipal {
    /**
     * Constructs a new <code>AdPrincipal</code>.
     * Active Directory Principal whoâ€™ll get owner access on the new subscription.
     * @alias module:model/AdPrincipal
     * @param objectId {String} Object id of the Principal
     */
    constructor(objectId) { 
        
        AdPrincipal.initialize(this, objectId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectId) { 
        obj['objectId'] = objectId;
    }

    /**
     * Constructs a <code>AdPrincipal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdPrincipal} obj Optional instance to populate.
     * @return {module:model/AdPrincipal} The populated <code>AdPrincipal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdPrincipal();

            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdPrincipal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdPrincipal</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AdPrincipal.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }

        return true;
    }


}

AdPrincipal.RequiredProperties = ["objectId"];

/**
 * Object id of the Principal
 * @member {String} objectId
 */
AdPrincipal.prototype['objectId'] = undefined;






export default AdPrincipal;

