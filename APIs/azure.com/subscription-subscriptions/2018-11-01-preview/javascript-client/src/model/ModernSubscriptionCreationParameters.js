/**
 * SubscriptionClient
 * Subscription client provides an interface to create and manage Azure subscriptions programmatically.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdPrincipal from './AdPrincipal';

/**
 * The ModernSubscriptionCreationParameters model module.
 * @module model/ModernSubscriptionCreationParameters
 * @version 2018-11-01-preview
 */
class ModernSubscriptionCreationParameters {
    /**
     * Constructs a new <code>ModernSubscriptionCreationParameters</code>.
     * The parameters required to create a new subscription.
     * @alias module:model/ModernSubscriptionCreationParameters
     * @param billingProfileId {String} The ARM ID of the billing profile for which you want to create the subscription.
     * @param displayName {String} The friendly name of the subscription.
     * @param skuId {String} The SKU ID of the Azure plan. Azure plan determines the pricing and service-level agreement of the subscription.  Use 001 for Microsoft Azure Plan and 002 for Microsoft Azure Plan for DevTest.
     */
    constructor(billingProfileId, displayName, skuId) { 
        
        ModernSubscriptionCreationParameters.initialize(this, billingProfileId, displayName, skuId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, billingProfileId, displayName, skuId) { 
        obj['billingProfileId'] = billingProfileId;
        obj['displayName'] = displayName;
        obj['skuId'] = skuId;
    }

    /**
     * Constructs a <code>ModernSubscriptionCreationParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModernSubscriptionCreationParameters} obj Optional instance to populate.
     * @return {module:model/ModernSubscriptionCreationParameters} The populated <code>ModernSubscriptionCreationParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModernSubscriptionCreationParameters();

            if (data.hasOwnProperty('additionalParameters')) {
                obj['additionalParameters'] = ApiClient.convertToType(data['additionalParameters'], {'String': Object});
            }
            if (data.hasOwnProperty('billingProfileId')) {
                obj['billingProfileId'] = ApiClient.convertToType(data['billingProfileId'], 'String');
            }
            if (data.hasOwnProperty('costCenter')) {
                obj['costCenter'] = ApiClient.convertToType(data['costCenter'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('managementGroupId')) {
                obj['managementGroupId'] = ApiClient.convertToType(data['managementGroupId'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = AdPrincipal.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('skuId')) {
                obj['skuId'] = ApiClient.convertToType(data['skuId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModernSubscriptionCreationParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModernSubscriptionCreationParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ModernSubscriptionCreationParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['billingProfileId'] && !(typeof data['billingProfileId'] === 'string' || data['billingProfileId'] instanceof String)) {
            throw new Error("Expected the field `billingProfileId` to be a primitive type in the JSON string but got " + data['billingProfileId']);
        }
        // ensure the json data is a string
        if (data['costCenter'] && !(typeof data['costCenter'] === 'string' || data['costCenter'] instanceof String)) {
            throw new Error("Expected the field `costCenter` to be a primitive type in the JSON string but got " + data['costCenter']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['managementGroupId'] && !(typeof data['managementGroupId'] === 'string' || data['managementGroupId'] instanceof String)) {
            throw new Error("Expected the field `managementGroupId` to be a primitive type in the JSON string but got " + data['managementGroupId']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          AdPrincipal.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['skuId'] && !(typeof data['skuId'] === 'string' || data['skuId'] instanceof String)) {
            throw new Error("Expected the field `skuId` to be a primitive type in the JSON string but got " + data['skuId']);
        }

        return true;
    }


}

ModernSubscriptionCreationParameters.RequiredProperties = ["billingProfileId", "displayName", "skuId"];

/**
 * Additional, untyped parameters to support custom subscription creation scenarios.
 * @member {Object.<String, Object>} additionalParameters
 */
ModernSubscriptionCreationParameters.prototype['additionalParameters'] = undefined;

/**
 * The ARM ID of the billing profile for which you want to create the subscription.
 * @member {String} billingProfileId
 */
ModernSubscriptionCreationParameters.prototype['billingProfileId'] = undefined;

/**
 * If set, the cost center will show up on the Azure usage and charges file.
 * @member {String} costCenter
 */
ModernSubscriptionCreationParameters.prototype['costCenter'] = undefined;

/**
 * The friendly name of the subscription.
 * @member {String} displayName
 */
ModernSubscriptionCreationParameters.prototype['displayName'] = undefined;

/**
 * The identifier of the management group to which this subscription will be associated.
 * @member {String} managementGroupId
 */
ModernSubscriptionCreationParameters.prototype['managementGroupId'] = undefined;

/**
 * @member {module:model/AdPrincipal} owner
 */
ModernSubscriptionCreationParameters.prototype['owner'] = undefined;

/**
 * The SKU ID of the Azure plan. Azure plan determines the pricing and service-level agreement of the subscription.  Use 001 for Microsoft Azure Plan and 002 for Microsoft Azure Plan for DevTest.
 * @member {String} skuId
 */
ModernSubscriptionCreationParameters.prototype['skuId'] = undefined;






export default ModernSubscriptionCreationParameters;

