/**
 * SubscriptionClient
 * Subscription client provides an interface to create and manage Azure subscriptions programmatically.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ModernCspSubscriptionCreationParameters from '../model/ModernCspSubscriptionCreationParameters';
import ModernSubscriptionCreationParameters from '../model/ModernSubscriptionCreationParameters';
import SubscriptionCreationResult from '../model/SubscriptionCreationResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-11-01-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionFactoryCreateCspSubscription operation.
     * @callback module:api/DefaultApi~subscriptionFactoryCreateCspSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The operation to create a new CSP subscription.
     * @param {String} billingAccountName The name of the Microsoft Customer Agreement billing account for which you want to create the subscription.
     * @param {String} customerName The name of the customer.
     * @param {String} apiVersion Version of the API to be used with the client request. Current version is 2018-11-01-preview
     * @param {module:model/ModernCspSubscriptionCreationParameters} body The subscription creation parameters.
     * @param {module:api/DefaultApi~subscriptionFactoryCreateCspSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionCreationResult}
     */
    subscriptionFactoryCreateCspSubscription(billingAccountName, customerName, apiVersion, body, callback) {
      let postBody = body;
      // verify the required parameter 'billingAccountName' is set
      if (billingAccountName === undefined || billingAccountName === null) {
        throw new Error("Missing the required parameter 'billingAccountName' when calling subscriptionFactoryCreateCspSubscription");
      }
      // verify the required parameter 'customerName' is set
      if (customerName === undefined || customerName === null) {
        throw new Error("Missing the required parameter 'customerName' when calling subscriptionFactoryCreateCspSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subscriptionFactoryCreateCspSubscription");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subscriptionFactoryCreateCspSubscription");
      }

      let pathParams = {
        'billingAccountName': billingAccountName,
        'customerName': customerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionCreationResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/providers/Microsoft.Subscription/createSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionFactoryCreateSubscription operation.
     * @callback module:api/DefaultApi~subscriptionFactoryCreateSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The operation to create a new WebDirect or EA Azure subscription.
     * @param {String} billingAccountName The name of the Microsoft Customer Agreement billing account for which you want to create the subscription.
     * @param {String} billingProfileName The name of the billing profile in the billing account for which you want to create the subscription.
     * @param {String} invoiceSectionName The name of the invoice section in the billing account for which you want to create the subscription.
     * @param {String} apiVersion Version of the API to be used with the client request. Current version is 2018-11-01-preview
     * @param {module:model/ModernSubscriptionCreationParameters} body The subscription creation parameters.
     * @param {module:api/DefaultApi~subscriptionFactoryCreateSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionCreationResult}
     */
    subscriptionFactoryCreateSubscription(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, body, callback) {
      let postBody = body;
      // verify the required parameter 'billingAccountName' is set
      if (billingAccountName === undefined || billingAccountName === null) {
        throw new Error("Missing the required parameter 'billingAccountName' when calling subscriptionFactoryCreateSubscription");
      }
      // verify the required parameter 'billingProfileName' is set
      if (billingProfileName === undefined || billingProfileName === null) {
        throw new Error("Missing the required parameter 'billingProfileName' when calling subscriptionFactoryCreateSubscription");
      }
      // verify the required parameter 'invoiceSectionName' is set
      if (invoiceSectionName === undefined || invoiceSectionName === null) {
        throw new Error("Missing the required parameter 'invoiceSectionName' when calling subscriptionFactoryCreateSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subscriptionFactoryCreateSubscription");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling subscriptionFactoryCreateSubscription");
      }

      let pathParams = {
        'billingAccountName': billingAccountName,
        'billingProfileName': billingProfileName,
        'invoiceSectionName': invoiceSectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionCreationResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Subscription/createSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionOperationGet operation.
     * @callback module:api/DefaultApi~subscriptionOperationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of the pending Microsoft.Subscription API operations.
     * @param {String} operationId The operation ID, which can be found from the Location field in the generate recommendation response header.
     * @param {String} apiVersion Version of the API to be used with the client request. Current version is 2018-11-01-preview
     * @param {module:api/DefaultApi~subscriptionOperationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionCreationResult}
     */
    subscriptionOperationGet(operationId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling subscriptionOperationGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subscriptionOperationGet");
      }

      let pathParams = {
        'operationId': operationId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionCreationResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Subscription/subscriptionOperations/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
