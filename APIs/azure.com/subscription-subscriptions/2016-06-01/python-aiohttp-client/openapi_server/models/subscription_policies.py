# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionPolicies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_placement_id: str=None, quota_id: str=None, spending_limit: str=None):
        """SubscriptionPolicies - a model defined in OpenAPI

        :param location_placement_id: The location_placement_id of this SubscriptionPolicies.
        :param quota_id: The quota_id of this SubscriptionPolicies.
        :param spending_limit: The spending_limit of this SubscriptionPolicies.
        """
        self.openapi_types = {
            'location_placement_id': str,
            'quota_id': str,
            'spending_limit': str
        }

        self.attribute_map = {
            'location_placement_id': 'locationPlacementId',
            'quota_id': 'quotaId',
            'spending_limit': 'spendingLimit'
        }

        self._location_placement_id = location_placement_id
        self._quota_id = quota_id
        self._spending_limit = spending_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionPolicies':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionPolicies of this SubscriptionPolicies.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_placement_id(self):
        """Gets the location_placement_id of this SubscriptionPolicies.

        The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions.

        :return: The location_placement_id of this SubscriptionPolicies.
        :rtype: str
        """
        return self._location_placement_id

    @location_placement_id.setter
    def location_placement_id(self, location_placement_id):
        """Sets the location_placement_id of this SubscriptionPolicies.

        The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions.

        :param location_placement_id: The location_placement_id of this SubscriptionPolicies.
        :type location_placement_id: str
        """

        self._location_placement_id = location_placement_id

    @property
    def quota_id(self):
        """Gets the quota_id of this SubscriptionPolicies.

        The subscription quota ID.

        :return: The quota_id of this SubscriptionPolicies.
        :rtype: str
        """
        return self._quota_id

    @quota_id.setter
    def quota_id(self, quota_id):
        """Sets the quota_id of this SubscriptionPolicies.

        The subscription quota ID.

        :param quota_id: The quota_id of this SubscriptionPolicies.
        :type quota_id: str
        """

        self._quota_id = quota_id

    @property
    def spending_limit(self):
        """Gets the spending_limit of this SubscriptionPolicies.

        The subscription spending limit.

        :return: The spending_limit of this SubscriptionPolicies.
        :rtype: str
        """
        return self._spending_limit

    @spending_limit.setter
    def spending_limit(self, spending_limit):
        """Sets the spending_limit of this SubscriptionPolicies.

        The subscription spending limit.

        :param spending_limit: The spending_limit of this SubscriptionPolicies.
        :type spending_limit: str
        """
        allowed_values = ["On", "Off", "CurrentPeriodOff"]  # noqa: E501
        if spending_limit not in allowed_values:
            raise ValueError(
                "Invalid value for `spending_limit` ({0}), must be one of {1}"
                .format(spending_limit, allowed_values)
            )

        self._spending_limit = spending_limit
