# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_policies import SubscriptionPolicies
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_source: str=None, display_name: str=None, id: str=None, state: str=None, subscription_id: str=None, subscription_policies: SubscriptionPolicies=None):
        """Subscription - a model defined in OpenAPI

        :param authorization_source: The authorization_source of this Subscription.
        :param display_name: The display_name of this Subscription.
        :param id: The id of this Subscription.
        :param state: The state of this Subscription.
        :param subscription_id: The subscription_id of this Subscription.
        :param subscription_policies: The subscription_policies of this Subscription.
        """
        self.openapi_types = {
            'authorization_source': str,
            'display_name': str,
            'id': str,
            'state': str,
            'subscription_id': str,
            'subscription_policies': SubscriptionPolicies
        }

        self.attribute_map = {
            'authorization_source': 'authorizationSource',
            'display_name': 'displayName',
            'id': 'id',
            'state': 'state',
            'subscription_id': 'subscriptionId',
            'subscription_policies': 'subscriptionPolicies'
        }

        self._authorization_source = authorization_source
        self._display_name = display_name
        self._id = id
        self._state = state
        self._subscription_id = subscription_id
        self._subscription_policies = subscription_policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_source(self):
        """Gets the authorization_source of this Subscription.

        The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, 'Legacy, RoleBased'.

        :return: The authorization_source of this Subscription.
        :rtype: str
        """
        return self._authorization_source

    @authorization_source.setter
    def authorization_source(self, authorization_source):
        """Sets the authorization_source of this Subscription.

        The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, 'Legacy, RoleBased'.

        :param authorization_source: The authorization_source of this Subscription.
        :type authorization_source: str
        """

        self._authorization_source = authorization_source

    @property
    def display_name(self):
        """Gets the display_name of this Subscription.

        The subscription display name.

        :return: The display_name of this Subscription.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Subscription.

        The subscription display name.

        :param display_name: The display_name of this Subscription.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this Subscription.

        The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.

        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.

        :param id: The id of this Subscription.
        :type id: str
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this Subscription.

        The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.

        :return: The state of this Subscription.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Subscription.

        The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.

        :param state: The state of this Subscription.
        :type state: str
        """
        allowed_values = ["Enabled", "Warned", "PastDue", "Disabled", "Deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Subscription.

        The subscription ID.

        :return: The subscription_id of this Subscription.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Subscription.

        The subscription ID.

        :param subscription_id: The subscription_id of this Subscription.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_policies(self):
        """Gets the subscription_policies of this Subscription.


        :return: The subscription_policies of this Subscription.
        :rtype: SubscriptionPolicies
        """
        return self._subscription_policies

    @subscription_policies.setter
    def subscription_policies(self, subscription_policies):
        """Sets the subscription_policies of this Subscription.


        :param subscription_policies: The subscription_policies of this Subscription.
        :type subscription_policies: SubscriptionPolicies
        """

        self._subscription_policies = subscription_policies
