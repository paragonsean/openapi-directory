/**
 * SubscriptionClient
 * All resource groups and resources exist within subscriptions. These operation enable you get information about your subscriptions and tenants. A tenant is a dedicated instance of Azure Active Directory (Azure AD) for your organization.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Location from './model/Location';
import LocationListResult from './model/LocationListResult';
import Subscription from './model/Subscription';
import SubscriptionListResult from './model/SubscriptionListResult';
import SubscriptionPolicies from './model/SubscriptionPolicies';
import TenantIdDescription from './model/TenantIdDescription';
import TenantListResult from './model/TenantListResult';
import SubscriptionsApi from './api/SubscriptionsApi';
import TenantsApi from './api/TenantsApi';


/**
* All resource groups and resources exist within subscriptions. These operation enable you get information about your subscriptions and tenants. A tenant is a dedicated instance of Azure Active Directory (Azure AD) for your organization..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SubscriptionClient = require('index'); // See note below*.
* var xxxSvc = new SubscriptionClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SubscriptionClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SubscriptionClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SubscriptionClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2016-06-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location,

    /**
     * The LocationListResult model constructor.
     * @property {module:model/LocationListResult}
     */
    LocationListResult,

    /**
     * The Subscription model constructor.
     * @property {module:model/Subscription}
     */
    Subscription,

    /**
     * The SubscriptionListResult model constructor.
     * @property {module:model/SubscriptionListResult}
     */
    SubscriptionListResult,

    /**
     * The SubscriptionPolicies model constructor.
     * @property {module:model/SubscriptionPolicies}
     */
    SubscriptionPolicies,

    /**
     * The TenantIdDescription model constructor.
     * @property {module:model/TenantIdDescription}
     */
    TenantIdDescription,

    /**
     * The TenantListResult model constructor.
     * @property {module:model/TenantListResult}
     */
    TenantListResult,

    /**
    * The SubscriptionsApi service constructor.
    * @property {module:api/SubscriptionsApi}
    */
    SubscriptionsApi,

    /**
    * The TenantsApi service constructor.
    * @property {module:api/TenantsApi}
    */
    TenantsApi
};
