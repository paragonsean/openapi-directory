/**
 * SubscriptionClient
 * All resource groups and resources exist within subscriptions. These operation enable you get information about your subscriptions and tenants. A tenant is a dedicated instance of Azure Active Directory (Azure AD) for your organization.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubscriptionPolicies from './SubscriptionPolicies';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version 2016-06-01
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * Subscription information.
     * @alias module:model/Subscription
     */
    constructor() { 
        
        Subscription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('authorizationSource')) {
                obj['authorizationSource'] = ApiClient.convertToType(data['authorizationSource'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('subscriptionPolicies')) {
                obj['subscriptionPolicies'] = SubscriptionPolicies.constructFromObject(data['subscriptionPolicies']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorizationSource'] && !(typeof data['authorizationSource'] === 'string' || data['authorizationSource'] instanceof String)) {
            throw new Error("Expected the field `authorizationSource` to be a primitive type in the JSON string but got " + data['authorizationSource']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // validate the optional field `subscriptionPolicies`
        if (data['subscriptionPolicies']) { // data not null
          SubscriptionPolicies.validateJSON(data['subscriptionPolicies']);
        }

        return true;
    }


}



/**
 * The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, 'Legacy, RoleBased'.
 * @member {String} authorizationSource
 */
Subscription.prototype['authorizationSource'] = undefined;

/**
 * The subscription display name.
 * @member {String} displayName
 */
Subscription.prototype['displayName'] = undefined;

/**
 * The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.
 * @member {String} id
 */
Subscription.prototype['id'] = undefined;

/**
 * The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
 * @member {module:model/Subscription.StateEnum} state
 */
Subscription.prototype['state'] = undefined;

/**
 * The subscription ID.
 * @member {String} subscriptionId
 */
Subscription.prototype['subscriptionId'] = undefined;

/**
 * @member {module:model/SubscriptionPolicies} subscriptionPolicies
 */
Subscription.prototype['subscriptionPolicies'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Subscription['StateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Warned"
     * @const
     */
    "Warned": "Warned",

    /**
     * value: "PastDue"
     * @const
     */
    "PastDue": "PastDue",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted"
};



export default Subscription;

