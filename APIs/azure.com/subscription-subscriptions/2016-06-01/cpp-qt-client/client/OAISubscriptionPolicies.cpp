/**
 * SubscriptionClient
 * All resource groups and resources exist within subscriptions. These operation enable you get information about your subscriptions and tenants. A tenant is a dedicated instance of Azure Active Directory (Azure AD) for your organization.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionPolicies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionPolicies::OAISubscriptionPolicies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionPolicies::OAISubscriptionPolicies() {
    this->initializeModel();
}

OAISubscriptionPolicies::~OAISubscriptionPolicies() {}

void OAISubscriptionPolicies::initializeModel() {

    m_location_placement_id_isSet = false;
    m_location_placement_id_isValid = false;

    m_quota_id_isSet = false;
    m_quota_id_isValid = false;

    m_spending_limit_isSet = false;
    m_spending_limit_isValid = false;
}

void OAISubscriptionPolicies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionPolicies::fromJsonObject(QJsonObject json) {

    m_location_placement_id_isValid = ::OpenAPI::fromJsonValue(m_location_placement_id, json[QString("locationPlacementId")]);
    m_location_placement_id_isSet = !json[QString("locationPlacementId")].isNull() && m_location_placement_id_isValid;

    m_quota_id_isValid = ::OpenAPI::fromJsonValue(m_quota_id, json[QString("quotaId")]);
    m_quota_id_isSet = !json[QString("quotaId")].isNull() && m_quota_id_isValid;

    m_spending_limit_isValid = ::OpenAPI::fromJsonValue(m_spending_limit, json[QString("spendingLimit")]);
    m_spending_limit_isSet = !json[QString("spendingLimit")].isNull() && m_spending_limit_isValid;
}

QString OAISubscriptionPolicies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionPolicies::asJsonObject() const {
    QJsonObject obj;
    if (m_location_placement_id_isSet) {
        obj.insert(QString("locationPlacementId"), ::OpenAPI::toJsonValue(m_location_placement_id));
    }
    if (m_quota_id_isSet) {
        obj.insert(QString("quotaId"), ::OpenAPI::toJsonValue(m_quota_id));
    }
    if (m_spending_limit_isSet) {
        obj.insert(QString("spendingLimit"), ::OpenAPI::toJsonValue(m_spending_limit));
    }
    return obj;
}

QString OAISubscriptionPolicies::getLocationPlacementId() const {
    return m_location_placement_id;
}
void OAISubscriptionPolicies::setLocationPlacementId(const QString &location_placement_id) {
    m_location_placement_id = location_placement_id;
    m_location_placement_id_isSet = true;
}

bool OAISubscriptionPolicies::is_location_placement_id_Set() const{
    return m_location_placement_id_isSet;
}

bool OAISubscriptionPolicies::is_location_placement_id_Valid() const{
    return m_location_placement_id_isValid;
}

QString OAISubscriptionPolicies::getQuotaId() const {
    return m_quota_id;
}
void OAISubscriptionPolicies::setQuotaId(const QString &quota_id) {
    m_quota_id = quota_id;
    m_quota_id_isSet = true;
}

bool OAISubscriptionPolicies::is_quota_id_Set() const{
    return m_quota_id_isSet;
}

bool OAISubscriptionPolicies::is_quota_id_Valid() const{
    return m_quota_id_isValid;
}

QString OAISubscriptionPolicies::getSpendingLimit() const {
    return m_spending_limit;
}
void OAISubscriptionPolicies::setSpendingLimit(const QString &spending_limit) {
    m_spending_limit = spending_limit;
    m_spending_limit_isSet = true;
}

bool OAISubscriptionPolicies::is_spending_limit_Set() const{
    return m_spending_limit_isSet;
}

bool OAISubscriptionPolicies::is_spending_limit_Valid() const{
    return m_spending_limit_isValid;
}

bool OAISubscriptionPolicies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_placement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spending_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionPolicies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
