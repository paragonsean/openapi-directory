/**
 * SubscriptionClient
 * All resource groups and resources exist within subscriptions. These operation enable you get information about your subscriptions and tenants. A tenant is a dedicated instance of Azure Active Directory (Azure AD) for your organization.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_authorization_source_isSet = false;
    m_authorization_source_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_subscription_policies_isSet = false;
    m_subscription_policies_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_authorization_source_isValid = ::OpenAPI::fromJsonValue(m_authorization_source, json[QString("authorizationSource")]);
    m_authorization_source_isSet = !json[QString("authorizationSource")].isNull() && m_authorization_source_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_subscription_policies_isValid = ::OpenAPI::fromJsonValue(m_subscription_policies, json[QString("subscriptionPolicies")]);
    m_subscription_policies_isSet = !json[QString("subscriptionPolicies")].isNull() && m_subscription_policies_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_source_isSet) {
        obj.insert(QString("authorizationSource"), ::OpenAPI::toJsonValue(m_authorization_source));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_subscription_policies.isSet()) {
        obj.insert(QString("subscriptionPolicies"), ::OpenAPI::toJsonValue(m_subscription_policies));
    }
    return obj;
}

QString OAISubscription::getAuthorizationSource() const {
    return m_authorization_source;
}
void OAISubscription::setAuthorizationSource(const QString &authorization_source) {
    m_authorization_source = authorization_source;
    m_authorization_source_isSet = true;
}

bool OAISubscription::is_authorization_source_Set() const{
    return m_authorization_source_isSet;
}

bool OAISubscription::is_authorization_source_Valid() const{
    return m_authorization_source_isValid;
}

QString OAISubscription::getDisplayName() const {
    return m_display_name;
}
void OAISubscription::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISubscription::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISubscription::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAISubscription::getId() const {
    return m_id;
}
void OAISubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscription::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubscription::getState() const {
    return m_state;
}
void OAISubscription::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubscription::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubscription::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISubscription::getSubscriptionId() const {
    return m_subscription_id;
}
void OAISubscription::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAISubscription::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAISubscription::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

OAISubscriptionPolicies OAISubscription::getSubscriptionPolicies() const {
    return m_subscription_policies;
}
void OAISubscription::setSubscriptionPolicies(const OAISubscriptionPolicies &subscription_policies) {
    m_subscription_policies = subscription_policies;
    m_subscription_policies_isSet = true;
}

bool OAISubscription::is_subscription_policies_Set() const{
    return m_subscription_policies_isSet;
}

bool OAISubscription::is_subscription_policies_Valid() const{
    return m_subscription_policies_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
