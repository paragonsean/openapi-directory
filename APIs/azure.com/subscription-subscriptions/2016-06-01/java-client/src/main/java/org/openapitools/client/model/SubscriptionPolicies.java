/*
 * SubscriptionClient
 * All resource groups and resources exist within subscriptions. These operation enable you get information about your subscriptions and tenants. A tenant is a dedicated instance of Azure Active Directory (Azure AD) for your organization.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subscription policies.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:42.876109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionPolicies {
  public static final String SERIALIZED_NAME_LOCATION_PLACEMENT_ID = "locationPlacementId";
  @SerializedName(SERIALIZED_NAME_LOCATION_PLACEMENT_ID)
  private String locationPlacementId;

  public static final String SERIALIZED_NAME_QUOTA_ID = "quotaId";
  @SerializedName(SERIALIZED_NAME_QUOTA_ID)
  private String quotaId;

  /**
   * The subscription spending limit.
   */
  @JsonAdapter(SpendingLimitEnum.Adapter.class)
  public enum SpendingLimitEnum {
    ON("On"),
    
    OFF("Off"),
    
    CURRENT_PERIOD_OFF("CurrentPeriodOff");

    private String value;

    SpendingLimitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpendingLimitEnum fromValue(String value) {
      for (SpendingLimitEnum b : SpendingLimitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpendingLimitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpendingLimitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpendingLimitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpendingLimitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpendingLimitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPENDING_LIMIT = "spendingLimit";
  @SerializedName(SERIALIZED_NAME_SPENDING_LIMIT)
  private SpendingLimitEnum spendingLimit;

  public SubscriptionPolicies() {
  }

  public SubscriptionPolicies(
     String locationPlacementId, 
     String quotaId, 
     SpendingLimitEnum spendingLimit
  ) {
    this();
    this.locationPlacementId = locationPlacementId;
    this.quotaId = quotaId;
    this.spendingLimit = spendingLimit;
  }

  /**
   * The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions.
   * @return locationPlacementId
   */
  @javax.annotation.Nullable
  public String getLocationPlacementId() {
    return locationPlacementId;
  }



  /**
   * The subscription quota ID.
   * @return quotaId
   */
  @javax.annotation.Nullable
  public String getQuotaId() {
    return quotaId;
  }



  /**
   * The subscription spending limit.
   * @return spendingLimit
   */
  @javax.annotation.Nullable
  public SpendingLimitEnum getSpendingLimit() {
    return spendingLimit;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPolicies subscriptionPolicies = (SubscriptionPolicies) o;
    return Objects.equals(this.locationPlacementId, subscriptionPolicies.locationPlacementId) &&
        Objects.equals(this.quotaId, subscriptionPolicies.quotaId) &&
        Objects.equals(this.spendingLimit, subscriptionPolicies.spendingLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationPlacementId, quotaId, spendingLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPolicies {\n");
    sb.append("    locationPlacementId: ").append(toIndentedString(locationPlacementId)).append("\n");
    sb.append("    quotaId: ").append(toIndentedString(quotaId)).append("\n");
    sb.append("    spendingLimit: ").append(toIndentedString(spendingLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locationPlacementId");
    openapiFields.add("quotaId");
    openapiFields.add("spendingLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionPolicies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionPolicies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPolicies is not found in the empty JSON string", SubscriptionPolicies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionPolicies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionPolicies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("locationPlacementId") != null && !jsonObj.get("locationPlacementId").isJsonNull()) && !jsonObj.get("locationPlacementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationPlacementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationPlacementId").toString()));
      }
      if ((jsonObj.get("quotaId") != null && !jsonObj.get("quotaId").isJsonNull()) && !jsonObj.get("quotaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotaId").toString()));
      }
      if ((jsonObj.get("spendingLimit") != null && !jsonObj.get("spendingLimit").isJsonNull()) && !jsonObj.get("spendingLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spendingLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spendingLimit").toString()));
      }
      // validate the optional field `spendingLimit`
      if (jsonObj.get("spendingLimit") != null && !jsonObj.get("spendingLimit").isJsonNull()) {
        SpendingLimitEnum.validateJsonElement(jsonObj.get("spendingLimit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPolicies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPolicies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPolicies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPolicies.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPolicies>() {
           @Override
           public void write(JsonWriter out, SubscriptionPolicies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPolicies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionPolicies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionPolicies
   * @throws IOException if the JSON string is invalid with respect to SubscriptionPolicies
   */
  public static SubscriptionPolicies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPolicies.class);
  }

  /**
   * Convert an instance of SubscriptionPolicies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

