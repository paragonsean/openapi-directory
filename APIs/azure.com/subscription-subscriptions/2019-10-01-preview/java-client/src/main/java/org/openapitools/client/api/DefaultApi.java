/*
 * SubscriptionClient
 * Subscription client provides an interface to create and manage Azure subscriptions programmatically.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CanceledSubscriptionId;
import org.openapitools.client.model.EnabledSubscriptionId;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModernCspSubscriptionCreationParameters;
import org.openapitools.client.model.ModernSubscriptionCreationParameters;
import org.openapitools.client.model.OperationListResult;
import org.openapitools.client.model.RenamedSubscriptionId;
import org.openapitools.client.model.SubscriptionCreationParameters;
import org.openapitools.client.model.SubscriptionCreationResult;
import org.openapitools.client.model.SubscriptionName;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for operationsList
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Subscription/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsList(Async)");
        }

        return operationsListCall(apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the available Microsoft.Subscription API operations.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @return OperationListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public OperationListResult operationsList(String apiVersion) throws ApiException {
        ApiResponse<OperationListResult> localVarResp = operationsListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the available Microsoft.Subscription API operations.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @return ApiResponse&lt;OperationListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationListResult> operationsListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the available Microsoft.Subscription API operations.
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListAsync(String apiVersion, final ApiCallback<OperationListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionCancel
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionCancelCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/cancel"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionCancelValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionCancel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionCancel(Async)");
        }

        return subscriptionCancelCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * The operation to cancel a subscription
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @return CanceledSubscriptionId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public CanceledSubscriptionId subscriptionCancel(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<CanceledSubscriptionId> localVarResp = subscriptionCancelWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to cancel a subscription
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @return ApiResponse&lt;CanceledSubscriptionId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CanceledSubscriptionId> subscriptionCancelWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = subscriptionCancelValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<CanceledSubscriptionId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to cancel a subscription
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionCancelAsync(String subscriptionId, String apiVersion, final ApiCallback<CanceledSubscriptionId> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionCancelValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CanceledSubscriptionId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionCreateCspSubscription
     * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which you want to create the subscription. (required)
     * @param customerName The name of the customer. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionCreateCspSubscriptionCall(String billingAccountName, String customerName, String apiVersion, ModernCspSubscriptionCreationParameters body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/providers/Microsoft.Subscription/createSubscription"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "customerName" + "}", localVarApiClient.escapeString(customerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionCreateCspSubscriptionValidateBeforeCall(String billingAccountName, String customerName, String apiVersion, ModernCspSubscriptionCreationParameters body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling subscriptionCreateCspSubscription(Async)");
        }

        // verify the required parameter 'customerName' is set
        if (customerName == null) {
            throw new ApiException("Missing the required parameter 'customerName' when calling subscriptionCreateCspSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionCreateCspSubscription(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling subscriptionCreateCspSubscription(Async)");
        }

        return subscriptionCreateCspSubscriptionCall(billingAccountName, customerName, apiVersion, body, _callback);

    }

    /**
     * 
     * The operation to create a new CSP subscription.
     * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which you want to create the subscription. (required)
     * @param customerName The name of the customer. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @return SubscriptionCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionCreationResult subscriptionCreateCspSubscription(String billingAccountName, String customerName, String apiVersion, ModernCspSubscriptionCreationParameters body) throws ApiException {
        ApiResponse<SubscriptionCreationResult> localVarResp = subscriptionCreateCspSubscriptionWithHttpInfo(billingAccountName, customerName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to create a new CSP subscription.
     * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which you want to create the subscription. (required)
     * @param customerName The name of the customer. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @return ApiResponse&lt;SubscriptionCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionCreationResult> subscriptionCreateCspSubscriptionWithHttpInfo(String billingAccountName, String customerName, String apiVersion, ModernCspSubscriptionCreationParameters body) throws ApiException {
        okhttp3.Call localVarCall = subscriptionCreateCspSubscriptionValidateBeforeCall(billingAccountName, customerName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<SubscriptionCreationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to create a new CSP subscription.
     * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which you want to create the subscription. (required)
     * @param customerName The name of the customer. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionCreateCspSubscriptionAsync(String billingAccountName, String customerName, String apiVersion, ModernCspSubscriptionCreationParameters body, final ApiCallback<SubscriptionCreationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionCreateCspSubscriptionValidateBeforeCall(billingAccountName, customerName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionCreationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionCreateSubscription
     * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which you want to create the subscription. (required)
     * @param billingProfileName The name of the billing profile in the billing account for which you want to create the subscription. (required)
     * @param invoiceSectionName The name of the invoice section in the billing account for which you want to create the subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionCreateSubscriptionCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String apiVersion, ModernSubscriptionCreationParameters body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Subscription/createSubscription"
            .replace("{" + "billingAccountName" + "}", localVarApiClient.escapeString(billingAccountName.toString()))
            .replace("{" + "billingProfileName" + "}", localVarApiClient.escapeString(billingProfileName.toString()))
            .replace("{" + "invoiceSectionName" + "}", localVarApiClient.escapeString(invoiceSectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionCreateSubscriptionValidateBeforeCall(String billingAccountName, String billingProfileName, String invoiceSectionName, String apiVersion, ModernSubscriptionCreationParameters body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountName' is set
        if (billingAccountName == null) {
            throw new ApiException("Missing the required parameter 'billingAccountName' when calling subscriptionCreateSubscription(Async)");
        }

        // verify the required parameter 'billingProfileName' is set
        if (billingProfileName == null) {
            throw new ApiException("Missing the required parameter 'billingProfileName' when calling subscriptionCreateSubscription(Async)");
        }

        // verify the required parameter 'invoiceSectionName' is set
        if (invoiceSectionName == null) {
            throw new ApiException("Missing the required parameter 'invoiceSectionName' when calling subscriptionCreateSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionCreateSubscription(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling subscriptionCreateSubscription(Async)");
        }

        return subscriptionCreateSubscriptionCall(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, body, _callback);

    }

    /**
     * 
     * The operation to create a new WebDirect or EA Azure subscription.
     * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which you want to create the subscription. (required)
     * @param billingProfileName The name of the billing profile in the billing account for which you want to create the subscription. (required)
     * @param invoiceSectionName The name of the invoice section in the billing account for which you want to create the subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @return SubscriptionCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionCreationResult subscriptionCreateSubscription(String billingAccountName, String billingProfileName, String invoiceSectionName, String apiVersion, ModernSubscriptionCreationParameters body) throws ApiException {
        ApiResponse<SubscriptionCreationResult> localVarResp = subscriptionCreateSubscriptionWithHttpInfo(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to create a new WebDirect or EA Azure subscription.
     * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which you want to create the subscription. (required)
     * @param billingProfileName The name of the billing profile in the billing account for which you want to create the subscription. (required)
     * @param invoiceSectionName The name of the invoice section in the billing account for which you want to create the subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @return ApiResponse&lt;SubscriptionCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionCreationResult> subscriptionCreateSubscriptionWithHttpInfo(String billingAccountName, String billingProfileName, String invoiceSectionName, String apiVersion, ModernSubscriptionCreationParameters body) throws ApiException {
        okhttp3.Call localVarCall = subscriptionCreateSubscriptionValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<SubscriptionCreationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to create a new WebDirect or EA Azure subscription.
     * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which you want to create the subscription. (required)
     * @param billingProfileName The name of the billing profile in the billing account for which you want to create the subscription. (required)
     * @param invoiceSectionName The name of the invoice section in the billing account for which you want to create the subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionCreateSubscriptionAsync(String billingAccountName, String billingProfileName, String invoiceSectionName, String apiVersion, ModernSubscriptionCreationParameters body, final ApiCallback<SubscriptionCreationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionCreateSubscriptionValidateBeforeCall(billingAccountName, billingProfileName, invoiceSectionName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionCreationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionCreateSubscriptionInEnrollmentAccount
     * @param enrollmentAccountName The name of the enrollment account to which the subscription will be billed. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionCreateSubscriptionInEnrollmentAccountCall(String enrollmentAccountName, String apiVersion, SubscriptionCreationParameters body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountName}/providers/Microsoft.Subscription/createSubscription"
            .replace("{" + "enrollmentAccountName" + "}", localVarApiClient.escapeString(enrollmentAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionCreateSubscriptionInEnrollmentAccountValidateBeforeCall(String enrollmentAccountName, String apiVersion, SubscriptionCreationParameters body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enrollmentAccountName' is set
        if (enrollmentAccountName == null) {
            throw new ApiException("Missing the required parameter 'enrollmentAccountName' when calling subscriptionCreateSubscriptionInEnrollmentAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionCreateSubscriptionInEnrollmentAccount(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling subscriptionCreateSubscriptionInEnrollmentAccount(Async)");
        }

        return subscriptionCreateSubscriptionInEnrollmentAccountCall(enrollmentAccountName, apiVersion, body, _callback);

    }

    /**
     * 
     * Creates an Azure subscription
     * @param enrollmentAccountName The name of the enrollment account to which the subscription will be billed. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @return SubscriptionCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionCreationResult subscriptionCreateSubscriptionInEnrollmentAccount(String enrollmentAccountName, String apiVersion, SubscriptionCreationParameters body) throws ApiException {
        ApiResponse<SubscriptionCreationResult> localVarResp = subscriptionCreateSubscriptionInEnrollmentAccountWithHttpInfo(enrollmentAccountName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an Azure subscription
     * @param enrollmentAccountName The name of the enrollment account to which the subscription will be billed. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @return ApiResponse&lt;SubscriptionCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionCreationResult> subscriptionCreateSubscriptionInEnrollmentAccountWithHttpInfo(String enrollmentAccountName, String apiVersion, SubscriptionCreationParameters body) throws ApiException {
        okhttp3.Call localVarCall = subscriptionCreateSubscriptionInEnrollmentAccountValidateBeforeCall(enrollmentAccountName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<SubscriptionCreationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an Azure subscription
     * @param enrollmentAccountName The name of the enrollment account to which the subscription will be billed. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body The subscription creation parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response for a successful query. The response body will contain the data that matches the filters specified in the query parameters. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription creation is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionCreateSubscriptionInEnrollmentAccountAsync(String enrollmentAccountName, String apiVersion, SubscriptionCreationParameters body, final ApiCallback<SubscriptionCreationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionCreateSubscriptionInEnrollmentAccountValidateBeforeCall(enrollmentAccountName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionCreationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionEnable
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionEnableCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/enable"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionEnableValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionEnable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionEnable(Async)");
        }

        return subscriptionEnableCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * The operation to enable a subscription
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @return EnabledSubscriptionId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public EnabledSubscriptionId subscriptionEnable(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<EnabledSubscriptionId> localVarResp = subscriptionEnableWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to enable a subscription
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @return ApiResponse&lt;EnabledSubscriptionId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnabledSubscriptionId> subscriptionEnableWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = subscriptionEnableValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<EnabledSubscriptionId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to enable a subscription
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionEnableAsync(String subscriptionId, String apiVersion, final ApiCallback<EnabledSubscriptionId> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionEnableValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EnabledSubscriptionId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionOperationGet
     * @param operationId The operation ID, which can be found from the Location field in the generate recommendation response header. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful completion of the asynchronous operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription update is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionOperationGetCall(String operationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Subscription/subscriptionOperations/{operationId}"
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionOperationGetValidateBeforeCall(String operationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling subscriptionOperationGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionOperationGet(Async)");
        }

        return subscriptionOperationGetCall(operationId, apiVersion, _callback);

    }

    /**
     * 
     * Get the status of the pending Microsoft.Subscription API operations.
     * @param operationId The operation ID, which can be found from the Location field in the generate recommendation response header. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @return SubscriptionCreationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful completion of the asynchronous operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription update is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
     </table>
     */
    public SubscriptionCreationResult subscriptionOperationGet(String operationId, String apiVersion) throws ApiException {
        ApiResponse<SubscriptionCreationResult> localVarResp = subscriptionOperationGetWithHttpInfo(operationId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the status of the pending Microsoft.Subscription API operations.
     * @param operationId The operation ID, which can be found from the Location field in the generate recommendation response header. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @return ApiResponse&lt;SubscriptionCreationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful completion of the asynchronous operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription update is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionCreationResult> subscriptionOperationGetWithHttpInfo(String operationId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = subscriptionOperationGetValidateBeforeCall(operationId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SubscriptionCreationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the status of the pending Microsoft.Subscription API operations.
     * @param operationId The operation ID, which can be found from the Location field in the generate recommendation response header. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful completion of the asynchronous operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. Subscription update is in progress. </td><td>  * Retry-After - The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. <br>  * Location - The URL where the status of the asynchronous operation can be checked. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionOperationGetAsync(String operationId, String apiVersion, final ApiCallback<SubscriptionCreationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionOperationGetValidateBeforeCall(operationId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionCreationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionRename
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body Subscription Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionRenameCall(String subscriptionId, String apiVersion, SubscriptionName body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/rename"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionRenameValidateBeforeCall(String subscriptionId, String apiVersion, SubscriptionName body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionRename(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionRename(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling subscriptionRename(Async)");
        }

        return subscriptionRenameCall(subscriptionId, apiVersion, body, _callback);

    }

    /**
     * 
     * The operation to rename a subscription
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body Subscription Name (required)
     * @return RenamedSubscriptionId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public RenamedSubscriptionId subscriptionRename(String subscriptionId, String apiVersion, SubscriptionName body) throws ApiException {
        ApiResponse<RenamedSubscriptionId> localVarResp = subscriptionRenameWithHttpInfo(subscriptionId, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * 
     * The operation to rename a subscription
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body Subscription Name (required)
     * @return ApiResponse&lt;RenamedSubscriptionId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenamedSubscriptionId> subscriptionRenameWithHttpInfo(String subscriptionId, String apiVersion, SubscriptionName body) throws ApiException {
        okhttp3.Call localVarCall = subscriptionRenameValidateBeforeCall(subscriptionId, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<RenamedSubscriptionId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The operation to rename a subscription
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion Version of the API to be used with the client request. Current version is 2019-10-01-preview (required)
     * @param body Subscription Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Describes the error if the operation is not successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionRenameAsync(String subscriptionId, String apiVersion, SubscriptionName body, final ApiCallback<RenamedSubscriptionId> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionRenameValidateBeforeCall(subscriptionId, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<RenamedSubscriptionId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
