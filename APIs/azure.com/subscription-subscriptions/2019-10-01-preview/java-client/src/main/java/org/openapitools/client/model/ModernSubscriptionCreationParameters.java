/*
 * SubscriptionClient
 * Subscription client provides an interface to create and manage Azure subscriptions programmatically.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdPrincipal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters required to create a new subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:41.392590-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModernSubscriptionCreationParameters {
  public static final String SERIALIZED_NAME_COST_CENTER = "costCenter";
  @SerializedName(SERIALIZED_NAME_COST_CENTER)
  private String costCenter;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MANAGEMENT_GROUP_ID = "managementGroupId";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_GROUP_ID)
  private String managementGroupId;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private AdPrincipal owner;

  public static final String SERIALIZED_NAME_SKU_ID = "skuId";
  @SerializedName(SERIALIZED_NAME_SKU_ID)
  private String skuId;

  public ModernSubscriptionCreationParameters() {
  }

  public ModernSubscriptionCreationParameters costCenter(String costCenter) {
    this.costCenter = costCenter;
    return this;
  }

  /**
   * If set, the cost center will show up on the Azure usage and charges file.
   * @return costCenter
   */
  @javax.annotation.Nullable
  public String getCostCenter() {
    return costCenter;
  }

  public void setCostCenter(String costCenter) {
    this.costCenter = costCenter;
  }


  public ModernSubscriptionCreationParameters displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The friendly name of the subscription.
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ModernSubscriptionCreationParameters managementGroupId(String managementGroupId) {
    this.managementGroupId = managementGroupId;
    return this;
  }

  /**
   * The identifier of the management group to which this subscription will be associated.
   * @return managementGroupId
   */
  @javax.annotation.Nullable
  public String getManagementGroupId() {
    return managementGroupId;
  }

  public void setManagementGroupId(String managementGroupId) {
    this.managementGroupId = managementGroupId;
  }


  public ModernSubscriptionCreationParameters owner(AdPrincipal owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public AdPrincipal getOwner() {
    return owner;
  }

  public void setOwner(AdPrincipal owner) {
    this.owner = owner;
  }


  public ModernSubscriptionCreationParameters skuId(String skuId) {
    this.skuId = skuId;
    return this;
  }

  /**
   * The SKU ID of the Azure plan. Azure plan determines the pricing and service-level agreement of the subscription.  Use 001 for Microsoft Azure Plan and 002 for Microsoft Azure Plan for DevTest.
   * @return skuId
   */
  @javax.annotation.Nonnull
  public String getSkuId() {
    return skuId;
  }

  public void setSkuId(String skuId) {
    this.skuId = skuId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModernSubscriptionCreationParameters modernSubscriptionCreationParameters = (ModernSubscriptionCreationParameters) o;
    return Objects.equals(this.costCenter, modernSubscriptionCreationParameters.costCenter) &&
        Objects.equals(this.displayName, modernSubscriptionCreationParameters.displayName) &&
        Objects.equals(this.managementGroupId, modernSubscriptionCreationParameters.managementGroupId) &&
        Objects.equals(this.owner, modernSubscriptionCreationParameters.owner) &&
        Objects.equals(this.skuId, modernSubscriptionCreationParameters.skuId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(costCenter, displayName, managementGroupId, owner, skuId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModernSubscriptionCreationParameters {\n");
    sb.append("    costCenter: ").append(toIndentedString(costCenter)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    managementGroupId: ").append(toIndentedString(managementGroupId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("costCenter");
    openapiFields.add("displayName");
    openapiFields.add("managementGroupId");
    openapiFields.add("owner");
    openapiFields.add("skuId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("skuId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModernSubscriptionCreationParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModernSubscriptionCreationParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModernSubscriptionCreationParameters is not found in the empty JSON string", ModernSubscriptionCreationParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModernSubscriptionCreationParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModernSubscriptionCreationParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModernSubscriptionCreationParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("costCenter") != null && !jsonObj.get("costCenter").isJsonNull()) && !jsonObj.get("costCenter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCenter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCenter").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("managementGroupId") != null && !jsonObj.get("managementGroupId").isJsonNull()) && !jsonObj.get("managementGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managementGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managementGroupId").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        AdPrincipal.validateJsonElement(jsonObj.get("owner"));
      }
      if (!jsonObj.get("skuId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModernSubscriptionCreationParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModernSubscriptionCreationParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModernSubscriptionCreationParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModernSubscriptionCreationParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ModernSubscriptionCreationParameters>() {
           @Override
           public void write(JsonWriter out, ModernSubscriptionCreationParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModernSubscriptionCreationParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModernSubscriptionCreationParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModernSubscriptionCreationParameters
   * @throws IOException if the JSON string is invalid with respect to ModernSubscriptionCreationParameters
   */
  public static ModernSubscriptionCreationParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModernSubscriptionCreationParameters.class);
  }

  /**
   * Convert an instance of ModernSubscriptionCreationParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

