# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ad_principal import AdPrincipal
from openapi_server import util


class SubscriptionCreationParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, management_group_id: str=None, offer_type: str=None, owners: List[AdPrincipal]=None):
        """SubscriptionCreationParameters - a model defined in OpenAPI

        :param display_name: The display_name of this SubscriptionCreationParameters.
        :param management_group_id: The management_group_id of this SubscriptionCreationParameters.
        :param offer_type: The offer_type of this SubscriptionCreationParameters.
        :param owners: The owners of this SubscriptionCreationParameters.
        """
        self.openapi_types = {
            'display_name': str,
            'management_group_id': str,
            'offer_type': str,
            'owners': List[AdPrincipal]
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'management_group_id': 'managementGroupId',
            'offer_type': 'offerType',
            'owners': 'owners'
        }

        self._display_name = display_name
        self._management_group_id = management_group_id
        self._offer_type = offer_type
        self._owners = owners

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionCreationParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionCreationParameters of this SubscriptionCreationParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this SubscriptionCreationParameters.

        The display name of the subscription.

        :return: The display_name of this SubscriptionCreationParameters.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SubscriptionCreationParameters.

        The display name of the subscription.

        :param display_name: The display_name of this SubscriptionCreationParameters.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def management_group_id(self):
        """Gets the management_group_id of this SubscriptionCreationParameters.

        The Management Group Id.

        :return: The management_group_id of this SubscriptionCreationParameters.
        :rtype: str
        """
        return self._management_group_id

    @management_group_id.setter
    def management_group_id(self, management_group_id):
        """Sets the management_group_id of this SubscriptionCreationParameters.

        The Management Group Id.

        :param management_group_id: The management_group_id of this SubscriptionCreationParameters.
        :type management_group_id: str
        """

        self._management_group_id = management_group_id

    @property
    def offer_type(self):
        """Gets the offer_type of this SubscriptionCreationParameters.

        The offer type of the subscription. For example, MS-AZR-0017P (EnterpriseAgreement) and MS-AZR-0148P (EnterpriseAgreement devTest) are available. Only valid when creating a subscription in a enrollment account scope.

        :return: The offer_type of this SubscriptionCreationParameters.
        :rtype: str
        """
        return self._offer_type

    @offer_type.setter
    def offer_type(self, offer_type):
        """Sets the offer_type of this SubscriptionCreationParameters.

        The offer type of the subscription. For example, MS-AZR-0017P (EnterpriseAgreement) and MS-AZR-0148P (EnterpriseAgreement devTest) are available. Only valid when creating a subscription in a enrollment account scope.

        :param offer_type: The offer_type of this SubscriptionCreationParameters.
        :type offer_type: str
        """
        allowed_values = ["MS-AZR-0017P", "MS-AZR-0148P"]  # noqa: E501
        if offer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `offer_type` ({0}), must be one of {1}"
                .format(offer_type, allowed_values)
            )

        self._offer_type = offer_type

    @property
    def owners(self):
        """Gets the owners of this SubscriptionCreationParameters.

        The list of principals that should be granted Owner access on the subscription. Principals should be of type User, Service Principal or Security Group.

        :return: The owners of this SubscriptionCreationParameters.
        :rtype: List[AdPrincipal]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this SubscriptionCreationParameters.

        The list of principals that should be granted Owner access on the subscription. Principals should be of type User, Service Principal or Security Group.

        :param owners: The owners of this SubscriptionCreationParameters.
        :type owners: List[AdPrincipal]
        """

        self._owners = owners
