/**
 * SubscriptionClient
 * Subscription client provides an interface to create and manage Azure subscriptions programmatically.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICanceledSubscriptionId.h"
#include "OAIEnabledSubscriptionId.h"
#include "OAIErrorResponse.h"
#include "OAIModernCspSubscriptionCreationParameters.h"
#include "OAIModernSubscriptionCreationParameters.h"
#include "OAIOperationListResult.h"
#include "OAIRenamedSubscriptionId.h"
#include "OAISubscriptionCreationParameters.h"
#include "OAISubscriptionCreationResult.h"
#include "OAISubscriptionName.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void operationsList(const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void subscriptionCancel(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  customer_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIModernCspSubscriptionCreationParameters [required]
    */
    virtual void subscriptionCreateCspSubscription(const QString &billing_account_name, const QString &customer_name, const QString &api_version, const OAIModernCspSubscriptionCreationParameters &body);

    /**
    * @param[in]  billing_account_name QString [required]
    * @param[in]  billing_profile_name QString [required]
    * @param[in]  invoice_section_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIModernSubscriptionCreationParameters [required]
    */
    virtual void subscriptionCreateSubscription(const QString &billing_account_name, const QString &billing_profile_name, const QString &invoice_section_name, const QString &api_version, const OAIModernSubscriptionCreationParameters &body);

    /**
    * @param[in]  enrollment_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAISubscriptionCreationParameters [required]
    */
    virtual void subscriptionCreateSubscriptionInEnrollmentAccount(const QString &enrollment_account_name, const QString &api_version, const OAISubscriptionCreationParameters &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void subscriptionEnable(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void subscriptionOperationGet(const QString &operation_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAISubscriptionName [required]
    */
    virtual void subscriptionRename(const QString &subscription_id, const QString &api_version, const OAISubscriptionName &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void operationsListCallback(OAIHttpRequestWorker *worker);
    void subscriptionCancelCallback(OAIHttpRequestWorker *worker);
    void subscriptionCreateCspSubscriptionCallback(OAIHttpRequestWorker *worker);
    void subscriptionCreateSubscriptionCallback(OAIHttpRequestWorker *worker);
    void subscriptionCreateSubscriptionInEnrollmentAccountCallback(OAIHttpRequestWorker *worker);
    void subscriptionEnableCallback(OAIHttpRequestWorker *worker);
    void subscriptionOperationGetCallback(OAIHttpRequestWorker *worker);
    void subscriptionRenameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void operationsListSignal(OAIOperationListResult summary);
    void subscriptionCancelSignal(OAICanceledSubscriptionId summary);
    void subscriptionCreateCspSubscriptionSignal(OAISubscriptionCreationResult summary);
    void subscriptionCreateSubscriptionSignal(OAISubscriptionCreationResult summary);
    void subscriptionCreateSubscriptionInEnrollmentAccountSignal(OAISubscriptionCreationResult summary);
    void subscriptionEnableSignal(OAIEnabledSubscriptionId summary);
    void subscriptionOperationGetSignal(OAISubscriptionCreationResult summary);
    void subscriptionRenameSignal(OAIRenamedSubscriptionId summary);


    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationListResult summary);
    void subscriptionCancelSignalFull(OAIHttpRequestWorker *worker, OAICanceledSubscriptionId summary);
    void subscriptionCreateCspSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionCreationResult summary);
    void subscriptionCreateSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionCreationResult summary);
    void subscriptionCreateSubscriptionInEnrollmentAccountSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionCreationResult summary);
    void subscriptionEnableSignalFull(OAIHttpRequestWorker *worker, OAIEnabledSubscriptionId summary);
    void subscriptionOperationGetSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionCreationResult summary);
    void subscriptionRenameSignalFull(OAIHttpRequestWorker *worker, OAIRenamedSubscriptionId summary);

    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionCancelSignalError() instead")
    void subscriptionCancelSignalE(OAICanceledSubscriptionId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionCancelSignalError(OAICanceledSubscriptionId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionCreateCspSubscriptionSignalError() instead")
    void subscriptionCreateCspSubscriptionSignalE(OAISubscriptionCreationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionCreateCspSubscriptionSignalError(OAISubscriptionCreationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionCreateSubscriptionSignalError() instead")
    void subscriptionCreateSubscriptionSignalE(OAISubscriptionCreationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionCreateSubscriptionSignalError(OAISubscriptionCreationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionCreateSubscriptionInEnrollmentAccountSignalError() instead")
    void subscriptionCreateSubscriptionInEnrollmentAccountSignalE(OAISubscriptionCreationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionCreateSubscriptionInEnrollmentAccountSignalError(OAISubscriptionCreationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionEnableSignalError() instead")
    void subscriptionEnableSignalE(OAIEnabledSubscriptionId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionEnableSignalError(OAIEnabledSubscriptionId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionOperationGetSignalError() instead")
    void subscriptionOperationGetSignalE(OAISubscriptionCreationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionOperationGetSignalError(OAISubscriptionCreationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionRenameSignalError() instead")
    void subscriptionRenameSignalE(OAIRenamedSubscriptionId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionRenameSignalError(OAIRenamedSubscriptionId summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionCancelSignalErrorFull() instead")
    void subscriptionCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionCreateCspSubscriptionSignalErrorFull() instead")
    void subscriptionCreateCspSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionCreateCspSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionCreateSubscriptionSignalErrorFull() instead")
    void subscriptionCreateSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionCreateSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionCreateSubscriptionInEnrollmentAccountSignalErrorFull() instead")
    void subscriptionCreateSubscriptionInEnrollmentAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionCreateSubscriptionInEnrollmentAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionEnableSignalErrorFull() instead")
    void subscriptionEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionOperationGetSignalErrorFull() instead")
    void subscriptionOperationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionOperationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionRenameSignalErrorFull() instead")
    void subscriptionRenameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionRenameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
