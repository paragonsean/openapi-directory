/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskEncryptionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskEncryptionProperties::OAIDiskEncryptionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskEncryptionProperties::OAIDiskEncryptionProperties() {
    this->initializeModel();
}

OAIDiskEncryptionProperties::~OAIDiskEncryptionProperties() {}

void OAIDiskEncryptionProperties::initializeModel() {

    m_encryption_algorithm_isSet = false;
    m_encryption_algorithm_isValid = false;

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_key_version_isSet = false;
    m_key_version_isValid = false;

    m_msi_resource_id_isSet = false;
    m_msi_resource_id_isValid = false;

    m_vault_uri_isSet = false;
    m_vault_uri_isValid = false;
}

void OAIDiskEncryptionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskEncryptionProperties::fromJsonObject(QJsonObject json) {

    m_encryption_algorithm_isValid = ::OpenAPI::fromJsonValue(m_encryption_algorithm, json[QString("encryptionAlgorithm")]);
    m_encryption_algorithm_isSet = !json[QString("encryptionAlgorithm")].isNull() && m_encryption_algorithm_isValid;

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_key_version_isValid = ::OpenAPI::fromJsonValue(m_key_version, json[QString("keyVersion")]);
    m_key_version_isSet = !json[QString("keyVersion")].isNull() && m_key_version_isValid;

    m_msi_resource_id_isValid = ::OpenAPI::fromJsonValue(m_msi_resource_id, json[QString("msiResourceId")]);
    m_msi_resource_id_isSet = !json[QString("msiResourceId")].isNull() && m_msi_resource_id_isValid;

    m_vault_uri_isValid = ::OpenAPI::fromJsonValue(m_vault_uri, json[QString("vaultUri")]);
    m_vault_uri_isSet = !json[QString("vaultUri")].isNull() && m_vault_uri_isValid;
}

QString OAIDiskEncryptionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskEncryptionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_algorithm_isSet) {
        obj.insert(QString("encryptionAlgorithm"), ::OpenAPI::toJsonValue(m_encryption_algorithm));
    }
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_key_version_isSet) {
        obj.insert(QString("keyVersion"), ::OpenAPI::toJsonValue(m_key_version));
    }
    if (m_msi_resource_id_isSet) {
        obj.insert(QString("msiResourceId"), ::OpenAPI::toJsonValue(m_msi_resource_id));
    }
    if (m_vault_uri_isSet) {
        obj.insert(QString("vaultUri"), ::OpenAPI::toJsonValue(m_vault_uri));
    }
    return obj;
}

QString OAIDiskEncryptionProperties::getEncryptionAlgorithm() const {
    return m_encryption_algorithm;
}
void OAIDiskEncryptionProperties::setEncryptionAlgorithm(const QString &encryption_algorithm) {
    m_encryption_algorithm = encryption_algorithm;
    m_encryption_algorithm_isSet = true;
}

bool OAIDiskEncryptionProperties::is_encryption_algorithm_Set() const{
    return m_encryption_algorithm_isSet;
}

bool OAIDiskEncryptionProperties::is_encryption_algorithm_Valid() const{
    return m_encryption_algorithm_isValid;
}

QString OAIDiskEncryptionProperties::getKeyName() const {
    return m_key_name;
}
void OAIDiskEncryptionProperties::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAIDiskEncryptionProperties::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAIDiskEncryptionProperties::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QString OAIDiskEncryptionProperties::getKeyVersion() const {
    return m_key_version;
}
void OAIDiskEncryptionProperties::setKeyVersion(const QString &key_version) {
    m_key_version = key_version;
    m_key_version_isSet = true;
}

bool OAIDiskEncryptionProperties::is_key_version_Set() const{
    return m_key_version_isSet;
}

bool OAIDiskEncryptionProperties::is_key_version_Valid() const{
    return m_key_version_isValid;
}

QString OAIDiskEncryptionProperties::getMsiResourceId() const {
    return m_msi_resource_id;
}
void OAIDiskEncryptionProperties::setMsiResourceId(const QString &msi_resource_id) {
    m_msi_resource_id = msi_resource_id;
    m_msi_resource_id_isSet = true;
}

bool OAIDiskEncryptionProperties::is_msi_resource_id_Set() const{
    return m_msi_resource_id_isSet;
}

bool OAIDiskEncryptionProperties::is_msi_resource_id_Valid() const{
    return m_msi_resource_id_isValid;
}

QString OAIDiskEncryptionProperties::getVaultUri() const {
    return m_vault_uri;
}
void OAIDiskEncryptionProperties::setVaultUri(const QString &vault_uri) {
    m_vault_uri = vault_uri;
    m_vault_uri_isSet = true;
}

bool OAIDiskEncryptionProperties::is_vault_uri_Set() const{
    return m_vault_uri_isSet;
}

bool OAIDiskEncryptionProperties::is_vault_uri_Valid() const{
    return m_vault_uri_isValid;
}

bool OAIDiskEncryptionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msi_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskEncryptionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
