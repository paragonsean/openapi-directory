/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Autoscale;
import org.openapitools.client.model.DataDisksGroups;
import org.openapitools.client.model.HardwareProfile;
import org.openapitools.client.model.OsProfile;
import org.openapitools.client.model.RoleScriptActionsInner;
import org.openapitools.client.model.VirtualNetworkProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a role on the cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:50.727365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Role {
  public static final String SERIALIZED_NAME_AUTOSCALE = "autoscale";
  @SerializedName(SERIALIZED_NAME_AUTOSCALE)
  private Autoscale autoscale;

  public static final String SERIALIZED_NAME_DATA_DISKS_GROUPS = "dataDisksGroups";
  @SerializedName(SERIALIZED_NAME_DATA_DISKS_GROUPS)
  private List<DataDisksGroups> dataDisksGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_HARDWARE_PROFILE = "hardwareProfile";
  @SerializedName(SERIALIZED_NAME_HARDWARE_PROFILE)
  private HardwareProfile hardwareProfile;

  public static final String SERIALIZED_NAME_MIN_INSTANCE_COUNT = "minInstanceCount";
  @SerializedName(SERIALIZED_NAME_MIN_INSTANCE_COUNT)
  private Integer minInstanceCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_PROFILE = "osProfile";
  @SerializedName(SERIALIZED_NAME_OS_PROFILE)
  private OsProfile osProfile;

  public static final String SERIALIZED_NAME_SCRIPT_ACTIONS = "scriptActions";
  @SerializedName(SERIALIZED_NAME_SCRIPT_ACTIONS)
  private List<RoleScriptActionsInner> scriptActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_INSTANCE_COUNT = "targetInstanceCount";
  @SerializedName(SERIALIZED_NAME_TARGET_INSTANCE_COUNT)
  private Integer targetInstanceCount;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_PROFILE = "virtualNetworkProfile";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_PROFILE)
  private VirtualNetworkProfile virtualNetworkProfile;

  public Role() {
  }

  public Role autoscale(Autoscale autoscale) {
    this.autoscale = autoscale;
    return this;
  }

  /**
   * Get autoscale
   * @return autoscale
   */
  @javax.annotation.Nullable
  public Autoscale getAutoscale() {
    return autoscale;
  }

  public void setAutoscale(Autoscale autoscale) {
    this.autoscale = autoscale;
  }


  public Role dataDisksGroups(List<DataDisksGroups> dataDisksGroups) {
    this.dataDisksGroups = dataDisksGroups;
    return this;
  }

  public Role addDataDisksGroupsItem(DataDisksGroups dataDisksGroupsItem) {
    if (this.dataDisksGroups == null) {
      this.dataDisksGroups = new ArrayList<>();
    }
    this.dataDisksGroups.add(dataDisksGroupsItem);
    return this;
  }

  /**
   * The data disks groups for the role.
   * @return dataDisksGroups
   */
  @javax.annotation.Nullable
  public List<DataDisksGroups> getDataDisksGroups() {
    return dataDisksGroups;
  }

  public void setDataDisksGroups(List<DataDisksGroups> dataDisksGroups) {
    this.dataDisksGroups = dataDisksGroups;
  }


  public Role hardwareProfile(HardwareProfile hardwareProfile) {
    this.hardwareProfile = hardwareProfile;
    return this;
  }

  /**
   * Get hardwareProfile
   * @return hardwareProfile
   */
  @javax.annotation.Nullable
  public HardwareProfile getHardwareProfile() {
    return hardwareProfile;
  }

  public void setHardwareProfile(HardwareProfile hardwareProfile) {
    this.hardwareProfile = hardwareProfile;
  }


  public Role minInstanceCount(Integer minInstanceCount) {
    this.minInstanceCount = minInstanceCount;
    return this;
  }

  /**
   * The minimum instance count of the cluster.
   * @return minInstanceCount
   */
  @javax.annotation.Nullable
  public Integer getMinInstanceCount() {
    return minInstanceCount;
  }

  public void setMinInstanceCount(Integer minInstanceCount) {
    this.minInstanceCount = minInstanceCount;
  }


  public Role name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the role.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Role osProfile(OsProfile osProfile) {
    this.osProfile = osProfile;
    return this;
  }

  /**
   * Get osProfile
   * @return osProfile
   */
  @javax.annotation.Nullable
  public OsProfile getOsProfile() {
    return osProfile;
  }

  public void setOsProfile(OsProfile osProfile) {
    this.osProfile = osProfile;
  }


  public Role scriptActions(List<RoleScriptActionsInner> scriptActions) {
    this.scriptActions = scriptActions;
    return this;
  }

  public Role addScriptActionsItem(RoleScriptActionsInner scriptActionsItem) {
    if (this.scriptActions == null) {
      this.scriptActions = new ArrayList<>();
    }
    this.scriptActions.add(scriptActionsItem);
    return this;
  }

  /**
   * The list of script actions on the role.
   * @return scriptActions
   */
  @javax.annotation.Nullable
  public List<RoleScriptActionsInner> getScriptActions() {
    return scriptActions;
  }

  public void setScriptActions(List<RoleScriptActionsInner> scriptActions) {
    this.scriptActions = scriptActions;
  }


  public Role targetInstanceCount(Integer targetInstanceCount) {
    this.targetInstanceCount = targetInstanceCount;
    return this;
  }

  /**
   * The instance count of the cluster.
   * @return targetInstanceCount
   */
  @javax.annotation.Nullable
  public Integer getTargetInstanceCount() {
    return targetInstanceCount;
  }

  public void setTargetInstanceCount(Integer targetInstanceCount) {
    this.targetInstanceCount = targetInstanceCount;
  }


  public Role virtualNetworkProfile(VirtualNetworkProfile virtualNetworkProfile) {
    this.virtualNetworkProfile = virtualNetworkProfile;
    return this;
  }

  /**
   * Get virtualNetworkProfile
   * @return virtualNetworkProfile
   */
  @javax.annotation.Nullable
  public VirtualNetworkProfile getVirtualNetworkProfile() {
    return virtualNetworkProfile;
  }

  public void setVirtualNetworkProfile(VirtualNetworkProfile virtualNetworkProfile) {
    this.virtualNetworkProfile = virtualNetworkProfile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Role role = (Role) o;
    return Objects.equals(this.autoscale, role.autoscale) &&
        Objects.equals(this.dataDisksGroups, role.dataDisksGroups) &&
        Objects.equals(this.hardwareProfile, role.hardwareProfile) &&
        Objects.equals(this.minInstanceCount, role.minInstanceCount) &&
        Objects.equals(this.name, role.name) &&
        Objects.equals(this.osProfile, role.osProfile) &&
        Objects.equals(this.scriptActions, role.scriptActions) &&
        Objects.equals(this.targetInstanceCount, role.targetInstanceCount) &&
        Objects.equals(this.virtualNetworkProfile, role.virtualNetworkProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoscale, dataDisksGroups, hardwareProfile, minInstanceCount, name, osProfile, scriptActions, targetInstanceCount, virtualNetworkProfile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Role {\n");
    sb.append("    autoscale: ").append(toIndentedString(autoscale)).append("\n");
    sb.append("    dataDisksGroups: ").append(toIndentedString(dataDisksGroups)).append("\n");
    sb.append("    hardwareProfile: ").append(toIndentedString(hardwareProfile)).append("\n");
    sb.append("    minInstanceCount: ").append(toIndentedString(minInstanceCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osProfile: ").append(toIndentedString(osProfile)).append("\n");
    sb.append("    scriptActions: ").append(toIndentedString(scriptActions)).append("\n");
    sb.append("    targetInstanceCount: ").append(toIndentedString(targetInstanceCount)).append("\n");
    sb.append("    virtualNetworkProfile: ").append(toIndentedString(virtualNetworkProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoscale");
    openapiFields.add("dataDisksGroups");
    openapiFields.add("hardwareProfile");
    openapiFields.add("minInstanceCount");
    openapiFields.add("name");
    openapiFields.add("osProfile");
    openapiFields.add("scriptActions");
    openapiFields.add("targetInstanceCount");
    openapiFields.add("virtualNetworkProfile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Role
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Role.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Role is not found in the empty JSON string", Role.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Role.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Role` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoscale`
      if (jsonObj.get("autoscale") != null && !jsonObj.get("autoscale").isJsonNull()) {
        Autoscale.validateJsonElement(jsonObj.get("autoscale"));
      }
      if (jsonObj.get("dataDisksGroups") != null && !jsonObj.get("dataDisksGroups").isJsonNull()) {
        JsonArray jsonArraydataDisksGroups = jsonObj.getAsJsonArray("dataDisksGroups");
        if (jsonArraydataDisksGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataDisksGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataDisksGroups` to be an array in the JSON string but got `%s`", jsonObj.get("dataDisksGroups").toString()));
          }

          // validate the optional field `dataDisksGroups` (array)
          for (int i = 0; i < jsonArraydataDisksGroups.size(); i++) {
            DataDisksGroups.validateJsonElement(jsonArraydataDisksGroups.get(i));
          };
        }
      }
      // validate the optional field `hardwareProfile`
      if (jsonObj.get("hardwareProfile") != null && !jsonObj.get("hardwareProfile").isJsonNull()) {
        HardwareProfile.validateJsonElement(jsonObj.get("hardwareProfile"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `osProfile`
      if (jsonObj.get("osProfile") != null && !jsonObj.get("osProfile").isJsonNull()) {
        OsProfile.validateJsonElement(jsonObj.get("osProfile"));
      }
      if (jsonObj.get("scriptActions") != null && !jsonObj.get("scriptActions").isJsonNull()) {
        JsonArray jsonArrayscriptActions = jsonObj.getAsJsonArray("scriptActions");
        if (jsonArrayscriptActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scriptActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scriptActions` to be an array in the JSON string but got `%s`", jsonObj.get("scriptActions").toString()));
          }

          // validate the optional field `scriptActions` (array)
          for (int i = 0; i < jsonArrayscriptActions.size(); i++) {
            RoleScriptActionsInner.validateJsonElement(jsonArrayscriptActions.get(i));
          };
        }
      }
      // validate the optional field `virtualNetworkProfile`
      if (jsonObj.get("virtualNetworkProfile") != null && !jsonObj.get("virtualNetworkProfile").isJsonNull()) {
        VirtualNetworkProfile.validateJsonElement(jsonObj.get("virtualNetworkProfile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Role.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Role' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Role> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Role.class));

       return (TypeAdapter<T>) new TypeAdapter<Role>() {
           @Override
           public void write(JsonWriter out, Role value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Role read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Role given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Role
   * @throws IOException if the JSON string is invalid with respect to Role
   */
  public static Role fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Role.class);
  }

  /**
   * Convert an instance of Role to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

