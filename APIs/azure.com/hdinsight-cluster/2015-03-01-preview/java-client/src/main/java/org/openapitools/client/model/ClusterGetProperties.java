/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClusterDefinition;
import org.openapitools.client.model.ComputeProfile;
import org.openapitools.client.model.ConnectivityEndpoint;
import org.openapitools.client.model.DiskEncryptionProperties;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.KafkaRestProperties;
import org.openapitools.client.model.QuotaInfo;
import org.openapitools.client.model.SecurityProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:50.727365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterGetProperties {
  public static final String SERIALIZED_NAME_CLUSTER_DEFINITION = "clusterDefinition";
  @SerializedName(SERIALIZED_NAME_CLUSTER_DEFINITION)
  private ClusterDefinition clusterDefinition;

  public static final String SERIALIZED_NAME_CLUSTER_STATE = "clusterState";
  @SerializedName(SERIALIZED_NAME_CLUSTER_STATE)
  private String clusterState;

  public static final String SERIALIZED_NAME_CLUSTER_VERSION = "clusterVersion";
  @SerializedName(SERIALIZED_NAME_CLUSTER_VERSION)
  private String clusterVersion;

  public static final String SERIALIZED_NAME_COMPUTE_PROFILE = "computeProfile";
  @SerializedName(SERIALIZED_NAME_COMPUTE_PROFILE)
  private ComputeProfile computeProfile;

  public static final String SERIALIZED_NAME_CONNECTIVITY_ENDPOINTS = "connectivityEndpoints";
  @SerializedName(SERIALIZED_NAME_CONNECTIVITY_ENDPOINTS)
  private List<ConnectivityEndpoint> connectivityEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_DISK_ENCRYPTION_PROPERTIES = "diskEncryptionProperties";
  @SerializedName(SERIALIZED_NAME_DISK_ENCRYPTION_PROPERTIES)
  private DiskEncryptionProperties diskEncryptionProperties;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Errors> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_KAFKA_REST_PROPERTIES = "kafkaRestProperties";
  @SerializedName(SERIALIZED_NAME_KAFKA_REST_PROPERTIES)
  private KafkaRestProperties kafkaRestProperties;

  /**
   * The type of operating system.
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  /**
   * The provisioning state, which only appears in the response.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    IN_PROGRESS("InProgress"),
    
    FAILED("Failed"),
    
    SUCCEEDED("Succeeded"),
    
    CANCELED("Canceled"),
    
    DELETING("Deleting");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_QUOTA_INFO = "quotaInfo";
  @SerializedName(SERIALIZED_NAME_QUOTA_INFO)
  private QuotaInfo quotaInfo;

  public static final String SERIALIZED_NAME_SECURITY_PROFILE = "securityProfile";
  @SerializedName(SERIALIZED_NAME_SECURITY_PROFILE)
  private SecurityProfile securityProfile;

  /**
   * The cluster tier.
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    STANDARD("Standard"),
    
    PREMIUM("Premium");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  public ClusterGetProperties() {
  }

  public ClusterGetProperties clusterDefinition(ClusterDefinition clusterDefinition) {
    this.clusterDefinition = clusterDefinition;
    return this;
  }

  /**
   * Get clusterDefinition
   * @return clusterDefinition
   */
  @javax.annotation.Nonnull
  public ClusterDefinition getClusterDefinition() {
    return clusterDefinition;
  }

  public void setClusterDefinition(ClusterDefinition clusterDefinition) {
    this.clusterDefinition = clusterDefinition;
  }


  public ClusterGetProperties clusterState(String clusterState) {
    this.clusterState = clusterState;
    return this;
  }

  /**
   * The state of the cluster.
   * @return clusterState
   */
  @javax.annotation.Nullable
  public String getClusterState() {
    return clusterState;
  }

  public void setClusterState(String clusterState) {
    this.clusterState = clusterState;
  }


  public ClusterGetProperties clusterVersion(String clusterVersion) {
    this.clusterVersion = clusterVersion;
    return this;
  }

  /**
   * The version of the cluster.
   * @return clusterVersion
   */
  @javax.annotation.Nullable
  public String getClusterVersion() {
    return clusterVersion;
  }

  public void setClusterVersion(String clusterVersion) {
    this.clusterVersion = clusterVersion;
  }


  public ClusterGetProperties computeProfile(ComputeProfile computeProfile) {
    this.computeProfile = computeProfile;
    return this;
  }

  /**
   * Get computeProfile
   * @return computeProfile
   */
  @javax.annotation.Nullable
  public ComputeProfile getComputeProfile() {
    return computeProfile;
  }

  public void setComputeProfile(ComputeProfile computeProfile) {
    this.computeProfile = computeProfile;
  }


  public ClusterGetProperties connectivityEndpoints(List<ConnectivityEndpoint> connectivityEndpoints) {
    this.connectivityEndpoints = connectivityEndpoints;
    return this;
  }

  public ClusterGetProperties addConnectivityEndpointsItem(ConnectivityEndpoint connectivityEndpointsItem) {
    if (this.connectivityEndpoints == null) {
      this.connectivityEndpoints = new ArrayList<>();
    }
    this.connectivityEndpoints.add(connectivityEndpointsItem);
    return this;
  }

  /**
   * The list of connectivity endpoints.
   * @return connectivityEndpoints
   */
  @javax.annotation.Nullable
  public List<ConnectivityEndpoint> getConnectivityEndpoints() {
    return connectivityEndpoints;
  }

  public void setConnectivityEndpoints(List<ConnectivityEndpoint> connectivityEndpoints) {
    this.connectivityEndpoints = connectivityEndpoints;
  }


  public ClusterGetProperties createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date on which the cluster was created.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public ClusterGetProperties diskEncryptionProperties(DiskEncryptionProperties diskEncryptionProperties) {
    this.diskEncryptionProperties = diskEncryptionProperties;
    return this;
  }

  /**
   * Get diskEncryptionProperties
   * @return diskEncryptionProperties
   */
  @javax.annotation.Nullable
  public DiskEncryptionProperties getDiskEncryptionProperties() {
    return diskEncryptionProperties;
  }

  public void setDiskEncryptionProperties(DiskEncryptionProperties diskEncryptionProperties) {
    this.diskEncryptionProperties = diskEncryptionProperties;
  }


  public ClusterGetProperties errors(List<Errors> errors) {
    this.errors = errors;
    return this;
  }

  public ClusterGetProperties addErrorsItem(Errors errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * The list of errors.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Errors> getErrors() {
    return errors;
  }

  public void setErrors(List<Errors> errors) {
    this.errors = errors;
  }


  public ClusterGetProperties kafkaRestProperties(KafkaRestProperties kafkaRestProperties) {
    this.kafkaRestProperties = kafkaRestProperties;
    return this;
  }

  /**
   * Get kafkaRestProperties
   * @return kafkaRestProperties
   */
  @javax.annotation.Nullable
  public KafkaRestProperties getKafkaRestProperties() {
    return kafkaRestProperties;
  }

  public void setKafkaRestProperties(KafkaRestProperties kafkaRestProperties) {
    this.kafkaRestProperties = kafkaRestProperties;
  }


  public ClusterGetProperties osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The type of operating system.
   * @return osType
   */
  @javax.annotation.Nullable
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public ClusterGetProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state, which only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ClusterGetProperties quotaInfo(QuotaInfo quotaInfo) {
    this.quotaInfo = quotaInfo;
    return this;
  }

  /**
   * Get quotaInfo
   * @return quotaInfo
   */
  @javax.annotation.Nullable
  public QuotaInfo getQuotaInfo() {
    return quotaInfo;
  }

  public void setQuotaInfo(QuotaInfo quotaInfo) {
    this.quotaInfo = quotaInfo;
  }


  public ClusterGetProperties securityProfile(SecurityProfile securityProfile) {
    this.securityProfile = securityProfile;
    return this;
  }

  /**
   * Get securityProfile
   * @return securityProfile
   */
  @javax.annotation.Nullable
  public SecurityProfile getSecurityProfile() {
    return securityProfile;
  }

  public void setSecurityProfile(SecurityProfile securityProfile) {
    this.securityProfile = securityProfile;
  }


  public ClusterGetProperties tier(TierEnum tier) {
    this.tier = tier;
    return this;
  }

  /**
   * The cluster tier.
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }

  public void setTier(TierEnum tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterGetProperties clusterGetProperties = (ClusterGetProperties) o;
    return Objects.equals(this.clusterDefinition, clusterGetProperties.clusterDefinition) &&
        Objects.equals(this.clusterState, clusterGetProperties.clusterState) &&
        Objects.equals(this.clusterVersion, clusterGetProperties.clusterVersion) &&
        Objects.equals(this.computeProfile, clusterGetProperties.computeProfile) &&
        Objects.equals(this.connectivityEndpoints, clusterGetProperties.connectivityEndpoints) &&
        Objects.equals(this.createdDate, clusterGetProperties.createdDate) &&
        Objects.equals(this.diskEncryptionProperties, clusterGetProperties.diskEncryptionProperties) &&
        Objects.equals(this.errors, clusterGetProperties.errors) &&
        Objects.equals(this.kafkaRestProperties, clusterGetProperties.kafkaRestProperties) &&
        Objects.equals(this.osType, clusterGetProperties.osType) &&
        Objects.equals(this.provisioningState, clusterGetProperties.provisioningState) &&
        Objects.equals(this.quotaInfo, clusterGetProperties.quotaInfo) &&
        Objects.equals(this.securityProfile, clusterGetProperties.securityProfile) &&
        Objects.equals(this.tier, clusterGetProperties.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterDefinition, clusterState, clusterVersion, computeProfile, connectivityEndpoints, createdDate, diskEncryptionProperties, errors, kafkaRestProperties, osType, provisioningState, quotaInfo, securityProfile, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterGetProperties {\n");
    sb.append("    clusterDefinition: ").append(toIndentedString(clusterDefinition)).append("\n");
    sb.append("    clusterState: ").append(toIndentedString(clusterState)).append("\n");
    sb.append("    clusterVersion: ").append(toIndentedString(clusterVersion)).append("\n");
    sb.append("    computeProfile: ").append(toIndentedString(computeProfile)).append("\n");
    sb.append("    connectivityEndpoints: ").append(toIndentedString(connectivityEndpoints)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    diskEncryptionProperties: ").append(toIndentedString(diskEncryptionProperties)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    kafkaRestProperties: ").append(toIndentedString(kafkaRestProperties)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    quotaInfo: ").append(toIndentedString(quotaInfo)).append("\n");
    sb.append("    securityProfile: ").append(toIndentedString(securityProfile)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterDefinition");
    openapiFields.add("clusterState");
    openapiFields.add("clusterVersion");
    openapiFields.add("computeProfile");
    openapiFields.add("connectivityEndpoints");
    openapiFields.add("createdDate");
    openapiFields.add("diskEncryptionProperties");
    openapiFields.add("errors");
    openapiFields.add("kafkaRestProperties");
    openapiFields.add("osType");
    openapiFields.add("provisioningState");
    openapiFields.add("quotaInfo");
    openapiFields.add("securityProfile");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clusterDefinition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterGetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterGetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterGetProperties is not found in the empty JSON string", ClusterGetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterGetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterGetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClusterGetProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `clusterDefinition`
      ClusterDefinition.validateJsonElement(jsonObj.get("clusterDefinition"));
      if ((jsonObj.get("clusterState") != null && !jsonObj.get("clusterState").isJsonNull()) && !jsonObj.get("clusterState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterState").toString()));
      }
      if ((jsonObj.get("clusterVersion") != null && !jsonObj.get("clusterVersion").isJsonNull()) && !jsonObj.get("clusterVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterVersion").toString()));
      }
      // validate the optional field `computeProfile`
      if (jsonObj.get("computeProfile") != null && !jsonObj.get("computeProfile").isJsonNull()) {
        ComputeProfile.validateJsonElement(jsonObj.get("computeProfile"));
      }
      if (jsonObj.get("connectivityEndpoints") != null && !jsonObj.get("connectivityEndpoints").isJsonNull()) {
        JsonArray jsonArrayconnectivityEndpoints = jsonObj.getAsJsonArray("connectivityEndpoints");
        if (jsonArrayconnectivityEndpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectivityEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connectivityEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("connectivityEndpoints").toString()));
          }

          // validate the optional field `connectivityEndpoints` (array)
          for (int i = 0; i < jsonArrayconnectivityEndpoints.size(); i++) {
            ConnectivityEndpoint.validateJsonElement(jsonArrayconnectivityEndpoints.get(i));
          };
        }
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      // validate the optional field `diskEncryptionProperties`
      if (jsonObj.get("diskEncryptionProperties") != null && !jsonObj.get("diskEncryptionProperties").isJsonNull()) {
        DiskEncryptionProperties.validateJsonElement(jsonObj.get("diskEncryptionProperties"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Errors.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      // validate the optional field `kafkaRestProperties`
      if (jsonObj.get("kafkaRestProperties") != null && !jsonObj.get("kafkaRestProperties").isJsonNull()) {
        KafkaRestProperties.validateJsonElement(jsonObj.get("kafkaRestProperties"));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the optional field `osType`
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) {
        OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `quotaInfo`
      if (jsonObj.get("quotaInfo") != null && !jsonObj.get("quotaInfo").isJsonNull()) {
        QuotaInfo.validateJsonElement(jsonObj.get("quotaInfo"));
      }
      // validate the optional field `securityProfile`
      if (jsonObj.get("securityProfile") != null && !jsonObj.get("securityProfile").isJsonNull()) {
        SecurityProfile.validateJsonElement(jsonObj.get("securityProfile"));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterGetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterGetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterGetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterGetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterGetProperties>() {
           @Override
           public void write(JsonWriter out, ClusterGetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterGetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterGetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterGetProperties
   * @throws IOException if the JSON string is invalid with respect to ClusterGetProperties
   */
  public static ClusterGetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterGetProperties.class);
  }

  /**
   * Convert an instance of ClusterGetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

