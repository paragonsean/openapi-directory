/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The disk encryption properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:50.727365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiskEncryptionProperties {
  /**
   * Algorithm identifier for encryption, default RSA-OAEP.
   */
  @JsonAdapter(EncryptionAlgorithmEnum.Adapter.class)
  public enum EncryptionAlgorithmEnum {
    RSA_OAEP("RSA-OAEP"),
    
    RSA_OAEP_256("RSA-OAEP-256"),
    
    RSA1_5("RSA1_5");

    private String value;

    EncryptionAlgorithmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncryptionAlgorithmEnum fromValue(String value) {
      for (EncryptionAlgorithmEnum b : EncryptionAlgorithmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncryptionAlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncryptionAlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncryptionAlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncryptionAlgorithmEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncryptionAlgorithmEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCRYPTION_ALGORITHM = "encryptionAlgorithm";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ALGORITHM)
  private EncryptionAlgorithmEnum encryptionAlgorithm;

  public static final String SERIALIZED_NAME_KEY_NAME = "keyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_KEY_VERSION = "keyVersion";
  @SerializedName(SERIALIZED_NAME_KEY_VERSION)
  private String keyVersion;

  public static final String SERIALIZED_NAME_MSI_RESOURCE_ID = "msiResourceId";
  @SerializedName(SERIALIZED_NAME_MSI_RESOURCE_ID)
  private String msiResourceId;

  public static final String SERIALIZED_NAME_VAULT_URI = "vaultUri";
  @SerializedName(SERIALIZED_NAME_VAULT_URI)
  private String vaultUri;

  public DiskEncryptionProperties() {
  }

  public DiskEncryptionProperties encryptionAlgorithm(EncryptionAlgorithmEnum encryptionAlgorithm) {
    this.encryptionAlgorithm = encryptionAlgorithm;
    return this;
  }

  /**
   * Algorithm identifier for encryption, default RSA-OAEP.
   * @return encryptionAlgorithm
   */
  @javax.annotation.Nullable
  public EncryptionAlgorithmEnum getEncryptionAlgorithm() {
    return encryptionAlgorithm;
  }

  public void setEncryptionAlgorithm(EncryptionAlgorithmEnum encryptionAlgorithm) {
    this.encryptionAlgorithm = encryptionAlgorithm;
  }


  public DiskEncryptionProperties keyName(String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * Key name that is used for enabling disk encryption.
   * @return keyName
   */
  @javax.annotation.Nullable
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public DiskEncryptionProperties keyVersion(String keyVersion) {
    this.keyVersion = keyVersion;
    return this;
  }

  /**
   * Specific key version that is used for enabling disk encryption.
   * @return keyVersion
   */
  @javax.annotation.Nullable
  public String getKeyVersion() {
    return keyVersion;
  }

  public void setKeyVersion(String keyVersion) {
    this.keyVersion = keyVersion;
  }


  public DiskEncryptionProperties msiResourceId(String msiResourceId) {
    this.msiResourceId = msiResourceId;
    return this;
  }

  /**
   * Resource ID of Managed Identity that is used to access the key vault.
   * @return msiResourceId
   */
  @javax.annotation.Nullable
  public String getMsiResourceId() {
    return msiResourceId;
  }

  public void setMsiResourceId(String msiResourceId) {
    this.msiResourceId = msiResourceId;
  }


  public DiskEncryptionProperties vaultUri(String vaultUri) {
    this.vaultUri = vaultUri;
    return this;
  }

  /**
   * Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net
   * @return vaultUri
   */
  @javax.annotation.Nullable
  public String getVaultUri() {
    return vaultUri;
  }

  public void setVaultUri(String vaultUri) {
    this.vaultUri = vaultUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskEncryptionProperties diskEncryptionProperties = (DiskEncryptionProperties) o;
    return Objects.equals(this.encryptionAlgorithm, diskEncryptionProperties.encryptionAlgorithm) &&
        Objects.equals(this.keyName, diskEncryptionProperties.keyName) &&
        Objects.equals(this.keyVersion, diskEncryptionProperties.keyVersion) &&
        Objects.equals(this.msiResourceId, diskEncryptionProperties.msiResourceId) &&
        Objects.equals(this.vaultUri, diskEncryptionProperties.vaultUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionAlgorithm, keyName, keyVersion, msiResourceId, vaultUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskEncryptionProperties {\n");
    sb.append("    encryptionAlgorithm: ").append(toIndentedString(encryptionAlgorithm)).append("\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    keyVersion: ").append(toIndentedString(keyVersion)).append("\n");
    sb.append("    msiResourceId: ").append(toIndentedString(msiResourceId)).append("\n");
    sb.append("    vaultUri: ").append(toIndentedString(vaultUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptionAlgorithm");
    openapiFields.add("keyName");
    openapiFields.add("keyVersion");
    openapiFields.add("msiResourceId");
    openapiFields.add("vaultUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiskEncryptionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiskEncryptionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiskEncryptionProperties is not found in the empty JSON string", DiskEncryptionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiskEncryptionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiskEncryptionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encryptionAlgorithm") != null && !jsonObj.get("encryptionAlgorithm").isJsonNull()) && !jsonObj.get("encryptionAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionAlgorithm").toString()));
      }
      // validate the optional field `encryptionAlgorithm`
      if (jsonObj.get("encryptionAlgorithm") != null && !jsonObj.get("encryptionAlgorithm").isJsonNull()) {
        EncryptionAlgorithmEnum.validateJsonElement(jsonObj.get("encryptionAlgorithm"));
      }
      if ((jsonObj.get("keyName") != null && !jsonObj.get("keyName").isJsonNull()) && !jsonObj.get("keyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyName").toString()));
      }
      if ((jsonObj.get("keyVersion") != null && !jsonObj.get("keyVersion").isJsonNull()) && !jsonObj.get("keyVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyVersion").toString()));
      }
      if ((jsonObj.get("msiResourceId") != null && !jsonObj.get("msiResourceId").isJsonNull()) && !jsonObj.get("msiResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msiResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msiResourceId").toString()));
      }
      if ((jsonObj.get("vaultUri") != null && !jsonObj.get("vaultUri").isJsonNull()) && !jsonObj.get("vaultUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiskEncryptionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiskEncryptionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiskEncryptionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiskEncryptionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DiskEncryptionProperties>() {
           @Override
           public void write(JsonWriter out, DiskEncryptionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiskEncryptionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiskEncryptionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiskEncryptionProperties
   * @throws IOException if the JSON string is invalid with respect to DiskEncryptionProperties
   */
  public static DiskEncryptionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiskEncryptionProperties.class);
  }

  /**
   * Convert an instance of DiskEncryptionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

