/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data disks groups for the role.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:50.727365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataDisksGroups {
  public static final String SERIALIZED_NAME_DISK_SIZE_G_B = "diskSizeGB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_G_B)
  private Integer diskSizeGB;

  public static final String SERIALIZED_NAME_DISKS_PER_NODE = "disksPerNode";
  @SerializedName(SERIALIZED_NAME_DISKS_PER_NODE)
  private Integer disksPerNode;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_TYPE = "storageAccountType";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_TYPE)
  private String storageAccountType;

  public DataDisksGroups() {
  }

  public DataDisksGroups(
     Integer diskSizeGB, 
     String storageAccountType
  ) {
    this();
    this.diskSizeGB = diskSizeGB;
    this.storageAccountType = storageAccountType;
  }

  /**
   * ReadOnly. The DiskSize in GB. Do not set this value.
   * @return diskSizeGB
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeGB() {
    return diskSizeGB;
  }



  public DataDisksGroups disksPerNode(Integer disksPerNode) {
    this.disksPerNode = disksPerNode;
    return this;
  }

  /**
   * The number of disks per node.
   * @return disksPerNode
   */
  @javax.annotation.Nullable
  public Integer getDisksPerNode() {
    return disksPerNode;
  }

  public void setDisksPerNode(Integer disksPerNode) {
    this.disksPerNode = disksPerNode;
  }


  /**
   * ReadOnly. The storage account type. Do not set this value.
   * @return storageAccountType
   */
  @javax.annotation.Nullable
  public String getStorageAccountType() {
    return storageAccountType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataDisksGroups dataDisksGroups = (DataDisksGroups) o;
    return Objects.equals(this.diskSizeGB, dataDisksGroups.diskSizeGB) &&
        Objects.equals(this.disksPerNode, dataDisksGroups.disksPerNode) &&
        Objects.equals(this.storageAccountType, dataDisksGroups.storageAccountType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskSizeGB, disksPerNode, storageAccountType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataDisksGroups {\n");
    sb.append("    diskSizeGB: ").append(toIndentedString(diskSizeGB)).append("\n");
    sb.append("    disksPerNode: ").append(toIndentedString(disksPerNode)).append("\n");
    sb.append("    storageAccountType: ").append(toIndentedString(storageAccountType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskSizeGB");
    openapiFields.add("disksPerNode");
    openapiFields.add("storageAccountType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataDisksGroups
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataDisksGroups.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataDisksGroups is not found in the empty JSON string", DataDisksGroups.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataDisksGroups.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataDisksGroups` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("storageAccountType") != null && !jsonObj.get("storageAccountType").isJsonNull()) && !jsonObj.get("storageAccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataDisksGroups.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataDisksGroups' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataDisksGroups> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataDisksGroups.class));

       return (TypeAdapter<T>) new TypeAdapter<DataDisksGroups>() {
           @Override
           public void write(JsonWriter out, DataDisksGroups value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataDisksGroups read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataDisksGroups given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataDisksGroups
   * @throws IOException if the JSON string is invalid with respect to DataDisksGroups
   */
  public static DataDisksGroups fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataDisksGroups.class);
  }

  /**
   * Convert an instance of DataDisksGroups to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

