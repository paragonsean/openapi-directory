/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The cluster definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:50.727365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterDefinition {
  public static final String SERIALIZED_NAME_BLUEPRINT = "blueprint";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT)
  private String blueprint;

  public static final String SERIALIZED_NAME_COMPONENT_VERSION = "componentVersion";
  @SerializedName(SERIALIZED_NAME_COMPONENT_VERSION)
  private Map<String, String> componentVersion = new HashMap<>();

  public static final String SERIALIZED_NAME_CONFIGURATIONS = "configurations";
  @SerializedName(SERIALIZED_NAME_CONFIGURATIONS)
  private Object configurations;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public ClusterDefinition() {
  }

  public ClusterDefinition blueprint(String blueprint) {
    this.blueprint = blueprint;
    return this;
  }

  /**
   * The link to the blueprint.
   * @return blueprint
   */
  @javax.annotation.Nullable
  public String getBlueprint() {
    return blueprint;
  }

  public void setBlueprint(String blueprint) {
    this.blueprint = blueprint;
  }


  public ClusterDefinition componentVersion(Map<String, String> componentVersion) {
    this.componentVersion = componentVersion;
    return this;
  }

  public ClusterDefinition putComponentVersionItem(String key, String componentVersionItem) {
    if (this.componentVersion == null) {
      this.componentVersion = new HashMap<>();
    }
    this.componentVersion.put(key, componentVersionItem);
    return this;
  }

  /**
   * The versions of different services in the cluster.
   * @return componentVersion
   */
  @javax.annotation.Nullable
  public Map<String, String> getComponentVersion() {
    return componentVersion;
  }

  public void setComponentVersion(Map<String, String> componentVersion) {
    this.componentVersion = componentVersion;
  }


  public ClusterDefinition configurations(Object configurations) {
    this.configurations = configurations;
    return this;
  }

  /**
   * The cluster configurations.
   * @return configurations
   */
  @javax.annotation.Nullable
  public Object getConfigurations() {
    return configurations;
  }

  public void setConfigurations(Object configurations) {
    this.configurations = configurations;
  }


  public ClusterDefinition kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The type of cluster.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterDefinition clusterDefinition = (ClusterDefinition) o;
    return Objects.equals(this.blueprint, clusterDefinition.blueprint) &&
        Objects.equals(this.componentVersion, clusterDefinition.componentVersion) &&
        Objects.equals(this.configurations, clusterDefinition.configurations) &&
        Objects.equals(this.kind, clusterDefinition.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueprint, componentVersion, configurations, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterDefinition {\n");
    sb.append("    blueprint: ").append(toIndentedString(blueprint)).append("\n");
    sb.append("    componentVersion: ").append(toIndentedString(componentVersion)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blueprint");
    openapiFields.add("componentVersion");
    openapiFields.add("configurations");
    openapiFields.add("kind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterDefinition is not found in the empty JSON string", ClusterDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blueprint") != null && !jsonObj.get("blueprint").isJsonNull()) && !jsonObj.get("blueprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blueprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blueprint").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterDefinition>() {
           @Override
           public void write(JsonWriter out, ClusterDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterDefinition
   * @throws IOException if the JSON string is invalid with respect to ClusterDefinition
   */
  public static ClusterDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterDefinition.class);
  }

  /**
   * Convert an instance of ClusterDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

