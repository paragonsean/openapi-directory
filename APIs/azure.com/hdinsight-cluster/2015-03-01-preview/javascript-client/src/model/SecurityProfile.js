/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SecurityProfile model module.
 * @module model/SecurityProfile
 * @version 2015-03-01-preview
 */
class SecurityProfile {
    /**
     * Constructs a new <code>SecurityProfile</code>.
     * The security profile which contains Ssh public key for the HDInsight cluster.
     * @alias module:model/SecurityProfile
     */
    constructor() { 
        
        SecurityProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SecurityProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecurityProfile} obj Optional instance to populate.
     * @return {module:model/SecurityProfile} The populated <code>SecurityProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecurityProfile();

            if (data.hasOwnProperty('aaddsResourceId')) {
                obj['aaddsResourceId'] = ApiClient.convertToType(data['aaddsResourceId'], 'String');
            }
            if (data.hasOwnProperty('clusterUsersGroupDNs')) {
                obj['clusterUsersGroupDNs'] = ApiClient.convertToType(data['clusterUsersGroupDNs'], ['String']);
            }
            if (data.hasOwnProperty('directoryType')) {
                obj['directoryType'] = ApiClient.convertToType(data['directoryType'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('domainUserPassword')) {
                obj['domainUserPassword'] = ApiClient.convertToType(data['domainUserPassword'], 'String');
            }
            if (data.hasOwnProperty('domainUsername')) {
                obj['domainUsername'] = ApiClient.convertToType(data['domainUsername'], 'String');
            }
            if (data.hasOwnProperty('ldapsUrls')) {
                obj['ldapsUrls'] = ApiClient.convertToType(data['ldapsUrls'], ['String']);
            }
            if (data.hasOwnProperty('msiResourceId')) {
                obj['msiResourceId'] = ApiClient.convertToType(data['msiResourceId'], 'String');
            }
            if (data.hasOwnProperty('organizationalUnitDN')) {
                obj['organizationalUnitDN'] = ApiClient.convertToType(data['organizationalUnitDN'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecurityProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecurityProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aaddsResourceId'] && !(typeof data['aaddsResourceId'] === 'string' || data['aaddsResourceId'] instanceof String)) {
            throw new Error("Expected the field `aaddsResourceId` to be a primitive type in the JSON string but got " + data['aaddsResourceId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['clusterUsersGroupDNs'])) {
            throw new Error("Expected the field `clusterUsersGroupDNs` to be an array in the JSON data but got " + data['clusterUsersGroupDNs']);
        }
        // ensure the json data is a string
        if (data['directoryType'] && !(typeof data['directoryType'] === 'string' || data['directoryType'] instanceof String)) {
            throw new Error("Expected the field `directoryType` to be a primitive type in the JSON string but got " + data['directoryType']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['domainUserPassword'] && !(typeof data['domainUserPassword'] === 'string' || data['domainUserPassword'] instanceof String)) {
            throw new Error("Expected the field `domainUserPassword` to be a primitive type in the JSON string but got " + data['domainUserPassword']);
        }
        // ensure the json data is a string
        if (data['domainUsername'] && !(typeof data['domainUsername'] === 'string' || data['domainUsername'] instanceof String)) {
            throw new Error("Expected the field `domainUsername` to be a primitive type in the JSON string but got " + data['domainUsername']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ldapsUrls'])) {
            throw new Error("Expected the field `ldapsUrls` to be an array in the JSON data but got " + data['ldapsUrls']);
        }
        // ensure the json data is a string
        if (data['msiResourceId'] && !(typeof data['msiResourceId'] === 'string' || data['msiResourceId'] instanceof String)) {
            throw new Error("Expected the field `msiResourceId` to be a primitive type in the JSON string but got " + data['msiResourceId']);
        }
        // ensure the json data is a string
        if (data['organizationalUnitDN'] && !(typeof data['organizationalUnitDN'] === 'string' || data['organizationalUnitDN'] instanceof String)) {
            throw new Error("Expected the field `organizationalUnitDN` to be a primitive type in the JSON string but got " + data['organizationalUnitDN']);
        }

        return true;
    }


}



/**
 * The resource ID of the user's Azure Active Directory Domain Service.
 * @member {String} aaddsResourceId
 */
SecurityProfile.prototype['aaddsResourceId'] = undefined;

/**
 * Optional. The Distinguished Names for cluster user groups
 * @member {Array.<String>} clusterUsersGroupDNs
 */
SecurityProfile.prototype['clusterUsersGroupDNs'] = undefined;

/**
 * The directory type.
 * @member {module:model/SecurityProfile.DirectoryTypeEnum} directoryType
 */
SecurityProfile.prototype['directoryType'] = undefined;

/**
 * The organization's active directory domain.
 * @member {String} domain
 */
SecurityProfile.prototype['domain'] = undefined;

/**
 * The domain admin password.
 * @member {String} domainUserPassword
 */
SecurityProfile.prototype['domainUserPassword'] = undefined;

/**
 * The domain user account that will have admin privileges on the cluster.
 * @member {String} domainUsername
 */
SecurityProfile.prototype['domainUsername'] = undefined;

/**
 * The LDAPS protocol URLs to communicate with the Active Directory.
 * @member {Array.<String>} ldapsUrls
 */
SecurityProfile.prototype['ldapsUrls'] = undefined;

/**
 * User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.
 * @member {String} msiResourceId
 */
SecurityProfile.prototype['msiResourceId'] = undefined;

/**
 * The organizational unit within the Active Directory to place the cluster and service accounts.
 * @member {String} organizationalUnitDN
 */
SecurityProfile.prototype['organizationalUnitDN'] = undefined;





/**
 * Allowed values for the <code>directoryType</code> property.
 * @enum {String}
 * @readonly
 */
SecurityProfile['DirectoryTypeEnum'] = {

    /**
     * value: "ActiveDirectory"
     * @const
     */
    "ActiveDirectory": "ActiveDirectory"
};



export default SecurityProfile;

