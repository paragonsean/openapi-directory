# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectivityEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, name: str=None, port: int=None, protocol: str=None):
        """ConnectivityEndpoint - a model defined in OpenAPI

        :param location: The location of this ConnectivityEndpoint.
        :param name: The name of this ConnectivityEndpoint.
        :param port: The port of this ConnectivityEndpoint.
        :param protocol: The protocol of this ConnectivityEndpoint.
        """
        self.openapi_types = {
            'location': str,
            'name': str,
            'port': int,
            'protocol': str
        }

        self.attribute_map = {
            'location': 'location',
            'name': 'name',
            'port': 'port',
            'protocol': 'protocol'
        }

        self._location = location
        self._name = name
        self._port = port
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectivityEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectivityEndpoint of this ConnectivityEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this ConnectivityEndpoint.

        The location of the endpoint.

        :return: The location of this ConnectivityEndpoint.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ConnectivityEndpoint.

        The location of the endpoint.

        :param location: The location of this ConnectivityEndpoint.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this ConnectivityEndpoint.

        The name of the endpoint.

        :return: The name of this ConnectivityEndpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectivityEndpoint.

        The name of the endpoint.

        :param name: The name of this ConnectivityEndpoint.
        :type name: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this ConnectivityEndpoint.

        The port to connect to.

        :return: The port of this ConnectivityEndpoint.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ConnectivityEndpoint.

        The port to connect to.

        :param port: The port of this ConnectivityEndpoint.
        :type port: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this ConnectivityEndpoint.

        The protocol of the endpoint.

        :return: The protocol of this ConnectivityEndpoint.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ConnectivityEndpoint.

        The protocol of the endpoint.

        :param protocol: The protocol of this ConnectivityEndpoint.
        :type protocol: str
        """

        self._protocol = protocol
