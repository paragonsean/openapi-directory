# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiskEncryptionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_algorithm: str=None, key_name: str=None, key_version: str=None, msi_resource_id: str=None, vault_uri: str=None):
        """DiskEncryptionProperties - a model defined in OpenAPI

        :param encryption_algorithm: The encryption_algorithm of this DiskEncryptionProperties.
        :param key_name: The key_name of this DiskEncryptionProperties.
        :param key_version: The key_version of this DiskEncryptionProperties.
        :param msi_resource_id: The msi_resource_id of this DiskEncryptionProperties.
        :param vault_uri: The vault_uri of this DiskEncryptionProperties.
        """
        self.openapi_types = {
            'encryption_algorithm': str,
            'key_name': str,
            'key_version': str,
            'msi_resource_id': str,
            'vault_uri': str
        }

        self.attribute_map = {
            'encryption_algorithm': 'encryptionAlgorithm',
            'key_name': 'keyName',
            'key_version': 'keyVersion',
            'msi_resource_id': 'msiResourceId',
            'vault_uri': 'vaultUri'
        }

        self._encryption_algorithm = encryption_algorithm
        self._key_name = key_name
        self._key_version = key_version
        self._msi_resource_id = msi_resource_id
        self._vault_uri = vault_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskEncryptionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskEncryptionProperties of this DiskEncryptionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_algorithm(self):
        """Gets the encryption_algorithm of this DiskEncryptionProperties.

        Algorithm identifier for encryption, default RSA-OAEP.

        :return: The encryption_algorithm of this DiskEncryptionProperties.
        :rtype: str
        """
        return self._encryption_algorithm

    @encryption_algorithm.setter
    def encryption_algorithm(self, encryption_algorithm):
        """Sets the encryption_algorithm of this DiskEncryptionProperties.

        Algorithm identifier for encryption, default RSA-OAEP.

        :param encryption_algorithm: The encryption_algorithm of this DiskEncryptionProperties.
        :type encryption_algorithm: str
        """
        allowed_values = ["RSA-OAEP", "RSA-OAEP-256", "RSA1_5"]  # noqa: E501
        if encryption_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_algorithm` ({0}), must be one of {1}"
                .format(encryption_algorithm, allowed_values)
            )

        self._encryption_algorithm = encryption_algorithm

    @property
    def key_name(self):
        """Gets the key_name of this DiskEncryptionProperties.

        Key name that is used for enabling disk encryption.

        :return: The key_name of this DiskEncryptionProperties.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this DiskEncryptionProperties.

        Key name that is used for enabling disk encryption.

        :param key_name: The key_name of this DiskEncryptionProperties.
        :type key_name: str
        """

        self._key_name = key_name

    @property
    def key_version(self):
        """Gets the key_version of this DiskEncryptionProperties.

        Specific key version that is used for enabling disk encryption.

        :return: The key_version of this DiskEncryptionProperties.
        :rtype: str
        """
        return self._key_version

    @key_version.setter
    def key_version(self, key_version):
        """Sets the key_version of this DiskEncryptionProperties.

        Specific key version that is used for enabling disk encryption.

        :param key_version: The key_version of this DiskEncryptionProperties.
        :type key_version: str
        """

        self._key_version = key_version

    @property
    def msi_resource_id(self):
        """Gets the msi_resource_id of this DiskEncryptionProperties.

        Resource ID of Managed Identity that is used to access the key vault.

        :return: The msi_resource_id of this DiskEncryptionProperties.
        :rtype: str
        """
        return self._msi_resource_id

    @msi_resource_id.setter
    def msi_resource_id(self, msi_resource_id):
        """Sets the msi_resource_id of this DiskEncryptionProperties.

        Resource ID of Managed Identity that is used to access the key vault.

        :param msi_resource_id: The msi_resource_id of this DiskEncryptionProperties.
        :type msi_resource_id: str
        """

        self._msi_resource_id = msi_resource_id

    @property
    def vault_uri(self):
        """Gets the vault_uri of this DiskEncryptionProperties.

        Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net

        :return: The vault_uri of this DiskEncryptionProperties.
        :rtype: str
        """
        return self._vault_uri

    @vault_uri.setter
    def vault_uri(self, vault_uri):
        """Sets the vault_uri of this DiskEncryptionProperties.

        Base key vault URI where the customers key is located eg. https://myvault.vault.azure.net

        :param vault_uri: The vault_uri of this DiskEncryptionProperties.
        :type vault_uri: str
        """

        self._vault_uri = vault_uri
