# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoscaleTimeAndCapacity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_instance_count: int=None, min_instance_count: int=None, time: str=None):
        """AutoscaleTimeAndCapacity - a model defined in OpenAPI

        :param max_instance_count: The max_instance_count of this AutoscaleTimeAndCapacity.
        :param min_instance_count: The min_instance_count of this AutoscaleTimeAndCapacity.
        :param time: The time of this AutoscaleTimeAndCapacity.
        """
        self.openapi_types = {
            'max_instance_count': int,
            'min_instance_count': int,
            'time': str
        }

        self.attribute_map = {
            'max_instance_count': 'maxInstanceCount',
            'min_instance_count': 'minInstanceCount',
            'time': 'time'
        }

        self._max_instance_count = max_instance_count
        self._min_instance_count = min_instance_count
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoscaleTimeAndCapacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoscaleTimeAndCapacity of this AutoscaleTimeAndCapacity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_instance_count(self):
        """Gets the max_instance_count of this AutoscaleTimeAndCapacity.

        The maximum instance count of the cluster

        :return: The max_instance_count of this AutoscaleTimeAndCapacity.
        :rtype: int
        """
        return self._max_instance_count

    @max_instance_count.setter
    def max_instance_count(self, max_instance_count):
        """Sets the max_instance_count of this AutoscaleTimeAndCapacity.

        The maximum instance count of the cluster

        :param max_instance_count: The max_instance_count of this AutoscaleTimeAndCapacity.
        :type max_instance_count: int
        """

        self._max_instance_count = max_instance_count

    @property
    def min_instance_count(self):
        """Gets the min_instance_count of this AutoscaleTimeAndCapacity.

        The minimum instance count of the cluster

        :return: The min_instance_count of this AutoscaleTimeAndCapacity.
        :rtype: int
        """
        return self._min_instance_count

    @min_instance_count.setter
    def min_instance_count(self, min_instance_count):
        """Sets the min_instance_count of this AutoscaleTimeAndCapacity.

        The minimum instance count of the cluster

        :param min_instance_count: The min_instance_count of this AutoscaleTimeAndCapacity.
        :type min_instance_count: int
        """

        self._min_instance_count = min_instance_count

    @property
    def time(self):
        """Gets the time of this AutoscaleTimeAndCapacity.

        24-hour time in the form xx:xx

        :return: The time of this AutoscaleTimeAndCapacity.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AutoscaleTimeAndCapacity.

        24-hour time in the form xx:xx

        :param time: The time of this AutoscaleTimeAndCapacity.
        :type time: str
        """

        self._time = time
