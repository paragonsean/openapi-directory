# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecurityProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aadds_resource_id: str=None, cluster_users_group_dns: List[str]=None, directory_type: str=None, domain: str=None, domain_user_password: str=None, domain_username: str=None, ldaps_urls: List[str]=None, msi_resource_id: str=None, organizational_unit_dn: str=None):
        """SecurityProfile - a model defined in OpenAPI

        :param aadds_resource_id: The aadds_resource_id of this SecurityProfile.
        :param cluster_users_group_dns: The cluster_users_group_dns of this SecurityProfile.
        :param directory_type: The directory_type of this SecurityProfile.
        :param domain: The domain of this SecurityProfile.
        :param domain_user_password: The domain_user_password of this SecurityProfile.
        :param domain_username: The domain_username of this SecurityProfile.
        :param ldaps_urls: The ldaps_urls of this SecurityProfile.
        :param msi_resource_id: The msi_resource_id of this SecurityProfile.
        :param organizational_unit_dn: The organizational_unit_dn of this SecurityProfile.
        """
        self.openapi_types = {
            'aadds_resource_id': str,
            'cluster_users_group_dns': List[str],
            'directory_type': str,
            'domain': str,
            'domain_user_password': str,
            'domain_username': str,
            'ldaps_urls': List[str],
            'msi_resource_id': str,
            'organizational_unit_dn': str
        }

        self.attribute_map = {
            'aadds_resource_id': 'aaddsResourceId',
            'cluster_users_group_dns': 'clusterUsersGroupDNs',
            'directory_type': 'directoryType',
            'domain': 'domain',
            'domain_user_password': 'domainUserPassword',
            'domain_username': 'domainUsername',
            'ldaps_urls': 'ldapsUrls',
            'msi_resource_id': 'msiResourceId',
            'organizational_unit_dn': 'organizationalUnitDN'
        }

        self._aadds_resource_id = aadds_resource_id
        self._cluster_users_group_dns = cluster_users_group_dns
        self._directory_type = directory_type
        self._domain = domain
        self._domain_user_password = domain_user_password
        self._domain_username = domain_username
        self._ldaps_urls = ldaps_urls
        self._msi_resource_id = msi_resource_id
        self._organizational_unit_dn = organizational_unit_dn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurityProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecurityProfile of this SecurityProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aadds_resource_id(self):
        """Gets the aadds_resource_id of this SecurityProfile.

        The resource ID of the user's Azure Active Directory Domain Service.

        :return: The aadds_resource_id of this SecurityProfile.
        :rtype: str
        """
        return self._aadds_resource_id

    @aadds_resource_id.setter
    def aadds_resource_id(self, aadds_resource_id):
        """Sets the aadds_resource_id of this SecurityProfile.

        The resource ID of the user's Azure Active Directory Domain Service.

        :param aadds_resource_id: The aadds_resource_id of this SecurityProfile.
        :type aadds_resource_id: str
        """

        self._aadds_resource_id = aadds_resource_id

    @property
    def cluster_users_group_dns(self):
        """Gets the cluster_users_group_dns of this SecurityProfile.

        Optional. The Distinguished Names for cluster user groups

        :return: The cluster_users_group_dns of this SecurityProfile.
        :rtype: List[str]
        """
        return self._cluster_users_group_dns

    @cluster_users_group_dns.setter
    def cluster_users_group_dns(self, cluster_users_group_dns):
        """Sets the cluster_users_group_dns of this SecurityProfile.

        Optional. The Distinguished Names for cluster user groups

        :param cluster_users_group_dns: The cluster_users_group_dns of this SecurityProfile.
        :type cluster_users_group_dns: List[str]
        """

        self._cluster_users_group_dns = cluster_users_group_dns

    @property
    def directory_type(self):
        """Gets the directory_type of this SecurityProfile.

        The directory type.

        :return: The directory_type of this SecurityProfile.
        :rtype: str
        """
        return self._directory_type

    @directory_type.setter
    def directory_type(self, directory_type):
        """Sets the directory_type of this SecurityProfile.

        The directory type.

        :param directory_type: The directory_type of this SecurityProfile.
        :type directory_type: str
        """
        allowed_values = ["ActiveDirectory"]  # noqa: E501
        if directory_type not in allowed_values:
            raise ValueError(
                "Invalid value for `directory_type` ({0}), must be one of {1}"
                .format(directory_type, allowed_values)
            )

        self._directory_type = directory_type

    @property
    def domain(self):
        """Gets the domain of this SecurityProfile.

        The organization's active directory domain.

        :return: The domain of this SecurityProfile.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SecurityProfile.

        The organization's active directory domain.

        :param domain: The domain of this SecurityProfile.
        :type domain: str
        """

        self._domain = domain

    @property
    def domain_user_password(self):
        """Gets the domain_user_password of this SecurityProfile.

        The domain admin password.

        :return: The domain_user_password of this SecurityProfile.
        :rtype: str
        """
        return self._domain_user_password

    @domain_user_password.setter
    def domain_user_password(self, domain_user_password):
        """Sets the domain_user_password of this SecurityProfile.

        The domain admin password.

        :param domain_user_password: The domain_user_password of this SecurityProfile.
        :type domain_user_password: str
        """

        self._domain_user_password = domain_user_password

    @property
    def domain_username(self):
        """Gets the domain_username of this SecurityProfile.

        The domain user account that will have admin privileges on the cluster.

        :return: The domain_username of this SecurityProfile.
        :rtype: str
        """
        return self._domain_username

    @domain_username.setter
    def domain_username(self, domain_username):
        """Sets the domain_username of this SecurityProfile.

        The domain user account that will have admin privileges on the cluster.

        :param domain_username: The domain_username of this SecurityProfile.
        :type domain_username: str
        """

        self._domain_username = domain_username

    @property
    def ldaps_urls(self):
        """Gets the ldaps_urls of this SecurityProfile.

        The LDAPS protocol URLs to communicate with the Active Directory.

        :return: The ldaps_urls of this SecurityProfile.
        :rtype: List[str]
        """
        return self._ldaps_urls

    @ldaps_urls.setter
    def ldaps_urls(self, ldaps_urls):
        """Sets the ldaps_urls of this SecurityProfile.

        The LDAPS protocol URLs to communicate with the Active Directory.

        :param ldaps_urls: The ldaps_urls of this SecurityProfile.
        :type ldaps_urls: List[str]
        """

        self._ldaps_urls = ldaps_urls

    @property
    def msi_resource_id(self):
        """Gets the msi_resource_id of this SecurityProfile.

        User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.

        :return: The msi_resource_id of this SecurityProfile.
        :rtype: str
        """
        return self._msi_resource_id

    @msi_resource_id.setter
    def msi_resource_id(self, msi_resource_id):
        """Sets the msi_resource_id of this SecurityProfile.

        User assigned identity that has permissions to read and create cluster-related artifacts in the user's AADDS.

        :param msi_resource_id: The msi_resource_id of this SecurityProfile.
        :type msi_resource_id: str
        """

        self._msi_resource_id = msi_resource_id

    @property
    def organizational_unit_dn(self):
        """Gets the organizational_unit_dn of this SecurityProfile.

        The organizational unit within the Active Directory to place the cluster and service accounts.

        :return: The organizational_unit_dn of this SecurityProfile.
        :rtype: str
        """
        return self._organizational_unit_dn

    @organizational_unit_dn.setter
    def organizational_unit_dn(self, organizational_unit_dn):
        """Sets the organizational_unit_dn of this SecurityProfile.

        The organizational unit within the Active Directory to place the cluster and service accounts.

        :param organizational_unit_dn: The organizational_unit_dn of this SecurityProfile.
        :type organizational_unit_dn: str
        """

        self._organizational_unit_dn = organizational_unit_dn
