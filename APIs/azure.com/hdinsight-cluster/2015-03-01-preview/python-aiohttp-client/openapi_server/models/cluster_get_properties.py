# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_definition import ClusterDefinition
from openapi_server.models.compute_profile import ComputeProfile
from openapi_server.models.connectivity_endpoint import ConnectivityEndpoint
from openapi_server.models.disk_encryption_properties import DiskEncryptionProperties
from openapi_server.models.errors import Errors
from openapi_server.models.kafka_rest_properties import KafkaRestProperties
from openapi_server.models.quota_info import QuotaInfo
from openapi_server.models.security_profile import SecurityProfile
from openapi_server import util


class ClusterGetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_definition: ClusterDefinition=None, cluster_state: str=None, cluster_version: str=None, compute_profile: ComputeProfile=None, connectivity_endpoints: List[ConnectivityEndpoint]=None, created_date: str=None, disk_encryption_properties: DiskEncryptionProperties=None, errors: List[Errors]=None, kafka_rest_properties: KafkaRestProperties=None, os_type: str=None, provisioning_state: str=None, quota_info: QuotaInfo=None, security_profile: SecurityProfile=None, tier: str=None):
        """ClusterGetProperties - a model defined in OpenAPI

        :param cluster_definition: The cluster_definition of this ClusterGetProperties.
        :param cluster_state: The cluster_state of this ClusterGetProperties.
        :param cluster_version: The cluster_version of this ClusterGetProperties.
        :param compute_profile: The compute_profile of this ClusterGetProperties.
        :param connectivity_endpoints: The connectivity_endpoints of this ClusterGetProperties.
        :param created_date: The created_date of this ClusterGetProperties.
        :param disk_encryption_properties: The disk_encryption_properties of this ClusterGetProperties.
        :param errors: The errors of this ClusterGetProperties.
        :param kafka_rest_properties: The kafka_rest_properties of this ClusterGetProperties.
        :param os_type: The os_type of this ClusterGetProperties.
        :param provisioning_state: The provisioning_state of this ClusterGetProperties.
        :param quota_info: The quota_info of this ClusterGetProperties.
        :param security_profile: The security_profile of this ClusterGetProperties.
        :param tier: The tier of this ClusterGetProperties.
        """
        self.openapi_types = {
            'cluster_definition': ClusterDefinition,
            'cluster_state': str,
            'cluster_version': str,
            'compute_profile': ComputeProfile,
            'connectivity_endpoints': List[ConnectivityEndpoint],
            'created_date': str,
            'disk_encryption_properties': DiskEncryptionProperties,
            'errors': List[Errors],
            'kafka_rest_properties': KafkaRestProperties,
            'os_type': str,
            'provisioning_state': str,
            'quota_info': QuotaInfo,
            'security_profile': SecurityProfile,
            'tier': str
        }

        self.attribute_map = {
            'cluster_definition': 'clusterDefinition',
            'cluster_state': 'clusterState',
            'cluster_version': 'clusterVersion',
            'compute_profile': 'computeProfile',
            'connectivity_endpoints': 'connectivityEndpoints',
            'created_date': 'createdDate',
            'disk_encryption_properties': 'diskEncryptionProperties',
            'errors': 'errors',
            'kafka_rest_properties': 'kafkaRestProperties',
            'os_type': 'osType',
            'provisioning_state': 'provisioningState',
            'quota_info': 'quotaInfo',
            'security_profile': 'securityProfile',
            'tier': 'tier'
        }

        self._cluster_definition = cluster_definition
        self._cluster_state = cluster_state
        self._cluster_version = cluster_version
        self._compute_profile = compute_profile
        self._connectivity_endpoints = connectivity_endpoints
        self._created_date = created_date
        self._disk_encryption_properties = disk_encryption_properties
        self._errors = errors
        self._kafka_rest_properties = kafka_rest_properties
        self._os_type = os_type
        self._provisioning_state = provisioning_state
        self._quota_info = quota_info
        self._security_profile = security_profile
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterGetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterGetProperties of this ClusterGetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_definition(self):
        """Gets the cluster_definition of this ClusterGetProperties.


        :return: The cluster_definition of this ClusterGetProperties.
        :rtype: ClusterDefinition
        """
        return self._cluster_definition

    @cluster_definition.setter
    def cluster_definition(self, cluster_definition):
        """Sets the cluster_definition of this ClusterGetProperties.


        :param cluster_definition: The cluster_definition of this ClusterGetProperties.
        :type cluster_definition: ClusterDefinition
        """
        if cluster_definition is None:
            raise ValueError("Invalid value for `cluster_definition`, must not be `None`")

        self._cluster_definition = cluster_definition

    @property
    def cluster_state(self):
        """Gets the cluster_state of this ClusterGetProperties.

        The state of the cluster.

        :return: The cluster_state of this ClusterGetProperties.
        :rtype: str
        """
        return self._cluster_state

    @cluster_state.setter
    def cluster_state(self, cluster_state):
        """Sets the cluster_state of this ClusterGetProperties.

        The state of the cluster.

        :param cluster_state: The cluster_state of this ClusterGetProperties.
        :type cluster_state: str
        """

        self._cluster_state = cluster_state

    @property
    def cluster_version(self):
        """Gets the cluster_version of this ClusterGetProperties.

        The version of the cluster.

        :return: The cluster_version of this ClusterGetProperties.
        :rtype: str
        """
        return self._cluster_version

    @cluster_version.setter
    def cluster_version(self, cluster_version):
        """Sets the cluster_version of this ClusterGetProperties.

        The version of the cluster.

        :param cluster_version: The cluster_version of this ClusterGetProperties.
        :type cluster_version: str
        """

        self._cluster_version = cluster_version

    @property
    def compute_profile(self):
        """Gets the compute_profile of this ClusterGetProperties.


        :return: The compute_profile of this ClusterGetProperties.
        :rtype: ComputeProfile
        """
        return self._compute_profile

    @compute_profile.setter
    def compute_profile(self, compute_profile):
        """Sets the compute_profile of this ClusterGetProperties.


        :param compute_profile: The compute_profile of this ClusterGetProperties.
        :type compute_profile: ComputeProfile
        """

        self._compute_profile = compute_profile

    @property
    def connectivity_endpoints(self):
        """Gets the connectivity_endpoints of this ClusterGetProperties.

        The list of connectivity endpoints.

        :return: The connectivity_endpoints of this ClusterGetProperties.
        :rtype: List[ConnectivityEndpoint]
        """
        return self._connectivity_endpoints

    @connectivity_endpoints.setter
    def connectivity_endpoints(self, connectivity_endpoints):
        """Sets the connectivity_endpoints of this ClusterGetProperties.

        The list of connectivity endpoints.

        :param connectivity_endpoints: The connectivity_endpoints of this ClusterGetProperties.
        :type connectivity_endpoints: List[ConnectivityEndpoint]
        """

        self._connectivity_endpoints = connectivity_endpoints

    @property
    def created_date(self):
        """Gets the created_date of this ClusterGetProperties.

        The date on which the cluster was created.

        :return: The created_date of this ClusterGetProperties.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ClusterGetProperties.

        The date on which the cluster was created.

        :param created_date: The created_date of this ClusterGetProperties.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def disk_encryption_properties(self):
        """Gets the disk_encryption_properties of this ClusterGetProperties.


        :return: The disk_encryption_properties of this ClusterGetProperties.
        :rtype: DiskEncryptionProperties
        """
        return self._disk_encryption_properties

    @disk_encryption_properties.setter
    def disk_encryption_properties(self, disk_encryption_properties):
        """Sets the disk_encryption_properties of this ClusterGetProperties.


        :param disk_encryption_properties: The disk_encryption_properties of this ClusterGetProperties.
        :type disk_encryption_properties: DiskEncryptionProperties
        """

        self._disk_encryption_properties = disk_encryption_properties

    @property
    def errors(self):
        """Gets the errors of this ClusterGetProperties.

        The list of errors.

        :return: The errors of this ClusterGetProperties.
        :rtype: List[Errors]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ClusterGetProperties.

        The list of errors.

        :param errors: The errors of this ClusterGetProperties.
        :type errors: List[Errors]
        """

        self._errors = errors

    @property
    def kafka_rest_properties(self):
        """Gets the kafka_rest_properties of this ClusterGetProperties.


        :return: The kafka_rest_properties of this ClusterGetProperties.
        :rtype: KafkaRestProperties
        """
        return self._kafka_rest_properties

    @kafka_rest_properties.setter
    def kafka_rest_properties(self, kafka_rest_properties):
        """Sets the kafka_rest_properties of this ClusterGetProperties.


        :param kafka_rest_properties: The kafka_rest_properties of this ClusterGetProperties.
        :type kafka_rest_properties: KafkaRestProperties
        """

        self._kafka_rest_properties = kafka_rest_properties

    @property
    def os_type(self):
        """Gets the os_type of this ClusterGetProperties.

        The type of operating system.

        :return: The os_type of this ClusterGetProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ClusterGetProperties.

        The type of operating system.

        :param os_type: The os_type of this ClusterGetProperties.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ClusterGetProperties.

        The provisioning state, which only appears in the response.

        :return: The provisioning_state of this ClusterGetProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ClusterGetProperties.

        The provisioning state, which only appears in the response.

        :param provisioning_state: The provisioning_state of this ClusterGetProperties.
        :type provisioning_state: str
        """
        allowed_values = ["InProgress", "Failed", "Succeeded", "Canceled", "Deleting"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def quota_info(self):
        """Gets the quota_info of this ClusterGetProperties.


        :return: The quota_info of this ClusterGetProperties.
        :rtype: QuotaInfo
        """
        return self._quota_info

    @quota_info.setter
    def quota_info(self, quota_info):
        """Sets the quota_info of this ClusterGetProperties.


        :param quota_info: The quota_info of this ClusterGetProperties.
        :type quota_info: QuotaInfo
        """

        self._quota_info = quota_info

    @property
    def security_profile(self):
        """Gets the security_profile of this ClusterGetProperties.


        :return: The security_profile of this ClusterGetProperties.
        :rtype: SecurityProfile
        """
        return self._security_profile

    @security_profile.setter
    def security_profile(self, security_profile):
        """Sets the security_profile of this ClusterGetProperties.


        :param security_profile: The security_profile of this ClusterGetProperties.
        :type security_profile: SecurityProfile
        """

        self._security_profile = security_profile

    @property
    def tier(self):
        """Gets the tier of this ClusterGetProperties.

        The cluster tier.

        :return: The tier of this ClusterGetProperties.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this ClusterGetProperties.

        The cluster tier.

        :param tier: The tier of this ClusterGetProperties.
        :type tier: str
        """
        allowed_values = ["Standard", "Premium"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier
