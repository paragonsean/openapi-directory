/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataDisksGroups model module.
 * @module model/DataDisksGroups
 * @version 2018-06-01-preview
 */
class DataDisksGroups {
    /**
     * Constructs a new <code>DataDisksGroups</code>.
     * The data disks groups for the role.
     * @alias module:model/DataDisksGroups
     */
    constructor() { 
        
        DataDisksGroups.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataDisksGroups</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataDisksGroups} obj Optional instance to populate.
     * @return {module:model/DataDisksGroups} The populated <code>DataDisksGroups</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataDisksGroups();

            if (data.hasOwnProperty('diskSizeGB')) {
                obj['diskSizeGB'] = ApiClient.convertToType(data['diskSizeGB'], 'Number');
            }
            if (data.hasOwnProperty('disksPerNode')) {
                obj['disksPerNode'] = ApiClient.convertToType(data['disksPerNode'], 'Number');
            }
            if (data.hasOwnProperty('storageAccountType')) {
                obj['storageAccountType'] = ApiClient.convertToType(data['storageAccountType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataDisksGroups</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataDisksGroups</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['storageAccountType'] && !(typeof data['storageAccountType'] === 'string' || data['storageAccountType'] instanceof String)) {
            throw new Error("Expected the field `storageAccountType` to be a primitive type in the JSON string but got " + data['storageAccountType']);
        }

        return true;
    }


}



/**
 * ReadOnly. The DiskSize in GB. Do not set this value.
 * @member {Number} diskSizeGB
 */
DataDisksGroups.prototype['diskSizeGB'] = undefined;

/**
 * The number of disks per node.
 * @member {Number} disksPerNode
 */
DataDisksGroups.prototype['disksPerNode'] = undefined;

/**
 * ReadOnly. The storage account type. Do not set this value.
 * @member {String} storageAccountType
 */
DataDisksGroups.prototype['storageAccountType'] = undefined;






export default DataDisksGroups;

