# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blueprint: str=None, component_version: Dict[str, str]=None, configurations: object=None, kind: str=None):
        """ClusterDefinition - a model defined in OpenAPI

        :param blueprint: The blueprint of this ClusterDefinition.
        :param component_version: The component_version of this ClusterDefinition.
        :param configurations: The configurations of this ClusterDefinition.
        :param kind: The kind of this ClusterDefinition.
        """
        self.openapi_types = {
            'blueprint': str,
            'component_version': Dict[str, str],
            'configurations': object,
            'kind': str
        }

        self.attribute_map = {
            'blueprint': 'blueprint',
            'component_version': 'componentVersion',
            'configurations': 'configurations',
            'kind': 'kind'
        }

        self._blueprint = blueprint
        self._component_version = component_version
        self._configurations = configurations
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterDefinition of this ClusterDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blueprint(self):
        """Gets the blueprint of this ClusterDefinition.

        The link to the blueprint.

        :return: The blueprint of this ClusterDefinition.
        :rtype: str
        """
        return self._blueprint

    @blueprint.setter
    def blueprint(self, blueprint):
        """Sets the blueprint of this ClusterDefinition.

        The link to the blueprint.

        :param blueprint: The blueprint of this ClusterDefinition.
        :type blueprint: str
        """

        self._blueprint = blueprint

    @property
    def component_version(self):
        """Gets the component_version of this ClusterDefinition.

        The versions of different services in the cluster.

        :return: The component_version of this ClusterDefinition.
        :rtype: Dict[str, str]
        """
        return self._component_version

    @component_version.setter
    def component_version(self, component_version):
        """Sets the component_version of this ClusterDefinition.

        The versions of different services in the cluster.

        :param component_version: The component_version of this ClusterDefinition.
        :type component_version: Dict[str, str]
        """

        self._component_version = component_version

    @property
    def configurations(self):
        """Gets the configurations of this ClusterDefinition.

        The cluster configurations.

        :return: The configurations of this ClusterDefinition.
        :rtype: object
        """
        return self._configurations

    @configurations.setter
    def configurations(self, configurations):
        """Sets the configurations of this ClusterDefinition.

        The cluster configurations.

        :param configurations: The configurations of this ClusterDefinition.
        :type configurations: object
        """

        self._configurations = configurations

    @property
    def kind(self):
        """Gets the kind of this ClusterDefinition.

        The type of cluster.

        :return: The kind of this ClusterDefinition.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ClusterDefinition.

        The type of cluster.

        :param kind: The kind of this ClusterDefinition.
        :type kind: str
        """

        self._kind = kind
