# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RuntimeScriptAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, name: str=None, parameters: str=None, roles: List[str]=None, uri: str=None):
        """RuntimeScriptAction - a model defined in OpenAPI

        :param application_name: The application_name of this RuntimeScriptAction.
        :param name: The name of this RuntimeScriptAction.
        :param parameters: The parameters of this RuntimeScriptAction.
        :param roles: The roles of this RuntimeScriptAction.
        :param uri: The uri of this RuntimeScriptAction.
        """
        self.openapi_types = {
            'application_name': str,
            'name': str,
            'parameters': str,
            'roles': List[str],
            'uri': str
        }

        self.attribute_map = {
            'application_name': 'applicationName',
            'name': 'name',
            'parameters': 'parameters',
            'roles': 'roles',
            'uri': 'uri'
        }

        self._application_name = application_name
        self._name = name
        self._parameters = parameters
        self._roles = roles
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuntimeScriptAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuntimeScriptAction of this RuntimeScriptAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this RuntimeScriptAction.

        The application name of the script action, if any.

        :return: The application_name of this RuntimeScriptAction.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this RuntimeScriptAction.

        The application name of the script action, if any.

        :param application_name: The application_name of this RuntimeScriptAction.
        :type application_name: str
        """

        self._application_name = application_name

    @property
    def name(self):
        """Gets the name of this RuntimeScriptAction.

        The name of the script action.

        :return: The name of this RuntimeScriptAction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuntimeScriptAction.

        The name of the script action.

        :param name: The name of this RuntimeScriptAction.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this RuntimeScriptAction.

        The parameters for the script

        :return: The parameters of this RuntimeScriptAction.
        :rtype: str
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this RuntimeScriptAction.

        The parameters for the script

        :param parameters: The parameters of this RuntimeScriptAction.
        :type parameters: str
        """

        self._parameters = parameters

    @property
    def roles(self):
        """Gets the roles of this RuntimeScriptAction.

        The list of roles where script will be executed.

        :return: The roles of this RuntimeScriptAction.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this RuntimeScriptAction.

        The list of roles where script will be executed.

        :param roles: The roles of this RuntimeScriptAction.
        :type roles: List[str]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles

    @property
    def uri(self):
        """Gets the uri of this RuntimeScriptAction.

        The URI to the script.

        :return: The uri of this RuntimeScriptAction.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this RuntimeScriptAction.

        The URI to the script.

        :param uri: The uri of this RuntimeScriptAction.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
