# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoscaleCapacity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_instance_count: int=None, min_instance_count: int=None):
        """AutoscaleCapacity - a model defined in OpenAPI

        :param max_instance_count: The max_instance_count of this AutoscaleCapacity.
        :param min_instance_count: The min_instance_count of this AutoscaleCapacity.
        """
        self.openapi_types = {
            'max_instance_count': int,
            'min_instance_count': int
        }

        self.attribute_map = {
            'max_instance_count': 'maxInstanceCount',
            'min_instance_count': 'minInstanceCount'
        }

        self._max_instance_count = max_instance_count
        self._min_instance_count = min_instance_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoscaleCapacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoscaleCapacity of this AutoscaleCapacity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_instance_count(self):
        """Gets the max_instance_count of this AutoscaleCapacity.

        The maximum instance count of the cluster

        :return: The max_instance_count of this AutoscaleCapacity.
        :rtype: int
        """
        return self._max_instance_count

    @max_instance_count.setter
    def max_instance_count(self, max_instance_count):
        """Sets the max_instance_count of this AutoscaleCapacity.

        The maximum instance count of the cluster

        :param max_instance_count: The max_instance_count of this AutoscaleCapacity.
        :type max_instance_count: int
        """

        self._max_instance_count = max_instance_count

    @property
    def min_instance_count(self):
        """Gets the min_instance_count of this AutoscaleCapacity.

        The minimum instance count of the cluster

        :return: The min_instance_count of this AutoscaleCapacity.
        :rtype: int
        """
        return self._min_instance_count

    @min_instance_count.setter
    def min_instance_count(self, min_instance_count):
        """Sets the min_instance_count of this AutoscaleCapacity.

        The minimum instance count of the cluster

        :param min_instance_count: The min_instance_count of this AutoscaleCapacity.
        :type min_instance_count: int
        """

        self._min_instance_count = min_instance_count
