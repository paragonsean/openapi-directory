/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityProfile::OAISecurityProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityProfile::OAISecurityProfile() {
    this->initializeModel();
}

OAISecurityProfile::~OAISecurityProfile() {}

void OAISecurityProfile::initializeModel() {

    m_aadds_resource_id_isSet = false;
    m_aadds_resource_id_isValid = false;

    m_cluster_users_group_dns_isSet = false;
    m_cluster_users_group_dns_isValid = false;

    m_directory_type_isSet = false;
    m_directory_type_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_domain_user_password_isSet = false;
    m_domain_user_password_isValid = false;

    m_domain_username_isSet = false;
    m_domain_username_isValid = false;

    m_ldaps_urls_isSet = false;
    m_ldaps_urls_isValid = false;

    m_msi_resource_id_isSet = false;
    m_msi_resource_id_isValid = false;

    m_organizational_unit_dn_isSet = false;
    m_organizational_unit_dn_isValid = false;
}

void OAISecurityProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityProfile::fromJsonObject(QJsonObject json) {

    m_aadds_resource_id_isValid = ::OpenAPI::fromJsonValue(m_aadds_resource_id, json[QString("aaddsResourceId")]);
    m_aadds_resource_id_isSet = !json[QString("aaddsResourceId")].isNull() && m_aadds_resource_id_isValid;

    m_cluster_users_group_dns_isValid = ::OpenAPI::fromJsonValue(m_cluster_users_group_dns, json[QString("clusterUsersGroupDNs")]);
    m_cluster_users_group_dns_isSet = !json[QString("clusterUsersGroupDNs")].isNull() && m_cluster_users_group_dns_isValid;

    m_directory_type_isValid = ::OpenAPI::fromJsonValue(m_directory_type, json[QString("directoryType")]);
    m_directory_type_isSet = !json[QString("directoryType")].isNull() && m_directory_type_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_domain_user_password_isValid = ::OpenAPI::fromJsonValue(m_domain_user_password, json[QString("domainUserPassword")]);
    m_domain_user_password_isSet = !json[QString("domainUserPassword")].isNull() && m_domain_user_password_isValid;

    m_domain_username_isValid = ::OpenAPI::fromJsonValue(m_domain_username, json[QString("domainUsername")]);
    m_domain_username_isSet = !json[QString("domainUsername")].isNull() && m_domain_username_isValid;

    m_ldaps_urls_isValid = ::OpenAPI::fromJsonValue(m_ldaps_urls, json[QString("ldapsUrls")]);
    m_ldaps_urls_isSet = !json[QString("ldapsUrls")].isNull() && m_ldaps_urls_isValid;

    m_msi_resource_id_isValid = ::OpenAPI::fromJsonValue(m_msi_resource_id, json[QString("msiResourceId")]);
    m_msi_resource_id_isSet = !json[QString("msiResourceId")].isNull() && m_msi_resource_id_isValid;

    m_organizational_unit_dn_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_dn, json[QString("organizationalUnitDN")]);
    m_organizational_unit_dn_isSet = !json[QString("organizationalUnitDN")].isNull() && m_organizational_unit_dn_isValid;
}

QString OAISecurityProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_aadds_resource_id_isSet) {
        obj.insert(QString("aaddsResourceId"), ::OpenAPI::toJsonValue(m_aadds_resource_id));
    }
    if (m_cluster_users_group_dns.size() > 0) {
        obj.insert(QString("clusterUsersGroupDNs"), ::OpenAPI::toJsonValue(m_cluster_users_group_dns));
    }
    if (m_directory_type_isSet) {
        obj.insert(QString("directoryType"), ::OpenAPI::toJsonValue(m_directory_type));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_domain_user_password_isSet) {
        obj.insert(QString("domainUserPassword"), ::OpenAPI::toJsonValue(m_domain_user_password));
    }
    if (m_domain_username_isSet) {
        obj.insert(QString("domainUsername"), ::OpenAPI::toJsonValue(m_domain_username));
    }
    if (m_ldaps_urls.size() > 0) {
        obj.insert(QString("ldapsUrls"), ::OpenAPI::toJsonValue(m_ldaps_urls));
    }
    if (m_msi_resource_id_isSet) {
        obj.insert(QString("msiResourceId"), ::OpenAPI::toJsonValue(m_msi_resource_id));
    }
    if (m_organizational_unit_dn_isSet) {
        obj.insert(QString("organizationalUnitDN"), ::OpenAPI::toJsonValue(m_organizational_unit_dn));
    }
    return obj;
}

QString OAISecurityProfile::getAaddsResourceId() const {
    return m_aadds_resource_id;
}
void OAISecurityProfile::setAaddsResourceId(const QString &aadds_resource_id) {
    m_aadds_resource_id = aadds_resource_id;
    m_aadds_resource_id_isSet = true;
}

bool OAISecurityProfile::is_aadds_resource_id_Set() const{
    return m_aadds_resource_id_isSet;
}

bool OAISecurityProfile::is_aadds_resource_id_Valid() const{
    return m_aadds_resource_id_isValid;
}

QList<QString> OAISecurityProfile::getClusterUsersGroupDns() const {
    return m_cluster_users_group_dns;
}
void OAISecurityProfile::setClusterUsersGroupDns(const QList<QString> &cluster_users_group_dns) {
    m_cluster_users_group_dns = cluster_users_group_dns;
    m_cluster_users_group_dns_isSet = true;
}

bool OAISecurityProfile::is_cluster_users_group_dns_Set() const{
    return m_cluster_users_group_dns_isSet;
}

bool OAISecurityProfile::is_cluster_users_group_dns_Valid() const{
    return m_cluster_users_group_dns_isValid;
}

QString OAISecurityProfile::getDirectoryType() const {
    return m_directory_type;
}
void OAISecurityProfile::setDirectoryType(const QString &directory_type) {
    m_directory_type = directory_type;
    m_directory_type_isSet = true;
}

bool OAISecurityProfile::is_directory_type_Set() const{
    return m_directory_type_isSet;
}

bool OAISecurityProfile::is_directory_type_Valid() const{
    return m_directory_type_isValid;
}

QString OAISecurityProfile::getDomain() const {
    return m_domain;
}
void OAISecurityProfile::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAISecurityProfile::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAISecurityProfile::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAISecurityProfile::getDomainUserPassword() const {
    return m_domain_user_password;
}
void OAISecurityProfile::setDomainUserPassword(const QString &domain_user_password) {
    m_domain_user_password = domain_user_password;
    m_domain_user_password_isSet = true;
}

bool OAISecurityProfile::is_domain_user_password_Set() const{
    return m_domain_user_password_isSet;
}

bool OAISecurityProfile::is_domain_user_password_Valid() const{
    return m_domain_user_password_isValid;
}

QString OAISecurityProfile::getDomainUsername() const {
    return m_domain_username;
}
void OAISecurityProfile::setDomainUsername(const QString &domain_username) {
    m_domain_username = domain_username;
    m_domain_username_isSet = true;
}

bool OAISecurityProfile::is_domain_username_Set() const{
    return m_domain_username_isSet;
}

bool OAISecurityProfile::is_domain_username_Valid() const{
    return m_domain_username_isValid;
}

QList<QString> OAISecurityProfile::getLdapsUrls() const {
    return m_ldaps_urls;
}
void OAISecurityProfile::setLdapsUrls(const QList<QString> &ldaps_urls) {
    m_ldaps_urls = ldaps_urls;
    m_ldaps_urls_isSet = true;
}

bool OAISecurityProfile::is_ldaps_urls_Set() const{
    return m_ldaps_urls_isSet;
}

bool OAISecurityProfile::is_ldaps_urls_Valid() const{
    return m_ldaps_urls_isValid;
}

QString OAISecurityProfile::getMsiResourceId() const {
    return m_msi_resource_id;
}
void OAISecurityProfile::setMsiResourceId(const QString &msi_resource_id) {
    m_msi_resource_id = msi_resource_id;
    m_msi_resource_id_isSet = true;
}

bool OAISecurityProfile::is_msi_resource_id_Set() const{
    return m_msi_resource_id_isSet;
}

bool OAISecurityProfile::is_msi_resource_id_Valid() const{
    return m_msi_resource_id_isValid;
}

QString OAISecurityProfile::getOrganizationalUnitDn() const {
    return m_organizational_unit_dn;
}
void OAISecurityProfile::setOrganizationalUnitDn(const QString &organizational_unit_dn) {
    m_organizational_unit_dn = organizational_unit_dn;
    m_organizational_unit_dn_isSet = true;
}

bool OAISecurityProfile::is_organizational_unit_dn_Set() const{
    return m_organizational_unit_dn_isSet;
}

bool OAISecurityProfile::is_organizational_unit_dn_Valid() const{
    return m_organizational_unit_dn_isValid;
}

bool OAISecurityProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aadds_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_users_group_dns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldaps_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_msi_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_dn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
