/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterDefinition::OAIClusterDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterDefinition::OAIClusterDefinition() {
    this->initializeModel();
}

OAIClusterDefinition::~OAIClusterDefinition() {}

void OAIClusterDefinition::initializeModel() {

    m_blueprint_isSet = false;
    m_blueprint_isValid = false;

    m_component_version_isSet = false;
    m_component_version_isValid = false;

    m_configurations_isSet = false;
    m_configurations_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIClusterDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterDefinition::fromJsonObject(QJsonObject json) {

    m_blueprint_isValid = ::OpenAPI::fromJsonValue(m_blueprint, json[QString("blueprint")]);
    m_blueprint_isSet = !json[QString("blueprint")].isNull() && m_blueprint_isValid;

    m_component_version_isValid = ::OpenAPI::fromJsonValue(m_component_version, json[QString("componentVersion")]);
    m_component_version_isSet = !json[QString("componentVersion")].isNull() && m_component_version_isValid;

    m_configurations_isValid = ::OpenAPI::fromJsonValue(m_configurations, json[QString("configurations")]);
    m_configurations_isSet = !json[QString("configurations")].isNull() && m_configurations_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIClusterDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_blueprint_isSet) {
        obj.insert(QString("blueprint"), ::OpenAPI::toJsonValue(m_blueprint));
    }
    if (m_component_version.size() > 0) {
        obj.insert(QString("componentVersion"), ::OpenAPI::toJsonValue(m_component_version));
    }
    if (m_configurations_isSet) {
        obj.insert(QString("configurations"), ::OpenAPI::toJsonValue(m_configurations));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

QString OAIClusterDefinition::getBlueprint() const {
    return m_blueprint;
}
void OAIClusterDefinition::setBlueprint(const QString &blueprint) {
    m_blueprint = blueprint;
    m_blueprint_isSet = true;
}

bool OAIClusterDefinition::is_blueprint_Set() const{
    return m_blueprint_isSet;
}

bool OAIClusterDefinition::is_blueprint_Valid() const{
    return m_blueprint_isValid;
}

QMap<QString, QString> OAIClusterDefinition::getComponentVersion() const {
    return m_component_version;
}
void OAIClusterDefinition::setComponentVersion(const QMap<QString, QString> &component_version) {
    m_component_version = component_version;
    m_component_version_isSet = true;
}

bool OAIClusterDefinition::is_component_version_Set() const{
    return m_component_version_isSet;
}

bool OAIClusterDefinition::is_component_version_Valid() const{
    return m_component_version_isValid;
}

OAIObject OAIClusterDefinition::getConfigurations() const {
    return m_configurations;
}
void OAIClusterDefinition::setConfigurations(const OAIObject &configurations) {
    m_configurations = configurations;
    m_configurations_isSet = true;
}

bool OAIClusterDefinition::is_configurations_Set() const{
    return m_configurations_isSet;
}

bool OAIClusterDefinition::is_configurations_Valid() const{
    return m_configurations_isValid;
}

QString OAIClusterDefinition::getKind() const {
    return m_kind;
}
void OAIClusterDefinition::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIClusterDefinition::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIClusterDefinition::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIClusterDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blueprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configurations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
