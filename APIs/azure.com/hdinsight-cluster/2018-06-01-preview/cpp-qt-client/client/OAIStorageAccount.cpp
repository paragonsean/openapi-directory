/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageAccount::OAIStorageAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageAccount::OAIStorageAccount() {
    this->initializeModel();
}

OAIStorageAccount::~OAIStorageAccount() {}

void OAIStorageAccount::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_file_system_isSet = false;
    m_file_system_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_msi_resource_id_isSet = false;
    m_msi_resource_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAIStorageAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageAccount::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_file_system_isValid = ::OpenAPI::fromJsonValue(m_file_system, json[QString("fileSystem")]);
    m_file_system_isSet = !json[QString("fileSystem")].isNull() && m_file_system_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_msi_resource_id_isValid = ::OpenAPI::fromJsonValue(m_msi_resource_id, json[QString("msiResourceId")]);
    m_msi_resource_id_isSet = !json[QString("msiResourceId")].isNull() && m_msi_resource_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAIStorageAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_file_system_isSet) {
        obj.insert(QString("fileSystem"), ::OpenAPI::toJsonValue(m_file_system));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_msi_resource_id_isSet) {
        obj.insert(QString("msiResourceId"), ::OpenAPI::toJsonValue(m_msi_resource_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

QString OAIStorageAccount::getContainer() const {
    return m_container;
}
void OAIStorageAccount::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIStorageAccount::is_container_Set() const{
    return m_container_isSet;
}

bool OAIStorageAccount::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIStorageAccount::getFileSystem() const {
    return m_file_system;
}
void OAIStorageAccount::setFileSystem(const QString &file_system) {
    m_file_system = file_system;
    m_file_system_isSet = true;
}

bool OAIStorageAccount::is_file_system_Set() const{
    return m_file_system_isSet;
}

bool OAIStorageAccount::is_file_system_Valid() const{
    return m_file_system_isValid;
}

bool OAIStorageAccount::isIsDefault() const {
    return m_is_default;
}
void OAIStorageAccount::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIStorageAccount::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIStorageAccount::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QString OAIStorageAccount::getKey() const {
    return m_key;
}
void OAIStorageAccount::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIStorageAccount::is_key_Set() const{
    return m_key_isSet;
}

bool OAIStorageAccount::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIStorageAccount::getMsiResourceId() const {
    return m_msi_resource_id;
}
void OAIStorageAccount::setMsiResourceId(const QString &msi_resource_id) {
    m_msi_resource_id = msi_resource_id;
    m_msi_resource_id_isSet = true;
}

bool OAIStorageAccount::is_msi_resource_id_Set() const{
    return m_msi_resource_id_isSet;
}

bool OAIStorageAccount::is_msi_resource_id_Valid() const{
    return m_msi_resource_id_isValid;
}

QString OAIStorageAccount::getName() const {
    return m_name;
}
void OAIStorageAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStorageAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStorageAccount::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStorageAccount::getResourceId() const {
    return m_resource_id;
}
void OAIStorageAccount::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIStorageAccount::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIStorageAccount::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAIStorageAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msi_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
