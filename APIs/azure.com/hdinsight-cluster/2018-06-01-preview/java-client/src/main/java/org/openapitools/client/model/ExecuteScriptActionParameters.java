/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RuntimeScriptAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters for the script actions to execute on a running cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:48.970479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExecuteScriptActionParameters {
  public static final String SERIALIZED_NAME_PERSIST_ON_SUCCESS = "persistOnSuccess";
  @SerializedName(SERIALIZED_NAME_PERSIST_ON_SUCCESS)
  private Boolean persistOnSuccess;

  public static final String SERIALIZED_NAME_SCRIPT_ACTIONS = "scriptActions";
  @SerializedName(SERIALIZED_NAME_SCRIPT_ACTIONS)
  private List<RuntimeScriptAction> scriptActions = new ArrayList<>();

  public ExecuteScriptActionParameters() {
  }

  public ExecuteScriptActionParameters persistOnSuccess(Boolean persistOnSuccess) {
    this.persistOnSuccess = persistOnSuccess;
    return this;
  }

  /**
   * Gets or sets if the scripts needs to be persisted.
   * @return persistOnSuccess
   */
  @javax.annotation.Nonnull
  public Boolean getPersistOnSuccess() {
    return persistOnSuccess;
  }

  public void setPersistOnSuccess(Boolean persistOnSuccess) {
    this.persistOnSuccess = persistOnSuccess;
  }


  public ExecuteScriptActionParameters scriptActions(List<RuntimeScriptAction> scriptActions) {
    this.scriptActions = scriptActions;
    return this;
  }

  public ExecuteScriptActionParameters addScriptActionsItem(RuntimeScriptAction scriptActionsItem) {
    if (this.scriptActions == null) {
      this.scriptActions = new ArrayList<>();
    }
    this.scriptActions.add(scriptActionsItem);
    return this;
  }

  /**
   * The list of run time script actions.
   * @return scriptActions
   */
  @javax.annotation.Nullable
  public List<RuntimeScriptAction> getScriptActions() {
    return scriptActions;
  }

  public void setScriptActions(List<RuntimeScriptAction> scriptActions) {
    this.scriptActions = scriptActions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecuteScriptActionParameters executeScriptActionParameters = (ExecuteScriptActionParameters) o;
    return Objects.equals(this.persistOnSuccess, executeScriptActionParameters.persistOnSuccess) &&
        Objects.equals(this.scriptActions, executeScriptActionParameters.scriptActions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(persistOnSuccess, scriptActions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecuteScriptActionParameters {\n");
    sb.append("    persistOnSuccess: ").append(toIndentedString(persistOnSuccess)).append("\n");
    sb.append("    scriptActions: ").append(toIndentedString(scriptActions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("persistOnSuccess");
    openapiFields.add("scriptActions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("persistOnSuccess");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExecuteScriptActionParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecuteScriptActionParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecuteScriptActionParameters is not found in the empty JSON string", ExecuteScriptActionParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecuteScriptActionParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecuteScriptActionParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExecuteScriptActionParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("scriptActions") != null && !jsonObj.get("scriptActions").isJsonNull()) {
        JsonArray jsonArrayscriptActions = jsonObj.getAsJsonArray("scriptActions");
        if (jsonArrayscriptActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scriptActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scriptActions` to be an array in the JSON string but got `%s`", jsonObj.get("scriptActions").toString()));
          }

          // validate the optional field `scriptActions` (array)
          for (int i = 0; i < jsonArrayscriptActions.size(); i++) {
            RuntimeScriptAction.validateJsonElement(jsonArrayscriptActions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecuteScriptActionParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecuteScriptActionParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecuteScriptActionParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecuteScriptActionParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecuteScriptActionParameters>() {
           @Override
           public void write(JsonWriter out, ExecuteScriptActionParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecuteScriptActionParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExecuteScriptActionParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExecuteScriptActionParameters
   * @throws IOException if the JSON string is invalid with respect to ExecuteScriptActionParameters
   */
  public static ExecuteScriptActionParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecuteScriptActionParameters.class);
  }

  /**
   * Convert an instance of ExecuteScriptActionParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

