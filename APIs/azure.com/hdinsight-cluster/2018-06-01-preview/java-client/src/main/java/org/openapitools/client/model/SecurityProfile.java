/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The security profile which contains Ssh public key for the HDInsight cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:48.970479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecurityProfile {
  public static final String SERIALIZED_NAME_AADDS_RESOURCE_ID = "aaddsResourceId";
  @SerializedName(SERIALIZED_NAME_AADDS_RESOURCE_ID)
  private String aaddsResourceId;

  public static final String SERIALIZED_NAME_CLUSTER_USERS_GROUP_D_NS = "clusterUsersGroupDNs";
  @SerializedName(SERIALIZED_NAME_CLUSTER_USERS_GROUP_D_NS)
  private List<String> clusterUsersGroupDNs = new ArrayList<>();

  /**
   * The directory type.
   */
  @JsonAdapter(DirectoryTypeEnum.Adapter.class)
  public enum DirectoryTypeEnum {
    ACTIVE_DIRECTORY("ActiveDirectory");

    private String value;

    DirectoryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectoryTypeEnum fromValue(String value) {
      for (DirectoryTypeEnum b : DirectoryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectoryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectoryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectoryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DirectoryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DirectoryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIRECTORY_TYPE = "directoryType";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_TYPE)
  private DirectoryTypeEnum directoryType;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DOMAIN_USER_PASSWORD = "domainUserPassword";
  @SerializedName(SERIALIZED_NAME_DOMAIN_USER_PASSWORD)
  private String domainUserPassword;

  public static final String SERIALIZED_NAME_DOMAIN_USERNAME = "domainUsername";
  @SerializedName(SERIALIZED_NAME_DOMAIN_USERNAME)
  private String domainUsername;

  public static final String SERIALIZED_NAME_LDAPS_URLS = "ldapsUrls";
  @SerializedName(SERIALIZED_NAME_LDAPS_URLS)
  private List<String> ldapsUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_MSI_RESOURCE_ID = "msiResourceId";
  @SerializedName(SERIALIZED_NAME_MSI_RESOURCE_ID)
  private String msiResourceId;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNIT_D_N = "organizationalUnitDN";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNIT_D_N)
  private String organizationalUnitDN;

  public SecurityProfile() {
  }

  public SecurityProfile aaddsResourceId(String aaddsResourceId) {
    this.aaddsResourceId = aaddsResourceId;
    return this;
  }

  /**
   * The resource ID of the user&#39;s Azure Active Directory Domain Service.
   * @return aaddsResourceId
   */
  @javax.annotation.Nullable
  public String getAaddsResourceId() {
    return aaddsResourceId;
  }

  public void setAaddsResourceId(String aaddsResourceId) {
    this.aaddsResourceId = aaddsResourceId;
  }


  public SecurityProfile clusterUsersGroupDNs(List<String> clusterUsersGroupDNs) {
    this.clusterUsersGroupDNs = clusterUsersGroupDNs;
    return this;
  }

  public SecurityProfile addClusterUsersGroupDNsItem(String clusterUsersGroupDNsItem) {
    if (this.clusterUsersGroupDNs == null) {
      this.clusterUsersGroupDNs = new ArrayList<>();
    }
    this.clusterUsersGroupDNs.add(clusterUsersGroupDNsItem);
    return this;
  }

  /**
   * Optional. The Distinguished Names for cluster user groups
   * @return clusterUsersGroupDNs
   */
  @javax.annotation.Nullable
  public List<String> getClusterUsersGroupDNs() {
    return clusterUsersGroupDNs;
  }

  public void setClusterUsersGroupDNs(List<String> clusterUsersGroupDNs) {
    this.clusterUsersGroupDNs = clusterUsersGroupDNs;
  }


  public SecurityProfile directoryType(DirectoryTypeEnum directoryType) {
    this.directoryType = directoryType;
    return this;
  }

  /**
   * The directory type.
   * @return directoryType
   */
  @javax.annotation.Nullable
  public DirectoryTypeEnum getDirectoryType() {
    return directoryType;
  }

  public void setDirectoryType(DirectoryTypeEnum directoryType) {
    this.directoryType = directoryType;
  }


  public SecurityProfile domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The organization&#39;s active directory domain.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public SecurityProfile domainUserPassword(String domainUserPassword) {
    this.domainUserPassword = domainUserPassword;
    return this;
  }

  /**
   * The domain admin password.
   * @return domainUserPassword
   */
  @javax.annotation.Nullable
  public String getDomainUserPassword() {
    return domainUserPassword;
  }

  public void setDomainUserPassword(String domainUserPassword) {
    this.domainUserPassword = domainUserPassword;
  }


  public SecurityProfile domainUsername(String domainUsername) {
    this.domainUsername = domainUsername;
    return this;
  }

  /**
   * The domain user account that will have admin privileges on the cluster.
   * @return domainUsername
   */
  @javax.annotation.Nullable
  public String getDomainUsername() {
    return domainUsername;
  }

  public void setDomainUsername(String domainUsername) {
    this.domainUsername = domainUsername;
  }


  public SecurityProfile ldapsUrls(List<String> ldapsUrls) {
    this.ldapsUrls = ldapsUrls;
    return this;
  }

  public SecurityProfile addLdapsUrlsItem(String ldapsUrlsItem) {
    if (this.ldapsUrls == null) {
      this.ldapsUrls = new ArrayList<>();
    }
    this.ldapsUrls.add(ldapsUrlsItem);
    return this;
  }

  /**
   * The LDAPS protocol URLs to communicate with the Active Directory.
   * @return ldapsUrls
   */
  @javax.annotation.Nullable
  public List<String> getLdapsUrls() {
    return ldapsUrls;
  }

  public void setLdapsUrls(List<String> ldapsUrls) {
    this.ldapsUrls = ldapsUrls;
  }


  public SecurityProfile msiResourceId(String msiResourceId) {
    this.msiResourceId = msiResourceId;
    return this;
  }

  /**
   * User assigned identity that has permissions to read and create cluster-related artifacts in the user&#39;s AADDS.
   * @return msiResourceId
   */
  @javax.annotation.Nullable
  public String getMsiResourceId() {
    return msiResourceId;
  }

  public void setMsiResourceId(String msiResourceId) {
    this.msiResourceId = msiResourceId;
  }


  public SecurityProfile organizationalUnitDN(String organizationalUnitDN) {
    this.organizationalUnitDN = organizationalUnitDN;
    return this;
  }

  /**
   * The organizational unit within the Active Directory to place the cluster and service accounts.
   * @return organizationalUnitDN
   */
  @javax.annotation.Nullable
  public String getOrganizationalUnitDN() {
    return organizationalUnitDN;
  }

  public void setOrganizationalUnitDN(String organizationalUnitDN) {
    this.organizationalUnitDN = organizationalUnitDN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityProfile securityProfile = (SecurityProfile) o;
    return Objects.equals(this.aaddsResourceId, securityProfile.aaddsResourceId) &&
        Objects.equals(this.clusterUsersGroupDNs, securityProfile.clusterUsersGroupDNs) &&
        Objects.equals(this.directoryType, securityProfile.directoryType) &&
        Objects.equals(this.domain, securityProfile.domain) &&
        Objects.equals(this.domainUserPassword, securityProfile.domainUserPassword) &&
        Objects.equals(this.domainUsername, securityProfile.domainUsername) &&
        Objects.equals(this.ldapsUrls, securityProfile.ldapsUrls) &&
        Objects.equals(this.msiResourceId, securityProfile.msiResourceId) &&
        Objects.equals(this.organizationalUnitDN, securityProfile.organizationalUnitDN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aaddsResourceId, clusterUsersGroupDNs, directoryType, domain, domainUserPassword, domainUsername, ldapsUrls, msiResourceId, organizationalUnitDN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityProfile {\n");
    sb.append("    aaddsResourceId: ").append(toIndentedString(aaddsResourceId)).append("\n");
    sb.append("    clusterUsersGroupDNs: ").append(toIndentedString(clusterUsersGroupDNs)).append("\n");
    sb.append("    directoryType: ").append(toIndentedString(directoryType)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainUserPassword: ").append("*").append("\n");
    sb.append("    domainUsername: ").append(toIndentedString(domainUsername)).append("\n");
    sb.append("    ldapsUrls: ").append(toIndentedString(ldapsUrls)).append("\n");
    sb.append("    msiResourceId: ").append(toIndentedString(msiResourceId)).append("\n");
    sb.append("    organizationalUnitDN: ").append(toIndentedString(organizationalUnitDN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aaddsResourceId");
    openapiFields.add("clusterUsersGroupDNs");
    openapiFields.add("directoryType");
    openapiFields.add("domain");
    openapiFields.add("domainUserPassword");
    openapiFields.add("domainUsername");
    openapiFields.add("ldapsUrls");
    openapiFields.add("msiResourceId");
    openapiFields.add("organizationalUnitDN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecurityProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecurityProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecurityProfile is not found in the empty JSON string", SecurityProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecurityProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecurityProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aaddsResourceId") != null && !jsonObj.get("aaddsResourceId").isJsonNull()) && !jsonObj.get("aaddsResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aaddsResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aaddsResourceId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clusterUsersGroupDNs") != null && !jsonObj.get("clusterUsersGroupDNs").isJsonNull() && !jsonObj.get("clusterUsersGroupDNs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterUsersGroupDNs` to be an array in the JSON string but got `%s`", jsonObj.get("clusterUsersGroupDNs").toString()));
      }
      if ((jsonObj.get("directoryType") != null && !jsonObj.get("directoryType").isJsonNull()) && !jsonObj.get("directoryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directoryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directoryType").toString()));
      }
      // validate the optional field `directoryType`
      if (jsonObj.get("directoryType") != null && !jsonObj.get("directoryType").isJsonNull()) {
        DirectoryTypeEnum.validateJsonElement(jsonObj.get("directoryType"));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("domainUserPassword") != null && !jsonObj.get("domainUserPassword").isJsonNull()) && !jsonObj.get("domainUserPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainUserPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainUserPassword").toString()));
      }
      if ((jsonObj.get("domainUsername") != null && !jsonObj.get("domainUsername").isJsonNull()) && !jsonObj.get("domainUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainUsername").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ldapsUrls") != null && !jsonObj.get("ldapsUrls").isJsonNull() && !jsonObj.get("ldapsUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldapsUrls` to be an array in the JSON string but got `%s`", jsonObj.get("ldapsUrls").toString()));
      }
      if ((jsonObj.get("msiResourceId") != null && !jsonObj.get("msiResourceId").isJsonNull()) && !jsonObj.get("msiResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msiResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msiResourceId").toString()));
      }
      if ((jsonObj.get("organizationalUnitDN") != null && !jsonObj.get("organizationalUnitDN").isJsonNull()) && !jsonObj.get("organizationalUnitDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationalUnitDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationalUnitDN").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecurityProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecurityProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecurityProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecurityProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<SecurityProfile>() {
           @Override
           public void write(JsonWriter out, SecurityProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecurityProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecurityProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecurityProfile
   * @throws IOException if the JSON string is invalid with respect to SecurityProfile
   */
  public static SecurityProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecurityProfile.class);
  }

  /**
   * Convert an instance of SecurityProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

