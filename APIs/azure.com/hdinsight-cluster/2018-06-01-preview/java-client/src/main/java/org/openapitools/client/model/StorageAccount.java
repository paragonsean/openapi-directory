/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The storage Account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:48.970479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageAccount {
  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  public static final String SERIALIZED_NAME_FILE_SYSTEM = "fileSystem";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM)
  private String fileSystem;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_MSI_RESOURCE_ID = "msiResourceId";
  @SerializedName(SERIALIZED_NAME_MSI_RESOURCE_ID)
  private String msiResourceId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public StorageAccount() {
  }

  public StorageAccount container(String container) {
    this.container = container;
    return this;
  }

  /**
   * The container in the storage account, only to be specified for WASB storage accounts.
   * @return container
   */
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }


  public StorageAccount fileSystem(String fileSystem) {
    this.fileSystem = fileSystem;
    return this;
  }

  /**
   * The filesystem, only to be specified for Azure Data Lake Storage Gen 2.
   * @return fileSystem
   */
  @javax.annotation.Nullable
  public String getFileSystem() {
    return fileSystem;
  }

  public void setFileSystem(String fileSystem) {
    this.fileSystem = fileSystem;
  }


  public StorageAccount isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Whether or not the storage account is the default storage account.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public StorageAccount key(String key) {
    this.key = key;
    return this;
  }

  /**
   * The storage account access key.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public StorageAccount msiResourceId(String msiResourceId) {
    this.msiResourceId = msiResourceId;
    return this;
  }

  /**
   * The managed identity (MSI) that is allowed to access the storage account, only to be specified for Azure Data Lake Storage Gen 2.
   * @return msiResourceId
   */
  @javax.annotation.Nullable
  public String getMsiResourceId() {
    return msiResourceId;
  }

  public void setMsiResourceId(String msiResourceId) {
    this.msiResourceId = msiResourceId;
  }


  public StorageAccount name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the storage account.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StorageAccount resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * The resource ID of storage account, only to be specified for Azure Data Lake Storage Gen 2.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageAccount storageAccount = (StorageAccount) o;
    return Objects.equals(this.container, storageAccount.container) &&
        Objects.equals(this.fileSystem, storageAccount.fileSystem) &&
        Objects.equals(this.isDefault, storageAccount.isDefault) &&
        Objects.equals(this.key, storageAccount.key) &&
        Objects.equals(this.msiResourceId, storageAccount.msiResourceId) &&
        Objects.equals(this.name, storageAccount.name) &&
        Objects.equals(this.resourceId, storageAccount.resourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(container, fileSystem, isDefault, key, msiResourceId, name, resourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageAccount {\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    fileSystem: ").append(toIndentedString(fileSystem)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    msiResourceId: ").append(toIndentedString(msiResourceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("container");
    openapiFields.add("fileSystem");
    openapiFields.add("isDefault");
    openapiFields.add("key");
    openapiFields.add("msiResourceId");
    openapiFields.add("name");
    openapiFields.add("resourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageAccount is not found in the empty JSON string", StorageAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) && !jsonObj.get("container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container").toString()));
      }
      if ((jsonObj.get("fileSystem") != null && !jsonObj.get("fileSystem").isJsonNull()) && !jsonObj.get("fileSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSystem").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("msiResourceId") != null && !jsonObj.get("msiResourceId").isJsonNull()) && !jsonObj.get("msiResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msiResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msiResourceId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageAccount>() {
           @Override
           public void write(JsonWriter out, StorageAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageAccount
   * @throws IOException if the JSON string is invalid with respect to StorageAccount
   */
  public static StorageAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageAccount.class);
  }

  /**
   * Convert an instance of StorageAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

