/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClusterDefinition;
import org.openapitools.client.model.ComputeProfile;
import org.openapitools.client.model.DiskEncryptionProperties;
import org.openapitools.client.model.KafkaRestProperties;
import org.openapitools.client.model.SecurityProfile;
import org.openapitools.client.model.StorageProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The cluster create parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:15:48.970479-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterCreateProperties {
  public static final String SERIALIZED_NAME_CLUSTER_DEFINITION = "clusterDefinition";
  @SerializedName(SERIALIZED_NAME_CLUSTER_DEFINITION)
  private ClusterDefinition clusterDefinition;

  public static final String SERIALIZED_NAME_CLUSTER_VERSION = "clusterVersion";
  @SerializedName(SERIALIZED_NAME_CLUSTER_VERSION)
  private String clusterVersion;

  public static final String SERIALIZED_NAME_COMPUTE_PROFILE = "computeProfile";
  @SerializedName(SERIALIZED_NAME_COMPUTE_PROFILE)
  private ComputeProfile computeProfile;

  public static final String SERIALIZED_NAME_DISK_ENCRYPTION_PROPERTIES = "diskEncryptionProperties";
  @SerializedName(SERIALIZED_NAME_DISK_ENCRYPTION_PROPERTIES)
  private DiskEncryptionProperties diskEncryptionProperties;

  public static final String SERIALIZED_NAME_KAFKA_REST_PROPERTIES = "kafkaRestProperties";
  @SerializedName(SERIALIZED_NAME_KAFKA_REST_PROPERTIES)
  private KafkaRestProperties kafkaRestProperties;

  /**
   * The type of operating system.
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_SECURITY_PROFILE = "securityProfile";
  @SerializedName(SERIALIZED_NAME_SECURITY_PROFILE)
  private SecurityProfile securityProfile;

  public static final String SERIALIZED_NAME_STORAGE_PROFILE = "storageProfile";
  @SerializedName(SERIALIZED_NAME_STORAGE_PROFILE)
  private StorageProfile storageProfile;

  /**
   * The cluster tier.
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    STANDARD("Standard"),
    
    PREMIUM("Premium");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  public ClusterCreateProperties() {
  }

  public ClusterCreateProperties clusterDefinition(ClusterDefinition clusterDefinition) {
    this.clusterDefinition = clusterDefinition;
    return this;
  }

  /**
   * Get clusterDefinition
   * @return clusterDefinition
   */
  @javax.annotation.Nullable
  public ClusterDefinition getClusterDefinition() {
    return clusterDefinition;
  }

  public void setClusterDefinition(ClusterDefinition clusterDefinition) {
    this.clusterDefinition = clusterDefinition;
  }


  public ClusterCreateProperties clusterVersion(String clusterVersion) {
    this.clusterVersion = clusterVersion;
    return this;
  }

  /**
   * The version of the cluster.
   * @return clusterVersion
   */
  @javax.annotation.Nullable
  public String getClusterVersion() {
    return clusterVersion;
  }

  public void setClusterVersion(String clusterVersion) {
    this.clusterVersion = clusterVersion;
  }


  public ClusterCreateProperties computeProfile(ComputeProfile computeProfile) {
    this.computeProfile = computeProfile;
    return this;
  }

  /**
   * Get computeProfile
   * @return computeProfile
   */
  @javax.annotation.Nullable
  public ComputeProfile getComputeProfile() {
    return computeProfile;
  }

  public void setComputeProfile(ComputeProfile computeProfile) {
    this.computeProfile = computeProfile;
  }


  public ClusterCreateProperties diskEncryptionProperties(DiskEncryptionProperties diskEncryptionProperties) {
    this.diskEncryptionProperties = diskEncryptionProperties;
    return this;
  }

  /**
   * Get diskEncryptionProperties
   * @return diskEncryptionProperties
   */
  @javax.annotation.Nullable
  public DiskEncryptionProperties getDiskEncryptionProperties() {
    return diskEncryptionProperties;
  }

  public void setDiskEncryptionProperties(DiskEncryptionProperties diskEncryptionProperties) {
    this.diskEncryptionProperties = diskEncryptionProperties;
  }


  public ClusterCreateProperties kafkaRestProperties(KafkaRestProperties kafkaRestProperties) {
    this.kafkaRestProperties = kafkaRestProperties;
    return this;
  }

  /**
   * Get kafkaRestProperties
   * @return kafkaRestProperties
   */
  @javax.annotation.Nullable
  public KafkaRestProperties getKafkaRestProperties() {
    return kafkaRestProperties;
  }

  public void setKafkaRestProperties(KafkaRestProperties kafkaRestProperties) {
    this.kafkaRestProperties = kafkaRestProperties;
  }


  public ClusterCreateProperties osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The type of operating system.
   * @return osType
   */
  @javax.annotation.Nullable
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  public ClusterCreateProperties securityProfile(SecurityProfile securityProfile) {
    this.securityProfile = securityProfile;
    return this;
  }

  /**
   * Get securityProfile
   * @return securityProfile
   */
  @javax.annotation.Nullable
  public SecurityProfile getSecurityProfile() {
    return securityProfile;
  }

  public void setSecurityProfile(SecurityProfile securityProfile) {
    this.securityProfile = securityProfile;
  }


  public ClusterCreateProperties storageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
    return this;
  }

  /**
   * Get storageProfile
   * @return storageProfile
   */
  @javax.annotation.Nullable
  public StorageProfile getStorageProfile() {
    return storageProfile;
  }

  public void setStorageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
  }


  public ClusterCreateProperties tier(TierEnum tier) {
    this.tier = tier;
    return this;
  }

  /**
   * The cluster tier.
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }

  public void setTier(TierEnum tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterCreateProperties clusterCreateProperties = (ClusterCreateProperties) o;
    return Objects.equals(this.clusterDefinition, clusterCreateProperties.clusterDefinition) &&
        Objects.equals(this.clusterVersion, clusterCreateProperties.clusterVersion) &&
        Objects.equals(this.computeProfile, clusterCreateProperties.computeProfile) &&
        Objects.equals(this.diskEncryptionProperties, clusterCreateProperties.diskEncryptionProperties) &&
        Objects.equals(this.kafkaRestProperties, clusterCreateProperties.kafkaRestProperties) &&
        Objects.equals(this.osType, clusterCreateProperties.osType) &&
        Objects.equals(this.securityProfile, clusterCreateProperties.securityProfile) &&
        Objects.equals(this.storageProfile, clusterCreateProperties.storageProfile) &&
        Objects.equals(this.tier, clusterCreateProperties.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterDefinition, clusterVersion, computeProfile, diskEncryptionProperties, kafkaRestProperties, osType, securityProfile, storageProfile, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterCreateProperties {\n");
    sb.append("    clusterDefinition: ").append(toIndentedString(clusterDefinition)).append("\n");
    sb.append("    clusterVersion: ").append(toIndentedString(clusterVersion)).append("\n");
    sb.append("    computeProfile: ").append(toIndentedString(computeProfile)).append("\n");
    sb.append("    diskEncryptionProperties: ").append(toIndentedString(diskEncryptionProperties)).append("\n");
    sb.append("    kafkaRestProperties: ").append(toIndentedString(kafkaRestProperties)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    securityProfile: ").append(toIndentedString(securityProfile)).append("\n");
    sb.append("    storageProfile: ").append(toIndentedString(storageProfile)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterDefinition");
    openapiFields.add("clusterVersion");
    openapiFields.add("computeProfile");
    openapiFields.add("diskEncryptionProperties");
    openapiFields.add("kafkaRestProperties");
    openapiFields.add("osType");
    openapiFields.add("securityProfile");
    openapiFields.add("storageProfile");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterCreateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterCreateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterCreateProperties is not found in the empty JSON string", ClusterCreateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterCreateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterCreateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clusterDefinition`
      if (jsonObj.get("clusterDefinition") != null && !jsonObj.get("clusterDefinition").isJsonNull()) {
        ClusterDefinition.validateJsonElement(jsonObj.get("clusterDefinition"));
      }
      if ((jsonObj.get("clusterVersion") != null && !jsonObj.get("clusterVersion").isJsonNull()) && !jsonObj.get("clusterVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterVersion").toString()));
      }
      // validate the optional field `computeProfile`
      if (jsonObj.get("computeProfile") != null && !jsonObj.get("computeProfile").isJsonNull()) {
        ComputeProfile.validateJsonElement(jsonObj.get("computeProfile"));
      }
      // validate the optional field `diskEncryptionProperties`
      if (jsonObj.get("diskEncryptionProperties") != null && !jsonObj.get("diskEncryptionProperties").isJsonNull()) {
        DiskEncryptionProperties.validateJsonElement(jsonObj.get("diskEncryptionProperties"));
      }
      // validate the optional field `kafkaRestProperties`
      if (jsonObj.get("kafkaRestProperties") != null && !jsonObj.get("kafkaRestProperties").isJsonNull()) {
        KafkaRestProperties.validateJsonElement(jsonObj.get("kafkaRestProperties"));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the optional field `osType`
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) {
        OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      }
      // validate the optional field `securityProfile`
      if (jsonObj.get("securityProfile") != null && !jsonObj.get("securityProfile").isJsonNull()) {
        SecurityProfile.validateJsonElement(jsonObj.get("securityProfile"));
      }
      // validate the optional field `storageProfile`
      if (jsonObj.get("storageProfile") != null && !jsonObj.get("storageProfile").isJsonNull()) {
        StorageProfile.validateJsonElement(jsonObj.get("storageProfile"));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterCreateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterCreateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterCreateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterCreateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterCreateProperties>() {
           @Override
           public void write(JsonWriter out, ClusterCreateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterCreateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterCreateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterCreateProperties
   * @throws IOException if the JSON string is invalid with respect to ClusterCreateProperties
   */
  public static ClusterCreateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterCreateProperties.class);
  }

  /**
   * Convert an instance of ClusterCreateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

