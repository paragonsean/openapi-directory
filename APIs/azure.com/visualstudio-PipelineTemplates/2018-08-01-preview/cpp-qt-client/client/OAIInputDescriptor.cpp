/**
 * Visual Studio Projects Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputDescriptor::OAIInputDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputDescriptor::OAIInputDescriptor() {
    this->initializeModel();
}

OAIInputDescriptor::~OAIInputDescriptor() {}

void OAIInputDescriptor::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_possible_values_isSet = false;
    m_possible_values_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInputDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputDescriptor::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_possible_values_isValid = ::OpenAPI::fromJsonValue(m_possible_values, json[QString("possibleValues")]);
    m_possible_values_isSet = !json[QString("possibleValues")].isNull() && m_possible_values_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInputDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_possible_values.size() > 0) {
        obj.insert(QString("possibleValues"), ::OpenAPI::toJsonValue(m_possible_values));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIInputDescriptor::getDescription() const {
    return m_description;
}
void OAIInputDescriptor::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInputDescriptor::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInputDescriptor::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIInputDescriptor::getId() const {
    return m_id;
}
void OAIInputDescriptor::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInputDescriptor::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInputDescriptor::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIInputValue> OAIInputDescriptor::getPossibleValues() const {
    return m_possible_values;
}
void OAIInputDescriptor::setPossibleValues(const QList<OAIInputValue> &possible_values) {
    m_possible_values = possible_values;
    m_possible_values_isSet = true;
}

bool OAIInputDescriptor::is_possible_values_Set() const{
    return m_possible_values_isSet;
}

bool OAIInputDescriptor::is_possible_values_Valid() const{
    return m_possible_values_isValid;
}

QString OAIInputDescriptor::getType() const {
    return m_type;
}
void OAIInputDescriptor::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInputDescriptor::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInputDescriptor::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInputDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
