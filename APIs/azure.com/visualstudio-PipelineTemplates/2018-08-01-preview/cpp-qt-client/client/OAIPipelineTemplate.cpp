/**
 * Visual Studio Projects Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineTemplate::OAIPipelineTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineTemplate::OAIPipelineTemplate() {
    this->initializeModel();
}

OAIPipelineTemplate::~OAIPipelineTemplate() {}

void OAIPipelineTemplate::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;
}

void OAIPipelineTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineTemplate::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("inputs")]);
    m_inputs_isSet = !json[QString("inputs")].isNull() && m_inputs_isValid;
}

QString OAIPipelineTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inputs.size() > 0) {
        obj.insert(QString("inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    return obj;
}

QString OAIPipelineTemplate::getDescription() const {
    return m_description;
}
void OAIPipelineTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPipelineTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPipelineTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPipelineTemplate::getId() const {
    return m_id;
}
void OAIPipelineTemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPipelineTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPipelineTemplate::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIInputDescriptor> OAIPipelineTemplate::getInputs() const {
    return m_inputs;
}
void OAIPipelineTemplate::setInputs(const QList<OAIInputDescriptor> &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIPipelineTemplate::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIPipelineTemplate::is_inputs_Valid() const{
    return m_inputs_isValid;
}

bool OAIPipelineTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
