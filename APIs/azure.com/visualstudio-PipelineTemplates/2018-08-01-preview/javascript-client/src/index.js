/**
 * Visual Studio Projects Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import InputDescriptor from './model/InputDescriptor';
import InputValue from './model/InputValue';
import PipelineTemplate from './model/PipelineTemplate';
import PipelineTemplateResourceListResult from './model/PipelineTemplateResourceListResult';
import PipelineTemplatesApi from './api/PipelineTemplatesApi';


/**
* Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var VisualStudioProjectsResourceProviderClient = require('index'); // See note below*.
* var xxxSvc = new VisualStudioProjectsResourceProviderClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new VisualStudioProjectsResourceProviderClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new VisualStudioProjectsResourceProviderClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new VisualStudioProjectsResourceProviderClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2018-08-01-preview
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The InputDescriptor model constructor.
     * @property {module:model/InputDescriptor}
     */
    InputDescriptor,

    /**
     * The InputValue model constructor.
     * @property {module:model/InputValue}
     */
    InputValue,

    /**
     * The PipelineTemplate model constructor.
     * @property {module:model/PipelineTemplate}
     */
    PipelineTemplate,

    /**
     * The PipelineTemplateResourceListResult model constructor.
     * @property {module:model/PipelineTemplateResourceListResult}
     */
    PipelineTemplateResourceListResult,

    /**
    * The PipelineTemplatesApi service constructor.
    * @property {module:api/PipelineTemplatesApi}
    */
    PipelineTemplatesApi
};
