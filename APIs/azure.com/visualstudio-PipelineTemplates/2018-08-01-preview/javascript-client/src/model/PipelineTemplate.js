/**
 * Visual Studio Projects Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2018-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputDescriptor from './InputDescriptor';

/**
 * The PipelineTemplate model module.
 * @module model/PipelineTemplate
 * @version 2018-08-01-preview
 */
class PipelineTemplate {
    /**
     * Constructs a new <code>PipelineTemplate</code>.
     * Defines a pipeline template resource.
     * @alias module:model/PipelineTemplate
     * @param id {String} Unique id of pipeline template.
     */
    constructor(id) { 
        
        PipelineTemplate.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>PipelineTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipelineTemplate} obj Optional instance to populate.
     * @return {module:model/PipelineTemplate} The populated <code>PipelineTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineTemplate();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inputs')) {
                obj['inputs'] = ApiClient.convertToType(data['inputs'], [InputDescriptor]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipelineTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipelineTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PipelineTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['inputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputs'])) {
                throw new Error("Expected the field `inputs` to be an array in the JSON data but got " + data['inputs']);
            }
            // validate the optional field `inputs` (array)
            for (const item of data['inputs']) {
                InputDescriptor.validateJSON(item);
            };
        }

        return true;
    }


}

PipelineTemplate.RequiredProperties = ["id"];

/**
 * Description of the pipeline which this template enables.
 * @member {String} description
 */
PipelineTemplate.prototype['description'] = undefined;

/**
 * Unique id of pipeline template.
 * @member {String} id
 */
PipelineTemplate.prototype['id'] = undefined;

/**
 * Inputs required by this template to create pipeline.
 * @member {Array.<module:model/InputDescriptor>} inputs
 */
PipelineTemplate.prototype['inputs'] = undefined;






export default PipelineTemplate;

