# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TopQueryStatisticsInputProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_function: str=None, aggregation_window: str=None, number_of_top_queries: int=None, observation_end_time: datetime=None, observation_start_time: datetime=None, observed_metric: str=None):
        """TopQueryStatisticsInputProperties - a model defined in OpenAPI

        :param aggregation_function: The aggregation_function of this TopQueryStatisticsInputProperties.
        :param aggregation_window: The aggregation_window of this TopQueryStatisticsInputProperties.
        :param number_of_top_queries: The number_of_top_queries of this TopQueryStatisticsInputProperties.
        :param observation_end_time: The observation_end_time of this TopQueryStatisticsInputProperties.
        :param observation_start_time: The observation_start_time of this TopQueryStatisticsInputProperties.
        :param observed_metric: The observed_metric of this TopQueryStatisticsInputProperties.
        """
        self.openapi_types = {
            'aggregation_function': str,
            'aggregation_window': str,
            'number_of_top_queries': int,
            'observation_end_time': datetime,
            'observation_start_time': datetime,
            'observed_metric': str
        }

        self.attribute_map = {
            'aggregation_function': 'aggregationFunction',
            'aggregation_window': 'aggregationWindow',
            'number_of_top_queries': 'numberOfTopQueries',
            'observation_end_time': 'observationEndTime',
            'observation_start_time': 'observationStartTime',
            'observed_metric': 'observedMetric'
        }

        self._aggregation_function = aggregation_function
        self._aggregation_window = aggregation_window
        self._number_of_top_queries = number_of_top_queries
        self._observation_end_time = observation_end_time
        self._observation_start_time = observation_start_time
        self._observed_metric = observed_metric

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopQueryStatisticsInputProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopQueryStatisticsInputProperties of this TopQueryStatisticsInputProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_function(self):
        """Gets the aggregation_function of this TopQueryStatisticsInputProperties.

        Aggregation function name.

        :return: The aggregation_function of this TopQueryStatisticsInputProperties.
        :rtype: str
        """
        return self._aggregation_function

    @aggregation_function.setter
    def aggregation_function(self, aggregation_function):
        """Sets the aggregation_function of this TopQueryStatisticsInputProperties.

        Aggregation function name.

        :param aggregation_function: The aggregation_function of this TopQueryStatisticsInputProperties.
        :type aggregation_function: str
        """
        if aggregation_function is None:
            raise ValueError("Invalid value for `aggregation_function`, must not be `None`")

        self._aggregation_function = aggregation_function

    @property
    def aggregation_window(self):
        """Gets the aggregation_window of this TopQueryStatisticsInputProperties.

        Aggregation interval type in ISO 8601 format.

        :return: The aggregation_window of this TopQueryStatisticsInputProperties.
        :rtype: str
        """
        return self._aggregation_window

    @aggregation_window.setter
    def aggregation_window(self, aggregation_window):
        """Sets the aggregation_window of this TopQueryStatisticsInputProperties.

        Aggregation interval type in ISO 8601 format.

        :param aggregation_window: The aggregation_window of this TopQueryStatisticsInputProperties.
        :type aggregation_window: str
        """
        if aggregation_window is None:
            raise ValueError("Invalid value for `aggregation_window`, must not be `None`")

        self._aggregation_window = aggregation_window

    @property
    def number_of_top_queries(self):
        """Gets the number_of_top_queries of this TopQueryStatisticsInputProperties.

        Max number of top queries to return.

        :return: The number_of_top_queries of this TopQueryStatisticsInputProperties.
        :rtype: int
        """
        return self._number_of_top_queries

    @number_of_top_queries.setter
    def number_of_top_queries(self, number_of_top_queries):
        """Sets the number_of_top_queries of this TopQueryStatisticsInputProperties.

        Max number of top queries to return.

        :param number_of_top_queries: The number_of_top_queries of this TopQueryStatisticsInputProperties.
        :type number_of_top_queries: int
        """
        if number_of_top_queries is None:
            raise ValueError("Invalid value for `number_of_top_queries`, must not be `None`")

        self._number_of_top_queries = number_of_top_queries

    @property
    def observation_end_time(self):
        """Gets the observation_end_time of this TopQueryStatisticsInputProperties.

        Observation end time.

        :return: The observation_end_time of this TopQueryStatisticsInputProperties.
        :rtype: datetime
        """
        return self._observation_end_time

    @observation_end_time.setter
    def observation_end_time(self, observation_end_time):
        """Sets the observation_end_time of this TopQueryStatisticsInputProperties.

        Observation end time.

        :param observation_end_time: The observation_end_time of this TopQueryStatisticsInputProperties.
        :type observation_end_time: datetime
        """
        if observation_end_time is None:
            raise ValueError("Invalid value for `observation_end_time`, must not be `None`")

        self._observation_end_time = observation_end_time

    @property
    def observation_start_time(self):
        """Gets the observation_start_time of this TopQueryStatisticsInputProperties.

        Observation start time.

        :return: The observation_start_time of this TopQueryStatisticsInputProperties.
        :rtype: datetime
        """
        return self._observation_start_time

    @observation_start_time.setter
    def observation_start_time(self, observation_start_time):
        """Sets the observation_start_time of this TopQueryStatisticsInputProperties.

        Observation start time.

        :param observation_start_time: The observation_start_time of this TopQueryStatisticsInputProperties.
        :type observation_start_time: datetime
        """
        if observation_start_time is None:
            raise ValueError("Invalid value for `observation_start_time`, must not be `None`")

        self._observation_start_time = observation_start_time

    @property
    def observed_metric(self):
        """Gets the observed_metric of this TopQueryStatisticsInputProperties.

        Observed metric name.

        :return: The observed_metric of this TopQueryStatisticsInputProperties.
        :rtype: str
        """
        return self._observed_metric

    @observed_metric.setter
    def observed_metric(self, observed_metric):
        """Sets the observed_metric of this TopQueryStatisticsInputProperties.

        Observed metric name.

        :param observed_metric: The observed_metric of this TopQueryStatisticsInputProperties.
        :type observed_metric: str
        """
        if observed_metric is None:
            raise ValueError("Invalid value for `observed_metric`, must not be `None`")

        self._observed_metric = observed_metric
