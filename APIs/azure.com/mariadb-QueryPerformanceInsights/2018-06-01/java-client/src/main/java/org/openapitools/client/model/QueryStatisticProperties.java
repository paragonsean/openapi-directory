/*
 * MariaDBManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a query statistic.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:28.274226-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryStatisticProperties {
  public static final String SERIALIZED_NAME_AGGREGATION_FUNCTION = "aggregationFunction";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_FUNCTION)
  private String aggregationFunction;

  public static final String SERIALIZED_NAME_DATABASE_NAMES = "databaseNames";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAMES)
  private List<String> databaseNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_METRIC_DISPLAY_NAME = "metricDisplayName";
  @SerializedName(SERIALIZED_NAME_METRIC_DISPLAY_NAME)
  private String metricDisplayName;

  public static final String SERIALIZED_NAME_METRIC_NAME = "metricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_METRIC_VALUE = "metricValue";
  @SerializedName(SERIALIZED_NAME_METRIC_VALUE)
  private Double metricValue;

  public static final String SERIALIZED_NAME_METRIC_VALUE_UNIT = "metricValueUnit";
  @SerializedName(SERIALIZED_NAME_METRIC_VALUE_UNIT)
  private String metricValueUnit;

  public static final String SERIALIZED_NAME_QUERY_EXECUTION_COUNT = "queryExecutionCount";
  @SerializedName(SERIALIZED_NAME_QUERY_EXECUTION_COUNT)
  private Long queryExecutionCount;

  public static final String SERIALIZED_NAME_QUERY_ID = "queryId";
  @SerializedName(SERIALIZED_NAME_QUERY_ID)
  private String queryId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public QueryStatisticProperties() {
  }

  public QueryStatisticProperties aggregationFunction(String aggregationFunction) {
    this.aggregationFunction = aggregationFunction;
    return this;
  }

  /**
   * Aggregation function name.
   * @return aggregationFunction
   */
  @javax.annotation.Nullable
  public String getAggregationFunction() {
    return aggregationFunction;
  }

  public void setAggregationFunction(String aggregationFunction) {
    this.aggregationFunction = aggregationFunction;
  }


  public QueryStatisticProperties databaseNames(List<String> databaseNames) {
    this.databaseNames = databaseNames;
    return this;
  }

  public QueryStatisticProperties addDatabaseNamesItem(String databaseNamesItem) {
    if (this.databaseNames == null) {
      this.databaseNames = new ArrayList<>();
    }
    this.databaseNames.add(databaseNamesItem);
    return this;
  }

  /**
   * The list of database names.
   * @return databaseNames
   */
  @javax.annotation.Nullable
  public List<String> getDatabaseNames() {
    return databaseNames;
  }

  public void setDatabaseNames(List<String> databaseNames) {
    this.databaseNames = databaseNames;
  }


  public QueryStatisticProperties endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Observation end time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public QueryStatisticProperties metricDisplayName(String metricDisplayName) {
    this.metricDisplayName = metricDisplayName;
    return this;
  }

  /**
   * Metric display name.
   * @return metricDisplayName
   */
  @javax.annotation.Nullable
  public String getMetricDisplayName() {
    return metricDisplayName;
  }

  public void setMetricDisplayName(String metricDisplayName) {
    this.metricDisplayName = metricDisplayName;
  }


  public QueryStatisticProperties metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Metric name.
   * @return metricName
   */
  @javax.annotation.Nullable
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public QueryStatisticProperties metricValue(Double metricValue) {
    this.metricValue = metricValue;
    return this;
  }

  /**
   * Metric value.
   * @return metricValue
   */
  @javax.annotation.Nullable
  public Double getMetricValue() {
    return metricValue;
  }

  public void setMetricValue(Double metricValue) {
    this.metricValue = metricValue;
  }


  public QueryStatisticProperties metricValueUnit(String metricValueUnit) {
    this.metricValueUnit = metricValueUnit;
    return this;
  }

  /**
   * Metric value unit.
   * @return metricValueUnit
   */
  @javax.annotation.Nullable
  public String getMetricValueUnit() {
    return metricValueUnit;
  }

  public void setMetricValueUnit(String metricValueUnit) {
    this.metricValueUnit = metricValueUnit;
  }


  public QueryStatisticProperties queryExecutionCount(Long queryExecutionCount) {
    this.queryExecutionCount = queryExecutionCount;
    return this;
  }

  /**
   * Number of query executions in this time interval.
   * @return queryExecutionCount
   */
  @javax.annotation.Nullable
  public Long getQueryExecutionCount() {
    return queryExecutionCount;
  }

  public void setQueryExecutionCount(Long queryExecutionCount) {
    this.queryExecutionCount = queryExecutionCount;
  }


  public QueryStatisticProperties queryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

  /**
   * Database query identifier.
   * @return queryId
   */
  @javax.annotation.Nullable
  public String getQueryId() {
    return queryId;
  }

  public void setQueryId(String queryId) {
    this.queryId = queryId;
  }


  public QueryStatisticProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Observation start time.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryStatisticProperties queryStatisticProperties = (QueryStatisticProperties) o;
    return Objects.equals(this.aggregationFunction, queryStatisticProperties.aggregationFunction) &&
        Objects.equals(this.databaseNames, queryStatisticProperties.databaseNames) &&
        Objects.equals(this.endTime, queryStatisticProperties.endTime) &&
        Objects.equals(this.metricDisplayName, queryStatisticProperties.metricDisplayName) &&
        Objects.equals(this.metricName, queryStatisticProperties.metricName) &&
        Objects.equals(this.metricValue, queryStatisticProperties.metricValue) &&
        Objects.equals(this.metricValueUnit, queryStatisticProperties.metricValueUnit) &&
        Objects.equals(this.queryExecutionCount, queryStatisticProperties.queryExecutionCount) &&
        Objects.equals(this.queryId, queryStatisticProperties.queryId) &&
        Objects.equals(this.startTime, queryStatisticProperties.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationFunction, databaseNames, endTime, metricDisplayName, metricName, metricValue, metricValueUnit, queryExecutionCount, queryId, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryStatisticProperties {\n");
    sb.append("    aggregationFunction: ").append(toIndentedString(aggregationFunction)).append("\n");
    sb.append("    databaseNames: ").append(toIndentedString(databaseNames)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    metricDisplayName: ").append(toIndentedString(metricDisplayName)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    metricValue: ").append(toIndentedString(metricValue)).append("\n");
    sb.append("    metricValueUnit: ").append(toIndentedString(metricValueUnit)).append("\n");
    sb.append("    queryExecutionCount: ").append(toIndentedString(queryExecutionCount)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationFunction");
    openapiFields.add("databaseNames");
    openapiFields.add("endTime");
    openapiFields.add("metricDisplayName");
    openapiFields.add("metricName");
    openapiFields.add("metricValue");
    openapiFields.add("metricValueUnit");
    openapiFields.add("queryExecutionCount");
    openapiFields.add("queryId");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryStatisticProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryStatisticProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryStatisticProperties is not found in the empty JSON string", QueryStatisticProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryStatisticProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryStatisticProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregationFunction") != null && !jsonObj.get("aggregationFunction").isJsonNull()) && !jsonObj.get("aggregationFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationFunction").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("databaseNames") != null && !jsonObj.get("databaseNames").isJsonNull() && !jsonObj.get("databaseNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseNames` to be an array in the JSON string but got `%s`", jsonObj.get("databaseNames").toString()));
      }
      if ((jsonObj.get("metricDisplayName") != null && !jsonObj.get("metricDisplayName").isJsonNull()) && !jsonObj.get("metricDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricDisplayName").toString()));
      }
      if ((jsonObj.get("metricName") != null && !jsonObj.get("metricName").isJsonNull()) && !jsonObj.get("metricName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricName").toString()));
      }
      if ((jsonObj.get("metricValueUnit") != null && !jsonObj.get("metricValueUnit").isJsonNull()) && !jsonObj.get("metricValueUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricValueUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricValueUnit").toString()));
      }
      if ((jsonObj.get("queryId") != null && !jsonObj.get("queryId").isJsonNull()) && !jsonObj.get("queryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryStatisticProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryStatisticProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryStatisticProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryStatisticProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryStatisticProperties>() {
           @Override
           public void write(JsonWriter out, QueryStatisticProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryStatisticProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryStatisticProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryStatisticProperties
   * @throws IOException if the JSON string is invalid with respect to QueryStatisticProperties
   */
  public static QueryStatisticProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryStatisticProperties.class);
  }

  /**
   * Convert an instance of QueryStatisticProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

