/*
 * MariaDBManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties for input to get wait statistics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:08:28.274226-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WaitStatisticsInputProperties {
  public static final String SERIALIZED_NAME_AGGREGATION_WINDOW = "aggregationWindow";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_WINDOW)
  private String aggregationWindow;

  public static final String SERIALIZED_NAME_OBSERVATION_END_TIME = "observationEndTime";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_END_TIME)
  private OffsetDateTime observationEndTime;

  public static final String SERIALIZED_NAME_OBSERVATION_START_TIME = "observationStartTime";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_START_TIME)
  private OffsetDateTime observationStartTime;

  public WaitStatisticsInputProperties() {
  }

  public WaitStatisticsInputProperties aggregationWindow(String aggregationWindow) {
    this.aggregationWindow = aggregationWindow;
    return this;
  }

  /**
   * Aggregation interval type in ISO 8601 format.
   * @return aggregationWindow
   */
  @javax.annotation.Nonnull
  public String getAggregationWindow() {
    return aggregationWindow;
  }

  public void setAggregationWindow(String aggregationWindow) {
    this.aggregationWindow = aggregationWindow;
  }


  public WaitStatisticsInputProperties observationEndTime(OffsetDateTime observationEndTime) {
    this.observationEndTime = observationEndTime;
    return this;
  }

  /**
   * Observation end time.
   * @return observationEndTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getObservationEndTime() {
    return observationEndTime;
  }

  public void setObservationEndTime(OffsetDateTime observationEndTime) {
    this.observationEndTime = observationEndTime;
  }


  public WaitStatisticsInputProperties observationStartTime(OffsetDateTime observationStartTime) {
    this.observationStartTime = observationStartTime;
    return this;
  }

  /**
   * Observation start time.
   * @return observationStartTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getObservationStartTime() {
    return observationStartTime;
  }

  public void setObservationStartTime(OffsetDateTime observationStartTime) {
    this.observationStartTime = observationStartTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaitStatisticsInputProperties waitStatisticsInputProperties = (WaitStatisticsInputProperties) o;
    return Objects.equals(this.aggregationWindow, waitStatisticsInputProperties.aggregationWindow) &&
        Objects.equals(this.observationEndTime, waitStatisticsInputProperties.observationEndTime) &&
        Objects.equals(this.observationStartTime, waitStatisticsInputProperties.observationStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationWindow, observationEndTime, observationStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaitStatisticsInputProperties {\n");
    sb.append("    aggregationWindow: ").append(toIndentedString(aggregationWindow)).append("\n");
    sb.append("    observationEndTime: ").append(toIndentedString(observationEndTime)).append("\n");
    sb.append("    observationStartTime: ").append(toIndentedString(observationStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationWindow");
    openapiFields.add("observationEndTime");
    openapiFields.add("observationStartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aggregationWindow");
    openapiRequiredFields.add("observationEndTime");
    openapiRequiredFields.add("observationStartTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WaitStatisticsInputProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaitStatisticsInputProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaitStatisticsInputProperties is not found in the empty JSON string", WaitStatisticsInputProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaitStatisticsInputProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaitStatisticsInputProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WaitStatisticsInputProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("aggregationWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationWindow").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaitStatisticsInputProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaitStatisticsInputProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaitStatisticsInputProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaitStatisticsInputProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WaitStatisticsInputProperties>() {
           @Override
           public void write(JsonWriter out, WaitStatisticsInputProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaitStatisticsInputProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WaitStatisticsInputProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WaitStatisticsInputProperties
   * @throws IOException if the JSON string is invalid with respect to WaitStatisticsInputProperties
   */
  public static WaitStatisticsInputProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaitStatisticsInputProperties.class);
  }

  /**
   * Convert an instance of WaitStatisticsInputProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

