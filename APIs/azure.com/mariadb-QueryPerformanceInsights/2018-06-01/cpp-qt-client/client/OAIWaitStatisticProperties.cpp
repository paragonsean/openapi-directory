/**
 * MariaDBManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaitStatisticProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaitStatisticProperties::OAIWaitStatisticProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaitStatisticProperties::OAIWaitStatisticProperties() {
    this->initializeModel();
}

OAIWaitStatisticProperties::~OAIWaitStatisticProperties() {}

void OAIWaitStatisticProperties::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_event_type_name_isSet = false;
    m_event_type_name_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_total_time_in_ms_isSet = false;
    m_total_time_in_ms_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIWaitStatisticProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaitStatisticProperties::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_event_type_name_isValid = ::OpenAPI::fromJsonValue(m_event_type_name, json[QString("eventTypeName")]);
    m_event_type_name_isSet = !json[QString("eventTypeName")].isNull() && m_event_type_name_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("queryId")]);
    m_query_id_isSet = !json[QString("queryId")].isNull() && m_query_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_total_time_in_ms_isValid = ::OpenAPI::fromJsonValue(m_total_time_in_ms, json[QString("totalTimeInMs")]);
    m_total_time_in_ms_isSet = !json[QString("totalTimeInMs")].isNull() && m_total_time_in_ms_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIWaitStatisticProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaitStatisticProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_event_type_name_isSet) {
        obj.insert(QString("eventTypeName"), ::OpenAPI::toJsonValue(m_event_type_name));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("queryId"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_total_time_in_ms_isSet) {
        obj.insert(QString("totalTimeInMs"), ::OpenAPI::toJsonValue(m_total_time_in_ms));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint64 OAIWaitStatisticProperties::getCount() const {
    return m_count;
}
void OAIWaitStatisticProperties::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIWaitStatisticProperties::is_count_Set() const{
    return m_count_isSet;
}

bool OAIWaitStatisticProperties::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIWaitStatisticProperties::getDatabaseName() const {
    return m_database_name;
}
void OAIWaitStatisticProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIWaitStatisticProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIWaitStatisticProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QDateTime OAIWaitStatisticProperties::getEndTime() const {
    return m_end_time;
}
void OAIWaitStatisticProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIWaitStatisticProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIWaitStatisticProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIWaitStatisticProperties::getEventName() const {
    return m_event_name;
}
void OAIWaitStatisticProperties::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIWaitStatisticProperties::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIWaitStatisticProperties::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIWaitStatisticProperties::getEventTypeName() const {
    return m_event_type_name;
}
void OAIWaitStatisticProperties::setEventTypeName(const QString &event_type_name) {
    m_event_type_name = event_type_name;
    m_event_type_name_isSet = true;
}

bool OAIWaitStatisticProperties::is_event_type_name_Set() const{
    return m_event_type_name_isSet;
}

bool OAIWaitStatisticProperties::is_event_type_name_Valid() const{
    return m_event_type_name_isValid;
}

qint64 OAIWaitStatisticProperties::getQueryId() const {
    return m_query_id;
}
void OAIWaitStatisticProperties::setQueryId(const qint64 &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAIWaitStatisticProperties::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAIWaitStatisticProperties::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QDateTime OAIWaitStatisticProperties::getStartTime() const {
    return m_start_time;
}
void OAIWaitStatisticProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIWaitStatisticProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIWaitStatisticProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

double OAIWaitStatisticProperties::getTotalTimeInMs() const {
    return m_total_time_in_ms;
}
void OAIWaitStatisticProperties::setTotalTimeInMs(const double &total_time_in_ms) {
    m_total_time_in_ms = total_time_in_ms;
    m_total_time_in_ms_isSet = true;
}

bool OAIWaitStatisticProperties::is_total_time_in_ms_Set() const{
    return m_total_time_in_ms_isSet;
}

bool OAIWaitStatisticProperties::is_total_time_in_ms_Valid() const{
    return m_total_time_in_ms_isValid;
}

qint64 OAIWaitStatisticProperties::getUserId() const {
    return m_user_id;
}
void OAIWaitStatisticProperties::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIWaitStatisticProperties::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIWaitStatisticProperties::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIWaitStatisticProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_in_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaitStatisticProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
