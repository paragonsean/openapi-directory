/**
 * MariaDBManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaitStatisticsInputProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaitStatisticsInputProperties::OAIWaitStatisticsInputProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaitStatisticsInputProperties::OAIWaitStatisticsInputProperties() {
    this->initializeModel();
}

OAIWaitStatisticsInputProperties::~OAIWaitStatisticsInputProperties() {}

void OAIWaitStatisticsInputProperties::initializeModel() {

    m_aggregation_window_isSet = false;
    m_aggregation_window_isValid = false;

    m_observation_end_time_isSet = false;
    m_observation_end_time_isValid = false;

    m_observation_start_time_isSet = false;
    m_observation_start_time_isValid = false;
}

void OAIWaitStatisticsInputProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaitStatisticsInputProperties::fromJsonObject(QJsonObject json) {

    m_aggregation_window_isValid = ::OpenAPI::fromJsonValue(m_aggregation_window, json[QString("aggregationWindow")]);
    m_aggregation_window_isSet = !json[QString("aggregationWindow")].isNull() && m_aggregation_window_isValid;

    m_observation_end_time_isValid = ::OpenAPI::fromJsonValue(m_observation_end_time, json[QString("observationEndTime")]);
    m_observation_end_time_isSet = !json[QString("observationEndTime")].isNull() && m_observation_end_time_isValid;

    m_observation_start_time_isValid = ::OpenAPI::fromJsonValue(m_observation_start_time, json[QString("observationStartTime")]);
    m_observation_start_time_isSet = !json[QString("observationStartTime")].isNull() && m_observation_start_time_isValid;
}

QString OAIWaitStatisticsInputProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaitStatisticsInputProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_window_isSet) {
        obj.insert(QString("aggregationWindow"), ::OpenAPI::toJsonValue(m_aggregation_window));
    }
    if (m_observation_end_time_isSet) {
        obj.insert(QString("observationEndTime"), ::OpenAPI::toJsonValue(m_observation_end_time));
    }
    if (m_observation_start_time_isSet) {
        obj.insert(QString("observationStartTime"), ::OpenAPI::toJsonValue(m_observation_start_time));
    }
    return obj;
}

QString OAIWaitStatisticsInputProperties::getAggregationWindow() const {
    return m_aggregation_window;
}
void OAIWaitStatisticsInputProperties::setAggregationWindow(const QString &aggregation_window) {
    m_aggregation_window = aggregation_window;
    m_aggregation_window_isSet = true;
}

bool OAIWaitStatisticsInputProperties::is_aggregation_window_Set() const{
    return m_aggregation_window_isSet;
}

bool OAIWaitStatisticsInputProperties::is_aggregation_window_Valid() const{
    return m_aggregation_window_isValid;
}

QDateTime OAIWaitStatisticsInputProperties::getObservationEndTime() const {
    return m_observation_end_time;
}
void OAIWaitStatisticsInputProperties::setObservationEndTime(const QDateTime &observation_end_time) {
    m_observation_end_time = observation_end_time;
    m_observation_end_time_isSet = true;
}

bool OAIWaitStatisticsInputProperties::is_observation_end_time_Set() const{
    return m_observation_end_time_isSet;
}

bool OAIWaitStatisticsInputProperties::is_observation_end_time_Valid() const{
    return m_observation_end_time_isValid;
}

QDateTime OAIWaitStatisticsInputProperties::getObservationStartTime() const {
    return m_observation_start_time;
}
void OAIWaitStatisticsInputProperties::setObservationStartTime(const QDateTime &observation_start_time) {
    m_observation_start_time = observation_start_time;
    m_observation_start_time_isSet = true;
}

bool OAIWaitStatisticsInputProperties::is_observation_start_time_Set() const{
    return m_observation_start_time_isSet;
}

bool OAIWaitStatisticsInputProperties::is_observation_start_time_Valid() const{
    return m_observation_start_time_isValid;
}

bool OAIWaitStatisticsInputProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaitStatisticsInputProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aggregation_window_isValid && m_observation_end_time_isValid && m_observation_start_time_isValid && true;
}

} // namespace OpenAPI
