# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerServiceCustomProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, orchestrator: str=None):
        """ContainerServiceCustomProfile - a model defined in OpenAPI

        :param orchestrator: The orchestrator of this ContainerServiceCustomProfile.
        """
        self.openapi_types = {
            'orchestrator': str
        }

        self.attribute_map = {
            'orchestrator': 'orchestrator'
        }

        self._orchestrator = orchestrator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerServiceCustomProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerServiceCustomProfile of this ContainerServiceCustomProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orchestrator(self):
        """Gets the orchestrator of this ContainerServiceCustomProfile.

        The name of the custom orchestrator to use.

        :return: The orchestrator of this ContainerServiceCustomProfile.
        :rtype: str
        """
        return self._orchestrator

    @orchestrator.setter
    def orchestrator(self, orchestrator):
        """Sets the orchestrator of this ContainerServiceCustomProfile.

        The name of the custom orchestrator to use.

        :param orchestrator: The orchestrator of this ContainerServiceCustomProfile.
        :type orchestrator: str
        """
        if orchestrator is None:
            raise ValueError("Invalid value for `orchestrator`, must not be `None`")

        self._orchestrator = orchestrator
