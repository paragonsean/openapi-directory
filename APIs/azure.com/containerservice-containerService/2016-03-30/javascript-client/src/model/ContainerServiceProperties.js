/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2016-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerServiceAgentPoolProfile from './ContainerServiceAgentPoolProfile';
import ContainerServiceDiagnosticsProfile from './ContainerServiceDiagnosticsProfile';
import ContainerServiceLinuxProfile from './ContainerServiceLinuxProfile';
import ContainerServiceMasterProfile from './ContainerServiceMasterProfile';
import ContainerServiceOrchestratorProfile from './ContainerServiceOrchestratorProfile';
import ContainerServiceWindowsProfile from './ContainerServiceWindowsProfile';

/**
 * The ContainerServiceProperties model module.
 * @module model/ContainerServiceProperties
 * @version 2016-03-30
 */
class ContainerServiceProperties {
    /**
     * Constructs a new <code>ContainerServiceProperties</code>.
     * Properties of the container service.
     * @alias module:model/ContainerServiceProperties
     * @param agentPoolProfiles {Array.<module:model/ContainerServiceAgentPoolProfile>} Properties of the agent pool.
     * @param linuxProfile {module:model/ContainerServiceLinuxProfile} 
     * @param masterProfile {module:model/ContainerServiceMasterProfile} 
     */
    constructor(agentPoolProfiles, linuxProfile, masterProfile) { 
        
        ContainerServiceProperties.initialize(this, agentPoolProfiles, linuxProfile, masterProfile);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, agentPoolProfiles, linuxProfile, masterProfile) { 
        obj['agentPoolProfiles'] = agentPoolProfiles;
        obj['linuxProfile'] = linuxProfile;
        obj['masterProfile'] = masterProfile;
    }

    /**
     * Constructs a <code>ContainerServiceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerServiceProperties} obj Optional instance to populate.
     * @return {module:model/ContainerServiceProperties} The populated <code>ContainerServiceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerServiceProperties();

            if (data.hasOwnProperty('agentPoolProfiles')) {
                obj['agentPoolProfiles'] = ApiClient.convertToType(data['agentPoolProfiles'], [ContainerServiceAgentPoolProfile]);
            }
            if (data.hasOwnProperty('diagnosticsProfile')) {
                obj['diagnosticsProfile'] = ContainerServiceDiagnosticsProfile.constructFromObject(data['diagnosticsProfile']);
            }
            if (data.hasOwnProperty('linuxProfile')) {
                obj['linuxProfile'] = ContainerServiceLinuxProfile.constructFromObject(data['linuxProfile']);
            }
            if (data.hasOwnProperty('masterProfile')) {
                obj['masterProfile'] = ContainerServiceMasterProfile.constructFromObject(data['masterProfile']);
            }
            if (data.hasOwnProperty('orchestratorProfile')) {
                obj['orchestratorProfile'] = ContainerServiceOrchestratorProfile.constructFromObject(data['orchestratorProfile']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('windowsProfile')) {
                obj['windowsProfile'] = ContainerServiceWindowsProfile.constructFromObject(data['windowsProfile']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerServiceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerServiceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContainerServiceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['agentPoolProfiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['agentPoolProfiles'])) {
                throw new Error("Expected the field `agentPoolProfiles` to be an array in the JSON data but got " + data['agentPoolProfiles']);
            }
            // validate the optional field `agentPoolProfiles` (array)
            for (const item of data['agentPoolProfiles']) {
                ContainerServiceAgentPoolProfile.validateJSON(item);
            };
        }
        // validate the optional field `diagnosticsProfile`
        if (data['diagnosticsProfile']) { // data not null
          ContainerServiceDiagnosticsProfile.validateJSON(data['diagnosticsProfile']);
        }
        // validate the optional field `linuxProfile`
        if (data['linuxProfile']) { // data not null
          ContainerServiceLinuxProfile.validateJSON(data['linuxProfile']);
        }
        // validate the optional field `masterProfile`
        if (data['masterProfile']) { // data not null
          ContainerServiceMasterProfile.validateJSON(data['masterProfile']);
        }
        // validate the optional field `orchestratorProfile`
        if (data['orchestratorProfile']) { // data not null
          ContainerServiceOrchestratorProfile.validateJSON(data['orchestratorProfile']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `windowsProfile`
        if (data['windowsProfile']) { // data not null
          ContainerServiceWindowsProfile.validateJSON(data['windowsProfile']);
        }

        return true;
    }


}

ContainerServiceProperties.RequiredProperties = ["agentPoolProfiles", "linuxProfile", "masterProfile"];

/**
 * Properties of the agent pool.
 * @member {Array.<module:model/ContainerServiceAgentPoolProfile>} agentPoolProfiles
 */
ContainerServiceProperties.prototype['agentPoolProfiles'] = undefined;

/**
 * @member {module:model/ContainerServiceDiagnosticsProfile} diagnosticsProfile
 */
ContainerServiceProperties.prototype['diagnosticsProfile'] = undefined;

/**
 * @member {module:model/ContainerServiceLinuxProfile} linuxProfile
 */
ContainerServiceProperties.prototype['linuxProfile'] = undefined;

/**
 * @member {module:model/ContainerServiceMasterProfile} masterProfile
 */
ContainerServiceProperties.prototype['masterProfile'] = undefined;

/**
 * @member {module:model/ContainerServiceOrchestratorProfile} orchestratorProfile
 */
ContainerServiceProperties.prototype['orchestratorProfile'] = undefined;

/**
 * the current deployment or provisioning state, which only appears in the response.
 * @member {String} provisioningState
 */
ContainerServiceProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ContainerServiceWindowsProfile} windowsProfile
 */
ContainerServiceProperties.prototype['windowsProfile'] = undefined;






export default ContainerServiceProperties;

