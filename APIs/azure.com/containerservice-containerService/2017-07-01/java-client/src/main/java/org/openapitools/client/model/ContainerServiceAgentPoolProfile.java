/*
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2017-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainerServiceStorageProfile;
import org.openapitools.client.model.ContainerServiceVMSize;
import org.openapitools.client.model.OSType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Profile for the container service agent pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:24.506795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerServiceAgentPoolProfile {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count = 1;

  public static final String SERIALIZED_NAME_DNS_PREFIX = "dnsPrefix";
  @SerializedName(SERIALIZED_NAME_DNS_PREFIX)
  private String dnsPrefix;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_DISK_SIZE_G_B = "osDiskSizeGB";
  @SerializedName(SERIALIZED_NAME_OS_DISK_SIZE_G_B)
  private Integer osDiskSizeGB;

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OSType osType = OSType.LINUX;

  public static final String SERIALIZED_NAME_PORTS = "ports";
  @SerializedName(SERIALIZED_NAME_PORTS)
  private List<Integer> ports = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORAGE_PROFILE = "storageProfile";
  @SerializedName(SERIALIZED_NAME_STORAGE_PROFILE)
  private ContainerServiceStorageProfile storageProfile;

  public static final String SERIALIZED_NAME_VM_SIZE = "vmSize";
  @SerializedName(SERIALIZED_NAME_VM_SIZE)
  private ContainerServiceVMSize vmSize;

  public static final String SERIALIZED_NAME_VNET_SUBNET_I_D = "vnetSubnetID";
  @SerializedName(SERIALIZED_NAME_VNET_SUBNET_I_D)
  private String vnetSubnetID;

  public ContainerServiceAgentPoolProfile() {
  }

  public ContainerServiceAgentPoolProfile(
     String fqdn
  ) {
    this();
    this.fqdn = fqdn;
  }

  public ContainerServiceAgentPoolProfile count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Number of agents (VMs) to host docker containers. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1. 
   * minimum: 1
   * maximum: 100
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public ContainerServiceAgentPoolProfile dnsPrefix(String dnsPrefix) {
    this.dnsPrefix = dnsPrefix;
    return this;
  }

  /**
   * DNS prefix to be used to create the FQDN for the agent pool.
   * @return dnsPrefix
   */
  @javax.annotation.Nullable
  public String getDnsPrefix() {
    return dnsPrefix;
  }

  public void setDnsPrefix(String dnsPrefix) {
    this.dnsPrefix = dnsPrefix;
  }


  /**
   * FQDN for the agent pool.
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }



  public ContainerServiceAgentPoolProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique name of the agent pool profile in the context of the subscription and resource group.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContainerServiceAgentPoolProfile osDiskSizeGB(Integer osDiskSizeGB) {
    this.osDiskSizeGB = osDiskSizeGB;
    return this;
  }

  /**
   * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
   * minimum: 0
   * maximum: 1023
   * @return osDiskSizeGB
   */
  @javax.annotation.Nullable
  public Integer getOsDiskSizeGB() {
    return osDiskSizeGB;
  }

  public void setOsDiskSizeGB(Integer osDiskSizeGB) {
    this.osDiskSizeGB = osDiskSizeGB;
  }


  public ContainerServiceAgentPoolProfile osType(OSType osType) {
    this.osType = osType;
    return this;
  }

  /**
   * Get osType
   * @return osType
   */
  @javax.annotation.Nullable
  public OSType getOsType() {
    return osType;
  }

  public void setOsType(OSType osType) {
    this.osType = osType;
  }


  public ContainerServiceAgentPoolProfile ports(List<Integer> ports) {
    this.ports = ports;
    return this;
  }

  public ContainerServiceAgentPoolProfile addPortsItem(Integer portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<>();
    }
    this.ports.add(portsItem);
    return this;
  }

  /**
   * Ports number array used to expose on this agent pool. The default opened ports are different based on your choice of orchestrator.
   * @return ports
   */
  @javax.annotation.Nullable
  public List<Integer> getPorts() {
    return ports;
  }

  public void setPorts(List<Integer> ports) {
    this.ports = ports;
  }


  public ContainerServiceAgentPoolProfile storageProfile(ContainerServiceStorageProfile storageProfile) {
    this.storageProfile = storageProfile;
    return this;
  }

  /**
   * Get storageProfile
   * @return storageProfile
   */
  @javax.annotation.Nullable
  public ContainerServiceStorageProfile getStorageProfile() {
    return storageProfile;
  }

  public void setStorageProfile(ContainerServiceStorageProfile storageProfile) {
    this.storageProfile = storageProfile;
  }


  public ContainerServiceAgentPoolProfile vmSize(ContainerServiceVMSize vmSize) {
    this.vmSize = vmSize;
    return this;
  }

  /**
   * Get vmSize
   * @return vmSize
   */
  @javax.annotation.Nonnull
  public ContainerServiceVMSize getVmSize() {
    return vmSize;
  }

  public void setVmSize(ContainerServiceVMSize vmSize) {
    this.vmSize = vmSize;
  }


  public ContainerServiceAgentPoolProfile vnetSubnetID(String vnetSubnetID) {
    this.vnetSubnetID = vnetSubnetID;
    return this;
  }

  /**
   * VNet SubnetID specifies the VNet&#39;s subnet identifier.
   * @return vnetSubnetID
   */
  @javax.annotation.Nullable
  public String getVnetSubnetID() {
    return vnetSubnetID;
  }

  public void setVnetSubnetID(String vnetSubnetID) {
    this.vnetSubnetID = vnetSubnetID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerServiceAgentPoolProfile containerServiceAgentPoolProfile = (ContainerServiceAgentPoolProfile) o;
    return Objects.equals(this.count, containerServiceAgentPoolProfile.count) &&
        Objects.equals(this.dnsPrefix, containerServiceAgentPoolProfile.dnsPrefix) &&
        Objects.equals(this.fqdn, containerServiceAgentPoolProfile.fqdn) &&
        Objects.equals(this.name, containerServiceAgentPoolProfile.name) &&
        Objects.equals(this.osDiskSizeGB, containerServiceAgentPoolProfile.osDiskSizeGB) &&
        Objects.equals(this.osType, containerServiceAgentPoolProfile.osType) &&
        Objects.equals(this.ports, containerServiceAgentPoolProfile.ports) &&
        Objects.equals(this.storageProfile, containerServiceAgentPoolProfile.storageProfile) &&
        Objects.equals(this.vmSize, containerServiceAgentPoolProfile.vmSize) &&
        Objects.equals(this.vnetSubnetID, containerServiceAgentPoolProfile.vnetSubnetID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, dnsPrefix, fqdn, name, osDiskSizeGB, osType, ports, storageProfile, vmSize, vnetSubnetID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerServiceAgentPoolProfile {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    dnsPrefix: ").append(toIndentedString(dnsPrefix)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osDiskSizeGB: ").append(toIndentedString(osDiskSizeGB)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    storageProfile: ").append(toIndentedString(storageProfile)).append("\n");
    sb.append("    vmSize: ").append(toIndentedString(vmSize)).append("\n");
    sb.append("    vnetSubnetID: ").append(toIndentedString(vnetSubnetID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("dnsPrefix");
    openapiFields.add("fqdn");
    openapiFields.add("name");
    openapiFields.add("osDiskSizeGB");
    openapiFields.add("osType");
    openapiFields.add("ports");
    openapiFields.add("storageProfile");
    openapiFields.add("vmSize");
    openapiFields.add("vnetSubnetID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("vmSize");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerServiceAgentPoolProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerServiceAgentPoolProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerServiceAgentPoolProfile is not found in the empty JSON string", ContainerServiceAgentPoolProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerServiceAgentPoolProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerServiceAgentPoolProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContainerServiceAgentPoolProfile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dnsPrefix") != null && !jsonObj.get("dnsPrefix").isJsonNull()) && !jsonObj.get("dnsPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsPrefix").toString()));
      }
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `osType`
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) {
        OSType.validateJsonElement(jsonObj.get("osType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ports") != null && !jsonObj.get("ports").isJsonNull() && !jsonObj.get("ports").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ports` to be an array in the JSON string but got `%s`", jsonObj.get("ports").toString()));
      }
      // validate the optional field `storageProfile`
      if (jsonObj.get("storageProfile") != null && !jsonObj.get("storageProfile").isJsonNull()) {
        ContainerServiceStorageProfile.validateJsonElement(jsonObj.get("storageProfile"));
      }
      // validate the required field `vmSize`
      ContainerServiceVMSize.validateJsonElement(jsonObj.get("vmSize"));
      if ((jsonObj.get("vnetSubnetID") != null && !jsonObj.get("vnetSubnetID").isJsonNull()) && !jsonObj.get("vnetSubnetID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vnetSubnetID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vnetSubnetID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerServiceAgentPoolProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerServiceAgentPoolProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerServiceAgentPoolProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerServiceAgentPoolProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerServiceAgentPoolProfile>() {
           @Override
           public void write(JsonWriter out, ContainerServiceAgentPoolProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerServiceAgentPoolProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerServiceAgentPoolProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerServiceAgentPoolProfile
   * @throws IOException if the JSON string is invalid with respect to ContainerServiceAgentPoolProfile
   */
  public static ContainerServiceAgentPoolProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerServiceAgentPoolProfile.class);
  }

  /**
   * Convert an instance of ContainerServiceAgentPoolProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

