/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExpressRouteConnection;
import org.openapitools.client.model.ExpressRouteConnectionList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpressRouteConnectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpressRouteConnectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpressRouteConnectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expressRouteConnectionsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the connection subresource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param putExpressRouteConnectionParameters Parameters required in an ExpressRouteConnection PUT operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteConnectionsCreateOrUpdateCall(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, ExpressRouteConnection putExpressRouteConnectionParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putExpressRouteConnectionParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections/{connectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRouteGatewayName" + "}", localVarApiClient.escapeString(expressRouteGatewayName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteConnectionsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, ExpressRouteConnection putExpressRouteConnectionParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'expressRouteGatewayName' is set
        if (expressRouteGatewayName == null) {
            throw new ApiException("Missing the required parameter 'expressRouteGatewayName' when calling expressRouteConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling expressRouteConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'putExpressRouteConnectionParameters' is set
        if (putExpressRouteConnectionParameters == null) {
            throw new ApiException("Missing the required parameter 'putExpressRouteConnectionParameters' when calling expressRouteConnectionsCreateOrUpdate(Async)");
        }

        return expressRouteConnectionsCreateOrUpdateCall(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId, putExpressRouteConnectionParameters, _callback);

    }

    /**
     * 
     * Creates a connection between an ExpressRoute gateway and an ExpressRoute circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the connection subresource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param putExpressRouteConnectionParameters Parameters required in an ExpressRouteConnection PUT operation. (required)
     * @return ExpressRouteConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteConnection expressRouteConnectionsCreateOrUpdate(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, ExpressRouteConnection putExpressRouteConnectionParameters) throws ApiException {
        ApiResponse<ExpressRouteConnection> localVarResp = expressRouteConnectionsCreateOrUpdateWithHttpInfo(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId, putExpressRouteConnectionParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a connection between an ExpressRoute gateway and an ExpressRoute circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the connection subresource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param putExpressRouteConnectionParameters Parameters required in an ExpressRouteConnection PUT operation. (required)
     * @return ApiResponse&lt;ExpressRouteConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteConnection> expressRouteConnectionsCreateOrUpdateWithHttpInfo(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, ExpressRouteConnection putExpressRouteConnectionParameters) throws ApiException {
        okhttp3.Call localVarCall = expressRouteConnectionsCreateOrUpdateValidateBeforeCall(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId, putExpressRouteConnectionParameters, null);
        Type localVarReturnType = new TypeToken<ExpressRouteConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a connection between an ExpressRoute gateway and an ExpressRoute circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the connection subresource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param putExpressRouteConnectionParameters Parameters required in an ExpressRouteConnection PUT operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteConnectionsCreateOrUpdateAsync(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, ExpressRouteConnection putExpressRouteConnectionParameters, final ApiCallback<ExpressRouteConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteConnectionsCreateOrUpdateValidateBeforeCall(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId, putExpressRouteConnectionParameters, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteConnectionsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the connection subresource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, and the operation will continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteConnectionsDeleteCall(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections/{connectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRouteGatewayName" + "}", localVarApiClient.escapeString(expressRouteGatewayName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteConnectionsDeleteValidateBeforeCall(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteConnectionsDelete(Async)");
        }

        // verify the required parameter 'expressRouteGatewayName' is set
        if (expressRouteGatewayName == null) {
            throw new ApiException("Missing the required parameter 'expressRouteGatewayName' when calling expressRouteConnectionsDelete(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling expressRouteConnectionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteConnectionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteConnectionsDelete(Async)");
        }

        return expressRouteConnectionsDeleteCall(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a connection to a ExpressRoute circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the connection subresource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, and the operation will continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public void expressRouteConnectionsDelete(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        expressRouteConnectionsDeleteWithHttpInfo(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a connection to a ExpressRoute circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the connection subresource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, and the operation will continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expressRouteConnectionsDeleteWithHttpInfo(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteConnectionsDeleteValidateBeforeCall(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a connection to a ExpressRoute circuit.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the connection subresource. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted, and the operation will continue asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteConnectionsDeleteAsync(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteConnectionsDeleteValidateBeforeCall(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteConnectionsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the ExpressRoute connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteConnectionsGetCall(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections/{connectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRouteGatewayName" + "}", localVarApiClient.escapeString(expressRouteGatewayName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteConnectionsGetValidateBeforeCall(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteConnectionsGet(Async)");
        }

        // verify the required parameter 'expressRouteGatewayName' is set
        if (expressRouteGatewayName == null) {
            throw new ApiException("Missing the required parameter 'expressRouteGatewayName' when calling expressRouteConnectionsGet(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling expressRouteConnectionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteConnectionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteConnectionsGet(Async)");
        }

        return expressRouteConnectionsGetCall(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified ExpressRouteConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the ExpressRoute connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteConnection expressRouteConnectionsGet(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteConnection> localVarResp = expressRouteConnectionsGetWithHttpInfo(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified ExpressRouteConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the ExpressRoute connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteConnection> expressRouteConnectionsGetWithHttpInfo(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteConnectionsGetValidateBeforeCall(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified ExpressRouteConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param connectionName The name of the ExpressRoute connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the ExpressRouteConnection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteConnectionsGetAsync(String resourceGroupName, String expressRouteGatewayName, String connectionName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteConnectionsGetValidateBeforeCall(resourceGroupName, expressRouteGatewayName, connectionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteConnectionsList
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteConnectionsListCall(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}/expressRouteConnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRouteGatewayName" + "}", localVarApiClient.escapeString(expressRouteGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteConnectionsListValidateBeforeCall(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteConnectionsList(Async)");
        }

        // verify the required parameter 'expressRouteGatewayName' is set
        if (expressRouteGatewayName == null) {
            throw new ApiException("Missing the required parameter 'expressRouteGatewayName' when calling expressRouteConnectionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteConnectionsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteConnectionsList(Async)");
        }

        return expressRouteConnectionsListCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists ExpressRouteConnections.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteConnectionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteConnectionList expressRouteConnectionsList(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteConnectionList> localVarResp = expressRouteConnectionsListWithHttpInfo(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists ExpressRouteConnections.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteConnectionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteConnectionList> expressRouteConnectionsListWithHttpInfo(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteConnectionsListValidateBeforeCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteConnectionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists ExpressRouteConnections.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteConnectionsListAsync(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteConnectionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteConnectionsListValidateBeforeCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteConnectionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
