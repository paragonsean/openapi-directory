/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExpressRouteGateway;
import org.openapitools.client.model.ExpressRouteGatewayList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpressRouteGatewaysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpressRouteGatewaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpressRouteGatewaysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expressRouteGatewaysCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param putExpressRouteGatewayParameters Parameters required in an ExpressRoute gateway PUT operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoute gateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRoute gateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteGatewaysCreateOrUpdateCall(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, ExpressRouteGateway putExpressRouteGatewayParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putExpressRouteGatewayParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRouteGatewayName" + "}", localVarApiClient.escapeString(expressRouteGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteGatewaysCreateOrUpdateValidateBeforeCall(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, ExpressRouteGateway putExpressRouteGatewayParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'expressRouteGatewayName' is set
        if (expressRouteGatewayName == null) {
            throw new ApiException("Missing the required parameter 'expressRouteGatewayName' when calling expressRouteGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'putExpressRouteGatewayParameters' is set
        if (putExpressRouteGatewayParameters == null) {
            throw new ApiException("Missing the required parameter 'putExpressRouteGatewayParameters' when calling expressRouteGatewaysCreateOrUpdate(Async)");
        }

        return expressRouteGatewaysCreateOrUpdateCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, putExpressRouteGatewayParameters, _callback);

    }

    /**
     * 
     * Creates or updates a ExpressRoute gateway in a specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param putExpressRouteGatewayParameters Parameters required in an ExpressRoute gateway PUT operation. (required)
     * @return ExpressRouteGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoute gateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRoute gateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteGateway expressRouteGatewaysCreateOrUpdate(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, ExpressRouteGateway putExpressRouteGatewayParameters) throws ApiException {
        ApiResponse<ExpressRouteGateway> localVarResp = expressRouteGatewaysCreateOrUpdateWithHttpInfo(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, putExpressRouteGatewayParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a ExpressRoute gateway in a specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param putExpressRouteGatewayParameters Parameters required in an ExpressRoute gateway PUT operation. (required)
     * @return ApiResponse&lt;ExpressRouteGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoute gateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRoute gateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteGateway> expressRouteGatewaysCreateOrUpdateWithHttpInfo(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, ExpressRouteGateway putExpressRouteGatewayParameters) throws ApiException {
        okhttp3.Call localVarCall = expressRouteGatewaysCreateOrUpdateValidateBeforeCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, putExpressRouteGatewayParameters, null);
        Type localVarReturnType = new TypeToken<ExpressRouteGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a ExpressRoute gateway in a specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param putExpressRouteGatewayParameters Parameters required in an ExpressRoute gateway PUT operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoute gateway resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRoute gateway resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteGatewaysCreateOrUpdateAsync(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, ExpressRouteGateway putExpressRouteGatewayParameters, final ApiCallback<ExpressRouteGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteGatewaysCreateOrUpdateValidateBeforeCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, putExpressRouteGatewayParameters, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteGatewaysDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteGatewaysDeleteCall(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRouteGatewayName" + "}", localVarApiClient.escapeString(expressRouteGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteGatewaysDeleteValidateBeforeCall(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteGatewaysDelete(Async)");
        }

        // verify the required parameter 'expressRouteGatewayName' is set
        if (expressRouteGatewayName == null) {
            throw new ApiException("Missing the required parameter 'expressRouteGatewayName' when calling expressRouteGatewaysDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteGatewaysDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteGatewaysDelete(Async)");
        }

        return expressRouteGatewaysDeleteCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified ExpressRoute gateway in a resource group. An ExpressRoute gateway resource can only be deleted when there are no connection subresources.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public void expressRouteGatewaysDelete(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        expressRouteGatewaysDeleteWithHttpInfo(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified ExpressRoute gateway in a resource group. An ExpressRoute gateway resource can only be deleted when there are no connection subresources.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expressRouteGatewaysDeleteWithHttpInfo(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteGatewaysDeleteValidateBeforeCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified ExpressRoute gateway in a resource group. An ExpressRoute gateway resource can only be deleted when there are no connection subresources.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteGatewaysDeleteAsync(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteGatewaysDeleteValidateBeforeCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteGatewaysGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. The operation returns the ExpressRoute gateway. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteGatewaysGetCall(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways/{expressRouteGatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRouteGatewayName" + "}", localVarApiClient.escapeString(expressRouteGatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteGatewaysGetValidateBeforeCall(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteGatewaysGet(Async)");
        }

        // verify the required parameter 'expressRouteGatewayName' is set
        if (expressRouteGatewayName == null) {
            throw new ApiException("Missing the required parameter 'expressRouteGatewayName' when calling expressRouteGatewaysGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteGatewaysGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteGatewaysGet(Async)");
        }

        return expressRouteGatewaysGetCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Fetches the details of a ExpressRoute gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. The operation returns the ExpressRoute gateway. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteGateway expressRouteGatewaysGet(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteGateway> localVarResp = expressRouteGatewaysGetWithHttpInfo(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetches the details of a ExpressRoute gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. The operation returns the ExpressRoute gateway. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteGateway> expressRouteGatewaysGetWithHttpInfo(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteGatewaysGetValidateBeforeCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetches the details of a ExpressRoute gateway in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRouteGatewayName The name of the ExpressRoute gateway. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. The operation returns the ExpressRoute gateway. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteGatewaysGetAsync(String resourceGroupName, String expressRouteGatewayName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteGatewaysGetValidateBeforeCall(resourceGroupName, expressRouteGatewayName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteGatewaysListByResourceGroup
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteGatewaysListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteGateways"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteGatewaysListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteGatewaysListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteGatewaysListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteGatewaysListByResourceGroup(Async)");
        }

        return expressRouteGatewaysListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists ExpressRoute gateways in a given resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteGatewayList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteGatewayList expressRouteGatewaysListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteGatewayList> localVarResp = expressRouteGatewaysListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists ExpressRoute gateways in a given resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteGatewayList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteGatewayList> expressRouteGatewaysListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteGatewaysListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteGatewayList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists ExpressRoute gateways in a given resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteGatewaysListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteGatewayList> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteGatewaysListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteGatewayList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteGatewaysListBySubscription
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteGatewaysListBySubscriptionCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteGateways"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteGatewaysListBySubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteGatewaysListBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteGatewaysListBySubscription(Async)");
        }

        return expressRouteGatewaysListBySubscriptionCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists ExpressRoute gateways under a given subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteGatewayList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteGatewayList expressRouteGatewaysListBySubscription(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteGatewayList> localVarResp = expressRouteGatewaysListBySubscriptionWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists ExpressRoute gateways under a given subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteGatewayList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteGatewayList> expressRouteGatewaysListBySubscriptionWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteGatewaysListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteGatewayList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists ExpressRoute gateways under a given subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteGatewaysListBySubscriptionAsync(String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteGatewayList> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteGatewaysListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteGatewayList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
