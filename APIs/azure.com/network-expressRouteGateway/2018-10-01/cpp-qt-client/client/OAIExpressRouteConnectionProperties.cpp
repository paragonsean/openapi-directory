/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteConnectionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteConnectionProperties::OAIExpressRouteConnectionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteConnectionProperties::OAIExpressRouteConnectionProperties() {
    this->initializeModel();
}

OAIExpressRouteConnectionProperties::~OAIExpressRouteConnectionProperties() {}

void OAIExpressRouteConnectionProperties::initializeModel() {

    m_authorization_key_isSet = false;
    m_authorization_key_isValid = false;

    m_express_route_circuit_peering_isSet = false;
    m_express_route_circuit_peering_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_routing_weight_isSet = false;
    m_routing_weight_isValid = false;
}

void OAIExpressRouteConnectionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteConnectionProperties::fromJsonObject(QJsonObject json) {

    m_authorization_key_isValid = ::OpenAPI::fromJsonValue(m_authorization_key, json[QString("authorizationKey")]);
    m_authorization_key_isSet = !json[QString("authorizationKey")].isNull() && m_authorization_key_isValid;

    m_express_route_circuit_peering_isValid = ::OpenAPI::fromJsonValue(m_express_route_circuit_peering, json[QString("expressRouteCircuitPeering")]);
    m_express_route_circuit_peering_isSet = !json[QString("expressRouteCircuitPeering")].isNull() && m_express_route_circuit_peering_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_routing_weight_isValid = ::OpenAPI::fromJsonValue(m_routing_weight, json[QString("routingWeight")]);
    m_routing_weight_isSet = !json[QString("routingWeight")].isNull() && m_routing_weight_isValid;
}

QString OAIExpressRouteConnectionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteConnectionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_key_isSet) {
        obj.insert(QString("authorizationKey"), ::OpenAPI::toJsonValue(m_authorization_key));
    }
    if (m_express_route_circuit_peering.isSet()) {
        obj.insert(QString("expressRouteCircuitPeering"), ::OpenAPI::toJsonValue(m_express_route_circuit_peering));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_routing_weight_isSet) {
        obj.insert(QString("routingWeight"), ::OpenAPI::toJsonValue(m_routing_weight));
    }
    return obj;
}

QString OAIExpressRouteConnectionProperties::getAuthorizationKey() const {
    return m_authorization_key;
}
void OAIExpressRouteConnectionProperties::setAuthorizationKey(const QString &authorization_key) {
    m_authorization_key = authorization_key;
    m_authorization_key_isSet = true;
}

bool OAIExpressRouteConnectionProperties::is_authorization_key_Set() const{
    return m_authorization_key_isSet;
}

bool OAIExpressRouteConnectionProperties::is_authorization_key_Valid() const{
    return m_authorization_key_isValid;
}

OAIExpressRouteCircuitPeeringId OAIExpressRouteConnectionProperties::getExpressRouteCircuitPeering() const {
    return m_express_route_circuit_peering;
}
void OAIExpressRouteConnectionProperties::setExpressRouteCircuitPeering(const OAIExpressRouteCircuitPeeringId &express_route_circuit_peering) {
    m_express_route_circuit_peering = express_route_circuit_peering;
    m_express_route_circuit_peering_isSet = true;
}

bool OAIExpressRouteConnectionProperties::is_express_route_circuit_peering_Set() const{
    return m_express_route_circuit_peering_isSet;
}

bool OAIExpressRouteConnectionProperties::is_express_route_circuit_peering_Valid() const{
    return m_express_route_circuit_peering_isValid;
}

QString OAIExpressRouteConnectionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIExpressRouteConnectionProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIExpressRouteConnectionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIExpressRouteConnectionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

qint32 OAIExpressRouteConnectionProperties::getRoutingWeight() const {
    return m_routing_weight;
}
void OAIExpressRouteConnectionProperties::setRoutingWeight(const qint32 &routing_weight) {
    m_routing_weight = routing_weight;
    m_routing_weight_isSet = true;
}

bool OAIExpressRouteConnectionProperties::is_routing_weight_Set() const{
    return m_routing_weight_isSet;
}

bool OAIExpressRouteConnectionProperties::is_routing_weight_Valid() const{
    return m_routing_weight_isValid;
}

bool OAIExpressRouteConnectionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_express_route_circuit_peering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteConnectionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_express_route_circuit_peering_isValid && true;
}

} // namespace OpenAPI
