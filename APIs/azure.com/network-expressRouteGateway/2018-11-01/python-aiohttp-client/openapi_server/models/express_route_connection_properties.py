# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.express_route_circuit_peering_id import ExpressRouteCircuitPeeringId
from openapi_server import util


class ExpressRouteConnectionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_key: str=None, express_route_circuit_peering: ExpressRouteCircuitPeeringId=None, provisioning_state: str=None, routing_weight: int=None):
        """ExpressRouteConnectionProperties - a model defined in OpenAPI

        :param authorization_key: The authorization_key of this ExpressRouteConnectionProperties.
        :param express_route_circuit_peering: The express_route_circuit_peering of this ExpressRouteConnectionProperties.
        :param provisioning_state: The provisioning_state of this ExpressRouteConnectionProperties.
        :param routing_weight: The routing_weight of this ExpressRouteConnectionProperties.
        """
        self.openapi_types = {
            'authorization_key': str,
            'express_route_circuit_peering': ExpressRouteCircuitPeeringId,
            'provisioning_state': str,
            'routing_weight': int
        }

        self.attribute_map = {
            'authorization_key': 'authorizationKey',
            'express_route_circuit_peering': 'expressRouteCircuitPeering',
            'provisioning_state': 'provisioningState',
            'routing_weight': 'routingWeight'
        }

        self._authorization_key = authorization_key
        self._express_route_circuit_peering = express_route_circuit_peering
        self._provisioning_state = provisioning_state
        self._routing_weight = routing_weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteConnectionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteConnectionProperties of this ExpressRouteConnectionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_key(self):
        """Gets the authorization_key of this ExpressRouteConnectionProperties.

        Authorization key to establish the connection.

        :return: The authorization_key of this ExpressRouteConnectionProperties.
        :rtype: str
        """
        return self._authorization_key

    @authorization_key.setter
    def authorization_key(self, authorization_key):
        """Sets the authorization_key of this ExpressRouteConnectionProperties.

        Authorization key to establish the connection.

        :param authorization_key: The authorization_key of this ExpressRouteConnectionProperties.
        :type authorization_key: str
        """

        self._authorization_key = authorization_key

    @property
    def express_route_circuit_peering(self):
        """Gets the express_route_circuit_peering of this ExpressRouteConnectionProperties.


        :return: The express_route_circuit_peering of this ExpressRouteConnectionProperties.
        :rtype: ExpressRouteCircuitPeeringId
        """
        return self._express_route_circuit_peering

    @express_route_circuit_peering.setter
    def express_route_circuit_peering(self, express_route_circuit_peering):
        """Sets the express_route_circuit_peering of this ExpressRouteConnectionProperties.


        :param express_route_circuit_peering: The express_route_circuit_peering of this ExpressRouteConnectionProperties.
        :type express_route_circuit_peering: ExpressRouteCircuitPeeringId
        """
        if express_route_circuit_peering is None:
            raise ValueError("Invalid value for `express_route_circuit_peering`, must not be `None`")

        self._express_route_circuit_peering = express_route_circuit_peering

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ExpressRouteConnectionProperties.

        The provisioning state of the resource.

        :return: The provisioning_state of this ExpressRouteConnectionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ExpressRouteConnectionProperties.

        The provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this ExpressRouteConnectionProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def routing_weight(self):
        """Gets the routing_weight of this ExpressRouteConnectionProperties.

        The routing weight associated to the connection.

        :return: The routing_weight of this ExpressRouteConnectionProperties.
        :rtype: int
        """
        return self._routing_weight

    @routing_weight.setter
    def routing_weight(self, routing_weight):
        """Sets the routing_weight of this ExpressRouteConnectionProperties.

        The routing weight associated to the connection.

        :param routing_weight: The routing_weight of this ExpressRouteConnectionProperties.
        :type routing_weight: int
        """

        self._routing_weight = routing_weight
