/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteGatewayProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteGatewayProperties::OAIExpressRouteGatewayProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteGatewayProperties::OAIExpressRouteGatewayProperties() {
    this->initializeModel();
}

OAIExpressRouteGatewayProperties::~OAIExpressRouteGatewayProperties() {}

void OAIExpressRouteGatewayProperties::initializeModel() {

    m_auto_scale_configuration_isSet = false;
    m_auto_scale_configuration_isValid = false;

    m_express_route_connections_isSet = false;
    m_express_route_connections_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_virtual_hub_isSet = false;
    m_virtual_hub_isValid = false;
}

void OAIExpressRouteGatewayProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteGatewayProperties::fromJsonObject(QJsonObject json) {

    m_auto_scale_configuration_isValid = ::OpenAPI::fromJsonValue(m_auto_scale_configuration, json[QString("autoScaleConfiguration")]);
    m_auto_scale_configuration_isSet = !json[QString("autoScaleConfiguration")].isNull() && m_auto_scale_configuration_isValid;

    m_express_route_connections_isValid = ::OpenAPI::fromJsonValue(m_express_route_connections, json[QString("expressRouteConnections")]);
    m_express_route_connections_isSet = !json[QString("expressRouteConnections")].isNull() && m_express_route_connections_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_virtual_hub_isValid = ::OpenAPI::fromJsonValue(m_virtual_hub, json[QString("virtualHub")]);
    m_virtual_hub_isSet = !json[QString("virtualHub")].isNull() && m_virtual_hub_isValid;
}

QString OAIExpressRouteGatewayProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteGatewayProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scale_configuration.isSet()) {
        obj.insert(QString("autoScaleConfiguration"), ::OpenAPI::toJsonValue(m_auto_scale_configuration));
    }
    if (m_express_route_connections.size() > 0) {
        obj.insert(QString("expressRouteConnections"), ::OpenAPI::toJsonValue(m_express_route_connections));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_virtual_hub.isSet()) {
        obj.insert(QString("virtualHub"), ::OpenAPI::toJsonValue(m_virtual_hub));
    }
    return obj;
}

OAIExpressRouteGatewayProperties_autoScaleConfiguration OAIExpressRouteGatewayProperties::getAutoScaleConfiguration() const {
    return m_auto_scale_configuration;
}
void OAIExpressRouteGatewayProperties::setAutoScaleConfiguration(const OAIExpressRouteGatewayProperties_autoScaleConfiguration &auto_scale_configuration) {
    m_auto_scale_configuration = auto_scale_configuration;
    m_auto_scale_configuration_isSet = true;
}

bool OAIExpressRouteGatewayProperties::is_auto_scale_configuration_Set() const{
    return m_auto_scale_configuration_isSet;
}

bool OAIExpressRouteGatewayProperties::is_auto_scale_configuration_Valid() const{
    return m_auto_scale_configuration_isValid;
}

QList<OAIExpressRouteConnection> OAIExpressRouteGatewayProperties::getExpressRouteConnections() const {
    return m_express_route_connections;
}
void OAIExpressRouteGatewayProperties::setExpressRouteConnections(const QList<OAIExpressRouteConnection> &express_route_connections) {
    m_express_route_connections = express_route_connections;
    m_express_route_connections_isSet = true;
}

bool OAIExpressRouteGatewayProperties::is_express_route_connections_Set() const{
    return m_express_route_connections_isSet;
}

bool OAIExpressRouteGatewayProperties::is_express_route_connections_Valid() const{
    return m_express_route_connections_isValid;
}

QString OAIExpressRouteGatewayProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIExpressRouteGatewayProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIExpressRouteGatewayProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIExpressRouteGatewayProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIVirtualHubId OAIExpressRouteGatewayProperties::getVirtualHub() const {
    return m_virtual_hub;
}
void OAIExpressRouteGatewayProperties::setVirtualHub(const OAIVirtualHubId &virtual_hub) {
    m_virtual_hub = virtual_hub;
    m_virtual_hub_isSet = true;
}

bool OAIExpressRouteGatewayProperties::is_virtual_hub_Set() const{
    return m_virtual_hub_isSet;
}

bool OAIExpressRouteGatewayProperties::is_virtual_hub_Valid() const{
    return m_virtual_hub_isValid;
}

bool OAIExpressRouteGatewayProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scale_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_express_route_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_hub.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteGatewayProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_virtual_hub_isValid && true;
}

} // namespace OpenAPI
