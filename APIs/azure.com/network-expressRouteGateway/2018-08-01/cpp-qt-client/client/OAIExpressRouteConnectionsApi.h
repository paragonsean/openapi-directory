/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExpressRouteConnectionsApi_H
#define OAI_OAIExpressRouteConnectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExpressRouteConnection.h"
#include "OAIExpressRouteConnectionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExpressRouteConnectionsApi : public QObject {
    Q_OBJECT

public:
    OAIExpressRouteConnectionsApi(const int timeOut = 0);
    ~OAIExpressRouteConnectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  express_route_gateway_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  put_express_route_connection_parameters OAIExpressRouteConnection [required]
    */
    virtual void expressRouteConnectionsCreateOrUpdate(const QString &resource_group_name, const QString &express_route_gateway_name, const QString &connection_name, const QString &api_version, const QString &subscription_id, const OAIExpressRouteConnection &put_express_route_connection_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  express_route_gateway_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteConnectionsDelete(const QString &resource_group_name, const QString &express_route_gateway_name, const QString &connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  express_route_gateway_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteConnectionsGet(const QString &resource_group_name, const QString &express_route_gateway_name, const QString &connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  express_route_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteConnectionsList(const QString &resource_group_name, const QString &express_route_gateway_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expressRouteConnectionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void expressRouteConnectionsDeleteCallback(OAIHttpRequestWorker *worker);
    void expressRouteConnectionsGetCallback(OAIHttpRequestWorker *worker);
    void expressRouteConnectionsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expressRouteConnectionsCreateOrUpdateSignal(OAIExpressRouteConnection summary);
    void expressRouteConnectionsDeleteSignal();
    void expressRouteConnectionsGetSignal(OAIExpressRouteConnection summary);
    void expressRouteConnectionsListSignal(OAIExpressRouteConnectionList summary);


    void expressRouteConnectionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteConnection summary);
    void expressRouteConnectionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void expressRouteConnectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteConnection summary);
    void expressRouteConnectionsListSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteConnectionList summary);

    Q_DECL_DEPRECATED_X("Use expressRouteConnectionsCreateOrUpdateSignalError() instead")
    void expressRouteConnectionsCreateOrUpdateSignalE(OAIExpressRouteConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteConnectionsCreateOrUpdateSignalError(OAIExpressRouteConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteConnectionsDeleteSignalError() instead")
    void expressRouteConnectionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteConnectionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteConnectionsGetSignalError() instead")
    void expressRouteConnectionsGetSignalE(OAIExpressRouteConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteConnectionsGetSignalError(OAIExpressRouteConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteConnectionsListSignalError() instead")
    void expressRouteConnectionsListSignalE(OAIExpressRouteConnectionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteConnectionsListSignalError(OAIExpressRouteConnectionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expressRouteConnectionsCreateOrUpdateSignalErrorFull() instead")
    void expressRouteConnectionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteConnectionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteConnectionsDeleteSignalErrorFull() instead")
    void expressRouteConnectionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteConnectionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteConnectionsGetSignalErrorFull() instead")
    void expressRouteConnectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteConnectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteConnectionsListSignalErrorFull() instead")
    void expressRouteConnectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteConnectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
