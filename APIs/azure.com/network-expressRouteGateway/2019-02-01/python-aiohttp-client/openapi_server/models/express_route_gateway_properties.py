# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.express_route_connection import ExpressRouteConnection
from openapi_server.models.express_route_gateway_properties_auto_scale_configuration import ExpressRouteGatewayPropertiesAutoScaleConfiguration
from openapi_server.models.virtual_hub_id import VirtualHubId
from openapi_server import util


class ExpressRouteGatewayProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_scale_configuration: ExpressRouteGatewayPropertiesAutoScaleConfiguration=None, express_route_connections: List[ExpressRouteConnection]=None, provisioning_state: str=None, virtual_hub: VirtualHubId=None):
        """ExpressRouteGatewayProperties - a model defined in OpenAPI

        :param auto_scale_configuration: The auto_scale_configuration of this ExpressRouteGatewayProperties.
        :param express_route_connections: The express_route_connections of this ExpressRouteGatewayProperties.
        :param provisioning_state: The provisioning_state of this ExpressRouteGatewayProperties.
        :param virtual_hub: The virtual_hub of this ExpressRouteGatewayProperties.
        """
        self.openapi_types = {
            'auto_scale_configuration': ExpressRouteGatewayPropertiesAutoScaleConfiguration,
            'express_route_connections': List[ExpressRouteConnection],
            'provisioning_state': str,
            'virtual_hub': VirtualHubId
        }

        self.attribute_map = {
            'auto_scale_configuration': 'autoScaleConfiguration',
            'express_route_connections': 'expressRouteConnections',
            'provisioning_state': 'provisioningState',
            'virtual_hub': 'virtualHub'
        }

        self._auto_scale_configuration = auto_scale_configuration
        self._express_route_connections = express_route_connections
        self._provisioning_state = provisioning_state
        self._virtual_hub = virtual_hub

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteGatewayProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteGatewayProperties of this ExpressRouteGatewayProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_scale_configuration(self):
        """Gets the auto_scale_configuration of this ExpressRouteGatewayProperties.


        :return: The auto_scale_configuration of this ExpressRouteGatewayProperties.
        :rtype: ExpressRouteGatewayPropertiesAutoScaleConfiguration
        """
        return self._auto_scale_configuration

    @auto_scale_configuration.setter
    def auto_scale_configuration(self, auto_scale_configuration):
        """Sets the auto_scale_configuration of this ExpressRouteGatewayProperties.


        :param auto_scale_configuration: The auto_scale_configuration of this ExpressRouteGatewayProperties.
        :type auto_scale_configuration: ExpressRouteGatewayPropertiesAutoScaleConfiguration
        """

        self._auto_scale_configuration = auto_scale_configuration

    @property
    def express_route_connections(self):
        """Gets the express_route_connections of this ExpressRouteGatewayProperties.

        List of ExpressRoute connections to the ExpressRoute gateway.

        :return: The express_route_connections of this ExpressRouteGatewayProperties.
        :rtype: List[ExpressRouteConnection]
        """
        return self._express_route_connections

    @express_route_connections.setter
    def express_route_connections(self, express_route_connections):
        """Sets the express_route_connections of this ExpressRouteGatewayProperties.

        List of ExpressRoute connections to the ExpressRoute gateway.

        :param express_route_connections: The express_route_connections of this ExpressRouteGatewayProperties.
        :type express_route_connections: List[ExpressRouteConnection]
        """

        self._express_route_connections = express_route_connections

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ExpressRouteGatewayProperties.

        The current provisioning state.

        :return: The provisioning_state of this ExpressRouteGatewayProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ExpressRouteGatewayProperties.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this ExpressRouteGatewayProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def virtual_hub(self):
        """Gets the virtual_hub of this ExpressRouteGatewayProperties.


        :return: The virtual_hub of this ExpressRouteGatewayProperties.
        :rtype: VirtualHubId
        """
        return self._virtual_hub

    @virtual_hub.setter
    def virtual_hub(self, virtual_hub):
        """Sets the virtual_hub of this ExpressRouteGatewayProperties.


        :param virtual_hub: The virtual_hub of this ExpressRouteGatewayProperties.
        :type virtual_hub: VirtualHubId
        """
        if virtual_hub is None:
            raise ValueError("Invalid value for `virtual_hub`, must not be `None`")

        self._virtual_hub = virtual_hub
