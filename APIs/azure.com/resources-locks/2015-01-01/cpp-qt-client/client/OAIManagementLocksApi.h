/**
 * ManagementLockClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagementLocksApi_H
#define OAI_OAIManagementLocksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIManagementLockListResult.h"
#include "OAIManagementLockObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagementLocksApi : public QObject {
    Q_OBJECT

public:
    OAIManagementLocksApi(const int timeOut = 0);
    ~OAIManagementLocksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lock_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIManagementLockObject [required]
    */
    virtual void managementLocksCreateOrUpdateAtResourceGroupLevel(const QString &resource_group_name, const QString &lock_name, const QString &api_version, const QString &subscription_id, const OAIManagementLockObject &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  lock_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIManagementLockObject [required]
    */
    virtual void managementLocksCreateOrUpdateAtResourceLevel(const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &lock_name, const QString &api_version, const QString &subscription_id, const OAIManagementLockObject &parameters);

    /**
    * @param[in]  lock_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIManagementLockObject [required]
    */
    virtual void managementLocksCreateOrUpdateAtSubscriptionLevel(const QString &lock_name, const QString &api_version, const QString &subscription_id, const OAIManagementLockObject &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lock_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void managementLocksDeleteAtResourceGroupLevel(const QString &resource_group_name, const QString &lock_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  lock_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void managementLocksDeleteAtResourceLevel(const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &lock_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  lock_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void managementLocksDeleteAtSubscriptionLevel(const QString &lock_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  lock_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void managementLocksGet(const QString &lock_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  lock_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void managementLocksGetAtResourceGroupLevel(const QString &resource_group_name, const QString &lock_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void managementLocksListAtResourceGroupLevel(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void managementLocksListAtResourceLevel(const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void managementLocksListAtSubscriptionLevel(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void managementLocksCreateOrUpdateAtResourceGroupLevelCallback(OAIHttpRequestWorker *worker);
    void managementLocksCreateOrUpdateAtResourceLevelCallback(OAIHttpRequestWorker *worker);
    void managementLocksCreateOrUpdateAtSubscriptionLevelCallback(OAIHttpRequestWorker *worker);
    void managementLocksDeleteAtResourceGroupLevelCallback(OAIHttpRequestWorker *worker);
    void managementLocksDeleteAtResourceLevelCallback(OAIHttpRequestWorker *worker);
    void managementLocksDeleteAtSubscriptionLevelCallback(OAIHttpRequestWorker *worker);
    void managementLocksGetCallback(OAIHttpRequestWorker *worker);
    void managementLocksGetAtResourceGroupLevelCallback(OAIHttpRequestWorker *worker);
    void managementLocksListAtResourceGroupLevelCallback(OAIHttpRequestWorker *worker);
    void managementLocksListAtResourceLevelCallback(OAIHttpRequestWorker *worker);
    void managementLocksListAtSubscriptionLevelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void managementLocksCreateOrUpdateAtResourceGroupLevelSignal(OAIManagementLockObject summary);
    void managementLocksCreateOrUpdateAtResourceLevelSignal(OAIManagementLockObject summary);
    void managementLocksCreateOrUpdateAtSubscriptionLevelSignal(OAIManagementLockObject summary);
    void managementLocksDeleteAtResourceGroupLevelSignal();
    void managementLocksDeleteAtResourceLevelSignal();
    void managementLocksDeleteAtSubscriptionLevelSignal();
    void managementLocksGetSignal(OAIManagementLockObject summary);
    void managementLocksGetAtResourceGroupLevelSignal(OAIManagementLockObject summary);
    void managementLocksListAtResourceGroupLevelSignal(OAIManagementLockListResult summary);
    void managementLocksListAtResourceLevelSignal(OAIManagementLockListResult summary);
    void managementLocksListAtSubscriptionLevelSignal(OAIManagementLockListResult summary);


    void managementLocksCreateOrUpdateAtResourceGroupLevelSignalFull(OAIHttpRequestWorker *worker, OAIManagementLockObject summary);
    void managementLocksCreateOrUpdateAtResourceLevelSignalFull(OAIHttpRequestWorker *worker, OAIManagementLockObject summary);
    void managementLocksCreateOrUpdateAtSubscriptionLevelSignalFull(OAIHttpRequestWorker *worker, OAIManagementLockObject summary);
    void managementLocksDeleteAtResourceGroupLevelSignalFull(OAIHttpRequestWorker *worker);
    void managementLocksDeleteAtResourceLevelSignalFull(OAIHttpRequestWorker *worker);
    void managementLocksDeleteAtSubscriptionLevelSignalFull(OAIHttpRequestWorker *worker);
    void managementLocksGetSignalFull(OAIHttpRequestWorker *worker, OAIManagementLockObject summary);
    void managementLocksGetAtResourceGroupLevelSignalFull(OAIHttpRequestWorker *worker, OAIManagementLockObject summary);
    void managementLocksListAtResourceGroupLevelSignalFull(OAIHttpRequestWorker *worker, OAIManagementLockListResult summary);
    void managementLocksListAtResourceLevelSignalFull(OAIHttpRequestWorker *worker, OAIManagementLockListResult summary);
    void managementLocksListAtSubscriptionLevelSignalFull(OAIHttpRequestWorker *worker, OAIManagementLockListResult summary);

    Q_DECL_DEPRECATED_X("Use managementLocksCreateOrUpdateAtResourceGroupLevelSignalError() instead")
    void managementLocksCreateOrUpdateAtResourceGroupLevelSignalE(OAIManagementLockObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksCreateOrUpdateAtResourceGroupLevelSignalError(OAIManagementLockObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksCreateOrUpdateAtResourceLevelSignalError() instead")
    void managementLocksCreateOrUpdateAtResourceLevelSignalE(OAIManagementLockObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksCreateOrUpdateAtResourceLevelSignalError(OAIManagementLockObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksCreateOrUpdateAtSubscriptionLevelSignalError() instead")
    void managementLocksCreateOrUpdateAtSubscriptionLevelSignalE(OAIManagementLockObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksCreateOrUpdateAtSubscriptionLevelSignalError(OAIManagementLockObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksDeleteAtResourceGroupLevelSignalError() instead")
    void managementLocksDeleteAtResourceGroupLevelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksDeleteAtResourceGroupLevelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksDeleteAtResourceLevelSignalError() instead")
    void managementLocksDeleteAtResourceLevelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksDeleteAtResourceLevelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksDeleteAtSubscriptionLevelSignalError() instead")
    void managementLocksDeleteAtSubscriptionLevelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksDeleteAtSubscriptionLevelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksGetSignalError() instead")
    void managementLocksGetSignalE(OAIManagementLockObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksGetSignalError(OAIManagementLockObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksGetAtResourceGroupLevelSignalError() instead")
    void managementLocksGetAtResourceGroupLevelSignalE(OAIManagementLockObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksGetAtResourceGroupLevelSignalError(OAIManagementLockObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksListAtResourceGroupLevelSignalError() instead")
    void managementLocksListAtResourceGroupLevelSignalE(OAIManagementLockListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksListAtResourceGroupLevelSignalError(OAIManagementLockListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksListAtResourceLevelSignalError() instead")
    void managementLocksListAtResourceLevelSignalE(OAIManagementLockListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksListAtResourceLevelSignalError(OAIManagementLockListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksListAtSubscriptionLevelSignalError() instead")
    void managementLocksListAtSubscriptionLevelSignalE(OAIManagementLockListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksListAtSubscriptionLevelSignalError(OAIManagementLockListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use managementLocksCreateOrUpdateAtResourceGroupLevelSignalErrorFull() instead")
    void managementLocksCreateOrUpdateAtResourceGroupLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksCreateOrUpdateAtResourceGroupLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksCreateOrUpdateAtResourceLevelSignalErrorFull() instead")
    void managementLocksCreateOrUpdateAtResourceLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksCreateOrUpdateAtResourceLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksCreateOrUpdateAtSubscriptionLevelSignalErrorFull() instead")
    void managementLocksCreateOrUpdateAtSubscriptionLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksCreateOrUpdateAtSubscriptionLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksDeleteAtResourceGroupLevelSignalErrorFull() instead")
    void managementLocksDeleteAtResourceGroupLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksDeleteAtResourceGroupLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksDeleteAtResourceLevelSignalErrorFull() instead")
    void managementLocksDeleteAtResourceLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksDeleteAtResourceLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksDeleteAtSubscriptionLevelSignalErrorFull() instead")
    void managementLocksDeleteAtSubscriptionLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksDeleteAtSubscriptionLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksGetSignalErrorFull() instead")
    void managementLocksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksGetAtResourceGroupLevelSignalErrorFull() instead")
    void managementLocksGetAtResourceGroupLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksGetAtResourceGroupLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksListAtResourceGroupLevelSignalErrorFull() instead")
    void managementLocksListAtResourceGroupLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksListAtResourceGroupLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksListAtResourceLevelSignalErrorFull() instead")
    void managementLocksListAtResourceLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksListAtResourceLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementLocksListAtSubscriptionLevelSignalErrorFull() instead")
    void managementLocksListAtSubscriptionLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementLocksListAtSubscriptionLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
