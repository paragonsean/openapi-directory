/**
 * ManagementLockClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ManagementLockListResult from '../model/ManagementLockListResult';
import ManagementLockObject from '../model/ManagementLockObject';

/**
* ManagementLocks service.
* @module api/ManagementLocksApi
* @version 2015-01-01
*/
export default class ManagementLocksApi {

    /**
    * Constructs a new ManagementLocksApi. 
    * @alias module:api/ManagementLocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the managementLocksCreateOrUpdateAtResourceGroupLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtResourceGroupLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a management lock at the resource group level.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} lockName The lock name.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/ManagementLockObject} parameters The management lock parameters.
     * @param {module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtResourceGroupLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksCreateOrUpdateAtResourceGroupLevel(resourceGroupName, lockName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksCreateOrUpdateAtResourceGroupLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateAtResourceGroupLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateAtResourceGroupLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksCreateOrUpdateAtResourceGroupLevel");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateAtResourceGroupLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksCreateOrUpdateAtResourceLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtResourceLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a management lock at the resource level or any level below resource.
     * @param {String} resourceGroupName The name of the resource group. 
     * @param {String} resourceProviderNamespace Resource identity.
     * @param {String} parentResourcePath Resource identity.
     * @param {String} resourceType Resource identity.
     * @param {String} resourceName Resource identity.
     * @param {String} lockName The name of lock.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/ManagementLockObject} parameters Create or update management lock parameters.
     * @param {module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtResourceLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksCreateOrUpdateAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksCreateOrUpdateAtSubscriptionLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtSubscriptionLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a management lock at the subscription level.
     * @param {String} lockName The name of lock.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/ManagementLockObject} parameters The management lock parameters.
     * @param {module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtSubscriptionLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksCreateOrUpdateAtSubscriptionLevel(lockName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateAtSubscriptionLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateAtSubscriptionLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksCreateOrUpdateAtSubscriptionLevel");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateAtSubscriptionLevel");
      }

      let pathParams = {
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksDeleteAtResourceGroupLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksDeleteAtResourceGroupLevelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the management lock of a resource group.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} lockName The name of lock.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksDeleteAtResourceGroupLevelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managementLocksDeleteAtResourceGroupLevel(resourceGroupName, lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksDeleteAtResourceGroupLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksDeleteAtResourceGroupLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksDeleteAtResourceGroupLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksDeleteAtResourceGroupLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksDeleteAtResourceLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksDeleteAtResourceLevelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the management lock of a resource or any level below resource.
     * @param {String} resourceGroupName The name of the resource group. 
     * @param {String} resourceProviderNamespace Resource identity.
     * @param {String} parentResourcePath Resource identity.
     * @param {String} resourceType Resource identity.
     * @param {String} resourceName Resource identity.
     * @param {String} lockName The name of lock.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksDeleteAtResourceLevelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managementLocksDeleteAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksDeleteAtResourceLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksDeleteAtSubscriptionLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksDeleteAtSubscriptionLevelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the management lock of a subscription.
     * @param {String} lockName The name of lock.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksDeleteAtSubscriptionLevelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managementLocksDeleteAtSubscriptionLevel(lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksDeleteAtSubscriptionLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksDeleteAtSubscriptionLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksDeleteAtSubscriptionLevel");
      }

      let pathParams = {
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksGet operation.
     * @callback module:api/ManagementLocksApi~managementLocksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the management lock of a scope.
     * @param {String} lockName Name of the management lock.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksGet(lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksGet");
      }

      let pathParams = {
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksGetAtResourceGroupLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksGetAtResourceGroupLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a management lock at the resource group level.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} lockName The lock name.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksGetAtResourceGroupLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksGetAtResourceGroupLevel(resourceGroupName, lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksGetAtResourceGroupLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksGetAtResourceGroupLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksGetAtResourceGroupLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksGetAtResourceGroupLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksListAtResourceGroupLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksListAtResourceGroupLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the management locks of a resource group.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/ManagementLocksApi~managementLocksListAtResourceGroupLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockListResult}
     */
    managementLocksListAtResourceGroupLevel(resourceGroupName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksListAtResourceGroupLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksListAtResourceGroupLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksListAtResourceGroupLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksListAtResourceLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksListAtResourceLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the management locks of a resource or any level below resource.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} resourceProviderNamespace Resource identity.
     * @param {String} parentResourcePath Resource identity.
     * @param {String} resourceType Resource identity.
     * @param {String} resourceName Resource identity.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/ManagementLocksApi~managementLocksListAtResourceLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockListResult}
     */
    managementLocksListAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksListAtResourceLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksListAtSubscriptionLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksListAtSubscriptionLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the management locks of a subscription.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/ManagementLocksApi~managementLocksListAtSubscriptionLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockListResult}
     */
    managementLocksListAtSubscriptionLevel(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksListAtSubscriptionLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksListAtSubscriptionLevel");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
