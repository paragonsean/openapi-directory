/**
 * ManagementLockClient
 * Azure resources can be locked to prevent other users in your organization from deleting or modifying resources.
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ManagementLockClient);
  }
}(this, function(expect, ManagementLockClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ManagementLockClient.ManagementLocksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ManagementLocksApi', function() {
    describe('managementLocksCreateOrUpdateAtResourceGroupLevel', function() {
      it('should call managementLocksCreateOrUpdateAtResourceGroupLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksCreateOrUpdateAtResourceGroupLevel
        //instance.managementLocksCreateOrUpdateAtResourceGroupLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksCreateOrUpdateAtResourceLevel', function() {
      it('should call managementLocksCreateOrUpdateAtResourceLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksCreateOrUpdateAtResourceLevel
        //instance.managementLocksCreateOrUpdateAtResourceLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksCreateOrUpdateAtSubscriptionLevel', function() {
      it('should call managementLocksCreateOrUpdateAtSubscriptionLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksCreateOrUpdateAtSubscriptionLevel
        //instance.managementLocksCreateOrUpdateAtSubscriptionLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksCreateOrUpdateByScope', function() {
      it('should call managementLocksCreateOrUpdateByScope successfully', function(done) {
        //uncomment below and update the code to test managementLocksCreateOrUpdateByScope
        //instance.managementLocksCreateOrUpdateByScope(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksDeleteAtResourceGroupLevel', function() {
      it('should call managementLocksDeleteAtResourceGroupLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksDeleteAtResourceGroupLevel
        //instance.managementLocksDeleteAtResourceGroupLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksDeleteAtResourceLevel', function() {
      it('should call managementLocksDeleteAtResourceLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksDeleteAtResourceLevel
        //instance.managementLocksDeleteAtResourceLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksDeleteAtSubscriptionLevel', function() {
      it('should call managementLocksDeleteAtSubscriptionLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksDeleteAtSubscriptionLevel
        //instance.managementLocksDeleteAtSubscriptionLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksDeleteByScope', function() {
      it('should call managementLocksDeleteByScope successfully', function(done) {
        //uncomment below and update the code to test managementLocksDeleteByScope
        //instance.managementLocksDeleteByScope(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksGetAtResourceGroupLevel', function() {
      it('should call managementLocksGetAtResourceGroupLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksGetAtResourceGroupLevel
        //instance.managementLocksGetAtResourceGroupLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksGetAtResourceLevel', function() {
      it('should call managementLocksGetAtResourceLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksGetAtResourceLevel
        //instance.managementLocksGetAtResourceLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksGetAtSubscriptionLevel', function() {
      it('should call managementLocksGetAtSubscriptionLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksGetAtSubscriptionLevel
        //instance.managementLocksGetAtSubscriptionLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksGetByScope', function() {
      it('should call managementLocksGetByScope successfully', function(done) {
        //uncomment below and update the code to test managementLocksGetByScope
        //instance.managementLocksGetByScope(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksListAtResourceGroupLevel', function() {
      it('should call managementLocksListAtResourceGroupLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksListAtResourceGroupLevel
        //instance.managementLocksListAtResourceGroupLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksListAtResourceLevel', function() {
      it('should call managementLocksListAtResourceLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksListAtResourceLevel
        //instance.managementLocksListAtResourceLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksListAtSubscriptionLevel', function() {
      it('should call managementLocksListAtSubscriptionLevel successfully', function(done) {
        //uncomment below and update the code to test managementLocksListAtSubscriptionLevel
        //instance.managementLocksListAtSubscriptionLevel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementLocksListByScope', function() {
      it('should call managementLocksListByScope successfully', function(done) {
        //uncomment below and update the code to test managementLocksListByScope
        //instance.managementLocksListByScope(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
