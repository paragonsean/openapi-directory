/**
 * ManagementLockClient
 * Azure resources can be locked to prevent other users in your organization from deleting or modifying resources.
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ManagementLockListResult from '../model/ManagementLockListResult';
import ManagementLockObject from '../model/ManagementLockObject';

/**
* ManagementLocks service.
* @module api/ManagementLocksApi
* @version 2016-09-01
*/
export default class ManagementLocksApi {

    /**
    * Constructs a new ManagementLocksApi. 
    * @alias module:api/ManagementLocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the managementLocksCreateOrUpdateAtResourceGroupLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtResourceGroupLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a management lock at the resource group level.
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param {String} resourceGroupName The name of the resource group to lock.
     * @param {String} lockName The lock name. The lock name can be a maximum of 260 characters. It cannot contain <, > %, &, :, \\, ?, /, or any control characters.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/ManagementLockObject} parameters The management lock parameters.
     * @param {module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtResourceGroupLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksCreateOrUpdateAtResourceGroupLevel(resourceGroupName, lockName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksCreateOrUpdateAtResourceGroupLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateAtResourceGroupLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateAtResourceGroupLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksCreateOrUpdateAtResourceGroupLevel");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateAtResourceGroupLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksCreateOrUpdateAtResourceLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtResourceLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a management lock at the resource level or any level below the resource.
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param {String} resourceGroupName The name of the resource group containing the resource to lock. 
     * @param {String} resourceProviderNamespace The resource provider namespace of the resource to lock.
     * @param {String} parentResourcePath The parent resource identity.
     * @param {String} resourceType The resource type of the resource to lock.
     * @param {String} resourceName The name of the resource to lock.
     * @param {String} lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain <, > %, &, :, \\, ?, /, or any control characters.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/ManagementLockObject} parameters Parameters for creating or updating a  management lock.
     * @param {module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtResourceLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksCreateOrUpdateAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateAtResourceLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksCreateOrUpdateAtSubscriptionLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtSubscriptionLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a management lock at the subscription level.
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param {String} lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain <, > %, &, :, \\, ?, /, or any control characters.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/ManagementLockObject} parameters The management lock parameters.
     * @param {module:api/ManagementLocksApi~managementLocksCreateOrUpdateAtSubscriptionLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksCreateOrUpdateAtSubscriptionLevel(lockName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateAtSubscriptionLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateAtSubscriptionLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksCreateOrUpdateAtSubscriptionLevel");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateAtSubscriptionLevel");
      }

      let pathParams = {
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksCreateOrUpdateByScope operation.
     * @callback module:api/ManagementLocksApi~managementLocksCreateOrUpdateByScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a management lock by scope.
     * @param {String} scope The scope for the lock. When providing a scope for the assignment, use '/subscriptions/{subscriptionId}' for subscriptions, '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}' for resources.
     * @param {String} lockName The name of lock.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {module:model/ManagementLockObject} parameters Create or update management lock parameters.
     * @param {module:api/ManagementLocksApi~managementLocksCreateOrUpdateByScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksCreateOrUpdateByScope(scope, lockName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling managementLocksCreateOrUpdateByScope");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateByScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateByScope");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateByScope");
      }

      let pathParams = {
        'scope': scope,
        'lockName': lockName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/locks/{lockName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksDeleteAtResourceGroupLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksDeleteAtResourceGroupLevelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a management lock at the resource group level.
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param {String} resourceGroupName The name of the resource group containing the lock.
     * @param {String} lockName The name of lock to delete.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksDeleteAtResourceGroupLevelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managementLocksDeleteAtResourceGroupLevel(resourceGroupName, lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksDeleteAtResourceGroupLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksDeleteAtResourceGroupLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksDeleteAtResourceGroupLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksDeleteAtResourceGroupLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksDeleteAtResourceLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksDeleteAtResourceLevelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the management lock of a resource or any level below the resource.
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param {String} resourceGroupName The name of the resource group containing the resource with the lock to delete. 
     * @param {String} resourceProviderNamespace The resource provider namespace of the resource with the lock to delete.
     * @param {String} parentResourcePath The parent resource identity.
     * @param {String} resourceType The resource type of the resource with the lock to delete.
     * @param {String} resourceName The name of the resource with the lock to delete.
     * @param {String} lockName The name of the lock to delete.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksDeleteAtResourceLevelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managementLocksDeleteAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksDeleteAtResourceLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksDeleteAtResourceLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksDeleteAtSubscriptionLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksDeleteAtSubscriptionLevelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the management lock at the subscription level.
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param {String} lockName The name of lock to delete.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksDeleteAtSubscriptionLevelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managementLocksDeleteAtSubscriptionLevel(lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksDeleteAtSubscriptionLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksDeleteAtSubscriptionLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksDeleteAtSubscriptionLevel");
      }

      let pathParams = {
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksDeleteByScope operation.
     * @callback module:api/ManagementLocksApi~managementLocksDeleteByScopeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a management lock by scope.
     * @param {String} scope The scope for the lock. 
     * @param {String} lockName The name of lock.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {module:api/ManagementLocksApi~managementLocksDeleteByScopeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managementLocksDeleteByScope(scope, lockName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling managementLocksDeleteByScope");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksDeleteByScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksDeleteByScope");
      }

      let pathParams = {
        'scope': scope,
        'lockName': lockName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/locks/{lockName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksGetAtResourceGroupLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksGetAtResourceGroupLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a management lock at the resource group level.
     * @param {String} resourceGroupName The name of the locked resource group.
     * @param {String} lockName The name of the lock to get.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksGetAtResourceGroupLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksGetAtResourceGroupLevel(resourceGroupName, lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksGetAtResourceGroupLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksGetAtResourceGroupLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksGetAtResourceGroupLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksGetAtResourceGroupLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksGetAtResourceLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksGetAtResourceLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the management lock of a resource or any level below resource.
     * @param {String} resourceGroupName The name of the resource group. 
     * @param {String} resourceProviderNamespace The namespace of the resource provider.
     * @param {String} parentResourcePath An extra path parameter needed in some services, like SQL Databases.
     * @param {String} resourceType The type of the resource.
     * @param {String} resourceName The name of the resource.
     * @param {String} lockName The name of lock.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksGetAtResourceLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksGetAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksGetAtResourceLevel");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksGetAtResourceLevel");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling managementLocksGetAtResourceLevel");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling managementLocksGetAtResourceLevel");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling managementLocksGetAtResourceLevel");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksGetAtResourceLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksGetAtResourceLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksGetAtResourceLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksGetAtSubscriptionLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksGetAtSubscriptionLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a management lock at the subscription level.
     * @param {String} lockName The name of the lock to get.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ManagementLocksApi~managementLocksGetAtSubscriptionLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksGetAtSubscriptionLevel(lockName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksGetAtSubscriptionLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksGetAtSubscriptionLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksGetAtSubscriptionLevel");
      }

      let pathParams = {
        'lockName': lockName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksGetByScope operation.
     * @callback module:api/ManagementLocksApi~managementLocksGetByScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a management lock by scope.
     * @param {String} scope The scope for the lock. 
     * @param {String} lockName The name of lock.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {module:api/ManagementLocksApi~managementLocksGetByScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockObject}
     */
    managementLocksGetByScope(scope, lockName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling managementLocksGetByScope");
      }
      // verify the required parameter 'lockName' is set
      if (lockName === undefined || lockName === null) {
        throw new Error("Missing the required parameter 'lockName' when calling managementLocksGetByScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksGetByScope");
      }

      let pathParams = {
        'scope': scope,
        'lockName': lockName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockObject;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/locks/{lockName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksListAtResourceGroupLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksListAtResourceGroupLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the management locks for a resource group.
     * @param {String} resourceGroupName The name of the resource group containing the locks to get.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/ManagementLocksApi~managementLocksListAtResourceGroupLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockListResult}
     */
    managementLocksListAtResourceGroupLevel(resourceGroupName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksListAtResourceGroupLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksListAtResourceGroupLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksListAtResourceGroupLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksListAtResourceLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksListAtResourceLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the management locks for a resource or any level below resource.
     * @param {String} resourceGroupName The name of the resource group containing the locked resource. The name is case insensitive.
     * @param {String} resourceProviderNamespace The namespace of the resource provider.
     * @param {String} parentResourcePath The parent resource identity.
     * @param {String} resourceType The resource type of the locked resource.
     * @param {String} resourceName The name of the locked resource.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/ManagementLocksApi~managementLocksListAtResourceLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockListResult}
     */
    managementLocksListAtResourceLevel(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksListAtResourceLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksListAtResourceLevel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksListAtSubscriptionLevel operation.
     * @callback module:api/ManagementLocksApi~managementLocksListAtSubscriptionLevelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the management locks for a subscription.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/ManagementLocksApi~managementLocksListAtSubscriptionLevelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockListResult}
     */
    managementLocksListAtSubscriptionLevel(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksListAtSubscriptionLevel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementLocksListAtSubscriptionLevel");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementLocksListByScope operation.
     * @callback module:api/ManagementLocksApi~managementLocksListByScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementLockListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the management locks for a scope.
     * @param {String} scope The scope for the lock. When providing a scope for the assignment, use '/subscriptions/{subscriptionId}' for subscriptions, '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for resource groups, and '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}' for resources.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/ManagementLocksApi~managementLocksListByScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementLockListResult}
     */
    managementLocksListByScope(scope, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling managementLocksListByScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementLocksListByScope");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementLockListResult;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/locks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
