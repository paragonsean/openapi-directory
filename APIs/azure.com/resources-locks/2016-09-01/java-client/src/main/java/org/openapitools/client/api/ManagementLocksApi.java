/*
 * ManagementLockClient
 * Azure resources can be locked to prevent other users in your organization from deleting or modifying resources.
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ManagementLockListResult;
import org.openapitools.client.model.ManagementLockObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementLocksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagementLocksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementLocksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for managementLocksCreateOrUpdateAtResourceGroupLevel
     * @param resourceGroupName The name of the resource group to lock. (required)
     * @param lockName The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The management lock parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksCreateOrUpdateAtResourceGroupLevelCall(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksCreateOrUpdateAtResourceGroupLevelValidateBeforeCall(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managementLocksCreateOrUpdateAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksCreateOrUpdateAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateAtResourceGroupLevel(Async)");
        }

        return managementLocksCreateOrUpdateAtResourceGroupLevelCall(resourceGroupName, lockName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * Creates or updates a management lock at the resource group level.
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group to lock. (required)
     * @param lockName The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The management lock parameters. (required)
     * @return ManagementLockObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockObject managementLocksCreateOrUpdateAtResourceGroupLevel(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters) throws ApiException {
        ApiResponse<ManagementLockObject> localVarResp = managementLocksCreateOrUpdateAtResourceGroupLevelWithHttpInfo(resourceGroupName, lockName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a management lock at the resource group level.
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group to lock. (required)
     * @param lockName The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The management lock parameters. (required)
     * @return ApiResponse&lt;ManagementLockObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockObject> managementLocksCreateOrUpdateAtResourceGroupLevelWithHttpInfo(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters) throws ApiException {
        okhttp3.Call localVarCall = managementLocksCreateOrUpdateAtResourceGroupLevelValidateBeforeCall(resourceGroupName, lockName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a management lock at the resource group level. (asynchronously)
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group to lock. (required)
     * @param lockName The lock name. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The management lock parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksCreateOrUpdateAtResourceGroupLevelAsync(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters, final ApiCallback<ManagementLockObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksCreateOrUpdateAtResourceGroupLevelValidateBeforeCall(resourceGroupName, lockName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksCreateOrUpdateAtResourceLevel
     * @param resourceGroupName The name of the resource group containing the resource to lock.  (required)
     * @param resourceProviderNamespace The resource provider namespace of the resource to lock. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to lock. (required)
     * @param resourceName The name of the resource to lock. (required)
     * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for creating or updating a  management lock. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksCreateOrUpdateAtResourceLevelCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksCreateOrUpdateAtResourceLevelValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managementLocksCreateOrUpdateAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksCreateOrUpdateAtResourceLevel(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling managementLocksCreateOrUpdateAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling managementLocksCreateOrUpdateAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling managementLocksCreateOrUpdateAtResourceLevel(Async)");
        }

        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateAtResourceLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateAtResourceLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksCreateOrUpdateAtResourceLevel(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateAtResourceLevel(Async)");
        }

        return managementLocksCreateOrUpdateAtResourceLevelCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * Creates or updates a management lock at the resource level or any level below the resource.
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the resource to lock.  (required)
     * @param resourceProviderNamespace The resource provider namespace of the resource to lock. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to lock. (required)
     * @param resourceName The name of the resource to lock. (required)
     * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for creating or updating a  management lock. (required)
     * @return ManagementLockObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockObject managementLocksCreateOrUpdateAtResourceLevel(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters) throws ApiException {
        ApiResponse<ManagementLockObject> localVarResp = managementLocksCreateOrUpdateAtResourceLevelWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a management lock at the resource level or any level below the resource.
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the resource to lock.  (required)
     * @param resourceProviderNamespace The resource provider namespace of the resource to lock. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to lock. (required)
     * @param resourceName The name of the resource to lock. (required)
     * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for creating or updating a  management lock. (required)
     * @return ApiResponse&lt;ManagementLockObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockObject> managementLocksCreateOrUpdateAtResourceLevelWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters) throws ApiException {
        okhttp3.Call localVarCall = managementLocksCreateOrUpdateAtResourceLevelValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a management lock at the resource level or any level below the resource. (asynchronously)
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the resource to lock.  (required)
     * @param resourceProviderNamespace The resource provider namespace of the resource to lock. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource to lock. (required)
     * @param resourceName The name of the resource to lock. (required)
     * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters for creating or updating a  management lock. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksCreateOrUpdateAtResourceLevelAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters, final ApiCallback<ManagementLockObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksCreateOrUpdateAtResourceLevelValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksCreateOrUpdateAtSubscriptionLevel
     * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The management lock parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksCreateOrUpdateAtSubscriptionLevelCall(String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksCreateOrUpdateAtSubscriptionLevelValidateBeforeCall(String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateAtSubscriptionLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateAtSubscriptionLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksCreateOrUpdateAtSubscriptionLevel(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateAtSubscriptionLevel(Async)");
        }

        return managementLocksCreateOrUpdateAtSubscriptionLevelCall(lockName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * Creates or updates a management lock at the subscription level.
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The management lock parameters. (required)
     * @return ManagementLockObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockObject managementLocksCreateOrUpdateAtSubscriptionLevel(String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters) throws ApiException {
        ApiResponse<ManagementLockObject> localVarResp = managementLocksCreateOrUpdateAtSubscriptionLevelWithHttpInfo(lockName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a management lock at the subscription level.
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The management lock parameters. (required)
     * @return ApiResponse&lt;ManagementLockObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockObject> managementLocksCreateOrUpdateAtSubscriptionLevelWithHttpInfo(String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters) throws ApiException {
        okhttp3.Call localVarCall = managementLocksCreateOrUpdateAtSubscriptionLevelValidateBeforeCall(lockName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a management lock at the subscription level. (asynchronously)
     * When you apply a lock at a parent scope, all child resources inherit the same lock. To create management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \\, ?, /, or any control characters. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The management lock parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksCreateOrUpdateAtSubscriptionLevelAsync(String lockName, String apiVersion, String subscriptionId, ManagementLockObject parameters, final ApiCallback<ManagementLockObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksCreateOrUpdateAtSubscriptionLevelValidateBeforeCall(lockName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksCreateOrUpdateByScope
     * @param scope The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources. (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Create or update management lock parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksCreateOrUpdateByScopeCall(String scope, String lockName, String apiVersion, ManagementLockObject parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksCreateOrUpdateByScopeValidateBeforeCall(String scope, String lockName, String apiVersion, ManagementLockObject parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling managementLocksCreateOrUpdateByScope(Async)");
        }

        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksCreateOrUpdateByScope(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksCreateOrUpdateByScope(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling managementLocksCreateOrUpdateByScope(Async)");
        }

        return managementLocksCreateOrUpdateByScopeCall(scope, lockName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Create or update a management lock by scope.
     * @param scope The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources. (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Create or update management lock parameters. (required)
     * @return ManagementLockObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockObject managementLocksCreateOrUpdateByScope(String scope, String lockName, String apiVersion, ManagementLockObject parameters) throws ApiException {
        ApiResponse<ManagementLockObject> localVarResp = managementLocksCreateOrUpdateByScopeWithHttpInfo(scope, lockName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a management lock by scope.
     * @param scope The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources. (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Create or update management lock parameters. (required)
     * @return ApiResponse&lt;ManagementLockObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockObject> managementLocksCreateOrUpdateByScopeWithHttpInfo(String scope, String lockName, String apiVersion, ManagementLockObject parameters) throws ApiException {
        okhttp3.Call localVarCall = managementLocksCreateOrUpdateByScopeValidateBeforeCall(scope, lockName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a management lock by scope.
     * @param scope The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources. (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param parameters Create or update management lock parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksCreateOrUpdateByScopeAsync(String scope, String lockName, String apiVersion, ManagementLockObject parameters, final ApiCallback<ManagementLockObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksCreateOrUpdateByScopeValidateBeforeCall(scope, lockName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksDeleteAtResourceGroupLevel
     * @param resourceGroupName The name of the resource group containing the lock. (required)
     * @param lockName The name of lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksDeleteAtResourceGroupLevelCall(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksDeleteAtResourceGroupLevelValidateBeforeCall(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managementLocksDeleteAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksDeleteAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksDeleteAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksDeleteAtResourceGroupLevel(Async)");
        }

        return managementLocksDeleteAtResourceGroupLevelCall(resourceGroupName, lockName, apiVersion, subscriptionId, _callback);

    }

    /**
     * Deletes a management lock at the resource group level.
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the lock. (required)
     * @param lockName The name of lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void managementLocksDeleteAtResourceGroupLevel(String resourceGroupName, String lockName, String apiVersion, String subscriptionId) throws ApiException {
        managementLocksDeleteAtResourceGroupLevelWithHttpInfo(resourceGroupName, lockName, apiVersion, subscriptionId);
    }

    /**
     * Deletes a management lock at the resource group level.
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the lock. (required)
     * @param lockName The name of lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> managementLocksDeleteAtResourceGroupLevelWithHttpInfo(String resourceGroupName, String lockName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = managementLocksDeleteAtResourceGroupLevelValidateBeforeCall(resourceGroupName, lockName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a management lock at the resource group level. (asynchronously)
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the lock. (required)
     * @param lockName The name of lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksDeleteAtResourceGroupLevelAsync(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksDeleteAtResourceGroupLevelValidateBeforeCall(resourceGroupName, lockName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksDeleteAtResourceLevel
     * @param resourceGroupName The name of the resource group containing the resource with the lock to delete.  (required)
     * @param resourceProviderNamespace The resource provider namespace of the resource with the lock to delete. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource with the lock to delete. (required)
     * @param resourceName The name of the resource with the lock to delete. (required)
     * @param lockName The name of the lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksDeleteAtResourceLevelCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksDeleteAtResourceLevelValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managementLocksDeleteAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksDeleteAtResourceLevel(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling managementLocksDeleteAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling managementLocksDeleteAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling managementLocksDeleteAtResourceLevel(Async)");
        }

        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksDeleteAtResourceLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksDeleteAtResourceLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksDeleteAtResourceLevel(Async)");
        }

        return managementLocksDeleteAtResourceLevelCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, _callback);

    }

    /**
     * Deletes the management lock of a resource or any level below the resource.
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the resource with the lock to delete.  (required)
     * @param resourceProviderNamespace The resource provider namespace of the resource with the lock to delete. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource with the lock to delete. (required)
     * @param resourceName The name of the resource with the lock to delete. (required)
     * @param lockName The name of the lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void managementLocksDeleteAtResourceLevel(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId) throws ApiException {
        managementLocksDeleteAtResourceLevelWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId);
    }

    /**
     * Deletes the management lock of a resource or any level below the resource.
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the resource with the lock to delete.  (required)
     * @param resourceProviderNamespace The resource provider namespace of the resource with the lock to delete. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource with the lock to delete. (required)
     * @param resourceName The name of the resource with the lock to delete. (required)
     * @param lockName The name of the lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> managementLocksDeleteAtResourceLevelWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = managementLocksDeleteAtResourceLevelValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the management lock of a resource or any level below the resource. (asynchronously)
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param resourceGroupName The name of the resource group containing the resource with the lock to delete.  (required)
     * @param resourceProviderNamespace The resource provider namespace of the resource with the lock to delete. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource with the lock to delete. (required)
     * @param resourceName The name of the resource with the lock to delete. (required)
     * @param lockName The name of the lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksDeleteAtResourceLevelAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksDeleteAtResourceLevelValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksDeleteAtSubscriptionLevel
     * @param lockName The name of lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksDeleteAtSubscriptionLevelCall(String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksDeleteAtSubscriptionLevelValidateBeforeCall(String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksDeleteAtSubscriptionLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksDeleteAtSubscriptionLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksDeleteAtSubscriptionLevel(Async)");
        }

        return managementLocksDeleteAtSubscriptionLevelCall(lockName, apiVersion, subscriptionId, _callback);

    }

    /**
     * Deletes the management lock at the subscription level.
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param lockName The name of lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void managementLocksDeleteAtSubscriptionLevel(String lockName, String apiVersion, String subscriptionId) throws ApiException {
        managementLocksDeleteAtSubscriptionLevelWithHttpInfo(lockName, apiVersion, subscriptionId);
    }

    /**
     * Deletes the management lock at the subscription level.
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param lockName The name of lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> managementLocksDeleteAtSubscriptionLevelWithHttpInfo(String lockName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = managementLocksDeleteAtSubscriptionLevelValidateBeforeCall(lockName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the management lock at the subscription level. (asynchronously)
     * To delete management locks, you must have access to Microsoft.Authorization/_* or Microsoft.Authorization/locks/_* actions. Of the built-in roles, only Owner and User Access Administrator are granted those actions.
     * @param lockName The name of lock to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksDeleteAtSubscriptionLevelAsync(String lockName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksDeleteAtSubscriptionLevelValidateBeforeCall(lockName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksDeleteByScope
     * @param scope The scope for the lock.  (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksDeleteByScopeCall(String scope, String lockName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksDeleteByScopeValidateBeforeCall(String scope, String lockName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling managementLocksDeleteByScope(Async)");
        }

        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksDeleteByScope(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksDeleteByScope(Async)");
        }

        return managementLocksDeleteByScopeCall(scope, lockName, apiVersion, _callback);

    }

    /**
     * 
     * Delete a management lock by scope.
     * @param scope The scope for the lock.  (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void managementLocksDeleteByScope(String scope, String lockName, String apiVersion) throws ApiException {
        managementLocksDeleteByScopeWithHttpInfo(scope, lockName, apiVersion);
    }

    /**
     * 
     * Delete a management lock by scope.
     * @param scope The scope for the lock.  (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> managementLocksDeleteByScopeWithHttpInfo(String scope, String lockName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managementLocksDeleteByScopeValidateBeforeCall(scope, lockName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a management lock by scope.
     * @param scope The scope for the lock.  (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksDeleteByScopeAsync(String scope, String lockName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksDeleteByScopeValidateBeforeCall(scope, lockName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksGetAtResourceGroupLevel
     * @param resourceGroupName The name of the locked resource group. (required)
     * @param lockName The name of the lock to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksGetAtResourceGroupLevelCall(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksGetAtResourceGroupLevelValidateBeforeCall(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managementLocksGetAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksGetAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksGetAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksGetAtResourceGroupLevel(Async)");
        }

        return managementLocksGetAtResourceGroupLevelCall(resourceGroupName, lockName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a management lock at the resource group level.
     * @param resourceGroupName The name of the locked resource group. (required)
     * @param lockName The name of the lock to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ManagementLockObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockObject managementLocksGetAtResourceGroupLevel(String resourceGroupName, String lockName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ManagementLockObject> localVarResp = managementLocksGetAtResourceGroupLevelWithHttpInfo(resourceGroupName, lockName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a management lock at the resource group level.
     * @param resourceGroupName The name of the locked resource group. (required)
     * @param lockName The name of the lock to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;ManagementLockObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockObject> managementLocksGetAtResourceGroupLevelWithHttpInfo(String resourceGroupName, String lockName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = managementLocksGetAtResourceGroupLevelValidateBeforeCall(resourceGroupName, lockName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a management lock at the resource group level.
     * @param resourceGroupName The name of the locked resource group. (required)
     * @param lockName The name of the lock to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksGetAtResourceGroupLevelAsync(String resourceGroupName, String lockName, String apiVersion, String subscriptionId, final ApiCallback<ManagementLockObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksGetAtResourceGroupLevelValidateBeforeCall(resourceGroupName, lockName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksGetAtResourceLevel
     * @param resourceGroupName The name of the resource group.  (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath An extra path parameter needed in some services, like SQL Databases. (required)
     * @param resourceType The type of the resource. (required)
     * @param resourceName The name of the resource. (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksGetAtResourceLevelCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksGetAtResourceLevelValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managementLocksGetAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksGetAtResourceLevel(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling managementLocksGetAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling managementLocksGetAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling managementLocksGetAtResourceLevel(Async)");
        }

        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksGetAtResourceLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksGetAtResourceLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksGetAtResourceLevel(Async)");
        }

        return managementLocksGetAtResourceLevelCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Get the management lock of a resource or any level below resource.
     * @param resourceGroupName The name of the resource group.  (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath An extra path parameter needed in some services, like SQL Databases. (required)
     * @param resourceType The type of the resource. (required)
     * @param resourceName The name of the resource. (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ManagementLockObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockObject managementLocksGetAtResourceLevel(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ManagementLockObject> localVarResp = managementLocksGetAtResourceLevelWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the management lock of a resource or any level below resource.
     * @param resourceGroupName The name of the resource group.  (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath An extra path parameter needed in some services, like SQL Databases. (required)
     * @param resourceType The type of the resource. (required)
     * @param resourceName The name of the resource. (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;ManagementLockObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockObject> managementLocksGetAtResourceLevelWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = managementLocksGetAtResourceLevelValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the management lock of a resource or any level below resource.
     * @param resourceGroupName The name of the resource group.  (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath An extra path parameter needed in some services, like SQL Databases. (required)
     * @param resourceType The type of the resource. (required)
     * @param resourceName The name of the resource. (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksGetAtResourceLevelAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, String apiVersion, String subscriptionId, final ApiCallback<ManagementLockObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksGetAtResourceLevelValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksGetAtSubscriptionLevel
     * @param lockName The name of the lock to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksGetAtSubscriptionLevelCall(String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksGetAtSubscriptionLevelValidateBeforeCall(String lockName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksGetAtSubscriptionLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksGetAtSubscriptionLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksGetAtSubscriptionLevel(Async)");
        }

        return managementLocksGetAtSubscriptionLevelCall(lockName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a management lock at the subscription level.
     * @param lockName The name of the lock to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ManagementLockObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockObject managementLocksGetAtSubscriptionLevel(String lockName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ManagementLockObject> localVarResp = managementLocksGetAtSubscriptionLevelWithHttpInfo(lockName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a management lock at the subscription level.
     * @param lockName The name of the lock to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;ManagementLockObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockObject> managementLocksGetAtSubscriptionLevelWithHttpInfo(String lockName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = managementLocksGetAtSubscriptionLevelValidateBeforeCall(lockName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a management lock at the subscription level.
     * @param lockName The name of the lock to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the lock. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksGetAtSubscriptionLevelAsync(String lockName, String apiVersion, String subscriptionId, final ApiCallback<ManagementLockObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksGetAtSubscriptionLevelValidateBeforeCall(lockName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksGetByScope
     * @param scope The scope for the lock.  (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksGetByScopeCall(String scope, String lockName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/locks/{lockName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "lockName" + "}", localVarApiClient.escapeString(lockName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksGetByScopeValidateBeforeCall(String scope, String lockName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling managementLocksGetByScope(Async)");
        }

        // verify the required parameter 'lockName' is set
        if (lockName == null) {
            throw new ApiException("Missing the required parameter 'lockName' when calling managementLocksGetByScope(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksGetByScope(Async)");
        }

        return managementLocksGetByScopeCall(scope, lockName, apiVersion, _callback);

    }

    /**
     * 
     * Get a management lock by scope.
     * @param scope The scope for the lock.  (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ManagementLockObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockObject managementLocksGetByScope(String scope, String lockName, String apiVersion) throws ApiException {
        ApiResponse<ManagementLockObject> localVarResp = managementLocksGetByScopeWithHttpInfo(scope, lockName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a management lock by scope.
     * @param scope The scope for the lock.  (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;ManagementLockObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockObject> managementLocksGetByScopeWithHttpInfo(String scope, String lockName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managementLocksGetByScopeValidateBeforeCall(scope, lockName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a management lock by scope.
     * @param scope The scope for the lock.  (required)
     * @param lockName The name of lock. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksGetByScopeAsync(String scope, String lockName, String apiVersion, final ApiCallback<ManagementLockObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksGetByScopeValidateBeforeCall(scope, lockName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksListAtResourceGroupLevel
     * @param resourceGroupName The name of the resource group containing the locks to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksListAtResourceGroupLevelCall(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/locks"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksListAtResourceGroupLevelValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managementLocksListAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksListAtResourceGroupLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksListAtResourceGroupLevel(Async)");
        }

        return managementLocksListAtResourceGroupLevelCall(resourceGroupName, apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Gets all the management locks for a resource group.
     * @param resourceGroupName The name of the resource group containing the locks to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ManagementLockListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockListResult managementLocksListAtResourceGroupLevel(String resourceGroupName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<ManagementLockListResult> localVarResp = managementLocksListAtResourceGroupLevelWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the management locks for a resource group.
     * @param resourceGroupName The name of the resource group containing the locks to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;ManagementLockListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockListResult> managementLocksListAtResourceGroupLevelWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = managementLocksListAtResourceGroupLevelValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<ManagementLockListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the management locks for a resource group.
     * @param resourceGroupName The name of the resource group containing the locks to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksListAtResourceGroupLevelAsync(String resourceGroupName, String apiVersion, String subscriptionId, String $filter, final ApiCallback<ManagementLockListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksListAtResourceGroupLevelValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksListAtResourceLevel
     * @param resourceGroupName The name of the resource group containing the locked resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the locked resource. (required)
     * @param resourceName The name of the locked resource. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksListAtResourceLevelCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/locks"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksListAtResourceLevelValidateBeforeCall(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managementLocksListAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling managementLocksListAtResourceLevel(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling managementLocksListAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling managementLocksListAtResourceLevel(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling managementLocksListAtResourceLevel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksListAtResourceLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksListAtResourceLevel(Async)");
        }

        return managementLocksListAtResourceLevelCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Gets all the management locks for a resource or any level below resource.
     * @param resourceGroupName The name of the resource group containing the locked resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the locked resource. (required)
     * @param resourceName The name of the locked resource. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ManagementLockListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockListResult managementLocksListAtResourceLevel(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<ManagementLockListResult> localVarResp = managementLocksListAtResourceLevelWithHttpInfo(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the management locks for a resource or any level below resource.
     * @param resourceGroupName The name of the resource group containing the locked resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the locked resource. (required)
     * @param resourceName The name of the locked resource. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;ManagementLockListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockListResult> managementLocksListAtResourceLevelWithHttpInfo(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = managementLocksListAtResourceLevelValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<ManagementLockListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the management locks for a resource or any level below resource.
     * @param resourceGroupName The name of the resource group containing the locked resource. The name is case insensitive. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the locked resource. (required)
     * @param resourceName The name of the locked resource. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksListAtResourceLevelAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String subscriptionId, String $filter, final ApiCallback<ManagementLockListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksListAtResourceLevelValidateBeforeCall(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksListAtSubscriptionLevel
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksListAtSubscriptionLevelCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/locks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksListAtSubscriptionLevelValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksListAtSubscriptionLevel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managementLocksListAtSubscriptionLevel(Async)");
        }

        return managementLocksListAtSubscriptionLevelCall(apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Gets all the management locks for a subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ManagementLockListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockListResult managementLocksListAtSubscriptionLevel(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<ManagementLockListResult> localVarResp = managementLocksListAtSubscriptionLevelWithHttpInfo(apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the management locks for a subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;ManagementLockListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockListResult> managementLocksListAtSubscriptionLevelWithHttpInfo(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = managementLocksListAtSubscriptionLevelValidateBeforeCall(apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<ManagementLockListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the management locks for a subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksListAtSubscriptionLevelAsync(String apiVersion, String subscriptionId, String $filter, final ApiCallback<ManagementLockListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksListAtSubscriptionLevelValidateBeforeCall(apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managementLocksListByScope
     * @param scope The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksListByScopeCall(String scope, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/locks"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managementLocksListByScopeValidateBeforeCall(String scope, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling managementLocksListByScope(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managementLocksListByScope(Async)");
        }

        return managementLocksListByScopeCall(scope, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets all the management locks for a scope.
     * @param scope The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ManagementLockListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public ManagementLockListResult managementLocksListByScope(String scope, String apiVersion, String $filter) throws ApiException {
        ApiResponse<ManagementLockListResult> localVarResp = managementLocksListByScopeWithHttpInfo(scope, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the management locks for a scope.
     * @param scope The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;ManagementLockListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagementLockListResult> managementLocksListByScopeWithHttpInfo(String scope, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = managementLocksListByScopeValidateBeforeCall(scope, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<ManagementLockListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the management locks for a scope.
     * @param scope The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of resource locks. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managementLocksListByScopeAsync(String scope, String apiVersion, String $filter, final ApiCallback<ManagementLockListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = managementLocksListByScopeValidateBeforeCall(scope, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<ManagementLockListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
