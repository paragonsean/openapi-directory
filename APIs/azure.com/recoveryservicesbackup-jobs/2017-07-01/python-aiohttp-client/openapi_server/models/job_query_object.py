# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobQueryObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_management_type: str=None, end_time: datetime=None, job_id: str=None, operation: str=None, start_time: datetime=None, status: str=None):
        """JobQueryObject - a model defined in OpenAPI

        :param backup_management_type: The backup_management_type of this JobQueryObject.
        :param end_time: The end_time of this JobQueryObject.
        :param job_id: The job_id of this JobQueryObject.
        :param operation: The operation of this JobQueryObject.
        :param start_time: The start_time of this JobQueryObject.
        :param status: The status of this JobQueryObject.
        """
        self.openapi_types = {
            'backup_management_type': str,
            'end_time': datetime,
            'job_id': str,
            'operation': str,
            'start_time': datetime,
            'status': str
        }

        self.attribute_map = {
            'backup_management_type': 'backupManagementType',
            'end_time': 'endTime',
            'job_id': 'jobId',
            'operation': 'operation',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._backup_management_type = backup_management_type
        self._end_time = end_time
        self._job_id = job_id
        self._operation = operation
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobQueryObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobQueryObject of this JobQueryObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_management_type(self):
        """Gets the backup_management_type of this JobQueryObject.

        Type of backup managmenent for the job.

        :return: The backup_management_type of this JobQueryObject.
        :rtype: str
        """
        return self._backup_management_type

    @backup_management_type.setter
    def backup_management_type(self, backup_management_type):
        """Sets the backup_management_type of this JobQueryObject.

        Type of backup managmenent for the job.

        :param backup_management_type: The backup_management_type of this JobQueryObject.
        :type backup_management_type: str
        """
        allowed_values = ["Invalid", "AzureIaasVM", "MAB", "DPM", "AzureBackupServer", "AzureSql"]  # noqa: E501
        if backup_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_management_type` ({0}), must be one of {1}"
                .format(backup_management_type, allowed_values)
            )

        self._backup_management_type = backup_management_type

    @property
    def end_time(self):
        """Gets the end_time of this JobQueryObject.

        Job has ended at this time. Value is in UTC.

        :return: The end_time of this JobQueryObject.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobQueryObject.

        Job has ended at this time. Value is in UTC.

        :param end_time: The end_time of this JobQueryObject.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def job_id(self):
        """Gets the job_id of this JobQueryObject.

        JobID represents the job uniquely.

        :return: The job_id of this JobQueryObject.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobQueryObject.

        JobID represents the job uniquely.

        :param job_id: The job_id of this JobQueryObject.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def operation(self):
        """Gets the operation of this JobQueryObject.

        Type of operation.

        :return: The operation of this JobQueryObject.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this JobQueryObject.

        Type of operation.

        :param operation: The operation of this JobQueryObject.
        :type operation: str
        """
        allowed_values = ["Invalid", "Register", "UnRegister", "ConfigureBackup", "Backup", "Restore", "DisableBackup", "DeleteBackupData"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def start_time(self):
        """Gets the start_time of this JobQueryObject.

        Job has started at this time. Value is in UTC.

        :return: The start_time of this JobQueryObject.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobQueryObject.

        Job has started at this time. Value is in UTC.

        :param start_time: The start_time of this JobQueryObject.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this JobQueryObject.

        Status of the job.

        :return: The status of this JobQueryObject.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobQueryObject.

        Status of the job.

        :param status: The status of this JobQueryObject.
        :type status: str
        """
        allowed_values = ["Invalid", "InProgress", "Completed", "Failed", "CompletedWithWarnings", "Cancelled", "Cancelling"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
