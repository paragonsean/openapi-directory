/*
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TableService;
import org.openapitools.client.model.TableServicesListMetricDefinitions200Response;
import org.openapitools.client.model.TableServicesListMetrics200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TableServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TableServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TableServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tableServicesGet
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Table service has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableServicesGetCall(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/tableservices/{serviceType}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()))
            .replace("{" + "serviceType" + "}", localVarApiClient.escapeString(serviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tableServicesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tableServicesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tableServicesGet(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling tableServicesGet(Async)");
        }

        // verify the required parameter 'serviceType' is set
        if (serviceType == null) {
            throw new ApiException("Missing the required parameter 'serviceType' when calling tableServicesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tableServicesGet(Async)");
        }

        return tableServicesGetCall(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, _callback);

    }

    /**
     * 
     * Returns the table service.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @return TableService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Table service has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public TableService tableServicesGet(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion) throws ApiException {
        ApiResponse<TableService> localVarResp = tableServicesGetWithHttpInfo(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the table service.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;TableService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Table service has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableService> tableServicesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = tableServicesGetValidateBeforeCall(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, null);
        Type localVarReturnType = new TypeToken<TableService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the table service.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Table service has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableServicesGetAsync(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion, final ApiCallback<TableService> _callback) throws ApiException {

        okhttp3.Call localVarCall = tableServicesGetValidateBeforeCall(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TableService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tableServicesListMetricDefinitions
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metric definitions has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableServicesListMetricDefinitionsCall(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/tableservices/{serviceType}/metricdefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()))
            .replace("{" + "serviceType" + "}", localVarApiClient.escapeString(serviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tableServicesListMetricDefinitionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tableServicesListMetricDefinitions(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tableServicesListMetricDefinitions(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling tableServicesListMetricDefinitions(Async)");
        }

        // verify the required parameter 'serviceType' is set
        if (serviceType == null) {
            throw new ApiException("Missing the required parameter 'serviceType' when calling tableServicesListMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tableServicesListMetricDefinitions(Async)");
        }

        return tableServicesListMetricDefinitionsCall(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, _callback);

    }

    /**
     * 
     * Returns a list of metric definitions for table service.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @return TableServicesListMetricDefinitions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metric definitions has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public TableServicesListMetricDefinitions200Response tableServicesListMetricDefinitions(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion) throws ApiException {
        ApiResponse<TableServicesListMetricDefinitions200Response> localVarResp = tableServicesListMetricDefinitionsWithHttpInfo(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of metric definitions for table service.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;TableServicesListMetricDefinitions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metric definitions has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableServicesListMetricDefinitions200Response> tableServicesListMetricDefinitionsWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = tableServicesListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, null);
        Type localVarReturnType = new TypeToken<TableServicesListMetricDefinitions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of metric definitions for table service.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metric definitions has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableServicesListMetricDefinitionsAsync(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion, final ApiCallback<TableServicesListMetricDefinitions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tableServicesListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TableServicesListMetricDefinitions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tableServicesListMetrics
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metrics has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableServicesListMetricsCall(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/tableservices/{serviceType}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()))
            .replace("{" + "serviceType" + "}", localVarApiClient.escapeString(serviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tableServicesListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tableServicesListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tableServicesListMetrics(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling tableServicesListMetrics(Async)");
        }

        // verify the required parameter 'serviceType' is set
        if (serviceType == null) {
            throw new ApiException("Missing the required parameter 'serviceType' when calling tableServicesListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tableServicesListMetrics(Async)");
        }

        return tableServicesListMetricsCall(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, _callback);

    }

    /**
     * 
     * Returns a list of metrics for table service.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @return TableServicesListMetrics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metrics has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public TableServicesListMetrics200Response tableServicesListMetrics(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion) throws ApiException {
        ApiResponse<TableServicesListMetrics200Response> localVarResp = tableServicesListMetricsWithHttpInfo(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of metrics for table service.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;TableServicesListMetrics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metrics has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TableServicesListMetrics200Response> tableServicesListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = tableServicesListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, null);
        Type localVarReturnType = new TypeToken<TableServicesListMetrics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of metrics for table service.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param serviceType The service type. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metrics has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tableServicesListMetricsAsync(String subscriptionId, String resourceGroupName, String farmId, String serviceType, String apiVersion, final ApiCallback<TableServicesListMetrics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tableServicesListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, farmId, serviceType, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TableServicesListMetrics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
