# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TableServiceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, settings: object=None, health_status: str=None, version: str=None):
        """TableServiceProperties - a model defined in OpenAPI

        :param settings: The settings of this TableServiceProperties.
        :param health_status: The health_status of this TableServiceProperties.
        :param version: The version of this TableServiceProperties.
        """
        self.openapi_types = {
            'settings': object,
            'health_status': str,
            'version': str
        }

        self.attribute_map = {
            'settings': 'settings',
            'health_status': 'healthStatus',
            'version': 'version'
        }

        self._settings = settings
        self._health_status = health_status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableServiceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableServiceProperties of this TableServiceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def settings(self):
        """Gets the settings of this TableServiceProperties.

        Settings of storage services.

        :return: The settings of this TableServiceProperties.
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this TableServiceProperties.

        Settings of storage services.

        :param settings: The settings of this TableServiceProperties.
        :type settings: object
        """

        self._settings = settings

    @property
    def health_status(self):
        """Gets the health_status of this TableServiceProperties.

        Current health status.

        :return: The health_status of this TableServiceProperties.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this TableServiceProperties.

        Current health status.

        :param health_status: The health_status of this TableServiceProperties.
        :type health_status: str
        """
        allowed_values = ["Unknown", "Healthy", "Warning", "Critical"]  # noqa: E501
        if health_status not in allowed_values:
            raise ValueError(
                "Invalid value for `health_status` ({0}), must be one of {1}"
                .format(health_status, allowed_values)
            )

        self._health_status = health_status

    @property
    def version(self):
        """Gets the version of this TableServiceProperties.

        Storage service version.

        :return: The version of this TableServiceProperties.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TableServiceProperties.

        Storage service version.

        :param version: The version of this TableServiceProperties.
        :type version: str
        """

        self._version = version
