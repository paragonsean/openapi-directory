# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TableServicesListMetrics200ResponseValueInnerMetricValuesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: float=None, count: int=None, maximum: float=None, minimum: float=None, properties: str=None, time_stamp: datetime=None, total: float=None):
        """TableServicesListMetrics200ResponseValueInnerMetricValuesInner - a model defined in OpenAPI

        :param average: The average of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :param count: The count of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :param maximum: The maximum of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :param minimum: The minimum of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :param properties: The properties of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :param time_stamp: The time_stamp of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :param total: The total of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        """
        self.openapi_types = {
            'average': float,
            'count': int,
            'maximum': float,
            'minimum': float,
            'properties': str,
            'time_stamp': datetime,
            'total': float
        }

        self.attribute_map = {
            'average': 'average',
            'count': 'count',
            'maximum': 'maximum',
            'minimum': 'minimum',
            'properties': 'properties',
            'time_stamp': 'timeStamp',
            'total': 'total'
        }

        self._average = average
        self._count = count
        self._maximum = maximum
        self._minimum = minimum
        self._properties = properties
        self._time_stamp = time_stamp
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableServicesListMetrics200ResponseValueInnerMetricValuesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableServices_ListMetrics_200_response_value_inner_metricValues_inner of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Average value of metric.

        :return: The average of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Average value of metric.

        :param average: The average of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :type average: float
        """

        self._average = average

    @property
    def count(self):
        """Gets the count of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Count of metric values.

        :return: The count of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Count of metric values.

        :param count: The count of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :type count: int
        """

        self._count = count

    @property
    def maximum(self):
        """Gets the maximum of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Maximum value of metric.

        :return: The maximum of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Maximum value of metric.

        :param maximum: The maximum of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :type maximum: float
        """

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Minimum value of metric.

        :return: The minimum of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Minimum value of metric.

        :param minimum: The minimum of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :type minimum: float
        """

        self._minimum = minimum

    @property
    def properties(self):
        """Gets the properties of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Metric value properties.

        :return: The properties of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Metric value properties.

        :param properties: The properties of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :type properties: str
        """

        self._properties = properties

    @property
    def time_stamp(self):
        """Gets the time_stamp of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Timestamp of metric value.

        :return: The time_stamp of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Timestamp of metric value.

        :param time_stamp: The time_stamp of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :type time_stamp: datetime
        """

        self._time_stamp = time_stamp

    @property
    def total(self):
        """Gets the total of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Total value of metric.

        :return: The total of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.

        Total value of metric.

        :param total: The total of this TableServicesListMetrics200ResponseValueInnerMetricValuesInner.
        :type total: float
        """

        self._total = total
