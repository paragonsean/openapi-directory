/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, log files and configurations.
 *
 * The version of the OpenAPI document: 2017-04-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfigurationListResult;
import org.openapitools.client.model.ModelConfiguration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigurationsApi
 */
@Disabled
public class ConfigurationsApiTest {

    private final ConfigurationsApi api = new ConfigurationsApi();

    /**
     * Updates a configuration of a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configurationsCreateOrUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String configurationName = null;
        ModelConfiguration parameters = null;
        ModelConfiguration response = api.configurationsCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, configurationName, parameters);
        // TODO: test validations
    }

    /**
     * Gets information about a configuration of server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configurationsGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String configurationName = null;
        ModelConfiguration response = api.configurationsGet(apiVersion, subscriptionId, resourceGroupName, serverName, configurationName);
        // TODO: test validations
    }

    /**
     * List all the configurations in a given server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configurationsListByServerTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        ConfigurationListResult response = api.configurationsListByServer(apiVersion, subscriptionId, resourceGroupName, serverName);
        // TODO: test validations
    }

}
