/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, log files and configurations.
 *
 * The version of the OpenAPI document: 2017-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerForCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerForCreate::OAIServerForCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerForCreate::OAIServerForCreate() {
    this->initializeModel();
}

OAIServerForCreate::~OAIServerForCreate() {}

void OAIServerForCreate::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIServerForCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerForCreate::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIServerForCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerForCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIServerForCreate::getLocation() const {
    return m_location;
}
void OAIServerForCreate::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIServerForCreate::is_location_Set() const{
    return m_location_isSet;
}

bool OAIServerForCreate::is_location_Valid() const{
    return m_location_isValid;
}

OAIServerPropertiesForCreate OAIServerForCreate::getProperties() const {
    return m_properties;
}
void OAIServerForCreate::setProperties(const OAIServerPropertiesForCreate &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIServerForCreate::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIServerForCreate::is_properties_Valid() const{
    return m_properties_isValid;
}

OAISku OAIServerForCreate::getSku() const {
    return m_sku;
}
void OAIServerForCreate::setSku(const OAISku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIServerForCreate::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIServerForCreate::is_sku_Valid() const{
    return m_sku_isValid;
}

QMap<QString, QString> OAIServerForCreate::getTags() const {
    return m_tags;
}
void OAIServerForCreate::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIServerForCreate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIServerForCreate::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIServerForCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerForCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && m_properties_isValid && true;
}

} // namespace OpenAPI
