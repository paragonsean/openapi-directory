/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, log files and configurations.
 *
 * The version of the OpenAPI document: 2017-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerPropertiesForDefaultCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerPropertiesForDefaultCreate::OAIServerPropertiesForDefaultCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerPropertiesForDefaultCreate::OAIServerPropertiesForDefaultCreate() {
    this->initializeModel();
}

OAIServerPropertiesForDefaultCreate::~OAIServerPropertiesForDefaultCreate() {}

void OAIServerPropertiesForDefaultCreate::initializeModel() {

    m_administrator_login_isSet = false;
    m_administrator_login_isValid = false;

    m_administrator_login_password_isSet = false;
    m_administrator_login_password_isValid = false;

    m_create_mode_isSet = false;
    m_create_mode_isValid = false;

    m_ssl_enforcement_isSet = false;
    m_ssl_enforcement_isValid = false;

    m_storage_mb_isSet = false;
    m_storage_mb_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIServerPropertiesForDefaultCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerPropertiesForDefaultCreate::fromJsonObject(QJsonObject json) {

    m_administrator_login_isValid = ::OpenAPI::fromJsonValue(m_administrator_login, json[QString("administratorLogin")]);
    m_administrator_login_isSet = !json[QString("administratorLogin")].isNull() && m_administrator_login_isValid;

    m_administrator_login_password_isValid = ::OpenAPI::fromJsonValue(m_administrator_login_password, json[QString("administratorLoginPassword")]);
    m_administrator_login_password_isSet = !json[QString("administratorLoginPassword")].isNull() && m_administrator_login_password_isValid;

    m_create_mode_isValid = ::OpenAPI::fromJsonValue(m_create_mode, json[QString("createMode")]);
    m_create_mode_isSet = !json[QString("createMode")].isNull() && m_create_mode_isValid;

    m_ssl_enforcement_isValid = ::OpenAPI::fromJsonValue(m_ssl_enforcement, json[QString("sslEnforcement")]);
    m_ssl_enforcement_isSet = !json[QString("sslEnforcement")].isNull() && m_ssl_enforcement_isValid;

    m_storage_mb_isValid = ::OpenAPI::fromJsonValue(m_storage_mb, json[QString("storageMB")]);
    m_storage_mb_isSet = !json[QString("storageMB")].isNull() && m_storage_mb_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIServerPropertiesForDefaultCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerPropertiesForDefaultCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_administrator_login_isSet) {
        obj.insert(QString("administratorLogin"), ::OpenAPI::toJsonValue(m_administrator_login));
    }
    if (m_administrator_login_password_isSet) {
        obj.insert(QString("administratorLoginPassword"), ::OpenAPI::toJsonValue(m_administrator_login_password));
    }
    if (m_create_mode_isSet) {
        obj.insert(QString("createMode"), ::OpenAPI::toJsonValue(m_create_mode));
    }
    if (m_ssl_enforcement.isSet()) {
        obj.insert(QString("sslEnforcement"), ::OpenAPI::toJsonValue(m_ssl_enforcement));
    }
    if (m_storage_mb_isSet) {
        obj.insert(QString("storageMB"), ::OpenAPI::toJsonValue(m_storage_mb));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIServerPropertiesForDefaultCreate::getAdministratorLogin() const {
    return m_administrator_login;
}
void OAIServerPropertiesForDefaultCreate::setAdministratorLogin(const QString &administrator_login) {
    m_administrator_login = administrator_login;
    m_administrator_login_isSet = true;
}

bool OAIServerPropertiesForDefaultCreate::is_administrator_login_Set() const{
    return m_administrator_login_isSet;
}

bool OAIServerPropertiesForDefaultCreate::is_administrator_login_Valid() const{
    return m_administrator_login_isValid;
}

QString OAIServerPropertiesForDefaultCreate::getAdministratorLoginPassword() const {
    return m_administrator_login_password;
}
void OAIServerPropertiesForDefaultCreate::setAdministratorLoginPassword(const QString &administrator_login_password) {
    m_administrator_login_password = administrator_login_password;
    m_administrator_login_password_isSet = true;
}

bool OAIServerPropertiesForDefaultCreate::is_administrator_login_password_Set() const{
    return m_administrator_login_password_isSet;
}

bool OAIServerPropertiesForDefaultCreate::is_administrator_login_password_Valid() const{
    return m_administrator_login_password_isValid;
}

QString OAIServerPropertiesForDefaultCreate::getCreateMode() const {
    return m_create_mode;
}
void OAIServerPropertiesForDefaultCreate::setCreateMode(const QString &create_mode) {
    m_create_mode = create_mode;
    m_create_mode_isSet = true;
}

bool OAIServerPropertiesForDefaultCreate::is_create_mode_Set() const{
    return m_create_mode_isSet;
}

bool OAIServerPropertiesForDefaultCreate::is_create_mode_Valid() const{
    return m_create_mode_isValid;
}

OAISslEnforcement OAIServerPropertiesForDefaultCreate::getSslEnforcement() const {
    return m_ssl_enforcement;
}
void OAIServerPropertiesForDefaultCreate::setSslEnforcement(const OAISslEnforcement &ssl_enforcement) {
    m_ssl_enforcement = ssl_enforcement;
    m_ssl_enforcement_isSet = true;
}

bool OAIServerPropertiesForDefaultCreate::is_ssl_enforcement_Set() const{
    return m_ssl_enforcement_isSet;
}

bool OAIServerPropertiesForDefaultCreate::is_ssl_enforcement_Valid() const{
    return m_ssl_enforcement_isValid;
}

qint64 OAIServerPropertiesForDefaultCreate::getStorageMb() const {
    return m_storage_mb;
}
void OAIServerPropertiesForDefaultCreate::setStorageMb(const qint64 &storage_mb) {
    m_storage_mb = storage_mb;
    m_storage_mb_isSet = true;
}

bool OAIServerPropertiesForDefaultCreate::is_storage_mb_Set() const{
    return m_storage_mb_isSet;
}

bool OAIServerPropertiesForDefaultCreate::is_storage_mb_Valid() const{
    return m_storage_mb_isValid;
}

OAIServerVersion OAIServerPropertiesForDefaultCreate::getVersion() const {
    return m_version;
}
void OAIServerPropertiesForDefaultCreate::setVersion(const OAIServerVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIServerPropertiesForDefaultCreate::is_version_Set() const{
    return m_version_isSet;
}

bool OAIServerPropertiesForDefaultCreate::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIServerPropertiesForDefaultCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrator_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrator_login_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_enforcement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerPropertiesForDefaultCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_administrator_login_isValid && m_administrator_login_password_isValid && m_create_mode_isValid && true;
}

} // namespace OpenAPI
