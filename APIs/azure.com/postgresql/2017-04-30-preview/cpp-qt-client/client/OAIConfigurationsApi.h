/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, log files and configurations.
 *
 * The version of the OpenAPI document: 2017-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConfigurationsApi_H
#define OAI_OAIConfigurationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfiguration.h"
#include "OAIConfigurationListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConfigurationsApi : public QObject {
    Q_OBJECT

public:
    OAIConfigurationsApi(const int timeOut = 0);
    ~OAIConfigurationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  configuration_name QString [required]
    * @param[in]  parameters OAIConfiguration [required]
    */
    virtual void configurationsCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &configuration_name, const OAIConfiguration &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  configuration_name QString [required]
    */
    virtual void configurationsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &configuration_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    */
    virtual void configurationsListByServer(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void configurationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void configurationsGetCallback(OAIHttpRequestWorker *worker);
    void configurationsListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void configurationsCreateOrUpdateSignal(OAIConfiguration summary);
    void configurationsGetSignal(OAIConfiguration summary);
    void configurationsListByServerSignal(OAIConfigurationListResult summary);


    void configurationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConfiguration summary);
    void configurationsGetSignalFull(OAIHttpRequestWorker *worker, OAIConfiguration summary);
    void configurationsListByServerSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationListResult summary);

    Q_DECL_DEPRECATED_X("Use configurationsCreateOrUpdateSignalError() instead")
    void configurationsCreateOrUpdateSignalE(OAIConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationsCreateOrUpdateSignalError(OAIConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationsGetSignalError() instead")
    void configurationsGetSignalE(OAIConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationsGetSignalError(OAIConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationsListByServerSignalError() instead")
    void configurationsListByServerSignalE(OAIConfigurationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationsListByServerSignalError(OAIConfigurationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use configurationsCreateOrUpdateSignalErrorFull() instead")
    void configurationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationsGetSignalErrorFull() instead")
    void configurationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationsListByServerSignalErrorFull() instead")
    void configurationsListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationsListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
