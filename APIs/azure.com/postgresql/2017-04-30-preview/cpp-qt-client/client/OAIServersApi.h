/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, log files and configurations.
 *
 * The version of the OpenAPI document: 2017-04-30-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServersApi_H
#define OAI_OAIServersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIServer.h"
#include "OAIServerForCreate.h"
#include "OAIServerListResult.h"
#include "OAIServerUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServersApi : public QObject {
    Q_OBJECT

public:
    OAIServersApi(const int timeOut = 0);
    ~OAIServersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  parameters OAIServerForCreate [required]
    */
    virtual void serversCreate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const OAIServerForCreate &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    */
    virtual void serversDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    */
    virtual void serversGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void serversListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  parameters OAIServerUpdateParameters [required]
    */
    virtual void serversUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const OAIServerUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serversCreateCallback(OAIHttpRequestWorker *worker);
    void serversDeleteCallback(OAIHttpRequestWorker *worker);
    void serversGetCallback(OAIHttpRequestWorker *worker);
    void serversListCallback(OAIHttpRequestWorker *worker);
    void serversListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void serversUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serversCreateSignal(OAIServer summary);
    void serversDeleteSignal();
    void serversGetSignal(OAIServer summary);
    void serversListSignal(OAIServerListResult summary);
    void serversListByResourceGroupSignal(OAIServerListResult summary);
    void serversUpdateSignal(OAIServer summary);


    void serversCreateSignalFull(OAIHttpRequestWorker *worker, OAIServer summary);
    void serversDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serversGetSignalFull(OAIHttpRequestWorker *worker, OAIServer summary);
    void serversListSignalFull(OAIHttpRequestWorker *worker, OAIServerListResult summary);
    void serversListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIServerListResult summary);
    void serversUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServer summary);

    Q_DECL_DEPRECATED_X("Use serversCreateSignalError() instead")
    void serversCreateSignalE(OAIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversCreateSignalError(OAIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversDeleteSignalError() instead")
    void serversDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serversDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversGetSignalError() instead")
    void serversGetSignalE(OAIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversGetSignalError(OAIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListSignalError() instead")
    void serversListSignalE(OAIServerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListSignalError(OAIServerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListByResourceGroupSignalError() instead")
    void serversListByResourceGroupSignalE(OAIServerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListByResourceGroupSignalError(OAIServerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversUpdateSignalError() instead")
    void serversUpdateSignalE(OAIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversUpdateSignalError(OAIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serversCreateSignalErrorFull() instead")
    void serversCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversDeleteSignalErrorFull() instead")
    void serversDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversGetSignalErrorFull() instead")
    void serversGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListSignalErrorFull() instead")
    void serversListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListByResourceGroupSignalErrorFull() instead")
    void serversListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversUpdateSignalErrorFull() instead")
    void serversUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
