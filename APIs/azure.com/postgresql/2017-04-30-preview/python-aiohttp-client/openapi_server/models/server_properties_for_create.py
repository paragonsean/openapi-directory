# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_version import ServerVersion
from openapi_server.models.ssl_enforcement import SslEnforcement
from openapi_server import util


class ServerPropertiesForCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_mode: str=None, ssl_enforcement: SslEnforcement=None, storage_mb: int=None, version: ServerVersion=None):
        """ServerPropertiesForCreate - a model defined in OpenAPI

        :param create_mode: The create_mode of this ServerPropertiesForCreate.
        :param ssl_enforcement: The ssl_enforcement of this ServerPropertiesForCreate.
        :param storage_mb: The storage_mb of this ServerPropertiesForCreate.
        :param version: The version of this ServerPropertiesForCreate.
        """
        self.openapi_types = {
            'create_mode': str,
            'ssl_enforcement': SslEnforcement,
            'storage_mb': int,
            'version': ServerVersion
        }

        self.attribute_map = {
            'create_mode': 'createMode',
            'ssl_enforcement': 'sslEnforcement',
            'storage_mb': 'storageMB',
            'version': 'version'
        }

        self._create_mode = create_mode
        self._ssl_enforcement = ssl_enforcement
        self._storage_mb = storage_mb
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerPropertiesForCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerPropertiesForCreate of this ServerPropertiesForCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_mode(self):
        """Gets the create_mode of this ServerPropertiesForCreate.

        The mode to create a new server.

        :return: The create_mode of this ServerPropertiesForCreate.
        :rtype: str
        """
        return self._create_mode

    @create_mode.setter
    def create_mode(self, create_mode):
        """Sets the create_mode of this ServerPropertiesForCreate.

        The mode to create a new server.

        :param create_mode: The create_mode of this ServerPropertiesForCreate.
        :type create_mode: str
        """
        allowed_values = ["Default", "PointInTimeRestore"]  # noqa: E501
        if create_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `create_mode` ({0}), must be one of {1}"
                .format(create_mode, allowed_values)
            )

        self._create_mode = create_mode

    @property
    def ssl_enforcement(self):
        """Gets the ssl_enforcement of this ServerPropertiesForCreate.


        :return: The ssl_enforcement of this ServerPropertiesForCreate.
        :rtype: SslEnforcement
        """
        return self._ssl_enforcement

    @ssl_enforcement.setter
    def ssl_enforcement(self, ssl_enforcement):
        """Sets the ssl_enforcement of this ServerPropertiesForCreate.


        :param ssl_enforcement: The ssl_enforcement of this ServerPropertiesForCreate.
        :type ssl_enforcement: SslEnforcement
        """

        self._ssl_enforcement = ssl_enforcement

    @property
    def storage_mb(self):
        """Gets the storage_mb of this ServerPropertiesForCreate.

        The maximum storage allowed for a server.

        :return: The storage_mb of this ServerPropertiesForCreate.
        :rtype: int
        """
        return self._storage_mb

    @storage_mb.setter
    def storage_mb(self, storage_mb):
        """Sets the storage_mb of this ServerPropertiesForCreate.

        The maximum storage allowed for a server.

        :param storage_mb: The storage_mb of this ServerPropertiesForCreate.
        :type storage_mb: int
        """
        if storage_mb is not None and storage_mb < 1024:
            raise ValueError("Invalid value for `storage_mb`, must be a value greater than or equal to `1024`")

        self._storage_mb = storage_mb

    @property
    def version(self):
        """Gets the version of this ServerPropertiesForCreate.


        :return: The version of this ServerPropertiesForCreate.
        :rtype: ServerVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServerPropertiesForCreate.


        :param version: The version of this ServerPropertiesForCreate.
        :type version: ServerVersion
        """

        self._version = version
