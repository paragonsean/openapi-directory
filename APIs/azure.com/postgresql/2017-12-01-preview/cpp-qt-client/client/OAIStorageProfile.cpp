/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageProfile::OAIStorageProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageProfile::OAIStorageProfile() {
    this->initializeModel();
}

OAIStorageProfile::~OAIStorageProfile() {}

void OAIStorageProfile::initializeModel() {

    m_backup_retention_days_isSet = false;
    m_backup_retention_days_isValid = false;

    m_geo_redundant_backup_isSet = false;
    m_geo_redundant_backup_isValid = false;

    m_storage_autogrow_isSet = false;
    m_storage_autogrow_isValid = false;

    m_storage_mb_isSet = false;
    m_storage_mb_isValid = false;
}

void OAIStorageProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageProfile::fromJsonObject(QJsonObject json) {

    m_backup_retention_days_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_days, json[QString("backupRetentionDays")]);
    m_backup_retention_days_isSet = !json[QString("backupRetentionDays")].isNull() && m_backup_retention_days_isValid;

    m_geo_redundant_backup_isValid = ::OpenAPI::fromJsonValue(m_geo_redundant_backup, json[QString("geoRedundantBackup")]);
    m_geo_redundant_backup_isSet = !json[QString("geoRedundantBackup")].isNull() && m_geo_redundant_backup_isValid;

    m_storage_autogrow_isValid = ::OpenAPI::fromJsonValue(m_storage_autogrow, json[QString("storageAutogrow")]);
    m_storage_autogrow_isSet = !json[QString("storageAutogrow")].isNull() && m_storage_autogrow_isValid;

    m_storage_mb_isValid = ::OpenAPI::fromJsonValue(m_storage_mb, json[QString("storageMB")]);
    m_storage_mb_isSet = !json[QString("storageMB")].isNull() && m_storage_mb_isValid;
}

QString OAIStorageProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_retention_days_isSet) {
        obj.insert(QString("backupRetentionDays"), ::OpenAPI::toJsonValue(m_backup_retention_days));
    }
    if (m_geo_redundant_backup_isSet) {
        obj.insert(QString("geoRedundantBackup"), ::OpenAPI::toJsonValue(m_geo_redundant_backup));
    }
    if (m_storage_autogrow_isSet) {
        obj.insert(QString("storageAutogrow"), ::OpenAPI::toJsonValue(m_storage_autogrow));
    }
    if (m_storage_mb_isSet) {
        obj.insert(QString("storageMB"), ::OpenAPI::toJsonValue(m_storage_mb));
    }
    return obj;
}

qint32 OAIStorageProfile::getBackupRetentionDays() const {
    return m_backup_retention_days;
}
void OAIStorageProfile::setBackupRetentionDays(const qint32 &backup_retention_days) {
    m_backup_retention_days = backup_retention_days;
    m_backup_retention_days_isSet = true;
}

bool OAIStorageProfile::is_backup_retention_days_Set() const{
    return m_backup_retention_days_isSet;
}

bool OAIStorageProfile::is_backup_retention_days_Valid() const{
    return m_backup_retention_days_isValid;
}

QString OAIStorageProfile::getGeoRedundantBackup() const {
    return m_geo_redundant_backup;
}
void OAIStorageProfile::setGeoRedundantBackup(const QString &geo_redundant_backup) {
    m_geo_redundant_backup = geo_redundant_backup;
    m_geo_redundant_backup_isSet = true;
}

bool OAIStorageProfile::is_geo_redundant_backup_Set() const{
    return m_geo_redundant_backup_isSet;
}

bool OAIStorageProfile::is_geo_redundant_backup_Valid() const{
    return m_geo_redundant_backup_isValid;
}

QString OAIStorageProfile::getStorageAutogrow() const {
    return m_storage_autogrow;
}
void OAIStorageProfile::setStorageAutogrow(const QString &storage_autogrow) {
    m_storage_autogrow = storage_autogrow;
    m_storage_autogrow_isSet = true;
}

bool OAIStorageProfile::is_storage_autogrow_Set() const{
    return m_storage_autogrow_isSet;
}

bool OAIStorageProfile::is_storage_autogrow_Valid() const{
    return m_storage_autogrow_isValid;
}

qint32 OAIStorageProfile::getStorageMb() const {
    return m_storage_mb;
}
void OAIStorageProfile::setStorageMb(const qint32 &storage_mb) {
    m_storage_mb = storage_mb;
    m_storage_mb_isSet = true;
}

bool OAIStorageProfile::is_storage_mb_Set() const{
    return m_storage_mb_isSet;
}

bool OAIStorageProfile::is_storage_mb_Valid() const{
    return m_storage_mb_isValid;
}

bool OAIStorageProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_redundant_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_autogrow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_mb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
