/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigurationProperties::OAIConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigurationProperties::OAIConfigurationProperties() {
    this->initializeModel();
}

OAIConfigurationProperties::~OAIConfigurationProperties() {}

void OAIConfigurationProperties::initializeModel() {

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("allowedValues")]);
    m_allowed_values_isSet = !json[QString("allowedValues")].isNull() && m_allowed_values_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_values_isSet) {
        obj.insert(QString("allowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIConfigurationProperties::getAllowedValues() const {
    return m_allowed_values;
}
void OAIConfigurationProperties::setAllowedValues(const QString &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIConfigurationProperties::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIConfigurationProperties::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

QString OAIConfigurationProperties::getDataType() const {
    return m_data_type;
}
void OAIConfigurationProperties::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIConfigurationProperties::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIConfigurationProperties::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIConfigurationProperties::getDefaultValue() const {
    return m_default_value;
}
void OAIConfigurationProperties::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIConfigurationProperties::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIConfigurationProperties::is_default_value_Valid() const{
    return m_default_value_isValid;
}

QString OAIConfigurationProperties::getDescription() const {
    return m_description;
}
void OAIConfigurationProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConfigurationProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConfigurationProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIConfigurationProperties::getSource() const {
    return m_source;
}
void OAIConfigurationProperties::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIConfigurationProperties::is_source_Set() const{
    return m_source_isSet;
}

bool OAIConfigurationProperties::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIConfigurationProperties::getValue() const {
    return m_value;
}
void OAIConfigurationProperties::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIConfigurationProperties::is_value_Set() const{
    return m_value_isSet;
}

bool OAIConfigurationProperties::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
