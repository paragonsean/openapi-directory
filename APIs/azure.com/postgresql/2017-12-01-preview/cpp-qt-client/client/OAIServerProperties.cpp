/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerProperties::OAIServerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerProperties::OAIServerProperties() {
    this->initializeModel();
}

OAIServerProperties::~OAIServerProperties() {}

void OAIServerProperties::initializeModel() {

    m_administrator_login_isSet = false;
    m_administrator_login_isValid = false;

    m_earliest_restore_date_isSet = false;
    m_earliest_restore_date_isValid = false;

    m_fully_qualified_domain_name_isSet = false;
    m_fully_qualified_domain_name_isValid = false;

    m_master_server_id_isSet = false;
    m_master_server_id_isValid = false;

    m_replica_capacity_isSet = false;
    m_replica_capacity_isValid = false;

    m_replication_role_isSet = false;
    m_replication_role_isValid = false;

    m_ssl_enforcement_isSet = false;
    m_ssl_enforcement_isValid = false;

    m_storage_profile_isSet = false;
    m_storage_profile_isValid = false;

    m_user_visible_state_isSet = false;
    m_user_visible_state_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIServerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerProperties::fromJsonObject(QJsonObject json) {

    m_administrator_login_isValid = ::OpenAPI::fromJsonValue(m_administrator_login, json[QString("administratorLogin")]);
    m_administrator_login_isSet = !json[QString("administratorLogin")].isNull() && m_administrator_login_isValid;

    m_earliest_restore_date_isValid = ::OpenAPI::fromJsonValue(m_earliest_restore_date, json[QString("earliestRestoreDate")]);
    m_earliest_restore_date_isSet = !json[QString("earliestRestoreDate")].isNull() && m_earliest_restore_date_isValid;

    m_fully_qualified_domain_name_isValid = ::OpenAPI::fromJsonValue(m_fully_qualified_domain_name, json[QString("fullyQualifiedDomainName")]);
    m_fully_qualified_domain_name_isSet = !json[QString("fullyQualifiedDomainName")].isNull() && m_fully_qualified_domain_name_isValid;

    m_master_server_id_isValid = ::OpenAPI::fromJsonValue(m_master_server_id, json[QString("masterServerId")]);
    m_master_server_id_isSet = !json[QString("masterServerId")].isNull() && m_master_server_id_isValid;

    m_replica_capacity_isValid = ::OpenAPI::fromJsonValue(m_replica_capacity, json[QString("replicaCapacity")]);
    m_replica_capacity_isSet = !json[QString("replicaCapacity")].isNull() && m_replica_capacity_isValid;

    m_replication_role_isValid = ::OpenAPI::fromJsonValue(m_replication_role, json[QString("replicationRole")]);
    m_replication_role_isSet = !json[QString("replicationRole")].isNull() && m_replication_role_isValid;

    m_ssl_enforcement_isValid = ::OpenAPI::fromJsonValue(m_ssl_enforcement, json[QString("sslEnforcement")]);
    m_ssl_enforcement_isSet = !json[QString("sslEnforcement")].isNull() && m_ssl_enforcement_isValid;

    m_storage_profile_isValid = ::OpenAPI::fromJsonValue(m_storage_profile, json[QString("storageProfile")]);
    m_storage_profile_isSet = !json[QString("storageProfile")].isNull() && m_storage_profile_isValid;

    m_user_visible_state_isValid = ::OpenAPI::fromJsonValue(m_user_visible_state, json[QString("userVisibleState")]);
    m_user_visible_state_isSet = !json[QString("userVisibleState")].isNull() && m_user_visible_state_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIServerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_administrator_login_isSet) {
        obj.insert(QString("administratorLogin"), ::OpenAPI::toJsonValue(m_administrator_login));
    }
    if (m_earliest_restore_date_isSet) {
        obj.insert(QString("earliestRestoreDate"), ::OpenAPI::toJsonValue(m_earliest_restore_date));
    }
    if (m_fully_qualified_domain_name_isSet) {
        obj.insert(QString("fullyQualifiedDomainName"), ::OpenAPI::toJsonValue(m_fully_qualified_domain_name));
    }
    if (m_master_server_id_isSet) {
        obj.insert(QString("masterServerId"), ::OpenAPI::toJsonValue(m_master_server_id));
    }
    if (m_replica_capacity_isSet) {
        obj.insert(QString("replicaCapacity"), ::OpenAPI::toJsonValue(m_replica_capacity));
    }
    if (m_replication_role_isSet) {
        obj.insert(QString("replicationRole"), ::OpenAPI::toJsonValue(m_replication_role));
    }
    if (m_ssl_enforcement.isSet()) {
        obj.insert(QString("sslEnforcement"), ::OpenAPI::toJsonValue(m_ssl_enforcement));
    }
    if (m_storage_profile.isSet()) {
        obj.insert(QString("storageProfile"), ::OpenAPI::toJsonValue(m_storage_profile));
    }
    if (m_user_visible_state_isSet) {
        obj.insert(QString("userVisibleState"), ::OpenAPI::toJsonValue(m_user_visible_state));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIServerProperties::getAdministratorLogin() const {
    return m_administrator_login;
}
void OAIServerProperties::setAdministratorLogin(const QString &administrator_login) {
    m_administrator_login = administrator_login;
    m_administrator_login_isSet = true;
}

bool OAIServerProperties::is_administrator_login_Set() const{
    return m_administrator_login_isSet;
}

bool OAIServerProperties::is_administrator_login_Valid() const{
    return m_administrator_login_isValid;
}

QDateTime OAIServerProperties::getEarliestRestoreDate() const {
    return m_earliest_restore_date;
}
void OAIServerProperties::setEarliestRestoreDate(const QDateTime &earliest_restore_date) {
    m_earliest_restore_date = earliest_restore_date;
    m_earliest_restore_date_isSet = true;
}

bool OAIServerProperties::is_earliest_restore_date_Set() const{
    return m_earliest_restore_date_isSet;
}

bool OAIServerProperties::is_earliest_restore_date_Valid() const{
    return m_earliest_restore_date_isValid;
}

QString OAIServerProperties::getFullyQualifiedDomainName() const {
    return m_fully_qualified_domain_name;
}
void OAIServerProperties::setFullyQualifiedDomainName(const QString &fully_qualified_domain_name) {
    m_fully_qualified_domain_name = fully_qualified_domain_name;
    m_fully_qualified_domain_name_isSet = true;
}

bool OAIServerProperties::is_fully_qualified_domain_name_Set() const{
    return m_fully_qualified_domain_name_isSet;
}

bool OAIServerProperties::is_fully_qualified_domain_name_Valid() const{
    return m_fully_qualified_domain_name_isValid;
}

QString OAIServerProperties::getMasterServerId() const {
    return m_master_server_id;
}
void OAIServerProperties::setMasterServerId(const QString &master_server_id) {
    m_master_server_id = master_server_id;
    m_master_server_id_isSet = true;
}

bool OAIServerProperties::is_master_server_id_Set() const{
    return m_master_server_id_isSet;
}

bool OAIServerProperties::is_master_server_id_Valid() const{
    return m_master_server_id_isValid;
}

qint32 OAIServerProperties::getReplicaCapacity() const {
    return m_replica_capacity;
}
void OAIServerProperties::setReplicaCapacity(const qint32 &replica_capacity) {
    m_replica_capacity = replica_capacity;
    m_replica_capacity_isSet = true;
}

bool OAIServerProperties::is_replica_capacity_Set() const{
    return m_replica_capacity_isSet;
}

bool OAIServerProperties::is_replica_capacity_Valid() const{
    return m_replica_capacity_isValid;
}

QString OAIServerProperties::getReplicationRole() const {
    return m_replication_role;
}
void OAIServerProperties::setReplicationRole(const QString &replication_role) {
    m_replication_role = replication_role;
    m_replication_role_isSet = true;
}

bool OAIServerProperties::is_replication_role_Set() const{
    return m_replication_role_isSet;
}

bool OAIServerProperties::is_replication_role_Valid() const{
    return m_replication_role_isValid;
}

OAISslEnforcement OAIServerProperties::getSslEnforcement() const {
    return m_ssl_enforcement;
}
void OAIServerProperties::setSslEnforcement(const OAISslEnforcement &ssl_enforcement) {
    m_ssl_enforcement = ssl_enforcement;
    m_ssl_enforcement_isSet = true;
}

bool OAIServerProperties::is_ssl_enforcement_Set() const{
    return m_ssl_enforcement_isSet;
}

bool OAIServerProperties::is_ssl_enforcement_Valid() const{
    return m_ssl_enforcement_isValid;
}

OAIStorageProfile OAIServerProperties::getStorageProfile() const {
    return m_storage_profile;
}
void OAIServerProperties::setStorageProfile(const OAIStorageProfile &storage_profile) {
    m_storage_profile = storage_profile;
    m_storage_profile_isSet = true;
}

bool OAIServerProperties::is_storage_profile_Set() const{
    return m_storage_profile_isSet;
}

bool OAIServerProperties::is_storage_profile_Valid() const{
    return m_storage_profile_isValid;
}

QString OAIServerProperties::getUserVisibleState() const {
    return m_user_visible_state;
}
void OAIServerProperties::setUserVisibleState(const QString &user_visible_state) {
    m_user_visible_state = user_visible_state;
    m_user_visible_state_isSet = true;
}

bool OAIServerProperties::is_user_visible_state_Set() const{
    return m_user_visible_state_isSet;
}

bool OAIServerProperties::is_user_visible_state_Valid() const{
    return m_user_visible_state_isValid;
}

OAIServerVersion OAIServerProperties::getVersion() const {
    return m_version;
}
void OAIServerProperties::setVersion(const OAIServerVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIServerProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAIServerProperties::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIServerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrator_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_restore_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_qualified_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_enforcement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_visible_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
