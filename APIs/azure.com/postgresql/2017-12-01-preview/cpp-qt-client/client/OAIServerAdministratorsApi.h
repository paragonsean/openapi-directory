/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerAdministratorsApi_H
#define OAI_OAIServerAdministratorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIServerAdministratorResource.h"
#include "OAIServerAdministratorResourceListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServerAdministratorsApi : public QObject {
    Q_OBJECT

public:
    OAIServerAdministratorsApi(const int timeOut = 0);
    ~OAIServerAdministratorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  properties OAIServerAdministratorResource [required]
    */
    virtual void serverAdministratorsCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const OAIServerAdministratorResource &properties);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    */
    virtual void serverAdministratorsDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    */
    virtual void serverAdministratorsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    */
    virtual void serverAdministratorsListByServer(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serverAdministratorsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void serverAdministratorsDeleteCallback(OAIHttpRequestWorker *worker);
    void serverAdministratorsGetCallback(OAIHttpRequestWorker *worker);
    void serverAdministratorsListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serverAdministratorsCreateOrUpdateSignal(OAIServerAdministratorResource summary);
    void serverAdministratorsDeleteSignal(OAIServerAdministratorResource summary);
    void serverAdministratorsGetSignal(OAIServerAdministratorResource summary);
    void serverAdministratorsListByServerSignal(OAIServerAdministratorResourceListResult summary);


    void serverAdministratorsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServerAdministratorResource summary);
    void serverAdministratorsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIServerAdministratorResource summary);
    void serverAdministratorsGetSignalFull(OAIHttpRequestWorker *worker, OAIServerAdministratorResource summary);
    void serverAdministratorsListByServerSignalFull(OAIHttpRequestWorker *worker, OAIServerAdministratorResourceListResult summary);

    Q_DECL_DEPRECATED_X("Use serverAdministratorsCreateOrUpdateSignalError() instead")
    void serverAdministratorsCreateOrUpdateSignalE(OAIServerAdministratorResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdministratorsCreateOrUpdateSignalError(OAIServerAdministratorResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverAdministratorsDeleteSignalError() instead")
    void serverAdministratorsDeleteSignalE(OAIServerAdministratorResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdministratorsDeleteSignalError(OAIServerAdministratorResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverAdministratorsGetSignalError() instead")
    void serverAdministratorsGetSignalE(OAIServerAdministratorResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdministratorsGetSignalError(OAIServerAdministratorResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverAdministratorsListByServerSignalError() instead")
    void serverAdministratorsListByServerSignalE(OAIServerAdministratorResourceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdministratorsListByServerSignalError(OAIServerAdministratorResourceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serverAdministratorsCreateOrUpdateSignalErrorFull() instead")
    void serverAdministratorsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdministratorsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverAdministratorsDeleteSignalErrorFull() instead")
    void serverAdministratorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdministratorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverAdministratorsGetSignalErrorFull() instead")
    void serverAdministratorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdministratorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverAdministratorsListByServerSignalErrorFull() instead")
    void serverAdministratorsListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverAdministratorsListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
