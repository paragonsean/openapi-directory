/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatabasesApi_H
#define OAI_OAIDatabasesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDatabase.h"
#include "OAIDatabaseListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatabasesApi : public QObject {
    Q_OBJECT

public:
    OAIDatabasesApi(const int timeOut = 0);
    ~OAIDatabasesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  parameters OAIDatabase [required]
    */
    virtual void databasesCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &database_name, const OAIDatabase &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    */
    virtual void databasesDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &database_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    */
    virtual void databasesGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &database_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    */
    virtual void databasesListByServer(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databasesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void databasesDeleteCallback(OAIHttpRequestWorker *worker);
    void databasesGetCallback(OAIHttpRequestWorker *worker);
    void databasesListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void databasesCreateOrUpdateSignal(OAIDatabase summary);
    void databasesDeleteSignal();
    void databasesGetSignal(OAIDatabase summary);
    void databasesListByServerSignal(OAIDatabaseListResult summary);


    void databasesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);
    void databasesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void databasesGetSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);
    void databasesListByServerSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseListResult summary);

    Q_DECL_DEPRECATED_X("Use databasesCreateOrUpdateSignalError() instead")
    void databasesCreateOrUpdateSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesCreateOrUpdateSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesDeleteSignalError() instead")
    void databasesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databasesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesGetSignalError() instead")
    void databasesGetSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesGetSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByServerSignalError() instead")
    void databasesListByServerSignalE(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByServerSignalError(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use databasesCreateOrUpdateSignalErrorFull() instead")
    void databasesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesDeleteSignalErrorFull() instead")
    void databasesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesGetSignalErrorFull() instead")
    void databasesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByServerSignalErrorFull() instead")
    void databasesListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
