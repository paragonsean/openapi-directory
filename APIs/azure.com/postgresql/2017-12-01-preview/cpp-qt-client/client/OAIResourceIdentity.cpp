/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceIdentity::OAIResourceIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceIdentity::OAIResourceIdentity() {
    this->initializeModel();
}

OAIResourceIdentity::~OAIResourceIdentity() {}

void OAIResourceIdentity::initializeModel() {

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIResourceIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceIdentity::fromJsonObject(QJsonObject json) {

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principalId")]);
    m_principal_id_isSet = !json[QString("principalId")].isNull() && m_principal_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIResourceIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_principal_id_isSet) {
        obj.insert(QString("principalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIResourceIdentity::getPrincipalId() const {
    return m_principal_id;
}
void OAIResourceIdentity::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIResourceIdentity::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIResourceIdentity::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QString OAIResourceIdentity::getTenantId() const {
    return m_tenant_id;
}
void OAIResourceIdentity::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIResourceIdentity::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIResourceIdentity::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIResourceIdentity::getType() const {
    return m_type;
}
void OAIResourceIdentity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceIdentity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceIdentity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIResourceIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
