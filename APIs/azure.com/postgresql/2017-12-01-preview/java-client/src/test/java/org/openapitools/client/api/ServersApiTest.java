/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Server;
import org.openapitools.client.model.ServerForCreate;
import org.openapitools.client.model.ServerListResult;
import org.openapitools.client.model.ServerUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServersApi
 */
@Disabled
public class ServersApiTest {

    private final ServersApi api = new ServersApi();

    /**
     * Creates a new server, or will overwrite an existing server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversCreateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        ServerForCreate parameters = null;
        Server response = api.serversCreate(apiVersion, subscriptionId, resourceGroupName, serverName, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        api.serversDelete(apiVersion, subscriptionId, resourceGroupName, serverName);
        // TODO: test validations
    }

    /**
     * Gets information about a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        Server response = api.serversGet(apiVersion, subscriptionId, resourceGroupName, serverName);
        // TODO: test validations
    }

    /**
     * List all the servers in a given subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        ServerListResult response = api.serversList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * List all the servers in a given resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversListByResourceGroupTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        ServerListResult response = api.serversListByResourceGroup(apiVersion, subscriptionId, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Updates an existing server. The request body can contain one to many of the properties present in the normal server definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        ServerUpdateParameters parameters = null;
        Server response = api.serversUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, parameters);
        // TODO: test validations
    }

}
