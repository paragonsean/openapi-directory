/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NameAvailability;
import org.openapitools.client.model.NameAvailabilityRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CheckNameAvailabilityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CheckNameAvailabilityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CheckNameAvailabilityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkNameAvailabilityExecute
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param nameAvailabilityRequest The required parameters for checking if resource name is available. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkNameAvailabilityExecuteCall(String apiVersion, String subscriptionId, NameAvailabilityRequest nameAvailabilityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = nameAvailabilityRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/checkNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkNameAvailabilityExecuteValidateBeforeCall(String apiVersion, String subscriptionId, NameAvailabilityRequest nameAvailabilityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling checkNameAvailabilityExecute(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling checkNameAvailabilityExecute(Async)");
        }

        // verify the required parameter 'nameAvailabilityRequest' is set
        if (nameAvailabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'nameAvailabilityRequest' when calling checkNameAvailabilityExecute(Async)");
        }

        return checkNameAvailabilityExecuteCall(apiVersion, subscriptionId, nameAvailabilityRequest, _callback);

    }

    /**
     * 
     * Check the availability of name for resource
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param nameAvailabilityRequest The required parameters for checking if resource name is available. (required)
     * @return NameAvailability
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public NameAvailability checkNameAvailabilityExecute(String apiVersion, String subscriptionId, NameAvailabilityRequest nameAvailabilityRequest) throws ApiException {
        ApiResponse<NameAvailability> localVarResp = checkNameAvailabilityExecuteWithHttpInfo(apiVersion, subscriptionId, nameAvailabilityRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the availability of name for resource
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param nameAvailabilityRequest The required parameters for checking if resource name is available. (required)
     * @return ApiResponse&lt;NameAvailability&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameAvailability> checkNameAvailabilityExecuteWithHttpInfo(String apiVersion, String subscriptionId, NameAvailabilityRequest nameAvailabilityRequest) throws ApiException {
        okhttp3.Call localVarCall = checkNameAvailabilityExecuteValidateBeforeCall(apiVersion, subscriptionId, nameAvailabilityRequest, null);
        Type localVarReturnType = new TypeToken<NameAvailability>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the availability of name for resource
     * @param apiVersion The API version to use for the request. (required)
     * @param subscriptionId The subscription ID that identifies an Azure subscription. (required)
     * @param nameAvailabilityRequest The required parameters for checking if resource name is available. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkNameAvailabilityExecuteAsync(String apiVersion, String subscriptionId, NameAvailabilityRequest nameAvailabilityRequest, final ApiCallback<NameAvailability> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkNameAvailabilityExecuteValidateBeforeCall(apiVersion, subscriptionId, nameAvailabilityRequest, _callback);
        Type localVarReturnType = new TypeToken<NameAvailability>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
