/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServerVersion;
import org.openapitools.client.model.SslEnforcement;
import org.openapitools.client.model.StorageProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties that can be updated for a server.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:13.575100-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerUpdateParametersProperties {
  public static final String SERIALIZED_NAME_ADMINISTRATOR_LOGIN_PASSWORD = "administratorLoginPassword";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR_LOGIN_PASSWORD)
  private String administratorLoginPassword;

  public static final String SERIALIZED_NAME_REPLICATION_ROLE = "replicationRole";
  @SerializedName(SERIALIZED_NAME_REPLICATION_ROLE)
  private String replicationRole;

  public static final String SERIALIZED_NAME_SSL_ENFORCEMENT = "sslEnforcement";
  @SerializedName(SERIALIZED_NAME_SSL_ENFORCEMENT)
  private SslEnforcement sslEnforcement;

  public static final String SERIALIZED_NAME_STORAGE_PROFILE = "storageProfile";
  @SerializedName(SERIALIZED_NAME_STORAGE_PROFILE)
  private StorageProfile storageProfile;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private ServerVersion version;

  public ServerUpdateParametersProperties() {
  }

  public ServerUpdateParametersProperties administratorLoginPassword(String administratorLoginPassword) {
    this.administratorLoginPassword = administratorLoginPassword;
    return this;
  }

  /**
   * The password of the administrator login.
   * @return administratorLoginPassword
   */
  @javax.annotation.Nullable
  public String getAdministratorLoginPassword() {
    return administratorLoginPassword;
  }

  public void setAdministratorLoginPassword(String administratorLoginPassword) {
    this.administratorLoginPassword = administratorLoginPassword;
  }


  public ServerUpdateParametersProperties replicationRole(String replicationRole) {
    this.replicationRole = replicationRole;
    return this;
  }

  /**
   * The replication role of the server.
   * @return replicationRole
   */
  @javax.annotation.Nullable
  public String getReplicationRole() {
    return replicationRole;
  }

  public void setReplicationRole(String replicationRole) {
    this.replicationRole = replicationRole;
  }


  public ServerUpdateParametersProperties sslEnforcement(SslEnforcement sslEnforcement) {
    this.sslEnforcement = sslEnforcement;
    return this;
  }

  /**
   * Get sslEnforcement
   * @return sslEnforcement
   */
  @javax.annotation.Nullable
  public SslEnforcement getSslEnforcement() {
    return sslEnforcement;
  }

  public void setSslEnforcement(SslEnforcement sslEnforcement) {
    this.sslEnforcement = sslEnforcement;
  }


  public ServerUpdateParametersProperties storageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
    return this;
  }

  /**
   * Get storageProfile
   * @return storageProfile
   */
  @javax.annotation.Nullable
  public StorageProfile getStorageProfile() {
    return storageProfile;
  }

  public void setStorageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
  }


  public ServerUpdateParametersProperties version(ServerVersion version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public ServerVersion getVersion() {
    return version;
  }

  public void setVersion(ServerVersion version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerUpdateParametersProperties serverUpdateParametersProperties = (ServerUpdateParametersProperties) o;
    return Objects.equals(this.administratorLoginPassword, serverUpdateParametersProperties.administratorLoginPassword) &&
        Objects.equals(this.replicationRole, serverUpdateParametersProperties.replicationRole) &&
        Objects.equals(this.sslEnforcement, serverUpdateParametersProperties.sslEnforcement) &&
        Objects.equals(this.storageProfile, serverUpdateParametersProperties.storageProfile) &&
        Objects.equals(this.version, serverUpdateParametersProperties.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(administratorLoginPassword, replicationRole, sslEnforcement, storageProfile, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerUpdateParametersProperties {\n");
    sb.append("    administratorLoginPassword: ").append("*").append("\n");
    sb.append("    replicationRole: ").append(toIndentedString(replicationRole)).append("\n");
    sb.append("    sslEnforcement: ").append(toIndentedString(sslEnforcement)).append("\n");
    sb.append("    storageProfile: ").append(toIndentedString(storageProfile)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("administratorLoginPassword");
    openapiFields.add("replicationRole");
    openapiFields.add("sslEnforcement");
    openapiFields.add("storageProfile");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerUpdateParametersProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerUpdateParametersProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerUpdateParametersProperties is not found in the empty JSON string", ServerUpdateParametersProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerUpdateParametersProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerUpdateParametersProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("administratorLoginPassword") != null && !jsonObj.get("administratorLoginPassword").isJsonNull()) && !jsonObj.get("administratorLoginPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administratorLoginPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administratorLoginPassword").toString()));
      }
      if ((jsonObj.get("replicationRole") != null && !jsonObj.get("replicationRole").isJsonNull()) && !jsonObj.get("replicationRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationRole").toString()));
      }
      // validate the optional field `sslEnforcement`
      if (jsonObj.get("sslEnforcement") != null && !jsonObj.get("sslEnforcement").isJsonNull()) {
        SslEnforcement.validateJsonElement(jsonObj.get("sslEnforcement"));
      }
      // validate the optional field `storageProfile`
      if (jsonObj.get("storageProfile") != null && !jsonObj.get("storageProfile").isJsonNull()) {
        StorageProfile.validateJsonElement(jsonObj.get("storageProfile"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        ServerVersion.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerUpdateParametersProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerUpdateParametersProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerUpdateParametersProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerUpdateParametersProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerUpdateParametersProperties>() {
           @Override
           public void write(JsonWriter out, ServerUpdateParametersProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerUpdateParametersProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerUpdateParametersProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerUpdateParametersProperties
   * @throws IOException if the JSON string is invalid with respect to ServerUpdateParametersProperties
   */
  public static ServerUpdateParametersProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerUpdateParametersProperties.class);
  }

  /**
   * Convert an instance of ServerUpdateParametersProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

