/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of an server Administrator.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:13.575100-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerAdministratorProperties {
  /**
   * The type of administrator.
   */
  @JsonAdapter(AdministratorTypeEnum.Adapter.class)
  public enum AdministratorTypeEnum {
    ACTIVE_DIRECTORY("ActiveDirectory");

    private String value;

    AdministratorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdministratorTypeEnum fromValue(String value) {
      for (AdministratorTypeEnum b : AdministratorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdministratorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdministratorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdministratorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdministratorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdministratorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADMINISTRATOR_TYPE = "administratorType";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR_TYPE)
  private AdministratorTypeEnum administratorType;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private UUID sid;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private UUID tenantId;

  public ServerAdministratorProperties() {
  }

  public ServerAdministratorProperties administratorType(AdministratorTypeEnum administratorType) {
    this.administratorType = administratorType;
    return this;
  }

  /**
   * The type of administrator.
   * @return administratorType
   */
  @javax.annotation.Nonnull
  public AdministratorTypeEnum getAdministratorType() {
    return administratorType;
  }

  public void setAdministratorType(AdministratorTypeEnum administratorType) {
    this.administratorType = administratorType;
  }


  public ServerAdministratorProperties login(String login) {
    this.login = login;
    return this;
  }

  /**
   * The server administrator login value.
   * @return login
   */
  @javax.annotation.Nonnull
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }


  public ServerAdministratorProperties sid(UUID sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The server administrator Sid (Secure ID).
   * @return sid
   */
  @javax.annotation.Nonnull
  public UUID getSid() {
    return sid;
  }

  public void setSid(UUID sid) {
    this.sid = sid;
  }


  public ServerAdministratorProperties tenantId(UUID tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The server Active Directory Administrator tenant id.
   * @return tenantId
   */
  @javax.annotation.Nonnull
  public UUID getTenantId() {
    return tenantId;
  }

  public void setTenantId(UUID tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerAdministratorProperties serverAdministratorProperties = (ServerAdministratorProperties) o;
    return Objects.equals(this.administratorType, serverAdministratorProperties.administratorType) &&
        Objects.equals(this.login, serverAdministratorProperties.login) &&
        Objects.equals(this.sid, serverAdministratorProperties.sid) &&
        Objects.equals(this.tenantId, serverAdministratorProperties.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(administratorType, login, sid, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerAdministratorProperties {\n");
    sb.append("    administratorType: ").append(toIndentedString(administratorType)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("administratorType");
    openapiFields.add("login");
    openapiFields.add("sid");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("administratorType");
    openapiRequiredFields.add("login");
    openapiRequiredFields.add("sid");
    openapiRequiredFields.add("tenantId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerAdministratorProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerAdministratorProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerAdministratorProperties is not found in the empty JSON string", ServerAdministratorProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerAdministratorProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerAdministratorProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServerAdministratorProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("administratorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administratorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administratorType").toString()));
      }
      // validate the required field `administratorType`
      AdministratorTypeEnum.validateJsonElement(jsonObj.get("administratorType"));
      if (!jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if (!jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if (!jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerAdministratorProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerAdministratorProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerAdministratorProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerAdministratorProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerAdministratorProperties>() {
           @Override
           public void write(JsonWriter out, ServerAdministratorProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerAdministratorProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerAdministratorProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerAdministratorProperties
   * @throws IOException if the JSON string is invalid with respect to ServerAdministratorProperties
   */
  public static ServerAdministratorProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerAdministratorProperties.class);
  }

  /**
   * Convert an instance of ServerAdministratorProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

