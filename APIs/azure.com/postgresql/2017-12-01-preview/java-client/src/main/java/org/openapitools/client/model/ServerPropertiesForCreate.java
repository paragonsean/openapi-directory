/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServerVersion;
import org.openapitools.client.model.SslEnforcement;
import org.openapitools.client.model.StorageProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties used to create a new server.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:13.575100-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerPropertiesForCreate {
  /**
   * The mode to create a new server.
   */
  @JsonAdapter(CreateModeEnum.Adapter.class)
  public enum CreateModeEnum {
    DEFAULT("Default"),
    
    POINT_IN_TIME_RESTORE("PointInTimeRestore"),
    
    GEO_RESTORE("GeoRestore"),
    
    REPLICA("Replica");

    private String value;

    CreateModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreateModeEnum fromValue(String value) {
      for (CreateModeEnum b : CreateModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreateModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreateModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreateModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreateModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreateModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATE_MODE = "createMode";
  @SerializedName(SERIALIZED_NAME_CREATE_MODE)
  protected CreateModeEnum createMode;

  public static final String SERIALIZED_NAME_SSL_ENFORCEMENT = "sslEnforcement";
  @SerializedName(SERIALIZED_NAME_SSL_ENFORCEMENT)
  private SslEnforcement sslEnforcement;

  public static final String SERIALIZED_NAME_STORAGE_PROFILE = "storageProfile";
  @SerializedName(SERIALIZED_NAME_STORAGE_PROFILE)
  private StorageProfile storageProfile;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private ServerVersion version;

  public ServerPropertiesForCreate() {
  }

  public ServerPropertiesForCreate createMode(CreateModeEnum createMode) {
    this.createMode = createMode;
    return this;
  }

  /**
   * The mode to create a new server.
   * @return createMode
   */
  @javax.annotation.Nonnull
  public CreateModeEnum getCreateMode() {
    return createMode;
  }

  public void setCreateMode(CreateModeEnum createMode) {
    this.createMode = createMode;
  }


  public ServerPropertiesForCreate sslEnforcement(SslEnforcement sslEnforcement) {
    this.sslEnforcement = sslEnforcement;
    return this;
  }

  /**
   * Get sslEnforcement
   * @return sslEnforcement
   */
  @javax.annotation.Nullable
  public SslEnforcement getSslEnforcement() {
    return sslEnforcement;
  }

  public void setSslEnforcement(SslEnforcement sslEnforcement) {
    this.sslEnforcement = sslEnforcement;
  }


  public ServerPropertiesForCreate storageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
    return this;
  }

  /**
   * Get storageProfile
   * @return storageProfile
   */
  @javax.annotation.Nullable
  public StorageProfile getStorageProfile() {
    return storageProfile;
  }

  public void setStorageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
  }


  public ServerPropertiesForCreate version(ServerVersion version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public ServerVersion getVersion() {
    return version;
  }

  public void setVersion(ServerVersion version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerPropertiesForCreate serverPropertiesForCreate = (ServerPropertiesForCreate) o;
    return Objects.equals(this.createMode, serverPropertiesForCreate.createMode) &&
        Objects.equals(this.sslEnforcement, serverPropertiesForCreate.sslEnforcement) &&
        Objects.equals(this.storageProfile, serverPropertiesForCreate.storageProfile) &&
        Objects.equals(this.version, serverPropertiesForCreate.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createMode, sslEnforcement, storageProfile, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerPropertiesForCreate {\n");
    sb.append("    createMode: ").append(toIndentedString(createMode)).append("\n");
    sb.append("    sslEnforcement: ").append(toIndentedString(sslEnforcement)).append("\n");
    sb.append("    storageProfile: ").append(toIndentedString(storageProfile)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createMode");
    openapiFields.add("sslEnforcement");
    openapiFields.add("storageProfile");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerPropertiesForCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerPropertiesForCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerPropertiesForCreate is not found in the empty JSON string", ServerPropertiesForCreate.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("createMode").getAsString();
      switch (discriminatorValue) {
        case "ServerPropertiesForDefaultCreate":
          ServerPropertiesForDefaultCreate.validateJsonElement(jsonElement);
          break;
        case "ServerPropertiesForGeoRestore":
          ServerPropertiesForGeoRestore.validateJsonElement(jsonElement);
          break;
        case "ServerPropertiesForReplica":
          ServerPropertiesForReplica.validateJsonElement(jsonElement);
          break;
        case "ServerPropertiesForRestore":
          ServerPropertiesForRestore.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `createMode` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of ServerPropertiesForCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerPropertiesForCreate
   * @throws IOException if the JSON string is invalid with respect to ServerPropertiesForCreate
   */
  public static ServerPropertiesForCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerPropertiesForCreate.class);
  }

  /**
   * Convert an instance of ServerPropertiesForCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

