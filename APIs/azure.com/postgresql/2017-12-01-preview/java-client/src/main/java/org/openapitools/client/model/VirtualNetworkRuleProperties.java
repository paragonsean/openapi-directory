/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a virtual network rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:13.575100-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualNetworkRuleProperties {
  public static final String SERIALIZED_NAME_IGNORE_MISSING_VNET_SERVICE_ENDPOINT = "ignoreMissingVnetServiceEndpoint";
  @SerializedName(SERIALIZED_NAME_IGNORE_MISSING_VNET_SERVICE_ENDPOINT)
  private Boolean ignoreMissingVnetServiceEndpoint;

  /**
   * Virtual Network Rule State
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    INITIALIZING("Initializing"),
    
    IN_PROGRESS("InProgress"),
    
    READY("Ready"),
    
    DELETING("Deleting"),
    
    UNKNOWN("Unknown");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_SUBNET_ID = "virtualNetworkSubnetId";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_SUBNET_ID)
  private String virtualNetworkSubnetId;

  public VirtualNetworkRuleProperties() {
  }

  public VirtualNetworkRuleProperties(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public VirtualNetworkRuleProperties ignoreMissingVnetServiceEndpoint(Boolean ignoreMissingVnetServiceEndpoint) {
    this.ignoreMissingVnetServiceEndpoint = ignoreMissingVnetServiceEndpoint;
    return this;
  }

  /**
   * Create firewall rule before the virtual network has vnet service endpoint enabled.
   * @return ignoreMissingVnetServiceEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreMissingVnetServiceEndpoint() {
    return ignoreMissingVnetServiceEndpoint;
  }

  public void setIgnoreMissingVnetServiceEndpoint(Boolean ignoreMissingVnetServiceEndpoint) {
    this.ignoreMissingVnetServiceEndpoint = ignoreMissingVnetServiceEndpoint;
  }


  /**
   * Virtual Network Rule State
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public VirtualNetworkRuleProperties virtualNetworkSubnetId(String virtualNetworkSubnetId) {
    this.virtualNetworkSubnetId = virtualNetworkSubnetId;
    return this;
  }

  /**
   * The ARM resource id of the virtual network subnet.
   * @return virtualNetworkSubnetId
   */
  @javax.annotation.Nonnull
  public String getVirtualNetworkSubnetId() {
    return virtualNetworkSubnetId;
  }

  public void setVirtualNetworkSubnetId(String virtualNetworkSubnetId) {
    this.virtualNetworkSubnetId = virtualNetworkSubnetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNetworkRuleProperties virtualNetworkRuleProperties = (VirtualNetworkRuleProperties) o;
    return Objects.equals(this.ignoreMissingVnetServiceEndpoint, virtualNetworkRuleProperties.ignoreMissingVnetServiceEndpoint) &&
        Objects.equals(this.state, virtualNetworkRuleProperties.state) &&
        Objects.equals(this.virtualNetworkSubnetId, virtualNetworkRuleProperties.virtualNetworkSubnetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignoreMissingVnetServiceEndpoint, state, virtualNetworkSubnetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNetworkRuleProperties {\n");
    sb.append("    ignoreMissingVnetServiceEndpoint: ").append(toIndentedString(ignoreMissingVnetServiceEndpoint)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    virtualNetworkSubnetId: ").append(toIndentedString(virtualNetworkSubnetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ignoreMissingVnetServiceEndpoint");
    openapiFields.add("state");
    openapiFields.add("virtualNetworkSubnetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("virtualNetworkSubnetId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualNetworkRuleProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualNetworkRuleProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNetworkRuleProperties is not found in the empty JSON string", VirtualNetworkRuleProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualNetworkRuleProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualNetworkRuleProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualNetworkRuleProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (!jsonObj.get("virtualNetworkSubnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkSubnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualNetworkSubnetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNetworkRuleProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNetworkRuleProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNetworkRuleProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNetworkRuleProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNetworkRuleProperties>() {
           @Override
           public void write(JsonWriter out, VirtualNetworkRuleProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNetworkRuleProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualNetworkRuleProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualNetworkRuleProperties
   * @throws IOException if the JSON string is invalid with respect to VirtualNetworkRuleProperties
   */
  public static VirtualNetworkRuleProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNetworkRuleProperties.class);
  }

  /**
   * Convert an instance of VirtualNetworkRuleProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

