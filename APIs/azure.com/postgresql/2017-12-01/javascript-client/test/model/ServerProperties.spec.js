/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PostgreSqlManagementClient);
  }
}(this, function(expect, PostgreSqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PostgreSqlManagementClient.ServerProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServerProperties', function() {
    it('should create an instance of ServerProperties', function() {
      // uncomment below and update the code to test ServerProperties
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be.a(PostgreSqlManagementClient.ServerProperties);
    });

    it('should have the property administratorLogin (base name: "administratorLogin")', function() {
      // uncomment below and update the code to test the property administratorLogin
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be();
    });

    it('should have the property earliestRestoreDate (base name: "earliestRestoreDate")', function() {
      // uncomment below and update the code to test the property earliestRestoreDate
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be();
    });

    it('should have the property fullyQualifiedDomainName (base name: "fullyQualifiedDomainName")', function() {
      // uncomment below and update the code to test the property fullyQualifiedDomainName
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be();
    });

    it('should have the property masterServerId (base name: "masterServerId")', function() {
      // uncomment below and update the code to test the property masterServerId
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be();
    });

    it('should have the property replicaCapacity (base name: "replicaCapacity")', function() {
      // uncomment below and update the code to test the property replicaCapacity
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be();
    });

    it('should have the property replicationRole (base name: "replicationRole")', function() {
      // uncomment below and update the code to test the property replicationRole
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be();
    });

    it('should have the property sslEnforcement (base name: "sslEnforcement")', function() {
      // uncomment below and update the code to test the property sslEnforcement
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be();
    });

    it('should have the property storageProfile (base name: "storageProfile")', function() {
      // uncomment below and update the code to test the property storageProfile
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be();
    });

    it('should have the property userVisibleState (base name: "userVisibleState")', function() {
      // uncomment below and update the code to test the property userVisibleState
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new PostgreSqlManagementClient.ServerProperties();
      //expect(instance).to.be();
    });

  });

}));
