/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PostgreSqlManagementClient);
  }
}(this, function(expect, PostgreSqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PerformanceTierServiceLevelObjectives', function() {
    it('should create an instance of PerformanceTierServiceLevelObjectives', function() {
      // uncomment below and update the code to test PerformanceTierServiceLevelObjectives
      //var instance = new PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives();
      //expect(instance).to.be.a(PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives);
    });

    it('should have the property edition (base name: "edition")', function() {
      // uncomment below and update the code to test the property edition
      //var instance = new PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives();
      //expect(instance).to.be();
    });

    it('should have the property hardwareGeneration (base name: "hardwareGeneration")', function() {
      // uncomment below and update the code to test the property hardwareGeneration
      //var instance = new PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives();
      //expect(instance).to.be();
    });

    it('should have the property maxBackupRetentionDays (base name: "maxBackupRetentionDays")', function() {
      // uncomment below and update the code to test the property maxBackupRetentionDays
      //var instance = new PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives();
      //expect(instance).to.be();
    });

    it('should have the property maxStorageMB (base name: "maxStorageMB")', function() {
      // uncomment below and update the code to test the property maxStorageMB
      //var instance = new PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives();
      //expect(instance).to.be();
    });

    it('should have the property minBackupRetentionDays (base name: "minBackupRetentionDays")', function() {
      // uncomment below and update the code to test the property minBackupRetentionDays
      //var instance = new PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives();
      //expect(instance).to.be();
    });

    it('should have the property minStorageMB (base name: "minStorageMB")', function() {
      // uncomment below and update the code to test the property minStorageMB
      //var instance = new PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives();
      //expect(instance).to.be();
    });

    it('should have the property vCore (base name: "vCore")', function() {
      // uncomment below and update the code to test the property vCore
      //var instance = new PostgreSqlManagementClient.PerformanceTierServiceLevelObjectives();
      //expect(instance).to.be();
    });

  });

}));
