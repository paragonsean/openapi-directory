/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServerPropertiesForCreate;
import org.openapitools.client.model.ServerVersion;
import org.openapitools.client.model.SslEnforcement;
import org.openapitools.client.model.StorageProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties used to create a new server by restoring to a different region from a geo replicated backup.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:15.083106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerPropertiesForGeoRestore extends ServerPropertiesForCreate {
  public static final String SERIALIZED_NAME_SOURCE_SERVER_ID = "sourceServerId";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVER_ID)
  private String sourceServerId;

  public ServerPropertiesForGeoRestore() {
    this.createMode = this.getClass().getSimpleName();
  }

  public ServerPropertiesForGeoRestore sourceServerId(String sourceServerId) {
    this.sourceServerId = sourceServerId;
    return this;
  }

  /**
   * The source server id to restore from.
   * @return sourceServerId
   */
  @javax.annotation.Nonnull
  public String getSourceServerId() {
    return sourceServerId;
  }

  public void setSourceServerId(String sourceServerId) {
    this.sourceServerId = sourceServerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerPropertiesForGeoRestore serverPropertiesForGeoRestore = (ServerPropertiesForGeoRestore) o;
    return Objects.equals(this.sourceServerId, serverPropertiesForGeoRestore.sourceServerId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceServerId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerPropertiesForGeoRestore {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    sourceServerId: ").append(toIndentedString(sourceServerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createMode");
    openapiFields.add("sslEnforcement");
    openapiFields.add("storageProfile");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceServerId");
    openapiRequiredFields.add("createMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerPropertiesForGeoRestore
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerPropertiesForGeoRestore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerPropertiesForGeoRestore is not found in the empty JSON string", ServerPropertiesForGeoRestore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerPropertiesForGeoRestore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerPropertiesForGeoRestore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServerPropertiesForGeoRestore.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerPropertiesForGeoRestore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerPropertiesForGeoRestore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerPropertiesForGeoRestore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerPropertiesForGeoRestore.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerPropertiesForGeoRestore>() {
           @Override
           public void write(JsonWriter out, ServerPropertiesForGeoRestore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerPropertiesForGeoRestore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerPropertiesForGeoRestore given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerPropertiesForGeoRestore
   * @throws IOException if the JSON string is invalid with respect to ServerPropertiesForGeoRestore
   */
  public static ServerPropertiesForGeoRestore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerPropertiesForGeoRestore.class);
  }

  /**
   * Convert an instance of ServerPropertiesForGeoRestore to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

