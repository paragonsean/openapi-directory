/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Storage Profile properties of a server
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:15.083106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageProfile {
  public static final String SERIALIZED_NAME_BACKUP_RETENTION_DAYS = "backupRetentionDays";
  @SerializedName(SERIALIZED_NAME_BACKUP_RETENTION_DAYS)
  private Integer backupRetentionDays;

  /**
   * Enable Geo-redundant or not for server backup.
   */
  @JsonAdapter(GeoRedundantBackupEnum.Adapter.class)
  public enum GeoRedundantBackupEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    GeoRedundantBackupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GeoRedundantBackupEnum fromValue(String value) {
      for (GeoRedundantBackupEnum b : GeoRedundantBackupEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GeoRedundantBackupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GeoRedundantBackupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GeoRedundantBackupEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GeoRedundantBackupEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GeoRedundantBackupEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GEO_REDUNDANT_BACKUP = "geoRedundantBackup";
  @SerializedName(SERIALIZED_NAME_GEO_REDUNDANT_BACKUP)
  private GeoRedundantBackupEnum geoRedundantBackup;

  /**
   * Enable Storage Auto Grow.
   */
  @JsonAdapter(StorageAutogrowEnum.Adapter.class)
  public enum StorageAutogrowEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    StorageAutogrowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageAutogrowEnum fromValue(String value) {
      for (StorageAutogrowEnum b : StorageAutogrowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageAutogrowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageAutogrowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageAutogrowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageAutogrowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageAutogrowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_AUTOGROW = "storageAutogrow";
  @SerializedName(SERIALIZED_NAME_STORAGE_AUTOGROW)
  private StorageAutogrowEnum storageAutogrow;

  public static final String SERIALIZED_NAME_STORAGE_M_B = "storageMB";
  @SerializedName(SERIALIZED_NAME_STORAGE_M_B)
  private Integer storageMB;

  public StorageProfile() {
  }

  public StorageProfile backupRetentionDays(Integer backupRetentionDays) {
    this.backupRetentionDays = backupRetentionDays;
    return this;
  }

  /**
   * Backup retention days for the server.
   * @return backupRetentionDays
   */
  @javax.annotation.Nullable
  public Integer getBackupRetentionDays() {
    return backupRetentionDays;
  }

  public void setBackupRetentionDays(Integer backupRetentionDays) {
    this.backupRetentionDays = backupRetentionDays;
  }


  public StorageProfile geoRedundantBackup(GeoRedundantBackupEnum geoRedundantBackup) {
    this.geoRedundantBackup = geoRedundantBackup;
    return this;
  }

  /**
   * Enable Geo-redundant or not for server backup.
   * @return geoRedundantBackup
   */
  @javax.annotation.Nullable
  public GeoRedundantBackupEnum getGeoRedundantBackup() {
    return geoRedundantBackup;
  }

  public void setGeoRedundantBackup(GeoRedundantBackupEnum geoRedundantBackup) {
    this.geoRedundantBackup = geoRedundantBackup;
  }


  public StorageProfile storageAutogrow(StorageAutogrowEnum storageAutogrow) {
    this.storageAutogrow = storageAutogrow;
    return this;
  }

  /**
   * Enable Storage Auto Grow.
   * @return storageAutogrow
   */
  @javax.annotation.Nullable
  public StorageAutogrowEnum getStorageAutogrow() {
    return storageAutogrow;
  }

  public void setStorageAutogrow(StorageAutogrowEnum storageAutogrow) {
    this.storageAutogrow = storageAutogrow;
  }


  public StorageProfile storageMB(Integer storageMB) {
    this.storageMB = storageMB;
    return this;
  }

  /**
   * Max storage allowed for a server.
   * @return storageMB
   */
  @javax.annotation.Nullable
  public Integer getStorageMB() {
    return storageMB;
  }

  public void setStorageMB(Integer storageMB) {
    this.storageMB = storageMB;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageProfile storageProfile = (StorageProfile) o;
    return Objects.equals(this.backupRetentionDays, storageProfile.backupRetentionDays) &&
        Objects.equals(this.geoRedundantBackup, storageProfile.geoRedundantBackup) &&
        Objects.equals(this.storageAutogrow, storageProfile.storageAutogrow) &&
        Objects.equals(this.storageMB, storageProfile.storageMB);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupRetentionDays, geoRedundantBackup, storageAutogrow, storageMB);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageProfile {\n");
    sb.append("    backupRetentionDays: ").append(toIndentedString(backupRetentionDays)).append("\n");
    sb.append("    geoRedundantBackup: ").append(toIndentedString(geoRedundantBackup)).append("\n");
    sb.append("    storageAutogrow: ").append(toIndentedString(storageAutogrow)).append("\n");
    sb.append("    storageMB: ").append(toIndentedString(storageMB)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupRetentionDays");
    openapiFields.add("geoRedundantBackup");
    openapiFields.add("storageAutogrow");
    openapiFields.add("storageMB");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageProfile is not found in the empty JSON string", StorageProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("geoRedundantBackup") != null && !jsonObj.get("geoRedundantBackup").isJsonNull()) && !jsonObj.get("geoRedundantBackup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoRedundantBackup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geoRedundantBackup").toString()));
      }
      // validate the optional field `geoRedundantBackup`
      if (jsonObj.get("geoRedundantBackup") != null && !jsonObj.get("geoRedundantBackup").isJsonNull()) {
        GeoRedundantBackupEnum.validateJsonElement(jsonObj.get("geoRedundantBackup"));
      }
      if ((jsonObj.get("storageAutogrow") != null && !jsonObj.get("storageAutogrow").isJsonNull()) && !jsonObj.get("storageAutogrow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAutogrow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAutogrow").toString()));
      }
      // validate the optional field `storageAutogrow`
      if (jsonObj.get("storageAutogrow") != null && !jsonObj.get("storageAutogrow").isJsonNull()) {
        StorageAutogrowEnum.validateJsonElement(jsonObj.get("storageAutogrow"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageProfile>() {
           @Override
           public void write(JsonWriter out, StorageProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageProfile
   * @throws IOException if the JSON string is invalid with respect to StorageProfile
   */
  public static StorageProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageProfile.class);
  }

  /**
   * Convert an instance of StorageProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

