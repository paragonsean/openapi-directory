/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ServerVersion;
import org.openapitools.client.model.SslEnforcement;
import org.openapitools.client.model.StorageProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a server.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:15.083106-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerProperties {
  public static final String SERIALIZED_NAME_ADMINISTRATOR_LOGIN = "administratorLogin";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATOR_LOGIN)
  private String administratorLogin;

  public static final String SERIALIZED_NAME_EARLIEST_RESTORE_DATE = "earliestRestoreDate";
  @SerializedName(SERIALIZED_NAME_EARLIEST_RESTORE_DATE)
  private OffsetDateTime earliestRestoreDate;

  public static final String SERIALIZED_NAME_FULLY_QUALIFIED_DOMAIN_NAME = "fullyQualifiedDomainName";
  @SerializedName(SERIALIZED_NAME_FULLY_QUALIFIED_DOMAIN_NAME)
  private String fullyQualifiedDomainName;

  public static final String SERIALIZED_NAME_MASTER_SERVER_ID = "masterServerId";
  @SerializedName(SERIALIZED_NAME_MASTER_SERVER_ID)
  private String masterServerId;

  public static final String SERIALIZED_NAME_REPLICA_CAPACITY = "replicaCapacity";
  @SerializedName(SERIALIZED_NAME_REPLICA_CAPACITY)
  private Integer replicaCapacity;

  public static final String SERIALIZED_NAME_REPLICATION_ROLE = "replicationRole";
  @SerializedName(SERIALIZED_NAME_REPLICATION_ROLE)
  private String replicationRole;

  public static final String SERIALIZED_NAME_SSL_ENFORCEMENT = "sslEnforcement";
  @SerializedName(SERIALIZED_NAME_SSL_ENFORCEMENT)
  private SslEnforcement sslEnforcement;

  public static final String SERIALIZED_NAME_STORAGE_PROFILE = "storageProfile";
  @SerializedName(SERIALIZED_NAME_STORAGE_PROFILE)
  private StorageProfile storageProfile;

  /**
   * A state of a server that is visible to user.
   */
  @JsonAdapter(UserVisibleStateEnum.Adapter.class)
  public enum UserVisibleStateEnum {
    READY("Ready"),
    
    DROPPING("Dropping"),
    
    DISABLED("Disabled");

    private String value;

    UserVisibleStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserVisibleStateEnum fromValue(String value) {
      for (UserVisibleStateEnum b : UserVisibleStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserVisibleStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserVisibleStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserVisibleStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserVisibleStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserVisibleStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_VISIBLE_STATE = "userVisibleState";
  @SerializedName(SERIALIZED_NAME_USER_VISIBLE_STATE)
  private UserVisibleStateEnum userVisibleState;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private ServerVersion version;

  public ServerProperties() {
  }

  public ServerProperties administratorLogin(String administratorLogin) {
    this.administratorLogin = administratorLogin;
    return this;
  }

  /**
   * The administrator&#39;s login name of a server. Can only be specified when the server is being created (and is required for creation).
   * @return administratorLogin
   */
  @javax.annotation.Nullable
  public String getAdministratorLogin() {
    return administratorLogin;
  }

  public void setAdministratorLogin(String administratorLogin) {
    this.administratorLogin = administratorLogin;
  }


  public ServerProperties earliestRestoreDate(OffsetDateTime earliestRestoreDate) {
    this.earliestRestoreDate = earliestRestoreDate;
    return this;
  }

  /**
   * Earliest restore point creation time (ISO8601 format)
   * @return earliestRestoreDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEarliestRestoreDate() {
    return earliestRestoreDate;
  }

  public void setEarliestRestoreDate(OffsetDateTime earliestRestoreDate) {
    this.earliestRestoreDate = earliestRestoreDate;
  }


  public ServerProperties fullyQualifiedDomainName(String fullyQualifiedDomainName) {
    this.fullyQualifiedDomainName = fullyQualifiedDomainName;
    return this;
  }

  /**
   * The fully qualified domain name of a server.
   * @return fullyQualifiedDomainName
   */
  @javax.annotation.Nullable
  public String getFullyQualifiedDomainName() {
    return fullyQualifiedDomainName;
  }

  public void setFullyQualifiedDomainName(String fullyQualifiedDomainName) {
    this.fullyQualifiedDomainName = fullyQualifiedDomainName;
  }


  public ServerProperties masterServerId(String masterServerId) {
    this.masterServerId = masterServerId;
    return this;
  }

  /**
   * The master server id of a replica server.
   * @return masterServerId
   */
  @javax.annotation.Nullable
  public String getMasterServerId() {
    return masterServerId;
  }

  public void setMasterServerId(String masterServerId) {
    this.masterServerId = masterServerId;
  }


  public ServerProperties replicaCapacity(Integer replicaCapacity) {
    this.replicaCapacity = replicaCapacity;
    return this;
  }

  /**
   * The maximum number of replicas that a master server can have.
   * minimum: 0
   * @return replicaCapacity
   */
  @javax.annotation.Nullable
  public Integer getReplicaCapacity() {
    return replicaCapacity;
  }

  public void setReplicaCapacity(Integer replicaCapacity) {
    this.replicaCapacity = replicaCapacity;
  }


  public ServerProperties replicationRole(String replicationRole) {
    this.replicationRole = replicationRole;
    return this;
  }

  /**
   * The replication role of the server.
   * @return replicationRole
   */
  @javax.annotation.Nullable
  public String getReplicationRole() {
    return replicationRole;
  }

  public void setReplicationRole(String replicationRole) {
    this.replicationRole = replicationRole;
  }


  public ServerProperties sslEnforcement(SslEnforcement sslEnforcement) {
    this.sslEnforcement = sslEnforcement;
    return this;
  }

  /**
   * Get sslEnforcement
   * @return sslEnforcement
   */
  @javax.annotation.Nullable
  public SslEnforcement getSslEnforcement() {
    return sslEnforcement;
  }

  public void setSslEnforcement(SslEnforcement sslEnforcement) {
    this.sslEnforcement = sslEnforcement;
  }


  public ServerProperties storageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
    return this;
  }

  /**
   * Get storageProfile
   * @return storageProfile
   */
  @javax.annotation.Nullable
  public StorageProfile getStorageProfile() {
    return storageProfile;
  }

  public void setStorageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
  }


  public ServerProperties userVisibleState(UserVisibleStateEnum userVisibleState) {
    this.userVisibleState = userVisibleState;
    return this;
  }

  /**
   * A state of a server that is visible to user.
   * @return userVisibleState
   */
  @javax.annotation.Nullable
  public UserVisibleStateEnum getUserVisibleState() {
    return userVisibleState;
  }

  public void setUserVisibleState(UserVisibleStateEnum userVisibleState) {
    this.userVisibleState = userVisibleState;
  }


  public ServerProperties version(ServerVersion version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public ServerVersion getVersion() {
    return version;
  }

  public void setVersion(ServerVersion version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerProperties serverProperties = (ServerProperties) o;
    return Objects.equals(this.administratorLogin, serverProperties.administratorLogin) &&
        Objects.equals(this.earliestRestoreDate, serverProperties.earliestRestoreDate) &&
        Objects.equals(this.fullyQualifiedDomainName, serverProperties.fullyQualifiedDomainName) &&
        Objects.equals(this.masterServerId, serverProperties.masterServerId) &&
        Objects.equals(this.replicaCapacity, serverProperties.replicaCapacity) &&
        Objects.equals(this.replicationRole, serverProperties.replicationRole) &&
        Objects.equals(this.sslEnforcement, serverProperties.sslEnforcement) &&
        Objects.equals(this.storageProfile, serverProperties.storageProfile) &&
        Objects.equals(this.userVisibleState, serverProperties.userVisibleState) &&
        Objects.equals(this.version, serverProperties.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(administratorLogin, earliestRestoreDate, fullyQualifiedDomainName, masterServerId, replicaCapacity, replicationRole, sslEnforcement, storageProfile, userVisibleState, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerProperties {\n");
    sb.append("    administratorLogin: ").append(toIndentedString(administratorLogin)).append("\n");
    sb.append("    earliestRestoreDate: ").append(toIndentedString(earliestRestoreDate)).append("\n");
    sb.append("    fullyQualifiedDomainName: ").append(toIndentedString(fullyQualifiedDomainName)).append("\n");
    sb.append("    masterServerId: ").append(toIndentedString(masterServerId)).append("\n");
    sb.append("    replicaCapacity: ").append(toIndentedString(replicaCapacity)).append("\n");
    sb.append("    replicationRole: ").append(toIndentedString(replicationRole)).append("\n");
    sb.append("    sslEnforcement: ").append(toIndentedString(sslEnforcement)).append("\n");
    sb.append("    storageProfile: ").append(toIndentedString(storageProfile)).append("\n");
    sb.append("    userVisibleState: ").append(toIndentedString(userVisibleState)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("administratorLogin");
    openapiFields.add("earliestRestoreDate");
    openapiFields.add("fullyQualifiedDomainName");
    openapiFields.add("masterServerId");
    openapiFields.add("replicaCapacity");
    openapiFields.add("replicationRole");
    openapiFields.add("sslEnforcement");
    openapiFields.add("storageProfile");
    openapiFields.add("userVisibleState");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerProperties is not found in the empty JSON string", ServerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("administratorLogin") != null && !jsonObj.get("administratorLogin").isJsonNull()) && !jsonObj.get("administratorLogin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administratorLogin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administratorLogin").toString()));
      }
      if ((jsonObj.get("fullyQualifiedDomainName") != null && !jsonObj.get("fullyQualifiedDomainName").isJsonNull()) && !jsonObj.get("fullyQualifiedDomainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullyQualifiedDomainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullyQualifiedDomainName").toString()));
      }
      if ((jsonObj.get("masterServerId") != null && !jsonObj.get("masterServerId").isJsonNull()) && !jsonObj.get("masterServerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masterServerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masterServerId").toString()));
      }
      if ((jsonObj.get("replicationRole") != null && !jsonObj.get("replicationRole").isJsonNull()) && !jsonObj.get("replicationRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationRole").toString()));
      }
      // validate the optional field `sslEnforcement`
      if (jsonObj.get("sslEnforcement") != null && !jsonObj.get("sslEnforcement").isJsonNull()) {
        SslEnforcement.validateJsonElement(jsonObj.get("sslEnforcement"));
      }
      // validate the optional field `storageProfile`
      if (jsonObj.get("storageProfile") != null && !jsonObj.get("storageProfile").isJsonNull()) {
        StorageProfile.validateJsonElement(jsonObj.get("storageProfile"));
      }
      if ((jsonObj.get("userVisibleState") != null && !jsonObj.get("userVisibleState").isJsonNull()) && !jsonObj.get("userVisibleState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userVisibleState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userVisibleState").toString()));
      }
      // validate the optional field `userVisibleState`
      if (jsonObj.get("userVisibleState") != null && !jsonObj.get("userVisibleState").isJsonNull()) {
        UserVisibleStateEnum.validateJsonElement(jsonObj.get("userVisibleState"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        ServerVersion.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerProperties>() {
           @Override
           public void write(JsonWriter out, ServerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerProperties
   * @throws IOException if the JSON string is invalid with respect to ServerProperties
   */
  public static ServerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerProperties.class);
  }

  /**
   * Convert an instance of ServerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

