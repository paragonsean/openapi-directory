/*
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Database;
import org.openapitools.client.model.DatabaseListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatabasesApi
 */
@Disabled
public class DatabasesApiTest {

    private final DatabasesApi api = new DatabasesApi();

    /**
     * Creates a new database or updates an existing database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesCreateOrUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        Database parameters = null;
        Database response = api.databasesCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        api.databasesDelete(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName);
        // TODO: test validations
    }

    /**
     * Gets information about a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        Database response = api.databasesGet(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName);
        // TODO: test validations
    }

    /**
     * List all the databases in a given server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesListByServerTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        DatabaseListResult response = api.databasesListByServer(apiVersion, subscriptionId, resourceGroupName, serverName);
        // TODO: test validations
    }

}
