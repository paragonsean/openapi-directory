/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerPropertiesForCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerPropertiesForCreate::OAIServerPropertiesForCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerPropertiesForCreate::OAIServerPropertiesForCreate() {
    this->initializeModel();
}

OAIServerPropertiesForCreate::~OAIServerPropertiesForCreate() {}

void OAIServerPropertiesForCreate::initializeModel() {

    m_create_mode_isSet = false;
    m_create_mode_isValid = false;

    m_ssl_enforcement_isSet = false;
    m_ssl_enforcement_isValid = false;

    m_storage_profile_isSet = false;
    m_storage_profile_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIServerPropertiesForCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerPropertiesForCreate::fromJsonObject(QJsonObject json) {

    m_create_mode_isValid = ::OpenAPI::fromJsonValue(m_create_mode, json[QString("createMode")]);
    m_create_mode_isSet = !json[QString("createMode")].isNull() && m_create_mode_isValid;

    m_ssl_enforcement_isValid = ::OpenAPI::fromJsonValue(m_ssl_enforcement, json[QString("sslEnforcement")]);
    m_ssl_enforcement_isSet = !json[QString("sslEnforcement")].isNull() && m_ssl_enforcement_isValid;

    m_storage_profile_isValid = ::OpenAPI::fromJsonValue(m_storage_profile, json[QString("storageProfile")]);
    m_storage_profile_isSet = !json[QString("storageProfile")].isNull() && m_storage_profile_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIServerPropertiesForCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerPropertiesForCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_create_mode_isSet) {
        obj.insert(QString("createMode"), ::OpenAPI::toJsonValue(m_create_mode));
    }
    if (m_ssl_enforcement.isSet()) {
        obj.insert(QString("sslEnforcement"), ::OpenAPI::toJsonValue(m_ssl_enforcement));
    }
    if (m_storage_profile.isSet()) {
        obj.insert(QString("storageProfile"), ::OpenAPI::toJsonValue(m_storage_profile));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIServerPropertiesForCreate::getCreateMode() const {
    return m_create_mode;
}
void OAIServerPropertiesForCreate::setCreateMode(const QString &create_mode) {
    m_create_mode = create_mode;
    m_create_mode_isSet = true;
}

bool OAIServerPropertiesForCreate::is_create_mode_Set() const{
    return m_create_mode_isSet;
}

bool OAIServerPropertiesForCreate::is_create_mode_Valid() const{
    return m_create_mode_isValid;
}

OAISslEnforcement OAIServerPropertiesForCreate::getSslEnforcement() const {
    return m_ssl_enforcement;
}
void OAIServerPropertiesForCreate::setSslEnforcement(const OAISslEnforcement &ssl_enforcement) {
    m_ssl_enforcement = ssl_enforcement;
    m_ssl_enforcement_isSet = true;
}

bool OAIServerPropertiesForCreate::is_ssl_enforcement_Set() const{
    return m_ssl_enforcement_isSet;
}

bool OAIServerPropertiesForCreate::is_ssl_enforcement_Valid() const{
    return m_ssl_enforcement_isValid;
}

OAIStorageProfile OAIServerPropertiesForCreate::getStorageProfile() const {
    return m_storage_profile;
}
void OAIServerPropertiesForCreate::setStorageProfile(const OAIStorageProfile &storage_profile) {
    m_storage_profile = storage_profile;
    m_storage_profile_isSet = true;
}

bool OAIServerPropertiesForCreate::is_storage_profile_Set() const{
    return m_storage_profile_isSet;
}

bool OAIServerPropertiesForCreate::is_storage_profile_Valid() const{
    return m_storage_profile_isValid;
}

OAIServerVersion OAIServerPropertiesForCreate::getVersion() const {
    return m_version;
}
void OAIServerPropertiesForCreate::setVersion(const OAIServerVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIServerPropertiesForCreate::is_version_Set() const{
    return m_version_isSet;
}

bool OAIServerPropertiesForCreate::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIServerPropertiesForCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_enforcement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerPropertiesForCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_create_mode_isValid && true;
}

} // namespace OpenAPI
