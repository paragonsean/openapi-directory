/**
 * PostgreSQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure PostgreSQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2017-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseProperties::OAIDatabaseProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseProperties::OAIDatabaseProperties() {
    this->initializeModel();
}

OAIDatabaseProperties::~OAIDatabaseProperties() {}

void OAIDatabaseProperties::initializeModel() {

    m_charset_isSet = false;
    m_charset_isValid = false;

    m_collation_isSet = false;
    m_collation_isValid = false;
}

void OAIDatabaseProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseProperties::fromJsonObject(QJsonObject json) {

    m_charset_isValid = ::OpenAPI::fromJsonValue(m_charset, json[QString("charset")]);
    m_charset_isSet = !json[QString("charset")].isNull() && m_charset_isValid;

    m_collation_isValid = ::OpenAPI::fromJsonValue(m_collation, json[QString("collation")]);
    m_collation_isSet = !json[QString("collation")].isNull() && m_collation_isValid;
}

QString OAIDatabaseProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_charset_isSet) {
        obj.insert(QString("charset"), ::OpenAPI::toJsonValue(m_charset));
    }
    if (m_collation_isSet) {
        obj.insert(QString("collation"), ::OpenAPI::toJsonValue(m_collation));
    }
    return obj;
}

QString OAIDatabaseProperties::getCharset() const {
    return m_charset;
}
void OAIDatabaseProperties::setCharset(const QString &charset) {
    m_charset = charset;
    m_charset_isSet = true;
}

bool OAIDatabaseProperties::is_charset_Set() const{
    return m_charset_isSet;
}

bool OAIDatabaseProperties::is_charset_Valid() const{
    return m_charset_isValid;
}

QString OAIDatabaseProperties::getCollation() const {
    return m_collation;
}
void OAIDatabaseProperties::setCollation(const QString &collation) {
    m_collation = collation;
    m_collation_isSet = true;
}

bool OAIDatabaseProperties::is_collation_Set() const{
    return m_collation_isSet;
}

bool OAIDatabaseProperties::is_collation_Valid() const{
    return m_collation_isValid;
}

bool OAIDatabaseProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
