# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_version import ServerVersion
from openapi_server.models.ssl_enforcement import SslEnforcement
from openapi_server.models.storage_profile import StorageProfile
from openapi_server import util


class ServerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrator_login: str=None, earliest_restore_date: datetime=None, fully_qualified_domain_name: str=None, master_server_id: str=None, replica_capacity: int=None, replication_role: str=None, ssl_enforcement: SslEnforcement=None, storage_profile: StorageProfile=None, user_visible_state: str=None, version: ServerVersion=None):
        """ServerProperties - a model defined in OpenAPI

        :param administrator_login: The administrator_login of this ServerProperties.
        :param earliest_restore_date: The earliest_restore_date of this ServerProperties.
        :param fully_qualified_domain_name: The fully_qualified_domain_name of this ServerProperties.
        :param master_server_id: The master_server_id of this ServerProperties.
        :param replica_capacity: The replica_capacity of this ServerProperties.
        :param replication_role: The replication_role of this ServerProperties.
        :param ssl_enforcement: The ssl_enforcement of this ServerProperties.
        :param storage_profile: The storage_profile of this ServerProperties.
        :param user_visible_state: The user_visible_state of this ServerProperties.
        :param version: The version of this ServerProperties.
        """
        self.openapi_types = {
            'administrator_login': str,
            'earliest_restore_date': datetime,
            'fully_qualified_domain_name': str,
            'master_server_id': str,
            'replica_capacity': int,
            'replication_role': str,
            'ssl_enforcement': SslEnforcement,
            'storage_profile': StorageProfile,
            'user_visible_state': str,
            'version': ServerVersion
        }

        self.attribute_map = {
            'administrator_login': 'administratorLogin',
            'earliest_restore_date': 'earliestRestoreDate',
            'fully_qualified_domain_name': 'fullyQualifiedDomainName',
            'master_server_id': 'masterServerId',
            'replica_capacity': 'replicaCapacity',
            'replication_role': 'replicationRole',
            'ssl_enforcement': 'sslEnforcement',
            'storage_profile': 'storageProfile',
            'user_visible_state': 'userVisibleState',
            'version': 'version'
        }

        self._administrator_login = administrator_login
        self._earliest_restore_date = earliest_restore_date
        self._fully_qualified_domain_name = fully_qualified_domain_name
        self._master_server_id = master_server_id
        self._replica_capacity = replica_capacity
        self._replication_role = replication_role
        self._ssl_enforcement = ssl_enforcement
        self._storage_profile = storage_profile
        self._user_visible_state = user_visible_state
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerProperties of this ServerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrator_login(self):
        """Gets the administrator_login of this ServerProperties.

        The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).

        :return: The administrator_login of this ServerProperties.
        :rtype: str
        """
        return self._administrator_login

    @administrator_login.setter
    def administrator_login(self, administrator_login):
        """Sets the administrator_login of this ServerProperties.

        The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation).

        :param administrator_login: The administrator_login of this ServerProperties.
        :type administrator_login: str
        """

        self._administrator_login = administrator_login

    @property
    def earliest_restore_date(self):
        """Gets the earliest_restore_date of this ServerProperties.

        Earliest restore point creation time (ISO8601 format)

        :return: The earliest_restore_date of this ServerProperties.
        :rtype: datetime
        """
        return self._earliest_restore_date

    @earliest_restore_date.setter
    def earliest_restore_date(self, earliest_restore_date):
        """Sets the earliest_restore_date of this ServerProperties.

        Earliest restore point creation time (ISO8601 format)

        :param earliest_restore_date: The earliest_restore_date of this ServerProperties.
        :type earliest_restore_date: datetime
        """

        self._earliest_restore_date = earliest_restore_date

    @property
    def fully_qualified_domain_name(self):
        """Gets the fully_qualified_domain_name of this ServerProperties.

        The fully qualified domain name of a server.

        :return: The fully_qualified_domain_name of this ServerProperties.
        :rtype: str
        """
        return self._fully_qualified_domain_name

    @fully_qualified_domain_name.setter
    def fully_qualified_domain_name(self, fully_qualified_domain_name):
        """Sets the fully_qualified_domain_name of this ServerProperties.

        The fully qualified domain name of a server.

        :param fully_qualified_domain_name: The fully_qualified_domain_name of this ServerProperties.
        :type fully_qualified_domain_name: str
        """

        self._fully_qualified_domain_name = fully_qualified_domain_name

    @property
    def master_server_id(self):
        """Gets the master_server_id of this ServerProperties.

        The master server id of a replica server.

        :return: The master_server_id of this ServerProperties.
        :rtype: str
        """
        return self._master_server_id

    @master_server_id.setter
    def master_server_id(self, master_server_id):
        """Sets the master_server_id of this ServerProperties.

        The master server id of a replica server.

        :param master_server_id: The master_server_id of this ServerProperties.
        :type master_server_id: str
        """

        self._master_server_id = master_server_id

    @property
    def replica_capacity(self):
        """Gets the replica_capacity of this ServerProperties.

        The maximum number of replicas that a master server can have.

        :return: The replica_capacity of this ServerProperties.
        :rtype: int
        """
        return self._replica_capacity

    @replica_capacity.setter
    def replica_capacity(self, replica_capacity):
        """Sets the replica_capacity of this ServerProperties.

        The maximum number of replicas that a master server can have.

        :param replica_capacity: The replica_capacity of this ServerProperties.
        :type replica_capacity: int
        """
        if replica_capacity is not None and replica_capacity < 0:
            raise ValueError("Invalid value for `replica_capacity`, must be a value greater than or equal to `0`")

        self._replica_capacity = replica_capacity

    @property
    def replication_role(self):
        """Gets the replication_role of this ServerProperties.

        The replication role of the server.

        :return: The replication_role of this ServerProperties.
        :rtype: str
        """
        return self._replication_role

    @replication_role.setter
    def replication_role(self, replication_role):
        """Sets the replication_role of this ServerProperties.

        The replication role of the server.

        :param replication_role: The replication_role of this ServerProperties.
        :type replication_role: str
        """

        self._replication_role = replication_role

    @property
    def ssl_enforcement(self):
        """Gets the ssl_enforcement of this ServerProperties.


        :return: The ssl_enforcement of this ServerProperties.
        :rtype: SslEnforcement
        """
        return self._ssl_enforcement

    @ssl_enforcement.setter
    def ssl_enforcement(self, ssl_enforcement):
        """Sets the ssl_enforcement of this ServerProperties.


        :param ssl_enforcement: The ssl_enforcement of this ServerProperties.
        :type ssl_enforcement: SslEnforcement
        """

        self._ssl_enforcement = ssl_enforcement

    @property
    def storage_profile(self):
        """Gets the storage_profile of this ServerProperties.


        :return: The storage_profile of this ServerProperties.
        :rtype: StorageProfile
        """
        return self._storage_profile

    @storage_profile.setter
    def storage_profile(self, storage_profile):
        """Sets the storage_profile of this ServerProperties.


        :param storage_profile: The storage_profile of this ServerProperties.
        :type storage_profile: StorageProfile
        """

        self._storage_profile = storage_profile

    @property
    def user_visible_state(self):
        """Gets the user_visible_state of this ServerProperties.

        A state of a server that is visible to user.

        :return: The user_visible_state of this ServerProperties.
        :rtype: str
        """
        return self._user_visible_state

    @user_visible_state.setter
    def user_visible_state(self, user_visible_state):
        """Sets the user_visible_state of this ServerProperties.

        A state of a server that is visible to user.

        :param user_visible_state: The user_visible_state of this ServerProperties.
        :type user_visible_state: str
        """
        allowed_values = ["Ready", "Dropping", "Disabled"]  # noqa: E501
        if user_visible_state not in allowed_values:
            raise ValueError(
                "Invalid value for `user_visible_state` ({0}), must be one of {1}"
                .format(user_visible_state, allowed_values)
            )

        self._user_visible_state = user_visible_state

    @property
    def version(self):
        """Gets the version of this ServerProperties.


        :return: The version of this ServerProperties.
        :rtype: ServerVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServerProperties.


        :param version: The version of this ServerProperties.
        :type version: ServerVersion
        """

        self._version = version
