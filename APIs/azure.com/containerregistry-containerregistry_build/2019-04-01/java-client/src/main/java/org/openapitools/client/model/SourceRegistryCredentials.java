/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the credential parameters for accessing the source registry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:02.709621-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceRegistryCredentials {
  /**
   * The authentication mode which determines the source registry login scope. The credentials for the source registry  will be generated using the given scope. These credentials will be used to login to  the source registry during the run.
   */
  @JsonAdapter(LoginModeEnum.Adapter.class)
  public enum LoginModeEnum {
    NONE("None"),
    
    DEFAULT("Default");

    private String value;

    LoginModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoginModeEnum fromValue(String value) {
      for (LoginModeEnum b : LoginModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoginModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoginModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoginModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoginModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoginModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOGIN_MODE = "loginMode";
  @SerializedName(SERIALIZED_NAME_LOGIN_MODE)
  private LoginModeEnum loginMode;

  public SourceRegistryCredentials() {
  }

  public SourceRegistryCredentials loginMode(LoginModeEnum loginMode) {
    this.loginMode = loginMode;
    return this;
  }

  /**
   * The authentication mode which determines the source registry login scope. The credentials for the source registry  will be generated using the given scope. These credentials will be used to login to  the source registry during the run.
   * @return loginMode
   */
  @javax.annotation.Nullable
  public LoginModeEnum getLoginMode() {
    return loginMode;
  }

  public void setLoginMode(LoginModeEnum loginMode) {
    this.loginMode = loginMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceRegistryCredentials sourceRegistryCredentials = (SourceRegistryCredentials) o;
    return Objects.equals(this.loginMode, sourceRegistryCredentials.loginMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loginMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceRegistryCredentials {\n");
    sb.append("    loginMode: ").append(toIndentedString(loginMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loginMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceRegistryCredentials
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceRegistryCredentials.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceRegistryCredentials is not found in the empty JSON string", SourceRegistryCredentials.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceRegistryCredentials.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceRegistryCredentials` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("loginMode") != null && !jsonObj.get("loginMode").isJsonNull()) && !jsonObj.get("loginMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginMode").toString()));
      }
      // validate the optional field `loginMode`
      if (jsonObj.get("loginMode") != null && !jsonObj.get("loginMode").isJsonNull()) {
        LoginModeEnum.validateJsonElement(jsonObj.get("loginMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceRegistryCredentials.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceRegistryCredentials' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceRegistryCredentials> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceRegistryCredentials.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceRegistryCredentials>() {
           @Override
           public void write(JsonWriter out, SourceRegistryCredentials value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceRegistryCredentials read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceRegistryCredentials given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceRegistryCredentials
   * @throws IOException if the JSON string is invalid with respect to SourceRegistryCredentials
   */
  public static SourceRegistryCredentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceRegistryCredentials.class);
  }

  /**
   * Convert an instance of SourceRegistryCredentials to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

