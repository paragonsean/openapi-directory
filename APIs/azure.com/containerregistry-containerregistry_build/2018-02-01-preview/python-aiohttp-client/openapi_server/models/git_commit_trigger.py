# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GitCommitTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch_name: str=None, commit_id: str=None, id: str=None, provider_type: str=None, repository_url: str=None):
        """GitCommitTrigger - a model defined in OpenAPI

        :param branch_name: The branch_name of this GitCommitTrigger.
        :param commit_id: The commit_id of this GitCommitTrigger.
        :param id: The id of this GitCommitTrigger.
        :param provider_type: The provider_type of this GitCommitTrigger.
        :param repository_url: The repository_url of this GitCommitTrigger.
        """
        self.openapi_types = {
            'branch_name': str,
            'commit_id': str,
            'id': str,
            'provider_type': str,
            'repository_url': str
        }

        self.attribute_map = {
            'branch_name': 'branchName',
            'commit_id': 'commitId',
            'id': 'id',
            'provider_type': 'providerType',
            'repository_url': 'repositoryUrl'
        }

        self._branch_name = branch_name
        self._commit_id = commit_id
        self._id = id
        self._provider_type = provider_type
        self._repository_url = repository_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitCommitTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GitCommitTrigger of this GitCommitTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch_name(self):
        """Gets the branch_name of this GitCommitTrigger.

        The branch name in the repository.

        :return: The branch_name of this GitCommitTrigger.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this GitCommitTrigger.

        The branch name in the repository.

        :param branch_name: The branch_name of this GitCommitTrigger.
        :type branch_name: str
        """

        self._branch_name = branch_name

    @property
    def commit_id(self):
        """Gets the commit_id of this GitCommitTrigger.

        The unique ID that identifies a commit.

        :return: The commit_id of this GitCommitTrigger.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this GitCommitTrigger.

        The unique ID that identifies a commit.

        :param commit_id: The commit_id of this GitCommitTrigger.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def id(self):
        """Gets the id of this GitCommitTrigger.

        The unique ID of the trigger.

        :return: The id of this GitCommitTrigger.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GitCommitTrigger.

        The unique ID of the trigger.

        :param id: The id of this GitCommitTrigger.
        :type id: str
        """

        self._id = id

    @property
    def provider_type(self):
        """Gets the provider_type of this GitCommitTrigger.

        The source control provider type.

        :return: The provider_type of this GitCommitTrigger.
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this GitCommitTrigger.

        The source control provider type.

        :param provider_type: The provider_type of this GitCommitTrigger.
        :type provider_type: str
        """

        self._provider_type = provider_type

    @property
    def repository_url(self):
        """Gets the repository_url of this GitCommitTrigger.

        The repository URL.

        :return: The repository_url of this GitCommitTrigger.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this GitCommitTrigger.

        The repository URL.

        :param repository_url: The repository_url of this GitCommitTrigger.
        :type repository_url: str
        """

        self._repository_url = repository_url
