# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_control_auth_info import SourceControlAuthInfo
from openapi_server import util


class SourceRepositoryProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_commit_trigger_enabled: bool=False, repository_url: str=None, source_control_auth_properties: SourceControlAuthInfo=None, source_control_type: str=None):
        """SourceRepositoryProperties - a model defined in OpenAPI

        :param is_commit_trigger_enabled: The is_commit_trigger_enabled of this SourceRepositoryProperties.
        :param repository_url: The repository_url of this SourceRepositoryProperties.
        :param source_control_auth_properties: The source_control_auth_properties of this SourceRepositoryProperties.
        :param source_control_type: The source_control_type of this SourceRepositoryProperties.
        """
        self.openapi_types = {
            'is_commit_trigger_enabled': bool,
            'repository_url': str,
            'source_control_auth_properties': SourceControlAuthInfo,
            'source_control_type': str
        }

        self.attribute_map = {
            'is_commit_trigger_enabled': 'isCommitTriggerEnabled',
            'repository_url': 'repositoryUrl',
            'source_control_auth_properties': 'sourceControlAuthProperties',
            'source_control_type': 'sourceControlType'
        }

        self._is_commit_trigger_enabled = is_commit_trigger_enabled
        self._repository_url = repository_url
        self._source_control_auth_properties = source_control_auth_properties
        self._source_control_type = source_control_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceRepositoryProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceRepositoryProperties of this SourceRepositoryProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_commit_trigger_enabled(self):
        """Gets the is_commit_trigger_enabled of this SourceRepositoryProperties.

        The value of this property indicates whether the source control commit trigger is enabled or not.

        :return: The is_commit_trigger_enabled of this SourceRepositoryProperties.
        :rtype: bool
        """
        return self._is_commit_trigger_enabled

    @is_commit_trigger_enabled.setter
    def is_commit_trigger_enabled(self, is_commit_trigger_enabled):
        """Sets the is_commit_trigger_enabled of this SourceRepositoryProperties.

        The value of this property indicates whether the source control commit trigger is enabled or not.

        :param is_commit_trigger_enabled: The is_commit_trigger_enabled of this SourceRepositoryProperties.
        :type is_commit_trigger_enabled: bool
        """

        self._is_commit_trigger_enabled = is_commit_trigger_enabled

    @property
    def repository_url(self):
        """Gets the repository_url of this SourceRepositoryProperties.

        The full URL to the source code repository

        :return: The repository_url of this SourceRepositoryProperties.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this SourceRepositoryProperties.

        The full URL to the source code repository

        :param repository_url: The repository_url of this SourceRepositoryProperties.
        :type repository_url: str
        """
        if repository_url is None:
            raise ValueError("Invalid value for `repository_url`, must not be `None`")

        self._repository_url = repository_url

    @property
    def source_control_auth_properties(self):
        """Gets the source_control_auth_properties of this SourceRepositoryProperties.


        :return: The source_control_auth_properties of this SourceRepositoryProperties.
        :rtype: SourceControlAuthInfo
        """
        return self._source_control_auth_properties

    @source_control_auth_properties.setter
    def source_control_auth_properties(self, source_control_auth_properties):
        """Sets the source_control_auth_properties of this SourceRepositoryProperties.


        :param source_control_auth_properties: The source_control_auth_properties of this SourceRepositoryProperties.
        :type source_control_auth_properties: SourceControlAuthInfo
        """

        self._source_control_auth_properties = source_control_auth_properties

    @property
    def source_control_type(self):
        """Gets the source_control_type of this SourceRepositoryProperties.

        The type of source control service.

        :return: The source_control_type of this SourceRepositoryProperties.
        :rtype: str
        """
        return self._source_control_type

    @source_control_type.setter
    def source_control_type(self, source_control_type):
        """Sets the source_control_type of this SourceRepositoryProperties.

        The type of source control service.

        :param source_control_type: The source_control_type of this SourceRepositoryProperties.
        :type source_control_type: str
        """
        allowed_values = ["Github", "VisualStudioTeamService"]  # noqa: E501
        if source_control_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_control_type` ({0}), must be one of {1}"
                .format(source_control_type, allowed_values)
            )

        self._source_control_type = source_control_type
