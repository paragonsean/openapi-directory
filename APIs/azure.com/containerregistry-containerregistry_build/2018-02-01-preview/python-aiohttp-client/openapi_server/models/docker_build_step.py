# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_image_dependency import BaseImageDependency
from openapi_server.models.build_argument import BuildArgument
from openapi_server.models.build_step_properties import BuildStepProperties
from openapi_server import util


class DockerBuildStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_image_dependencies: List[BaseImageDependency]=None, base_image_trigger: str=None, branch: str=None, build_arguments: List[BuildArgument]=None, context_path: str=None, docker_file_path: str=None, image_names: List[str]=None, is_push_enabled: bool=True, no_cache: bool=False, provisioning_state: str=None, type: str=None):
        """DockerBuildStep - a model defined in OpenAPI

        :param base_image_dependencies: The base_image_dependencies of this DockerBuildStep.
        :param base_image_trigger: The base_image_trigger of this DockerBuildStep.
        :param branch: The branch of this DockerBuildStep.
        :param build_arguments: The build_arguments of this DockerBuildStep.
        :param context_path: The context_path of this DockerBuildStep.
        :param docker_file_path: The docker_file_path of this DockerBuildStep.
        :param image_names: The image_names of this DockerBuildStep.
        :param is_push_enabled: The is_push_enabled of this DockerBuildStep.
        :param no_cache: The no_cache of this DockerBuildStep.
        :param provisioning_state: The provisioning_state of this DockerBuildStep.
        :param type: The type of this DockerBuildStep.
        """
        self.openapi_types = {
            'base_image_dependencies': List[BaseImageDependency],
            'base_image_trigger': str,
            'branch': str,
            'build_arguments': List[BuildArgument],
            'context_path': str,
            'docker_file_path': str,
            'image_names': List[str],
            'is_push_enabled': bool,
            'no_cache': bool,
            'provisioning_state': str,
            'type': str
        }

        self.attribute_map = {
            'base_image_dependencies': 'baseImageDependencies',
            'base_image_trigger': 'baseImageTrigger',
            'branch': 'branch',
            'build_arguments': 'buildArguments',
            'context_path': 'contextPath',
            'docker_file_path': 'dockerFilePath',
            'image_names': 'imageNames',
            'is_push_enabled': 'isPushEnabled',
            'no_cache': 'noCache',
            'provisioning_state': 'provisioningState',
            'type': 'type'
        }

        self._base_image_dependencies = base_image_dependencies
        self._base_image_trigger = base_image_trigger
        self._branch = branch
        self._build_arguments = build_arguments
        self._context_path = context_path
        self._docker_file_path = docker_file_path
        self._image_names = image_names
        self._is_push_enabled = is_push_enabled
        self._no_cache = no_cache
        self._provisioning_state = provisioning_state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DockerBuildStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DockerBuildStep of this DockerBuildStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_image_dependencies(self):
        """Gets the base_image_dependencies of this DockerBuildStep.

        List of base image dependencies for a step.

        :return: The base_image_dependencies of this DockerBuildStep.
        :rtype: List[BaseImageDependency]
        """
        return self._base_image_dependencies

    @base_image_dependencies.setter
    def base_image_dependencies(self, base_image_dependencies):
        """Sets the base_image_dependencies of this DockerBuildStep.

        List of base image dependencies for a step.

        :param base_image_dependencies: The base_image_dependencies of this DockerBuildStep.
        :type base_image_dependencies: List[BaseImageDependency]
        """

        self._base_image_dependencies = base_image_dependencies

    @property
    def base_image_trigger(self):
        """Gets the base_image_trigger of this DockerBuildStep.

        The type of the auto trigger for base image dependency updates.

        :return: The base_image_trigger of this DockerBuildStep.
        :rtype: str
        """
        return self._base_image_trigger

    @base_image_trigger.setter
    def base_image_trigger(self, base_image_trigger):
        """Sets the base_image_trigger of this DockerBuildStep.

        The type of the auto trigger for base image dependency updates.

        :param base_image_trigger: The base_image_trigger of this DockerBuildStep.
        :type base_image_trigger: str
        """
        allowed_values = ["All", "Runtime", "None"]  # noqa: E501
        if base_image_trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `base_image_trigger` ({0}), must be one of {1}"
                .format(base_image_trigger, allowed_values)
            )

        self._base_image_trigger = base_image_trigger

    @property
    def branch(self):
        """Gets the branch of this DockerBuildStep.

        The repository branch name.

        :return: The branch of this DockerBuildStep.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this DockerBuildStep.

        The repository branch name.

        :param branch: The branch of this DockerBuildStep.
        :type branch: str
        """

        self._branch = branch

    @property
    def build_arguments(self):
        """Gets the build_arguments of this DockerBuildStep.

        The custom arguments for building this build step.

        :return: The build_arguments of this DockerBuildStep.
        :rtype: List[BuildArgument]
        """
        return self._build_arguments

    @build_arguments.setter
    def build_arguments(self, build_arguments):
        """Sets the build_arguments of this DockerBuildStep.

        The custom arguments for building this build step.

        :param build_arguments: The build_arguments of this DockerBuildStep.
        :type build_arguments: List[BuildArgument]
        """

        self._build_arguments = build_arguments

    @property
    def context_path(self):
        """Gets the context_path of this DockerBuildStep.

        The relative context path for a docker build in the source.

        :return: The context_path of this DockerBuildStep.
        :rtype: str
        """
        return self._context_path

    @context_path.setter
    def context_path(self, context_path):
        """Sets the context_path of this DockerBuildStep.

        The relative context path for a docker build in the source.

        :param context_path: The context_path of this DockerBuildStep.
        :type context_path: str
        """

        self._context_path = context_path

    @property
    def docker_file_path(self):
        """Gets the docker_file_path of this DockerBuildStep.

        The Docker file path relative to the source control root.

        :return: The docker_file_path of this DockerBuildStep.
        :rtype: str
        """
        return self._docker_file_path

    @docker_file_path.setter
    def docker_file_path(self, docker_file_path):
        """Sets the docker_file_path of this DockerBuildStep.

        The Docker file path relative to the source control root.

        :param docker_file_path: The docker_file_path of this DockerBuildStep.
        :type docker_file_path: str
        """

        self._docker_file_path = docker_file_path

    @property
    def image_names(self):
        """Gets the image_names of this DockerBuildStep.

        The fully qualified image names including the repository and tag.

        :return: The image_names of this DockerBuildStep.
        :rtype: List[str]
        """
        return self._image_names

    @image_names.setter
    def image_names(self, image_names):
        """Sets the image_names of this DockerBuildStep.

        The fully qualified image names including the repository and tag.

        :param image_names: The image_names of this DockerBuildStep.
        :type image_names: List[str]
        """

        self._image_names = image_names

    @property
    def is_push_enabled(self):
        """Gets the is_push_enabled of this DockerBuildStep.

        The value of this property indicates whether the image built should be pushed to the registry or not.

        :return: The is_push_enabled of this DockerBuildStep.
        :rtype: bool
        """
        return self._is_push_enabled

    @is_push_enabled.setter
    def is_push_enabled(self, is_push_enabled):
        """Sets the is_push_enabled of this DockerBuildStep.

        The value of this property indicates whether the image built should be pushed to the registry or not.

        :param is_push_enabled: The is_push_enabled of this DockerBuildStep.
        :type is_push_enabled: bool
        """

        self._is_push_enabled = is_push_enabled

    @property
    def no_cache(self):
        """Gets the no_cache of this DockerBuildStep.

        The value of this property indicates whether the image cache is enabled or not.

        :return: The no_cache of this DockerBuildStep.
        :rtype: bool
        """
        return self._no_cache

    @no_cache.setter
    def no_cache(self, no_cache):
        """Sets the no_cache of this DockerBuildStep.

        The value of this property indicates whether the image cache is enabled or not.

        :param no_cache: The no_cache of this DockerBuildStep.
        :type no_cache: bool
        """

        self._no_cache = no_cache

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DockerBuildStep.

        The provisioning state of the build step.

        :return: The provisioning_state of this DockerBuildStep.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DockerBuildStep.

        The provisioning state of the build step.

        :param provisioning_state: The provisioning_state of this DockerBuildStep.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def type(self):
        """Gets the type of this DockerBuildStep.

        The type of the step.

        :return: The type of this DockerBuildStep.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DockerBuildStep.

        The type of the step.

        :param type: The type of this DockerBuildStep.
        :type type: str
        """
        allowed_values = ["Docker"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
