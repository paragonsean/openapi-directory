# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlatformProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu: int=None, os_type: str=None):
        """PlatformProperties - a model defined in OpenAPI

        :param cpu: The cpu of this PlatformProperties.
        :param os_type: The os_type of this PlatformProperties.
        """
        self.openapi_types = {
            'cpu': int,
            'os_type': str
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'os_type': 'osType'
        }

        self._cpu = cpu
        self._os_type = os_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlatformProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlatformProperties of this PlatformProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self):
        """Gets the cpu of this PlatformProperties.

        The CPU configuration in terms of number of cores required for the build.

        :return: The cpu of this PlatformProperties.
        :rtype: int
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this PlatformProperties.

        The CPU configuration in terms of number of cores required for the build.

        :param cpu: The cpu of this PlatformProperties.
        :type cpu: int
        """

        self._cpu = cpu

    @property
    def os_type(self):
        """Gets the os_type of this PlatformProperties.

        The operating system type required for the build.

        :return: The os_type of this PlatformProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this PlatformProperties.

        The operating system type required for the build.

        :param os_type: The os_type of this PlatformProperties.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type
