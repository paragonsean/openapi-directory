# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.git_commit_trigger import GitCommitTrigger
from openapi_server.models.image_descriptor import ImageDescriptor
from openapi_server.models.image_update_trigger import ImageUpdateTrigger
from openapi_server.models.platform_properties import PlatformProperties
from openapi_server import util


class BuildProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_id: str=None, build_task: str=None, build_type: str=None, create_time: datetime=None, finish_time: datetime=None, git_commit_trigger: GitCommitTrigger=None, image_update_trigger: ImageUpdateTrigger=None, is_archive_enabled: bool=False, last_updated_time: datetime=None, output_images: List[ImageDescriptor]=None, platform: PlatformProperties=None, provisioning_state: str=None, start_time: datetime=None, status: str=None):
        """BuildProperties - a model defined in OpenAPI

        :param build_id: The build_id of this BuildProperties.
        :param build_task: The build_task of this BuildProperties.
        :param build_type: The build_type of this BuildProperties.
        :param create_time: The create_time of this BuildProperties.
        :param finish_time: The finish_time of this BuildProperties.
        :param git_commit_trigger: The git_commit_trigger of this BuildProperties.
        :param image_update_trigger: The image_update_trigger of this BuildProperties.
        :param is_archive_enabled: The is_archive_enabled of this BuildProperties.
        :param last_updated_time: The last_updated_time of this BuildProperties.
        :param output_images: The output_images of this BuildProperties.
        :param platform: The platform of this BuildProperties.
        :param provisioning_state: The provisioning_state of this BuildProperties.
        :param start_time: The start_time of this BuildProperties.
        :param status: The status of this BuildProperties.
        """
        self.openapi_types = {
            'build_id': str,
            'build_task': str,
            'build_type': str,
            'create_time': datetime,
            'finish_time': datetime,
            'git_commit_trigger': GitCommitTrigger,
            'image_update_trigger': ImageUpdateTrigger,
            'is_archive_enabled': bool,
            'last_updated_time': datetime,
            'output_images': List[ImageDescriptor],
            'platform': PlatformProperties,
            'provisioning_state': str,
            'start_time': datetime,
            'status': str
        }

        self.attribute_map = {
            'build_id': 'buildId',
            'build_task': 'buildTask',
            'build_type': 'buildType',
            'create_time': 'createTime',
            'finish_time': 'finishTime',
            'git_commit_trigger': 'gitCommitTrigger',
            'image_update_trigger': 'imageUpdateTrigger',
            'is_archive_enabled': 'isArchiveEnabled',
            'last_updated_time': 'lastUpdatedTime',
            'output_images': 'outputImages',
            'platform': 'platform',
            'provisioning_state': 'provisioningState',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._build_id = build_id
        self._build_task = build_task
        self._build_type = build_type
        self._create_time = create_time
        self._finish_time = finish_time
        self._git_commit_trigger = git_commit_trigger
        self._image_update_trigger = image_update_trigger
        self._is_archive_enabled = is_archive_enabled
        self._last_updated_time = last_updated_time
        self._output_images = output_images
        self._platform = platform
        self._provisioning_state = provisioning_state
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildProperties of this BuildProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_id(self):
        """Gets the build_id of this BuildProperties.

        The unique identifier for the build.

        :return: The build_id of this BuildProperties.
        :rtype: str
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this BuildProperties.

        The unique identifier for the build.

        :param build_id: The build_id of this BuildProperties.
        :type build_id: str
        """

        self._build_id = build_id

    @property
    def build_task(self):
        """Gets the build_task of this BuildProperties.

        The build task with which the build was started.

        :return: The build_task of this BuildProperties.
        :rtype: str
        """
        return self._build_task

    @build_task.setter
    def build_task(self, build_task):
        """Sets the build_task of this BuildProperties.

        The build task with which the build was started.

        :param build_task: The build_task of this BuildProperties.
        :type build_task: str
        """

        self._build_task = build_task

    @property
    def build_type(self):
        """Gets the build_type of this BuildProperties.

        The type of build.

        :return: The build_type of this BuildProperties.
        :rtype: str
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this BuildProperties.

        The type of build.

        :param build_type: The build_type of this BuildProperties.
        :type build_type: str
        """
        allowed_values = ["AutoBuild", "QuickBuild"]  # noqa: E501
        if build_type not in allowed_values:
            raise ValueError(
                "Invalid value for `build_type` ({0}), must be one of {1}"
                .format(build_type, allowed_values)
            )

        self._build_type = build_type

    @property
    def create_time(self):
        """Gets the create_time of this BuildProperties.

        The time the build was created.

        :return: The create_time of this BuildProperties.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BuildProperties.

        The time the build was created.

        :param create_time: The create_time of this BuildProperties.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def finish_time(self):
        """Gets the finish_time of this BuildProperties.

        The time the build finished.

        :return: The finish_time of this BuildProperties.
        :rtype: datetime
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this BuildProperties.

        The time the build finished.

        :param finish_time: The finish_time of this BuildProperties.
        :type finish_time: datetime
        """

        self._finish_time = finish_time

    @property
    def git_commit_trigger(self):
        """Gets the git_commit_trigger of this BuildProperties.


        :return: The git_commit_trigger of this BuildProperties.
        :rtype: GitCommitTrigger
        """
        return self._git_commit_trigger

    @git_commit_trigger.setter
    def git_commit_trigger(self, git_commit_trigger):
        """Sets the git_commit_trigger of this BuildProperties.


        :param git_commit_trigger: The git_commit_trigger of this BuildProperties.
        :type git_commit_trigger: GitCommitTrigger
        """

        self._git_commit_trigger = git_commit_trigger

    @property
    def image_update_trigger(self):
        """Gets the image_update_trigger of this BuildProperties.


        :return: The image_update_trigger of this BuildProperties.
        :rtype: ImageUpdateTrigger
        """
        return self._image_update_trigger

    @image_update_trigger.setter
    def image_update_trigger(self, image_update_trigger):
        """Sets the image_update_trigger of this BuildProperties.


        :param image_update_trigger: The image_update_trigger of this BuildProperties.
        :type image_update_trigger: ImageUpdateTrigger
        """

        self._image_update_trigger = image_update_trigger

    @property
    def is_archive_enabled(self):
        """Gets the is_archive_enabled of this BuildProperties.

        The value that indicates whether archiving is enabled or not.

        :return: The is_archive_enabled of this BuildProperties.
        :rtype: bool
        """
        return self._is_archive_enabled

    @is_archive_enabled.setter
    def is_archive_enabled(self, is_archive_enabled):
        """Sets the is_archive_enabled of this BuildProperties.

        The value that indicates whether archiving is enabled or not.

        :param is_archive_enabled: The is_archive_enabled of this BuildProperties.
        :type is_archive_enabled: bool
        """

        self._is_archive_enabled = is_archive_enabled

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this BuildProperties.

        The last updated time for the build.

        :return: The last_updated_time of this BuildProperties.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this BuildProperties.

        The last updated time for the build.

        :param last_updated_time: The last_updated_time of this BuildProperties.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def output_images(self):
        """Gets the output_images of this BuildProperties.

        The list of all images that were generated from the build.

        :return: The output_images of this BuildProperties.
        :rtype: List[ImageDescriptor]
        """
        return self._output_images

    @output_images.setter
    def output_images(self, output_images):
        """Sets the output_images of this BuildProperties.

        The list of all images that were generated from the build.

        :param output_images: The output_images of this BuildProperties.
        :type output_images: List[ImageDescriptor]
        """

        self._output_images = output_images

    @property
    def platform(self):
        """Gets the platform of this BuildProperties.


        :return: The platform of this BuildProperties.
        :rtype: PlatformProperties
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this BuildProperties.


        :param platform: The platform of this BuildProperties.
        :type platform: PlatformProperties
        """

        self._platform = platform

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this BuildProperties.

        The provisioning state of a build.

        :return: The provisioning_state of this BuildProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this BuildProperties.

        The provisioning state of a build.

        :param provisioning_state: The provisioning_state of this BuildProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def start_time(self):
        """Gets the start_time of this BuildProperties.

        The time the build started.

        :return: The start_time of this BuildProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BuildProperties.

        The time the build started.

        :param start_time: The start_time of this BuildProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this BuildProperties.

        The current status of the build.

        :return: The status of this BuildProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BuildProperties.

        The current status of the build.

        :param status: The status of this BuildProperties.
        :type status: str
        """
        allowed_values = ["Queued", "Started", "Running", "Succeeded", "Failed", "Canceled", "Error", "Timeout"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
