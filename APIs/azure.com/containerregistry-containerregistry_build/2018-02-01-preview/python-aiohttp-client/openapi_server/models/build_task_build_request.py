# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.queue_build_request import QueueBuildRequest
from openapi_server import util


class BuildTaskBuildRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_task_name: str=None, type: str=None):
        """BuildTaskBuildRequest - a model defined in OpenAPI

        :param build_task_name: The build_task_name of this BuildTaskBuildRequest.
        :param type: The type of this BuildTaskBuildRequest.
        """
        self.openapi_types = {
            'build_task_name': str,
            'type': str
        }

        self.attribute_map = {
            'build_task_name': 'buildTaskName',
            'type': 'type'
        }

        self._build_task_name = build_task_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildTaskBuildRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildTaskBuildRequest of this BuildTaskBuildRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_task_name(self):
        """Gets the build_task_name of this BuildTaskBuildRequest.

        The name of build task against which build has to be queued.

        :return: The build_task_name of this BuildTaskBuildRequest.
        :rtype: str
        """
        return self._build_task_name

    @build_task_name.setter
    def build_task_name(self, build_task_name):
        """Sets the build_task_name of this BuildTaskBuildRequest.

        The name of build task against which build has to be queued.

        :param build_task_name: The build_task_name of this BuildTaskBuildRequest.
        :type build_task_name: str
        """
        if build_task_name is None:
            raise ValueError("Invalid value for `build_task_name`, must not be `None`")

        self._build_task_name = build_task_name

    @property
    def type(self):
        """Gets the type of this BuildTaskBuildRequest.

        The type of the build request.

        :return: The type of this BuildTaskBuildRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BuildTaskBuildRequest.

        The type of the build request.

        :param type: The type of this BuildTaskBuildRequest.
        :type type: str
        """

        self._type = type
