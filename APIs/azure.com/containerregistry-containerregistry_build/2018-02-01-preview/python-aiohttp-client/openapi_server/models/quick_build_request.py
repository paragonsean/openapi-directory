# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_argument import BuildArgument
from openapi_server.models.platform_properties import PlatformProperties
from openapi_server.models.queue_build_request import QueueBuildRequest
from openapi_server import util


class QuickBuildRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_arguments: List[BuildArgument]=None, docker_file_path: str=None, image_names: List[str]=None, is_push_enabled: bool=True, no_cache: bool=False, platform: PlatformProperties=None, source_location: str=None, timeout: int=3600, type: str=None):
        """QuickBuildRequest - a model defined in OpenAPI

        :param build_arguments: The build_arguments of this QuickBuildRequest.
        :param docker_file_path: The docker_file_path of this QuickBuildRequest.
        :param image_names: The image_names of this QuickBuildRequest.
        :param is_push_enabled: The is_push_enabled of this QuickBuildRequest.
        :param no_cache: The no_cache of this QuickBuildRequest.
        :param platform: The platform of this QuickBuildRequest.
        :param source_location: The source_location of this QuickBuildRequest.
        :param timeout: The timeout of this QuickBuildRequest.
        :param type: The type of this QuickBuildRequest.
        """
        self.openapi_types = {
            'build_arguments': List[BuildArgument],
            'docker_file_path': str,
            'image_names': List[str],
            'is_push_enabled': bool,
            'no_cache': bool,
            'platform': PlatformProperties,
            'source_location': str,
            'timeout': int,
            'type': str
        }

        self.attribute_map = {
            'build_arguments': 'buildArguments',
            'docker_file_path': 'dockerFilePath',
            'image_names': 'imageNames',
            'is_push_enabled': 'isPushEnabled',
            'no_cache': 'noCache',
            'platform': 'platform',
            'source_location': 'sourceLocation',
            'timeout': 'timeout',
            'type': 'type'
        }

        self._build_arguments = build_arguments
        self._docker_file_path = docker_file_path
        self._image_names = image_names
        self._is_push_enabled = is_push_enabled
        self._no_cache = no_cache
        self._platform = platform
        self._source_location = source_location
        self._timeout = timeout
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuickBuildRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuickBuildRequest of this QuickBuildRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_arguments(self):
        """Gets the build_arguments of this QuickBuildRequest.

        The collection of build arguments to be used.

        :return: The build_arguments of this QuickBuildRequest.
        :rtype: List[BuildArgument]
        """
        return self._build_arguments

    @build_arguments.setter
    def build_arguments(self, build_arguments):
        """Sets the build_arguments of this QuickBuildRequest.

        The collection of build arguments to be used.

        :param build_arguments: The build_arguments of this QuickBuildRequest.
        :type build_arguments: List[BuildArgument]
        """

        self._build_arguments = build_arguments

    @property
    def docker_file_path(self):
        """Gets the docker_file_path of this QuickBuildRequest.

        The Docker file path relative to the source location.

        :return: The docker_file_path of this QuickBuildRequest.
        :rtype: str
        """
        return self._docker_file_path

    @docker_file_path.setter
    def docker_file_path(self, docker_file_path):
        """Sets the docker_file_path of this QuickBuildRequest.

        The Docker file path relative to the source location.

        :param docker_file_path: The docker_file_path of this QuickBuildRequest.
        :type docker_file_path: str
        """
        if docker_file_path is None:
            raise ValueError("Invalid value for `docker_file_path`, must not be `None`")

        self._docker_file_path = docker_file_path

    @property
    def image_names(self):
        """Gets the image_names of this QuickBuildRequest.

        The fully qualified image names including the repository and tag.

        :return: The image_names of this QuickBuildRequest.
        :rtype: List[str]
        """
        return self._image_names

    @image_names.setter
    def image_names(self, image_names):
        """Sets the image_names of this QuickBuildRequest.

        The fully qualified image names including the repository and tag.

        :param image_names: The image_names of this QuickBuildRequest.
        :type image_names: List[str]
        """

        self._image_names = image_names

    @property
    def is_push_enabled(self):
        """Gets the is_push_enabled of this QuickBuildRequest.

        The value of this property indicates whether the image built should be pushed to the registry or not.

        :return: The is_push_enabled of this QuickBuildRequest.
        :rtype: bool
        """
        return self._is_push_enabled

    @is_push_enabled.setter
    def is_push_enabled(self, is_push_enabled):
        """Sets the is_push_enabled of this QuickBuildRequest.

        The value of this property indicates whether the image built should be pushed to the registry or not.

        :param is_push_enabled: The is_push_enabled of this QuickBuildRequest.
        :type is_push_enabled: bool
        """

        self._is_push_enabled = is_push_enabled

    @property
    def no_cache(self):
        """Gets the no_cache of this QuickBuildRequest.

        The value of this property indicates whether the image cache is enabled or not.

        :return: The no_cache of this QuickBuildRequest.
        :rtype: bool
        """
        return self._no_cache

    @no_cache.setter
    def no_cache(self, no_cache):
        """Sets the no_cache of this QuickBuildRequest.

        The value of this property indicates whether the image cache is enabled or not.

        :param no_cache: The no_cache of this QuickBuildRequest.
        :type no_cache: bool
        """

        self._no_cache = no_cache

    @property
    def platform(self):
        """Gets the platform of this QuickBuildRequest.


        :return: The platform of this QuickBuildRequest.
        :rtype: PlatformProperties
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this QuickBuildRequest.


        :param platform: The platform of this QuickBuildRequest.
        :type platform: PlatformProperties
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def source_location(self):
        """Gets the source_location of this QuickBuildRequest.

        The URL(absolute or relative) of the source that needs to be built. For Docker build, it can be an URL to a tar or github repository as supported by Docker.  If it is relative URL, the relative path should be obtained from calling getSourceUploadUrl API.

        :return: The source_location of this QuickBuildRequest.
        :rtype: str
        """
        return self._source_location

    @source_location.setter
    def source_location(self, source_location):
        """Sets the source_location of this QuickBuildRequest.

        The URL(absolute or relative) of the source that needs to be built. For Docker build, it can be an URL to a tar or github repository as supported by Docker.  If it is relative URL, the relative path should be obtained from calling getSourceUploadUrl API.

        :param source_location: The source_location of this QuickBuildRequest.
        :type source_location: str
        """
        if source_location is None:
            raise ValueError("Invalid value for `source_location`, must not be `None`")

        self._source_location = source_location

    @property
    def timeout(self):
        """Gets the timeout of this QuickBuildRequest.

        Build timeout in seconds.

        :return: The timeout of this QuickBuildRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this QuickBuildRequest.

        Build timeout in seconds.

        :param timeout: The timeout of this QuickBuildRequest.
        :type timeout: int
        """
        if timeout is not None and timeout > 28800:
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `28800`")
        if timeout is not None and timeout < 300:
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `300`")

        self._timeout = timeout

    @property
    def type(self):
        """Gets the type of this QuickBuildRequest.

        The type of the build request.

        :return: The type of this QuickBuildRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QuickBuildRequest.

        The type of the build request.

        :param type: The type of this QuickBuildRequest.
        :type type: str
        """

        self._type = type
