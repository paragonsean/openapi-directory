/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildArgument;
import org.openapitools.client.model.PlatformProperties;
import org.openapitools.client.model.QueueBuildRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The queue build request parameters for a quick build.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:59.640634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuickBuildRequest extends QueueBuildRequest {
  public static final String SERIALIZED_NAME_BUILD_ARGUMENTS = "buildArguments";
  @SerializedName(SERIALIZED_NAME_BUILD_ARGUMENTS)
  private List<BuildArgument> buildArguments = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCKER_FILE_PATH = "dockerFilePath";
  @SerializedName(SERIALIZED_NAME_DOCKER_FILE_PATH)
  private String dockerFilePath;

  public static final String SERIALIZED_NAME_IMAGE_NAMES = "imageNames";
  @SerializedName(SERIALIZED_NAME_IMAGE_NAMES)
  private List<String> imageNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_PUSH_ENABLED = "isPushEnabled";
  @SerializedName(SERIALIZED_NAME_IS_PUSH_ENABLED)
  private Boolean isPushEnabled = true;

  public static final String SERIALIZED_NAME_NO_CACHE = "noCache";
  @SerializedName(SERIALIZED_NAME_NO_CACHE)
  private Boolean noCache = false;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformProperties platform;

  public static final String SERIALIZED_NAME_SOURCE_LOCATION = "sourceLocation";
  @SerializedName(SERIALIZED_NAME_SOURCE_LOCATION)
  private String sourceLocation;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout = 3600;

  public QuickBuildRequest() {
    this.type = this.getClass().getSimpleName();
  }

  public QuickBuildRequest(
     String type
  ) {
    this();
    this.type = type;
  }

  public QuickBuildRequest buildArguments(List<BuildArgument> buildArguments) {
    this.buildArguments = buildArguments;
    return this;
  }

  public QuickBuildRequest addBuildArgumentsItem(BuildArgument buildArgumentsItem) {
    if (this.buildArguments == null) {
      this.buildArguments = new ArrayList<>();
    }
    this.buildArguments.add(buildArgumentsItem);
    return this;
  }

  /**
   * The collection of build arguments to be used.
   * @return buildArguments
   */
  @javax.annotation.Nullable
  public List<BuildArgument> getBuildArguments() {
    return buildArguments;
  }

  public void setBuildArguments(List<BuildArgument> buildArguments) {
    this.buildArguments = buildArguments;
  }


  public QuickBuildRequest dockerFilePath(String dockerFilePath) {
    this.dockerFilePath = dockerFilePath;
    return this;
  }

  /**
   * The Docker file path relative to the source location.
   * @return dockerFilePath
   */
  @javax.annotation.Nonnull
  public String getDockerFilePath() {
    return dockerFilePath;
  }

  public void setDockerFilePath(String dockerFilePath) {
    this.dockerFilePath = dockerFilePath;
  }


  public QuickBuildRequest imageNames(List<String> imageNames) {
    this.imageNames = imageNames;
    return this;
  }

  public QuickBuildRequest addImageNamesItem(String imageNamesItem) {
    if (this.imageNames == null) {
      this.imageNames = new ArrayList<>();
    }
    this.imageNames.add(imageNamesItem);
    return this;
  }

  /**
   * The fully qualified image names including the repository and tag.
   * @return imageNames
   */
  @javax.annotation.Nullable
  public List<String> getImageNames() {
    return imageNames;
  }

  public void setImageNames(List<String> imageNames) {
    this.imageNames = imageNames;
  }


  public QuickBuildRequest isPushEnabled(Boolean isPushEnabled) {
    this.isPushEnabled = isPushEnabled;
    return this;
  }

  /**
   * The value of this property indicates whether the image built should be pushed to the registry or not.
   * @return isPushEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsPushEnabled() {
    return isPushEnabled;
  }

  public void setIsPushEnabled(Boolean isPushEnabled) {
    this.isPushEnabled = isPushEnabled;
  }


  public QuickBuildRequest noCache(Boolean noCache) {
    this.noCache = noCache;
    return this;
  }

  /**
   * The value of this property indicates whether the image cache is enabled or not.
   * @return noCache
   */
  @javax.annotation.Nullable
  public Boolean getNoCache() {
    return noCache;
  }

  public void setNoCache(Boolean noCache) {
    this.noCache = noCache;
  }


  public QuickBuildRequest platform(PlatformProperties platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nonnull
  public PlatformProperties getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformProperties platform) {
    this.platform = platform;
  }


  public QuickBuildRequest sourceLocation(String sourceLocation) {
    this.sourceLocation = sourceLocation;
    return this;
  }

  /**
   * The URL(absolute or relative) of the source that needs to be built. For Docker build, it can be an URL to a tar or github repository as supported by Docker.  If it is relative URL, the relative path should be obtained from calling getSourceUploadUrl API.
   * @return sourceLocation
   */
  @javax.annotation.Nonnull
  public String getSourceLocation() {
    return sourceLocation;
  }

  public void setSourceLocation(String sourceLocation) {
    this.sourceLocation = sourceLocation;
  }


  public QuickBuildRequest timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Build timeout in seconds.
   * minimum: 300
   * maximum: 28800
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuickBuildRequest quickBuildRequest = (QuickBuildRequest) o;
    return Objects.equals(this.buildArguments, quickBuildRequest.buildArguments) &&
        Objects.equals(this.dockerFilePath, quickBuildRequest.dockerFilePath) &&
        Objects.equals(this.imageNames, quickBuildRequest.imageNames) &&
        Objects.equals(this.isPushEnabled, quickBuildRequest.isPushEnabled) &&
        Objects.equals(this.noCache, quickBuildRequest.noCache) &&
        Objects.equals(this.platform, quickBuildRequest.platform) &&
        Objects.equals(this.sourceLocation, quickBuildRequest.sourceLocation) &&
        Objects.equals(this.timeout, quickBuildRequest.timeout) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildArguments, dockerFilePath, imageNames, isPushEnabled, noCache, platform, sourceLocation, timeout, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuickBuildRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    buildArguments: ").append(toIndentedString(buildArguments)).append("\n");
    sb.append("    dockerFilePath: ").append(toIndentedString(dockerFilePath)).append("\n");
    sb.append("    imageNames: ").append(toIndentedString(imageNames)).append("\n");
    sb.append("    isPushEnabled: ").append(toIndentedString(isPushEnabled)).append("\n");
    sb.append("    noCache: ").append(toIndentedString(noCache)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    sourceLocation: ").append(toIndentedString(sourceLocation)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dockerFilePath");
    openapiRequiredFields.add("platform");
    openapiRequiredFields.add("sourceLocation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuickBuildRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuickBuildRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuickBuildRequest is not found in the empty JSON string", QuickBuildRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuickBuildRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuickBuildRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QuickBuildRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuickBuildRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuickBuildRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuickBuildRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuickBuildRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QuickBuildRequest>() {
           @Override
           public void write(JsonWriter out, QuickBuildRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuickBuildRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuickBuildRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuickBuildRequest
   * @throws IOException if the JSON string is invalid with respect to QuickBuildRequest
   */
  public static QuickBuildRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuickBuildRequest.class);
  }

  /**
   * Convert an instance of QuickBuildRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

