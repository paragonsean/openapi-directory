/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BuildArgumentList;
import org.openapitools.client.model.BuildStep;
import org.openapitools.client.model.BuildStepList;
import org.openapitools.client.model.BuildStepUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuildStepsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BuildStepsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuildStepsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for buildStepsCreate
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param buildStepCreateParameters The parameters for creating a build step. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned.If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsCreateCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, BuildStep buildStepCreateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildStepCreateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "buildTaskName" + "}", localVarApiClient.escapeString(buildTaskName.toString()))
            .replace("{" + "stepName" + "}", localVarApiClient.escapeString(stepName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildStepsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, BuildStep buildStepCreateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildStepsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildStepsCreate(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildStepsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildStepsCreate(Async)");
        }

        // verify the required parameter 'buildTaskName' is set
        if (buildTaskName == null) {
            throw new ApiException("Missing the required parameter 'buildTaskName' when calling buildStepsCreate(Async)");
        }

        // verify the required parameter 'stepName' is set
        if (stepName == null) {
            throw new ApiException("Missing the required parameter 'stepName' when calling buildStepsCreate(Async)");
        }

        // verify the required parameter 'buildStepCreateParameters' is set
        if (buildStepCreateParameters == null) {
            throw new ApiException("Missing the required parameter 'buildStepCreateParameters' when calling buildStepsCreate(Async)");
        }

        return buildStepsCreateCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, buildStepCreateParameters, _callback);

    }

    /**
     * 
     * Creates a build step for a build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param buildStepCreateParameters The parameters for creating a build step. (required)
     * @return BuildStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned.If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public BuildStep buildStepsCreate(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, BuildStep buildStepCreateParameters) throws ApiException {
        ApiResponse<BuildStep> localVarResp = buildStepsCreateWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, buildStepCreateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a build step for a build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param buildStepCreateParameters The parameters for creating a build step. (required)
     * @return ApiResponse&lt;BuildStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned.If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildStep> buildStepsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, BuildStep buildStepCreateParameters) throws ApiException {
        okhttp3.Call localVarCall = buildStepsCreateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, buildStepCreateParameters, null);
        Type localVarReturnType = new TypeToken<BuildStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a build step for a build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param buildStepCreateParameters The parameters for creating a build step. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned.If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsCreateAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, BuildStep buildStepCreateParameters, final ApiCallback<BuildStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildStepsCreateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, buildStepCreateParameters, _callback);
        Type localVarReturnType = new TypeToken<BuildStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildStepsDelete
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsDeleteCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "buildTaskName" + "}", localVarApiClient.escapeString(buildTaskName.toString()))
            .replace("{" + "stepName" + "}", localVarApiClient.escapeString(stepName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildStepsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildStepsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildStepsDelete(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildStepsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildStepsDelete(Async)");
        }

        // verify the required parameter 'buildTaskName' is set
        if (buildTaskName == null) {
            throw new ApiException("Missing the required parameter 'buildTaskName' when calling buildStepsDelete(Async)");
        }

        // verify the required parameter 'stepName' is set
        if (stepName == null) {
            throw new ApiException("Missing the required parameter 'stepName' when calling buildStepsDelete(Async)");
        }

        return buildStepsDeleteCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, _callback);

    }

    /**
     * 
     * Deletes a build step from the build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void buildStepsDelete(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName) throws ApiException {
        buildStepsDeleteWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName);
    }

    /**
     * 
     * Deletes a build step from the build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> buildStepsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName) throws ApiException {
        okhttp3.Call localVarCall = buildStepsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a build step from the build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsDeleteAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildStepsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildStepsGet
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsGetCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "buildTaskName" + "}", localVarApiClient.escapeString(buildTaskName.toString()))
            .replace("{" + "stepName" + "}", localVarApiClient.escapeString(stepName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildStepsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildStepsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildStepsGet(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildStepsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildStepsGet(Async)");
        }

        // verify the required parameter 'buildTaskName' is set
        if (buildTaskName == null) {
            throw new ApiException("Missing the required parameter 'buildTaskName' when calling buildStepsGet(Async)");
        }

        // verify the required parameter 'stepName' is set
        if (stepName == null) {
            throw new ApiException("Missing the required parameter 'stepName' when calling buildStepsGet(Async)");
        }

        return buildStepsGetCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, _callback);

    }

    /**
     * 
     * Gets the build step for a build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @return BuildStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public BuildStep buildStepsGet(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName) throws ApiException {
        ApiResponse<BuildStep> localVarResp = buildStepsGetWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the build step for a build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @return ApiResponse&lt;BuildStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildStep> buildStepsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName) throws ApiException {
        okhttp3.Call localVarCall = buildStepsGetValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, null);
        Type localVarReturnType = new TypeToken<BuildStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the build step for a build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsGetAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, final ApiCallback<BuildStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildStepsGetValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, _callback);
        Type localVarReturnType = new TypeToken<BuildStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildStepsList
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsListCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "buildTaskName" + "}", localVarApiClient.escapeString(buildTaskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildStepsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildStepsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildStepsList(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildStepsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildStepsList(Async)");
        }

        // verify the required parameter 'buildTaskName' is set
        if (buildTaskName == null) {
            throw new ApiException("Missing the required parameter 'buildTaskName' when calling buildStepsList(Async)");
        }

        return buildStepsListCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, _callback);

    }

    /**
     * 
     * List all the build steps for a given build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @return BuildStepList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BuildStepList buildStepsList(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName) throws ApiException {
        ApiResponse<BuildStepList> localVarResp = buildStepsListWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the build steps for a given build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @return ApiResponse&lt;BuildStepList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildStepList> buildStepsListWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName) throws ApiException {
        okhttp3.Call localVarCall = buildStepsListValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, null);
        Type localVarReturnType = new TypeToken<BuildStepList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the build steps for a given build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsListAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, final ApiCallback<BuildStepList> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildStepsListValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, _callback);
        Type localVarReturnType = new TypeToken<BuildStepList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildStepsListBuildArguments
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsListBuildArgumentsCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}/listBuildArguments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "buildTaskName" + "}", localVarApiClient.escapeString(buildTaskName.toString()))
            .replace("{" + "stepName" + "}", localVarApiClient.escapeString(stepName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildStepsListBuildArgumentsValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildStepsListBuildArguments(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildStepsListBuildArguments(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildStepsListBuildArguments(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildStepsListBuildArguments(Async)");
        }

        // verify the required parameter 'buildTaskName' is set
        if (buildTaskName == null) {
            throw new ApiException("Missing the required parameter 'buildTaskName' when calling buildStepsListBuildArguments(Async)");
        }

        // verify the required parameter 'stepName' is set
        if (stepName == null) {
            throw new ApiException("Missing the required parameter 'stepName' when calling buildStepsListBuildArguments(Async)");
        }

        return buildStepsListBuildArgumentsCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, _callback);

    }

    /**
     * 
     * List the build arguments for a step including the secret arguments.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @return BuildArgumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public BuildArgumentList buildStepsListBuildArguments(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName) throws ApiException {
        ApiResponse<BuildArgumentList> localVarResp = buildStepsListBuildArgumentsWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName);
        return localVarResp.getData();
    }

    /**
     * 
     * List the build arguments for a step including the secret arguments.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @return ApiResponse&lt;BuildArgumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildArgumentList> buildStepsListBuildArgumentsWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName) throws ApiException {
        okhttp3.Call localVarCall = buildStepsListBuildArgumentsValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, null);
        Type localVarReturnType = new TypeToken<BuildArgumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the build arguments for a step including the secret arguments.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsListBuildArgumentsAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, final ApiCallback<BuildArgumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildStepsListBuildArgumentsValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, _callback);
        Type localVarReturnType = new TypeToken<BuildArgumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildStepsUpdate
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param buildStepUpdateParameters The parameters for updating a build step. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned.If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsUpdateCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, BuildStepUpdateParameters buildStepUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildStepUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "buildTaskName" + "}", localVarApiClient.escapeString(buildTaskName.toString()))
            .replace("{" + "stepName" + "}", localVarApiClient.escapeString(stepName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildStepsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, BuildStepUpdateParameters buildStepUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildStepsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildStepsUpdate(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildStepsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildStepsUpdate(Async)");
        }

        // verify the required parameter 'buildTaskName' is set
        if (buildTaskName == null) {
            throw new ApiException("Missing the required parameter 'buildTaskName' when calling buildStepsUpdate(Async)");
        }

        // verify the required parameter 'stepName' is set
        if (stepName == null) {
            throw new ApiException("Missing the required parameter 'stepName' when calling buildStepsUpdate(Async)");
        }

        // verify the required parameter 'buildStepUpdateParameters' is set
        if (buildStepUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'buildStepUpdateParameters' when calling buildStepsUpdate(Async)");
        }

        return buildStepsUpdateCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, buildStepUpdateParameters, _callback);

    }

    /**
     * 
     * Updates a build step in a build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param buildStepUpdateParameters The parameters for updating a build step. (required)
     * @return BuildStep
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned.If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public BuildStep buildStepsUpdate(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, BuildStepUpdateParameters buildStepUpdateParameters) throws ApiException {
        ApiResponse<BuildStep> localVarResp = buildStepsUpdateWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, buildStepUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a build step in a build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param buildStepUpdateParameters The parameters for updating a build step. (required)
     * @return ApiResponse&lt;BuildStep&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned.If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildStep> buildStepsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, BuildStepUpdateParameters buildStepUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = buildStepsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, buildStepUpdateParameters, null);
        Type localVarReturnType = new TypeToken<BuildStep>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a build step in a build task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildTaskName The name of the container registry build task. (required)
     * @param stepName The name of a build step for a container registry build task. (required)
     * @param buildStepUpdateParameters The parameters for updating a build step. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/step doesn&#39;t exist, 404 (Not found) is returned.If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildStepsUpdateAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildTaskName, String stepName, BuildStepUpdateParameters buildStepUpdateParameters, final ApiCallback<BuildStep> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildStepsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, buildStepUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<BuildStep>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
