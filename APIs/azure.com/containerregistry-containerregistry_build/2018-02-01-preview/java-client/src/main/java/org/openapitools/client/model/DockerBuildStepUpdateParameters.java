/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildArgument;
import org.openapitools.client.model.BuildStepPropertiesUpdateParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties for updating a docker build step.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:59.640634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DockerBuildStepUpdateParameters extends BuildStepPropertiesUpdateParameters {
  /**
   * The type of the auto trigger for base image dependency updates.
   */
  @JsonAdapter(BaseImageTriggerEnum.Adapter.class)
  public enum BaseImageTriggerEnum {
    ALL("All"),
    
    RUNTIME("Runtime"),
    
    NONE("None");

    private String value;

    BaseImageTriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BaseImageTriggerEnum fromValue(String value) {
      for (BaseImageTriggerEnum b : BaseImageTriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BaseImageTriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BaseImageTriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BaseImageTriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BaseImageTriggerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BaseImageTriggerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BASE_IMAGE_TRIGGER = "baseImageTrigger";
  @SerializedName(SERIALIZED_NAME_BASE_IMAGE_TRIGGER)
  private BaseImageTriggerEnum baseImageTrigger;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_BUILD_ARGUMENTS = "buildArguments";
  @SerializedName(SERIALIZED_NAME_BUILD_ARGUMENTS)
  private List<BuildArgument> buildArguments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTEXT_PATH = "contextPath";
  @SerializedName(SERIALIZED_NAME_CONTEXT_PATH)
  private String contextPath;

  public static final String SERIALIZED_NAME_DOCKER_FILE_PATH = "dockerFilePath";
  @SerializedName(SERIALIZED_NAME_DOCKER_FILE_PATH)
  private String dockerFilePath;

  public static final String SERIALIZED_NAME_IMAGE_NAMES = "imageNames";
  @SerializedName(SERIALIZED_NAME_IMAGE_NAMES)
  private List<String> imageNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_PUSH_ENABLED = "isPushEnabled";
  @SerializedName(SERIALIZED_NAME_IS_PUSH_ENABLED)
  private Boolean isPushEnabled;

  public static final String SERIALIZED_NAME_NO_CACHE = "noCache";
  @SerializedName(SERIALIZED_NAME_NO_CACHE)
  private Boolean noCache;

  public DockerBuildStepUpdateParameters() {
    this.type = this.getClass().getSimpleName();
  }

  public DockerBuildStepUpdateParameters(
     TypeEnum type
  ) {
    this();
    this.type = type;
  }

  public DockerBuildStepUpdateParameters baseImageTrigger(BaseImageTriggerEnum baseImageTrigger) {
    this.baseImageTrigger = baseImageTrigger;
    return this;
  }

  /**
   * The type of the auto trigger for base image dependency updates.
   * @return baseImageTrigger
   */
  @javax.annotation.Nullable
  public BaseImageTriggerEnum getBaseImageTrigger() {
    return baseImageTrigger;
  }

  public void setBaseImageTrigger(BaseImageTriggerEnum baseImageTrigger) {
    this.baseImageTrigger = baseImageTrigger;
  }


  public DockerBuildStepUpdateParameters branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * The repository branch name.
   * @return branch
   */
  @javax.annotation.Nullable
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public DockerBuildStepUpdateParameters buildArguments(List<BuildArgument> buildArguments) {
    this.buildArguments = buildArguments;
    return this;
  }

  public DockerBuildStepUpdateParameters addBuildArgumentsItem(BuildArgument buildArgumentsItem) {
    if (this.buildArguments == null) {
      this.buildArguments = new ArrayList<>();
    }
    this.buildArguments.add(buildArgumentsItem);
    return this;
  }

  /**
   * The custom arguments for building this build step.
   * @return buildArguments
   */
  @javax.annotation.Nullable
  public List<BuildArgument> getBuildArguments() {
    return buildArguments;
  }

  public void setBuildArguments(List<BuildArgument> buildArguments) {
    this.buildArguments = buildArguments;
  }


  public DockerBuildStepUpdateParameters contextPath(String contextPath) {
    this.contextPath = contextPath;
    return this;
  }

  /**
   * The relative context path for a docker build in the source.
   * @return contextPath
   */
  @javax.annotation.Nullable
  public String getContextPath() {
    return contextPath;
  }

  public void setContextPath(String contextPath) {
    this.contextPath = contextPath;
  }


  public DockerBuildStepUpdateParameters dockerFilePath(String dockerFilePath) {
    this.dockerFilePath = dockerFilePath;
    return this;
  }

  /**
   * The Docker file path relative to the source control root.
   * @return dockerFilePath
   */
  @javax.annotation.Nullable
  public String getDockerFilePath() {
    return dockerFilePath;
  }

  public void setDockerFilePath(String dockerFilePath) {
    this.dockerFilePath = dockerFilePath;
  }


  public DockerBuildStepUpdateParameters imageNames(List<String> imageNames) {
    this.imageNames = imageNames;
    return this;
  }

  public DockerBuildStepUpdateParameters addImageNamesItem(String imageNamesItem) {
    if (this.imageNames == null) {
      this.imageNames = new ArrayList<>();
    }
    this.imageNames.add(imageNamesItem);
    return this;
  }

  /**
   * The fully qualified image names including the repository and tag.
   * @return imageNames
   */
  @javax.annotation.Nullable
  public List<String> getImageNames() {
    return imageNames;
  }

  public void setImageNames(List<String> imageNames) {
    this.imageNames = imageNames;
  }


  public DockerBuildStepUpdateParameters isPushEnabled(Boolean isPushEnabled) {
    this.isPushEnabled = isPushEnabled;
    return this;
  }

  /**
   * The value of this property indicates whether the image built should be pushed to the registry or not.
   * @return isPushEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsPushEnabled() {
    return isPushEnabled;
  }

  public void setIsPushEnabled(Boolean isPushEnabled) {
    this.isPushEnabled = isPushEnabled;
  }


  public DockerBuildStepUpdateParameters noCache(Boolean noCache) {
    this.noCache = noCache;
    return this;
  }

  /**
   * The value of this property indicates whether the image cache is enabled or not.
   * @return noCache
   */
  @javax.annotation.Nullable
  public Boolean getNoCache() {
    return noCache;
  }

  public void setNoCache(Boolean noCache) {
    this.noCache = noCache;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DockerBuildStepUpdateParameters dockerBuildStepUpdateParameters = (DockerBuildStepUpdateParameters) o;
    return Objects.equals(this.baseImageTrigger, dockerBuildStepUpdateParameters.baseImageTrigger) &&
        Objects.equals(this.branch, dockerBuildStepUpdateParameters.branch) &&
        Objects.equals(this.buildArguments, dockerBuildStepUpdateParameters.buildArguments) &&
        Objects.equals(this.contextPath, dockerBuildStepUpdateParameters.contextPath) &&
        Objects.equals(this.dockerFilePath, dockerBuildStepUpdateParameters.dockerFilePath) &&
        Objects.equals(this.imageNames, dockerBuildStepUpdateParameters.imageNames) &&
        Objects.equals(this.isPushEnabled, dockerBuildStepUpdateParameters.isPushEnabled) &&
        Objects.equals(this.noCache, dockerBuildStepUpdateParameters.noCache) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseImageTrigger, branch, buildArguments, contextPath, dockerFilePath, imageNames, isPushEnabled, noCache, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DockerBuildStepUpdateParameters {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    baseImageTrigger: ").append(toIndentedString(baseImageTrigger)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    buildArguments: ").append(toIndentedString(buildArguments)).append("\n");
    sb.append("    contextPath: ").append(toIndentedString(contextPath)).append("\n");
    sb.append("    dockerFilePath: ").append(toIndentedString(dockerFilePath)).append("\n");
    sb.append("    imageNames: ").append(toIndentedString(imageNames)).append("\n");
    sb.append("    isPushEnabled: ").append(toIndentedString(isPushEnabled)).append("\n");
    sb.append("    noCache: ").append(toIndentedString(noCache)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DockerBuildStepUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DockerBuildStepUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DockerBuildStepUpdateParameters is not found in the empty JSON string", DockerBuildStepUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DockerBuildStepUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DockerBuildStepUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DockerBuildStepUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DockerBuildStepUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DockerBuildStepUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DockerBuildStepUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<DockerBuildStepUpdateParameters>() {
           @Override
           public void write(JsonWriter out, DockerBuildStepUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DockerBuildStepUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DockerBuildStepUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DockerBuildStepUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to DockerBuildStepUpdateParameters
   */
  public static DockerBuildStepUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DockerBuildStepUpdateParameters.class);
  }

  /**
   * Convert an instance of DockerBuildStepUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

