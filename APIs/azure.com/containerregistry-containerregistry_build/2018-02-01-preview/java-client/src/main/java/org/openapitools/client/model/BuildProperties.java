/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GitCommitTrigger;
import org.openapitools.client.model.ImageDescriptor;
import org.openapitools.client.model.ImageUpdateTrigger;
import org.openapitools.client.model.PlatformProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties for a build.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:59.640634-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildProperties {
  public static final String SERIALIZED_NAME_BUILD_ID = "buildId";
  @SerializedName(SERIALIZED_NAME_BUILD_ID)
  private String buildId;

  public static final String SERIALIZED_NAME_BUILD_TASK = "buildTask";
  @SerializedName(SERIALIZED_NAME_BUILD_TASK)
  private String buildTask;

  /**
   * The type of build.
   */
  @JsonAdapter(BuildTypeEnum.Adapter.class)
  public enum BuildTypeEnum {
    AUTO_BUILD("AutoBuild"),
    
    QUICK_BUILD("QuickBuild");

    private String value;

    BuildTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BuildTypeEnum fromValue(String value) {
      for (BuildTypeEnum b : BuildTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BuildTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BuildTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BuildTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BuildTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BuildTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUILD_TYPE = "buildType";
  @SerializedName(SERIALIZED_NAME_BUILD_TYPE)
  private BuildTypeEnum buildType;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_FINISH_TIME = "finishTime";
  @SerializedName(SERIALIZED_NAME_FINISH_TIME)
  private OffsetDateTime finishTime;

  public static final String SERIALIZED_NAME_GIT_COMMIT_TRIGGER = "gitCommitTrigger";
  @SerializedName(SERIALIZED_NAME_GIT_COMMIT_TRIGGER)
  private GitCommitTrigger gitCommitTrigger;

  public static final String SERIALIZED_NAME_IMAGE_UPDATE_TRIGGER = "imageUpdateTrigger";
  @SerializedName(SERIALIZED_NAME_IMAGE_UPDATE_TRIGGER)
  private ImageUpdateTrigger imageUpdateTrigger;

  public static final String SERIALIZED_NAME_IS_ARCHIVE_ENABLED = "isArchiveEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVE_ENABLED)
  private Boolean isArchiveEnabled = false;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_OUTPUT_IMAGES = "outputImages";
  @SerializedName(SERIALIZED_NAME_OUTPUT_IMAGES)
  private List<ImageDescriptor> outputImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformProperties platform;

  /**
   * The provisioning state of a build.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  /**
   * The current status of the build.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("Queued"),
    
    STARTED("Started"),
    
    RUNNING("Running"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled"),
    
    ERROR("Error"),
    
    TIMEOUT("Timeout");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public BuildProperties() {
  }

  public BuildProperties buildId(String buildId) {
    this.buildId = buildId;
    return this;
  }

  /**
   * The unique identifier for the build.
   * @return buildId
   */
  @javax.annotation.Nullable
  public String getBuildId() {
    return buildId;
  }

  public void setBuildId(String buildId) {
    this.buildId = buildId;
  }


  public BuildProperties buildTask(String buildTask) {
    this.buildTask = buildTask;
    return this;
  }

  /**
   * The build task with which the build was started.
   * @return buildTask
   */
  @javax.annotation.Nullable
  public String getBuildTask() {
    return buildTask;
  }

  public void setBuildTask(String buildTask) {
    this.buildTask = buildTask;
  }


  public BuildProperties buildType(BuildTypeEnum buildType) {
    this.buildType = buildType;
    return this;
  }

  /**
   * The type of build.
   * @return buildType
   */
  @javax.annotation.Nullable
  public BuildTypeEnum getBuildType() {
    return buildType;
  }

  public void setBuildType(BuildTypeEnum buildType) {
    this.buildType = buildType;
  }


  public BuildProperties createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The time the build was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public BuildProperties finishTime(OffsetDateTime finishTime) {
    this.finishTime = finishTime;
    return this;
  }

  /**
   * The time the build finished.
   * @return finishTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFinishTime() {
    return finishTime;
  }

  public void setFinishTime(OffsetDateTime finishTime) {
    this.finishTime = finishTime;
  }


  public BuildProperties gitCommitTrigger(GitCommitTrigger gitCommitTrigger) {
    this.gitCommitTrigger = gitCommitTrigger;
    return this;
  }

  /**
   * Get gitCommitTrigger
   * @return gitCommitTrigger
   */
  @javax.annotation.Nullable
  public GitCommitTrigger getGitCommitTrigger() {
    return gitCommitTrigger;
  }

  public void setGitCommitTrigger(GitCommitTrigger gitCommitTrigger) {
    this.gitCommitTrigger = gitCommitTrigger;
  }


  public BuildProperties imageUpdateTrigger(ImageUpdateTrigger imageUpdateTrigger) {
    this.imageUpdateTrigger = imageUpdateTrigger;
    return this;
  }

  /**
   * Get imageUpdateTrigger
   * @return imageUpdateTrigger
   */
  @javax.annotation.Nullable
  public ImageUpdateTrigger getImageUpdateTrigger() {
    return imageUpdateTrigger;
  }

  public void setImageUpdateTrigger(ImageUpdateTrigger imageUpdateTrigger) {
    this.imageUpdateTrigger = imageUpdateTrigger;
  }


  public BuildProperties isArchiveEnabled(Boolean isArchiveEnabled) {
    this.isArchiveEnabled = isArchiveEnabled;
    return this;
  }

  /**
   * The value that indicates whether archiving is enabled or not.
   * @return isArchiveEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsArchiveEnabled() {
    return isArchiveEnabled;
  }

  public void setIsArchiveEnabled(Boolean isArchiveEnabled) {
    this.isArchiveEnabled = isArchiveEnabled;
  }


  public BuildProperties lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * The last updated time for the build.
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public BuildProperties outputImages(List<ImageDescriptor> outputImages) {
    this.outputImages = outputImages;
    return this;
  }

  public BuildProperties addOutputImagesItem(ImageDescriptor outputImagesItem) {
    if (this.outputImages == null) {
      this.outputImages = new ArrayList<>();
    }
    this.outputImages.add(outputImagesItem);
    return this;
  }

  /**
   * The list of all images that were generated from the build.
   * @return outputImages
   */
  @javax.annotation.Nullable
  public List<ImageDescriptor> getOutputImages() {
    return outputImages;
  }

  public void setOutputImages(List<ImageDescriptor> outputImages) {
    this.outputImages = outputImages;
  }


  public BuildProperties platform(PlatformProperties platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformProperties getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformProperties platform) {
    this.platform = platform;
  }


  public BuildProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of a build.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  public BuildProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time the build started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public BuildProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current status of the build.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildProperties buildProperties = (BuildProperties) o;
    return Objects.equals(this.buildId, buildProperties.buildId) &&
        Objects.equals(this.buildTask, buildProperties.buildTask) &&
        Objects.equals(this.buildType, buildProperties.buildType) &&
        Objects.equals(this.createTime, buildProperties.createTime) &&
        Objects.equals(this.finishTime, buildProperties.finishTime) &&
        Objects.equals(this.gitCommitTrigger, buildProperties.gitCommitTrigger) &&
        Objects.equals(this.imageUpdateTrigger, buildProperties.imageUpdateTrigger) &&
        Objects.equals(this.isArchiveEnabled, buildProperties.isArchiveEnabled) &&
        Objects.equals(this.lastUpdatedTime, buildProperties.lastUpdatedTime) &&
        Objects.equals(this.outputImages, buildProperties.outputImages) &&
        Objects.equals(this.platform, buildProperties.platform) &&
        Objects.equals(this.provisioningState, buildProperties.provisioningState) &&
        Objects.equals(this.startTime, buildProperties.startTime) &&
        Objects.equals(this.status, buildProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildId, buildTask, buildType, createTime, finishTime, gitCommitTrigger, imageUpdateTrigger, isArchiveEnabled, lastUpdatedTime, outputImages, platform, provisioningState, startTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildProperties {\n");
    sb.append("    buildId: ").append(toIndentedString(buildId)).append("\n");
    sb.append("    buildTask: ").append(toIndentedString(buildTask)).append("\n");
    sb.append("    buildType: ").append(toIndentedString(buildType)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    gitCommitTrigger: ").append(toIndentedString(gitCommitTrigger)).append("\n");
    sb.append("    imageUpdateTrigger: ").append(toIndentedString(imageUpdateTrigger)).append("\n");
    sb.append("    isArchiveEnabled: ").append(toIndentedString(isArchiveEnabled)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    outputImages: ").append(toIndentedString(outputImages)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildId");
    openapiFields.add("buildTask");
    openapiFields.add("buildType");
    openapiFields.add("createTime");
    openapiFields.add("finishTime");
    openapiFields.add("gitCommitTrigger");
    openapiFields.add("imageUpdateTrigger");
    openapiFields.add("isArchiveEnabled");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("outputImages");
    openapiFields.add("platform");
    openapiFields.add("provisioningState");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildProperties is not found in the empty JSON string", BuildProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buildId") != null && !jsonObj.get("buildId").isJsonNull()) && !jsonObj.get("buildId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildId").toString()));
      }
      if ((jsonObj.get("buildTask") != null && !jsonObj.get("buildTask").isJsonNull()) && !jsonObj.get("buildTask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildTask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildTask").toString()));
      }
      if ((jsonObj.get("buildType") != null && !jsonObj.get("buildType").isJsonNull()) && !jsonObj.get("buildType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildType").toString()));
      }
      // validate the optional field `buildType`
      if (jsonObj.get("buildType") != null && !jsonObj.get("buildType").isJsonNull()) {
        BuildTypeEnum.validateJsonElement(jsonObj.get("buildType"));
      }
      // validate the optional field `gitCommitTrigger`
      if (jsonObj.get("gitCommitTrigger") != null && !jsonObj.get("gitCommitTrigger").isJsonNull()) {
        GitCommitTrigger.validateJsonElement(jsonObj.get("gitCommitTrigger"));
      }
      // validate the optional field `imageUpdateTrigger`
      if (jsonObj.get("imageUpdateTrigger") != null && !jsonObj.get("imageUpdateTrigger").isJsonNull()) {
        ImageUpdateTrigger.validateJsonElement(jsonObj.get("imageUpdateTrigger"));
      }
      if (jsonObj.get("outputImages") != null && !jsonObj.get("outputImages").isJsonNull()) {
        JsonArray jsonArrayoutputImages = jsonObj.getAsJsonArray("outputImages");
        if (jsonArrayoutputImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputImages` to be an array in the JSON string but got `%s`", jsonObj.get("outputImages").toString()));
          }

          // validate the optional field `outputImages` (array)
          for (int i = 0; i < jsonArrayoutputImages.size(); i++) {
            ImageDescriptor.validateJsonElement(jsonArrayoutputImages.get(i));
          };
        }
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        PlatformProperties.validateJsonElement(jsonObj.get("platform"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildProperties>() {
           @Override
           public void write(JsonWriter out, BuildProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildProperties
   * @throws IOException if the JSON string is invalid with respect to BuildProperties
   */
  public static BuildProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildProperties.class);
  }

  /**
   * Convert an instance of BuildProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

