/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Build;
import org.openapitools.client.model.BuildGetLogResult;
import org.openapitools.client.model.BuildListResult;
import org.openapitools.client.model.BuildUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuildsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BuildsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuildsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for buildsCancel
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsCancelCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}/cancel"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "buildId" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsCancelValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildsCancel(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildsCancel(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildsCancel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildsCancel(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling buildsCancel(Async)");
        }

        return buildsCancelCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, _callback);

    }

    /**
     * 
     * Cancel an existing build.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public void buildsCancel(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId) throws ApiException {
        buildsCancelWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, buildId);
    }

    /**
     * 
     * Cancel an existing build.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> buildsCancelWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId) throws ApiException {
        okhttp3.Call localVarCall = buildsCancelValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancel an existing build.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsCancelAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsCancelValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsGet
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "buildId" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildsGet(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildsGet(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling buildsGet(Async)");
        }

        return buildsGetCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, _callback);

    }

    /**
     * 
     * Gets the detailed information for a given build.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public Build buildsGet(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId) throws ApiException {
        ApiResponse<Build> localVarResp = buildsGetWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, buildId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the detailed information for a given build.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> buildsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId) throws ApiException {
        okhttp3.Call localVarCall = buildsGetValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the detailed information for a given build.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsGetValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsGetLogLink
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetLogLinkCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}/getLogLink"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "buildId" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsGetLogLinkValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildsGetLogLink(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildsGetLogLink(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildsGetLogLink(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildsGetLogLink(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling buildsGetLogLink(Async)");
        }

        return buildsGetLogLinkCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, _callback);

    }

    /**
     * 
     * Gets a link to download the build logs.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @return BuildGetLogResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public BuildGetLogResult buildsGetLogLink(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId) throws ApiException {
        ApiResponse<BuildGetLogResult> localVarResp = buildsGetLogLinkWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, buildId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a link to download the build logs.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @return ApiResponse&lt;BuildGetLogResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildGetLogResult> buildsGetLogLinkWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId) throws ApiException {
        okhttp3.Call localVarCall = buildsGetLogLinkValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, null);
        Type localVarReturnType = new TypeToken<BuildGetLogResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a link to download the build logs.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetLogLinkAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, final ApiCallback<BuildGetLogResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsGetLogLinkValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, _callback);
        Type localVarReturnType = new TypeToken<BuildGetLogResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsList
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param $filter The builds filter to apply on the operation. (optional)
     * @param $top $top is supported for get list of builds, which limits the maximum number of builds to return. (optional)
     * @param $skipToken $skipToken is supported on get list of builds, which provides the next page in the list of builds. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsListCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildsList(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildsList(Async)");
        }

        return buildsListCall(subscriptionId, resourceGroupName, registryName, apiVersion, $filter, $top, $skipToken, _callback);

    }

    /**
     * 
     * Gets all the builds for a registry.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param $filter The builds filter to apply on the operation. (optional)
     * @param $top $top is supported for get list of builds, which limits the maximum number of builds to return. (optional)
     * @param $skipToken $skipToken is supported on get list of builds, which provides the next page in the list of builds. (optional)
     * @return BuildListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BuildListResult buildsList(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        ApiResponse<BuildListResult> localVarResp = buildsListWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, $filter, $top, $skipToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the builds for a registry.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param $filter The builds filter to apply on the operation. (optional)
     * @param $top $top is supported for get list of builds, which limits the maximum number of builds to return. (optional)
     * @param $skipToken $skipToken is supported on get list of builds, which provides the next page in the list of builds. (optional)
     * @return ApiResponse&lt;BuildListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildListResult> buildsListWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = buildsListValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, $filter, $top, $skipToken, null);
        Type localVarReturnType = new TypeToken<BuildListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the builds for a registry.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param $filter The builds filter to apply on the operation. (optional)
     * @param $top $top is supported for get list of builds, which limits the maximum number of builds to return. (optional)
     * @param $skipToken $skipToken is supported on get list of builds, which provides the next page in the list of builds. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsListAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback<BuildListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsListValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, $filter, $top, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<BuildListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsUpdate
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @param buildUpdateParameters The build update properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsUpdateCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, BuildUpdateParameters buildUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "buildId" + "}", localVarApiClient.escapeString(buildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, BuildUpdateParameters buildUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling buildsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling buildsUpdate(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling buildsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling buildsUpdate(Async)");
        }

        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling buildsUpdate(Async)");
        }

        // verify the required parameter 'buildUpdateParameters' is set
        if (buildUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'buildUpdateParameters' when calling buildsUpdate(Async)");
        }

        return buildsUpdateCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, buildUpdateParameters, _callback);

    }

    /**
     * 
     * Patch the build properties.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @param buildUpdateParameters The build update properties. (required)
     * @return Build
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public Build buildsUpdate(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, BuildUpdateParameters buildUpdateParameters) throws ApiException {
        ApiResponse<Build> localVarResp = buildsUpdateWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, buildUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Patch the build properties.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @param buildUpdateParameters The build update properties. (required)
     * @return ApiResponse&lt;Build&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Build> buildsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, BuildUpdateParameters buildUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = buildsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, buildUpdateParameters, null);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patch the build properties.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param buildId The build ID. (required)
     * @param buildUpdateParameters The build update properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/build doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsUpdateAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String buildId, BuildUpdateParameters buildUpdateParameters, final ApiCallback<Build> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, buildUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<Build>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
