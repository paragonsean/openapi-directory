/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageDescriptor::OAIImageDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageDescriptor::OAIImageDescriptor() {
    this->initializeModel();
}

OAIImageDescriptor::~OAIImageDescriptor() {}

void OAIImageDescriptor::initializeModel() {

    m_digest_isSet = false;
    m_digest_isValid = false;

    m_registry_isSet = false;
    m_registry_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAIImageDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageDescriptor::fromJsonObject(QJsonObject json) {

    m_digest_isValid = ::OpenAPI::fromJsonValue(m_digest, json[QString("digest")]);
    m_digest_isSet = !json[QString("digest")].isNull() && m_digest_isValid;

    m_registry_isValid = ::OpenAPI::fromJsonValue(m_registry, json[QString("registry")]);
    m_registry_isSet = !json[QString("registry")].isNull() && m_registry_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAIImageDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_digest_isSet) {
        obj.insert(QString("digest"), ::OpenAPI::toJsonValue(m_digest));
    }
    if (m_registry_isSet) {
        obj.insert(QString("registry"), ::OpenAPI::toJsonValue(m_registry));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QString OAIImageDescriptor::getDigest() const {
    return m_digest;
}
void OAIImageDescriptor::setDigest(const QString &digest) {
    m_digest = digest;
    m_digest_isSet = true;
}

bool OAIImageDescriptor::is_digest_Set() const{
    return m_digest_isSet;
}

bool OAIImageDescriptor::is_digest_Valid() const{
    return m_digest_isValid;
}

QString OAIImageDescriptor::getRegistry() const {
    return m_registry;
}
void OAIImageDescriptor::setRegistry(const QString &registry) {
    m_registry = registry;
    m_registry_isSet = true;
}

bool OAIImageDescriptor::is_registry_Set() const{
    return m_registry_isSet;
}

bool OAIImageDescriptor::is_registry_Valid() const{
    return m_registry_isValid;
}

QString OAIImageDescriptor::getRepository() const {
    return m_repository;
}
void OAIImageDescriptor::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIImageDescriptor::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIImageDescriptor::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIImageDescriptor::getTag() const {
    return m_tag;
}
void OAIImageDescriptor::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIImageDescriptor::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIImageDescriptor::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAIImageDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
