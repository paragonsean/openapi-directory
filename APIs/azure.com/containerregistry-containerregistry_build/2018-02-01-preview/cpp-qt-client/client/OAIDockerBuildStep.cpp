/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDockerBuildStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDockerBuildStep::OAIDockerBuildStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDockerBuildStep::OAIDockerBuildStep() {
    this->initializeModel();
}

OAIDockerBuildStep::~OAIDockerBuildStep() {}

void OAIDockerBuildStep::initializeModel() {

    m_base_image_dependencies_isSet = false;
    m_base_image_dependencies_isValid = false;

    m_base_image_trigger_isSet = false;
    m_base_image_trigger_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_build_arguments_isSet = false;
    m_build_arguments_isValid = false;

    m_context_path_isSet = false;
    m_context_path_isValid = false;

    m_docker_file_path_isSet = false;
    m_docker_file_path_isValid = false;

    m_image_names_isSet = false;
    m_image_names_isValid = false;

    m_is_push_enabled_isSet = false;
    m_is_push_enabled_isValid = false;

    m_no_cache_isSet = false;
    m_no_cache_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDockerBuildStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDockerBuildStep::fromJsonObject(QJsonObject json) {

    m_base_image_dependencies_isValid = ::OpenAPI::fromJsonValue(m_base_image_dependencies, json[QString("baseImageDependencies")]);
    m_base_image_dependencies_isSet = !json[QString("baseImageDependencies")].isNull() && m_base_image_dependencies_isValid;

    m_base_image_trigger_isValid = ::OpenAPI::fromJsonValue(m_base_image_trigger, json[QString("baseImageTrigger")]);
    m_base_image_trigger_isSet = !json[QString("baseImageTrigger")].isNull() && m_base_image_trigger_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_build_arguments_isValid = ::OpenAPI::fromJsonValue(m_build_arguments, json[QString("buildArguments")]);
    m_build_arguments_isSet = !json[QString("buildArguments")].isNull() && m_build_arguments_isValid;

    m_context_path_isValid = ::OpenAPI::fromJsonValue(m_context_path, json[QString("contextPath")]);
    m_context_path_isSet = !json[QString("contextPath")].isNull() && m_context_path_isValid;

    m_docker_file_path_isValid = ::OpenAPI::fromJsonValue(m_docker_file_path, json[QString("dockerFilePath")]);
    m_docker_file_path_isSet = !json[QString("dockerFilePath")].isNull() && m_docker_file_path_isValid;

    m_image_names_isValid = ::OpenAPI::fromJsonValue(m_image_names, json[QString("imageNames")]);
    m_image_names_isSet = !json[QString("imageNames")].isNull() && m_image_names_isValid;

    m_is_push_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_push_enabled, json[QString("isPushEnabled")]);
    m_is_push_enabled_isSet = !json[QString("isPushEnabled")].isNull() && m_is_push_enabled_isValid;

    m_no_cache_isValid = ::OpenAPI::fromJsonValue(m_no_cache, json[QString("noCache")]);
    m_no_cache_isSet = !json[QString("noCache")].isNull() && m_no_cache_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDockerBuildStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDockerBuildStep::asJsonObject() const {
    QJsonObject obj;
    if (m_base_image_dependencies.size() > 0) {
        obj.insert(QString("baseImageDependencies"), ::OpenAPI::toJsonValue(m_base_image_dependencies));
    }
    if (m_base_image_trigger_isSet) {
        obj.insert(QString("baseImageTrigger"), ::OpenAPI::toJsonValue(m_base_image_trigger));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_build_arguments.size() > 0) {
        obj.insert(QString("buildArguments"), ::OpenAPI::toJsonValue(m_build_arguments));
    }
    if (m_context_path_isSet) {
        obj.insert(QString("contextPath"), ::OpenAPI::toJsonValue(m_context_path));
    }
    if (m_docker_file_path_isSet) {
        obj.insert(QString("dockerFilePath"), ::OpenAPI::toJsonValue(m_docker_file_path));
    }
    if (m_image_names.size() > 0) {
        obj.insert(QString("imageNames"), ::OpenAPI::toJsonValue(m_image_names));
    }
    if (m_is_push_enabled_isSet) {
        obj.insert(QString("isPushEnabled"), ::OpenAPI::toJsonValue(m_is_push_enabled));
    }
    if (m_no_cache_isSet) {
        obj.insert(QString("noCache"), ::OpenAPI::toJsonValue(m_no_cache));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIBaseImageDependency> OAIDockerBuildStep::getBaseImageDependencies() const {
    return m_base_image_dependencies;
}
void OAIDockerBuildStep::setBaseImageDependencies(const QList<OAIBaseImageDependency> &base_image_dependencies) {
    m_base_image_dependencies = base_image_dependencies;
    m_base_image_dependencies_isSet = true;
}

bool OAIDockerBuildStep::is_base_image_dependencies_Set() const{
    return m_base_image_dependencies_isSet;
}

bool OAIDockerBuildStep::is_base_image_dependencies_Valid() const{
    return m_base_image_dependencies_isValid;
}

QString OAIDockerBuildStep::getBaseImageTrigger() const {
    return m_base_image_trigger;
}
void OAIDockerBuildStep::setBaseImageTrigger(const QString &base_image_trigger) {
    m_base_image_trigger = base_image_trigger;
    m_base_image_trigger_isSet = true;
}

bool OAIDockerBuildStep::is_base_image_trigger_Set() const{
    return m_base_image_trigger_isSet;
}

bool OAIDockerBuildStep::is_base_image_trigger_Valid() const{
    return m_base_image_trigger_isValid;
}

QString OAIDockerBuildStep::getBranch() const {
    return m_branch;
}
void OAIDockerBuildStep::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIDockerBuildStep::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIDockerBuildStep::is_branch_Valid() const{
    return m_branch_isValid;
}

QList<OAIBuildArgument> OAIDockerBuildStep::getBuildArguments() const {
    return m_build_arguments;
}
void OAIDockerBuildStep::setBuildArguments(const QList<OAIBuildArgument> &build_arguments) {
    m_build_arguments = build_arguments;
    m_build_arguments_isSet = true;
}

bool OAIDockerBuildStep::is_build_arguments_Set() const{
    return m_build_arguments_isSet;
}

bool OAIDockerBuildStep::is_build_arguments_Valid() const{
    return m_build_arguments_isValid;
}

QString OAIDockerBuildStep::getContextPath() const {
    return m_context_path;
}
void OAIDockerBuildStep::setContextPath(const QString &context_path) {
    m_context_path = context_path;
    m_context_path_isSet = true;
}

bool OAIDockerBuildStep::is_context_path_Set() const{
    return m_context_path_isSet;
}

bool OAIDockerBuildStep::is_context_path_Valid() const{
    return m_context_path_isValid;
}

QString OAIDockerBuildStep::getDockerFilePath() const {
    return m_docker_file_path;
}
void OAIDockerBuildStep::setDockerFilePath(const QString &docker_file_path) {
    m_docker_file_path = docker_file_path;
    m_docker_file_path_isSet = true;
}

bool OAIDockerBuildStep::is_docker_file_path_Set() const{
    return m_docker_file_path_isSet;
}

bool OAIDockerBuildStep::is_docker_file_path_Valid() const{
    return m_docker_file_path_isValid;
}

QList<QString> OAIDockerBuildStep::getImageNames() const {
    return m_image_names;
}
void OAIDockerBuildStep::setImageNames(const QList<QString> &image_names) {
    m_image_names = image_names;
    m_image_names_isSet = true;
}

bool OAIDockerBuildStep::is_image_names_Set() const{
    return m_image_names_isSet;
}

bool OAIDockerBuildStep::is_image_names_Valid() const{
    return m_image_names_isValid;
}

bool OAIDockerBuildStep::isIsPushEnabled() const {
    return m_is_push_enabled;
}
void OAIDockerBuildStep::setIsPushEnabled(const bool &is_push_enabled) {
    m_is_push_enabled = is_push_enabled;
    m_is_push_enabled_isSet = true;
}

bool OAIDockerBuildStep::is_is_push_enabled_Set() const{
    return m_is_push_enabled_isSet;
}

bool OAIDockerBuildStep::is_is_push_enabled_Valid() const{
    return m_is_push_enabled_isValid;
}

bool OAIDockerBuildStep::isNoCache() const {
    return m_no_cache;
}
void OAIDockerBuildStep::setNoCache(const bool &no_cache) {
    m_no_cache = no_cache;
    m_no_cache_isSet = true;
}

bool OAIDockerBuildStep::is_no_cache_Set() const{
    return m_no_cache_isSet;
}

bool OAIDockerBuildStep::is_no_cache_Valid() const{
    return m_no_cache_isValid;
}

QString OAIDockerBuildStep::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDockerBuildStep::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDockerBuildStep::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDockerBuildStep::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIDockerBuildStep::getType() const {
    return m_type;
}
void OAIDockerBuildStep::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDockerBuildStep::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDockerBuildStep::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDockerBuildStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_image_dependencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_image_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_push_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDockerBuildStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
