/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceRepositoryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceRepositoryProperties::OAISourceRepositoryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceRepositoryProperties::OAISourceRepositoryProperties() {
    this->initializeModel();
}

OAISourceRepositoryProperties::~OAISourceRepositoryProperties() {}

void OAISourceRepositoryProperties::initializeModel() {

    m_is_commit_trigger_enabled_isSet = false;
    m_is_commit_trigger_enabled_isValid = false;

    m_repository_url_isSet = false;
    m_repository_url_isValid = false;

    m_source_control_auth_properties_isSet = false;
    m_source_control_auth_properties_isValid = false;

    m_source_control_type_isSet = false;
    m_source_control_type_isValid = false;
}

void OAISourceRepositoryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceRepositoryProperties::fromJsonObject(QJsonObject json) {

    m_is_commit_trigger_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_commit_trigger_enabled, json[QString("isCommitTriggerEnabled")]);
    m_is_commit_trigger_enabled_isSet = !json[QString("isCommitTriggerEnabled")].isNull() && m_is_commit_trigger_enabled_isValid;

    m_repository_url_isValid = ::OpenAPI::fromJsonValue(m_repository_url, json[QString("repositoryUrl")]);
    m_repository_url_isSet = !json[QString("repositoryUrl")].isNull() && m_repository_url_isValid;

    m_source_control_auth_properties_isValid = ::OpenAPI::fromJsonValue(m_source_control_auth_properties, json[QString("sourceControlAuthProperties")]);
    m_source_control_auth_properties_isSet = !json[QString("sourceControlAuthProperties")].isNull() && m_source_control_auth_properties_isValid;

    m_source_control_type_isValid = ::OpenAPI::fromJsonValue(m_source_control_type, json[QString("sourceControlType")]);
    m_source_control_type_isSet = !json[QString("sourceControlType")].isNull() && m_source_control_type_isValid;
}

QString OAISourceRepositoryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceRepositoryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_is_commit_trigger_enabled_isSet) {
        obj.insert(QString("isCommitTriggerEnabled"), ::OpenAPI::toJsonValue(m_is_commit_trigger_enabled));
    }
    if (m_repository_url_isSet) {
        obj.insert(QString("repositoryUrl"), ::OpenAPI::toJsonValue(m_repository_url));
    }
    if (m_source_control_auth_properties.isSet()) {
        obj.insert(QString("sourceControlAuthProperties"), ::OpenAPI::toJsonValue(m_source_control_auth_properties));
    }
    if (m_source_control_type_isSet) {
        obj.insert(QString("sourceControlType"), ::OpenAPI::toJsonValue(m_source_control_type));
    }
    return obj;
}

bool OAISourceRepositoryProperties::isIsCommitTriggerEnabled() const {
    return m_is_commit_trigger_enabled;
}
void OAISourceRepositoryProperties::setIsCommitTriggerEnabled(const bool &is_commit_trigger_enabled) {
    m_is_commit_trigger_enabled = is_commit_trigger_enabled;
    m_is_commit_trigger_enabled_isSet = true;
}

bool OAISourceRepositoryProperties::is_is_commit_trigger_enabled_Set() const{
    return m_is_commit_trigger_enabled_isSet;
}

bool OAISourceRepositoryProperties::is_is_commit_trigger_enabled_Valid() const{
    return m_is_commit_trigger_enabled_isValid;
}

QString OAISourceRepositoryProperties::getRepositoryUrl() const {
    return m_repository_url;
}
void OAISourceRepositoryProperties::setRepositoryUrl(const QString &repository_url) {
    m_repository_url = repository_url;
    m_repository_url_isSet = true;
}

bool OAISourceRepositoryProperties::is_repository_url_Set() const{
    return m_repository_url_isSet;
}

bool OAISourceRepositoryProperties::is_repository_url_Valid() const{
    return m_repository_url_isValid;
}

OAISourceControlAuthInfo OAISourceRepositoryProperties::getSourceControlAuthProperties() const {
    return m_source_control_auth_properties;
}
void OAISourceRepositoryProperties::setSourceControlAuthProperties(const OAISourceControlAuthInfo &source_control_auth_properties) {
    m_source_control_auth_properties = source_control_auth_properties;
    m_source_control_auth_properties_isSet = true;
}

bool OAISourceRepositoryProperties::is_source_control_auth_properties_Set() const{
    return m_source_control_auth_properties_isSet;
}

bool OAISourceRepositoryProperties::is_source_control_auth_properties_Valid() const{
    return m_source_control_auth_properties_isValid;
}

QString OAISourceRepositoryProperties::getSourceControlType() const {
    return m_source_control_type;
}
void OAISourceRepositoryProperties::setSourceControlType(const QString &source_control_type) {
    m_source_control_type = source_control_type;
    m_source_control_type_isSet = true;
}

bool OAISourceRepositoryProperties::is_source_control_type_Set() const{
    return m_source_control_type_isSet;
}

bool OAISourceRepositoryProperties::is_source_control_type_Valid() const{
    return m_source_control_type_isValid;
}

bool OAISourceRepositoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_commit_trigger_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_control_auth_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_control_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceRepositoryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_url_isValid && m_source_control_type_isValid && true;
}

} // namespace OpenAPI
