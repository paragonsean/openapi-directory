/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildFilter::OAIBuildFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildFilter::OAIBuildFilter() {
    this->initializeModel();
}

OAIBuildFilter::~OAIBuildFilter() {}

void OAIBuildFilter::initializeModel() {

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_build_task_name_isSet = false;
    m_build_task_name_isValid = false;

    m_build_type_isSet = false;
    m_build_type_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_is_archive_enabled_isSet = false;
    m_is_archive_enabled_isValid = false;

    m_output_image_manifests_isSet = false;
    m_output_image_manifests_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBuildFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildFilter::fromJsonObject(QJsonObject json) {

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("buildId")]);
    m_build_id_isSet = !json[QString("buildId")].isNull() && m_build_id_isValid;

    m_build_task_name_isValid = ::OpenAPI::fromJsonValue(m_build_task_name, json[QString("buildTaskName")]);
    m_build_task_name_isSet = !json[QString("buildTaskName")].isNull() && m_build_task_name_isValid;

    m_build_type_isValid = ::OpenAPI::fromJsonValue(m_build_type, json[QString("buildType")]);
    m_build_type_isSet = !json[QString("buildType")].isNull() && m_build_type_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("finishTime")]);
    m_finish_time_isSet = !json[QString("finishTime")].isNull() && m_finish_time_isValid;

    m_is_archive_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_archive_enabled, json[QString("isArchiveEnabled")]);
    m_is_archive_enabled_isSet = !json[QString("isArchiveEnabled")].isNull() && m_is_archive_enabled_isValid;

    m_output_image_manifests_isValid = ::OpenAPI::fromJsonValue(m_output_image_manifests, json[QString("outputImageManifests")]);
    m_output_image_manifests_isSet = !json[QString("outputImageManifests")].isNull() && m_output_image_manifests_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBuildFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_build_id_isSet) {
        obj.insert(QString("buildId"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_build_task_name_isSet) {
        obj.insert(QString("buildTaskName"), ::OpenAPI::toJsonValue(m_build_task_name));
    }
    if (m_build_type_isSet) {
        obj.insert(QString("buildType"), ::OpenAPI::toJsonValue(m_build_type));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_finish_time_isSet) {
        obj.insert(QString("finishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_is_archive_enabled_isSet) {
        obj.insert(QString("isArchiveEnabled"), ::OpenAPI::toJsonValue(m_is_archive_enabled));
    }
    if (m_output_image_manifests_isSet) {
        obj.insert(QString("outputImageManifests"), ::OpenAPI::toJsonValue(m_output_image_manifests));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIBuildFilter::getBuildId() const {
    return m_build_id;
}
void OAIBuildFilter::setBuildId(const QString &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAIBuildFilter::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAIBuildFilter::is_build_id_Valid() const{
    return m_build_id_isValid;
}

QString OAIBuildFilter::getBuildTaskName() const {
    return m_build_task_name;
}
void OAIBuildFilter::setBuildTaskName(const QString &build_task_name) {
    m_build_task_name = build_task_name;
    m_build_task_name_isSet = true;
}

bool OAIBuildFilter::is_build_task_name_Set() const{
    return m_build_task_name_isSet;
}

bool OAIBuildFilter::is_build_task_name_Valid() const{
    return m_build_task_name_isValid;
}

QString OAIBuildFilter::getBuildType() const {
    return m_build_type;
}
void OAIBuildFilter::setBuildType(const QString &build_type) {
    m_build_type = build_type;
    m_build_type_isSet = true;
}

bool OAIBuildFilter::is_build_type_Set() const{
    return m_build_type_isSet;
}

bool OAIBuildFilter::is_build_type_Valid() const{
    return m_build_type_isValid;
}

QDateTime OAIBuildFilter::getCreateTime() const {
    return m_create_time;
}
void OAIBuildFilter::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBuildFilter::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBuildFilter::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAIBuildFilter::getFinishTime() const {
    return m_finish_time;
}
void OAIBuildFilter::setFinishTime(const QDateTime &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAIBuildFilter::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAIBuildFilter::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

bool OAIBuildFilter::isIsArchiveEnabled() const {
    return m_is_archive_enabled;
}
void OAIBuildFilter::setIsArchiveEnabled(const bool &is_archive_enabled) {
    m_is_archive_enabled = is_archive_enabled;
    m_is_archive_enabled_isSet = true;
}

bool OAIBuildFilter::is_is_archive_enabled_Set() const{
    return m_is_archive_enabled_isSet;
}

bool OAIBuildFilter::is_is_archive_enabled_Valid() const{
    return m_is_archive_enabled_isValid;
}

QString OAIBuildFilter::getOutputImageManifests() const {
    return m_output_image_manifests;
}
void OAIBuildFilter::setOutputImageManifests(const QString &output_image_manifests) {
    m_output_image_manifests = output_image_manifests;
    m_output_image_manifests_isSet = true;
}

bool OAIBuildFilter::is_output_image_manifests_Set() const{
    return m_output_image_manifests_isSet;
}

bool OAIBuildFilter::is_output_image_manifests_Valid() const{
    return m_output_image_manifests_isValid;
}

QString OAIBuildFilter::getStatus() const {
    return m_status;
}
void OAIBuildFilter::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuildFilter::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuildFilter::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBuildFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_task_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archive_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_image_manifests_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
