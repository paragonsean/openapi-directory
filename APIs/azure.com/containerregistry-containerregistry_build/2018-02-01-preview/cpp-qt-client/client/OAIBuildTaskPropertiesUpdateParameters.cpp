/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildTaskPropertiesUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildTaskPropertiesUpdateParameters::OAIBuildTaskPropertiesUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildTaskPropertiesUpdateParameters::OAIBuildTaskPropertiesUpdateParameters() {
    this->initializeModel();
}

OAIBuildTaskPropertiesUpdateParameters::~OAIBuildTaskPropertiesUpdateParameters() {}

void OAIBuildTaskPropertiesUpdateParameters::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_source_repository_isSet = false;
    m_source_repository_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIBuildTaskPropertiesUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildTaskPropertiesUpdateParameters::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_source_repository_isValid = ::OpenAPI::fromJsonValue(m_source_repository, json[QString("sourceRepository")]);
    m_source_repository_isSet = !json[QString("sourceRepository")].isNull() && m_source_repository_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIBuildTaskPropertiesUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildTaskPropertiesUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_source_repository.isSet()) {
        obj.insert(QString("sourceRepository"), ::OpenAPI::toJsonValue(m_source_repository));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAIBuildTaskPropertiesUpdateParameters::getAlias() const {
    return m_alias;
}
void OAIBuildTaskPropertiesUpdateParameters::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIBuildTaskPropertiesUpdateParameters::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIBuildTaskPropertiesUpdateParameters::is_alias_Valid() const{
    return m_alias_isValid;
}

OAIPlatformProperties OAIBuildTaskPropertiesUpdateParameters::getPlatform() const {
    return m_platform;
}
void OAIBuildTaskPropertiesUpdateParameters::setPlatform(const OAIPlatformProperties &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIBuildTaskPropertiesUpdateParameters::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIBuildTaskPropertiesUpdateParameters::is_platform_Valid() const{
    return m_platform_isValid;
}

OAISourceRepositoryUpdateParameters OAIBuildTaskPropertiesUpdateParameters::getSourceRepository() const {
    return m_source_repository;
}
void OAIBuildTaskPropertiesUpdateParameters::setSourceRepository(const OAISourceRepositoryUpdateParameters &source_repository) {
    m_source_repository = source_repository;
    m_source_repository_isSet = true;
}

bool OAIBuildTaskPropertiesUpdateParameters::is_source_repository_Set() const{
    return m_source_repository_isSet;
}

bool OAIBuildTaskPropertiesUpdateParameters::is_source_repository_Valid() const{
    return m_source_repository_isValid;
}

QString OAIBuildTaskPropertiesUpdateParameters::getStatus() const {
    return m_status;
}
void OAIBuildTaskPropertiesUpdateParameters::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuildTaskPropertiesUpdateParameters::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuildTaskPropertiesUpdateParameters::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIBuildTaskPropertiesUpdateParameters::getTimeout() const {
    return m_timeout;
}
void OAIBuildTaskPropertiesUpdateParameters::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIBuildTaskPropertiesUpdateParameters::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIBuildTaskPropertiesUpdateParameters::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIBuildTaskPropertiesUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildTaskPropertiesUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
