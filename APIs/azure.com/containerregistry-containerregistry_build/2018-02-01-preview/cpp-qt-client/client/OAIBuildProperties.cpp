/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildProperties::OAIBuildProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildProperties::OAIBuildProperties() {
    this->initializeModel();
}

OAIBuildProperties::~OAIBuildProperties() {}

void OAIBuildProperties::initializeModel() {

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_build_task_isSet = false;
    m_build_task_isValid = false;

    m_build_type_isSet = false;
    m_build_type_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_git_commit_trigger_isSet = false;
    m_git_commit_trigger_isValid = false;

    m_image_update_trigger_isSet = false;
    m_image_update_trigger_isValid = false;

    m_is_archive_enabled_isSet = false;
    m_is_archive_enabled_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_output_images_isSet = false;
    m_output_images_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBuildProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildProperties::fromJsonObject(QJsonObject json) {

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("buildId")]);
    m_build_id_isSet = !json[QString("buildId")].isNull() && m_build_id_isValid;

    m_build_task_isValid = ::OpenAPI::fromJsonValue(m_build_task, json[QString("buildTask")]);
    m_build_task_isSet = !json[QString("buildTask")].isNull() && m_build_task_isValid;

    m_build_type_isValid = ::OpenAPI::fromJsonValue(m_build_type, json[QString("buildType")]);
    m_build_type_isSet = !json[QString("buildType")].isNull() && m_build_type_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("finishTime")]);
    m_finish_time_isSet = !json[QString("finishTime")].isNull() && m_finish_time_isValid;

    m_git_commit_trigger_isValid = ::OpenAPI::fromJsonValue(m_git_commit_trigger, json[QString("gitCommitTrigger")]);
    m_git_commit_trigger_isSet = !json[QString("gitCommitTrigger")].isNull() && m_git_commit_trigger_isValid;

    m_image_update_trigger_isValid = ::OpenAPI::fromJsonValue(m_image_update_trigger, json[QString("imageUpdateTrigger")]);
    m_image_update_trigger_isSet = !json[QString("imageUpdateTrigger")].isNull() && m_image_update_trigger_isValid;

    m_is_archive_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_archive_enabled, json[QString("isArchiveEnabled")]);
    m_is_archive_enabled_isSet = !json[QString("isArchiveEnabled")].isNull() && m_is_archive_enabled_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_output_images_isValid = ::OpenAPI::fromJsonValue(m_output_images, json[QString("outputImages")]);
    m_output_images_isSet = !json[QString("outputImages")].isNull() && m_output_images_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBuildProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_build_id_isSet) {
        obj.insert(QString("buildId"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_build_task_isSet) {
        obj.insert(QString("buildTask"), ::OpenAPI::toJsonValue(m_build_task));
    }
    if (m_build_type_isSet) {
        obj.insert(QString("buildType"), ::OpenAPI::toJsonValue(m_build_type));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_finish_time_isSet) {
        obj.insert(QString("finishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_git_commit_trigger.isSet()) {
        obj.insert(QString("gitCommitTrigger"), ::OpenAPI::toJsonValue(m_git_commit_trigger));
    }
    if (m_image_update_trigger.isSet()) {
        obj.insert(QString("imageUpdateTrigger"), ::OpenAPI::toJsonValue(m_image_update_trigger));
    }
    if (m_is_archive_enabled_isSet) {
        obj.insert(QString("isArchiveEnabled"), ::OpenAPI::toJsonValue(m_is_archive_enabled));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_output_images.size() > 0) {
        obj.insert(QString("outputImages"), ::OpenAPI::toJsonValue(m_output_images));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIBuildProperties::getBuildId() const {
    return m_build_id;
}
void OAIBuildProperties::setBuildId(const QString &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAIBuildProperties::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAIBuildProperties::is_build_id_Valid() const{
    return m_build_id_isValid;
}

QString OAIBuildProperties::getBuildTask() const {
    return m_build_task;
}
void OAIBuildProperties::setBuildTask(const QString &build_task) {
    m_build_task = build_task;
    m_build_task_isSet = true;
}

bool OAIBuildProperties::is_build_task_Set() const{
    return m_build_task_isSet;
}

bool OAIBuildProperties::is_build_task_Valid() const{
    return m_build_task_isValid;
}

QString OAIBuildProperties::getBuildType() const {
    return m_build_type;
}
void OAIBuildProperties::setBuildType(const QString &build_type) {
    m_build_type = build_type;
    m_build_type_isSet = true;
}

bool OAIBuildProperties::is_build_type_Set() const{
    return m_build_type_isSet;
}

bool OAIBuildProperties::is_build_type_Valid() const{
    return m_build_type_isValid;
}

QDateTime OAIBuildProperties::getCreateTime() const {
    return m_create_time;
}
void OAIBuildProperties::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBuildProperties::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBuildProperties::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAIBuildProperties::getFinishTime() const {
    return m_finish_time;
}
void OAIBuildProperties::setFinishTime(const QDateTime &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAIBuildProperties::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAIBuildProperties::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

OAIGitCommitTrigger OAIBuildProperties::getGitCommitTrigger() const {
    return m_git_commit_trigger;
}
void OAIBuildProperties::setGitCommitTrigger(const OAIGitCommitTrigger &git_commit_trigger) {
    m_git_commit_trigger = git_commit_trigger;
    m_git_commit_trigger_isSet = true;
}

bool OAIBuildProperties::is_git_commit_trigger_Set() const{
    return m_git_commit_trigger_isSet;
}

bool OAIBuildProperties::is_git_commit_trigger_Valid() const{
    return m_git_commit_trigger_isValid;
}

OAIImageUpdateTrigger OAIBuildProperties::getImageUpdateTrigger() const {
    return m_image_update_trigger;
}
void OAIBuildProperties::setImageUpdateTrigger(const OAIImageUpdateTrigger &image_update_trigger) {
    m_image_update_trigger = image_update_trigger;
    m_image_update_trigger_isSet = true;
}

bool OAIBuildProperties::is_image_update_trigger_Set() const{
    return m_image_update_trigger_isSet;
}

bool OAIBuildProperties::is_image_update_trigger_Valid() const{
    return m_image_update_trigger_isValid;
}

bool OAIBuildProperties::isIsArchiveEnabled() const {
    return m_is_archive_enabled;
}
void OAIBuildProperties::setIsArchiveEnabled(const bool &is_archive_enabled) {
    m_is_archive_enabled = is_archive_enabled;
    m_is_archive_enabled_isSet = true;
}

bool OAIBuildProperties::is_is_archive_enabled_Set() const{
    return m_is_archive_enabled_isSet;
}

bool OAIBuildProperties::is_is_archive_enabled_Valid() const{
    return m_is_archive_enabled_isValid;
}

QDateTime OAIBuildProperties::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIBuildProperties::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIBuildProperties::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIBuildProperties::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QList<OAIImageDescriptor> OAIBuildProperties::getOutputImages() const {
    return m_output_images;
}
void OAIBuildProperties::setOutputImages(const QList<OAIImageDescriptor> &output_images) {
    m_output_images = output_images;
    m_output_images_isSet = true;
}

bool OAIBuildProperties::is_output_images_Set() const{
    return m_output_images_isSet;
}

bool OAIBuildProperties::is_output_images_Valid() const{
    return m_output_images_isValid;
}

OAIPlatformProperties OAIBuildProperties::getPlatform() const {
    return m_platform;
}
void OAIBuildProperties::setPlatform(const OAIPlatformProperties &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIBuildProperties::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIBuildProperties::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIBuildProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIBuildProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIBuildProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIBuildProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QDateTime OAIBuildProperties::getStartTime() const {
    return m_start_time;
}
void OAIBuildProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBuildProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBuildProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIBuildProperties::getStatus() const {
    return m_status;
}
void OAIBuildProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuildProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuildProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBuildProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_task_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_commit_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_update_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archive_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
