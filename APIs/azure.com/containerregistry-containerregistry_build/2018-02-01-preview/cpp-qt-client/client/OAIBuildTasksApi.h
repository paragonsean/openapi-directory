/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBuildTasksApi_H
#define OAI_OAIBuildTasksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBuildTask.h"
#include "OAIBuildTaskListResult.h"
#include "OAIBuildTaskUpdateParameters.h"
#include "OAISourceRepositoryProperties.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBuildTasksApi : public QObject {
    Q_OBJECT

public:
    OAIBuildTasksApi(const int timeOut = 0);
    ~OAIBuildTasksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    * @param[in]  build_task_create_parameters OAIBuildTask [required]
    */
    virtual void buildTasksCreate(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name, const OAIBuildTask &build_task_create_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    */
    virtual void buildTasksDelete(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    */
    virtual void buildTasksGet(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  skip_token QString [optional]
    */
    virtual void buildTasksList(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    */
    virtual void buildTasksListSourceRepositoryProperties(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    * @param[in]  build_task_update_parameters OAIBuildTaskUpdateParameters [required]
    */
    virtual void buildTasksUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name, const OAIBuildTaskUpdateParameters &build_task_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void buildTasksCreateCallback(OAIHttpRequestWorker *worker);
    void buildTasksDeleteCallback(OAIHttpRequestWorker *worker);
    void buildTasksGetCallback(OAIHttpRequestWorker *worker);
    void buildTasksListCallback(OAIHttpRequestWorker *worker);
    void buildTasksListSourceRepositoryPropertiesCallback(OAIHttpRequestWorker *worker);
    void buildTasksUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void buildTasksCreateSignal(OAIBuildTask summary);
    void buildTasksDeleteSignal();
    void buildTasksGetSignal(OAIBuildTask summary);
    void buildTasksListSignal(OAIBuildTaskListResult summary);
    void buildTasksListSourceRepositoryPropertiesSignal(OAISourceRepositoryProperties summary);
    void buildTasksUpdateSignal(OAIBuildTask summary);


    void buildTasksCreateSignalFull(OAIHttpRequestWorker *worker, OAIBuildTask summary);
    void buildTasksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void buildTasksGetSignalFull(OAIHttpRequestWorker *worker, OAIBuildTask summary);
    void buildTasksListSignalFull(OAIHttpRequestWorker *worker, OAIBuildTaskListResult summary);
    void buildTasksListSourceRepositoryPropertiesSignalFull(OAIHttpRequestWorker *worker, OAISourceRepositoryProperties summary);
    void buildTasksUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBuildTask summary);

    Q_DECL_DEPRECATED_X("Use buildTasksCreateSignalError() instead")
    void buildTasksCreateSignalE(OAIBuildTask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksCreateSignalError(OAIBuildTask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildTasksDeleteSignalError() instead")
    void buildTasksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildTasksGetSignalError() instead")
    void buildTasksGetSignalE(OAIBuildTask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksGetSignalError(OAIBuildTask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildTasksListSignalError() instead")
    void buildTasksListSignalE(OAIBuildTaskListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksListSignalError(OAIBuildTaskListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildTasksListSourceRepositoryPropertiesSignalError() instead")
    void buildTasksListSourceRepositoryPropertiesSignalE(OAISourceRepositoryProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksListSourceRepositoryPropertiesSignalError(OAISourceRepositoryProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildTasksUpdateSignalError() instead")
    void buildTasksUpdateSignalE(OAIBuildTask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksUpdateSignalError(OAIBuildTask summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use buildTasksCreateSignalErrorFull() instead")
    void buildTasksCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildTasksDeleteSignalErrorFull() instead")
    void buildTasksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildTasksGetSignalErrorFull() instead")
    void buildTasksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildTasksListSignalErrorFull() instead")
    void buildTasksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildTasksListSourceRepositoryPropertiesSignalErrorFull() instead")
    void buildTasksListSourceRepositoryPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksListSourceRepositoryPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildTasksUpdateSignalErrorFull() instead")
    void buildTasksUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildTasksUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
