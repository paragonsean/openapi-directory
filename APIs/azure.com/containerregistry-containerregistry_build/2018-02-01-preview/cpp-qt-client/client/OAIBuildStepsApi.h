/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBuildStepsApi_H
#define OAI_OAIBuildStepsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBuildArgumentList.h"
#include "OAIBuildStep.h"
#include "OAIBuildStepList.h"
#include "OAIBuildStepUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBuildStepsApi : public QObject {
    Q_OBJECT

public:
    OAIBuildStepsApi(const int timeOut = 0);
    ~OAIBuildStepsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    * @param[in]  step_name QString [required]
    * @param[in]  build_step_create_parameters OAIBuildStep [required]
    */
    virtual void buildStepsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name, const QString &step_name, const OAIBuildStep &build_step_create_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    * @param[in]  step_name QString [required]
    */
    virtual void buildStepsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name, const QString &step_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    * @param[in]  step_name QString [required]
    */
    virtual void buildStepsGet(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name, const QString &step_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    */
    virtual void buildStepsList(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    * @param[in]  step_name QString [required]
    */
    virtual void buildStepsListBuildArguments(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name, const QString &step_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  build_task_name QString [required]
    * @param[in]  step_name QString [required]
    * @param[in]  build_step_update_parameters OAIBuildStepUpdateParameters [required]
    */
    virtual void buildStepsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &build_task_name, const QString &step_name, const OAIBuildStepUpdateParameters &build_step_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void buildStepsCreateCallback(OAIHttpRequestWorker *worker);
    void buildStepsDeleteCallback(OAIHttpRequestWorker *worker);
    void buildStepsGetCallback(OAIHttpRequestWorker *worker);
    void buildStepsListCallback(OAIHttpRequestWorker *worker);
    void buildStepsListBuildArgumentsCallback(OAIHttpRequestWorker *worker);
    void buildStepsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void buildStepsCreateSignal(OAIBuildStep summary);
    void buildStepsDeleteSignal();
    void buildStepsGetSignal(OAIBuildStep summary);
    void buildStepsListSignal(OAIBuildStepList summary);
    void buildStepsListBuildArgumentsSignal(OAIBuildArgumentList summary);
    void buildStepsUpdateSignal(OAIBuildStep summary);


    void buildStepsCreateSignalFull(OAIHttpRequestWorker *worker, OAIBuildStep summary);
    void buildStepsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void buildStepsGetSignalFull(OAIHttpRequestWorker *worker, OAIBuildStep summary);
    void buildStepsListSignalFull(OAIHttpRequestWorker *worker, OAIBuildStepList summary);
    void buildStepsListBuildArgumentsSignalFull(OAIHttpRequestWorker *worker, OAIBuildArgumentList summary);
    void buildStepsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBuildStep summary);

    Q_DECL_DEPRECATED_X("Use buildStepsCreateSignalError() instead")
    void buildStepsCreateSignalE(OAIBuildStep summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsCreateSignalError(OAIBuildStep summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildStepsDeleteSignalError() instead")
    void buildStepsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildStepsGetSignalError() instead")
    void buildStepsGetSignalE(OAIBuildStep summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsGetSignalError(OAIBuildStep summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildStepsListSignalError() instead")
    void buildStepsListSignalE(OAIBuildStepList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsListSignalError(OAIBuildStepList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildStepsListBuildArgumentsSignalError() instead")
    void buildStepsListBuildArgumentsSignalE(OAIBuildArgumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsListBuildArgumentsSignalError(OAIBuildArgumentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildStepsUpdateSignalError() instead")
    void buildStepsUpdateSignalE(OAIBuildStep summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsUpdateSignalError(OAIBuildStep summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use buildStepsCreateSignalErrorFull() instead")
    void buildStepsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildStepsDeleteSignalErrorFull() instead")
    void buildStepsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildStepsGetSignalErrorFull() instead")
    void buildStepsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildStepsListSignalErrorFull() instead")
    void buildStepsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildStepsListBuildArgumentsSignalErrorFull() instead")
    void buildStepsListBuildArgumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsListBuildArgumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildStepsUpdateSignalErrorFull() instead")
    void buildStepsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildStepsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
