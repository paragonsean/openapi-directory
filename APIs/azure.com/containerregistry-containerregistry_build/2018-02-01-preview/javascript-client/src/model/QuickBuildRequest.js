/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildArgument from './BuildArgument';
import PlatformProperties from './PlatformProperties';
import QueueBuildRequest from './QueueBuildRequest';

/**
 * The QuickBuildRequest model module.
 * @module model/QuickBuildRequest
 * @version 2018-02-01-preview
 */
class QuickBuildRequest {
    /**
     * Constructs a new <code>QuickBuildRequest</code>.
     * The queue build request parameters for a quick build.
     * @alias module:model/QuickBuildRequest
     * @extends module:model/QueueBuildRequest
     * @implements module:model/QueueBuildRequest
     */
    constructor() { 
        QueueBuildRequest.initialize(this);
        QuickBuildRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['dockerFilePath'] = dockerFilePath;
        obj['isPushEnabled'] = true;
        obj['noCache'] = false;
        obj['platform'] = platform;
        obj['sourceLocation'] = sourceLocation;
        obj['timeout'] = 3600;
    }

    /**
     * Constructs a <code>QuickBuildRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuickBuildRequest} obj Optional instance to populate.
     * @return {module:model/QuickBuildRequest} The populated <code>QuickBuildRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuickBuildRequest();
            QueueBuildRequest.constructFromObject(data, obj);
            QueueBuildRequest.constructFromObject(data, obj);

            if (data.hasOwnProperty('buildArguments')) {
                obj['buildArguments'] = ApiClient.convertToType(data['buildArguments'], [BuildArgument]);
            }
            if (data.hasOwnProperty('dockerFilePath')) {
                obj['dockerFilePath'] = ApiClient.convertToType(data['dockerFilePath'], 'String');
            }
            if (data.hasOwnProperty('imageNames')) {
                obj['imageNames'] = ApiClient.convertToType(data['imageNames'], ['String']);
            }
            if (data.hasOwnProperty('isPushEnabled')) {
                obj['isPushEnabled'] = ApiClient.convertToType(data['isPushEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('noCache')) {
                obj['noCache'] = ApiClient.convertToType(data['noCache'], 'Boolean');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = PlatformProperties.constructFromObject(data['platform']);
            }
            if (data.hasOwnProperty('sourceLocation')) {
                obj['sourceLocation'] = ApiClient.convertToType(data['sourceLocation'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuickBuildRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuickBuildRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QuickBuildRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['buildArguments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['buildArguments'])) {
                throw new Error("Expected the field `buildArguments` to be an array in the JSON data but got " + data['buildArguments']);
            }
            // validate the optional field `buildArguments` (array)
            for (const item of data['buildArguments']) {
                BuildArgument.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dockerFilePath'] && !(typeof data['dockerFilePath'] === 'string' || data['dockerFilePath'] instanceof String)) {
            throw new Error("Expected the field `dockerFilePath` to be a primitive type in the JSON string but got " + data['dockerFilePath']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['imageNames'])) {
            throw new Error("Expected the field `imageNames` to be an array in the JSON data but got " + data['imageNames']);
        }
        // validate the optional field `platform`
        if (data['platform']) { // data not null
          PlatformProperties.validateJSON(data['platform']);
        }
        // ensure the json data is a string
        if (data['sourceLocation'] && !(typeof data['sourceLocation'] === 'string' || data['sourceLocation'] instanceof String)) {
            throw new Error("Expected the field `sourceLocation` to be a primitive type in the JSON string but got " + data['sourceLocation']);
        }

        return true;
    }


}

QuickBuildRequest.RequiredProperties = ["dockerFilePath", "platform", "sourceLocation"];

/**
 * The collection of build arguments to be used.
 * @member {Array.<module:model/BuildArgument>} buildArguments
 */
QuickBuildRequest.prototype['buildArguments'] = undefined;

/**
 * The Docker file path relative to the source location.
 * @member {String} dockerFilePath
 */
QuickBuildRequest.prototype['dockerFilePath'] = undefined;

/**
 * The fully qualified image names including the repository and tag.
 * @member {Array.<String>} imageNames
 */
QuickBuildRequest.prototype['imageNames'] = undefined;

/**
 * The value of this property indicates whether the image built should be pushed to the registry or not.
 * @member {Boolean} isPushEnabled
 * @default true
 */
QuickBuildRequest.prototype['isPushEnabled'] = true;

/**
 * The value of this property indicates whether the image cache is enabled or not.
 * @member {Boolean} noCache
 * @default false
 */
QuickBuildRequest.prototype['noCache'] = false;

/**
 * @member {module:model/PlatformProperties} platform
 */
QuickBuildRequest.prototype['platform'] = undefined;

/**
 * The URL(absolute or relative) of the source that needs to be built. For Docker build, it can be an URL to a tar or github repository as supported by Docker.  If it is relative URL, the relative path should be obtained from calling getSourceUploadUrl API.
 * @member {String} sourceLocation
 */
QuickBuildRequest.prototype['sourceLocation'] = undefined;

/**
 * Build timeout in seconds.
 * @member {Number} timeout
 * @default 3600
 */
QuickBuildRequest.prototype['timeout'] = 3600;


// Implement QueueBuildRequest interface:
/**
 * The type of the build request.
 * @member {String} type
 */
QueueBuildRequest.prototype['type'] = undefined;




export default QuickBuildRequest;

