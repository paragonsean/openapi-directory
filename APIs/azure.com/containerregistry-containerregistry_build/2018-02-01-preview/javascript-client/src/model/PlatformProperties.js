/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PlatformProperties model module.
 * @module model/PlatformProperties
 * @version 2018-02-01-preview
 */
class PlatformProperties {
    /**
     * Constructs a new <code>PlatformProperties</code>.
     * The platform properties against which the build has to happen.
     * @alias module:model/PlatformProperties
     * @param osType {module:model/PlatformProperties.OsTypeEnum} The operating system type required for the build.
     */
    constructor(osType) { 
        
        PlatformProperties.initialize(this, osType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, osType) { 
        obj['osType'] = osType;
    }

    /**
     * Constructs a <code>PlatformProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PlatformProperties} obj Optional instance to populate.
     * @return {module:model/PlatformProperties} The populated <code>PlatformProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PlatformProperties();

            if (data.hasOwnProperty('cpu')) {
                obj['cpu'] = ApiClient.convertToType(data['cpu'], 'Number');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PlatformProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PlatformProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PlatformProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }

        return true;
    }


}

PlatformProperties.RequiredProperties = ["osType"];

/**
 * The CPU configuration in terms of number of cores required for the build.
 * @member {Number} cpu
 */
PlatformProperties.prototype['cpu'] = undefined;

/**
 * The operating system type required for the build.
 * @member {module:model/PlatformProperties.OsTypeEnum} osType
 */
PlatformProperties.prototype['osType'] = undefined;





/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
PlatformProperties['OsTypeEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};



export default PlatformProperties;

