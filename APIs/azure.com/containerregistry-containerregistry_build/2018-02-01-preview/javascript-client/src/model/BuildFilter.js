/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BuildFilter model module.
 * @module model/BuildFilter
 * @version 2018-02-01-preview
 */
class BuildFilter {
    /**
     * Constructs a new <code>BuildFilter</code>.
     * Properties that are enabled for Odata querying.
     * @alias module:model/BuildFilter
     */
    constructor() { 
        
        BuildFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BuildFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BuildFilter} obj Optional instance to populate.
     * @return {module:model/BuildFilter} The populated <code>BuildFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BuildFilter();

            if (data.hasOwnProperty('buildId')) {
                obj['buildId'] = ApiClient.convertToType(data['buildId'], 'String');
            }
            if (data.hasOwnProperty('buildTaskName')) {
                obj['buildTaskName'] = ApiClient.convertToType(data['buildTaskName'], 'String');
            }
            if (data.hasOwnProperty('buildType')) {
                obj['buildType'] = ApiClient.convertToType(data['buildType'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('finishTime')) {
                obj['finishTime'] = ApiClient.convertToType(data['finishTime'], 'Date');
            }
            if (data.hasOwnProperty('isArchiveEnabled')) {
                obj['isArchiveEnabled'] = ApiClient.convertToType(data['isArchiveEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('outputImageManifests')) {
                obj['outputImageManifests'] = ApiClient.convertToType(data['outputImageManifests'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BuildFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BuildFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buildId'] && !(typeof data['buildId'] === 'string' || data['buildId'] instanceof String)) {
            throw new Error("Expected the field `buildId` to be a primitive type in the JSON string but got " + data['buildId']);
        }
        // ensure the json data is a string
        if (data['buildTaskName'] && !(typeof data['buildTaskName'] === 'string' || data['buildTaskName'] instanceof String)) {
            throw new Error("Expected the field `buildTaskName` to be a primitive type in the JSON string but got " + data['buildTaskName']);
        }
        // ensure the json data is a string
        if (data['buildType'] && !(typeof data['buildType'] === 'string' || data['buildType'] instanceof String)) {
            throw new Error("Expected the field `buildType` to be a primitive type in the JSON string but got " + data['buildType']);
        }
        // ensure the json data is a string
        if (data['outputImageManifests'] && !(typeof data['outputImageManifests'] === 'string' || data['outputImageManifests'] instanceof String)) {
            throw new Error("Expected the field `outputImageManifests` to be a primitive type in the JSON string but got " + data['outputImageManifests']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The unique identifier for the build.
 * @member {String} buildId
 */
BuildFilter.prototype['buildId'] = undefined;

/**
 * The name of the build task that the build corresponds to.
 * @member {String} buildTaskName
 */
BuildFilter.prototype['buildTaskName'] = undefined;

/**
 * The type of build.
 * @member {module:model/BuildFilter.BuildTypeEnum} buildType
 */
BuildFilter.prototype['buildType'] = undefined;

/**
 * The create time for a build.
 * @member {Date} createTime
 */
BuildFilter.prototype['createTime'] = undefined;

/**
 * The time the build finished.
 * @member {Date} finishTime
 */
BuildFilter.prototype['finishTime'] = undefined;

/**
 * The value that indicates whether archiving is enabled or not.
 * @member {Boolean} isArchiveEnabled
 */
BuildFilter.prototype['isArchiveEnabled'] = undefined;

/**
 * The list of comma-separated image manifests that were generated from the build.
 * @member {String} outputImageManifests
 */
BuildFilter.prototype['outputImageManifests'] = undefined;

/**
 * The current status of the build.
 * @member {module:model/BuildFilter.StatusEnum} status
 */
BuildFilter.prototype['status'] = undefined;





/**
 * Allowed values for the <code>buildType</code> property.
 * @enum {String}
 * @readonly
 */
BuildFilter['BuildTypeEnum'] = {

    /**
     * value: "AutoBuild"
     * @const
     */
    "AutoBuild": "AutoBuild",

    /**
     * value: "QuickBuild"
     * @const
     */
    "QuickBuild": "QuickBuild"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
BuildFilter['StatusEnum'] = {

    /**
     * value: "Queued"
     * @const
     */
    "Queued": "Queued",

    /**
     * value: "Started"
     * @const
     */
    "Started": "Started",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "Timeout"
     * @const
     */
    "Timeout": "Timeout"
};



export default BuildFilter;

