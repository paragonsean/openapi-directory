/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SourceControlAuthInfo from './SourceControlAuthInfo';

/**
 * The SourceRepositoryProperties model module.
 * @module model/SourceRepositoryProperties
 * @version 2018-02-01-preview
 */
class SourceRepositoryProperties {
    /**
     * Constructs a new <code>SourceRepositoryProperties</code>.
     * The properties of the source code repository.
     * @alias module:model/SourceRepositoryProperties
     * @param repositoryUrl {String} The full URL to the source code repository
     * @param sourceControlType {module:model/SourceRepositoryProperties.SourceControlTypeEnum} The type of source control service.
     */
    constructor(repositoryUrl, sourceControlType) { 
        
        SourceRepositoryProperties.initialize(this, repositoryUrl, sourceControlType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repositoryUrl, sourceControlType) { 
        obj['isCommitTriggerEnabled'] = false;
        obj['repositoryUrl'] = repositoryUrl;
        obj['sourceControlType'] = sourceControlType;
    }

    /**
     * Constructs a <code>SourceRepositoryProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceRepositoryProperties} obj Optional instance to populate.
     * @return {module:model/SourceRepositoryProperties} The populated <code>SourceRepositoryProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceRepositoryProperties();

            if (data.hasOwnProperty('isCommitTriggerEnabled')) {
                obj['isCommitTriggerEnabled'] = ApiClient.convertToType(data['isCommitTriggerEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('repositoryUrl')) {
                obj['repositoryUrl'] = ApiClient.convertToType(data['repositoryUrl'], 'String');
            }
            if (data.hasOwnProperty('sourceControlAuthProperties')) {
                obj['sourceControlAuthProperties'] = SourceControlAuthInfo.constructFromObject(data['sourceControlAuthProperties']);
            }
            if (data.hasOwnProperty('sourceControlType')) {
                obj['sourceControlType'] = ApiClient.convertToType(data['sourceControlType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceRepositoryProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceRepositoryProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SourceRepositoryProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['repositoryUrl'] && !(typeof data['repositoryUrl'] === 'string' || data['repositoryUrl'] instanceof String)) {
            throw new Error("Expected the field `repositoryUrl` to be a primitive type in the JSON string but got " + data['repositoryUrl']);
        }
        // validate the optional field `sourceControlAuthProperties`
        if (data['sourceControlAuthProperties']) { // data not null
          SourceControlAuthInfo.validateJSON(data['sourceControlAuthProperties']);
        }
        // ensure the json data is a string
        if (data['sourceControlType'] && !(typeof data['sourceControlType'] === 'string' || data['sourceControlType'] instanceof String)) {
            throw new Error("Expected the field `sourceControlType` to be a primitive type in the JSON string but got " + data['sourceControlType']);
        }

        return true;
    }


}

SourceRepositoryProperties.RequiredProperties = ["repositoryUrl", "sourceControlType"];

/**
 * The value of this property indicates whether the source control commit trigger is enabled or not.
 * @member {Boolean} isCommitTriggerEnabled
 * @default false
 */
SourceRepositoryProperties.prototype['isCommitTriggerEnabled'] = false;

/**
 * The full URL to the source code repository
 * @member {String} repositoryUrl
 */
SourceRepositoryProperties.prototype['repositoryUrl'] = undefined;

/**
 * @member {module:model/SourceControlAuthInfo} sourceControlAuthProperties
 */
SourceRepositoryProperties.prototype['sourceControlAuthProperties'] = undefined;

/**
 * The type of source control service.
 * @member {module:model/SourceRepositoryProperties.SourceControlTypeEnum} sourceControlType
 */
SourceRepositoryProperties.prototype['sourceControlType'] = undefined;





/**
 * Allowed values for the <code>sourceControlType</code> property.
 * @enum {String}
 * @readonly
 */
SourceRepositoryProperties['SourceControlTypeEnum'] = {

    /**
     * value: "Github"
     * @const
     */
    "Github": "Github",

    /**
     * value: "VisualStudioTeamService"
     * @const
     */
    "VisualStudioTeamService": "VisualStudioTeamService"
};



export default SourceRepositoryProperties;

