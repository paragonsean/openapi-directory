/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Build from '../model/Build';
import BuildGetLogResult from '../model/BuildGetLogResult';
import BuildListResult from '../model/BuildListResult';
import BuildUpdateParameters from '../model/BuildUpdateParameters';

/**
* Builds service.
* @module api/BuildsApi
* @version 2018-02-01-preview
*/
export default class BuildsApi {

    /**
    * Constructs a new BuildsApi. 
    * @alias module:api/BuildsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the buildsCancel operation.
     * @callback module:api/BuildsApi~buildsCancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an existing build.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildId The build ID.
     * @param {module:api/BuildsApi~buildsCancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildsCancel(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildsCancel");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildsCancel");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildsCancel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildsCancel");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling buildsCancel");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildId': buildId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsGet operation.
     * @callback module:api/BuildsApi~buildsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the detailed information for a given build.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildId The build ID.
     * @param {module:api/BuildsApi~buildsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    buildsGet(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildsGet");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildsGet");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling buildsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildId': buildId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsGetLogLink operation.
     * @callback module:api/BuildsApi~buildsGetLogLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildGetLogResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a link to download the build logs.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildId The build ID.
     * @param {module:api/BuildsApi~buildsGetLogLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildGetLogResult}
     */
    buildsGetLogLink(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildsGetLogLink");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildsGetLogLink");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildsGetLogLink");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildsGetLogLink");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling buildsGetLogLink");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildId': buildId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildGetLogResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}/getLogLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsList operation.
     * @callback module:api/BuildsApi~buildsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the builds for a registry.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The builds filter to apply on the operation.
     * @param {Number} [top] $top is supported for get list of builds, which limits the maximum number of builds to return.
     * @param {String} [skipToken] $skipToken is supported on get list of builds, which provides the next page in the list of builds.
     * @param {module:api/BuildsApi~buildsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildListResult}
     */
    buildsList(subscriptionId, resourceGroupName, registryName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildsList");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildsUpdate operation.
     * @callback module:api/BuildsApi~buildsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch the build properties.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildId The build ID.
     * @param {module:model/BuildUpdateParameters} buildUpdateParameters The build update properties.
     * @param {module:api/BuildsApi~buildsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    buildsUpdate(subscriptionId, resourceGroupName, registryName, apiVersion, buildId, buildUpdateParameters, callback) {
      let postBody = buildUpdateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildsUpdate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildsUpdate");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling buildsUpdate");
      }
      // verify the required parameter 'buildUpdateParameters' is set
      if (buildUpdateParameters === undefined || buildUpdateParameters === null) {
        throw new Error("Missing the required parameter 'buildUpdateParameters' when calling buildsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildId': buildId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/builds/{buildId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
