/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BuildArgumentList from '../model/BuildArgumentList';
import BuildStep from '../model/BuildStep';
import BuildStepList from '../model/BuildStepList';
import BuildStepUpdateParameters from '../model/BuildStepUpdateParameters';

/**
* BuildSteps service.
* @module api/BuildStepsApi
* @version 2018-02-01-preview
*/
export default class BuildStepsApi {

    /**
    * Constructs a new BuildStepsApi. 
    * @alias module:api/BuildStepsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the buildStepsCreate operation.
     * @callback module:api/BuildStepsApi~buildStepsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildStep} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a build step for a build task.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {String} stepName The name of a build step for a container registry build task.
     * @param {module:model/BuildStep} buildStepCreateParameters The parameters for creating a build step.
     * @param {module:api/BuildStepsApi~buildStepsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildStep}
     */
    buildStepsCreate(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, buildStepCreateParameters, callback) {
      let postBody = buildStepCreateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildStepsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildStepsCreate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildStepsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildStepsCreate");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildStepsCreate");
      }
      // verify the required parameter 'stepName' is set
      if (stepName === undefined || stepName === null) {
        throw new Error("Missing the required parameter 'stepName' when calling buildStepsCreate");
      }
      // verify the required parameter 'buildStepCreateParameters' is set
      if (buildStepCreateParameters === undefined || buildStepCreateParameters === null) {
        throw new Error("Missing the required parameter 'buildStepCreateParameters' when calling buildStepsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName,
        'stepName': stepName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildStep;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildStepsDelete operation.
     * @callback module:api/BuildStepsApi~buildStepsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a build step from the build task.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {String} stepName The name of a build step for a container registry build task.
     * @param {module:api/BuildStepsApi~buildStepsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildStepsDelete(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildStepsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildStepsDelete");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildStepsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildStepsDelete");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildStepsDelete");
      }
      // verify the required parameter 'stepName' is set
      if (stepName === undefined || stepName === null) {
        throw new Error("Missing the required parameter 'stepName' when calling buildStepsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName,
        'stepName': stepName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildStepsGet operation.
     * @callback module:api/BuildStepsApi~buildStepsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildStep} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the build step for a build task.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {String} stepName The name of a build step for a container registry build task.
     * @param {module:api/BuildStepsApi~buildStepsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildStep}
     */
    buildStepsGet(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildStepsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildStepsGet");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildStepsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildStepsGet");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildStepsGet");
      }
      // verify the required parameter 'stepName' is set
      if (stepName === undefined || stepName === null) {
        throw new Error("Missing the required parameter 'stepName' when calling buildStepsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName,
        'stepName': stepName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildStep;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildStepsList operation.
     * @callback module:api/BuildStepsApi~buildStepsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildStepList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the build steps for a given build task.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {module:api/BuildStepsApi~buildStepsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildStepList}
     */
    buildStepsList(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildStepsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildStepsList");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildStepsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildStepsList");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildStepsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildStepList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildStepsListBuildArguments operation.
     * @callback module:api/BuildStepsApi~buildStepsListBuildArgumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildArgumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the build arguments for a step including the secret arguments.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {String} stepName The name of a build step for a container registry build task.
     * @param {module:api/BuildStepsApi~buildStepsListBuildArgumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildArgumentList}
     */
    buildStepsListBuildArguments(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildStepsListBuildArguments");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildStepsListBuildArguments");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildStepsListBuildArguments");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildStepsListBuildArguments");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildStepsListBuildArguments");
      }
      // verify the required parameter 'stepName' is set
      if (stepName === undefined || stepName === null) {
        throw new Error("Missing the required parameter 'stepName' when calling buildStepsListBuildArguments");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName,
        'stepName': stepName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildArgumentList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}/listBuildArguments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildStepsUpdate operation.
     * @callback module:api/BuildStepsApi~buildStepsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildStep} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a build step in a build task.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {String} stepName The name of a build step for a container registry build task.
     * @param {module:model/BuildStepUpdateParameters} buildStepUpdateParameters The parameters for updating a build step.
     * @param {module:api/BuildStepsApi~buildStepsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildStep}
     */
    buildStepsUpdate(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, stepName, buildStepUpdateParameters, callback) {
      let postBody = buildStepUpdateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildStepsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildStepsUpdate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildStepsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildStepsUpdate");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildStepsUpdate");
      }
      // verify the required parameter 'stepName' is set
      if (stepName === undefined || stepName === null) {
        throw new Error("Missing the required parameter 'stepName' when calling buildStepsUpdate");
      }
      // verify the required parameter 'buildStepUpdateParameters' is set
      if (buildStepUpdateParameters === undefined || buildStepUpdateParameters === null) {
        throw new Error("Missing the required parameter 'buildStepUpdateParameters' when calling buildStepsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName,
        'stepName': stepName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildStep;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/steps/{stepName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
