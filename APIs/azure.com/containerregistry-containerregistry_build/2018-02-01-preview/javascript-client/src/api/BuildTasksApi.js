/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BuildTask from '../model/BuildTask';
import BuildTaskListResult from '../model/BuildTaskListResult';
import BuildTaskUpdateParameters from '../model/BuildTaskUpdateParameters';
import SourceRepositoryProperties from '../model/SourceRepositoryProperties';

/**
* BuildTasks service.
* @module api/BuildTasksApi
* @version 2018-02-01-preview
*/
export default class BuildTasksApi {

    /**
    * Constructs a new BuildTasksApi. 
    * @alias module:api/BuildTasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the buildTasksCreate operation.
     * @callback module:api/BuildTasksApi~buildTasksCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a build task for a container registry with the specified parameters.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {module:model/BuildTask} buildTaskCreateParameters The parameters for creating a build task.
     * @param {module:api/BuildTasksApi~buildTasksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildTask}
     */
    buildTasksCreate(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, buildTaskCreateParameters, callback) {
      let postBody = buildTaskCreateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildTasksCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildTasksCreate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildTasksCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildTasksCreate");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildTasksCreate");
      }
      // verify the required parameter 'buildTaskCreateParameters' is set
      if (buildTaskCreateParameters === undefined || buildTaskCreateParameters === null) {
        throw new Error("Missing the required parameter 'buildTaskCreateParameters' when calling buildTasksCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildTask;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildTasksDelete operation.
     * @callback module:api/BuildTasksApi~buildTasksDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specified build task.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {module:api/BuildTasksApi~buildTasksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    buildTasksDelete(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildTasksDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildTasksDelete");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildTasksDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildTasksDelete");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildTasksDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildTasksGet operation.
     * @callback module:api/BuildTasksApi~buildTasksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the properties of a specified build task.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {module:api/BuildTasksApi~buildTasksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildTask}
     */
    buildTasksGet(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildTasksGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildTasksGet");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildTasksGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildTasksGet");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildTasksGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildTask;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildTasksList operation.
     * @callback module:api/BuildTasksApi~buildTasksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildTaskListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the build tasks for a specified container registry.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The build task filter to apply on the operation.
     * @param {String} [skipToken] $skipToken is supported on get list of build tasks, which provides the next page in the list of tasks.
     * @param {module:api/BuildTasksApi~buildTasksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildTaskListResult}
     */
    buildTasksList(subscriptionId, resourceGroupName, registryName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildTasksList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildTasksList");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildTasksList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildTasksList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildTaskListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildTasksListSourceRepositoryProperties operation.
     * @callback module:api/BuildTasksApi~buildTasksListSourceRepositoryPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceRepositoryProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the source control properties for a build task.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {module:api/BuildTasksApi~buildTasksListSourceRepositoryPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceRepositoryProperties}
     */
    buildTasksListSourceRepositoryProperties(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildTasksListSourceRepositoryProperties");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildTasksListSourceRepositoryProperties");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildTasksListSourceRepositoryProperties");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildTasksListSourceRepositoryProperties");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildTasksListSourceRepositoryProperties");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceRepositoryProperties;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}/listSourceRepositoryProperties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the buildTasksUpdate operation.
     * @callback module:api/BuildTasksApi~buildTasksUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a build task with the specified parameters.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} registryName The name of the container registry.
     * @param {String} apiVersion The client API version.
     * @param {String} buildTaskName The name of the container registry build task.
     * @param {module:model/BuildTaskUpdateParameters} buildTaskUpdateParameters The parameters for updating a build task.
     * @param {module:api/BuildTasksApi~buildTasksUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildTask}
     */
    buildTasksUpdate(subscriptionId, resourceGroupName, registryName, apiVersion, buildTaskName, buildTaskUpdateParameters, callback) {
      let postBody = buildTaskUpdateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling buildTasksUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling buildTasksUpdate");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling buildTasksUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling buildTasksUpdate");
      }
      // verify the required parameter 'buildTaskName' is set
      if (buildTaskName === undefined || buildTaskName === null) {
        throw new Error("Missing the required parameter 'buildTaskName' when calling buildTasksUpdate");
      }
      // verify the required parameter 'buildTaskUpdateParameters' is set
      if (buildTaskUpdateParameters === undefined || buildTaskUpdateParameters === null) {
        throw new Error("Missing the required parameter 'buildTaskUpdateParameters' when calling buildTasksUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'registryName': registryName,
        'buildTaskName': buildTaskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BuildTask;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/buildTasks/{buildTaskName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
