# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_properties import AgentProperties
from openapi_server.models.credentials import Credentials
from openapi_server.models.platform_properties import PlatformProperties
from openapi_server.models.run_request import RunRequest
from openapi_server.models.set_value import SetValue
from openapi_server import util


class FileTaskRunRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_configuration: AgentProperties=None, credentials: Credentials=None, platform: PlatformProperties=None, source_location: str=None, task_file_path: str=None, timeout: int=3600, values: List[SetValue]=None, values_file_path: str=None, is_archive_enabled: bool=False, type: str=None):
        """FileTaskRunRequest - a model defined in OpenAPI

        :param agent_configuration: The agent_configuration of this FileTaskRunRequest.
        :param credentials: The credentials of this FileTaskRunRequest.
        :param platform: The platform of this FileTaskRunRequest.
        :param source_location: The source_location of this FileTaskRunRequest.
        :param task_file_path: The task_file_path of this FileTaskRunRequest.
        :param timeout: The timeout of this FileTaskRunRequest.
        :param values: The values of this FileTaskRunRequest.
        :param values_file_path: The values_file_path of this FileTaskRunRequest.
        :param is_archive_enabled: The is_archive_enabled of this FileTaskRunRequest.
        :param type: The type of this FileTaskRunRequest.
        """
        self.openapi_types = {
            'agent_configuration': AgentProperties,
            'credentials': Credentials,
            'platform': PlatformProperties,
            'source_location': str,
            'task_file_path': str,
            'timeout': int,
            'values': List[SetValue],
            'values_file_path': str,
            'is_archive_enabled': bool,
            'type': str
        }

        self.attribute_map = {
            'agent_configuration': 'agentConfiguration',
            'credentials': 'credentials',
            'platform': 'platform',
            'source_location': 'sourceLocation',
            'task_file_path': 'taskFilePath',
            'timeout': 'timeout',
            'values': 'values',
            'values_file_path': 'valuesFilePath',
            'is_archive_enabled': 'isArchiveEnabled',
            'type': 'type'
        }

        self._agent_configuration = agent_configuration
        self._credentials = credentials
        self._platform = platform
        self._source_location = source_location
        self._task_file_path = task_file_path
        self._timeout = timeout
        self._values = values
        self._values_file_path = values_file_path
        self._is_archive_enabled = is_archive_enabled
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileTaskRunRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileTaskRunRequest of this FileTaskRunRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_configuration(self):
        """Gets the agent_configuration of this FileTaskRunRequest.


        :return: The agent_configuration of this FileTaskRunRequest.
        :rtype: AgentProperties
        """
        return self._agent_configuration

    @agent_configuration.setter
    def agent_configuration(self, agent_configuration):
        """Sets the agent_configuration of this FileTaskRunRequest.


        :param agent_configuration: The agent_configuration of this FileTaskRunRequest.
        :type agent_configuration: AgentProperties
        """

        self._agent_configuration = agent_configuration

    @property
    def credentials(self):
        """Gets the credentials of this FileTaskRunRequest.


        :return: The credentials of this FileTaskRunRequest.
        :rtype: Credentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this FileTaskRunRequest.


        :param credentials: The credentials of this FileTaskRunRequest.
        :type credentials: Credentials
        """

        self._credentials = credentials

    @property
    def platform(self):
        """Gets the platform of this FileTaskRunRequest.


        :return: The platform of this FileTaskRunRequest.
        :rtype: PlatformProperties
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this FileTaskRunRequest.


        :param platform: The platform of this FileTaskRunRequest.
        :type platform: PlatformProperties
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def source_location(self):
        """Gets the source_location of this FileTaskRunRequest.

        The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.  If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.

        :return: The source_location of this FileTaskRunRequest.
        :rtype: str
        """
        return self._source_location

    @source_location.setter
    def source_location(self, source_location):
        """Sets the source_location of this FileTaskRunRequest.

        The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.  If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.

        :param source_location: The source_location of this FileTaskRunRequest.
        :type source_location: str
        """

        self._source_location = source_location

    @property
    def task_file_path(self):
        """Gets the task_file_path of this FileTaskRunRequest.

        The template/definition file path relative to the source.

        :return: The task_file_path of this FileTaskRunRequest.
        :rtype: str
        """
        return self._task_file_path

    @task_file_path.setter
    def task_file_path(self, task_file_path):
        """Sets the task_file_path of this FileTaskRunRequest.

        The template/definition file path relative to the source.

        :param task_file_path: The task_file_path of this FileTaskRunRequest.
        :type task_file_path: str
        """
        if task_file_path is None:
            raise ValueError("Invalid value for `task_file_path`, must not be `None`")

        self._task_file_path = task_file_path

    @property
    def timeout(self):
        """Gets the timeout of this FileTaskRunRequest.

        Run timeout in seconds.

        :return: The timeout of this FileTaskRunRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this FileTaskRunRequest.

        Run timeout in seconds.

        :param timeout: The timeout of this FileTaskRunRequest.
        :type timeout: int
        """
        if timeout is not None and timeout > 28800:
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `28800`")
        if timeout is not None and timeout < 300:
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `300`")

        self._timeout = timeout

    @property
    def values(self):
        """Gets the values of this FileTaskRunRequest.

        The collection of overridable values that can be passed when running a task.

        :return: The values of this FileTaskRunRequest.
        :rtype: List[SetValue]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this FileTaskRunRequest.

        The collection of overridable values that can be passed when running a task.

        :param values: The values of this FileTaskRunRequest.
        :type values: List[SetValue]
        """

        self._values = values

    @property
    def values_file_path(self):
        """Gets the values_file_path of this FileTaskRunRequest.

        The values/parameters file path relative to the source.

        :return: The values_file_path of this FileTaskRunRequest.
        :rtype: str
        """
        return self._values_file_path

    @values_file_path.setter
    def values_file_path(self, values_file_path):
        """Sets the values_file_path of this FileTaskRunRequest.

        The values/parameters file path relative to the source.

        :param values_file_path: The values_file_path of this FileTaskRunRequest.
        :type values_file_path: str
        """

        self._values_file_path = values_file_path

    @property
    def is_archive_enabled(self):
        """Gets the is_archive_enabled of this FileTaskRunRequest.

        The value that indicates whether archiving is enabled for the run or not.

        :return: The is_archive_enabled of this FileTaskRunRequest.
        :rtype: bool
        """
        return self._is_archive_enabled

    @is_archive_enabled.setter
    def is_archive_enabled(self, is_archive_enabled):
        """Sets the is_archive_enabled of this FileTaskRunRequest.

        The value that indicates whether archiving is enabled for the run or not.

        :param is_archive_enabled: The is_archive_enabled of this FileTaskRunRequest.
        :type is_archive_enabled: bool
        """

        self._is_archive_enabled = is_archive_enabled

    @property
    def type(self):
        """Gets the type of this FileTaskRunRequest.

        The type of the run request.

        :return: The type of this FileTaskRunRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FileTaskRunRequest.

        The type of the run request.

        :param type: The type of this FileTaskRunRequest.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
