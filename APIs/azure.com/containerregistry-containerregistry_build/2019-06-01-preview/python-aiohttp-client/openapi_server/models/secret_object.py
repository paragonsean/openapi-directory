# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecretObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, value: str=None):
        """SecretObject - a model defined in OpenAPI

        :param type: The type of this SecretObject.
        :param value: The value of this SecretObject.
        """
        self.openapi_types = {
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'type': 'type',
            'value': 'value'
        }

        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecretObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecretObject of this SecretObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this SecretObject.

        The type of the secret object which determines how the value of the secret object has to be  interpreted.

        :return: The type of this SecretObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SecretObject.

        The type of the secret object which determines how the value of the secret object has to be  interpreted.

        :param type: The type of this SecretObject.
        :type type: str
        """
        allowed_values = ["Opaque", "Vaultsecret"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this SecretObject.

        The value of the secret. The format of this value will be determined  based on the type of the secret object. If the type is Opaque, the value will be  used as is without any modification.

        :return: The value of this SecretObject.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SecretObject.

        The value of the secret. The format of this value will be determined  based on the type of the secret object. If the type is Opaque, the value will be  used as is without any modification.

        :param value: The value of this SecretObject.
        :type value: str
        """

        self._value = value
