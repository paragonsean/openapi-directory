# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_info_update_parameters import AuthInfoUpdateParameters
from openapi_server import util


class SourceUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, repository_url: str=None, source_control_auth_properties: AuthInfoUpdateParameters=None, source_control_type: str=None):
        """SourceUpdateParameters - a model defined in OpenAPI

        :param branch: The branch of this SourceUpdateParameters.
        :param repository_url: The repository_url of this SourceUpdateParameters.
        :param source_control_auth_properties: The source_control_auth_properties of this SourceUpdateParameters.
        :param source_control_type: The source_control_type of this SourceUpdateParameters.
        """
        self.openapi_types = {
            'branch': str,
            'repository_url': str,
            'source_control_auth_properties': AuthInfoUpdateParameters,
            'source_control_type': str
        }

        self.attribute_map = {
            'branch': 'branch',
            'repository_url': 'repositoryUrl',
            'source_control_auth_properties': 'sourceControlAuthProperties',
            'source_control_type': 'sourceControlType'
        }

        self._branch = branch
        self._repository_url = repository_url
        self._source_control_auth_properties = source_control_auth_properties
        self._source_control_type = source_control_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceUpdateParameters of this SourceUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this SourceUpdateParameters.

        The branch name of the source code.

        :return: The branch of this SourceUpdateParameters.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this SourceUpdateParameters.

        The branch name of the source code.

        :param branch: The branch of this SourceUpdateParameters.
        :type branch: str
        """

        self._branch = branch

    @property
    def repository_url(self):
        """Gets the repository_url of this SourceUpdateParameters.

        The full URL to the source code repository

        :return: The repository_url of this SourceUpdateParameters.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this SourceUpdateParameters.

        The full URL to the source code repository

        :param repository_url: The repository_url of this SourceUpdateParameters.
        :type repository_url: str
        """

        self._repository_url = repository_url

    @property
    def source_control_auth_properties(self):
        """Gets the source_control_auth_properties of this SourceUpdateParameters.


        :return: The source_control_auth_properties of this SourceUpdateParameters.
        :rtype: AuthInfoUpdateParameters
        """
        return self._source_control_auth_properties

    @source_control_auth_properties.setter
    def source_control_auth_properties(self, source_control_auth_properties):
        """Sets the source_control_auth_properties of this SourceUpdateParameters.


        :param source_control_auth_properties: The source_control_auth_properties of this SourceUpdateParameters.
        :type source_control_auth_properties: AuthInfoUpdateParameters
        """

        self._source_control_auth_properties = source_control_auth_properties

    @property
    def source_control_type(self):
        """Gets the source_control_type of this SourceUpdateParameters.

        The type of source control service.

        :return: The source_control_type of this SourceUpdateParameters.
        :rtype: str
        """
        return self._source_control_type

    @source_control_type.setter
    def source_control_type(self, source_control_type):
        """Sets the source_control_type of this SourceUpdateParameters.

        The type of source control service.

        :param source_control_type: The source_control_type of this SourceUpdateParameters.
        :type source_control_type: str
        """
        allowed_values = ["Github", "VisualStudioTeamService"]  # noqa: E501
        if source_control_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_control_type` ({0}), must be one of {1}"
                .format(source_control_type, allowed_values)
            )

        self._source_control_type = source_control_type
