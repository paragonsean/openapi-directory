# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_properties import AgentProperties
from openapi_server.models.credentials import Credentials
from openapi_server.models.platform_update_parameters import PlatformUpdateParameters
from openapi_server.models.task_step_update_parameters import TaskStepUpdateParameters
from openapi_server.models.trigger_update_parameters import TriggerUpdateParameters
from openapi_server import util


class TaskPropertiesUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_configuration: AgentProperties=None, credentials: Credentials=None, platform: PlatformUpdateParameters=None, status: str=None, step: TaskStepUpdateParameters=None, timeout: int=None, trigger: TriggerUpdateParameters=None):
        """TaskPropertiesUpdateParameters - a model defined in OpenAPI

        :param agent_configuration: The agent_configuration of this TaskPropertiesUpdateParameters.
        :param credentials: The credentials of this TaskPropertiesUpdateParameters.
        :param platform: The platform of this TaskPropertiesUpdateParameters.
        :param status: The status of this TaskPropertiesUpdateParameters.
        :param step: The step of this TaskPropertiesUpdateParameters.
        :param timeout: The timeout of this TaskPropertiesUpdateParameters.
        :param trigger: The trigger of this TaskPropertiesUpdateParameters.
        """
        self.openapi_types = {
            'agent_configuration': AgentProperties,
            'credentials': Credentials,
            'platform': PlatformUpdateParameters,
            'status': str,
            'step': TaskStepUpdateParameters,
            'timeout': int,
            'trigger': TriggerUpdateParameters
        }

        self.attribute_map = {
            'agent_configuration': 'agentConfiguration',
            'credentials': 'credentials',
            'platform': 'platform',
            'status': 'status',
            'step': 'step',
            'timeout': 'timeout',
            'trigger': 'trigger'
        }

        self._agent_configuration = agent_configuration
        self._credentials = credentials
        self._platform = platform
        self._status = status
        self._step = step
        self._timeout = timeout
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskPropertiesUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskPropertiesUpdateParameters of this TaskPropertiesUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_configuration(self):
        """Gets the agent_configuration of this TaskPropertiesUpdateParameters.


        :return: The agent_configuration of this TaskPropertiesUpdateParameters.
        :rtype: AgentProperties
        """
        return self._agent_configuration

    @agent_configuration.setter
    def agent_configuration(self, agent_configuration):
        """Sets the agent_configuration of this TaskPropertiesUpdateParameters.


        :param agent_configuration: The agent_configuration of this TaskPropertiesUpdateParameters.
        :type agent_configuration: AgentProperties
        """

        self._agent_configuration = agent_configuration

    @property
    def credentials(self):
        """Gets the credentials of this TaskPropertiesUpdateParameters.


        :return: The credentials of this TaskPropertiesUpdateParameters.
        :rtype: Credentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this TaskPropertiesUpdateParameters.


        :param credentials: The credentials of this TaskPropertiesUpdateParameters.
        :type credentials: Credentials
        """

        self._credentials = credentials

    @property
    def platform(self):
        """Gets the platform of this TaskPropertiesUpdateParameters.


        :return: The platform of this TaskPropertiesUpdateParameters.
        :rtype: PlatformUpdateParameters
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this TaskPropertiesUpdateParameters.


        :param platform: The platform of this TaskPropertiesUpdateParameters.
        :type platform: PlatformUpdateParameters
        """

        self._platform = platform

    @property
    def status(self):
        """Gets the status of this TaskPropertiesUpdateParameters.

        The current status of task.

        :return: The status of this TaskPropertiesUpdateParameters.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskPropertiesUpdateParameters.

        The current status of task.

        :param status: The status of this TaskPropertiesUpdateParameters.
        :type status: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def step(self):
        """Gets the step of this TaskPropertiesUpdateParameters.


        :return: The step of this TaskPropertiesUpdateParameters.
        :rtype: TaskStepUpdateParameters
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this TaskPropertiesUpdateParameters.


        :param step: The step of this TaskPropertiesUpdateParameters.
        :type step: TaskStepUpdateParameters
        """

        self._step = step

    @property
    def timeout(self):
        """Gets the timeout of this TaskPropertiesUpdateParameters.

        Run timeout in seconds.

        :return: The timeout of this TaskPropertiesUpdateParameters.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this TaskPropertiesUpdateParameters.

        Run timeout in seconds.

        :param timeout: The timeout of this TaskPropertiesUpdateParameters.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def trigger(self):
        """Gets the trigger of this TaskPropertiesUpdateParameters.


        :return: The trigger of this TaskPropertiesUpdateParameters.
        :rtype: TriggerUpdateParameters
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this TaskPropertiesUpdateParameters.


        :param trigger: The trigger of this TaskPropertiesUpdateParameters.
        :type trigger: TriggerUpdateParameters
        """

        self._trigger = trigger
