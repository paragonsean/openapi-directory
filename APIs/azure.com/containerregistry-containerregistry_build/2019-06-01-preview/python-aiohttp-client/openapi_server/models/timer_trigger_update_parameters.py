# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimerTriggerUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, schedule: str=None, status: str='Enabled'):
        """TimerTriggerUpdateParameters - a model defined in OpenAPI

        :param name: The name of this TimerTriggerUpdateParameters.
        :param schedule: The schedule of this TimerTriggerUpdateParameters.
        :param status: The status of this TimerTriggerUpdateParameters.
        """
        self.openapi_types = {
            'name': str,
            'schedule': str,
            'status': str
        }

        self.attribute_map = {
            'name': 'name',
            'schedule': 'schedule',
            'status': 'status'
        }

        self._name = name
        self._schedule = schedule
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimerTriggerUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimerTriggerUpdateParameters of this TimerTriggerUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TimerTriggerUpdateParameters.

        The name of the trigger.

        :return: The name of this TimerTriggerUpdateParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TimerTriggerUpdateParameters.

        The name of the trigger.

        :param name: The name of this TimerTriggerUpdateParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def schedule(self):
        """Gets the schedule of this TimerTriggerUpdateParameters.

        The CRON expression for the task schedule

        :return: The schedule of this TimerTriggerUpdateParameters.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this TimerTriggerUpdateParameters.

        The CRON expression for the task schedule

        :param schedule: The schedule of this TimerTriggerUpdateParameters.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def status(self):
        """Gets the status of this TimerTriggerUpdateParameters.

        The current status of trigger.

        :return: The status of this TimerTriggerUpdateParameters.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TimerTriggerUpdateParameters.

        The current status of trigger.

        :param status: The status of this TimerTriggerUpdateParameters.
        :type status: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
