# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.run import Run
from openapi_server.models.run_request import RunRequest
from openapi_server import util


class TaskRunProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, force_update_tag: str=None, provisioning_state: str=None, run_request: RunRequest=None, run_result: Run=None):
        """TaskRunProperties - a model defined in OpenAPI

        :param force_update_tag: The force_update_tag of this TaskRunProperties.
        :param provisioning_state: The provisioning_state of this TaskRunProperties.
        :param run_request: The run_request of this TaskRunProperties.
        :param run_result: The run_result of this TaskRunProperties.
        """
        self.openapi_types = {
            'force_update_tag': str,
            'provisioning_state': str,
            'run_request': RunRequest,
            'run_result': Run
        }

        self.attribute_map = {
            'force_update_tag': 'forceUpdateTag',
            'provisioning_state': 'provisioningState',
            'run_request': 'runRequest',
            'run_result': 'runResult'
        }

        self._force_update_tag = force_update_tag
        self._provisioning_state = provisioning_state
        self._run_request = run_request
        self._run_result = run_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskRunProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskRunProperties of this TaskRunProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def force_update_tag(self):
        """Gets the force_update_tag of this TaskRunProperties.

        How the run should be forced to rerun even if the run request configuration has not changed

        :return: The force_update_tag of this TaskRunProperties.
        :rtype: str
        """
        return self._force_update_tag

    @force_update_tag.setter
    def force_update_tag(self, force_update_tag):
        """Sets the force_update_tag of this TaskRunProperties.

        How the run should be forced to rerun even if the run request configuration has not changed

        :param force_update_tag: The force_update_tag of this TaskRunProperties.
        :type force_update_tag: str
        """

        self._force_update_tag = force_update_tag

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this TaskRunProperties.

        The provisioning state of this task run

        :return: The provisioning_state of this TaskRunProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this TaskRunProperties.

        The provisioning state of this task run

        :param provisioning_state: The provisioning_state of this TaskRunProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def run_request(self):
        """Gets the run_request of this TaskRunProperties.


        :return: The run_request of this TaskRunProperties.
        :rtype: RunRequest
        """
        return self._run_request

    @run_request.setter
    def run_request(self, run_request):
        """Sets the run_request of this TaskRunProperties.


        :param run_request: The run_request of this TaskRunProperties.
        :type run_request: RunRequest
        """

        self._run_request = run_request

    @property
    def run_result(self):
        """Gets the run_result of this TaskRunProperties.


        :return: The run_result of this TaskRunProperties.
        :rtype: Run
        """
        return self._run_result

    @run_result.setter
    def run_result(self, run_result):
        """Sets the run_result of this TaskRunProperties.


        :param run_result: The run_result of this TaskRunProperties.
        :type run_result: Run
        """

        self._run_result = run_result
