# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlatformProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, os: str=None, variant: str=None):
        """PlatformProperties - a model defined in OpenAPI

        :param architecture: The architecture of this PlatformProperties.
        :param os: The os of this PlatformProperties.
        :param variant: The variant of this PlatformProperties.
        """
        self.openapi_types = {
            'architecture': str,
            'os': str,
            'variant': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'os': 'os',
            'variant': 'variant'
        }

        self._architecture = architecture
        self._os = os
        self._variant = variant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlatformProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlatformProperties of this PlatformProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this PlatformProperties.

        The OS architecture.

        :return: The architecture of this PlatformProperties.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this PlatformProperties.

        The OS architecture.

        :param architecture: The architecture of this PlatformProperties.
        :type architecture: str
        """
        allowed_values = ["amd64", "x86", "386", "arm", "arm64"]  # noqa: E501
        if architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `architecture` ({0}), must be one of {1}"
                .format(architecture, allowed_values)
            )

        self._architecture = architecture

    @property
    def os(self):
        """Gets the os of this PlatformProperties.

        The operating system type required for the run.

        :return: The os of this PlatformProperties.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this PlatformProperties.

        The operating system type required for the run.

        :param os: The os of this PlatformProperties.
        :type os: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os not in allowed_values:
            raise ValueError(
                "Invalid value for `os` ({0}), must be one of {1}"
                .format(os, allowed_values)
            )

        self._os = os

    @property
    def variant(self):
        """Gets the variant of this PlatformProperties.

        Variant of the CPU.

        :return: The variant of this PlatformProperties.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this PlatformProperties.

        Variant of the CPU.

        :param variant: The variant of this PlatformProperties.
        :type variant: str
        """
        allowed_values = ["v6", "v7", "v8"]  # noqa: E501
        if variant not in allowed_values:
            raise ValueError(
                "Invalid value for `variant` ({0}), must be one of {1}"
                .format(variant, allowed_values)
            )

        self._variant = variant
