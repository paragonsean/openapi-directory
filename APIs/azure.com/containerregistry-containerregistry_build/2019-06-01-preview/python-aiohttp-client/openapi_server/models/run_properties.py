# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_properties import AgentProperties
from openapi_server.models.image_descriptor import ImageDescriptor
from openapi_server.models.image_update_trigger import ImageUpdateTrigger
from openapi_server.models.platform_properties import PlatformProperties
from openapi_server.models.source_trigger_descriptor import SourceTriggerDescriptor
from openapi_server.models.timer_trigger_descriptor import TimerTriggerDescriptor
from openapi_server import util


class RunProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_configuration: AgentProperties=None, create_time: datetime=None, custom_registries: List[str]=None, finish_time: datetime=None, image_update_trigger: ImageUpdateTrigger=None, is_archive_enabled: bool=False, last_updated_time: datetime=None, output_images: List[ImageDescriptor]=None, platform: PlatformProperties=None, provisioning_state: str=None, run_error_message: str=None, run_id: str=None, run_type: str=None, source_registry_auth: str=None, source_trigger: SourceTriggerDescriptor=None, start_time: datetime=None, status: str=None, task: str=None, timer_trigger: TimerTriggerDescriptor=None, update_trigger_token: str=None):
        """RunProperties - a model defined in OpenAPI

        :param agent_configuration: The agent_configuration of this RunProperties.
        :param create_time: The create_time of this RunProperties.
        :param custom_registries: The custom_registries of this RunProperties.
        :param finish_time: The finish_time of this RunProperties.
        :param image_update_trigger: The image_update_trigger of this RunProperties.
        :param is_archive_enabled: The is_archive_enabled of this RunProperties.
        :param last_updated_time: The last_updated_time of this RunProperties.
        :param output_images: The output_images of this RunProperties.
        :param platform: The platform of this RunProperties.
        :param provisioning_state: The provisioning_state of this RunProperties.
        :param run_error_message: The run_error_message of this RunProperties.
        :param run_id: The run_id of this RunProperties.
        :param run_type: The run_type of this RunProperties.
        :param source_registry_auth: The source_registry_auth of this RunProperties.
        :param source_trigger: The source_trigger of this RunProperties.
        :param start_time: The start_time of this RunProperties.
        :param status: The status of this RunProperties.
        :param task: The task of this RunProperties.
        :param timer_trigger: The timer_trigger of this RunProperties.
        :param update_trigger_token: The update_trigger_token of this RunProperties.
        """
        self.openapi_types = {
            'agent_configuration': AgentProperties,
            'create_time': datetime,
            'custom_registries': List[str],
            'finish_time': datetime,
            'image_update_trigger': ImageUpdateTrigger,
            'is_archive_enabled': bool,
            'last_updated_time': datetime,
            'output_images': List[ImageDescriptor],
            'platform': PlatformProperties,
            'provisioning_state': str,
            'run_error_message': str,
            'run_id': str,
            'run_type': str,
            'source_registry_auth': str,
            'source_trigger': SourceTriggerDescriptor,
            'start_time': datetime,
            'status': str,
            'task': str,
            'timer_trigger': TimerTriggerDescriptor,
            'update_trigger_token': str
        }

        self.attribute_map = {
            'agent_configuration': 'agentConfiguration',
            'create_time': 'createTime',
            'custom_registries': 'customRegistries',
            'finish_time': 'finishTime',
            'image_update_trigger': 'imageUpdateTrigger',
            'is_archive_enabled': 'isArchiveEnabled',
            'last_updated_time': 'lastUpdatedTime',
            'output_images': 'outputImages',
            'platform': 'platform',
            'provisioning_state': 'provisioningState',
            'run_error_message': 'runErrorMessage',
            'run_id': 'runId',
            'run_type': 'runType',
            'source_registry_auth': 'sourceRegistryAuth',
            'source_trigger': 'sourceTrigger',
            'start_time': 'startTime',
            'status': 'status',
            'task': 'task',
            'timer_trigger': 'timerTrigger',
            'update_trigger_token': 'updateTriggerToken'
        }

        self._agent_configuration = agent_configuration
        self._create_time = create_time
        self._custom_registries = custom_registries
        self._finish_time = finish_time
        self._image_update_trigger = image_update_trigger
        self._is_archive_enabled = is_archive_enabled
        self._last_updated_time = last_updated_time
        self._output_images = output_images
        self._platform = platform
        self._provisioning_state = provisioning_state
        self._run_error_message = run_error_message
        self._run_id = run_id
        self._run_type = run_type
        self._source_registry_auth = source_registry_auth
        self._source_trigger = source_trigger
        self._start_time = start_time
        self._status = status
        self._task = task
        self._timer_trigger = timer_trigger
        self._update_trigger_token = update_trigger_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunProperties of this RunProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_configuration(self):
        """Gets the agent_configuration of this RunProperties.


        :return: The agent_configuration of this RunProperties.
        :rtype: AgentProperties
        """
        return self._agent_configuration

    @agent_configuration.setter
    def agent_configuration(self, agent_configuration):
        """Sets the agent_configuration of this RunProperties.


        :param agent_configuration: The agent_configuration of this RunProperties.
        :type agent_configuration: AgentProperties
        """

        self._agent_configuration = agent_configuration

    @property
    def create_time(self):
        """Gets the create_time of this RunProperties.

        The time the run was scheduled.

        :return: The create_time of this RunProperties.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this RunProperties.

        The time the run was scheduled.

        :param create_time: The create_time of this RunProperties.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def custom_registries(self):
        """Gets the custom_registries of this RunProperties.

        The list of custom registries that were logged in during this run.

        :return: The custom_registries of this RunProperties.
        :rtype: List[str]
        """
        return self._custom_registries

    @custom_registries.setter
    def custom_registries(self, custom_registries):
        """Sets the custom_registries of this RunProperties.

        The list of custom registries that were logged in during this run.

        :param custom_registries: The custom_registries of this RunProperties.
        :type custom_registries: List[str]
        """

        self._custom_registries = custom_registries

    @property
    def finish_time(self):
        """Gets the finish_time of this RunProperties.

        The time the run finished.

        :return: The finish_time of this RunProperties.
        :rtype: datetime
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this RunProperties.

        The time the run finished.

        :param finish_time: The finish_time of this RunProperties.
        :type finish_time: datetime
        """

        self._finish_time = finish_time

    @property
    def image_update_trigger(self):
        """Gets the image_update_trigger of this RunProperties.


        :return: The image_update_trigger of this RunProperties.
        :rtype: ImageUpdateTrigger
        """
        return self._image_update_trigger

    @image_update_trigger.setter
    def image_update_trigger(self, image_update_trigger):
        """Sets the image_update_trigger of this RunProperties.


        :param image_update_trigger: The image_update_trigger of this RunProperties.
        :type image_update_trigger: ImageUpdateTrigger
        """

        self._image_update_trigger = image_update_trigger

    @property
    def is_archive_enabled(self):
        """Gets the is_archive_enabled of this RunProperties.

        The value that indicates whether archiving is enabled or not.

        :return: The is_archive_enabled of this RunProperties.
        :rtype: bool
        """
        return self._is_archive_enabled

    @is_archive_enabled.setter
    def is_archive_enabled(self, is_archive_enabled):
        """Sets the is_archive_enabled of this RunProperties.

        The value that indicates whether archiving is enabled or not.

        :param is_archive_enabled: The is_archive_enabled of this RunProperties.
        :type is_archive_enabled: bool
        """

        self._is_archive_enabled = is_archive_enabled

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this RunProperties.

        The last updated time for the run.

        :return: The last_updated_time of this RunProperties.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this RunProperties.

        The last updated time for the run.

        :param last_updated_time: The last_updated_time of this RunProperties.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def output_images(self):
        """Gets the output_images of this RunProperties.

        The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.

        :return: The output_images of this RunProperties.
        :rtype: List[ImageDescriptor]
        """
        return self._output_images

    @output_images.setter
    def output_images(self, output_images):
        """Sets the output_images of this RunProperties.

        The list of all images that were generated from the run. This is applicable if the run generates base image dependencies.

        :param output_images: The output_images of this RunProperties.
        :type output_images: List[ImageDescriptor]
        """

        self._output_images = output_images

    @property
    def platform(self):
        """Gets the platform of this RunProperties.


        :return: The platform of this RunProperties.
        :rtype: PlatformProperties
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this RunProperties.


        :param platform: The platform of this RunProperties.
        :type platform: PlatformProperties
        """

        self._platform = platform

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RunProperties.

        The provisioning state of a run.

        :return: The provisioning_state of this RunProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RunProperties.

        The provisioning state of a run.

        :param provisioning_state: The provisioning_state of this RunProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def run_error_message(self):
        """Gets the run_error_message of this RunProperties.

        The error message received from backend systems after the run is scheduled.

        :return: The run_error_message of this RunProperties.
        :rtype: str
        """
        return self._run_error_message

    @run_error_message.setter
    def run_error_message(self, run_error_message):
        """Sets the run_error_message of this RunProperties.

        The error message received from backend systems after the run is scheduled.

        :param run_error_message: The run_error_message of this RunProperties.
        :type run_error_message: str
        """

        self._run_error_message = run_error_message

    @property
    def run_id(self):
        """Gets the run_id of this RunProperties.

        The unique identifier for the run.

        :return: The run_id of this RunProperties.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this RunProperties.

        The unique identifier for the run.

        :param run_id: The run_id of this RunProperties.
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def run_type(self):
        """Gets the run_type of this RunProperties.

        The type of run.

        :return: The run_type of this RunProperties.
        :rtype: str
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """Sets the run_type of this RunProperties.

        The type of run.

        :param run_type: The run_type of this RunProperties.
        :type run_type: str
        """
        allowed_values = ["QuickBuild", "QuickRun", "AutoBuild", "AutoRun"]  # noqa: E501
        if run_type not in allowed_values:
            raise ValueError(
                "Invalid value for `run_type` ({0}), must be one of {1}"
                .format(run_type, allowed_values)
            )

        self._run_type = run_type

    @property
    def source_registry_auth(self):
        """Gets the source_registry_auth of this RunProperties.

        The scope of the credentials that were used to login to the source registry during this run.

        :return: The source_registry_auth of this RunProperties.
        :rtype: str
        """
        return self._source_registry_auth

    @source_registry_auth.setter
    def source_registry_auth(self, source_registry_auth):
        """Sets the source_registry_auth of this RunProperties.

        The scope of the credentials that were used to login to the source registry during this run.

        :param source_registry_auth: The source_registry_auth of this RunProperties.
        :type source_registry_auth: str
        """

        self._source_registry_auth = source_registry_auth

    @property
    def source_trigger(self):
        """Gets the source_trigger of this RunProperties.


        :return: The source_trigger of this RunProperties.
        :rtype: SourceTriggerDescriptor
        """
        return self._source_trigger

    @source_trigger.setter
    def source_trigger(self, source_trigger):
        """Sets the source_trigger of this RunProperties.


        :param source_trigger: The source_trigger of this RunProperties.
        :type source_trigger: SourceTriggerDescriptor
        """

        self._source_trigger = source_trigger

    @property
    def start_time(self):
        """Gets the start_time of this RunProperties.

        The time the run started.

        :return: The start_time of this RunProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RunProperties.

        The time the run started.

        :param start_time: The start_time of this RunProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this RunProperties.

        The current status of the run.

        :return: The status of this RunProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RunProperties.

        The current status of the run.

        :param status: The status of this RunProperties.
        :type status: str
        """
        allowed_values = ["Queued", "Started", "Running", "Succeeded", "Failed", "Canceled", "Error", "Timeout"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def task(self):
        """Gets the task of this RunProperties.

        The task against which run was scheduled.

        :return: The task of this RunProperties.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this RunProperties.

        The task against which run was scheduled.

        :param task: The task of this RunProperties.
        :type task: str
        """

        self._task = task

    @property
    def timer_trigger(self):
        """Gets the timer_trigger of this RunProperties.


        :return: The timer_trigger of this RunProperties.
        :rtype: TimerTriggerDescriptor
        """
        return self._timer_trigger

    @timer_trigger.setter
    def timer_trigger(self, timer_trigger):
        """Sets the timer_trigger of this RunProperties.


        :param timer_trigger: The timer_trigger of this RunProperties.
        :type timer_trigger: TimerTriggerDescriptor
        """

        self._timer_trigger = timer_trigger

    @property
    def update_trigger_token(self):
        """Gets the update_trigger_token of this RunProperties.

        The update trigger token passed for the Run.

        :return: The update_trigger_token of this RunProperties.
        :rtype: str
        """
        return self._update_trigger_token

    @update_trigger_token.setter
    def update_trigger_token(self, update_trigger_token):
        """Sets the update_trigger_token of this RunProperties.

        The update trigger token passed for the Run.

        :param update_trigger_token: The update_trigger_token of this RunProperties.
        :type update_trigger_token: str
        """

        self._update_trigger_token = update_trigger_token
