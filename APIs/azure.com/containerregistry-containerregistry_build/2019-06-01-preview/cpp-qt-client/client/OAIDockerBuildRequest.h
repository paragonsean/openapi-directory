/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDockerBuildRequest.h
 *
 * The parameters for a docker quick build.
 */

#ifndef OAIDockerBuildRequest_H
#define OAIDockerBuildRequest_H

#include <QJsonObject>

#include "OAIAgentProperties.h"
#include "OAIArgument.h"
#include "OAICredentials.h"
#include "OAIPlatformProperties.h"
#include "OAIRunRequest.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAgentProperties;
class OAIArgument;
class OAICredentials;
class OAIPlatformProperties;

class OAIDockerBuildRequest : public OAIObject {
public:
    OAIDockerBuildRequest();
    OAIDockerBuildRequest(QString json);
    ~OAIDockerBuildRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAgentProperties getAgentConfiguration() const;
    void setAgentConfiguration(const OAIAgentProperties &agent_configuration);
    bool is_agent_configuration_Set() const;
    bool is_agent_configuration_Valid() const;

    QList<OAIArgument> getArguments() const;
    void setArguments(const QList<OAIArgument> &arguments);
    bool is_arguments_Set() const;
    bool is_arguments_Valid() const;

    OAICredentials getCredentials() const;
    void setCredentials(const OAICredentials &credentials);
    bool is_credentials_Set() const;
    bool is_credentials_Valid() const;

    QString getDockerFilePath() const;
    void setDockerFilePath(const QString &docker_file_path);
    bool is_docker_file_path_Set() const;
    bool is_docker_file_path_Valid() const;

    QList<QString> getImageNames() const;
    void setImageNames(const QList<QString> &image_names);
    bool is_image_names_Set() const;
    bool is_image_names_Valid() const;

    bool isIsPushEnabled() const;
    void setIsPushEnabled(const bool &is_push_enabled);
    bool is_is_push_enabled_Set() const;
    bool is_is_push_enabled_Valid() const;

    bool isNoCache() const;
    void setNoCache(const bool &no_cache);
    bool is_no_cache_Set() const;
    bool is_no_cache_Valid() const;

    OAIPlatformProperties getPlatform() const;
    void setPlatform(const OAIPlatformProperties &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getSourceLocation() const;
    void setSourceLocation(const QString &source_location);
    bool is_source_location_Set() const;
    bool is_source_location_Valid() const;

    QString getTarget() const;
    void setTarget(const QString &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    bool isIsArchiveEnabled() const;
    void setIsArchiveEnabled(const bool &is_archive_enabled);
    bool is_is_archive_enabled_Set() const;
    bool is_is_archive_enabled_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAgentProperties m_agent_configuration;
    bool m_agent_configuration_isSet;
    bool m_agent_configuration_isValid;

    QList<OAIArgument> m_arguments;
    bool m_arguments_isSet;
    bool m_arguments_isValid;

    OAICredentials m_credentials;
    bool m_credentials_isSet;
    bool m_credentials_isValid;

    QString m_docker_file_path;
    bool m_docker_file_path_isSet;
    bool m_docker_file_path_isValid;

    QList<QString> m_image_names;
    bool m_image_names_isSet;
    bool m_image_names_isValid;

    bool m_is_push_enabled;
    bool m_is_push_enabled_isSet;
    bool m_is_push_enabled_isValid;

    bool m_no_cache;
    bool m_no_cache_isSet;
    bool m_no_cache_isValid;

    OAIPlatformProperties m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_source_location;
    bool m_source_location_isSet;
    bool m_source_location_isValid;

    QString m_target;
    bool m_target_isSet;
    bool m_target_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    bool m_is_archive_enabled;
    bool m_is_archive_enabled_isSet;
    bool m_is_archive_enabled_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDockerBuildRequest)

#endif // OAIDockerBuildRequest_H
