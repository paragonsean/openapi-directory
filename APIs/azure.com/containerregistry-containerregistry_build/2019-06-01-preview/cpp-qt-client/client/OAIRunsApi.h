/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRunsApi_H
#define OAI_OAIRunsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorSchema.h"
#include "OAIRun.h"
#include "OAIRunGetLogResult.h"
#include "OAIRunListResult.h"
#include "OAIRunUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRunsApi : public QObject {
    Q_OBJECT

public:
    OAIRunsApi(const int timeOut = 0);
    ~OAIRunsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  run_id QString [required]
    */
    virtual void runsCancel(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &run_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  run_id QString [required]
    */
    virtual void runsGet(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &run_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  run_id QString [required]
    */
    virtual void runsGetLogSasUrl(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &run_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void runsList(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  run_id QString [required]
    * @param[in]  run_update_parameters OAIRunUpdateParameters [required]
    */
    virtual void runsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &run_id, const OAIRunUpdateParameters &run_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void runsCancelCallback(OAIHttpRequestWorker *worker);
    void runsGetCallback(OAIHttpRequestWorker *worker);
    void runsGetLogSasUrlCallback(OAIHttpRequestWorker *worker);
    void runsListCallback(OAIHttpRequestWorker *worker);
    void runsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void runsCancelSignal();
    void runsGetSignal(OAIRun summary);
    void runsGetLogSasUrlSignal(OAIRunGetLogResult summary);
    void runsListSignal(OAIRunListResult summary);
    void runsUpdateSignal(OAIRun summary);


    void runsCancelSignalFull(OAIHttpRequestWorker *worker);
    void runsGetSignalFull(OAIHttpRequestWorker *worker, OAIRun summary);
    void runsGetLogSasUrlSignalFull(OAIHttpRequestWorker *worker, OAIRunGetLogResult summary);
    void runsListSignalFull(OAIHttpRequestWorker *worker, OAIRunListResult summary);
    void runsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRun summary);

    Q_DECL_DEPRECATED_X("Use runsCancelSignalError() instead")
    void runsCancelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void runsCancelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsGetSignalError() instead")
    void runsGetSignalE(OAIRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runsGetSignalError(OAIRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsGetLogSasUrlSignalError() instead")
    void runsGetLogSasUrlSignalE(OAIRunGetLogResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runsGetLogSasUrlSignalError(OAIRunGetLogResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsListSignalError() instead")
    void runsListSignalE(OAIRunListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runsListSignalError(OAIRunListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsUpdateSignalError() instead")
    void runsUpdateSignalE(OAIRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runsUpdateSignalError(OAIRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use runsCancelSignalErrorFull() instead")
    void runsCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runsCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsGetSignalErrorFull() instead")
    void runsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsGetLogSasUrlSignalErrorFull() instead")
    void runsGetLogSasUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runsGetLogSasUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsListSignalErrorFull() instead")
    void runsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runsUpdateSignalErrorFull() instead")
    void runsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
