/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITriggerUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITriggerUpdateParameters::OAITriggerUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITriggerUpdateParameters::OAITriggerUpdateParameters() {
    this->initializeModel();
}

OAITriggerUpdateParameters::~OAITriggerUpdateParameters() {}

void OAITriggerUpdateParameters::initializeModel() {

    m_base_image_trigger_isSet = false;
    m_base_image_trigger_isValid = false;

    m_source_triggers_isSet = false;
    m_source_triggers_isValid = false;

    m_timer_triggers_isSet = false;
    m_timer_triggers_isValid = false;
}

void OAITriggerUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITriggerUpdateParameters::fromJsonObject(QJsonObject json) {

    m_base_image_trigger_isValid = ::OpenAPI::fromJsonValue(m_base_image_trigger, json[QString("baseImageTrigger")]);
    m_base_image_trigger_isSet = !json[QString("baseImageTrigger")].isNull() && m_base_image_trigger_isValid;

    m_source_triggers_isValid = ::OpenAPI::fromJsonValue(m_source_triggers, json[QString("sourceTriggers")]);
    m_source_triggers_isSet = !json[QString("sourceTriggers")].isNull() && m_source_triggers_isValid;

    m_timer_triggers_isValid = ::OpenAPI::fromJsonValue(m_timer_triggers, json[QString("timerTriggers")]);
    m_timer_triggers_isSet = !json[QString("timerTriggers")].isNull() && m_timer_triggers_isValid;
}

QString OAITriggerUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITriggerUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_base_image_trigger.isSet()) {
        obj.insert(QString("baseImageTrigger"), ::OpenAPI::toJsonValue(m_base_image_trigger));
    }
    if (m_source_triggers.size() > 0) {
        obj.insert(QString("sourceTriggers"), ::OpenAPI::toJsonValue(m_source_triggers));
    }
    if (m_timer_triggers.size() > 0) {
        obj.insert(QString("timerTriggers"), ::OpenAPI::toJsonValue(m_timer_triggers));
    }
    return obj;
}

OAIBaseImageTriggerUpdateParameters OAITriggerUpdateParameters::getBaseImageTrigger() const {
    return m_base_image_trigger;
}
void OAITriggerUpdateParameters::setBaseImageTrigger(const OAIBaseImageTriggerUpdateParameters &base_image_trigger) {
    m_base_image_trigger = base_image_trigger;
    m_base_image_trigger_isSet = true;
}

bool OAITriggerUpdateParameters::is_base_image_trigger_Set() const{
    return m_base_image_trigger_isSet;
}

bool OAITriggerUpdateParameters::is_base_image_trigger_Valid() const{
    return m_base_image_trigger_isValid;
}

QList<OAISourceTriggerUpdateParameters> OAITriggerUpdateParameters::getSourceTriggers() const {
    return m_source_triggers;
}
void OAITriggerUpdateParameters::setSourceTriggers(const QList<OAISourceTriggerUpdateParameters> &source_triggers) {
    m_source_triggers = source_triggers;
    m_source_triggers_isSet = true;
}

bool OAITriggerUpdateParameters::is_source_triggers_Set() const{
    return m_source_triggers_isSet;
}

bool OAITriggerUpdateParameters::is_source_triggers_Valid() const{
    return m_source_triggers_isValid;
}

QList<OAITimerTriggerUpdateParameters> OAITriggerUpdateParameters::getTimerTriggers() const {
    return m_timer_triggers;
}
void OAITriggerUpdateParameters::setTimerTriggers(const QList<OAITimerTriggerUpdateParameters> &timer_triggers) {
    m_timer_triggers = timer_triggers;
    m_timer_triggers_isSet = true;
}

bool OAITriggerUpdateParameters::is_timer_triggers_Set() const{
    return m_timer_triggers_isSet;
}

bool OAITriggerUpdateParameters::is_timer_triggers_Valid() const{
    return m_timer_triggers_isValid;
}

bool OAITriggerUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_image_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_triggers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_triggers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITriggerUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
