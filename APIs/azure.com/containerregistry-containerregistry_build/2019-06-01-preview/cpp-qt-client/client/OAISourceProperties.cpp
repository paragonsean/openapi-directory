/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceProperties::OAISourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceProperties::OAISourceProperties() {
    this->initializeModel();
}

OAISourceProperties::~OAISourceProperties() {}

void OAISourceProperties::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_repository_url_isSet = false;
    m_repository_url_isValid = false;

    m_source_control_auth_properties_isSet = false;
    m_source_control_auth_properties_isValid = false;

    m_source_control_type_isSet = false;
    m_source_control_type_isValid = false;
}

void OAISourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceProperties::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_repository_url_isValid = ::OpenAPI::fromJsonValue(m_repository_url, json[QString("repositoryUrl")]);
    m_repository_url_isSet = !json[QString("repositoryUrl")].isNull() && m_repository_url_isValid;

    m_source_control_auth_properties_isValid = ::OpenAPI::fromJsonValue(m_source_control_auth_properties, json[QString("sourceControlAuthProperties")]);
    m_source_control_auth_properties_isSet = !json[QString("sourceControlAuthProperties")].isNull() && m_source_control_auth_properties_isValid;

    m_source_control_type_isValid = ::OpenAPI::fromJsonValue(m_source_control_type, json[QString("sourceControlType")]);
    m_source_control_type_isSet = !json[QString("sourceControlType")].isNull() && m_source_control_type_isValid;
}

QString OAISourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_repository_url_isSet) {
        obj.insert(QString("repositoryUrl"), ::OpenAPI::toJsonValue(m_repository_url));
    }
    if (m_source_control_auth_properties.isSet()) {
        obj.insert(QString("sourceControlAuthProperties"), ::OpenAPI::toJsonValue(m_source_control_auth_properties));
    }
    if (m_source_control_type_isSet) {
        obj.insert(QString("sourceControlType"), ::OpenAPI::toJsonValue(m_source_control_type));
    }
    return obj;
}

QString OAISourceProperties::getBranch() const {
    return m_branch;
}
void OAISourceProperties::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAISourceProperties::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAISourceProperties::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAISourceProperties::getRepositoryUrl() const {
    return m_repository_url;
}
void OAISourceProperties::setRepositoryUrl(const QString &repository_url) {
    m_repository_url = repository_url;
    m_repository_url_isSet = true;
}

bool OAISourceProperties::is_repository_url_Set() const{
    return m_repository_url_isSet;
}

bool OAISourceProperties::is_repository_url_Valid() const{
    return m_repository_url_isValid;
}

OAIAuthInfo OAISourceProperties::getSourceControlAuthProperties() const {
    return m_source_control_auth_properties;
}
void OAISourceProperties::setSourceControlAuthProperties(const OAIAuthInfo &source_control_auth_properties) {
    m_source_control_auth_properties = source_control_auth_properties;
    m_source_control_auth_properties_isSet = true;
}

bool OAISourceProperties::is_source_control_auth_properties_Set() const{
    return m_source_control_auth_properties_isSet;
}

bool OAISourceProperties::is_source_control_auth_properties_Valid() const{
    return m_source_control_auth_properties_isValid;
}

QString OAISourceProperties::getSourceControlType() const {
    return m_source_control_type;
}
void OAISourceProperties::setSourceControlType(const QString &source_control_type) {
    m_source_control_type = source_control_type;
    m_source_control_type_isSet = true;
}

bool OAISourceProperties::is_source_control_type_Set() const{
    return m_source_control_type_isSet;
}

bool OAISourceProperties::is_source_control_type_Valid() const{
    return m_source_control_type_isValid;
}

bool OAISourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_control_auth_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_control_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_url_isValid && m_source_control_type_isValid && true;
}

} // namespace OpenAPI
