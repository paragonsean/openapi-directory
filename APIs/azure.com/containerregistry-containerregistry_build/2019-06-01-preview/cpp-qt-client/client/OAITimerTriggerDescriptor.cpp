/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimerTriggerDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimerTriggerDescriptor::OAITimerTriggerDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimerTriggerDescriptor::OAITimerTriggerDescriptor() {
    this->initializeModel();
}

OAITimerTriggerDescriptor::~OAITimerTriggerDescriptor() {}

void OAITimerTriggerDescriptor::initializeModel() {

    m_schedule_occurrence_isSet = false;
    m_schedule_occurrence_isValid = false;

    m_timer_trigger_name_isSet = false;
    m_timer_trigger_name_isValid = false;
}

void OAITimerTriggerDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimerTriggerDescriptor::fromJsonObject(QJsonObject json) {

    m_schedule_occurrence_isValid = ::OpenAPI::fromJsonValue(m_schedule_occurrence, json[QString("scheduleOccurrence")]);
    m_schedule_occurrence_isSet = !json[QString("scheduleOccurrence")].isNull() && m_schedule_occurrence_isValid;

    m_timer_trigger_name_isValid = ::OpenAPI::fromJsonValue(m_timer_trigger_name, json[QString("timerTriggerName")]);
    m_timer_trigger_name_isSet = !json[QString("timerTriggerName")].isNull() && m_timer_trigger_name_isValid;
}

QString OAITimerTriggerDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimerTriggerDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_schedule_occurrence_isSet) {
        obj.insert(QString("scheduleOccurrence"), ::OpenAPI::toJsonValue(m_schedule_occurrence));
    }
    if (m_timer_trigger_name_isSet) {
        obj.insert(QString("timerTriggerName"), ::OpenAPI::toJsonValue(m_timer_trigger_name));
    }
    return obj;
}

QString OAITimerTriggerDescriptor::getScheduleOccurrence() const {
    return m_schedule_occurrence;
}
void OAITimerTriggerDescriptor::setScheduleOccurrence(const QString &schedule_occurrence) {
    m_schedule_occurrence = schedule_occurrence;
    m_schedule_occurrence_isSet = true;
}

bool OAITimerTriggerDescriptor::is_schedule_occurrence_Set() const{
    return m_schedule_occurrence_isSet;
}

bool OAITimerTriggerDescriptor::is_schedule_occurrence_Valid() const{
    return m_schedule_occurrence_isValid;
}

QString OAITimerTriggerDescriptor::getTimerTriggerName() const {
    return m_timer_trigger_name;
}
void OAITimerTriggerDescriptor::setTimerTriggerName(const QString &timer_trigger_name) {
    m_timer_trigger_name = timer_trigger_name;
    m_timer_trigger_name_isSet = true;
}

bool OAITimerTriggerDescriptor::is_timer_trigger_name_Set() const{
    return m_timer_trigger_name_isSet;
}

bool OAITimerTriggerDescriptor::is_timer_trigger_name_Valid() const{
    return m_timer_trigger_name_isValid;
}

bool OAITimerTriggerDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schedule_occurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_trigger_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimerTriggerDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
