/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Run;
import org.openapitools.client.model.RunRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of task run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:55.681670-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskRunProperties {
  public static final String SERIALIZED_NAME_FORCE_UPDATE_TAG = "forceUpdateTag";
  @SerializedName(SERIALIZED_NAME_FORCE_UPDATE_TAG)
  private String forceUpdateTag;

  /**
   * The provisioning state of this task run
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_RUN_REQUEST = "runRequest";
  @SerializedName(SERIALIZED_NAME_RUN_REQUEST)
  private RunRequest runRequest;

  public static final String SERIALIZED_NAME_RUN_RESULT = "runResult";
  @SerializedName(SERIALIZED_NAME_RUN_RESULT)
  private Run runResult;

  public TaskRunProperties() {
  }

  public TaskRunProperties(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public TaskRunProperties forceUpdateTag(String forceUpdateTag) {
    this.forceUpdateTag = forceUpdateTag;
    return this;
  }

  /**
   * How the run should be forced to rerun even if the run request configuration has not changed
   * @return forceUpdateTag
   */
  @javax.annotation.Nullable
  public String getForceUpdateTag() {
    return forceUpdateTag;
  }

  public void setForceUpdateTag(String forceUpdateTag) {
    this.forceUpdateTag = forceUpdateTag;
  }


  /**
   * The provisioning state of this task run
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public TaskRunProperties runRequest(RunRequest runRequest) {
    this.runRequest = runRequest;
    return this;
  }

  /**
   * Get runRequest
   * @return runRequest
   */
  @javax.annotation.Nullable
  public RunRequest getRunRequest() {
    return runRequest;
  }

  public void setRunRequest(RunRequest runRequest) {
    this.runRequest = runRequest;
  }


  public TaskRunProperties runResult(Run runResult) {
    this.runResult = runResult;
    return this;
  }

  /**
   * Get runResult
   * @return runResult
   */
  @javax.annotation.Nullable
  public Run getRunResult() {
    return runResult;
  }

  public void setRunResult(Run runResult) {
    this.runResult = runResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskRunProperties taskRunProperties = (TaskRunProperties) o;
    return Objects.equals(this.forceUpdateTag, taskRunProperties.forceUpdateTag) &&
        Objects.equals(this.provisioningState, taskRunProperties.provisioningState) &&
        Objects.equals(this.runRequest, taskRunProperties.runRequest) &&
        Objects.equals(this.runResult, taskRunProperties.runResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forceUpdateTag, provisioningState, runRequest, runResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskRunProperties {\n");
    sb.append("    forceUpdateTag: ").append(toIndentedString(forceUpdateTag)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    runRequest: ").append(toIndentedString(runRequest)).append("\n");
    sb.append("    runResult: ").append(toIndentedString(runResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forceUpdateTag");
    openapiFields.add("provisioningState");
    openapiFields.add("runRequest");
    openapiFields.add("runResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskRunProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskRunProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskRunProperties is not found in the empty JSON string", TaskRunProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskRunProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskRunProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("forceUpdateTag") != null && !jsonObj.get("forceUpdateTag").isJsonNull()) && !jsonObj.get("forceUpdateTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forceUpdateTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forceUpdateTag").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `runRequest`
      if (jsonObj.get("runRequest") != null && !jsonObj.get("runRequest").isJsonNull()) {
        RunRequest.validateJsonElement(jsonObj.get("runRequest"));
      }
      // validate the optional field `runResult`
      if (jsonObj.get("runResult") != null && !jsonObj.get("runResult").isJsonNull()) {
        Run.validateJsonElement(jsonObj.get("runResult"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskRunProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskRunProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskRunProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskRunProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskRunProperties>() {
           @Override
           public void write(JsonWriter out, TaskRunProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskRunProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskRunProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskRunProperties
   * @throws IOException if the JSON string is invalid with respect to TaskRunProperties
   */
  public static TaskRunProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskRunProperties.class);
  }

  /**
   * Convert an instance of TaskRunProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

