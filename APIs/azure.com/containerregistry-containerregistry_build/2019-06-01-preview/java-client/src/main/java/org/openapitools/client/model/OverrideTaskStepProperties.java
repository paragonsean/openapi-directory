/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Argument;
import org.openapitools.client.model.SetValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OverrideTaskStepProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:55.681670-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OverrideTaskStepProperties {
  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private List<Argument> arguments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTEXT_PATH = "contextPath";
  @SerializedName(SERIALIZED_NAME_CONTEXT_PATH)
  private String contextPath;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String _file;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_UPDATE_TRIGGER_TOKEN = "updateTriggerToken";
  @SerializedName(SERIALIZED_NAME_UPDATE_TRIGGER_TOKEN)
  private String updateTriggerToken;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<SetValue> values = new ArrayList<>();

  public OverrideTaskStepProperties() {
  }

  public OverrideTaskStepProperties arguments(List<Argument> arguments) {
    this.arguments = arguments;
    return this;
  }

  public OverrideTaskStepProperties addArgumentsItem(Argument argumentsItem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<>();
    }
    this.arguments.add(argumentsItem);
    return this;
  }

  /**
   * Gets or sets the collection of override arguments to be used when  executing a build step.
   * @return arguments
   */
  @javax.annotation.Nullable
  public List<Argument> getArguments() {
    return arguments;
  }

  public void setArguments(List<Argument> arguments) {
    this.arguments = arguments;
  }


  public OverrideTaskStepProperties contextPath(String contextPath) {
    this.contextPath = contextPath;
    return this;
  }

  /**
   * The source context against which run has to be queued.
   * @return contextPath
   */
  @javax.annotation.Nullable
  public String getContextPath() {
    return contextPath;
  }

  public void setContextPath(String contextPath) {
    this.contextPath = contextPath;
  }


  public OverrideTaskStepProperties _file(String _file) {
    this._file = _file;
    return this;
  }

  /**
   * The file against which run has to be queued.
   * @return _file
   */
  @javax.annotation.Nullable
  public String getFile() {
    return _file;
  }

  public void setFile(String _file) {
    this._file = _file;
  }


  public OverrideTaskStepProperties target(String target) {
    this.target = target;
    return this;
  }

  /**
   * The name of the target build stage for the docker build.
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public OverrideTaskStepProperties updateTriggerToken(String updateTriggerToken) {
    this.updateTriggerToken = updateTriggerToken;
    return this;
  }

  /**
   * Base64 encoded update trigger token that will be attached with the base image trigger webhook.
   * @return updateTriggerToken
   */
  @javax.annotation.Nullable
  public String getUpdateTriggerToken() {
    return updateTriggerToken;
  }

  public void setUpdateTriggerToken(String updateTriggerToken) {
    this.updateTriggerToken = updateTriggerToken;
  }


  public OverrideTaskStepProperties values(List<SetValue> values) {
    this.values = values;
    return this;
  }

  public OverrideTaskStepProperties addValuesItem(SetValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * The collection of overridable values that can be passed when running a Task.
   * @return values
   */
  @javax.annotation.Nullable
  public List<SetValue> getValues() {
    return values;
  }

  public void setValues(List<SetValue> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OverrideTaskStepProperties overrideTaskStepProperties = (OverrideTaskStepProperties) o;
    return Objects.equals(this.arguments, overrideTaskStepProperties.arguments) &&
        Objects.equals(this.contextPath, overrideTaskStepProperties.contextPath) &&
        Objects.equals(this._file, overrideTaskStepProperties._file) &&
        Objects.equals(this.target, overrideTaskStepProperties.target) &&
        Objects.equals(this.updateTriggerToken, overrideTaskStepProperties.updateTriggerToken) &&
        Objects.equals(this.values, overrideTaskStepProperties.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arguments, contextPath, _file, target, updateTriggerToken, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OverrideTaskStepProperties {\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    contextPath: ").append(toIndentedString(contextPath)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    updateTriggerToken: ").append(toIndentedString(updateTriggerToken)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arguments");
    openapiFields.add("contextPath");
    openapiFields.add("file");
    openapiFields.add("target");
    openapiFields.add("updateTriggerToken");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OverrideTaskStepProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OverrideTaskStepProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OverrideTaskStepProperties is not found in the empty JSON string", OverrideTaskStepProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OverrideTaskStepProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OverrideTaskStepProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull()) {
        JsonArray jsonArrayarguments = jsonObj.getAsJsonArray("arguments");
        if (jsonArrayarguments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("arguments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `arguments` to be an array in the JSON string but got `%s`", jsonObj.get("arguments").toString()));
          }

          // validate the optional field `arguments` (array)
          for (int i = 0; i < jsonArrayarguments.size(); i++) {
            Argument.validateJsonElement(jsonArrayarguments.get(i));
          };
        }
      }
      if ((jsonObj.get("contextPath") != null && !jsonObj.get("contextPath").isJsonNull()) && !jsonObj.get("contextPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contextPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contextPath").toString()));
      }
      if ((jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) && !jsonObj.get("file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("updateTriggerToken") != null && !jsonObj.get("updateTriggerToken").isJsonNull()) && !jsonObj.get("updateTriggerToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTriggerToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTriggerToken").toString()));
      }
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
        if (jsonArrayvalues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
          }

          // validate the optional field `values` (array)
          for (int i = 0; i < jsonArrayvalues.size(); i++) {
            SetValue.validateJsonElement(jsonArrayvalues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OverrideTaskStepProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OverrideTaskStepProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OverrideTaskStepProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OverrideTaskStepProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<OverrideTaskStepProperties>() {
           @Override
           public void write(JsonWriter out, OverrideTaskStepProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OverrideTaskStepProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OverrideTaskStepProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OverrideTaskStepProperties
   * @throws IOException if the JSON string is invalid with respect to OverrideTaskStepProperties
   */
  public static OverrideTaskStepProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OverrideTaskStepProperties.class);
  }

  /**
   * Convert an instance of OverrideTaskStepProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

