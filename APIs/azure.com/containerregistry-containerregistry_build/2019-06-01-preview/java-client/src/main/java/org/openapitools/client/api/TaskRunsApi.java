/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorSchema;
import org.openapitools.client.model.TaskRun;
import org.openapitools.client.model.TaskRunListResult;
import org.openapitools.client.model.TaskRunUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskRunsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskRunsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskRunsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for taskRunsCreate
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The name of task run. (required)
     * @param taskRun The parameters of a run that needs to scheduled. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskRunsCreateCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, TaskRun taskRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskRun;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "taskRunName" + "}", localVarApiClient.escapeString(taskRunName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskRunsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, TaskRun taskRun, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling taskRunsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling taskRunsCreate(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling taskRunsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling taskRunsCreate(Async)");
        }

        // verify the required parameter 'taskRunName' is set
        if (taskRunName == null) {
            throw new ApiException("Missing the required parameter 'taskRunName' when calling taskRunsCreate(Async)");
        }

        // verify the required parameter 'taskRun' is set
        if (taskRun == null) {
            throw new ApiException("Missing the required parameter 'taskRun' when calling taskRunsCreate(Async)");
        }

        return taskRunsCreateCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, taskRun, _callback);

    }

    /**
     * 
     * Creates a task run for a container registry with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The name of task run. (required)
     * @param taskRun The parameters of a run that needs to scheduled. (required)
     * @return TaskRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public TaskRun taskRunsCreate(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, TaskRun taskRun) throws ApiException {
        ApiResponse<TaskRun> localVarResp = taskRunsCreateWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, taskRun);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a task run for a container registry with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The name of task run. (required)
     * @param taskRun The parameters of a run that needs to scheduled. (required)
     * @return ApiResponse&lt;TaskRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskRun> taskRunsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, TaskRun taskRun) throws ApiException {
        okhttp3.Call localVarCall = taskRunsCreateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, taskRun, null);
        Type localVarReturnType = new TypeToken<TaskRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a task run for a container registry with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The name of task run. (required)
     * @param taskRun The parameters of a run that needs to scheduled. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskRunsCreateAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, TaskRun taskRun, final ApiCallback<TaskRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskRunsCreateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, taskRun, _callback);
        Type localVarReturnType = new TypeToken<TaskRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskRunsDelete
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The task run name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskRunsDeleteCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "taskRunName" + "}", localVarApiClient.escapeString(taskRunName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskRunsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling taskRunsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling taskRunsDelete(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling taskRunsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling taskRunsDelete(Async)");
        }

        // verify the required parameter 'taskRunName' is set
        if (taskRunName == null) {
            throw new ApiException("Missing the required parameter 'taskRunName' when calling taskRunsDelete(Async)");
        }

        return taskRunsDeleteCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, _callback);

    }

    /**
     * 
     * Deletes a specified task run resource.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The task run name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void taskRunsDelete(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName) throws ApiException {
        taskRunsDeleteWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName);
    }

    /**
     * 
     * Deletes a specified task run resource.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The task run name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> taskRunsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName) throws ApiException {
        okhttp3.Call localVarCall = taskRunsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specified task run resource.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The task run name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskRunsDeleteAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskRunsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskRunsGet
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The run request name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/run doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskRunsGetCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "taskRunName" + "}", localVarApiClient.escapeString(taskRunName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskRunsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling taskRunsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling taskRunsGet(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling taskRunsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling taskRunsGet(Async)");
        }

        // verify the required parameter 'taskRunName' is set
        if (taskRunName == null) {
            throw new ApiException("Missing the required parameter 'taskRunName' when calling taskRunsGet(Async)");
        }

        return taskRunsGetCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, _callback);

    }

    /**
     * 
     * Gets the detailed information for a given task run.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The run request name. (required)
     * @return TaskRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/run doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public TaskRun taskRunsGet(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName) throws ApiException {
        ApiResponse<TaskRun> localVarResp = taskRunsGetWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the detailed information for a given task run.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The run request name. (required)
     * @return ApiResponse&lt;TaskRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/run doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskRun> taskRunsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName) throws ApiException {
        okhttp3.Call localVarCall = taskRunsGetValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, null);
        Type localVarReturnType = new TypeToken<TaskRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the detailed information for a given task run.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The run request name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry/run doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskRunsGetAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, final ApiCallback<TaskRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskRunsGetValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, _callback);
        Type localVarReturnType = new TypeToken<TaskRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskRunsList
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskRunsListCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskRunsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling taskRunsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling taskRunsList(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling taskRunsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling taskRunsList(Async)");
        }

        return taskRunsListCall(subscriptionId, resourceGroupName, registryName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the task runs for a specified container registry.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @return TaskRunListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public TaskRunListResult taskRunsList(String subscriptionId, String resourceGroupName, String registryName, String apiVersion) throws ApiException {
        ApiResponse<TaskRunListResult> localVarResp = taskRunsListWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the task runs for a specified container registry.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @return ApiResponse&lt;TaskRunListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskRunListResult> taskRunsListWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = taskRunsListValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TaskRunListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the task runs for a specified container registry.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskRunsListAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, final ApiCallback<TaskRunListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskRunsListValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TaskRunListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskRunsUpdate
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The task run name. (required)
     * @param updateParameters The parameters for updating a task run. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskRunsUpdateCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, TaskRunUpdateParameters updateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "taskRunName" + "}", localVarApiClient.escapeString(taskRunName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskRunsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, TaskRunUpdateParameters updateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling taskRunsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling taskRunsUpdate(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling taskRunsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling taskRunsUpdate(Async)");
        }

        // verify the required parameter 'taskRunName' is set
        if (taskRunName == null) {
            throw new ApiException("Missing the required parameter 'taskRunName' when calling taskRunsUpdate(Async)");
        }

        // verify the required parameter 'updateParameters' is set
        if (updateParameters == null) {
            throw new ApiException("Missing the required parameter 'updateParameters' when calling taskRunsUpdate(Async)");
        }

        return taskRunsUpdateCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, updateParameters, _callback);

    }

    /**
     * 
     * Updates a task run with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The task run name. (required)
     * @param updateParameters The parameters for updating a task run. (required)
     * @return TaskRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public TaskRun taskRunsUpdate(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, TaskRunUpdateParameters updateParameters) throws ApiException {
        ApiResponse<TaskRun> localVarResp = taskRunsUpdateWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, updateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a task run with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The task run name. (required)
     * @param updateParameters The parameters for updating a task run. (required)
     * @return ApiResponse&lt;TaskRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskRun> taskRunsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, TaskRunUpdateParameters updateParameters) throws ApiException {
        okhttp3.Call localVarCall = taskRunsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, updateParameters, null);
        Type localVarReturnType = new TypeToken<TaskRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a task run with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskRunName The task run name. (required)
     * @param updateParameters The parameters for updating a task run. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskRunsUpdateAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskRunName, TaskRunUpdateParameters updateParameters, final ApiCallback<TaskRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskRunsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskRunName, updateParameters, _callback);
        Type localVarReturnType = new TypeToken<TaskRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
