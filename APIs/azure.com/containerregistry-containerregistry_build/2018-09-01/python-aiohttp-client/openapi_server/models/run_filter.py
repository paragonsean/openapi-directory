# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: datetime=None, finish_time: datetime=None, is_archive_enabled: bool=None, output_image_manifests: str=None, run_id: str=None, run_type: str=None, status: str=None, task_name: str=None):
        """RunFilter - a model defined in OpenAPI

        :param create_time: The create_time of this RunFilter.
        :param finish_time: The finish_time of this RunFilter.
        :param is_archive_enabled: The is_archive_enabled of this RunFilter.
        :param output_image_manifests: The output_image_manifests of this RunFilter.
        :param run_id: The run_id of this RunFilter.
        :param run_type: The run_type of this RunFilter.
        :param status: The status of this RunFilter.
        :param task_name: The task_name of this RunFilter.
        """
        self.openapi_types = {
            'create_time': datetime,
            'finish_time': datetime,
            'is_archive_enabled': bool,
            'output_image_manifests': str,
            'run_id': str,
            'run_type': str,
            'status': str,
            'task_name': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'finish_time': 'finishTime',
            'is_archive_enabled': 'isArchiveEnabled',
            'output_image_manifests': 'outputImageManifests',
            'run_id': 'runId',
            'run_type': 'runType',
            'status': 'status',
            'task_name': 'taskName'
        }

        self._create_time = create_time
        self._finish_time = finish_time
        self._is_archive_enabled = is_archive_enabled
        self._output_image_manifests = output_image_manifests
        self._run_id = run_id
        self._run_type = run_type
        self._status = status
        self._task_name = task_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunFilter of this RunFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this RunFilter.

        The create time for a run.

        :return: The create_time of this RunFilter.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this RunFilter.

        The create time for a run.

        :param create_time: The create_time of this RunFilter.
        :type create_time: datetime
        """

        self._create_time = create_time

    @property
    def finish_time(self):
        """Gets the finish_time of this RunFilter.

        The time the run finished.

        :return: The finish_time of this RunFilter.
        :rtype: datetime
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this RunFilter.

        The time the run finished.

        :param finish_time: The finish_time of this RunFilter.
        :type finish_time: datetime
        """

        self._finish_time = finish_time

    @property
    def is_archive_enabled(self):
        """Gets the is_archive_enabled of this RunFilter.

        The value that indicates whether archiving is enabled or not.

        :return: The is_archive_enabled of this RunFilter.
        :rtype: bool
        """
        return self._is_archive_enabled

    @is_archive_enabled.setter
    def is_archive_enabled(self, is_archive_enabled):
        """Sets the is_archive_enabled of this RunFilter.

        The value that indicates whether archiving is enabled or not.

        :param is_archive_enabled: The is_archive_enabled of this RunFilter.
        :type is_archive_enabled: bool
        """

        self._is_archive_enabled = is_archive_enabled

    @property
    def output_image_manifests(self):
        """Gets the output_image_manifests of this RunFilter.

        The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of  build type.

        :return: The output_image_manifests of this RunFilter.
        :rtype: str
        """
        return self._output_image_manifests

    @output_image_manifests.setter
    def output_image_manifests(self, output_image_manifests):
        """Sets the output_image_manifests of this RunFilter.

        The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of  build type.

        :param output_image_manifests: The output_image_manifests of this RunFilter.
        :type output_image_manifests: str
        """

        self._output_image_manifests = output_image_manifests

    @property
    def run_id(self):
        """Gets the run_id of this RunFilter.

        The unique identifier for the run.

        :return: The run_id of this RunFilter.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this RunFilter.

        The unique identifier for the run.

        :param run_id: The run_id of this RunFilter.
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def run_type(self):
        """Gets the run_type of this RunFilter.

        The type of run.

        :return: The run_type of this RunFilter.
        :rtype: str
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """Sets the run_type of this RunFilter.

        The type of run.

        :param run_type: The run_type of this RunFilter.
        :type run_type: str
        """
        allowed_values = ["QuickBuild", "QuickRun", "AutoBuild", "AutoRun"]  # noqa: E501
        if run_type not in allowed_values:
            raise ValueError(
                "Invalid value for `run_type` ({0}), must be one of {1}"
                .format(run_type, allowed_values)
            )

        self._run_type = run_type

    @property
    def status(self):
        """Gets the status of this RunFilter.

        The current status of the run.

        :return: The status of this RunFilter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RunFilter.

        The current status of the run.

        :param status: The status of this RunFilter.
        :type status: str
        """
        allowed_values = ["Queued", "Started", "Running", "Succeeded", "Failed", "Canceled", "Error", "Timeout"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def task_name(self):
        """Gets the task_name of this RunFilter.

        The name of the task that the run corresponds to.

        :return: The task_name of this RunFilter.
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this RunFilter.

        The name of the task that the run corresponds to.

        :param task_name: The task_name of this RunFilter.
        :type task_name: str
        """

        self._task_name = task_name
