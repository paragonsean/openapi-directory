# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_properties import AgentProperties
from openapi_server.models.credentials import Credentials
from openapi_server.models.platform_properties import PlatformProperties
from openapi_server.models.task_step_properties import TaskStepProperties
from openapi_server.models.trigger_properties import TriggerProperties
from openapi_server import util


class TaskProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_configuration: AgentProperties=None, creation_date: datetime=None, credentials: Credentials=None, platform: PlatformProperties=None, provisioning_state: str=None, status: str=None, step: TaskStepProperties=None, timeout: int=3600, trigger: TriggerProperties=None):
        """TaskProperties - a model defined in OpenAPI

        :param agent_configuration: The agent_configuration of this TaskProperties.
        :param creation_date: The creation_date of this TaskProperties.
        :param credentials: The credentials of this TaskProperties.
        :param platform: The platform of this TaskProperties.
        :param provisioning_state: The provisioning_state of this TaskProperties.
        :param status: The status of this TaskProperties.
        :param step: The step of this TaskProperties.
        :param timeout: The timeout of this TaskProperties.
        :param trigger: The trigger of this TaskProperties.
        """
        self.openapi_types = {
            'agent_configuration': AgentProperties,
            'creation_date': datetime,
            'credentials': Credentials,
            'platform': PlatformProperties,
            'provisioning_state': str,
            'status': str,
            'step': TaskStepProperties,
            'timeout': int,
            'trigger': TriggerProperties
        }

        self.attribute_map = {
            'agent_configuration': 'agentConfiguration',
            'creation_date': 'creationDate',
            'credentials': 'credentials',
            'platform': 'platform',
            'provisioning_state': 'provisioningState',
            'status': 'status',
            'step': 'step',
            'timeout': 'timeout',
            'trigger': 'trigger'
        }

        self._agent_configuration = agent_configuration
        self._creation_date = creation_date
        self._credentials = credentials
        self._platform = platform
        self._provisioning_state = provisioning_state
        self._status = status
        self._step = step
        self._timeout = timeout
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskProperties of this TaskProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_configuration(self):
        """Gets the agent_configuration of this TaskProperties.


        :return: The agent_configuration of this TaskProperties.
        :rtype: AgentProperties
        """
        return self._agent_configuration

    @agent_configuration.setter
    def agent_configuration(self, agent_configuration):
        """Sets the agent_configuration of this TaskProperties.


        :param agent_configuration: The agent_configuration of this TaskProperties.
        :type agent_configuration: AgentProperties
        """

        self._agent_configuration = agent_configuration

    @property
    def creation_date(self):
        """Gets the creation_date of this TaskProperties.

        The creation date of task.

        :return: The creation_date of this TaskProperties.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TaskProperties.

        The creation date of task.

        :param creation_date: The creation_date of this TaskProperties.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def credentials(self):
        """Gets the credentials of this TaskProperties.


        :return: The credentials of this TaskProperties.
        :rtype: Credentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this TaskProperties.


        :param credentials: The credentials of this TaskProperties.
        :type credentials: Credentials
        """

        self._credentials = credentials

    @property
    def platform(self):
        """Gets the platform of this TaskProperties.


        :return: The platform of this TaskProperties.
        :rtype: PlatformProperties
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this TaskProperties.


        :param platform: The platform of this TaskProperties.
        :type platform: PlatformProperties
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this TaskProperties.

        The provisioning state of the task.

        :return: The provisioning_state of this TaskProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this TaskProperties.

        The provisioning state of the task.

        :param provisioning_state: The provisioning_state of this TaskProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def status(self):
        """Gets the status of this TaskProperties.

        The current status of task.

        :return: The status of this TaskProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskProperties.

        The current status of task.

        :param status: The status of this TaskProperties.
        :type status: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def step(self):
        """Gets the step of this TaskProperties.


        :return: The step of this TaskProperties.
        :rtype: TaskStepProperties
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this TaskProperties.


        :param step: The step of this TaskProperties.
        :type step: TaskStepProperties
        """
        if step is None:
            raise ValueError("Invalid value for `step`, must not be `None`")

        self._step = step

    @property
    def timeout(self):
        """Gets the timeout of this TaskProperties.

        Run timeout in seconds.

        :return: The timeout of this TaskProperties.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this TaskProperties.

        Run timeout in seconds.

        :param timeout: The timeout of this TaskProperties.
        :type timeout: int
        """
        if timeout is not None and timeout > 28800:
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `28800`")
        if timeout is not None and timeout < 300:
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `300`")

        self._timeout = timeout

    @property
    def trigger(self):
        """Gets the trigger of this TaskProperties.


        :return: The trigger of this TaskProperties.
        :rtype: TriggerProperties
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this TaskProperties.


        :param trigger: The trigger of this TaskProperties.
        :type trigger: TriggerProperties
        """

        self._trigger = trigger
