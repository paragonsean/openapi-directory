# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthInfoUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_in: int=None, refresh_token: str=None, scope: str=None, token: str=None, token_type: str=None):
        """AuthInfoUpdateParameters - a model defined in OpenAPI

        :param expires_in: The expires_in of this AuthInfoUpdateParameters.
        :param refresh_token: The refresh_token of this AuthInfoUpdateParameters.
        :param scope: The scope of this AuthInfoUpdateParameters.
        :param token: The token of this AuthInfoUpdateParameters.
        :param token_type: The token_type of this AuthInfoUpdateParameters.
        """
        self.openapi_types = {
            'expires_in': int,
            'refresh_token': str,
            'scope': str,
            'token': str,
            'token_type': str
        }

        self.attribute_map = {
            'expires_in': 'expiresIn',
            'refresh_token': 'refreshToken',
            'scope': 'scope',
            'token': 'token',
            'token_type': 'tokenType'
        }

        self._expires_in = expires_in
        self._refresh_token = refresh_token
        self._scope = scope
        self._token = token
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthInfoUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthInfoUpdateParameters of this AuthInfoUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_in(self):
        """Gets the expires_in of this AuthInfoUpdateParameters.

        Time in seconds that the token remains valid

        :return: The expires_in of this AuthInfoUpdateParameters.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this AuthInfoUpdateParameters.

        Time in seconds that the token remains valid

        :param expires_in: The expires_in of this AuthInfoUpdateParameters.
        :type expires_in: int
        """

        self._expires_in = expires_in

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AuthInfoUpdateParameters.

        The refresh token used to refresh the access token.

        :return: The refresh_token of this AuthInfoUpdateParameters.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AuthInfoUpdateParameters.

        The refresh token used to refresh the access token.

        :param refresh_token: The refresh_token of this AuthInfoUpdateParameters.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def scope(self):
        """Gets the scope of this AuthInfoUpdateParameters.

        The scope of the access token.

        :return: The scope of this AuthInfoUpdateParameters.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AuthInfoUpdateParameters.

        The scope of the access token.

        :param scope: The scope of this AuthInfoUpdateParameters.
        :type scope: str
        """

        self._scope = scope

    @property
    def token(self):
        """Gets the token of this AuthInfoUpdateParameters.

        The access token used to access the source control provider.

        :return: The token of this AuthInfoUpdateParameters.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AuthInfoUpdateParameters.

        The access token used to access the source control provider.

        :param token: The token of this AuthInfoUpdateParameters.
        :type token: str
        """

        self._token = token

    @property
    def token_type(self):
        """Gets the token_type of this AuthInfoUpdateParameters.

        The type of Auth token.

        :return: The token_type of this AuthInfoUpdateParameters.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this AuthInfoUpdateParameters.

        The type of Auth token.

        :param token_type: The token_type of this AuthInfoUpdateParameters.
        :type token_type: str
        """
        allowed_values = ["PAT", "OAuth"]  # noqa: E501
        if token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `token_type` ({0}), must be one of {1}"
                .format(token_type, allowed_values)
            )

        self._token_type = token_type
