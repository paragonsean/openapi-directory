/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncodedTaskStepUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncodedTaskStepUpdateParameters::OAIEncodedTaskStepUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncodedTaskStepUpdateParameters::OAIEncodedTaskStepUpdateParameters() {
    this->initializeModel();
}

OAIEncodedTaskStepUpdateParameters::~OAIEncodedTaskStepUpdateParameters() {}

void OAIEncodedTaskStepUpdateParameters::initializeModel() {

    m_encoded_task_content_isSet = false;
    m_encoded_task_content_isValid = false;

    m_encoded_values_content_isSet = false;
    m_encoded_values_content_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_context_access_token_isSet = false;
    m_context_access_token_isValid = false;

    m_context_path_isSet = false;
    m_context_path_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEncodedTaskStepUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncodedTaskStepUpdateParameters::fromJsonObject(QJsonObject json) {

    m_encoded_task_content_isValid = ::OpenAPI::fromJsonValue(m_encoded_task_content, json[QString("encodedTaskContent")]);
    m_encoded_task_content_isSet = !json[QString("encodedTaskContent")].isNull() && m_encoded_task_content_isValid;

    m_encoded_values_content_isValid = ::OpenAPI::fromJsonValue(m_encoded_values_content, json[QString("encodedValuesContent")]);
    m_encoded_values_content_isSet = !json[QString("encodedValuesContent")].isNull() && m_encoded_values_content_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_context_access_token_isValid = ::OpenAPI::fromJsonValue(m_context_access_token, json[QString("contextAccessToken")]);
    m_context_access_token_isSet = !json[QString("contextAccessToken")].isNull() && m_context_access_token_isValid;

    m_context_path_isValid = ::OpenAPI::fromJsonValue(m_context_path, json[QString("contextPath")]);
    m_context_path_isSet = !json[QString("contextPath")].isNull() && m_context_path_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEncodedTaskStepUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncodedTaskStepUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_encoded_task_content_isSet) {
        obj.insert(QString("encodedTaskContent"), ::OpenAPI::toJsonValue(m_encoded_task_content));
    }
    if (m_encoded_values_content_isSet) {
        obj.insert(QString("encodedValuesContent"), ::OpenAPI::toJsonValue(m_encoded_values_content));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_context_access_token_isSet) {
        obj.insert(QString("contextAccessToken"), ::OpenAPI::toJsonValue(m_context_access_token));
    }
    if (m_context_path_isSet) {
        obj.insert(QString("contextPath"), ::OpenAPI::toJsonValue(m_context_path));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEncodedTaskStepUpdateParameters::getEncodedTaskContent() const {
    return m_encoded_task_content;
}
void OAIEncodedTaskStepUpdateParameters::setEncodedTaskContent(const QString &encoded_task_content) {
    m_encoded_task_content = encoded_task_content;
    m_encoded_task_content_isSet = true;
}

bool OAIEncodedTaskStepUpdateParameters::is_encoded_task_content_Set() const{
    return m_encoded_task_content_isSet;
}

bool OAIEncodedTaskStepUpdateParameters::is_encoded_task_content_Valid() const{
    return m_encoded_task_content_isValid;
}

QString OAIEncodedTaskStepUpdateParameters::getEncodedValuesContent() const {
    return m_encoded_values_content;
}
void OAIEncodedTaskStepUpdateParameters::setEncodedValuesContent(const QString &encoded_values_content) {
    m_encoded_values_content = encoded_values_content;
    m_encoded_values_content_isSet = true;
}

bool OAIEncodedTaskStepUpdateParameters::is_encoded_values_content_Set() const{
    return m_encoded_values_content_isSet;
}

bool OAIEncodedTaskStepUpdateParameters::is_encoded_values_content_Valid() const{
    return m_encoded_values_content_isValid;
}

QList<OAISetValue> OAIEncodedTaskStepUpdateParameters::getValues() const {
    return m_values;
}
void OAIEncodedTaskStepUpdateParameters::setValues(const QList<OAISetValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIEncodedTaskStepUpdateParameters::is_values_Set() const{
    return m_values_isSet;
}

bool OAIEncodedTaskStepUpdateParameters::is_values_Valid() const{
    return m_values_isValid;
}

QString OAIEncodedTaskStepUpdateParameters::getContextAccessToken() const {
    return m_context_access_token;
}
void OAIEncodedTaskStepUpdateParameters::setContextAccessToken(const QString &context_access_token) {
    m_context_access_token = context_access_token;
    m_context_access_token_isSet = true;
}

bool OAIEncodedTaskStepUpdateParameters::is_context_access_token_Set() const{
    return m_context_access_token_isSet;
}

bool OAIEncodedTaskStepUpdateParameters::is_context_access_token_Valid() const{
    return m_context_access_token_isValid;
}

QString OAIEncodedTaskStepUpdateParameters::getContextPath() const {
    return m_context_path;
}
void OAIEncodedTaskStepUpdateParameters::setContextPath(const QString &context_path) {
    m_context_path = context_path;
    m_context_path_isSet = true;
}

bool OAIEncodedTaskStepUpdateParameters::is_context_path_Set() const{
    return m_context_path_isSet;
}

bool OAIEncodedTaskStepUpdateParameters::is_context_path_Valid() const{
    return m_context_path_isValid;
}

QString OAIEncodedTaskStepUpdateParameters::getType() const {
    return m_type;
}
void OAIEncodedTaskStepUpdateParameters::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEncodedTaskStepUpdateParameters::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEncodedTaskStepUpdateParameters::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEncodedTaskStepUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoded_task_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoded_values_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncodedTaskStepUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
