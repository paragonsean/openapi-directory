/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileTaskRunRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileTaskRunRequest::OAIFileTaskRunRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileTaskRunRequest::OAIFileTaskRunRequest() {
    this->initializeModel();
}

OAIFileTaskRunRequest::~OAIFileTaskRunRequest() {}

void OAIFileTaskRunRequest::initializeModel() {

    m_agent_configuration_isSet = false;
    m_agent_configuration_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_source_location_isSet = false;
    m_source_location_isValid = false;

    m_task_file_path_isSet = false;
    m_task_file_path_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_values_file_path_isSet = false;
    m_values_file_path_isValid = false;

    m_is_archive_enabled_isSet = false;
    m_is_archive_enabled_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFileTaskRunRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileTaskRunRequest::fromJsonObject(QJsonObject json) {

    m_agent_configuration_isValid = ::OpenAPI::fromJsonValue(m_agent_configuration, json[QString("agentConfiguration")]);
    m_agent_configuration_isSet = !json[QString("agentConfiguration")].isNull() && m_agent_configuration_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_source_location_isValid = ::OpenAPI::fromJsonValue(m_source_location, json[QString("sourceLocation")]);
    m_source_location_isSet = !json[QString("sourceLocation")].isNull() && m_source_location_isValid;

    m_task_file_path_isValid = ::OpenAPI::fromJsonValue(m_task_file_path, json[QString("taskFilePath")]);
    m_task_file_path_isSet = !json[QString("taskFilePath")].isNull() && m_task_file_path_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_values_file_path_isValid = ::OpenAPI::fromJsonValue(m_values_file_path, json[QString("valuesFilePath")]);
    m_values_file_path_isSet = !json[QString("valuesFilePath")].isNull() && m_values_file_path_isValid;

    m_is_archive_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_archive_enabled, json[QString("isArchiveEnabled")]);
    m_is_archive_enabled_isSet = !json[QString("isArchiveEnabled")].isNull() && m_is_archive_enabled_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFileTaskRunRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileTaskRunRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_configuration.isSet()) {
        obj.insert(QString("agentConfiguration"), ::OpenAPI::toJsonValue(m_agent_configuration));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_source_location_isSet) {
        obj.insert(QString("sourceLocation"), ::OpenAPI::toJsonValue(m_source_location));
    }
    if (m_task_file_path_isSet) {
        obj.insert(QString("taskFilePath"), ::OpenAPI::toJsonValue(m_task_file_path));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_values_file_path_isSet) {
        obj.insert(QString("valuesFilePath"), ::OpenAPI::toJsonValue(m_values_file_path));
    }
    if (m_is_archive_enabled_isSet) {
        obj.insert(QString("isArchiveEnabled"), ::OpenAPI::toJsonValue(m_is_archive_enabled));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAgentProperties OAIFileTaskRunRequest::getAgentConfiguration() const {
    return m_agent_configuration;
}
void OAIFileTaskRunRequest::setAgentConfiguration(const OAIAgentProperties &agent_configuration) {
    m_agent_configuration = agent_configuration;
    m_agent_configuration_isSet = true;
}

bool OAIFileTaskRunRequest::is_agent_configuration_Set() const{
    return m_agent_configuration_isSet;
}

bool OAIFileTaskRunRequest::is_agent_configuration_Valid() const{
    return m_agent_configuration_isValid;
}

OAICredentials OAIFileTaskRunRequest::getCredentials() const {
    return m_credentials;
}
void OAIFileTaskRunRequest::setCredentials(const OAICredentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIFileTaskRunRequest::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIFileTaskRunRequest::is_credentials_Valid() const{
    return m_credentials_isValid;
}

OAIPlatformProperties OAIFileTaskRunRequest::getPlatform() const {
    return m_platform;
}
void OAIFileTaskRunRequest::setPlatform(const OAIPlatformProperties &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIFileTaskRunRequest::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIFileTaskRunRequest::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIFileTaskRunRequest::getSourceLocation() const {
    return m_source_location;
}
void OAIFileTaskRunRequest::setSourceLocation(const QString &source_location) {
    m_source_location = source_location;
    m_source_location_isSet = true;
}

bool OAIFileTaskRunRequest::is_source_location_Set() const{
    return m_source_location_isSet;
}

bool OAIFileTaskRunRequest::is_source_location_Valid() const{
    return m_source_location_isValid;
}

QString OAIFileTaskRunRequest::getTaskFilePath() const {
    return m_task_file_path;
}
void OAIFileTaskRunRequest::setTaskFilePath(const QString &task_file_path) {
    m_task_file_path = task_file_path;
    m_task_file_path_isSet = true;
}

bool OAIFileTaskRunRequest::is_task_file_path_Set() const{
    return m_task_file_path_isSet;
}

bool OAIFileTaskRunRequest::is_task_file_path_Valid() const{
    return m_task_file_path_isValid;
}

qint32 OAIFileTaskRunRequest::getTimeout() const {
    return m_timeout;
}
void OAIFileTaskRunRequest::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIFileTaskRunRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIFileTaskRunRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QList<OAISetValue> OAIFileTaskRunRequest::getValues() const {
    return m_values;
}
void OAIFileTaskRunRequest::setValues(const QList<OAISetValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIFileTaskRunRequest::is_values_Set() const{
    return m_values_isSet;
}

bool OAIFileTaskRunRequest::is_values_Valid() const{
    return m_values_isValid;
}

QString OAIFileTaskRunRequest::getValuesFilePath() const {
    return m_values_file_path;
}
void OAIFileTaskRunRequest::setValuesFilePath(const QString &values_file_path) {
    m_values_file_path = values_file_path;
    m_values_file_path_isSet = true;
}

bool OAIFileTaskRunRequest::is_values_file_path_Set() const{
    return m_values_file_path_isSet;
}

bool OAIFileTaskRunRequest::is_values_file_path_Valid() const{
    return m_values_file_path_isValid;
}

bool OAIFileTaskRunRequest::isIsArchiveEnabled() const {
    return m_is_archive_enabled;
}
void OAIFileTaskRunRequest::setIsArchiveEnabled(const bool &is_archive_enabled) {
    m_is_archive_enabled = is_archive_enabled;
    m_is_archive_enabled_isSet = true;
}

bool OAIFileTaskRunRequest::is_is_archive_enabled_Set() const{
    return m_is_archive_enabled_isSet;
}

bool OAIFileTaskRunRequest::is_is_archive_enabled_Valid() const{
    return m_is_archive_enabled_isValid;
}

QString OAIFileTaskRunRequest::getType() const {
    return m_type;
}
void OAIFileTaskRunRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFileTaskRunRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFileTaskRunRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFileTaskRunRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_values_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archive_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileTaskRunRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_platform_isValid && m_task_file_path_isValid && true;
}

} // namespace OpenAPI
