/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomRegistryCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomRegistryCredentials::OAICustomRegistryCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomRegistryCredentials::OAICustomRegistryCredentials() {
    this->initializeModel();
}

OAICustomRegistryCredentials::~OAICustomRegistryCredentials() {}

void OAICustomRegistryCredentials::initializeModel() {

    m_password_isSet = false;
    m_password_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAICustomRegistryCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomRegistryCredentials::fromJsonObject(QJsonObject json) {

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAICustomRegistryCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomRegistryCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_password.isSet()) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_user_name.isSet()) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

OAISecretObject OAICustomRegistryCredentials::getPassword() const {
    return m_password;
}
void OAICustomRegistryCredentials::setPassword(const OAISecretObject &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICustomRegistryCredentials::is_password_Set() const{
    return m_password_isSet;
}

bool OAICustomRegistryCredentials::is_password_Valid() const{
    return m_password_isValid;
}

OAISecretObject OAICustomRegistryCredentials::getUserName() const {
    return m_user_name;
}
void OAICustomRegistryCredentials::setUserName(const OAISecretObject &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAICustomRegistryCredentials::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAICustomRegistryCredentials::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAICustomRegistryCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomRegistryCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
