/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskProperties::OAITaskProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskProperties::OAITaskProperties() {
    this->initializeModel();
}

OAITaskProperties::~OAITaskProperties() {}

void OAITaskProperties::initializeModel() {

    m_agent_configuration_isSet = false;
    m_agent_configuration_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;
}

void OAITaskProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskProperties::fromJsonObject(QJsonObject json) {

    m_agent_configuration_isValid = ::OpenAPI::fromJsonValue(m_agent_configuration, json[QString("agentConfiguration")]);
    m_agent_configuration_isSet = !json[QString("agentConfiguration")].isNull() && m_agent_configuration_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;
}

QString OAITaskProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_configuration.isSet()) {
        obj.insert(QString("agentConfiguration"), ::OpenAPI::toJsonValue(m_agent_configuration));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_step.isSet()) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_trigger.isSet()) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    return obj;
}

OAIAgentProperties OAITaskProperties::getAgentConfiguration() const {
    return m_agent_configuration;
}
void OAITaskProperties::setAgentConfiguration(const OAIAgentProperties &agent_configuration) {
    m_agent_configuration = agent_configuration;
    m_agent_configuration_isSet = true;
}

bool OAITaskProperties::is_agent_configuration_Set() const{
    return m_agent_configuration_isSet;
}

bool OAITaskProperties::is_agent_configuration_Valid() const{
    return m_agent_configuration_isValid;
}

QDateTime OAITaskProperties::getCreationDate() const {
    return m_creation_date;
}
void OAITaskProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAITaskProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAITaskProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAICredentials OAITaskProperties::getCredentials() const {
    return m_credentials;
}
void OAITaskProperties::setCredentials(const OAICredentials &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAITaskProperties::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAITaskProperties::is_credentials_Valid() const{
    return m_credentials_isValid;
}

OAIPlatformProperties OAITaskProperties::getPlatform() const {
    return m_platform;
}
void OAITaskProperties::setPlatform(const OAIPlatformProperties &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAITaskProperties::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAITaskProperties::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAITaskProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAITaskProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAITaskProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAITaskProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAITaskProperties::getStatus() const {
    return m_status;
}
void OAITaskProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITaskProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAITaskProperties::is_status_Valid() const{
    return m_status_isValid;
}

OAITaskStepProperties OAITaskProperties::getStep() const {
    return m_step;
}
void OAITaskProperties::setStep(const OAITaskStepProperties &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAITaskProperties::is_step_Set() const{
    return m_step_isSet;
}

bool OAITaskProperties::is_step_Valid() const{
    return m_step_isValid;
}

qint32 OAITaskProperties::getTimeout() const {
    return m_timeout;
}
void OAITaskProperties::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAITaskProperties::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAITaskProperties::is_timeout_Valid() const{
    return m_timeout_isValid;
}

OAITriggerProperties OAITaskProperties::getTrigger() const {
    return m_trigger;
}
void OAITaskProperties::setTrigger(const OAITriggerProperties &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAITaskProperties::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAITaskProperties::is_trigger_Valid() const{
    return m_trigger_isValid;
}

bool OAITaskProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_platform_isValid && m_step_isValid && true;
}

} // namespace OpenAPI
