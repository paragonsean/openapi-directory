/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlatformUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlatformUpdateParameters::OAIPlatformUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlatformUpdateParameters::OAIPlatformUpdateParameters() {
    this->initializeModel();
}

OAIPlatformUpdateParameters::~OAIPlatformUpdateParameters() {}

void OAIPlatformUpdateParameters::initializeModel() {

    m_architecture_isSet = false;
    m_architecture_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;
}

void OAIPlatformUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlatformUpdateParameters::fromJsonObject(QJsonObject json) {

    m_architecture_isValid = ::OpenAPI::fromJsonValue(m_architecture, json[QString("architecture")]);
    m_architecture_isSet = !json[QString("architecture")].isNull() && m_architecture_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;
}

QString OAIPlatformUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlatformUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_architecture_isSet) {
        obj.insert(QString("architecture"), ::OpenAPI::toJsonValue(m_architecture));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_variant_isSet) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    return obj;
}

QString OAIPlatformUpdateParameters::getArchitecture() const {
    return m_architecture;
}
void OAIPlatformUpdateParameters::setArchitecture(const QString &architecture) {
    m_architecture = architecture;
    m_architecture_isSet = true;
}

bool OAIPlatformUpdateParameters::is_architecture_Set() const{
    return m_architecture_isSet;
}

bool OAIPlatformUpdateParameters::is_architecture_Valid() const{
    return m_architecture_isValid;
}

QString OAIPlatformUpdateParameters::getOs() const {
    return m_os;
}
void OAIPlatformUpdateParameters::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIPlatformUpdateParameters::is_os_Set() const{
    return m_os_isSet;
}

bool OAIPlatformUpdateParameters::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIPlatformUpdateParameters::getVariant() const {
    return m_variant;
}
void OAIPlatformUpdateParameters::setVariant(const QString &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAIPlatformUpdateParameters::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAIPlatformUpdateParameters::is_variant_Valid() const{
    return m_variant_isValid;
}

bool OAIPlatformUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlatformUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
