/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDockerBuildStepUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDockerBuildStepUpdateParameters::OAIDockerBuildStepUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDockerBuildStepUpdateParameters::OAIDockerBuildStepUpdateParameters() {
    this->initializeModel();
}

OAIDockerBuildStepUpdateParameters::~OAIDockerBuildStepUpdateParameters() {}

void OAIDockerBuildStepUpdateParameters::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_docker_file_path_isSet = false;
    m_docker_file_path_isValid = false;

    m_image_names_isSet = false;
    m_image_names_isValid = false;

    m_is_push_enabled_isSet = false;
    m_is_push_enabled_isValid = false;

    m_no_cache_isSet = false;
    m_no_cache_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_context_access_token_isSet = false;
    m_context_access_token_isValid = false;

    m_context_path_isSet = false;
    m_context_path_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDockerBuildStepUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDockerBuildStepUpdateParameters::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_docker_file_path_isValid = ::OpenAPI::fromJsonValue(m_docker_file_path, json[QString("dockerFilePath")]);
    m_docker_file_path_isSet = !json[QString("dockerFilePath")].isNull() && m_docker_file_path_isValid;

    m_image_names_isValid = ::OpenAPI::fromJsonValue(m_image_names, json[QString("imageNames")]);
    m_image_names_isSet = !json[QString("imageNames")].isNull() && m_image_names_isValid;

    m_is_push_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_push_enabled, json[QString("isPushEnabled")]);
    m_is_push_enabled_isSet = !json[QString("isPushEnabled")].isNull() && m_is_push_enabled_isValid;

    m_no_cache_isValid = ::OpenAPI::fromJsonValue(m_no_cache, json[QString("noCache")]);
    m_no_cache_isSet = !json[QString("noCache")].isNull() && m_no_cache_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_context_access_token_isValid = ::OpenAPI::fromJsonValue(m_context_access_token, json[QString("contextAccessToken")]);
    m_context_access_token_isSet = !json[QString("contextAccessToken")].isNull() && m_context_access_token_isValid;

    m_context_path_isValid = ::OpenAPI::fromJsonValue(m_context_path, json[QString("contextPath")]);
    m_context_path_isSet = !json[QString("contextPath")].isNull() && m_context_path_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDockerBuildStepUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDockerBuildStepUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments.size() > 0) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_docker_file_path_isSet) {
        obj.insert(QString("dockerFilePath"), ::OpenAPI::toJsonValue(m_docker_file_path));
    }
    if (m_image_names.size() > 0) {
        obj.insert(QString("imageNames"), ::OpenAPI::toJsonValue(m_image_names));
    }
    if (m_is_push_enabled_isSet) {
        obj.insert(QString("isPushEnabled"), ::OpenAPI::toJsonValue(m_is_push_enabled));
    }
    if (m_no_cache_isSet) {
        obj.insert(QString("noCache"), ::OpenAPI::toJsonValue(m_no_cache));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_context_access_token_isSet) {
        obj.insert(QString("contextAccessToken"), ::OpenAPI::toJsonValue(m_context_access_token));
    }
    if (m_context_path_isSet) {
        obj.insert(QString("contextPath"), ::OpenAPI::toJsonValue(m_context_path));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIArgument> OAIDockerBuildStepUpdateParameters::getArguments() const {
    return m_arguments;
}
void OAIDockerBuildStepUpdateParameters::setArguments(const QList<OAIArgument> &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIDockerBuildStepUpdateParameters::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIDockerBuildStepUpdateParameters::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAIDockerBuildStepUpdateParameters::getDockerFilePath() const {
    return m_docker_file_path;
}
void OAIDockerBuildStepUpdateParameters::setDockerFilePath(const QString &docker_file_path) {
    m_docker_file_path = docker_file_path;
    m_docker_file_path_isSet = true;
}

bool OAIDockerBuildStepUpdateParameters::is_docker_file_path_Set() const{
    return m_docker_file_path_isSet;
}

bool OAIDockerBuildStepUpdateParameters::is_docker_file_path_Valid() const{
    return m_docker_file_path_isValid;
}

QList<QString> OAIDockerBuildStepUpdateParameters::getImageNames() const {
    return m_image_names;
}
void OAIDockerBuildStepUpdateParameters::setImageNames(const QList<QString> &image_names) {
    m_image_names = image_names;
    m_image_names_isSet = true;
}

bool OAIDockerBuildStepUpdateParameters::is_image_names_Set() const{
    return m_image_names_isSet;
}

bool OAIDockerBuildStepUpdateParameters::is_image_names_Valid() const{
    return m_image_names_isValid;
}

bool OAIDockerBuildStepUpdateParameters::isIsPushEnabled() const {
    return m_is_push_enabled;
}
void OAIDockerBuildStepUpdateParameters::setIsPushEnabled(const bool &is_push_enabled) {
    m_is_push_enabled = is_push_enabled;
    m_is_push_enabled_isSet = true;
}

bool OAIDockerBuildStepUpdateParameters::is_is_push_enabled_Set() const{
    return m_is_push_enabled_isSet;
}

bool OAIDockerBuildStepUpdateParameters::is_is_push_enabled_Valid() const{
    return m_is_push_enabled_isValid;
}

bool OAIDockerBuildStepUpdateParameters::isNoCache() const {
    return m_no_cache;
}
void OAIDockerBuildStepUpdateParameters::setNoCache(const bool &no_cache) {
    m_no_cache = no_cache;
    m_no_cache_isSet = true;
}

bool OAIDockerBuildStepUpdateParameters::is_no_cache_Set() const{
    return m_no_cache_isSet;
}

bool OAIDockerBuildStepUpdateParameters::is_no_cache_Valid() const{
    return m_no_cache_isValid;
}

QString OAIDockerBuildStepUpdateParameters::getTarget() const {
    return m_target;
}
void OAIDockerBuildStepUpdateParameters::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIDockerBuildStepUpdateParameters::is_target_Set() const{
    return m_target_isSet;
}

bool OAIDockerBuildStepUpdateParameters::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIDockerBuildStepUpdateParameters::getContextAccessToken() const {
    return m_context_access_token;
}
void OAIDockerBuildStepUpdateParameters::setContextAccessToken(const QString &context_access_token) {
    m_context_access_token = context_access_token;
    m_context_access_token_isSet = true;
}

bool OAIDockerBuildStepUpdateParameters::is_context_access_token_Set() const{
    return m_context_access_token_isSet;
}

bool OAIDockerBuildStepUpdateParameters::is_context_access_token_Valid() const{
    return m_context_access_token_isValid;
}

QString OAIDockerBuildStepUpdateParameters::getContextPath() const {
    return m_context_path;
}
void OAIDockerBuildStepUpdateParameters::setContextPath(const QString &context_path) {
    m_context_path = context_path;
    m_context_path_isSet = true;
}

bool OAIDockerBuildStepUpdateParameters::is_context_path_Set() const{
    return m_context_path_isSet;
}

bool OAIDockerBuildStepUpdateParameters::is_context_path_Valid() const{
    return m_context_path_isValid;
}

QString OAIDockerBuildStepUpdateParameters::getType() const {
    return m_type;
}
void OAIDockerBuildStepUpdateParameters::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDockerBuildStepUpdateParameters::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDockerBuildStepUpdateParameters::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDockerBuildStepUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_docker_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_push_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDockerBuildStepUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
