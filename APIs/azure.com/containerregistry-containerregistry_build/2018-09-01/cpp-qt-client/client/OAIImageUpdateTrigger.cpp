/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageUpdateTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageUpdateTrigger::OAIImageUpdateTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageUpdateTrigger::OAIImageUpdateTrigger() {
    this->initializeModel();
}

OAIImageUpdateTrigger::~OAIImageUpdateTrigger() {}

void OAIImageUpdateTrigger::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIImageUpdateTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageUpdateTrigger::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIImageUpdateTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageUpdateTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIImageUpdateTrigger::getId() const {
    return m_id;
}
void OAIImageUpdateTrigger::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImageUpdateTrigger::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImageUpdateTrigger::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImageDescriptor> OAIImageUpdateTrigger::getImages() const {
    return m_images;
}
void OAIImageUpdateTrigger::setImages(const QList<OAIImageDescriptor> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIImageUpdateTrigger::is_images_Set() const{
    return m_images_isSet;
}

bool OAIImageUpdateTrigger::is_images_Valid() const{
    return m_images_isValid;
}

QDateTime OAIImageUpdateTrigger::getTimestamp() const {
    return m_timestamp;
}
void OAIImageUpdateTrigger::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIImageUpdateTrigger::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIImageUpdateTrigger::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIImageUpdateTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageUpdateTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
