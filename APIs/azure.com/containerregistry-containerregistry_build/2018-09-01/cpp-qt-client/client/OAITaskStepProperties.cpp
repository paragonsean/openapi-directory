/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskStepProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskStepProperties::OAITaskStepProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskStepProperties::OAITaskStepProperties() {
    this->initializeModel();
}

OAITaskStepProperties::~OAITaskStepProperties() {}

void OAITaskStepProperties::initializeModel() {

    m_base_image_dependencies_isSet = false;
    m_base_image_dependencies_isValid = false;

    m_context_access_token_isSet = false;
    m_context_access_token_isValid = false;

    m_context_path_isSet = false;
    m_context_path_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITaskStepProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskStepProperties::fromJsonObject(QJsonObject json) {

    m_base_image_dependencies_isValid = ::OpenAPI::fromJsonValue(m_base_image_dependencies, json[QString("baseImageDependencies")]);
    m_base_image_dependencies_isSet = !json[QString("baseImageDependencies")].isNull() && m_base_image_dependencies_isValid;

    m_context_access_token_isValid = ::OpenAPI::fromJsonValue(m_context_access_token, json[QString("contextAccessToken")]);
    m_context_access_token_isSet = !json[QString("contextAccessToken")].isNull() && m_context_access_token_isValid;

    m_context_path_isValid = ::OpenAPI::fromJsonValue(m_context_path, json[QString("contextPath")]);
    m_context_path_isSet = !json[QString("contextPath")].isNull() && m_context_path_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITaskStepProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskStepProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_base_image_dependencies.size() > 0) {
        obj.insert(QString("baseImageDependencies"), ::OpenAPI::toJsonValue(m_base_image_dependencies));
    }
    if (m_context_access_token_isSet) {
        obj.insert(QString("contextAccessToken"), ::OpenAPI::toJsonValue(m_context_access_token));
    }
    if (m_context_path_isSet) {
        obj.insert(QString("contextPath"), ::OpenAPI::toJsonValue(m_context_path));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIBaseImageDependency> OAITaskStepProperties::getBaseImageDependencies() const {
    return m_base_image_dependencies;
}
void OAITaskStepProperties::setBaseImageDependencies(const QList<OAIBaseImageDependency> &base_image_dependencies) {
    m_base_image_dependencies = base_image_dependencies;
    m_base_image_dependencies_isSet = true;
}

bool OAITaskStepProperties::is_base_image_dependencies_Set() const{
    return m_base_image_dependencies_isSet;
}

bool OAITaskStepProperties::is_base_image_dependencies_Valid() const{
    return m_base_image_dependencies_isValid;
}

QString OAITaskStepProperties::getContextAccessToken() const {
    return m_context_access_token;
}
void OAITaskStepProperties::setContextAccessToken(const QString &context_access_token) {
    m_context_access_token = context_access_token;
    m_context_access_token_isSet = true;
}

bool OAITaskStepProperties::is_context_access_token_Set() const{
    return m_context_access_token_isSet;
}

bool OAITaskStepProperties::is_context_access_token_Valid() const{
    return m_context_access_token_isValid;
}

QString OAITaskStepProperties::getContextPath() const {
    return m_context_path;
}
void OAITaskStepProperties::setContextPath(const QString &context_path) {
    m_context_path = context_path;
    m_context_path_isSet = true;
}

bool OAITaskStepProperties::is_context_path_Set() const{
    return m_context_path_isSet;
}

bool OAITaskStepProperties::is_context_path_Valid() const{
    return m_context_path_isValid;
}

QString OAITaskStepProperties::getType() const {
    return m_type;
}
void OAITaskStepProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITaskStepProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAITaskStepProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITaskStepProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_image_dependencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskStepProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
