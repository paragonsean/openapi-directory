/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceTrigger::OAISourceTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceTrigger::OAISourceTrigger() {
    this->initializeModel();
}

OAISourceTrigger::~OAISourceTrigger() {}

void OAISourceTrigger::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_repository_isSet = false;
    m_source_repository_isValid = false;

    m_source_trigger_events_isSet = false;
    m_source_trigger_events_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISourceTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceTrigger::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_repository_isValid = ::OpenAPI::fromJsonValue(m_source_repository, json[QString("sourceRepository")]);
    m_source_repository_isSet = !json[QString("sourceRepository")].isNull() && m_source_repository_isValid;

    m_source_trigger_events_isValid = ::OpenAPI::fromJsonValue(m_source_trigger_events, json[QString("sourceTriggerEvents")]);
    m_source_trigger_events_isSet = !json[QString("sourceTriggerEvents")].isNull() && m_source_trigger_events_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISourceTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_repository.isSet()) {
        obj.insert(QString("sourceRepository"), ::OpenAPI::toJsonValue(m_source_repository));
    }
    if (m_source_trigger_events.size() > 0) {
        obj.insert(QString("sourceTriggerEvents"), ::OpenAPI::toJsonValue(m_source_trigger_events));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAISourceTrigger::getName() const {
    return m_name;
}
void OAISourceTrigger::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISourceTrigger::is_name_Set() const{
    return m_name_isSet;
}

bool OAISourceTrigger::is_name_Valid() const{
    return m_name_isValid;
}

OAISourceProperties OAISourceTrigger::getSourceRepository() const {
    return m_source_repository;
}
void OAISourceTrigger::setSourceRepository(const OAISourceProperties &source_repository) {
    m_source_repository = source_repository;
    m_source_repository_isSet = true;
}

bool OAISourceTrigger::is_source_repository_Set() const{
    return m_source_repository_isSet;
}

bool OAISourceTrigger::is_source_repository_Valid() const{
    return m_source_repository_isValid;
}

QList<QString> OAISourceTrigger::getSourceTriggerEvents() const {
    return m_source_trigger_events;
}
void OAISourceTrigger::setSourceTriggerEvents(const QList<QString> &source_trigger_events) {
    m_source_trigger_events = source_trigger_events;
    m_source_trigger_events_isSet = true;
}

bool OAISourceTrigger::is_source_trigger_events_Set() const{
    return m_source_trigger_events_isSet;
}

bool OAISourceTrigger::is_source_trigger_events_Valid() const{
    return m_source_trigger_events_isValid;
}

QString OAISourceTrigger::getStatus() const {
    return m_status;
}
void OAISourceTrigger::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISourceTrigger::is_status_Set() const{
    return m_status_isSet;
}

bool OAISourceTrigger::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISourceTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_trigger_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_source_repository_isValid && m_source_trigger_events_isValid && true;
}

} // namespace OpenAPI
