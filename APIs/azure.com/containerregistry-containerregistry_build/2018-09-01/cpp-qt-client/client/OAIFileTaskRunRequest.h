/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFileTaskRunRequest.h
 *
 * The request parameters for a scheduling run against a task file.
 */

#ifndef OAIFileTaskRunRequest_H
#define OAIFileTaskRunRequest_H

#include <QJsonObject>

#include "OAIAgentProperties.h"
#include "OAICredentials.h"
#include "OAIPlatformProperties.h"
#include "OAIRunRequest.h"
#include "OAISetValue.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAgentProperties;
class OAICredentials;
class OAIPlatformProperties;
class OAISetValue;

class OAIFileTaskRunRequest : public OAIObject {
public:
    OAIFileTaskRunRequest();
    OAIFileTaskRunRequest(QString json);
    ~OAIFileTaskRunRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAgentProperties getAgentConfiguration() const;
    void setAgentConfiguration(const OAIAgentProperties &agent_configuration);
    bool is_agent_configuration_Set() const;
    bool is_agent_configuration_Valid() const;

    OAICredentials getCredentials() const;
    void setCredentials(const OAICredentials &credentials);
    bool is_credentials_Set() const;
    bool is_credentials_Valid() const;

    OAIPlatformProperties getPlatform() const;
    void setPlatform(const OAIPlatformProperties &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getSourceLocation() const;
    void setSourceLocation(const QString &source_location);
    bool is_source_location_Set() const;
    bool is_source_location_Valid() const;

    QString getTaskFilePath() const;
    void setTaskFilePath(const QString &task_file_path);
    bool is_task_file_path_Set() const;
    bool is_task_file_path_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    QList<OAISetValue> getValues() const;
    void setValues(const QList<OAISetValue> &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    QString getValuesFilePath() const;
    void setValuesFilePath(const QString &values_file_path);
    bool is_values_file_path_Set() const;
    bool is_values_file_path_Valid() const;

    bool isIsArchiveEnabled() const;
    void setIsArchiveEnabled(const bool &is_archive_enabled);
    bool is_is_archive_enabled_Set() const;
    bool is_is_archive_enabled_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAgentProperties m_agent_configuration;
    bool m_agent_configuration_isSet;
    bool m_agent_configuration_isValid;

    OAICredentials m_credentials;
    bool m_credentials_isSet;
    bool m_credentials_isValid;

    OAIPlatformProperties m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_source_location;
    bool m_source_location_isSet;
    bool m_source_location_isValid;

    QString m_task_file_path;
    bool m_task_file_path_isSet;
    bool m_task_file_path_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    QList<OAISetValue> m_values;
    bool m_values_isSet;
    bool m_values_isValid;

    QString m_values_file_path;
    bool m_values_file_path_isSet;
    bool m_values_file_path_isValid;

    bool m_is_archive_enabled;
    bool m_is_archive_enabled_isSet;
    bool m_is_archive_enabled_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFileTaskRunRequest)

#endif // OAIFileTaskRunRequest_H
