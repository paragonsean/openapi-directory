/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITasksApi_H
#define OAI_OAITasksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITask.h"
#include "OAITaskListResult.h"
#include "OAITaskUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITasksApi : public QObject {
    Q_OBJECT

public:
    OAITasksApi(const int timeOut = 0);
    ~OAITasksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  task_name QString [required]
    * @param[in]  task_create_parameters OAITask [required]
    */
    virtual void tasksCreate(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &task_name, const OAITask &task_create_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  task_name QString [required]
    */
    virtual void tasksDelete(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &task_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  task_name QString [required]
    */
    virtual void tasksGet(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &task_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  task_name QString [required]
    */
    virtual void tasksGetDetails(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &task_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void tasksList(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  task_name QString [required]
    * @param[in]  task_update_parameters OAITaskUpdateParameters [required]
    */
    virtual void tasksUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &api_version, const QString &task_name, const OAITaskUpdateParameters &task_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tasksCreateCallback(OAIHttpRequestWorker *worker);
    void tasksDeleteCallback(OAIHttpRequestWorker *worker);
    void tasksGetCallback(OAIHttpRequestWorker *worker);
    void tasksGetDetailsCallback(OAIHttpRequestWorker *worker);
    void tasksListCallback(OAIHttpRequestWorker *worker);
    void tasksUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tasksCreateSignal(OAITask summary);
    void tasksDeleteSignal();
    void tasksGetSignal(OAITask summary);
    void tasksGetDetailsSignal(OAITask summary);
    void tasksListSignal(OAITaskListResult summary);
    void tasksUpdateSignal(OAITask summary);


    void tasksCreateSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void tasksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tasksGetSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void tasksGetDetailsSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void tasksListSignalFull(OAIHttpRequestWorker *worker, OAITaskListResult summary);
    void tasksUpdateSignalFull(OAIHttpRequestWorker *worker, OAITask summary);

    Q_DECL_DEPRECATED_X("Use tasksCreateSignalError() instead")
    void tasksCreateSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksCreateSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksDeleteSignalError() instead")
    void tasksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tasksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksGetSignalError() instead")
    void tasksGetSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksGetSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksGetDetailsSignalError() instead")
    void tasksGetDetailsSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksGetDetailsSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksListSignalError() instead")
    void tasksListSignalE(OAITaskListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksListSignalError(OAITaskListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksUpdateSignalError() instead")
    void tasksUpdateSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksUpdateSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tasksCreateSignalErrorFull() instead")
    void tasksCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksDeleteSignalErrorFull() instead")
    void tasksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksGetSignalErrorFull() instead")
    void tasksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksGetDetailsSignalErrorFull() instead")
    void tasksGetDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksGetDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksListSignalErrorFull() instead")
    void tasksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksUpdateSignalErrorFull() instead")
    void tasksUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
