/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceTriggerDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceTriggerDescriptor::OAISourceTriggerDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceTriggerDescriptor::OAISourceTriggerDescriptor() {
    this->initializeModel();
}

OAISourceTriggerDescriptor::~OAISourceTriggerDescriptor() {}

void OAISourceTriggerDescriptor::initializeModel() {

    m_branch_name_isSet = false;
    m_branch_name_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_provider_type_isSet = false;
    m_provider_type_isValid = false;

    m_pull_request_id_isSet = false;
    m_pull_request_id_isValid = false;

    m_repository_url_isSet = false;
    m_repository_url_isValid = false;
}

void OAISourceTriggerDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceTriggerDescriptor::fromJsonObject(QJsonObject json) {

    m_branch_name_isValid = ::OpenAPI::fromJsonValue(m_branch_name, json[QString("branchName")]);
    m_branch_name_isSet = !json[QString("branchName")].isNull() && m_branch_name_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commitId")]);
    m_commit_id_isSet = !json[QString("commitId")].isNull() && m_commit_id_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_provider_type_isValid = ::OpenAPI::fromJsonValue(m_provider_type, json[QString("providerType")]);
    m_provider_type_isSet = !json[QString("providerType")].isNull() && m_provider_type_isValid;

    m_pull_request_id_isValid = ::OpenAPI::fromJsonValue(m_pull_request_id, json[QString("pullRequestId")]);
    m_pull_request_id_isSet = !json[QString("pullRequestId")].isNull() && m_pull_request_id_isValid;

    m_repository_url_isValid = ::OpenAPI::fromJsonValue(m_repository_url, json[QString("repositoryUrl")]);
    m_repository_url_isSet = !json[QString("repositoryUrl")].isNull() && m_repository_url_isValid;
}

QString OAISourceTriggerDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceTriggerDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_name_isSet) {
        obj.insert(QString("branchName"), ::OpenAPI::toJsonValue(m_branch_name));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commitId"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_provider_type_isSet) {
        obj.insert(QString("providerType"), ::OpenAPI::toJsonValue(m_provider_type));
    }
    if (m_pull_request_id_isSet) {
        obj.insert(QString("pullRequestId"), ::OpenAPI::toJsonValue(m_pull_request_id));
    }
    if (m_repository_url_isSet) {
        obj.insert(QString("repositoryUrl"), ::OpenAPI::toJsonValue(m_repository_url));
    }
    return obj;
}

QString OAISourceTriggerDescriptor::getBranchName() const {
    return m_branch_name;
}
void OAISourceTriggerDescriptor::setBranchName(const QString &branch_name) {
    m_branch_name = branch_name;
    m_branch_name_isSet = true;
}

bool OAISourceTriggerDescriptor::is_branch_name_Set() const{
    return m_branch_name_isSet;
}

bool OAISourceTriggerDescriptor::is_branch_name_Valid() const{
    return m_branch_name_isValid;
}

QString OAISourceTriggerDescriptor::getCommitId() const {
    return m_commit_id;
}
void OAISourceTriggerDescriptor::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAISourceTriggerDescriptor::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAISourceTriggerDescriptor::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QString OAISourceTriggerDescriptor::getEventType() const {
    return m_event_type;
}
void OAISourceTriggerDescriptor::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAISourceTriggerDescriptor::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAISourceTriggerDescriptor::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAISourceTriggerDescriptor::getId() const {
    return m_id;
}
void OAISourceTriggerDescriptor::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISourceTriggerDescriptor::is_id_Set() const{
    return m_id_isSet;
}

bool OAISourceTriggerDescriptor::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISourceTriggerDescriptor::getProviderType() const {
    return m_provider_type;
}
void OAISourceTriggerDescriptor::setProviderType(const QString &provider_type) {
    m_provider_type = provider_type;
    m_provider_type_isSet = true;
}

bool OAISourceTriggerDescriptor::is_provider_type_Set() const{
    return m_provider_type_isSet;
}

bool OAISourceTriggerDescriptor::is_provider_type_Valid() const{
    return m_provider_type_isValid;
}

QString OAISourceTriggerDescriptor::getPullRequestId() const {
    return m_pull_request_id;
}
void OAISourceTriggerDescriptor::setPullRequestId(const QString &pull_request_id) {
    m_pull_request_id = pull_request_id;
    m_pull_request_id_isSet = true;
}

bool OAISourceTriggerDescriptor::is_pull_request_id_Set() const{
    return m_pull_request_id_isSet;
}

bool OAISourceTriggerDescriptor::is_pull_request_id_Valid() const{
    return m_pull_request_id_isValid;
}

QString OAISourceTriggerDescriptor::getRepositoryUrl() const {
    return m_repository_url;
}
void OAISourceTriggerDescriptor::setRepositoryUrl(const QString &repository_url) {
    m_repository_url = repository_url;
    m_repository_url_isSet = true;
}

bool OAISourceTriggerDescriptor::is_repository_url_Set() const{
    return m_repository_url_isSet;
}

bool OAISourceTriggerDescriptor::is_repository_url_Valid() const{
    return m_repository_url_isValid;
}

bool OAISourceTriggerDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pull_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceTriggerDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
