/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunProperties::OAIRunProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunProperties::OAIRunProperties() {
    this->initializeModel();
}

OAIRunProperties::~OAIRunProperties() {}

void OAIRunProperties::initializeModel() {

    m_agent_configuration_isSet = false;
    m_agent_configuration_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_custom_registries_isSet = false;
    m_custom_registries_isValid = false;

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_image_update_trigger_isSet = false;
    m_image_update_trigger_isValid = false;

    m_is_archive_enabled_isSet = false;
    m_is_archive_enabled_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_output_images_isSet = false;
    m_output_images_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_run_error_message_isSet = false;
    m_run_error_message_isValid = false;

    m_run_id_isSet = false;
    m_run_id_isValid = false;

    m_run_type_isSet = false;
    m_run_type_isValid = false;

    m_source_registry_auth_isSet = false;
    m_source_registry_auth_isValid = false;

    m_source_trigger_isSet = false;
    m_source_trigger_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_isSet = false;
    m_task_isValid = false;
}

void OAIRunProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunProperties::fromJsonObject(QJsonObject json) {

    m_agent_configuration_isValid = ::OpenAPI::fromJsonValue(m_agent_configuration, json[QString("agentConfiguration")]);
    m_agent_configuration_isSet = !json[QString("agentConfiguration")].isNull() && m_agent_configuration_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_custom_registries_isValid = ::OpenAPI::fromJsonValue(m_custom_registries, json[QString("customRegistries")]);
    m_custom_registries_isSet = !json[QString("customRegistries")].isNull() && m_custom_registries_isValid;

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("finishTime")]);
    m_finish_time_isSet = !json[QString("finishTime")].isNull() && m_finish_time_isValid;

    m_image_update_trigger_isValid = ::OpenAPI::fromJsonValue(m_image_update_trigger, json[QString("imageUpdateTrigger")]);
    m_image_update_trigger_isSet = !json[QString("imageUpdateTrigger")].isNull() && m_image_update_trigger_isValid;

    m_is_archive_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_archive_enabled, json[QString("isArchiveEnabled")]);
    m_is_archive_enabled_isSet = !json[QString("isArchiveEnabled")].isNull() && m_is_archive_enabled_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_output_images_isValid = ::OpenAPI::fromJsonValue(m_output_images, json[QString("outputImages")]);
    m_output_images_isSet = !json[QString("outputImages")].isNull() && m_output_images_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_run_error_message_isValid = ::OpenAPI::fromJsonValue(m_run_error_message, json[QString("runErrorMessage")]);
    m_run_error_message_isSet = !json[QString("runErrorMessage")].isNull() && m_run_error_message_isValid;

    m_run_id_isValid = ::OpenAPI::fromJsonValue(m_run_id, json[QString("runId")]);
    m_run_id_isSet = !json[QString("runId")].isNull() && m_run_id_isValid;

    m_run_type_isValid = ::OpenAPI::fromJsonValue(m_run_type, json[QString("runType")]);
    m_run_type_isSet = !json[QString("runType")].isNull() && m_run_type_isValid;

    m_source_registry_auth_isValid = ::OpenAPI::fromJsonValue(m_source_registry_auth, json[QString("sourceRegistryAuth")]);
    m_source_registry_auth_isSet = !json[QString("sourceRegistryAuth")].isNull() && m_source_registry_auth_isValid;

    m_source_trigger_isValid = ::OpenAPI::fromJsonValue(m_source_trigger, json[QString("sourceTrigger")]);
    m_source_trigger_isSet = !json[QString("sourceTrigger")].isNull() && m_source_trigger_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_isValid = ::OpenAPI::fromJsonValue(m_task, json[QString("task")]);
    m_task_isSet = !json[QString("task")].isNull() && m_task_isValid;
}

QString OAIRunProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_configuration.isSet()) {
        obj.insert(QString("agentConfiguration"), ::OpenAPI::toJsonValue(m_agent_configuration));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_custom_registries.size() > 0) {
        obj.insert(QString("customRegistries"), ::OpenAPI::toJsonValue(m_custom_registries));
    }
    if (m_finish_time_isSet) {
        obj.insert(QString("finishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_image_update_trigger.isSet()) {
        obj.insert(QString("imageUpdateTrigger"), ::OpenAPI::toJsonValue(m_image_update_trigger));
    }
    if (m_is_archive_enabled_isSet) {
        obj.insert(QString("isArchiveEnabled"), ::OpenAPI::toJsonValue(m_is_archive_enabled));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_output_images.size() > 0) {
        obj.insert(QString("outputImages"), ::OpenAPI::toJsonValue(m_output_images));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_run_error_message_isSet) {
        obj.insert(QString("runErrorMessage"), ::OpenAPI::toJsonValue(m_run_error_message));
    }
    if (m_run_id_isSet) {
        obj.insert(QString("runId"), ::OpenAPI::toJsonValue(m_run_id));
    }
    if (m_run_type_isSet) {
        obj.insert(QString("runType"), ::OpenAPI::toJsonValue(m_run_type));
    }
    if (m_source_registry_auth_isSet) {
        obj.insert(QString("sourceRegistryAuth"), ::OpenAPI::toJsonValue(m_source_registry_auth));
    }
    if (m_source_trigger.isSet()) {
        obj.insert(QString("sourceTrigger"), ::OpenAPI::toJsonValue(m_source_trigger));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_isSet) {
        obj.insert(QString("task"), ::OpenAPI::toJsonValue(m_task));
    }
    return obj;
}

OAIAgentProperties OAIRunProperties::getAgentConfiguration() const {
    return m_agent_configuration;
}
void OAIRunProperties::setAgentConfiguration(const OAIAgentProperties &agent_configuration) {
    m_agent_configuration = agent_configuration;
    m_agent_configuration_isSet = true;
}

bool OAIRunProperties::is_agent_configuration_Set() const{
    return m_agent_configuration_isSet;
}

bool OAIRunProperties::is_agent_configuration_Valid() const{
    return m_agent_configuration_isValid;
}

QDateTime OAIRunProperties::getCreateTime() const {
    return m_create_time;
}
void OAIRunProperties::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIRunProperties::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIRunProperties::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<QString> OAIRunProperties::getCustomRegistries() const {
    return m_custom_registries;
}
void OAIRunProperties::setCustomRegistries(const QList<QString> &custom_registries) {
    m_custom_registries = custom_registries;
    m_custom_registries_isSet = true;
}

bool OAIRunProperties::is_custom_registries_Set() const{
    return m_custom_registries_isSet;
}

bool OAIRunProperties::is_custom_registries_Valid() const{
    return m_custom_registries_isValid;
}

QDateTime OAIRunProperties::getFinishTime() const {
    return m_finish_time;
}
void OAIRunProperties::setFinishTime(const QDateTime &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAIRunProperties::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAIRunProperties::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

OAIImageUpdateTrigger OAIRunProperties::getImageUpdateTrigger() const {
    return m_image_update_trigger;
}
void OAIRunProperties::setImageUpdateTrigger(const OAIImageUpdateTrigger &image_update_trigger) {
    m_image_update_trigger = image_update_trigger;
    m_image_update_trigger_isSet = true;
}

bool OAIRunProperties::is_image_update_trigger_Set() const{
    return m_image_update_trigger_isSet;
}

bool OAIRunProperties::is_image_update_trigger_Valid() const{
    return m_image_update_trigger_isValid;
}

bool OAIRunProperties::isIsArchiveEnabled() const {
    return m_is_archive_enabled;
}
void OAIRunProperties::setIsArchiveEnabled(const bool &is_archive_enabled) {
    m_is_archive_enabled = is_archive_enabled;
    m_is_archive_enabled_isSet = true;
}

bool OAIRunProperties::is_is_archive_enabled_Set() const{
    return m_is_archive_enabled_isSet;
}

bool OAIRunProperties::is_is_archive_enabled_Valid() const{
    return m_is_archive_enabled_isValid;
}

QDateTime OAIRunProperties::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIRunProperties::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIRunProperties::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIRunProperties::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QList<OAIImageDescriptor> OAIRunProperties::getOutputImages() const {
    return m_output_images;
}
void OAIRunProperties::setOutputImages(const QList<OAIImageDescriptor> &output_images) {
    m_output_images = output_images;
    m_output_images_isSet = true;
}

bool OAIRunProperties::is_output_images_Set() const{
    return m_output_images_isSet;
}

bool OAIRunProperties::is_output_images_Valid() const{
    return m_output_images_isValid;
}

OAIPlatformProperties OAIRunProperties::getPlatform() const {
    return m_platform;
}
void OAIRunProperties::setPlatform(const OAIPlatformProperties &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIRunProperties::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIRunProperties::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIRunProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRunProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRunProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRunProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIRunProperties::getRunErrorMessage() const {
    return m_run_error_message;
}
void OAIRunProperties::setRunErrorMessage(const QString &run_error_message) {
    m_run_error_message = run_error_message;
    m_run_error_message_isSet = true;
}

bool OAIRunProperties::is_run_error_message_Set() const{
    return m_run_error_message_isSet;
}

bool OAIRunProperties::is_run_error_message_Valid() const{
    return m_run_error_message_isValid;
}

QString OAIRunProperties::getRunId() const {
    return m_run_id;
}
void OAIRunProperties::setRunId(const QString &run_id) {
    m_run_id = run_id;
    m_run_id_isSet = true;
}

bool OAIRunProperties::is_run_id_Set() const{
    return m_run_id_isSet;
}

bool OAIRunProperties::is_run_id_Valid() const{
    return m_run_id_isValid;
}

QString OAIRunProperties::getRunType() const {
    return m_run_type;
}
void OAIRunProperties::setRunType(const QString &run_type) {
    m_run_type = run_type;
    m_run_type_isSet = true;
}

bool OAIRunProperties::is_run_type_Set() const{
    return m_run_type_isSet;
}

bool OAIRunProperties::is_run_type_Valid() const{
    return m_run_type_isValid;
}

QString OAIRunProperties::getSourceRegistryAuth() const {
    return m_source_registry_auth;
}
void OAIRunProperties::setSourceRegistryAuth(const QString &source_registry_auth) {
    m_source_registry_auth = source_registry_auth;
    m_source_registry_auth_isSet = true;
}

bool OAIRunProperties::is_source_registry_auth_Set() const{
    return m_source_registry_auth_isSet;
}

bool OAIRunProperties::is_source_registry_auth_Valid() const{
    return m_source_registry_auth_isValid;
}

OAISourceTriggerDescriptor OAIRunProperties::getSourceTrigger() const {
    return m_source_trigger;
}
void OAIRunProperties::setSourceTrigger(const OAISourceTriggerDescriptor &source_trigger) {
    m_source_trigger = source_trigger;
    m_source_trigger_isSet = true;
}

bool OAIRunProperties::is_source_trigger_Set() const{
    return m_source_trigger_isSet;
}

bool OAIRunProperties::is_source_trigger_Valid() const{
    return m_source_trigger_isValid;
}

QDateTime OAIRunProperties::getStartTime() const {
    return m_start_time;
}
void OAIRunProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRunProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRunProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIRunProperties::getStatus() const {
    return m_status;
}
void OAIRunProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRunProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRunProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRunProperties::getTask() const {
    return m_task;
}
void OAIRunProperties::setTask(const QString &task) {
    m_task = task;
    m_task_isSet = true;
}

bool OAIRunProperties::is_task_Set() const{
    return m_task_isSet;
}

bool OAIRunProperties::is_task_Valid() const{
    return m_task_isValid;
}

bool OAIRunProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_registries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_update_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archive_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_registry_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
