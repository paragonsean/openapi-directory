/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Task;
import org.openapitools.client.model.TaskListResult;
import org.openapitools.client.model.TaskUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tasksCreate
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param taskCreateParameters The parameters for creating a task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCreateCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, Task taskCreateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskCreateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, Task taskCreateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tasksCreate(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling tasksCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksCreate(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksCreate(Async)");
        }

        // verify the required parameter 'taskCreateParameters' is set
        if (taskCreateParameters == null) {
            throw new ApiException("Missing the required parameter 'taskCreateParameters' when calling tasksCreate(Async)");
        }

        return tasksCreateCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, taskCreateParameters, _callback);

    }

    /**
     * 
     * Creates a task for a container registry with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param taskCreateParameters The parameters for creating a task. (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public Task tasksCreate(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, Task taskCreateParameters) throws ApiException {
        ApiResponse<Task> localVarResp = tasksCreateWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, taskCreateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a task for a container registry with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param taskCreateParameters The parameters for creating a task. (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> tasksCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, Task taskCreateParameters) throws ApiException {
        okhttp3.Call localVarCall = tasksCreateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, taskCreateParameters, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a task for a container registry with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param taskCreateParameters The parameters for creating a task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCreateAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, Task taskCreateParameters, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksCreateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, taskCreateParameters, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksDelete
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksDeleteCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tasksDelete(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling tasksDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksDelete(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksDelete(Async)");
        }

        return tasksDeleteCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, _callback);

    }

    /**
     * 
     * Deletes a specified task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void tasksDelete(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName) throws ApiException {
        tasksDeleteWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, taskName);
    }

    /**
     * 
     * Deletes a specified task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tasksDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName) throws ApiException {
        okhttp3.Call localVarCall = tasksDeleteValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specified task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successfully accepted; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksDeleteAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksDeleteValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksGet
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tasksGet(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling tasksGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksGet(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksGet(Async)");
        }

        return tasksGetCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, _callback);

    }

    /**
     * 
     * Get the properties of a specified task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public Task tasksGet(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName) throws ApiException {
        ApiResponse<Task> localVarResp = tasksGetWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, taskName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the properties of a specified task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> tasksGetWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName) throws ApiException {
        okhttp3.Call localVarCall = tasksGetValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the properties of a specified task.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGetValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksGetDetails
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetDetailsCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}/listDetails"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGetDetailsValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksGetDetails(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tasksGetDetails(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling tasksGetDetails(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksGetDetails(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksGetDetails(Async)");
        }

        return tasksGetDetailsCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, _callback);

    }

    /**
     * 
     * Returns a task with extended information that includes all secrets.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public Task tasksGetDetails(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName) throws ApiException {
        ApiResponse<Task> localVarResp = tasksGetDetailsWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, taskName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a task with extended information that includes all secrets.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> tasksGetDetailsWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName) throws ApiException {
        okhttp3.Call localVarCall = tasksGetDetailsValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a task with extended information that includes all secrets.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetDetailsAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGetDetailsValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksList
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksListCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksListValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tasksList(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling tasksList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksList(Async)");
        }

        return tasksListCall(subscriptionId, resourceGroupName, registryName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the tasks for a specified container registry.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @return TaskListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public TaskListResult tasksList(String subscriptionId, String resourceGroupName, String registryName, String apiVersion) throws ApiException {
        ApiResponse<TaskListResult> localVarResp = tasksListWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the tasks for a specified container registry.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @return ApiResponse&lt;TaskListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskListResult> tasksListWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = tasksListValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TaskListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the tasks for a specified container registry.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksListAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, final ApiCallback<TaskListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksListValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TaskListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksUpdate
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param taskUpdateParameters The parameters for updating a task. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdateCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, TaskUpdateParameters taskUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, TaskUpdateParameters taskUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'taskUpdateParameters' is set
        if (taskUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'taskUpdateParameters' when calling tasksUpdate(Async)");
        }

        return tasksUpdateCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, taskUpdateParameters, _callback);

    }

    /**
     * 
     * Updates a task with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param taskUpdateParameters The parameters for updating a task. (required)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public Task tasksUpdate(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, TaskUpdateParameters taskUpdateParameters) throws ApiException {
        ApiResponse<Task> localVarResp = tasksUpdateWithHttpInfo(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, taskUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a task with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param taskUpdateParameters The parameters for updating a task. (required)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Task> tasksUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, TaskUpdateParameters taskUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = tasksUpdateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, taskUpdateParameters, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a task with the specified parameters.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param apiVersion The client API version. (required)
     * @param taskName The name of the container registry task. (required)
     * @param taskUpdateParameters The parameters for updating a task. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. If the registry doesn&#39;t exist, 404 (Not found) is returned. If any of the input parameters is wrong, 400(Bad Request) is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdateAsync(String subscriptionId, String resourceGroupName, String registryName, String apiVersion, String taskName, TaskUpdateParameters taskUpdateParameters, final ApiCallback<Task> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksUpdateValidateBeforeCall(subscriptionId, resourceGroupName, registryName, apiVersion, taskName, taskUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
