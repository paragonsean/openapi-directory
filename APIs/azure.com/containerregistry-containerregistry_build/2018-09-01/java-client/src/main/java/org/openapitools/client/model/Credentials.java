/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CustomRegistryCredentials;
import org.openapitools.client.model.SourceRegistryCredentials;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters that describes a set of credentials that will be used when a run is invoked.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:53.147540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Credentials {
  public static final String SERIALIZED_NAME_CUSTOM_REGISTRIES = "customRegistries";
  @SerializedName(SERIALIZED_NAME_CUSTOM_REGISTRIES)
  private Map<String, CustomRegistryCredentials> customRegistries = new HashMap<>();

  public static final String SERIALIZED_NAME_SOURCE_REGISTRY = "sourceRegistry";
  @SerializedName(SERIALIZED_NAME_SOURCE_REGISTRY)
  private SourceRegistryCredentials sourceRegistry;

  public Credentials() {
  }

  public Credentials customRegistries(Map<String, CustomRegistryCredentials> customRegistries) {
    this.customRegistries = customRegistries;
    return this;
  }

  public Credentials putCustomRegistriesItem(String key, CustomRegistryCredentials customRegistriesItem) {
    if (this.customRegistries == null) {
      this.customRegistries = new HashMap<>();
    }
    this.customRegistries.put(key, customRegistriesItem);
    return this;
  }

  /**
   * Describes the credential parameters for accessing other custom registries. The key  for the dictionary item will be the registry login server (myregistry.azurecr.io) and  the value of the item will be the registry credentials for accessing the registry.
   * @return customRegistries
   */
  @javax.annotation.Nullable
  public Map<String, CustomRegistryCredentials> getCustomRegistries() {
    return customRegistries;
  }

  public void setCustomRegistries(Map<String, CustomRegistryCredentials> customRegistries) {
    this.customRegistries = customRegistries;
  }


  public Credentials sourceRegistry(SourceRegistryCredentials sourceRegistry) {
    this.sourceRegistry = sourceRegistry;
    return this;
  }

  /**
   * Get sourceRegistry
   * @return sourceRegistry
   */
  @javax.annotation.Nullable
  public SourceRegistryCredentials getSourceRegistry() {
    return sourceRegistry;
  }

  public void setSourceRegistry(SourceRegistryCredentials sourceRegistry) {
    this.sourceRegistry = sourceRegistry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Credentials credentials = (Credentials) o;
    return Objects.equals(this.customRegistries, credentials.customRegistries) &&
        Objects.equals(this.sourceRegistry, credentials.sourceRegistry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customRegistries, sourceRegistry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Credentials {\n");
    sb.append("    customRegistries: ").append(toIndentedString(customRegistries)).append("\n");
    sb.append("    sourceRegistry: ").append(toIndentedString(sourceRegistry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customRegistries");
    openapiFields.add("sourceRegistry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Credentials
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Credentials.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Credentials is not found in the empty JSON string", Credentials.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Credentials.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Credentials` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sourceRegistry`
      if (jsonObj.get("sourceRegistry") != null && !jsonObj.get("sourceRegistry").isJsonNull()) {
        SourceRegistryCredentials.validateJsonElement(jsonObj.get("sourceRegistry"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Credentials.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Credentials' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Credentials> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Credentials.class));

       return (TypeAdapter<T>) new TypeAdapter<Credentials>() {
           @Override
           public void write(JsonWriter out, Credentials value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Credentials read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Credentials given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Credentials
   * @throws IOException if the JSON string is invalid with respect to Credentials
   */
  public static Credentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Credentials.class);
  }

  /**
   * Convert an instance of Credentials to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

