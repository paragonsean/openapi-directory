/*
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.DeploymentScript;
import org.openapitools.client.model.DeploymentScriptListResult;
import org.openapitools.client.model.DeploymentScriptUpdateParameter;
import org.openapitools.client.model.ScriptLog;
import org.openapitools.client.model.ScriptLogsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeploymentScriptsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeploymentScriptsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeploymentScriptsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deploymentScriptsCreate
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param deploymentScript Deployment script supplied to the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created -- Deployment script created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsCreateCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, DeploymentScript deploymentScript, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deploymentScript;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "scriptName" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentScriptsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, DeploymentScript deploymentScript, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deploymentScriptsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsCreate(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling deploymentScriptsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deploymentScriptsCreate(Async)");
        }

        // verify the required parameter 'deploymentScript' is set
        if (deploymentScript == null) {
            throw new ApiException("Missing the required parameter 'deploymentScript' when calling deploymentScriptsCreate(Async)");
        }

        return deploymentScriptsCreateCall(subscriptionId, resourceGroupName, scriptName, apiVersion, deploymentScript, _callback);

    }

    /**
     * 
     * Creates a deployment script.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param deploymentScript Deployment script supplied to the operation. (required)
     * @return DeploymentScript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created -- Deployment script created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentScript deploymentScriptsCreate(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, DeploymentScript deploymentScript) throws ApiException {
        ApiResponse<DeploymentScript> localVarResp = deploymentScriptsCreateWithHttpInfo(subscriptionId, resourceGroupName, scriptName, apiVersion, deploymentScript);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a deployment script.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param deploymentScript Deployment script supplied to the operation. (required)
     * @return ApiResponse&lt;DeploymentScript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created -- Deployment script created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentScript> deploymentScriptsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, DeploymentScript deploymentScript) throws ApiException {
        okhttp3.Call localVarCall = deploymentScriptsCreateValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, deploymentScript, null);
        Type localVarReturnType = new TypeToken<DeploymentScript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a deployment script.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param deploymentScript Deployment script supplied to the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script is updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created -- Deployment script created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsCreateAsync(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, DeploymentScript deploymentScript, final ApiCallback<DeploymentScript> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentScriptsCreateValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, deploymentScript, _callback);
        Type localVarReturnType = new TypeToken<DeploymentScript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentScriptsDelete
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment script does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsDeleteCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "scriptName" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentScriptsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deploymentScriptsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsDelete(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling deploymentScriptsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deploymentScriptsDelete(Async)");
        }

        return deploymentScriptsDeleteCall(subscriptionId, resourceGroupName, scriptName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a deployment script. When operation completes, status code 200 returned without content.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment script does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void deploymentScriptsDelete(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion) throws ApiException {
        deploymentScriptsDeleteWithHttpInfo(subscriptionId, resourceGroupName, scriptName, apiVersion);
    }

    /**
     * 
     * Deletes a deployment script. When operation completes, status code 200 returned without content.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment script does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deploymentScriptsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deploymentScriptsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a deployment script. When operation completes, status code 200 returned without content.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Deployment script does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsDeleteAsync(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentScriptsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentScriptsGet
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns information about the deployment script. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsGetCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "scriptName" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentScriptsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deploymentScriptsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsGet(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling deploymentScriptsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deploymentScriptsGet(Async)");
        }

        return deploymentScriptsGetCall(subscriptionId, resourceGroupName, scriptName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a deployment script with a given name.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @return DeploymentScript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns information about the deployment script. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentScript deploymentScriptsGet(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion) throws ApiException {
        ApiResponse<DeploymentScript> localVarResp = deploymentScriptsGetWithHttpInfo(subscriptionId, resourceGroupName, scriptName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a deployment script with a given name.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @return ApiResponse&lt;DeploymentScript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns information about the deployment script. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentScript> deploymentScriptsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deploymentScriptsGetValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeploymentScript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a deployment script with a given name.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns information about the deployment script. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsGetAsync(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback<DeploymentScript> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentScriptsGetValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeploymentScript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentScriptsGetLogs
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns deployment script logs if available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsGetLogsCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}/logs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "scriptName" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentScriptsGetLogsValidateBeforeCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deploymentScriptsGetLogs(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsGetLogs(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling deploymentScriptsGetLogs(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deploymentScriptsGetLogs(Async)");
        }

        return deploymentScriptsGetLogsCall(subscriptionId, resourceGroupName, scriptName, apiVersion, _callback);

    }

    /**
     * 
     * Gets deployment script logs for a given deployment script name.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @return ScriptLogsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns deployment script logs if available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ScriptLogsList deploymentScriptsGetLogs(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion) throws ApiException {
        ApiResponse<ScriptLogsList> localVarResp = deploymentScriptsGetLogsWithHttpInfo(subscriptionId, resourceGroupName, scriptName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets deployment script logs for a given deployment script name.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @return ApiResponse&lt;ScriptLogsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns deployment script logs if available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptLogsList> deploymentScriptsGetLogsWithHttpInfo(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deploymentScriptsGetLogsValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ScriptLogsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets deployment script logs for a given deployment script name.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns deployment script logs if available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsGetLogsAsync(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback<ScriptLogsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentScriptsGetLogsValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ScriptLogsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentScriptsGetLogsDefault
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns deployment script logs if available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsGetLogsDefaultCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}/logs/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "scriptName" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentScriptsGetLogsDefaultValidateBeforeCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deploymentScriptsGetLogsDefault(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsGetLogsDefault(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling deploymentScriptsGetLogsDefault(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deploymentScriptsGetLogsDefault(Async)");
        }

        return deploymentScriptsGetLogsDefaultCall(subscriptionId, resourceGroupName, scriptName, apiVersion, _callback);

    }

    /**
     * 
     * Gets deployment script logs for a given deployment script name.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @return ScriptLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns deployment script logs if available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ScriptLog deploymentScriptsGetLogsDefault(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion) throws ApiException {
        ApiResponse<ScriptLog> localVarResp = deploymentScriptsGetLogsDefaultWithHttpInfo(subscriptionId, resourceGroupName, scriptName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets deployment script logs for a given deployment script name.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @return ApiResponse&lt;ScriptLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns deployment script logs if available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScriptLog> deploymentScriptsGetLogsDefaultWithHttpInfo(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deploymentScriptsGetLogsDefaultValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ScriptLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets deployment script logs for a given deployment script name.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns deployment script logs if available. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsGetLogsDefaultAsync(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, final ApiCallback<ScriptLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentScriptsGetLogsDefaultValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ScriptLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentScriptsListByResourceGroup
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns a list of deployment scripts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentScriptsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deploymentScriptsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deploymentScriptsListByResourceGroup(Async)");
        }

        return deploymentScriptsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists deployments scripts.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion Client Api version. (required)
     * @return DeploymentScriptListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns a list of deployment scripts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentScriptListResult deploymentScriptsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<DeploymentScriptListResult> localVarResp = deploymentScriptsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists deployments scripts.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion Client Api version. (required)
     * @return ApiResponse&lt;DeploymentScriptListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns a list of deployment scripts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentScriptListResult> deploymentScriptsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deploymentScriptsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeploymentScriptListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists deployments scripts.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns a list of deployment scripts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<DeploymentScriptListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentScriptsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeploymentScriptListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentScriptsListBySubscription
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns a list of deployment scripts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentScripts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentScriptsListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deploymentScriptsListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deploymentScriptsListBySubscription(Async)");
        }

        return deploymentScriptsListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all deployment scripts for a given subscription.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param apiVersion Client Api version. (required)
     * @return DeploymentScriptListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns a list of deployment scripts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentScriptListResult deploymentScriptsListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DeploymentScriptListResult> localVarResp = deploymentScriptsListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all deployment scripts for a given subscription.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param apiVersion Client Api version. (required)
     * @return ApiResponse&lt;DeploymentScriptListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns a list of deployment scripts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentScriptListResult> deploymentScriptsListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deploymentScriptsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeploymentScriptListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all deployment scripts for a given subscription.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param apiVersion Client Api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Returns a list of deployment scripts. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<DeploymentScriptListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentScriptsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeploymentScriptListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentScriptsUpdate
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param deploymentScript Deployment script resource with the tags to be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script tags are updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsUpdateCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, DeploymentScriptUpdateParameter deploymentScript, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deploymentScript;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "scriptName" + "}", localVarApiClient.escapeString(scriptName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentScriptsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, DeploymentScriptUpdateParameter deploymentScript, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling deploymentScriptsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsUpdate(Async)");
        }

        // verify the required parameter 'scriptName' is set
        if (scriptName == null) {
            throw new ApiException("Missing the required parameter 'scriptName' when calling deploymentScriptsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deploymentScriptsUpdate(Async)");
        }

        return deploymentScriptsUpdateCall(subscriptionId, resourceGroupName, scriptName, apiVersion, deploymentScript, _callback);

    }

    /**
     * 
     * Updates deployment script tags with specified values.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param deploymentScript Deployment script resource with the tags to be updated. (optional)
     * @return DeploymentScript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script tags are updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentScript deploymentScriptsUpdate(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, DeploymentScriptUpdateParameter deploymentScript) throws ApiException {
        ApiResponse<DeploymentScript> localVarResp = deploymentScriptsUpdateWithHttpInfo(subscriptionId, resourceGroupName, scriptName, apiVersion, deploymentScript);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates deployment script tags with specified values.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param deploymentScript Deployment script resource with the tags to be updated. (optional)
     * @return ApiResponse&lt;DeploymentScript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script tags are updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentScript> deploymentScriptsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, DeploymentScriptUpdateParameter deploymentScript) throws ApiException {
        okhttp3.Call localVarCall = deploymentScriptsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, deploymentScript, null);
        Type localVarReturnType = new TypeToken<DeploymentScript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates deployment script tags with specified values.
     * @param subscriptionId Subscription Id which forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param scriptName Name of the deployment script. (required)
     * @param apiVersion Client Api version. (required)
     * @param deploymentScript Deployment script resource with the tags to be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deployment script tags are updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentScriptsUpdateAsync(String subscriptionId, String resourceGroupName, String scriptName, String apiVersion, DeploymentScriptUpdateParameter deploymentScript, final ApiCallback<DeploymentScript> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentScriptsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, scriptName, apiVersion, deploymentScript, _callback);
        Type localVarReturnType = new TypeToken<DeploymentScript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
