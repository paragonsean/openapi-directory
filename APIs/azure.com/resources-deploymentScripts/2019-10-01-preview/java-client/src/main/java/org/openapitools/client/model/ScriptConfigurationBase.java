/*
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentVariable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Common configuration settings for both Azure PowerShell and Azure CLI scripts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:10.739390-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScriptConfigurationBase {
  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private String arguments;

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private List<EnvironmentVariable> environmentVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORCE_UPDATE_TAG = "forceUpdateTag";
  @SerializedName(SERIALIZED_NAME_FORCE_UPDATE_TAG)
  private String forceUpdateTag;

  public static final String SERIALIZED_NAME_PRIMARY_SCRIPT_URI = "primaryScriptUri";
  @SerializedName(SERIALIZED_NAME_PRIMARY_SCRIPT_URI)
  private String primaryScriptUri;

  public static final String SERIALIZED_NAME_RETENTION_INTERVAL = "retentionInterval";
  @SerializedName(SERIALIZED_NAME_RETENTION_INTERVAL)
  private String retentionInterval;

  public static final String SERIALIZED_NAME_SCRIPT_CONTENT = "scriptContent";
  @SerializedName(SERIALIZED_NAME_SCRIPT_CONTENT)
  private String scriptContent;

  public static final String SERIALIZED_NAME_SUPPORTING_SCRIPT_URIS = "supportingScriptUris";
  @SerializedName(SERIALIZED_NAME_SUPPORTING_SCRIPT_URIS)
  private List<String> supportingScriptUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public ScriptConfigurationBase() {
  }

  public ScriptConfigurationBase arguments(String arguments) {
    this.arguments = arguments;
    return this;
  }

  /**
   * Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &#39;West US 2&#39; 
   * @return arguments
   */
  @javax.annotation.Nullable
  public String getArguments() {
    return arguments;
  }

  public void setArguments(String arguments) {
    this.arguments = arguments;
  }


  public ScriptConfigurationBase environmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public ScriptConfigurationBase addEnvironmentVariablesItem(EnvironmentVariable environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new ArrayList<>();
    }
    this.environmentVariables.add(environmentVariablesItem);
    return this;
  }

  /**
   * The environment variables to pass over to the script.
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public List<EnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public ScriptConfigurationBase forceUpdateTag(String forceUpdateTag) {
    this.forceUpdateTag = forceUpdateTag;
    return this;
  }

  /**
   * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
   * @return forceUpdateTag
   */
  @javax.annotation.Nullable
  public String getForceUpdateTag() {
    return forceUpdateTag;
  }

  public void setForceUpdateTag(String forceUpdateTag) {
    this.forceUpdateTag = forceUpdateTag;
  }


  public ScriptConfigurationBase primaryScriptUri(String primaryScriptUri) {
    this.primaryScriptUri = primaryScriptUri;
    return this;
  }

  /**
   * Uri for the script. This is the entry point for the external script.
   * @return primaryScriptUri
   */
  @javax.annotation.Nullable
  public String getPrimaryScriptUri() {
    return primaryScriptUri;
  }

  public void setPrimaryScriptUri(String primaryScriptUri) {
    this.primaryScriptUri = primaryScriptUri;
  }


  public ScriptConfigurationBase retentionInterval(String retentionInterval) {
    this.retentionInterval = retentionInterval;
    return this;
  }

  /**
   * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).
   * @return retentionInterval
   */
  @javax.annotation.Nonnull
  public String getRetentionInterval() {
    return retentionInterval;
  }

  public void setRetentionInterval(String retentionInterval) {
    this.retentionInterval = retentionInterval;
  }


  public ScriptConfigurationBase scriptContent(String scriptContent) {
    this.scriptContent = scriptContent;
    return this;
  }

  /**
   * Script body.
   * @return scriptContent
   */
  @javax.annotation.Nullable
  public String getScriptContent() {
    return scriptContent;
  }

  public void setScriptContent(String scriptContent) {
    this.scriptContent = scriptContent;
  }


  public ScriptConfigurationBase supportingScriptUris(List<String> supportingScriptUris) {
    this.supportingScriptUris = supportingScriptUris;
    return this;
  }

  public ScriptConfigurationBase addSupportingScriptUrisItem(String supportingScriptUrisItem) {
    if (this.supportingScriptUris == null) {
      this.supportingScriptUris = new ArrayList<>();
    }
    this.supportingScriptUris.add(supportingScriptUrisItem);
    return this;
  }

  /**
   * Supporting files for the external script.
   * @return supportingScriptUris
   */
  @javax.annotation.Nullable
  public List<String> getSupportingScriptUris() {
    return supportingScriptUris;
  }

  public void setSupportingScriptUris(List<String> supportingScriptUris) {
    this.supportingScriptUris = supportingScriptUris;
  }


  public ScriptConfigurationBase timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScriptConfigurationBase scriptConfigurationBase = (ScriptConfigurationBase) o;
    return Objects.equals(this.arguments, scriptConfigurationBase.arguments) &&
        Objects.equals(this.environmentVariables, scriptConfigurationBase.environmentVariables) &&
        Objects.equals(this.forceUpdateTag, scriptConfigurationBase.forceUpdateTag) &&
        Objects.equals(this.primaryScriptUri, scriptConfigurationBase.primaryScriptUri) &&
        Objects.equals(this.retentionInterval, scriptConfigurationBase.retentionInterval) &&
        Objects.equals(this.scriptContent, scriptConfigurationBase.scriptContent) &&
        Objects.equals(this.supportingScriptUris, scriptConfigurationBase.supportingScriptUris) &&
        Objects.equals(this.timeout, scriptConfigurationBase.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arguments, environmentVariables, forceUpdateTag, primaryScriptUri, retentionInterval, scriptContent, supportingScriptUris, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScriptConfigurationBase {\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    forceUpdateTag: ").append(toIndentedString(forceUpdateTag)).append("\n");
    sb.append("    primaryScriptUri: ").append(toIndentedString(primaryScriptUri)).append("\n");
    sb.append("    retentionInterval: ").append(toIndentedString(retentionInterval)).append("\n");
    sb.append("    scriptContent: ").append(toIndentedString(scriptContent)).append("\n");
    sb.append("    supportingScriptUris: ").append(toIndentedString(supportingScriptUris)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arguments");
    openapiFields.add("environmentVariables");
    openapiFields.add("forceUpdateTag");
    openapiFields.add("primaryScriptUri");
    openapiFields.add("retentionInterval");
    openapiFields.add("scriptContent");
    openapiFields.add("supportingScriptUris");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("retentionInterval");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScriptConfigurationBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScriptConfigurationBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScriptConfigurationBase is not found in the empty JSON string", ScriptConfigurationBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScriptConfigurationBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScriptConfigurationBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScriptConfigurationBase.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull()) && !jsonObj.get("arguments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arguments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arguments").toString()));
      }
      if (jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) {
        JsonArray jsonArrayenvironmentVariables = jsonObj.getAsJsonArray("environmentVariables");
        if (jsonArrayenvironmentVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentVariables` to be an array in the JSON string but got `%s`", jsonObj.get("environmentVariables").toString()));
          }

          // validate the optional field `environmentVariables` (array)
          for (int i = 0; i < jsonArrayenvironmentVariables.size(); i++) {
            EnvironmentVariable.validateJsonElement(jsonArrayenvironmentVariables.get(i));
          };
        }
      }
      if ((jsonObj.get("forceUpdateTag") != null && !jsonObj.get("forceUpdateTag").isJsonNull()) && !jsonObj.get("forceUpdateTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forceUpdateTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forceUpdateTag").toString()));
      }
      if ((jsonObj.get("primaryScriptUri") != null && !jsonObj.get("primaryScriptUri").isJsonNull()) && !jsonObj.get("primaryScriptUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryScriptUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryScriptUri").toString()));
      }
      if (!jsonObj.get("retentionInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retentionInterval").toString()));
      }
      if ((jsonObj.get("scriptContent") != null && !jsonObj.get("scriptContent").isJsonNull()) && !jsonObj.get("scriptContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptContent").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportingScriptUris") != null && !jsonObj.get("supportingScriptUris").isJsonNull() && !jsonObj.get("supportingScriptUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportingScriptUris` to be an array in the JSON string but got `%s`", jsonObj.get("supportingScriptUris").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScriptConfigurationBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScriptConfigurationBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScriptConfigurationBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScriptConfigurationBase.class));

       return (TypeAdapter<T>) new TypeAdapter<ScriptConfigurationBase>() {
           @Override
           public void write(JsonWriter out, ScriptConfigurationBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScriptConfigurationBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScriptConfigurationBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScriptConfigurationBase
   * @throws IOException if the JSON string is invalid with respect to ScriptConfigurationBase
   */
  public static ScriptConfigurationBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScriptConfigurationBase.class);
  }

  /**
   * Convert an instance of ScriptConfigurationBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

