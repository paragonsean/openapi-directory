/*
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EnvironmentVariable;
import org.openapitools.client.model.ScriptStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the Azure PowerShell script object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:10.739390-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzurePowerShellScriptProperties {
  public static final String SERIALIZED_NAME_AZ_POWER_SHELL_VERSION = "azPowerShellVersion";
  @SerializedName(SERIALIZED_NAME_AZ_POWER_SHELL_VERSION)
  private String azPowerShellVersion;

  /**
   * The clean up preference when the script execution gets in a terminal state. Default setting is &#39;Always&#39;.
   */
  @JsonAdapter(CleanupPreferenceEnum.Adapter.class)
  public enum CleanupPreferenceEnum {
    ALWAYS("Always"),
    
    ON_SUCCESS("OnSuccess"),
    
    ON_EXPIRATION("OnExpiration");

    private String value;

    CleanupPreferenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CleanupPreferenceEnum fromValue(String value) {
      for (CleanupPreferenceEnum b : CleanupPreferenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CleanupPreferenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CleanupPreferenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CleanupPreferenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CleanupPreferenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CleanupPreferenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLEANUP_PREFERENCE = "cleanupPreference";
  @SerializedName(SERIALIZED_NAME_CLEANUP_PREFERENCE)
  private CleanupPreferenceEnum cleanupPreference;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Map<String, Object> outputs = new HashMap<>();

  /**
   * State of the script execution. This only appears in the response.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    PROVISIONING_RESOURCES("ProvisioningResources"),
    
    RUNNING("Running"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ScriptStatus status;

  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private String arguments;

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private List<EnvironmentVariable> environmentVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORCE_UPDATE_TAG = "forceUpdateTag";
  @SerializedName(SERIALIZED_NAME_FORCE_UPDATE_TAG)
  private String forceUpdateTag;

  public static final String SERIALIZED_NAME_PRIMARY_SCRIPT_URI = "primaryScriptUri";
  @SerializedName(SERIALIZED_NAME_PRIMARY_SCRIPT_URI)
  private String primaryScriptUri;

  public static final String SERIALIZED_NAME_RETENTION_INTERVAL = "retentionInterval";
  @SerializedName(SERIALIZED_NAME_RETENTION_INTERVAL)
  private String retentionInterval;

  public static final String SERIALIZED_NAME_SCRIPT_CONTENT = "scriptContent";
  @SerializedName(SERIALIZED_NAME_SCRIPT_CONTENT)
  private String scriptContent;

  public static final String SERIALIZED_NAME_SUPPORTING_SCRIPT_URIS = "supportingScriptUris";
  @SerializedName(SERIALIZED_NAME_SUPPORTING_SCRIPT_URIS)
  private List<String> supportingScriptUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public AzurePowerShellScriptProperties() {
  }

  public AzurePowerShellScriptProperties(
     Map<String, Object> outputs, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.outputs = outputs;
    this.provisioningState = provisioningState;
  }

  public AzurePowerShellScriptProperties azPowerShellVersion(String azPowerShellVersion) {
    this.azPowerShellVersion = azPowerShellVersion;
    return this;
  }

  /**
   * Azure PowerShell module version to be used.
   * @return azPowerShellVersion
   */
  @javax.annotation.Nonnull
  public String getAzPowerShellVersion() {
    return azPowerShellVersion;
  }

  public void setAzPowerShellVersion(String azPowerShellVersion) {
    this.azPowerShellVersion = azPowerShellVersion;
  }


  public AzurePowerShellScriptProperties cleanupPreference(CleanupPreferenceEnum cleanupPreference) {
    this.cleanupPreference = cleanupPreference;
    return this;
  }

  /**
   * The clean up preference when the script execution gets in a terminal state. Default setting is &#39;Always&#39;.
   * @return cleanupPreference
   */
  @javax.annotation.Nullable
  public CleanupPreferenceEnum getCleanupPreference() {
    return cleanupPreference;
  }

  public void setCleanupPreference(CleanupPreferenceEnum cleanupPreference) {
    this.cleanupPreference = cleanupPreference;
  }


  /**
   * List of script outputs.
   * @return outputs
   */
  @javax.annotation.Nullable
  public Map<String, Object> getOutputs() {
    return outputs;
  }



  /**
   * State of the script execution. This only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public AzurePowerShellScriptProperties status(ScriptStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ScriptStatus getStatus() {
    return status;
  }

  public void setStatus(ScriptStatus status) {
    this.status = status;
  }


  public AzurePowerShellScriptProperties arguments(String arguments) {
    this.arguments = arguments;
    return this;
  }

  /**
   * Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &#39;West US 2&#39; 
   * @return arguments
   */
  @javax.annotation.Nullable
  public String getArguments() {
    return arguments;
  }

  public void setArguments(String arguments) {
    this.arguments = arguments;
  }


  public AzurePowerShellScriptProperties environmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public AzurePowerShellScriptProperties addEnvironmentVariablesItem(EnvironmentVariable environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new ArrayList<>();
    }
    this.environmentVariables.add(environmentVariablesItem);
    return this;
  }

  /**
   * The environment variables to pass over to the script.
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public List<EnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public AzurePowerShellScriptProperties forceUpdateTag(String forceUpdateTag) {
    this.forceUpdateTag = forceUpdateTag;
    return this;
  }

  /**
   * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
   * @return forceUpdateTag
   */
  @javax.annotation.Nullable
  public String getForceUpdateTag() {
    return forceUpdateTag;
  }

  public void setForceUpdateTag(String forceUpdateTag) {
    this.forceUpdateTag = forceUpdateTag;
  }


  public AzurePowerShellScriptProperties primaryScriptUri(String primaryScriptUri) {
    this.primaryScriptUri = primaryScriptUri;
    return this;
  }

  /**
   * Uri for the script. This is the entry point for the external script.
   * @return primaryScriptUri
   */
  @javax.annotation.Nullable
  public String getPrimaryScriptUri() {
    return primaryScriptUri;
  }

  public void setPrimaryScriptUri(String primaryScriptUri) {
    this.primaryScriptUri = primaryScriptUri;
  }


  public AzurePowerShellScriptProperties retentionInterval(String retentionInterval) {
    this.retentionInterval = retentionInterval;
    return this;
  }

  /**
   * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).
   * @return retentionInterval
   */
  @javax.annotation.Nonnull
  public String getRetentionInterval() {
    return retentionInterval;
  }

  public void setRetentionInterval(String retentionInterval) {
    this.retentionInterval = retentionInterval;
  }


  public AzurePowerShellScriptProperties scriptContent(String scriptContent) {
    this.scriptContent = scriptContent;
    return this;
  }

  /**
   * Script body.
   * @return scriptContent
   */
  @javax.annotation.Nullable
  public String getScriptContent() {
    return scriptContent;
  }

  public void setScriptContent(String scriptContent) {
    this.scriptContent = scriptContent;
  }


  public AzurePowerShellScriptProperties supportingScriptUris(List<String> supportingScriptUris) {
    this.supportingScriptUris = supportingScriptUris;
    return this;
  }

  public AzurePowerShellScriptProperties addSupportingScriptUrisItem(String supportingScriptUrisItem) {
    if (this.supportingScriptUris == null) {
      this.supportingScriptUris = new ArrayList<>();
    }
    this.supportingScriptUris.add(supportingScriptUrisItem);
    return this;
  }

  /**
   * Supporting files for the external script.
   * @return supportingScriptUris
   */
  @javax.annotation.Nullable
  public List<String> getSupportingScriptUris() {
    return supportingScriptUris;
  }

  public void setSupportingScriptUris(List<String> supportingScriptUris) {
    this.supportingScriptUris = supportingScriptUris;
  }


  public AzurePowerShellScriptProperties timeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H
   * @return timeout
   */
  @javax.annotation.Nullable
  public String getTimeout() {
    return timeout;
  }

  public void setTimeout(String timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzurePowerShellScriptProperties azurePowerShellScriptProperties = (AzurePowerShellScriptProperties) o;
    return Objects.equals(this.azPowerShellVersion, azurePowerShellScriptProperties.azPowerShellVersion) &&
        Objects.equals(this.cleanupPreference, azurePowerShellScriptProperties.cleanupPreference) &&
        Objects.equals(this.outputs, azurePowerShellScriptProperties.outputs) &&
        Objects.equals(this.provisioningState, azurePowerShellScriptProperties.provisioningState) &&
        Objects.equals(this.status, azurePowerShellScriptProperties.status) &&
        Objects.equals(this.arguments, azurePowerShellScriptProperties.arguments) &&
        Objects.equals(this.environmentVariables, azurePowerShellScriptProperties.environmentVariables) &&
        Objects.equals(this.forceUpdateTag, azurePowerShellScriptProperties.forceUpdateTag) &&
        Objects.equals(this.primaryScriptUri, azurePowerShellScriptProperties.primaryScriptUri) &&
        Objects.equals(this.retentionInterval, azurePowerShellScriptProperties.retentionInterval) &&
        Objects.equals(this.scriptContent, azurePowerShellScriptProperties.scriptContent) &&
        Objects.equals(this.supportingScriptUris, azurePowerShellScriptProperties.supportingScriptUris) &&
        Objects.equals(this.timeout, azurePowerShellScriptProperties.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azPowerShellVersion, cleanupPreference, outputs, provisioningState, status, arguments, environmentVariables, forceUpdateTag, primaryScriptUri, retentionInterval, scriptContent, supportingScriptUris, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzurePowerShellScriptProperties {\n");
    sb.append("    azPowerShellVersion: ").append(toIndentedString(azPowerShellVersion)).append("\n");
    sb.append("    cleanupPreference: ").append(toIndentedString(cleanupPreference)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    forceUpdateTag: ").append(toIndentedString(forceUpdateTag)).append("\n");
    sb.append("    primaryScriptUri: ").append(toIndentedString(primaryScriptUri)).append("\n");
    sb.append("    retentionInterval: ").append(toIndentedString(retentionInterval)).append("\n");
    sb.append("    scriptContent: ").append(toIndentedString(scriptContent)).append("\n");
    sb.append("    supportingScriptUris: ").append(toIndentedString(supportingScriptUris)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cleanupPreference");
    openapiFields.add("outputs");
    openapiFields.add("provisioningState");
    openapiFields.add("status");
    openapiFields.add("arguments");
    openapiFields.add("environmentVariables");
    openapiFields.add("forceUpdateTag");
    openapiFields.add("primaryScriptUri");
    openapiFields.add("retentionInterval");
    openapiFields.add("scriptContent");
    openapiFields.add("supportingScriptUris");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("azPowerShellVersion");
    openapiRequiredFields.add("retentionInterval");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzurePowerShellScriptProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzurePowerShellScriptProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzurePowerShellScriptProperties is not found in the empty JSON string", AzurePowerShellScriptProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzurePowerShellScriptProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzurePowerShellScriptProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AzurePowerShellScriptProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("azPowerShellVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azPowerShellVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azPowerShellVersion").toString()));
      }
      if ((jsonObj.get("cleanupPreference") != null && !jsonObj.get("cleanupPreference").isJsonNull()) && !jsonObj.get("cleanupPreference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cleanupPreference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cleanupPreference").toString()));
      }
      // validate the optional field `cleanupPreference`
      if (jsonObj.get("cleanupPreference") != null && !jsonObj.get("cleanupPreference").isJsonNull()) {
        CleanupPreferenceEnum.validateJsonElement(jsonObj.get("cleanupPreference"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ScriptStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("arguments") != null && !jsonObj.get("arguments").isJsonNull()) && !jsonObj.get("arguments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arguments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arguments").toString()));
      }
      if (jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) {
        JsonArray jsonArrayenvironmentVariables = jsonObj.getAsJsonArray("environmentVariables");
        if (jsonArrayenvironmentVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentVariables` to be an array in the JSON string but got `%s`", jsonObj.get("environmentVariables").toString()));
          }

          // validate the optional field `environmentVariables` (array)
          for (int i = 0; i < jsonArrayenvironmentVariables.size(); i++) {
            EnvironmentVariable.validateJsonElement(jsonArrayenvironmentVariables.get(i));
          };
        }
      }
      if ((jsonObj.get("forceUpdateTag") != null && !jsonObj.get("forceUpdateTag").isJsonNull()) && !jsonObj.get("forceUpdateTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forceUpdateTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forceUpdateTag").toString()));
      }
      if ((jsonObj.get("primaryScriptUri") != null && !jsonObj.get("primaryScriptUri").isJsonNull()) && !jsonObj.get("primaryScriptUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryScriptUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryScriptUri").toString()));
      }
      if (!jsonObj.get("retentionInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retentionInterval").toString()));
      }
      if ((jsonObj.get("scriptContent") != null && !jsonObj.get("scriptContent").isJsonNull()) && !jsonObj.get("scriptContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scriptContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scriptContent").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportingScriptUris") != null && !jsonObj.get("supportingScriptUris").isJsonNull() && !jsonObj.get("supportingScriptUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportingScriptUris` to be an array in the JSON string but got `%s`", jsonObj.get("supportingScriptUris").toString()));
      }
      if ((jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) && !jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzurePowerShellScriptProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzurePowerShellScriptProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzurePowerShellScriptProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzurePowerShellScriptProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AzurePowerShellScriptProperties>() {
           @Override
           public void write(JsonWriter out, AzurePowerShellScriptProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzurePowerShellScriptProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzurePowerShellScriptProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzurePowerShellScriptProperties
   * @throws IOException if the JSON string is invalid with respect to AzurePowerShellScriptProperties
   */
  public static AzurePowerShellScriptProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzurePowerShellScriptProperties.class);
  }

  /**
   * Convert an instance of AzurePowerShellScriptProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

