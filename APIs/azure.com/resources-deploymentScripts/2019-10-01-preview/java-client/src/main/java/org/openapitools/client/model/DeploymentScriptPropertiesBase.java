/*
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ScriptStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Common properties for the deployment script.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:10.739390-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeploymentScriptPropertiesBase {
  /**
   * The clean up preference when the script execution gets in a terminal state. Default setting is &#39;Always&#39;.
   */
  @JsonAdapter(CleanupPreferenceEnum.Adapter.class)
  public enum CleanupPreferenceEnum {
    ALWAYS("Always"),
    
    ON_SUCCESS("OnSuccess"),
    
    ON_EXPIRATION("OnExpiration");

    private String value;

    CleanupPreferenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CleanupPreferenceEnum fromValue(String value) {
      for (CleanupPreferenceEnum b : CleanupPreferenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CleanupPreferenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CleanupPreferenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CleanupPreferenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CleanupPreferenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CleanupPreferenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLEANUP_PREFERENCE = "cleanupPreference";
  @SerializedName(SERIALIZED_NAME_CLEANUP_PREFERENCE)
  private CleanupPreferenceEnum cleanupPreference;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Map<String, Object> outputs = new HashMap<>();

  /**
   * State of the script execution. This only appears in the response.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    PROVISIONING_RESOURCES("ProvisioningResources"),
    
    RUNNING("Running"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ScriptStatus status;

  public DeploymentScriptPropertiesBase() {
  }

  public DeploymentScriptPropertiesBase(
     Map<String, Object> outputs, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.outputs = outputs;
    this.provisioningState = provisioningState;
  }

  public DeploymentScriptPropertiesBase cleanupPreference(CleanupPreferenceEnum cleanupPreference) {
    this.cleanupPreference = cleanupPreference;
    return this;
  }

  /**
   * The clean up preference when the script execution gets in a terminal state. Default setting is &#39;Always&#39;.
   * @return cleanupPreference
   */
  @javax.annotation.Nullable
  public CleanupPreferenceEnum getCleanupPreference() {
    return cleanupPreference;
  }

  public void setCleanupPreference(CleanupPreferenceEnum cleanupPreference) {
    this.cleanupPreference = cleanupPreference;
  }


  /**
   * List of script outputs.
   * @return outputs
   */
  @javax.annotation.Nullable
  public Map<String, Object> getOutputs() {
    return outputs;
  }



  /**
   * State of the script execution. This only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public DeploymentScriptPropertiesBase status(ScriptStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ScriptStatus getStatus() {
    return status;
  }

  public void setStatus(ScriptStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentScriptPropertiesBase deploymentScriptPropertiesBase = (DeploymentScriptPropertiesBase) o;
    return Objects.equals(this.cleanupPreference, deploymentScriptPropertiesBase.cleanupPreference) &&
        Objects.equals(this.outputs, deploymentScriptPropertiesBase.outputs) &&
        Objects.equals(this.provisioningState, deploymentScriptPropertiesBase.provisioningState) &&
        Objects.equals(this.status, deploymentScriptPropertiesBase.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cleanupPreference, outputs, provisioningState, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentScriptPropertiesBase {\n");
    sb.append("    cleanupPreference: ").append(toIndentedString(cleanupPreference)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cleanupPreference");
    openapiFields.add("outputs");
    openapiFields.add("provisioningState");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeploymentScriptPropertiesBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentScriptPropertiesBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentScriptPropertiesBase is not found in the empty JSON string", DeploymentScriptPropertiesBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentScriptPropertiesBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentScriptPropertiesBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cleanupPreference") != null && !jsonObj.get("cleanupPreference").isJsonNull()) && !jsonObj.get("cleanupPreference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cleanupPreference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cleanupPreference").toString()));
      }
      // validate the optional field `cleanupPreference`
      if (jsonObj.get("cleanupPreference") != null && !jsonObj.get("cleanupPreference").isJsonNull()) {
        CleanupPreferenceEnum.validateJsonElement(jsonObj.get("cleanupPreference"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ScriptStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentScriptPropertiesBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentScriptPropertiesBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentScriptPropertiesBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentScriptPropertiesBase.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentScriptPropertiesBase>() {
           @Override
           public void write(JsonWriter out, DeploymentScriptPropertiesBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentScriptPropertiesBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeploymentScriptPropertiesBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeploymentScriptPropertiesBase
   * @throws IOException if the JSON string is invalid with respect to DeploymentScriptPropertiesBase
   */
  public static DeploymentScriptPropertiesBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentScriptPropertiesBase.class);
  }

  /**
   * Convert an instance of DeploymentScriptPropertiesBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

