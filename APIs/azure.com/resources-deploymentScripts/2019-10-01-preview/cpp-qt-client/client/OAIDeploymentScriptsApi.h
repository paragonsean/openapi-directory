/**
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeploymentScriptsApi_H
#define OAI_OAIDeploymentScriptsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultErrorResponse.h"
#include "OAIDeploymentScript.h"
#include "OAIDeploymentScriptListResult.h"
#include "OAIDeploymentScriptUpdateParameter.h"
#include "OAIScriptLog.h"
#include "OAIScriptLogsList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeploymentScriptsApi : public QObject {
    Q_OBJECT

public:
    OAIDeploymentScriptsApi(const int timeOut = 0);
    ~OAIDeploymentScriptsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  script_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deployment_script OAIDeploymentScript [required]
    */
    virtual void deploymentScriptsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &script_name, const QString &api_version, const OAIDeploymentScript &deployment_script);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  script_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deploymentScriptsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &script_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  script_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deploymentScriptsGet(const QString &subscription_id, const QString &resource_group_name, const QString &script_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  script_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deploymentScriptsGetLogs(const QString &subscription_id, const QString &resource_group_name, const QString &script_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  script_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deploymentScriptsGetLogsDefault(const QString &subscription_id, const QString &resource_group_name, const QString &script_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deploymentScriptsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deploymentScriptsListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  script_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deployment_script OAIDeploymentScriptUpdateParameter [optional]
    */
    virtual void deploymentScriptsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &script_name, const QString &api_version, const ::OpenAPI::OptionalParam<OAIDeploymentScriptUpdateParameter> &deployment_script = ::OpenAPI::OptionalParam<OAIDeploymentScriptUpdateParameter>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deploymentScriptsCreateCallback(OAIHttpRequestWorker *worker);
    void deploymentScriptsDeleteCallback(OAIHttpRequestWorker *worker);
    void deploymentScriptsGetCallback(OAIHttpRequestWorker *worker);
    void deploymentScriptsGetLogsCallback(OAIHttpRequestWorker *worker);
    void deploymentScriptsGetLogsDefaultCallback(OAIHttpRequestWorker *worker);
    void deploymentScriptsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void deploymentScriptsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void deploymentScriptsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deploymentScriptsCreateSignal(OAIDeploymentScript summary);
    void deploymentScriptsDeleteSignal();
    void deploymentScriptsGetSignal(OAIDeploymentScript summary);
    void deploymentScriptsGetLogsSignal(OAIScriptLogsList summary);
    void deploymentScriptsGetLogsDefaultSignal(OAIScriptLog summary);
    void deploymentScriptsListByResourceGroupSignal(OAIDeploymentScriptListResult summary);
    void deploymentScriptsListBySubscriptionSignal(OAIDeploymentScriptListResult summary);
    void deploymentScriptsUpdateSignal(OAIDeploymentScript summary);


    void deploymentScriptsCreateSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentScript summary);
    void deploymentScriptsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void deploymentScriptsGetSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentScript summary);
    void deploymentScriptsGetLogsSignalFull(OAIHttpRequestWorker *worker, OAIScriptLogsList summary);
    void deploymentScriptsGetLogsDefaultSignalFull(OAIHttpRequestWorker *worker, OAIScriptLog summary);
    void deploymentScriptsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentScriptListResult summary);
    void deploymentScriptsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentScriptListResult summary);
    void deploymentScriptsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentScript summary);

    Q_DECL_DEPRECATED_X("Use deploymentScriptsCreateSignalError() instead")
    void deploymentScriptsCreateSignalE(OAIDeploymentScript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsCreateSignalError(OAIDeploymentScript summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsDeleteSignalError() instead")
    void deploymentScriptsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsGetSignalError() instead")
    void deploymentScriptsGetSignalE(OAIDeploymentScript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsGetSignalError(OAIDeploymentScript summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsGetLogsSignalError() instead")
    void deploymentScriptsGetLogsSignalE(OAIScriptLogsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsGetLogsSignalError(OAIScriptLogsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsGetLogsDefaultSignalError() instead")
    void deploymentScriptsGetLogsDefaultSignalE(OAIScriptLog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsGetLogsDefaultSignalError(OAIScriptLog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsListByResourceGroupSignalError() instead")
    void deploymentScriptsListByResourceGroupSignalE(OAIDeploymentScriptListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsListByResourceGroupSignalError(OAIDeploymentScriptListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsListBySubscriptionSignalError() instead")
    void deploymentScriptsListBySubscriptionSignalE(OAIDeploymentScriptListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsListBySubscriptionSignalError(OAIDeploymentScriptListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsUpdateSignalError() instead")
    void deploymentScriptsUpdateSignalE(OAIDeploymentScript summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsUpdateSignalError(OAIDeploymentScript summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deploymentScriptsCreateSignalErrorFull() instead")
    void deploymentScriptsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsDeleteSignalErrorFull() instead")
    void deploymentScriptsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsGetSignalErrorFull() instead")
    void deploymentScriptsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsGetLogsSignalErrorFull() instead")
    void deploymentScriptsGetLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsGetLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsGetLogsDefaultSignalErrorFull() instead")
    void deploymentScriptsGetLogsDefaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsGetLogsDefaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsListByResourceGroupSignalErrorFull() instead")
    void deploymentScriptsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsListBySubscriptionSignalErrorFull() instead")
    void deploymentScriptsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentScriptsUpdateSignalErrorFull() instead")
    void deploymentScriptsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentScriptsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
