/**
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScriptConfigurationBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScriptConfigurationBase::OAIScriptConfigurationBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScriptConfigurationBase::OAIScriptConfigurationBase() {
    this->initializeModel();
}

OAIScriptConfigurationBase::~OAIScriptConfigurationBase() {}

void OAIScriptConfigurationBase::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_force_update_tag_isSet = false;
    m_force_update_tag_isValid = false;

    m_primary_script_uri_isSet = false;
    m_primary_script_uri_isValid = false;

    m_retention_interval_isSet = false;
    m_retention_interval_isValid = false;

    m_script_content_isSet = false;
    m_script_content_isValid = false;

    m_supporting_script_uris_isSet = false;
    m_supporting_script_uris_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIScriptConfigurationBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScriptConfigurationBase::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_force_update_tag_isValid = ::OpenAPI::fromJsonValue(m_force_update_tag, json[QString("forceUpdateTag")]);
    m_force_update_tag_isSet = !json[QString("forceUpdateTag")].isNull() && m_force_update_tag_isValid;

    m_primary_script_uri_isValid = ::OpenAPI::fromJsonValue(m_primary_script_uri, json[QString("primaryScriptUri")]);
    m_primary_script_uri_isSet = !json[QString("primaryScriptUri")].isNull() && m_primary_script_uri_isValid;

    m_retention_interval_isValid = ::OpenAPI::fromJsonValue(m_retention_interval, json[QString("retentionInterval")]);
    m_retention_interval_isSet = !json[QString("retentionInterval")].isNull() && m_retention_interval_isValid;

    m_script_content_isValid = ::OpenAPI::fromJsonValue(m_script_content, json[QString("scriptContent")]);
    m_script_content_isSet = !json[QString("scriptContent")].isNull() && m_script_content_isValid;

    m_supporting_script_uris_isValid = ::OpenAPI::fromJsonValue(m_supporting_script_uris, json[QString("supportingScriptUris")]);
    m_supporting_script_uris_isSet = !json[QString("supportingScriptUris")].isNull() && m_supporting_script_uris_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIScriptConfigurationBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScriptConfigurationBase::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments_isSet) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_force_update_tag_isSet) {
        obj.insert(QString("forceUpdateTag"), ::OpenAPI::toJsonValue(m_force_update_tag));
    }
    if (m_primary_script_uri_isSet) {
        obj.insert(QString("primaryScriptUri"), ::OpenAPI::toJsonValue(m_primary_script_uri));
    }
    if (m_retention_interval_isSet) {
        obj.insert(QString("retentionInterval"), ::OpenAPI::toJsonValue(m_retention_interval));
    }
    if (m_script_content_isSet) {
        obj.insert(QString("scriptContent"), ::OpenAPI::toJsonValue(m_script_content));
    }
    if (m_supporting_script_uris.size() > 0) {
        obj.insert(QString("supportingScriptUris"), ::OpenAPI::toJsonValue(m_supporting_script_uris));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAIScriptConfigurationBase::getArguments() const {
    return m_arguments;
}
void OAIScriptConfigurationBase::setArguments(const QString &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIScriptConfigurationBase::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIScriptConfigurationBase::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QList<OAIEnvironmentVariable> OAIScriptConfigurationBase::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIScriptConfigurationBase::setEnvironmentVariables(const QList<OAIEnvironmentVariable> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIScriptConfigurationBase::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIScriptConfigurationBase::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QString OAIScriptConfigurationBase::getForceUpdateTag() const {
    return m_force_update_tag;
}
void OAIScriptConfigurationBase::setForceUpdateTag(const QString &force_update_tag) {
    m_force_update_tag = force_update_tag;
    m_force_update_tag_isSet = true;
}

bool OAIScriptConfigurationBase::is_force_update_tag_Set() const{
    return m_force_update_tag_isSet;
}

bool OAIScriptConfigurationBase::is_force_update_tag_Valid() const{
    return m_force_update_tag_isValid;
}

QString OAIScriptConfigurationBase::getPrimaryScriptUri() const {
    return m_primary_script_uri;
}
void OAIScriptConfigurationBase::setPrimaryScriptUri(const QString &primary_script_uri) {
    m_primary_script_uri = primary_script_uri;
    m_primary_script_uri_isSet = true;
}

bool OAIScriptConfigurationBase::is_primary_script_uri_Set() const{
    return m_primary_script_uri_isSet;
}

bool OAIScriptConfigurationBase::is_primary_script_uri_Valid() const{
    return m_primary_script_uri_isValid;
}

QString OAIScriptConfigurationBase::getRetentionInterval() const {
    return m_retention_interval;
}
void OAIScriptConfigurationBase::setRetentionInterval(const QString &retention_interval) {
    m_retention_interval = retention_interval;
    m_retention_interval_isSet = true;
}

bool OAIScriptConfigurationBase::is_retention_interval_Set() const{
    return m_retention_interval_isSet;
}

bool OAIScriptConfigurationBase::is_retention_interval_Valid() const{
    return m_retention_interval_isValid;
}

QString OAIScriptConfigurationBase::getScriptContent() const {
    return m_script_content;
}
void OAIScriptConfigurationBase::setScriptContent(const QString &script_content) {
    m_script_content = script_content;
    m_script_content_isSet = true;
}

bool OAIScriptConfigurationBase::is_script_content_Set() const{
    return m_script_content_isSet;
}

bool OAIScriptConfigurationBase::is_script_content_Valid() const{
    return m_script_content_isValid;
}

QList<QString> OAIScriptConfigurationBase::getSupportingScriptUris() const {
    return m_supporting_script_uris;
}
void OAIScriptConfigurationBase::setSupportingScriptUris(const QList<QString> &supporting_script_uris) {
    m_supporting_script_uris = supporting_script_uris;
    m_supporting_script_uris_isSet = true;
}

bool OAIScriptConfigurationBase::is_supporting_script_uris_Set() const{
    return m_supporting_script_uris_isSet;
}

bool OAIScriptConfigurationBase::is_supporting_script_uris_Valid() const{
    return m_supporting_script_uris_isValid;
}

QString OAIScriptConfigurationBase::getTimeout() const {
    return m_timeout;
}
void OAIScriptConfigurationBase::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIScriptConfigurationBase::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIScriptConfigurationBase::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIScriptConfigurationBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_update_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_script_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supporting_script_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScriptConfigurationBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_retention_interval_isValid && true;
}

} // namespace OpenAPI
