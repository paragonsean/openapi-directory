/**
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzurePowerShellScriptProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzurePowerShellScriptProperties::OAIAzurePowerShellScriptProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzurePowerShellScriptProperties::OAIAzurePowerShellScriptProperties() {
    this->initializeModel();
}

OAIAzurePowerShellScriptProperties::~OAIAzurePowerShellScriptProperties() {}

void OAIAzurePowerShellScriptProperties::initializeModel() {

    m_az_power_shell_version_isSet = false;
    m_az_power_shell_version_isValid = false;

    m_cleanup_preference_isSet = false;
    m_cleanup_preference_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_force_update_tag_isSet = false;
    m_force_update_tag_isValid = false;

    m_primary_script_uri_isSet = false;
    m_primary_script_uri_isValid = false;

    m_retention_interval_isSet = false;
    m_retention_interval_isValid = false;

    m_script_content_isSet = false;
    m_script_content_isValid = false;

    m_supporting_script_uris_isSet = false;
    m_supporting_script_uris_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIAzurePowerShellScriptProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzurePowerShellScriptProperties::fromJsonObject(QJsonObject json) {

    m_az_power_shell_version_isValid = ::OpenAPI::fromJsonValue(m_az_power_shell_version, json[QString("azPowerShellVersion")]);
    m_az_power_shell_version_isSet = !json[QString("azPowerShellVersion")].isNull() && m_az_power_shell_version_isValid;

    m_cleanup_preference_isValid = ::OpenAPI::fromJsonValue(m_cleanup_preference, json[QString("cleanupPreference")]);
    m_cleanup_preference_isSet = !json[QString("cleanupPreference")].isNull() && m_cleanup_preference_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_force_update_tag_isValid = ::OpenAPI::fromJsonValue(m_force_update_tag, json[QString("forceUpdateTag")]);
    m_force_update_tag_isSet = !json[QString("forceUpdateTag")].isNull() && m_force_update_tag_isValid;

    m_primary_script_uri_isValid = ::OpenAPI::fromJsonValue(m_primary_script_uri, json[QString("primaryScriptUri")]);
    m_primary_script_uri_isSet = !json[QString("primaryScriptUri")].isNull() && m_primary_script_uri_isValid;

    m_retention_interval_isValid = ::OpenAPI::fromJsonValue(m_retention_interval, json[QString("retentionInterval")]);
    m_retention_interval_isSet = !json[QString("retentionInterval")].isNull() && m_retention_interval_isValid;

    m_script_content_isValid = ::OpenAPI::fromJsonValue(m_script_content, json[QString("scriptContent")]);
    m_script_content_isSet = !json[QString("scriptContent")].isNull() && m_script_content_isValid;

    m_supporting_script_uris_isValid = ::OpenAPI::fromJsonValue(m_supporting_script_uris, json[QString("supportingScriptUris")]);
    m_supporting_script_uris_isSet = !json[QString("supportingScriptUris")].isNull() && m_supporting_script_uris_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIAzurePowerShellScriptProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzurePowerShellScriptProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_az_power_shell_version_isSet) {
        obj.insert(QString("azPowerShellVersion"), ::OpenAPI::toJsonValue(m_az_power_shell_version));
    }
    if (m_cleanup_preference_isSet) {
        obj.insert(QString("cleanupPreference"), ::OpenAPI::toJsonValue(m_cleanup_preference));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_arguments_isSet) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_force_update_tag_isSet) {
        obj.insert(QString("forceUpdateTag"), ::OpenAPI::toJsonValue(m_force_update_tag));
    }
    if (m_primary_script_uri_isSet) {
        obj.insert(QString("primaryScriptUri"), ::OpenAPI::toJsonValue(m_primary_script_uri));
    }
    if (m_retention_interval_isSet) {
        obj.insert(QString("retentionInterval"), ::OpenAPI::toJsonValue(m_retention_interval));
    }
    if (m_script_content_isSet) {
        obj.insert(QString("scriptContent"), ::OpenAPI::toJsonValue(m_script_content));
    }
    if (m_supporting_script_uris.size() > 0) {
        obj.insert(QString("supportingScriptUris"), ::OpenAPI::toJsonValue(m_supporting_script_uris));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAIAzurePowerShellScriptProperties::getAzPowerShellVersion() const {
    return m_az_power_shell_version;
}
void OAIAzurePowerShellScriptProperties::setAzPowerShellVersion(const QString &az_power_shell_version) {
    m_az_power_shell_version = az_power_shell_version;
    m_az_power_shell_version_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_az_power_shell_version_Set() const{
    return m_az_power_shell_version_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_az_power_shell_version_Valid() const{
    return m_az_power_shell_version_isValid;
}

QString OAIAzurePowerShellScriptProperties::getCleanupPreference() const {
    return m_cleanup_preference;
}
void OAIAzurePowerShellScriptProperties::setCleanupPreference(const QString &cleanup_preference) {
    m_cleanup_preference = cleanup_preference;
    m_cleanup_preference_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_cleanup_preference_Set() const{
    return m_cleanup_preference_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_cleanup_preference_Valid() const{
    return m_cleanup_preference_isValid;
}

QMap<QString, OAIObject> OAIAzurePowerShellScriptProperties::getOutputs() const {
    return m_outputs;
}
void OAIAzurePowerShellScriptProperties::setOutputs(const QMap<QString, OAIObject> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QString OAIAzurePowerShellScriptProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIAzurePowerShellScriptProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIScriptStatus OAIAzurePowerShellScriptProperties::getStatus() const {
    return m_status;
}
void OAIAzurePowerShellScriptProperties::setStatus(const OAIScriptStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAzurePowerShellScriptProperties::getArguments() const {
    return m_arguments;
}
void OAIAzurePowerShellScriptProperties::setArguments(const QString &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QList<OAIEnvironmentVariable> OAIAzurePowerShellScriptProperties::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIAzurePowerShellScriptProperties::setEnvironmentVariables(const QList<OAIEnvironmentVariable> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QString OAIAzurePowerShellScriptProperties::getForceUpdateTag() const {
    return m_force_update_tag;
}
void OAIAzurePowerShellScriptProperties::setForceUpdateTag(const QString &force_update_tag) {
    m_force_update_tag = force_update_tag;
    m_force_update_tag_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_force_update_tag_Set() const{
    return m_force_update_tag_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_force_update_tag_Valid() const{
    return m_force_update_tag_isValid;
}

QString OAIAzurePowerShellScriptProperties::getPrimaryScriptUri() const {
    return m_primary_script_uri;
}
void OAIAzurePowerShellScriptProperties::setPrimaryScriptUri(const QString &primary_script_uri) {
    m_primary_script_uri = primary_script_uri;
    m_primary_script_uri_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_primary_script_uri_Set() const{
    return m_primary_script_uri_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_primary_script_uri_Valid() const{
    return m_primary_script_uri_isValid;
}

QString OAIAzurePowerShellScriptProperties::getRetentionInterval() const {
    return m_retention_interval;
}
void OAIAzurePowerShellScriptProperties::setRetentionInterval(const QString &retention_interval) {
    m_retention_interval = retention_interval;
    m_retention_interval_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_retention_interval_Set() const{
    return m_retention_interval_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_retention_interval_Valid() const{
    return m_retention_interval_isValid;
}

QString OAIAzurePowerShellScriptProperties::getScriptContent() const {
    return m_script_content;
}
void OAIAzurePowerShellScriptProperties::setScriptContent(const QString &script_content) {
    m_script_content = script_content;
    m_script_content_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_script_content_Set() const{
    return m_script_content_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_script_content_Valid() const{
    return m_script_content_isValid;
}

QList<QString> OAIAzurePowerShellScriptProperties::getSupportingScriptUris() const {
    return m_supporting_script_uris;
}
void OAIAzurePowerShellScriptProperties::setSupportingScriptUris(const QList<QString> &supporting_script_uris) {
    m_supporting_script_uris = supporting_script_uris;
    m_supporting_script_uris_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_supporting_script_uris_Set() const{
    return m_supporting_script_uris_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_supporting_script_uris_Valid() const{
    return m_supporting_script_uris_isValid;
}

QString OAIAzurePowerShellScriptProperties::getTimeout() const {
    return m_timeout;
}
void OAIAzurePowerShellScriptProperties::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIAzurePowerShellScriptProperties::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIAzurePowerShellScriptProperties::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIAzurePowerShellScriptProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_az_power_shell_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cleanup_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arguments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_update_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_script_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supporting_script_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzurePowerShellScriptProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_az_power_shell_version_isValid && m_retention_interval_isValid && true;
}

} // namespace OpenAPI
