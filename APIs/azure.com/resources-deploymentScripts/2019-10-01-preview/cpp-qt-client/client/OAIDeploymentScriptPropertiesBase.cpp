/**
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentScriptPropertiesBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentScriptPropertiesBase::OAIDeploymentScriptPropertiesBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentScriptPropertiesBase::OAIDeploymentScriptPropertiesBase() {
    this->initializeModel();
}

OAIDeploymentScriptPropertiesBase::~OAIDeploymentScriptPropertiesBase() {}

void OAIDeploymentScriptPropertiesBase::initializeModel() {

    m_cleanup_preference_isSet = false;
    m_cleanup_preference_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDeploymentScriptPropertiesBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploymentScriptPropertiesBase::fromJsonObject(QJsonObject json) {

    m_cleanup_preference_isValid = ::OpenAPI::fromJsonValue(m_cleanup_preference, json[QString("cleanupPreference")]);
    m_cleanup_preference_isSet = !json[QString("cleanupPreference")].isNull() && m_cleanup_preference_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDeploymentScriptPropertiesBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploymentScriptPropertiesBase::asJsonObject() const {
    QJsonObject obj;
    if (m_cleanup_preference_isSet) {
        obj.insert(QString("cleanupPreference"), ::OpenAPI::toJsonValue(m_cleanup_preference));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDeploymentScriptPropertiesBase::getCleanupPreference() const {
    return m_cleanup_preference;
}
void OAIDeploymentScriptPropertiesBase::setCleanupPreference(const QString &cleanup_preference) {
    m_cleanup_preference = cleanup_preference;
    m_cleanup_preference_isSet = true;
}

bool OAIDeploymentScriptPropertiesBase::is_cleanup_preference_Set() const{
    return m_cleanup_preference_isSet;
}

bool OAIDeploymentScriptPropertiesBase::is_cleanup_preference_Valid() const{
    return m_cleanup_preference_isValid;
}

QMap<QString, OAIObject> OAIDeploymentScriptPropertiesBase::getOutputs() const {
    return m_outputs;
}
void OAIDeploymentScriptPropertiesBase::setOutputs(const QMap<QString, OAIObject> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIDeploymentScriptPropertiesBase::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIDeploymentScriptPropertiesBase::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QString OAIDeploymentScriptPropertiesBase::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDeploymentScriptPropertiesBase::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDeploymentScriptPropertiesBase::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDeploymentScriptPropertiesBase::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIScriptStatus OAIDeploymentScriptPropertiesBase::getStatus() const {
    return m_status;
}
void OAIDeploymentScriptPropertiesBase::setStatus(const OAIScriptStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeploymentScriptPropertiesBase::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeploymentScriptPropertiesBase::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDeploymentScriptPropertiesBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cleanup_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploymentScriptPropertiesBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
