/**
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScriptStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScriptStatus::OAIScriptStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScriptStatus::OAIScriptStatus() {
    this->initializeModel();
}

OAIScriptStatus::~OAIScriptStatus() {}

void OAIScriptStatus::initializeModel() {

    m_container_instance_id_isSet = false;
    m_container_instance_id_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_storage_account_id_isSet = false;
    m_storage_account_id_isValid = false;
}

void OAIScriptStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScriptStatus::fromJsonObject(QJsonObject json) {

    m_container_instance_id_isValid = ::OpenAPI::fromJsonValue(m_container_instance_id, json[QString("containerInstanceId")]);
    m_container_instance_id_isSet = !json[QString("containerInstanceId")].isNull() && m_container_instance_id_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_id, json[QString("storageAccountId")]);
    m_storage_account_id_isSet = !json[QString("storageAccountId")].isNull() && m_storage_account_id_isValid;
}

QString OAIScriptStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScriptStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_container_instance_id_isSet) {
        obj.insert(QString("containerInstanceId"), ::OpenAPI::toJsonValue(m_container_instance_id));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_storage_account_id_isSet) {
        obj.insert(QString("storageAccountId"), ::OpenAPI::toJsonValue(m_storage_account_id));
    }
    return obj;
}

QString OAIScriptStatus::getContainerInstanceId() const {
    return m_container_instance_id;
}
void OAIScriptStatus::setContainerInstanceId(const QString &container_instance_id) {
    m_container_instance_id = container_instance_id;
    m_container_instance_id_isSet = true;
}

bool OAIScriptStatus::is_container_instance_id_Set() const{
    return m_container_instance_id_isSet;
}

bool OAIScriptStatus::is_container_instance_id_Valid() const{
    return m_container_instance_id_isValid;
}

QDateTime OAIScriptStatus::getEndTime() const {
    return m_end_time;
}
void OAIScriptStatus::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIScriptStatus::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIScriptStatus::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIDefaultErrorResponse OAIScriptStatus::getError() const {
    return m_error;
}
void OAIScriptStatus::setError(const OAIDefaultErrorResponse &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIScriptStatus::is_error_Set() const{
    return m_error_isSet;
}

bool OAIScriptStatus::is_error_Valid() const{
    return m_error_isValid;
}

QDateTime OAIScriptStatus::getExpirationTime() const {
    return m_expiration_time;
}
void OAIScriptStatus::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIScriptStatus::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIScriptStatus::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QDateTime OAIScriptStatus::getStartTime() const {
    return m_start_time;
}
void OAIScriptStatus::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIScriptStatus::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIScriptStatus::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIScriptStatus::getStorageAccountId() const {
    return m_storage_account_id;
}
void OAIScriptStatus::setStorageAccountId(const QString &storage_account_id) {
    m_storage_account_id = storage_account_id;
    m_storage_account_id_isSet = true;
}

bool OAIScriptStatus::is_storage_account_id_Set() const{
    return m_storage_account_id_isSet;
}

bool OAIScriptStatus::is_storage_account_id_Valid() const{
    return m_storage_account_id_isValid;
}

bool OAIScriptStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScriptStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
