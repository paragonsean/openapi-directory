/**
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorResponse from '../model/DefaultErrorResponse';
import DeploymentScript from '../model/DeploymentScript';
import DeploymentScriptListResult from '../model/DeploymentScriptListResult';
import DeploymentScriptUpdateParameter from '../model/DeploymentScriptUpdateParameter';
import ScriptLog from '../model/ScriptLog';
import ScriptLogsList from '../model/ScriptLogsList';

/**
* DeploymentScripts service.
* @module api/DeploymentScriptsApi
* @version 2019-10-01-preview
*/
export default class DeploymentScriptsApi {

    /**
    * Constructs a new DeploymentScriptsApi. 
    * @alias module:api/DeploymentScriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deploymentScriptsCreate operation.
     * @callback module:api/DeploymentScriptsApi~deploymentScriptsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentScript} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a deployment script.
     * @param {String} subscriptionId Subscription Id which forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} scriptName Name of the deployment script.
     * @param {String} apiVersion Client Api version.
     * @param {module:model/DeploymentScript} deploymentScript Deployment script supplied to the operation.
     * @param {module:api/DeploymentScriptsApi~deploymentScriptsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentScript}
     */
    deploymentScriptsCreate(subscriptionId, resourceGroupName, scriptName, apiVersion, deploymentScript, callback) {
      let postBody = deploymentScript;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentScriptsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsCreate");
      }
      // verify the required parameter 'scriptName' is set
      if (scriptName === undefined || scriptName === null) {
        throw new Error("Missing the required parameter 'scriptName' when calling deploymentScriptsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentScriptsCreate");
      }
      // verify the required parameter 'deploymentScript' is set
      if (deploymentScript === undefined || deploymentScript === null) {
        throw new Error("Missing the required parameter 'deploymentScript' when calling deploymentScriptsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'scriptName': scriptName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentScript;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentScriptsDelete operation.
     * @callback module:api/DeploymentScriptsApi~deploymentScriptsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a deployment script. When operation completes, status code 200 returned without content.
     * @param {String} subscriptionId Subscription Id which forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} scriptName Name of the deployment script.
     * @param {String} apiVersion Client Api version.
     * @param {module:api/DeploymentScriptsApi~deploymentScriptsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deploymentScriptsDelete(subscriptionId, resourceGroupName, scriptName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentScriptsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsDelete");
      }
      // verify the required parameter 'scriptName' is set
      if (scriptName === undefined || scriptName === null) {
        throw new Error("Missing the required parameter 'scriptName' when calling deploymentScriptsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentScriptsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'scriptName': scriptName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentScriptsGet operation.
     * @callback module:api/DeploymentScriptsApi~deploymentScriptsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentScript} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a deployment script with a given name.
     * @param {String} subscriptionId Subscription Id which forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} scriptName Name of the deployment script.
     * @param {String} apiVersion Client Api version.
     * @param {module:api/DeploymentScriptsApi~deploymentScriptsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentScript}
     */
    deploymentScriptsGet(subscriptionId, resourceGroupName, scriptName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentScriptsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsGet");
      }
      // verify the required parameter 'scriptName' is set
      if (scriptName === undefined || scriptName === null) {
        throw new Error("Missing the required parameter 'scriptName' when calling deploymentScriptsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentScriptsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'scriptName': scriptName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentScript;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentScriptsGetLogs operation.
     * @callback module:api/DeploymentScriptsApi~deploymentScriptsGetLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptLogsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets deployment script logs for a given deployment script name.
     * @param {String} subscriptionId Subscription Id which forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} scriptName Name of the deployment script.
     * @param {String} apiVersion Client Api version.
     * @param {module:api/DeploymentScriptsApi~deploymentScriptsGetLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptLogsList}
     */
    deploymentScriptsGetLogs(subscriptionId, resourceGroupName, scriptName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentScriptsGetLogs");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsGetLogs");
      }
      // verify the required parameter 'scriptName' is set
      if (scriptName === undefined || scriptName === null) {
        throw new Error("Missing the required parameter 'scriptName' when calling deploymentScriptsGetLogs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentScriptsGetLogs");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'scriptName': scriptName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScriptLogsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentScriptsGetLogsDefault operation.
     * @callback module:api/DeploymentScriptsApi~deploymentScriptsGetLogsDefaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptLog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets deployment script logs for a given deployment script name.
     * @param {String} subscriptionId Subscription Id which forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} scriptName Name of the deployment script.
     * @param {String} apiVersion Client Api version.
     * @param {module:api/DeploymentScriptsApi~deploymentScriptsGetLogsDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptLog}
     */
    deploymentScriptsGetLogsDefault(subscriptionId, resourceGroupName, scriptName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentScriptsGetLogsDefault");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsGetLogsDefault");
      }
      // verify the required parameter 'scriptName' is set
      if (scriptName === undefined || scriptName === null) {
        throw new Error("Missing the required parameter 'scriptName' when calling deploymentScriptsGetLogsDefault");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentScriptsGetLogsDefault");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'scriptName': scriptName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScriptLog;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}/logs/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentScriptsListByResourceGroup operation.
     * @callback module:api/DeploymentScriptsApi~deploymentScriptsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentScriptListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists deployments scripts.
     * @param {String} subscriptionId Subscription Id which forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion Client Api version.
     * @param {module:api/DeploymentScriptsApi~deploymentScriptsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentScriptListResult}
     */
    deploymentScriptsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentScriptsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentScriptsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentScriptListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentScriptsListBySubscription operation.
     * @callback module:api/DeploymentScriptsApi~deploymentScriptsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentScriptListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all deployment scripts for a given subscription.
     * @param {String} subscriptionId Subscription Id which forms part of the URI for every service call.
     * @param {String} apiVersion Client Api version.
     * @param {module:api/DeploymentScriptsApi~deploymentScriptsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentScriptListResult}
     */
    deploymentScriptsListBySubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentScriptsListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentScriptsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentScriptListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentScripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentScriptsUpdate operation.
     * @callback module:api/DeploymentScriptsApi~deploymentScriptsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentScript} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates deployment script tags with specified values.
     * @param {String} subscriptionId Subscription Id which forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} scriptName Name of the deployment script.
     * @param {String} apiVersion Client Api version.
     * @param {Object} opts Optional parameters
     * @param {module:model/DeploymentScriptUpdateParameter} [deploymentScript] Deployment script resource with the tags to be updated.
     * @param {module:api/DeploymentScriptsApi~deploymentScriptsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentScript}
     */
    deploymentScriptsUpdate(subscriptionId, resourceGroupName, scriptName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['deploymentScript'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deploymentScriptsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling deploymentScriptsUpdate");
      }
      // verify the required parameter 'scriptName' is set
      if (scriptName === undefined || scriptName === null) {
        throw new Error("Missing the required parameter 'scriptName' when calling deploymentScriptsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling deploymentScriptsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'scriptName': scriptName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentScript;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
