/**
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScriptStatus from './ScriptStatus';

/**
 * The DeploymentScriptPropertiesBase model module.
 * @module model/DeploymentScriptPropertiesBase
 * @version 2019-10-01-preview
 */
class DeploymentScriptPropertiesBase {
    /**
     * Constructs a new <code>DeploymentScriptPropertiesBase</code>.
     * Common properties for the deployment script.
     * @alias module:model/DeploymentScriptPropertiesBase
     */
    constructor() { 
        
        DeploymentScriptPropertiesBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeploymentScriptPropertiesBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeploymentScriptPropertiesBase} obj Optional instance to populate.
     * @return {module:model/DeploymentScriptPropertiesBase} The populated <code>DeploymentScriptPropertiesBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeploymentScriptPropertiesBase();

            if (data.hasOwnProperty('cleanupPreference')) {
                obj['cleanupPreference'] = ApiClient.convertToType(data['cleanupPreference'], 'String');
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], {'String': Object});
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ScriptStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeploymentScriptPropertiesBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeploymentScriptPropertiesBase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cleanupPreference'] && !(typeof data['cleanupPreference'] === 'string' || data['cleanupPreference'] instanceof String)) {
            throw new Error("Expected the field `cleanupPreference` to be a primitive type in the JSON string but got " + data['cleanupPreference']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ScriptStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
 * @member {module:model/DeploymentScriptPropertiesBase.CleanupPreferenceEnum} cleanupPreference
 */
DeploymentScriptPropertiesBase.prototype['cleanupPreference'] = undefined;

/**
 * List of script outputs.
 * @member {Object.<String, Object>} outputs
 */
DeploymentScriptPropertiesBase.prototype['outputs'] = undefined;

/**
 * State of the script execution. This only appears in the response.
 * @member {module:model/DeploymentScriptPropertiesBase.ProvisioningStateEnum} provisioningState
 */
DeploymentScriptPropertiesBase.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ScriptStatus} status
 */
DeploymentScriptPropertiesBase.prototype['status'] = undefined;





/**
 * Allowed values for the <code>cleanupPreference</code> property.
 * @enum {String}
 * @readonly
 */
DeploymentScriptPropertiesBase['CleanupPreferenceEnum'] = {

    /**
     * value: "Always"
     * @const
     */
    "Always": "Always",

    /**
     * value: "OnSuccess"
     * @const
     */
    "OnSuccess": "OnSuccess",

    /**
     * value: "OnExpiration"
     * @const
     */
    "OnExpiration": "OnExpiration"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
DeploymentScriptPropertiesBase['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "ProvisioningResources"
     * @const
     */
    "ProvisioningResources": "ProvisioningResources",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};



export default DeploymentScriptPropertiesBase;

