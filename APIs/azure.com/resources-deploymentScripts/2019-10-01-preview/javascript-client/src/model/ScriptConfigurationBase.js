/**
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentVariable from './EnvironmentVariable';

/**
 * The ScriptConfigurationBase model module.
 * @module model/ScriptConfigurationBase
 * @version 2019-10-01-preview
 */
class ScriptConfigurationBase {
    /**
     * Constructs a new <code>ScriptConfigurationBase</code>.
     * Common configuration settings for both Azure PowerShell and Azure CLI scripts.
     * @alias module:model/ScriptConfigurationBase
     * @param retentionInterval {String} Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).
     */
    constructor(retentionInterval) { 
        
        ScriptConfigurationBase.initialize(this, retentionInterval);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, retentionInterval) { 
        obj['retentionInterval'] = retentionInterval;
    }

    /**
     * Constructs a <code>ScriptConfigurationBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScriptConfigurationBase} obj Optional instance to populate.
     * @return {module:model/ScriptConfigurationBase} The populated <code>ScriptConfigurationBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScriptConfigurationBase();

            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], 'String');
            }
            if (data.hasOwnProperty('environmentVariables')) {
                obj['environmentVariables'] = ApiClient.convertToType(data['environmentVariables'], [EnvironmentVariable]);
            }
            if (data.hasOwnProperty('forceUpdateTag')) {
                obj['forceUpdateTag'] = ApiClient.convertToType(data['forceUpdateTag'], 'String');
            }
            if (data.hasOwnProperty('primaryScriptUri')) {
                obj['primaryScriptUri'] = ApiClient.convertToType(data['primaryScriptUri'], 'String');
            }
            if (data.hasOwnProperty('retentionInterval')) {
                obj['retentionInterval'] = ApiClient.convertToType(data['retentionInterval'], 'String');
            }
            if (data.hasOwnProperty('scriptContent')) {
                obj['scriptContent'] = ApiClient.convertToType(data['scriptContent'], 'String');
            }
            if (data.hasOwnProperty('supportingScriptUris')) {
                obj['supportingScriptUris'] = ApiClient.convertToType(data['supportingScriptUris'], ['String']);
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScriptConfigurationBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScriptConfigurationBase</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScriptConfigurationBase.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['arguments'] && !(typeof data['arguments'] === 'string' || data['arguments'] instanceof String)) {
            throw new Error("Expected the field `arguments` to be a primitive type in the JSON string but got " + data['arguments']);
        }
        if (data['environmentVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentVariables'])) {
                throw new Error("Expected the field `environmentVariables` to be an array in the JSON data but got " + data['environmentVariables']);
            }
            // validate the optional field `environmentVariables` (array)
            for (const item of data['environmentVariables']) {
                EnvironmentVariable.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['forceUpdateTag'] && !(typeof data['forceUpdateTag'] === 'string' || data['forceUpdateTag'] instanceof String)) {
            throw new Error("Expected the field `forceUpdateTag` to be a primitive type in the JSON string but got " + data['forceUpdateTag']);
        }
        // ensure the json data is a string
        if (data['primaryScriptUri'] && !(typeof data['primaryScriptUri'] === 'string' || data['primaryScriptUri'] instanceof String)) {
            throw new Error("Expected the field `primaryScriptUri` to be a primitive type in the JSON string but got " + data['primaryScriptUri']);
        }
        // ensure the json data is a string
        if (data['retentionInterval'] && !(typeof data['retentionInterval'] === 'string' || data['retentionInterval'] instanceof String)) {
            throw new Error("Expected the field `retentionInterval` to be a primitive type in the JSON string but got " + data['retentionInterval']);
        }
        // ensure the json data is a string
        if (data['scriptContent'] && !(typeof data['scriptContent'] === 'string' || data['scriptContent'] instanceof String)) {
            throw new Error("Expected the field `scriptContent` to be a primitive type in the JSON string but got " + data['scriptContent']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportingScriptUris'])) {
            throw new Error("Expected the field `supportingScriptUris` to be an array in the JSON data but got " + data['supportingScriptUris']);
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }

        return true;
    }


}

ScriptConfigurationBase.RequiredProperties = ["retentionInterval"];

/**
 * Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 
 * @member {String} arguments
 */
ScriptConfigurationBase.prototype['arguments'] = undefined;

/**
 * The environment variables to pass over to the script.
 * @member {Array.<module:model/EnvironmentVariable>} environmentVariables
 */
ScriptConfigurationBase.prototype['environmentVariables'] = undefined;

/**
 * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
 * @member {String} forceUpdateTag
 */
ScriptConfigurationBase.prototype['forceUpdateTag'] = undefined;

/**
 * Uri for the script. This is the entry point for the external script.
 * @member {String} primaryScriptUri
 */
ScriptConfigurationBase.prototype['primaryScriptUri'] = undefined;

/**
 * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).
 * @member {String} retentionInterval
 */
ScriptConfigurationBase.prototype['retentionInterval'] = undefined;

/**
 * Script body.
 * @member {String} scriptContent
 */
ScriptConfigurationBase.prototype['scriptContent'] = undefined;

/**
 * Supporting files for the external script.
 * @member {Array.<String>} supportingScriptUris
 */
ScriptConfigurationBase.prototype['supportingScriptUris'] = undefined;

/**
 * Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H
 * @member {String} timeout
 */
ScriptConfigurationBase.prototype['timeout'] = undefined;






export default ScriptConfigurationBase;

