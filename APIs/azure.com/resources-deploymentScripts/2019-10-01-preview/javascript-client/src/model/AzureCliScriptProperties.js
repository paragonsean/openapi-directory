/**
 * DeploymentScriptsClient
 * The APIs listed in this specification can be used to manage Deployment Scripts resource through the Azure Resource Manager.
 *
 * The version of the OpenAPI document: 2019-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeploymentScriptPropertiesBase from './DeploymentScriptPropertiesBase';
import EnvironmentVariable from './EnvironmentVariable';
import ScriptConfigurationBase from './ScriptConfigurationBase';
import ScriptStatus from './ScriptStatus';

/**
 * The AzureCliScriptProperties model module.
 * @module model/AzureCliScriptProperties
 * @version 2019-10-01-preview
 */
class AzureCliScriptProperties {
    /**
     * Constructs a new <code>AzureCliScriptProperties</code>.
     * Properties of the Azure CLI script object.
     * @alias module:model/AzureCliScriptProperties
     * @implements module:model/DeploymentScriptPropertiesBase
     * @implements module:model/ScriptConfigurationBase
     * @param retentionInterval {String} Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).
     */
    constructor(retentionInterval) { 
        DeploymentScriptPropertiesBase.initialize(this);ScriptConfigurationBase.initialize(this, retentionInterval);
        AzureCliScriptProperties.initialize(this, retentionInterval);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, retentionInterval) { 
        obj['azCliVersion'] = azCliVersion;
        obj['retentionInterval'] = retentionInterval;
    }

    /**
     * Constructs a <code>AzureCliScriptProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AzureCliScriptProperties} obj Optional instance to populate.
     * @return {module:model/AzureCliScriptProperties} The populated <code>AzureCliScriptProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AzureCliScriptProperties();
            DeploymentScriptPropertiesBase.constructFromObject(data, obj);
            ScriptConfigurationBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('azCliVersion')) {
                obj['azCliVersion'] = ApiClient.convertToType(data['azCliVersion'], 'String');
            }
            if (data.hasOwnProperty('cleanupPreference')) {
                obj['cleanupPreference'] = ApiClient.convertToType(data['cleanupPreference'], 'String');
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], {'String': Object});
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ScriptStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('arguments')) {
                obj['arguments'] = ApiClient.convertToType(data['arguments'], 'String');
            }
            if (data.hasOwnProperty('environmentVariables')) {
                obj['environmentVariables'] = ApiClient.convertToType(data['environmentVariables'], [EnvironmentVariable]);
            }
            if (data.hasOwnProperty('forceUpdateTag')) {
                obj['forceUpdateTag'] = ApiClient.convertToType(data['forceUpdateTag'], 'String');
            }
            if (data.hasOwnProperty('primaryScriptUri')) {
                obj['primaryScriptUri'] = ApiClient.convertToType(data['primaryScriptUri'], 'String');
            }
            if (data.hasOwnProperty('retentionInterval')) {
                obj['retentionInterval'] = ApiClient.convertToType(data['retentionInterval'], 'String');
            }
            if (data.hasOwnProperty('scriptContent')) {
                obj['scriptContent'] = ApiClient.convertToType(data['scriptContent'], 'String');
            }
            if (data.hasOwnProperty('supportingScriptUris')) {
                obj['supportingScriptUris'] = ApiClient.convertToType(data['supportingScriptUris'], ['String']);
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AzureCliScriptProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AzureCliScriptProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AzureCliScriptProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['azCliVersion'] && !(typeof data['azCliVersion'] === 'string' || data['azCliVersion'] instanceof String)) {
            throw new Error("Expected the field `azCliVersion` to be a primitive type in the JSON string but got " + data['azCliVersion']);
        }
        // ensure the json data is a string
        if (data['cleanupPreference'] && !(typeof data['cleanupPreference'] === 'string' || data['cleanupPreference'] instanceof String)) {
            throw new Error("Expected the field `cleanupPreference` to be a primitive type in the JSON string but got " + data['cleanupPreference']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ScriptStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['arguments'] && !(typeof data['arguments'] === 'string' || data['arguments'] instanceof String)) {
            throw new Error("Expected the field `arguments` to be a primitive type in the JSON string but got " + data['arguments']);
        }
        if (data['environmentVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentVariables'])) {
                throw new Error("Expected the field `environmentVariables` to be an array in the JSON data but got " + data['environmentVariables']);
            }
            // validate the optional field `environmentVariables` (array)
            for (const item of data['environmentVariables']) {
                EnvironmentVariable.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['forceUpdateTag'] && !(typeof data['forceUpdateTag'] === 'string' || data['forceUpdateTag'] instanceof String)) {
            throw new Error("Expected the field `forceUpdateTag` to be a primitive type in the JSON string but got " + data['forceUpdateTag']);
        }
        // ensure the json data is a string
        if (data['primaryScriptUri'] && !(typeof data['primaryScriptUri'] === 'string' || data['primaryScriptUri'] instanceof String)) {
            throw new Error("Expected the field `primaryScriptUri` to be a primitive type in the JSON string but got " + data['primaryScriptUri']);
        }
        // ensure the json data is a string
        if (data['retentionInterval'] && !(typeof data['retentionInterval'] === 'string' || data['retentionInterval'] instanceof String)) {
            throw new Error("Expected the field `retentionInterval` to be a primitive type in the JSON string but got " + data['retentionInterval']);
        }
        // ensure the json data is a string
        if (data['scriptContent'] && !(typeof data['scriptContent'] === 'string' || data['scriptContent'] instanceof String)) {
            throw new Error("Expected the field `scriptContent` to be a primitive type in the JSON string but got " + data['scriptContent']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportingScriptUris'])) {
            throw new Error("Expected the field `supportingScriptUris` to be an array in the JSON data but got " + data['supportingScriptUris']);
        }
        // ensure the json data is a string
        if (data['timeout'] && !(typeof data['timeout'] === 'string' || data['timeout'] instanceof String)) {
            throw new Error("Expected the field `timeout` to be a primitive type in the JSON string but got " + data['timeout']);
        }

        return true;
    }


}

AzureCliScriptProperties.RequiredProperties = ["azCliVersion", "retentionInterval"];

/**
 * Azure CLI module version to be used.
 * @member {String} azCliVersion
 */
AzureCliScriptProperties.prototype['azCliVersion'] = undefined;

/**
 * The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
 * @member {module:model/AzureCliScriptProperties.CleanupPreferenceEnum} cleanupPreference
 */
AzureCliScriptProperties.prototype['cleanupPreference'] = undefined;

/**
 * List of script outputs.
 * @member {Object.<String, Object>} outputs
 */
AzureCliScriptProperties.prototype['outputs'] = undefined;

/**
 * State of the script execution. This only appears in the response.
 * @member {module:model/AzureCliScriptProperties.ProvisioningStateEnum} provisioningState
 */
AzureCliScriptProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ScriptStatus} status
 */
AzureCliScriptProperties.prototype['status'] = undefined;

/**
 * Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 
 * @member {String} arguments
 */
AzureCliScriptProperties.prototype['arguments'] = undefined;

/**
 * The environment variables to pass over to the script.
 * @member {Array.<module:model/EnvironmentVariable>} environmentVariables
 */
AzureCliScriptProperties.prototype['environmentVariables'] = undefined;

/**
 * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
 * @member {String} forceUpdateTag
 */
AzureCliScriptProperties.prototype['forceUpdateTag'] = undefined;

/**
 * Uri for the script. This is the entry point for the external script.
 * @member {String} primaryScriptUri
 */
AzureCliScriptProperties.prototype['primaryScriptUri'] = undefined;

/**
 * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).
 * @member {String} retentionInterval
 */
AzureCliScriptProperties.prototype['retentionInterval'] = undefined;

/**
 * Script body.
 * @member {String} scriptContent
 */
AzureCliScriptProperties.prototype['scriptContent'] = undefined;

/**
 * Supporting files for the external script.
 * @member {Array.<String>} supportingScriptUris
 */
AzureCliScriptProperties.prototype['supportingScriptUris'] = undefined;

/**
 * Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H
 * @member {String} timeout
 */
AzureCliScriptProperties.prototype['timeout'] = undefined;


// Implement DeploymentScriptPropertiesBase interface:
/**
 * The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.
 * @member {module:model/DeploymentScriptPropertiesBase.CleanupPreferenceEnum} cleanupPreference
 */
DeploymentScriptPropertiesBase.prototype['cleanupPreference'] = undefined;
/**
 * List of script outputs.
 * @member {Object.<String, Object>} outputs
 */
DeploymentScriptPropertiesBase.prototype['outputs'] = undefined;
/**
 * State of the script execution. This only appears in the response.
 * @member {module:model/DeploymentScriptPropertiesBase.ProvisioningStateEnum} provisioningState
 */
DeploymentScriptPropertiesBase.prototype['provisioningState'] = undefined;
/**
 * @member {module:model/ScriptStatus} status
 */
DeploymentScriptPropertiesBase.prototype['status'] = undefined;
// Implement ScriptConfigurationBase interface:
/**
 * Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 
 * @member {String} arguments
 */
ScriptConfigurationBase.prototype['arguments'] = undefined;
/**
 * The environment variables to pass over to the script.
 * @member {Array.<module:model/EnvironmentVariable>} environmentVariables
 */
ScriptConfigurationBase.prototype['environmentVariables'] = undefined;
/**
 * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
 * @member {String} forceUpdateTag
 */
ScriptConfigurationBase.prototype['forceUpdateTag'] = undefined;
/**
 * Uri for the script. This is the entry point for the external script.
 * @member {String} primaryScriptUri
 */
ScriptConfigurationBase.prototype['primaryScriptUri'] = undefined;
/**
 * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).
 * @member {String} retentionInterval
 */
ScriptConfigurationBase.prototype['retentionInterval'] = undefined;
/**
 * Script body.
 * @member {String} scriptContent
 */
ScriptConfigurationBase.prototype['scriptContent'] = undefined;
/**
 * Supporting files for the external script.
 * @member {Array.<String>} supportingScriptUris
 */
ScriptConfigurationBase.prototype['supportingScriptUris'] = undefined;
/**
 * Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H
 * @member {String} timeout
 */
ScriptConfigurationBase.prototype['timeout'] = undefined;



/**
 * Allowed values for the <code>cleanupPreference</code> property.
 * @enum {String}
 * @readonly
 */
AzureCliScriptProperties['CleanupPreferenceEnum'] = {

    /**
     * value: "Always"
     * @const
     */
    "Always": "Always",

    /**
     * value: "OnSuccess"
     * @const
     */
    "OnSuccess": "OnSuccess",

    /**
     * value: "OnExpiration"
     * @const
     */
    "OnExpiration": "OnExpiration"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
AzureCliScriptProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "ProvisioningResources"
     * @const
     */
    "ProvisioningResources": "ProvisioningResources",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};



export default AzureCliScriptProperties;

