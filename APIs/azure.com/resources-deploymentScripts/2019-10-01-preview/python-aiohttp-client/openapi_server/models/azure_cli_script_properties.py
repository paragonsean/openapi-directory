# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_variable import EnvironmentVariable
from openapi_server.models.script_status import ScriptStatus
from openapi_server import util


class AzureCliScriptProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, az_cli_version: str=None, cleanup_preference: str=None, outputs: Dict[str, object]=None, provisioning_state: str=None, status: ScriptStatus=None, arguments: str=None, environment_variables: List[EnvironmentVariable]=None, force_update_tag: str=None, primary_script_uri: str=None, retention_interval: str=None, script_content: str=None, supporting_script_uris: List[str]=None, timeout: str=None):
        """AzureCliScriptProperties - a model defined in OpenAPI

        :param az_cli_version: The az_cli_version of this AzureCliScriptProperties.
        :param cleanup_preference: The cleanup_preference of this AzureCliScriptProperties.
        :param outputs: The outputs of this AzureCliScriptProperties.
        :param provisioning_state: The provisioning_state of this AzureCliScriptProperties.
        :param status: The status of this AzureCliScriptProperties.
        :param arguments: The arguments of this AzureCliScriptProperties.
        :param environment_variables: The environment_variables of this AzureCliScriptProperties.
        :param force_update_tag: The force_update_tag of this AzureCliScriptProperties.
        :param primary_script_uri: The primary_script_uri of this AzureCliScriptProperties.
        :param retention_interval: The retention_interval of this AzureCliScriptProperties.
        :param script_content: The script_content of this AzureCliScriptProperties.
        :param supporting_script_uris: The supporting_script_uris of this AzureCliScriptProperties.
        :param timeout: The timeout of this AzureCliScriptProperties.
        """
        self.openapi_types = {
            'az_cli_version': str,
            'cleanup_preference': str,
            'outputs': Dict[str, object],
            'provisioning_state': str,
            'status': ScriptStatus,
            'arguments': str,
            'environment_variables': List[EnvironmentVariable],
            'force_update_tag': str,
            'primary_script_uri': str,
            'retention_interval': str,
            'script_content': str,
            'supporting_script_uris': List[str],
            'timeout': str
        }

        self.attribute_map = {
            'az_cli_version': 'azCliVersion',
            'cleanup_preference': 'cleanupPreference',
            'outputs': 'outputs',
            'provisioning_state': 'provisioningState',
            'status': 'status',
            'arguments': 'arguments',
            'environment_variables': 'environmentVariables',
            'force_update_tag': 'forceUpdateTag',
            'primary_script_uri': 'primaryScriptUri',
            'retention_interval': 'retentionInterval',
            'script_content': 'scriptContent',
            'supporting_script_uris': 'supportingScriptUris',
            'timeout': 'timeout'
        }

        self._az_cli_version = az_cli_version
        self._cleanup_preference = cleanup_preference
        self._outputs = outputs
        self._provisioning_state = provisioning_state
        self._status = status
        self._arguments = arguments
        self._environment_variables = environment_variables
        self._force_update_tag = force_update_tag
        self._primary_script_uri = primary_script_uri
        self._retention_interval = retention_interval
        self._script_content = script_content
        self._supporting_script_uris = supporting_script_uris
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureCliScriptProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureCliScriptProperties of this AzureCliScriptProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def az_cli_version(self):
        """Gets the az_cli_version of this AzureCliScriptProperties.

        Azure CLI module version to be used.

        :return: The az_cli_version of this AzureCliScriptProperties.
        :rtype: str
        """
        return self._az_cli_version

    @az_cli_version.setter
    def az_cli_version(self, az_cli_version):
        """Sets the az_cli_version of this AzureCliScriptProperties.

        Azure CLI module version to be used.

        :param az_cli_version: The az_cli_version of this AzureCliScriptProperties.
        :type az_cli_version: str
        """
        if az_cli_version is None:
            raise ValueError("Invalid value for `az_cli_version`, must not be `None`")

        self._az_cli_version = az_cli_version

    @property
    def cleanup_preference(self):
        """Gets the cleanup_preference of this AzureCliScriptProperties.

        The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.

        :return: The cleanup_preference of this AzureCliScriptProperties.
        :rtype: str
        """
        return self._cleanup_preference

    @cleanup_preference.setter
    def cleanup_preference(self, cleanup_preference):
        """Sets the cleanup_preference of this AzureCliScriptProperties.

        The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.

        :param cleanup_preference: The cleanup_preference of this AzureCliScriptProperties.
        :type cleanup_preference: str
        """
        allowed_values = ["Always", "OnSuccess", "OnExpiration"]  # noqa: E501
        if cleanup_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `cleanup_preference` ({0}), must be one of {1}"
                .format(cleanup_preference, allowed_values)
            )

        self._cleanup_preference = cleanup_preference

    @property
    def outputs(self):
        """Gets the outputs of this AzureCliScriptProperties.

        List of script outputs.

        :return: The outputs of this AzureCliScriptProperties.
        :rtype: Dict[str, object]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this AzureCliScriptProperties.

        List of script outputs.

        :param outputs: The outputs of this AzureCliScriptProperties.
        :type outputs: Dict[str, object]
        """

        self._outputs = outputs

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this AzureCliScriptProperties.

        State of the script execution. This only appears in the response.

        :return: The provisioning_state of this AzureCliScriptProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this AzureCliScriptProperties.

        State of the script execution. This only appears in the response.

        :param provisioning_state: The provisioning_state of this AzureCliScriptProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "ProvisioningResources", "Running", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def status(self):
        """Gets the status of this AzureCliScriptProperties.


        :return: The status of this AzureCliScriptProperties.
        :rtype: ScriptStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AzureCliScriptProperties.


        :param status: The status of this AzureCliScriptProperties.
        :type status: ScriptStatus
        """

        self._status = status

    @property
    def arguments(self):
        """Gets the arguments of this AzureCliScriptProperties.

        Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 

        :return: The arguments of this AzureCliScriptProperties.
        :rtype: str
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this AzureCliScriptProperties.

        Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 

        :param arguments: The arguments of this AzureCliScriptProperties.
        :type arguments: str
        """

        self._arguments = arguments

    @property
    def environment_variables(self):
        """Gets the environment_variables of this AzureCliScriptProperties.

        The environment variables to pass over to the script.

        :return: The environment_variables of this AzureCliScriptProperties.
        :rtype: List[EnvironmentVariable]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this AzureCliScriptProperties.

        The environment variables to pass over to the script.

        :param environment_variables: The environment_variables of this AzureCliScriptProperties.
        :type environment_variables: List[EnvironmentVariable]
        """

        self._environment_variables = environment_variables

    @property
    def force_update_tag(self):
        """Gets the force_update_tag of this AzureCliScriptProperties.

        Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.

        :return: The force_update_tag of this AzureCliScriptProperties.
        :rtype: str
        """
        return self._force_update_tag

    @force_update_tag.setter
    def force_update_tag(self, force_update_tag):
        """Sets the force_update_tag of this AzureCliScriptProperties.

        Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.

        :param force_update_tag: The force_update_tag of this AzureCliScriptProperties.
        :type force_update_tag: str
        """

        self._force_update_tag = force_update_tag

    @property
    def primary_script_uri(self):
        """Gets the primary_script_uri of this AzureCliScriptProperties.

        Uri for the script. This is the entry point for the external script.

        :return: The primary_script_uri of this AzureCliScriptProperties.
        :rtype: str
        """
        return self._primary_script_uri

    @primary_script_uri.setter
    def primary_script_uri(self, primary_script_uri):
        """Sets the primary_script_uri of this AzureCliScriptProperties.

        Uri for the script. This is the entry point for the external script.

        :param primary_script_uri: The primary_script_uri of this AzureCliScriptProperties.
        :type primary_script_uri: str
        """

        self._primary_script_uri = primary_script_uri

    @property
    def retention_interval(self):
        """Gets the retention_interval of this AzureCliScriptProperties.

        Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).

        :return: The retention_interval of this AzureCliScriptProperties.
        :rtype: str
        """
        return self._retention_interval

    @retention_interval.setter
    def retention_interval(self, retention_interval):
        """Sets the retention_interval of this AzureCliScriptProperties.

        Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).

        :param retention_interval: The retention_interval of this AzureCliScriptProperties.
        :type retention_interval: str
        """
        if retention_interval is None:
            raise ValueError("Invalid value for `retention_interval`, must not be `None`")

        self._retention_interval = retention_interval

    @property
    def script_content(self):
        """Gets the script_content of this AzureCliScriptProperties.

        Script body.

        :return: The script_content of this AzureCliScriptProperties.
        :rtype: str
        """
        return self._script_content

    @script_content.setter
    def script_content(self, script_content):
        """Sets the script_content of this AzureCliScriptProperties.

        Script body.

        :param script_content: The script_content of this AzureCliScriptProperties.
        :type script_content: str
        """
        if script_content is not None and len(script_content) > 32000:
            raise ValueError("Invalid value for `script_content`, length must be less than or equal to `32000`")

        self._script_content = script_content

    @property
    def supporting_script_uris(self):
        """Gets the supporting_script_uris of this AzureCliScriptProperties.

        Supporting files for the external script.

        :return: The supporting_script_uris of this AzureCliScriptProperties.
        :rtype: List[str]
        """
        return self._supporting_script_uris

    @supporting_script_uris.setter
    def supporting_script_uris(self, supporting_script_uris):
        """Sets the supporting_script_uris of this AzureCliScriptProperties.

        Supporting files for the external script.

        :param supporting_script_uris: The supporting_script_uris of this AzureCliScriptProperties.
        :type supporting_script_uris: List[str]
        """

        self._supporting_script_uris = supporting_script_uris

    @property
    def timeout(self):
        """Gets the timeout of this AzureCliScriptProperties.

        Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H

        :return: The timeout of this AzureCliScriptProperties.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this AzureCliScriptProperties.

        Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H

        :param timeout: The timeout of this AzureCliScriptProperties.
        :type timeout: str
        """

        self._timeout = timeout
