# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.script_status import ScriptStatus
from openapi_server import util


class DeploymentScriptPropertiesBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cleanup_preference: str=None, outputs: Dict[str, object]=None, provisioning_state: str=None, status: ScriptStatus=None):
        """DeploymentScriptPropertiesBase - a model defined in OpenAPI

        :param cleanup_preference: The cleanup_preference of this DeploymentScriptPropertiesBase.
        :param outputs: The outputs of this DeploymentScriptPropertiesBase.
        :param provisioning_state: The provisioning_state of this DeploymentScriptPropertiesBase.
        :param status: The status of this DeploymentScriptPropertiesBase.
        """
        self.openapi_types = {
            'cleanup_preference': str,
            'outputs': Dict[str, object],
            'provisioning_state': str,
            'status': ScriptStatus
        }

        self.attribute_map = {
            'cleanup_preference': 'cleanupPreference',
            'outputs': 'outputs',
            'provisioning_state': 'provisioningState',
            'status': 'status'
        }

        self._cleanup_preference = cleanup_preference
        self._outputs = outputs
        self._provisioning_state = provisioning_state
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeploymentScriptPropertiesBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeploymentScriptPropertiesBase of this DeploymentScriptPropertiesBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cleanup_preference(self):
        """Gets the cleanup_preference of this DeploymentScriptPropertiesBase.

        The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.

        :return: The cleanup_preference of this DeploymentScriptPropertiesBase.
        :rtype: str
        """
        return self._cleanup_preference

    @cleanup_preference.setter
    def cleanup_preference(self, cleanup_preference):
        """Sets the cleanup_preference of this DeploymentScriptPropertiesBase.

        The clean up preference when the script execution gets in a terminal state. Default setting is 'Always'.

        :param cleanup_preference: The cleanup_preference of this DeploymentScriptPropertiesBase.
        :type cleanup_preference: str
        """
        allowed_values = ["Always", "OnSuccess", "OnExpiration"]  # noqa: E501
        if cleanup_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `cleanup_preference` ({0}), must be one of {1}"
                .format(cleanup_preference, allowed_values)
            )

        self._cleanup_preference = cleanup_preference

    @property
    def outputs(self):
        """Gets the outputs of this DeploymentScriptPropertiesBase.

        List of script outputs.

        :return: The outputs of this DeploymentScriptPropertiesBase.
        :rtype: Dict[str, object]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this DeploymentScriptPropertiesBase.

        List of script outputs.

        :param outputs: The outputs of this DeploymentScriptPropertiesBase.
        :type outputs: Dict[str, object]
        """

        self._outputs = outputs

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DeploymentScriptPropertiesBase.

        State of the script execution. This only appears in the response.

        :return: The provisioning_state of this DeploymentScriptPropertiesBase.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DeploymentScriptPropertiesBase.

        State of the script execution. This only appears in the response.

        :param provisioning_state: The provisioning_state of this DeploymentScriptPropertiesBase.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "ProvisioningResources", "Running", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def status(self):
        """Gets the status of this DeploymentScriptPropertiesBase.


        :return: The status of this DeploymentScriptPropertiesBase.
        :rtype: ScriptStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeploymentScriptPropertiesBase.


        :param status: The status of this DeploymentScriptPropertiesBase.
        :type status: ScriptStatus
        """

        self._status = status
