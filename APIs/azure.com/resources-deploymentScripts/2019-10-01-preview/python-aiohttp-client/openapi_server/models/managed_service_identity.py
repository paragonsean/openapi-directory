# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_assigned_identity import UserAssignedIdentity
from openapi_server import util


class ManagedServiceIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, user_assigned_identities: Dict[str, UserAssignedIdentity]=None):
        """ManagedServiceIdentity - a model defined in OpenAPI

        :param type: The type of this ManagedServiceIdentity.
        :param user_assigned_identities: The user_assigned_identities of this ManagedServiceIdentity.
        """
        self.openapi_types = {
            'type': str,
            'user_assigned_identities': Dict[str, UserAssignedIdentity]
        }

        self.attribute_map = {
            'type': 'type',
            'user_assigned_identities': 'userAssignedIdentities'
        }

        self._type = type
        self._user_assigned_identities = user_assigned_identities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedServiceIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedServiceIdentity of this ManagedServiceIdentity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ManagedServiceIdentity.

        Type of the managed identity.

        :return: The type of this ManagedServiceIdentity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ManagedServiceIdentity.

        Type of the managed identity.

        :param type: The type of this ManagedServiceIdentity.
        :type type: str
        """
        allowed_values = ["UserAssigned"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_assigned_identities(self):
        """Gets the user_assigned_identities of this ManagedServiceIdentity.

        The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.

        :return: The user_assigned_identities of this ManagedServiceIdentity.
        :rtype: Dict[str, UserAssignedIdentity]
        """
        return self._user_assigned_identities

    @user_assigned_identities.setter
    def user_assigned_identities(self, user_assigned_identities):
        """Sets the user_assigned_identities of this ManagedServiceIdentity.

        The list of user-assigned managed identities associated with the resource. Key is the Azure resource Id of the managed identity.

        :param user_assigned_identities: The user_assigned_identities of this ManagedServiceIdentity.
        :type user_assigned_identities: Dict[str, UserAssignedIdentity]
        """

        self._user_assigned_identities = user_assigned_identities
