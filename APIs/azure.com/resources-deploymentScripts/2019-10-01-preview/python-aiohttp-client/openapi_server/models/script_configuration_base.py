# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_variable import EnvironmentVariable
from openapi_server import util


class ScriptConfigurationBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: str=None, environment_variables: List[EnvironmentVariable]=None, force_update_tag: str=None, primary_script_uri: str=None, retention_interval: str=None, script_content: str=None, supporting_script_uris: List[str]=None, timeout: str=None):
        """ScriptConfigurationBase - a model defined in OpenAPI

        :param arguments: The arguments of this ScriptConfigurationBase.
        :param environment_variables: The environment_variables of this ScriptConfigurationBase.
        :param force_update_tag: The force_update_tag of this ScriptConfigurationBase.
        :param primary_script_uri: The primary_script_uri of this ScriptConfigurationBase.
        :param retention_interval: The retention_interval of this ScriptConfigurationBase.
        :param script_content: The script_content of this ScriptConfigurationBase.
        :param supporting_script_uris: The supporting_script_uris of this ScriptConfigurationBase.
        :param timeout: The timeout of this ScriptConfigurationBase.
        """
        self.openapi_types = {
            'arguments': str,
            'environment_variables': List[EnvironmentVariable],
            'force_update_tag': str,
            'primary_script_uri': str,
            'retention_interval': str,
            'script_content': str,
            'supporting_script_uris': List[str],
            'timeout': str
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'environment_variables': 'environmentVariables',
            'force_update_tag': 'forceUpdateTag',
            'primary_script_uri': 'primaryScriptUri',
            'retention_interval': 'retentionInterval',
            'script_content': 'scriptContent',
            'supporting_script_uris': 'supportingScriptUris',
            'timeout': 'timeout'
        }

        self._arguments = arguments
        self._environment_variables = environment_variables
        self._force_update_tag = force_update_tag
        self._primary_script_uri = primary_script_uri
        self._retention_interval = retention_interval
        self._script_content = script_content
        self._supporting_script_uris = supporting_script_uris
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScriptConfigurationBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScriptConfigurationBase of this ScriptConfigurationBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this ScriptConfigurationBase.

        Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 

        :return: The arguments of this ScriptConfigurationBase.
        :rtype: str
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this ScriptConfigurationBase.

        Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location 'West US 2' 

        :param arguments: The arguments of this ScriptConfigurationBase.
        :type arguments: str
        """

        self._arguments = arguments

    @property
    def environment_variables(self):
        """Gets the environment_variables of this ScriptConfigurationBase.

        The environment variables to pass over to the script.

        :return: The environment_variables of this ScriptConfigurationBase.
        :rtype: List[EnvironmentVariable]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this ScriptConfigurationBase.

        The environment variables to pass over to the script.

        :param environment_variables: The environment_variables of this ScriptConfigurationBase.
        :type environment_variables: List[EnvironmentVariable]
        """

        self._environment_variables = environment_variables

    @property
    def force_update_tag(self):
        """Gets the force_update_tag of this ScriptConfigurationBase.

        Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.

        :return: The force_update_tag of this ScriptConfigurationBase.
        :rtype: str
        """
        return self._force_update_tag

    @force_update_tag.setter
    def force_update_tag(self, force_update_tag):
        """Sets the force_update_tag of this ScriptConfigurationBase.

        Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.

        :param force_update_tag: The force_update_tag of this ScriptConfigurationBase.
        :type force_update_tag: str
        """

        self._force_update_tag = force_update_tag

    @property
    def primary_script_uri(self):
        """Gets the primary_script_uri of this ScriptConfigurationBase.

        Uri for the script. This is the entry point for the external script.

        :return: The primary_script_uri of this ScriptConfigurationBase.
        :rtype: str
        """
        return self._primary_script_uri

    @primary_script_uri.setter
    def primary_script_uri(self, primary_script_uri):
        """Sets the primary_script_uri of this ScriptConfigurationBase.

        Uri for the script. This is the entry point for the external script.

        :param primary_script_uri: The primary_script_uri of this ScriptConfigurationBase.
        :type primary_script_uri: str
        """

        self._primary_script_uri = primary_script_uri

    @property
    def retention_interval(self):
        """Gets the retention_interval of this ScriptConfigurationBase.

        Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).

        :return: The retention_interval of this ScriptConfigurationBase.
        :rtype: str
        """
        return self._retention_interval

    @retention_interval.setter
    def retention_interval(self, retention_interval):
        """Sets the retention_interval of this ScriptConfigurationBase.

        Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week).

        :param retention_interval: The retention_interval of this ScriptConfigurationBase.
        :type retention_interval: str
        """
        if retention_interval is None:
            raise ValueError("Invalid value for `retention_interval`, must not be `None`")

        self._retention_interval = retention_interval

    @property
    def script_content(self):
        """Gets the script_content of this ScriptConfigurationBase.

        Script body.

        :return: The script_content of this ScriptConfigurationBase.
        :rtype: str
        """
        return self._script_content

    @script_content.setter
    def script_content(self, script_content):
        """Sets the script_content of this ScriptConfigurationBase.

        Script body.

        :param script_content: The script_content of this ScriptConfigurationBase.
        :type script_content: str
        """
        if script_content is not None and len(script_content) > 32000:
            raise ValueError("Invalid value for `script_content`, length must be less than or equal to `32000`")

        self._script_content = script_content

    @property
    def supporting_script_uris(self):
        """Gets the supporting_script_uris of this ScriptConfigurationBase.

        Supporting files for the external script.

        :return: The supporting_script_uris of this ScriptConfigurationBase.
        :rtype: List[str]
        """
        return self._supporting_script_uris

    @supporting_script_uris.setter
    def supporting_script_uris(self, supporting_script_uris):
        """Sets the supporting_script_uris of this ScriptConfigurationBase.

        Supporting files for the external script.

        :param supporting_script_uris: The supporting_script_uris of this ScriptConfigurationBase.
        :type supporting_script_uris: List[str]
        """

        self._supporting_script_uris = supporting_script_uris

    @property
    def timeout(self):
        """Gets the timeout of this ScriptConfigurationBase.

        Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H

        :return: The timeout of this ScriptConfigurationBase.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ScriptConfigurationBase.

        Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H

        :param timeout: The timeout of this ScriptConfigurationBase.
        :type timeout: str
        """

        self._timeout = timeout
