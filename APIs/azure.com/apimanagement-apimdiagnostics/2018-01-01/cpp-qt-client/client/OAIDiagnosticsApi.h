/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDiagnosticsApi_H
#define OAI_OAIDiagnosticsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDiagnosticCollection.h"
#include "OAIDiagnosticContract.h"
#include "OAIDiagnostic_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDiagnosticsApi : public QObject {
    Q_OBJECT

public:
    OAIDiagnosticsApi(const int timeOut = 0);
    ~OAIDiagnosticsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDiagnosticContract [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void diagnosticCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &diagnostic_id, const QString &api_version, const QString &subscription_id, const OAIDiagnosticContract &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void diagnosticDelete(const QString &resource_group_name, const QString &service_name, const QString &diagnostic_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void diagnosticGet(const QString &resource_group_name, const QString &service_name, const QString &diagnostic_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void diagnosticGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &diagnostic_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void diagnosticListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDiagnosticContract [required]
    */
    virtual void diagnosticUpdate(const QString &resource_group_name, const QString &service_name, const QString &diagnostic_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIDiagnosticContract &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void diagnosticCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void diagnosticDeleteCallback(OAIHttpRequestWorker *worker);
    void diagnosticGetCallback(OAIHttpRequestWorker *worker);
    void diagnosticGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void diagnosticListByServiceCallback(OAIHttpRequestWorker *worker);
    void diagnosticUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void diagnosticCreateOrUpdateSignal(OAIDiagnosticContract summary);
    void diagnosticDeleteSignal();
    void diagnosticGetSignal(OAIDiagnosticContract summary);
    void diagnosticGetEntityTagSignal();
    void diagnosticListByServiceSignal(OAIDiagnosticCollection summary);
    void diagnosticUpdateSignal();


    void diagnosticCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticContract summary);
    void diagnosticDeleteSignalFull(OAIHttpRequestWorker *worker);
    void diagnosticGetSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticContract summary);
    void diagnosticGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void diagnosticListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticCollection summary);
    void diagnosticUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use diagnosticCreateOrUpdateSignalError() instead")
    void diagnosticCreateOrUpdateSignalE(OAIDiagnosticContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticCreateOrUpdateSignalError(OAIDiagnosticContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticDeleteSignalError() instead")
    void diagnosticDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticGetSignalError() instead")
    void diagnosticGetSignalE(OAIDiagnosticContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticGetSignalError(OAIDiagnosticContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticGetEntityTagSignalError() instead")
    void diagnosticGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticListByServiceSignalError() instead")
    void diagnosticListByServiceSignalE(OAIDiagnosticCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticListByServiceSignalError(OAIDiagnosticCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticUpdateSignalError() instead")
    void diagnosticUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use diagnosticCreateOrUpdateSignalErrorFull() instead")
    void diagnosticCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticDeleteSignalErrorFull() instead")
    void diagnosticDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticGetSignalErrorFull() instead")
    void diagnosticGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticGetEntityTagSignalErrorFull() instead")
    void diagnosticGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticListByServiceSignalErrorFull() instead")
    void diagnosticListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticUpdateSignalErrorFull() instead")
    void diagnosticUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
