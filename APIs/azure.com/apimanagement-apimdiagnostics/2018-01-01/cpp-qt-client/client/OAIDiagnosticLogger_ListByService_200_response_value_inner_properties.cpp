/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosticLogger_ListByService_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::OAIDiagnosticLogger_ListByService_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::OAIDiagnosticLogger_ListByService_200_response_value_inner_properties() {
    this->initializeModel();
}

OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::~OAIDiagnosticLogger_ListByService_200_response_value_inner_properties() {}

void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::initializeModel() {

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_buffered_isSet = false;
    m_is_buffered_isValid = false;

    m_logger_type_isSet = false;
    m_logger_type_isValid = false;
}

void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_buffered_isValid = ::OpenAPI::fromJsonValue(m_is_buffered, json[QString("isBuffered")]);
    m_is_buffered_isSet = !json[QString("isBuffered")].isNull() && m_is_buffered_isValid;

    m_logger_type_isValid = ::OpenAPI::fromJsonValue(m_logger_type, json[QString("loggerType")]);
    m_logger_type_isSet = !json[QString("loggerType")].isNull() && m_logger_type_isValid;
}

QString OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_credentials.size() > 0) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_buffered_isSet) {
        obj.insert(QString("isBuffered"), ::OpenAPI::toJsonValue(m_is_buffered));
    }
    if (m_logger_type_isSet) {
        obj.insert(QString("loggerType"), ::OpenAPI::toJsonValue(m_logger_type));
    }
    return obj;
}

QMap<QString, QString> OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::getCredentials() const {
    return m_credentials;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::setCredentials(const QMap<QString, QString> &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QString OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::getDescription() const {
    return m_description;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::isIsBuffered() const {
    return m_is_buffered;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::setIsBuffered(const bool &is_buffered) {
    m_is_buffered = is_buffered;
    m_is_buffered_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::is_is_buffered_Set() const{
    return m_is_buffered_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::is_is_buffered_Valid() const{
    return m_is_buffered_isValid;
}

QString OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::getLoggerType() const {
    return m_logger_type;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::setLoggerType(const QString &logger_type) {
    m_logger_type = logger_type;
    m_logger_type_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::is_logger_type_Set() const{
    return m_logger_type_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::is_logger_type_Valid() const{
    return m_logger_type_isValid;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_buffered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logger_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_credentials_isValid && m_logger_type_isValid && true;
}

} // namespace OpenAPI
