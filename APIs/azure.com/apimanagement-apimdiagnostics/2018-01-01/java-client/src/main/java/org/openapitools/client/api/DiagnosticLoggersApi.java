/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DiagnosticListByServiceDefaultResponse;
import org.openapitools.client.model.DiagnosticLoggerCreateOrUpdate200Response;
import org.openapitools.client.model.DiagnosticLoggerListByService200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiagnosticLoggersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DiagnosticLoggersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DiagnosticLoggersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for diagnosticLoggerCheckEntityExists
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The logger is associated with the diagnostic entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The logger is not associated with the diagnostic entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticLoggerCheckEntityExistsCall(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}/loggers/{loggerid}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "diagnosticId" + "}", localVarApiClient.escapeString(diagnosticId.toString()))
            .replace("{" + "loggerid" + "}", localVarApiClient.escapeString(loggerid.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticLoggerCheckEntityExistsValidateBeforeCall(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticLoggerCheckEntityExists(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling diagnosticLoggerCheckEntityExists(Async)");
        }

        // verify the required parameter 'diagnosticId' is set
        if (diagnosticId == null) {
            throw new ApiException("Missing the required parameter 'diagnosticId' when calling diagnosticLoggerCheckEntityExists(Async)");
        }

        // verify the required parameter 'loggerid' is set
        if (loggerid == null) {
            throw new ApiException("Missing the required parameter 'loggerid' when calling diagnosticLoggerCheckEntityExists(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticLoggerCheckEntityExists(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticLoggerCheckEntityExists(Async)");
        }

        return diagnosticLoggerCheckEntityExistsCall(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Checks that logger entity specified by identifier is associated with the diagnostics entity.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The logger is associated with the diagnostic entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The logger is not associated with the diagnostic entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void diagnosticLoggerCheckEntityExists(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId) throws ApiException {
        diagnosticLoggerCheckEntityExistsWithHttpInfo(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId);
    }

    /**
     * 
     * Checks that logger entity specified by identifier is associated with the diagnostics entity.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The logger is associated with the diagnostic entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The logger is not associated with the diagnostic entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> diagnosticLoggerCheckEntityExistsWithHttpInfo(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = diagnosticLoggerCheckEntityExistsValidateBeforeCall(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Checks that logger entity specified by identifier is associated with the diagnostics entity.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The logger is associated with the diagnostic entity. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The logger is not associated with the diagnostic entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticLoggerCheckEntityExistsAsync(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticLoggerCheckEntityExistsValidateBeforeCall(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticLoggerCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logger to Diagnostic link was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Logger was successfully attached to Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticLoggerCreateOrUpdateCall(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}/loggers/{loggerid}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "diagnosticId" + "}", localVarApiClient.escapeString(diagnosticId.toString()))
            .replace("{" + "loggerid" + "}", localVarApiClient.escapeString(loggerid.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticLoggerCreateOrUpdateValidateBeforeCall(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticLoggerCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling diagnosticLoggerCreateOrUpdate(Async)");
        }

        // verify the required parameter 'diagnosticId' is set
        if (diagnosticId == null) {
            throw new ApiException("Missing the required parameter 'diagnosticId' when calling diagnosticLoggerCreateOrUpdate(Async)");
        }

        // verify the required parameter 'loggerid' is set
        if (loggerid == null) {
            throw new ApiException("Missing the required parameter 'loggerid' when calling diagnosticLoggerCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticLoggerCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticLoggerCreateOrUpdate(Async)");
        }

        return diagnosticLoggerCreateOrUpdateCall(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Attaches a logger to a diagnostic.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return DiagnosticLoggerCreateOrUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logger to Diagnostic link was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Logger was successfully attached to Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticLoggerCreateOrUpdate200Response diagnosticLoggerCreateOrUpdate(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DiagnosticLoggerCreateOrUpdate200Response> localVarResp = diagnosticLoggerCreateOrUpdateWithHttpInfo(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Attaches a logger to a diagnostic.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;DiagnosticLoggerCreateOrUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logger to Diagnostic link was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Logger was successfully attached to Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticLoggerCreateOrUpdate200Response> diagnosticLoggerCreateOrUpdateWithHttpInfo(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = diagnosticLoggerCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DiagnosticLoggerCreateOrUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Attaches a logger to a diagnostic.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Logger to Diagnostic link was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Logger was successfully attached to Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticLoggerCreateOrUpdateAsync(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId, final ApiCallback<DiagnosticLoggerCreateOrUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticLoggerCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticLoggerCreateOrUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticLoggerDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Logger was successfully detached from Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Logger was successfully detached from Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticLoggerDeleteCall(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}/loggers/{loggerid}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "diagnosticId" + "}", localVarApiClient.escapeString(diagnosticId.toString()))
            .replace("{" + "loggerid" + "}", localVarApiClient.escapeString(loggerid.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticLoggerDeleteValidateBeforeCall(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticLoggerDelete(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling diagnosticLoggerDelete(Async)");
        }

        // verify the required parameter 'diagnosticId' is set
        if (diagnosticId == null) {
            throw new ApiException("Missing the required parameter 'diagnosticId' when calling diagnosticLoggerDelete(Async)");
        }

        // verify the required parameter 'loggerid' is set
        if (loggerid == null) {
            throw new ApiException("Missing the required parameter 'loggerid' when calling diagnosticLoggerDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticLoggerDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticLoggerDelete(Async)");
        }

        return diagnosticLoggerDeleteCall(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified Logger from Diagnostic.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Logger was successfully detached from Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Logger was successfully detached from Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void diagnosticLoggerDelete(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId) throws ApiException {
        diagnosticLoggerDeleteWithHttpInfo(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified Logger from Diagnostic.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Logger was successfully detached from Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Logger was successfully detached from Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> diagnosticLoggerDeleteWithHttpInfo(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = diagnosticLoggerDeleteValidateBeforeCall(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified Logger from Diagnostic.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param loggerid Logger identifier. Must be unique in the API Management service instance. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Logger was successfully detached from Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The Logger was successfully detached from Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticLoggerDeleteAsync(String resourceGroupName, String serviceName, String diagnosticId, String loggerid, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticLoggerDeleteValidateBeforeCall(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosticLoggerListByService
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param $filter | Field       | Supported operators    | Supported functions               | |-------------|------------------------|-----------------------------------| | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith | | type        | eq                     |                                   | (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged Result response of loggers assigned to the specified Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticLoggerListByServiceCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String diagnosticId, String $filter, Integer $top, Integer $skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/diagnostics/{diagnosticId}/loggers"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "diagnosticId" + "}", localVarApiClient.escapeString(diagnosticId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosticLoggerListByServiceValidateBeforeCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String diagnosticId, String $filter, Integer $top, Integer $skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling diagnosticLoggerListByService(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling diagnosticLoggerListByService(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling diagnosticLoggerListByService(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling diagnosticLoggerListByService(Async)");
        }

        // verify the required parameter 'diagnosticId' is set
        if (diagnosticId == null) {
            throw new ApiException("Missing the required parameter 'diagnosticId' when calling diagnosticLoggerListByService(Async)");
        }

        return diagnosticLoggerListByServiceCall(resourceGroupName, serviceName, apiVersion, subscriptionId, diagnosticId, $filter, $top, $skip, _callback);

    }

    /**
     * 
     * Lists all loggers associated with the specified Diagnostic of the API Management service instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param $filter | Field       | Supported operators    | Supported functions               | |-------------|------------------------|-----------------------------------| | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith | | type        | eq                     |                                   | (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @return DiagnosticLoggerListByService200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged Result response of loggers assigned to the specified Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticLoggerListByService200Response diagnosticLoggerListByService(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String diagnosticId, String $filter, Integer $top, Integer $skip) throws ApiException {
        ApiResponse<DiagnosticLoggerListByService200Response> localVarResp = diagnosticLoggerListByServiceWithHttpInfo(resourceGroupName, serviceName, apiVersion, subscriptionId, diagnosticId, $filter, $top, $skip);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all loggers associated with the specified Diagnostic of the API Management service instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param $filter | Field       | Supported operators    | Supported functions               | |-------------|------------------------|-----------------------------------| | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith | | type        | eq                     |                                   | (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @return ApiResponse&lt;DiagnosticLoggerListByService200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged Result response of loggers assigned to the specified Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticLoggerListByService200Response> diagnosticLoggerListByServiceWithHttpInfo(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String diagnosticId, String $filter, Integer $top, Integer $skip) throws ApiException {
        okhttp3.Call localVarCall = diagnosticLoggerListByServiceValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, diagnosticId, $filter, $top, $skip, null);
        Type localVarReturnType = new TypeToken<DiagnosticLoggerListByService200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all loggers associated with the specified Diagnostic of the API Management service instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param diagnosticId Diagnostic identifier. Must be unique in the current API Management service instance. (required)
     * @param $filter | Field       | Supported operators    | Supported functions               | |-------------|------------------------|-----------------------------------| | id          | ge, le, eq, ne, gt, lt | substringof, startswith, endswith | | type        | eq                     |                                   | (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paged Result response of loggers assigned to the specified Diagnostic. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosticLoggerListByServiceAsync(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String diagnosticId, String $filter, Integer $top, Integer $skip, final ApiCallback<DiagnosticLoggerListByService200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosticLoggerListByServiceValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, diagnosticId, $filter, $top, $skip, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticLoggerListByService200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
