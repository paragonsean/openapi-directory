/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Logger entity in API Management represents an event sink that you can use to log API Management events. Currently the Logger entity supports logging API Management events to Azure Event Hubs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:03.942278-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiagnosticLoggerListByService200ResponseValueInnerProperties {
  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private Map<String, String> credentials = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_BUFFERED = "isBuffered";
  @SerializedName(SERIALIZED_NAME_IS_BUFFERED)
  private Boolean isBuffered;

  /**
   * Logger type.
   */
  @JsonAdapter(LoggerTypeEnum.Adapter.class)
  public enum LoggerTypeEnum {
    AZURE_EVENT_HUB("azureEventHub"),
    
    APPLICATION_INSIGHTS("applicationInsights");

    private String value;

    LoggerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoggerTypeEnum fromValue(String value) {
      for (LoggerTypeEnum b : LoggerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoggerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoggerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoggerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoggerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LoggerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOGGER_TYPE = "loggerType";
  @SerializedName(SERIALIZED_NAME_LOGGER_TYPE)
  private LoggerTypeEnum loggerType;

  public DiagnosticLoggerListByService200ResponseValueInnerProperties() {
  }

  public DiagnosticLoggerListByService200ResponseValueInnerProperties credentials(Map<String, String> credentials) {
    this.credentials = credentials;
    return this;
  }

  public DiagnosticLoggerListByService200ResponseValueInnerProperties putCredentialsItem(String key, String credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new HashMap<>();
    }
    this.credentials.put(key, credentialsItem);
    return this;
  }

  /**
   * The name and SendRule connection string of the event hub for azureEventHub logger. Instrumentation key for applicationInsights logger.
   * @return credentials
   */
  @javax.annotation.Nonnull
  public Map<String, String> getCredentials() {
    return credentials;
  }

  public void setCredentials(Map<String, String> credentials) {
    this.credentials = credentials;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Logger description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerProperties isBuffered(Boolean isBuffered) {
    this.isBuffered = isBuffered;
    return this;
  }

  /**
   * Whether records are buffered in the logger before publishing. Default is assumed to be true.
   * @return isBuffered
   */
  @javax.annotation.Nullable
  public Boolean getIsBuffered() {
    return isBuffered;
  }

  public void setIsBuffered(Boolean isBuffered) {
    this.isBuffered = isBuffered;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerProperties loggerType(LoggerTypeEnum loggerType) {
    this.loggerType = loggerType;
    return this;
  }

  /**
   * Logger type.
   * @return loggerType
   */
  @javax.annotation.Nonnull
  public LoggerTypeEnum getLoggerType() {
    return loggerType;
  }

  public void setLoggerType(LoggerTypeEnum loggerType) {
    this.loggerType = loggerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticLoggerListByService200ResponseValueInnerProperties diagnosticLoggerListByService200ResponseValueInnerProperties = (DiagnosticLoggerListByService200ResponseValueInnerProperties) o;
    return Objects.equals(this.credentials, diagnosticLoggerListByService200ResponseValueInnerProperties.credentials) &&
        Objects.equals(this.description, diagnosticLoggerListByService200ResponseValueInnerProperties.description) &&
        Objects.equals(this.isBuffered, diagnosticLoggerListByService200ResponseValueInnerProperties.isBuffered) &&
        Objects.equals(this.loggerType, diagnosticLoggerListByService200ResponseValueInnerProperties.loggerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credentials, description, isBuffered, loggerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticLoggerListByService200ResponseValueInnerProperties {\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isBuffered: ").append(toIndentedString(isBuffered)).append("\n");
    sb.append("    loggerType: ").append(toIndentedString(loggerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credentials");
    openapiFields.add("description");
    openapiFields.add("isBuffered");
    openapiFields.add("loggerType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("credentials");
    openapiRequiredFields.add("loggerType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiagnosticLoggerListByService200ResponseValueInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiagnosticLoggerListByService200ResponseValueInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiagnosticLoggerListByService200ResponseValueInnerProperties is not found in the empty JSON string", DiagnosticLoggerListByService200ResponseValueInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiagnosticLoggerListByService200ResponseValueInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiagnosticLoggerListByService200ResponseValueInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiagnosticLoggerListByService200ResponseValueInnerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("loggerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loggerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loggerType").toString()));
      }
      // validate the required field `loggerType`
      LoggerTypeEnum.validateJsonElement(jsonObj.get("loggerType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiagnosticLoggerListByService200ResponseValueInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiagnosticLoggerListByService200ResponseValueInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiagnosticLoggerListByService200ResponseValueInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiagnosticLoggerListByService200ResponseValueInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DiagnosticLoggerListByService200ResponseValueInnerProperties>() {
           @Override
           public void write(JsonWriter out, DiagnosticLoggerListByService200ResponseValueInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiagnosticLoggerListByService200ResponseValueInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiagnosticLoggerListByService200ResponseValueInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiagnosticLoggerListByService200ResponseValueInnerProperties
   * @throws IOException if the JSON string is invalid with respect to DiagnosticLoggerListByService200ResponseValueInnerProperties
   */
  public static DiagnosticLoggerListByService200ResponseValueInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiagnosticLoggerListByService200ResponseValueInnerProperties.class);
  }

  /**
   * Convert an instance of DiagnosticLoggerListByService200ResponseValueInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

