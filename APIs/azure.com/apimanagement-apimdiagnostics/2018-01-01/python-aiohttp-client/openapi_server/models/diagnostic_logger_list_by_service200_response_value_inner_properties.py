# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiagnosticLoggerListByService200ResponseValueInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credentials: Dict[str, str]=None, description: str=None, is_buffered: bool=None, logger_type: str=None):
        """DiagnosticLoggerListByService200ResponseValueInnerProperties - a model defined in OpenAPI

        :param credentials: The credentials of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :param description: The description of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :param is_buffered: The is_buffered of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :param logger_type: The logger_type of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        """
        self.openapi_types = {
            'credentials': Dict[str, str],
            'description': str,
            'is_buffered': bool,
            'logger_type': str
        }

        self.attribute_map = {
            'credentials': 'credentials',
            'description': 'description',
            'is_buffered': 'isBuffered',
            'logger_type': 'loggerType'
        }

        self._credentials = credentials
        self._description = description
        self._is_buffered = is_buffered
        self._logger_type = logger_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticLoggerListByService200ResponseValueInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticLogger_ListByService_200_response_value_inner_properties of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credentials(self):
        """Gets the credentials of this DiagnosticLoggerListByService200ResponseValueInnerProperties.

        The name and SendRule connection string of the event hub for azureEventHub logger. Instrumentation key for applicationInsights logger.

        :return: The credentials of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :rtype: Dict[str, str]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this DiagnosticLoggerListByService200ResponseValueInnerProperties.

        The name and SendRule connection string of the event hub for azureEventHub logger. Instrumentation key for applicationInsights logger.

        :param credentials: The credentials of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :type credentials: Dict[str, str]
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")

        self._credentials = credentials

    @property
    def description(self):
        """Gets the description of this DiagnosticLoggerListByService200ResponseValueInnerProperties.

        Logger description.

        :return: The description of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DiagnosticLoggerListByService200ResponseValueInnerProperties.

        Logger description.

        :param description: The description of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")

        self._description = description

    @property
    def is_buffered(self):
        """Gets the is_buffered of this DiagnosticLoggerListByService200ResponseValueInnerProperties.

        Whether records are buffered in the logger before publishing. Default is assumed to be true.

        :return: The is_buffered of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :rtype: bool
        """
        return self._is_buffered

    @is_buffered.setter
    def is_buffered(self, is_buffered):
        """Sets the is_buffered of this DiagnosticLoggerListByService200ResponseValueInnerProperties.

        Whether records are buffered in the logger before publishing. Default is assumed to be true.

        :param is_buffered: The is_buffered of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :type is_buffered: bool
        """

        self._is_buffered = is_buffered

    @property
    def logger_type(self):
        """Gets the logger_type of this DiagnosticLoggerListByService200ResponseValueInnerProperties.

        Logger type.

        :return: The logger_type of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._logger_type

    @logger_type.setter
    def logger_type(self, logger_type):
        """Sets the logger_type of this DiagnosticLoggerListByService200ResponseValueInnerProperties.

        Logger type.

        :param logger_type: The logger_type of this DiagnosticLoggerListByService200ResponseValueInnerProperties.
        :type logger_type: str
        """
        allowed_values = ["azureEventHub", "applicationInsights"]  # noqa: E501
        if logger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `logger_type` ({0}), must be one of {1}"
                .format(logger_type, allowed_values)
            )

        self._logger_type = logger_type
