/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnostic_ListByService_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnostic_ListByService_200_response_value_inner_properties::OAIDiagnostic_ListByService_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnostic_ListByService_200_response_value_inner_properties::OAIDiagnostic_ListByService_200_response_value_inner_properties() {
    this->initializeModel();
}

OAIDiagnostic_ListByService_200_response_value_inner_properties::~OAIDiagnostic_ListByService_200_response_value_inner_properties() {}

void OAIDiagnostic_ListByService_200_response_value_inner_properties::initializeModel() {

    m_always_log_isSet = false;
    m_always_log_isValid = false;

    m_backend_isSet = false;
    m_backend_isValid = false;

    m_frontend_isSet = false;
    m_frontend_isValid = false;

    m_http_correlation_protocol_isSet = false;
    m_http_correlation_protocol_isValid = false;

    m_log_client_ip_isSet = false;
    m_log_client_ip_isValid = false;

    m_logger_id_isSet = false;
    m_logger_id_isValid = false;

    m_sampling_isSet = false;
    m_sampling_isValid = false;

    m_verbosity_isSet = false;
    m_verbosity_isValid = false;
}

void OAIDiagnostic_ListByService_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnostic_ListByService_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_always_log_isValid = ::OpenAPI::fromJsonValue(m_always_log, json[QString("alwaysLog")]);
    m_always_log_isSet = !json[QString("alwaysLog")].isNull() && m_always_log_isValid;

    m_backend_isValid = ::OpenAPI::fromJsonValue(m_backend, json[QString("backend")]);
    m_backend_isSet = !json[QString("backend")].isNull() && m_backend_isValid;

    m_frontend_isValid = ::OpenAPI::fromJsonValue(m_frontend, json[QString("frontend")]);
    m_frontend_isSet = !json[QString("frontend")].isNull() && m_frontend_isValid;

    m_http_correlation_protocol_isValid = ::OpenAPI::fromJsonValue(m_http_correlation_protocol, json[QString("httpCorrelationProtocol")]);
    m_http_correlation_protocol_isSet = !json[QString("httpCorrelationProtocol")].isNull() && m_http_correlation_protocol_isValid;

    m_log_client_ip_isValid = ::OpenAPI::fromJsonValue(m_log_client_ip, json[QString("logClientIp")]);
    m_log_client_ip_isSet = !json[QString("logClientIp")].isNull() && m_log_client_ip_isValid;

    m_logger_id_isValid = ::OpenAPI::fromJsonValue(m_logger_id, json[QString("loggerId")]);
    m_logger_id_isSet = !json[QString("loggerId")].isNull() && m_logger_id_isValid;

    m_sampling_isValid = ::OpenAPI::fromJsonValue(m_sampling, json[QString("sampling")]);
    m_sampling_isSet = !json[QString("sampling")].isNull() && m_sampling_isValid;

    m_verbosity_isValid = ::OpenAPI::fromJsonValue(m_verbosity, json[QString("verbosity")]);
    m_verbosity_isSet = !json[QString("verbosity")].isNull() && m_verbosity_isValid;
}

QString OAIDiagnostic_ListByService_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnostic_ListByService_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_always_log_isSet) {
        obj.insert(QString("alwaysLog"), ::OpenAPI::toJsonValue(m_always_log));
    }
    if (m_backend.isSet()) {
        obj.insert(QString("backend"), ::OpenAPI::toJsonValue(m_backend));
    }
    if (m_frontend.isSet()) {
        obj.insert(QString("frontend"), ::OpenAPI::toJsonValue(m_frontend));
    }
    if (m_http_correlation_protocol_isSet) {
        obj.insert(QString("httpCorrelationProtocol"), ::OpenAPI::toJsonValue(m_http_correlation_protocol));
    }
    if (m_log_client_ip_isSet) {
        obj.insert(QString("logClientIp"), ::OpenAPI::toJsonValue(m_log_client_ip));
    }
    if (m_logger_id_isSet) {
        obj.insert(QString("loggerId"), ::OpenAPI::toJsonValue(m_logger_id));
    }
    if (m_sampling.isSet()) {
        obj.insert(QString("sampling"), ::OpenAPI::toJsonValue(m_sampling));
    }
    if (m_verbosity_isSet) {
        obj.insert(QString("verbosity"), ::OpenAPI::toJsonValue(m_verbosity));
    }
    return obj;
}

QString OAIDiagnostic_ListByService_200_response_value_inner_properties::getAlwaysLog() const {
    return m_always_log;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties::setAlwaysLog(const QString &always_log) {
    m_always_log = always_log;
    m_always_log_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_always_log_Set() const{
    return m_always_log_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_always_log_Valid() const{
    return m_always_log_isValid;
}

OAIDiagnostic_ListByService_200_response_value_inner_properties_backend OAIDiagnostic_ListByService_200_response_value_inner_properties::getBackend() const {
    return m_backend;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties::setBackend(const OAIDiagnostic_ListByService_200_response_value_inner_properties_backend &backend) {
    m_backend = backend;
    m_backend_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_backend_Set() const{
    return m_backend_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_backend_Valid() const{
    return m_backend_isValid;
}

OAIDiagnostic_ListByService_200_response_value_inner_properties_backend OAIDiagnostic_ListByService_200_response_value_inner_properties::getFrontend() const {
    return m_frontend;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties::setFrontend(const OAIDiagnostic_ListByService_200_response_value_inner_properties_backend &frontend) {
    m_frontend = frontend;
    m_frontend_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_frontend_Set() const{
    return m_frontend_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_frontend_Valid() const{
    return m_frontend_isValid;
}

QString OAIDiagnostic_ListByService_200_response_value_inner_properties::getHttpCorrelationProtocol() const {
    return m_http_correlation_protocol;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties::setHttpCorrelationProtocol(const QString &http_correlation_protocol) {
    m_http_correlation_protocol = http_correlation_protocol;
    m_http_correlation_protocol_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_http_correlation_protocol_Set() const{
    return m_http_correlation_protocol_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_http_correlation_protocol_Valid() const{
    return m_http_correlation_protocol_isValid;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::isLogClientIp() const {
    return m_log_client_ip;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties::setLogClientIp(const bool &log_client_ip) {
    m_log_client_ip = log_client_ip;
    m_log_client_ip_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_log_client_ip_Set() const{
    return m_log_client_ip_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_log_client_ip_Valid() const{
    return m_log_client_ip_isValid;
}

QString OAIDiagnostic_ListByService_200_response_value_inner_properties::getLoggerId() const {
    return m_logger_id;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties::setLoggerId(const QString &logger_id) {
    m_logger_id = logger_id;
    m_logger_id_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_logger_id_Set() const{
    return m_logger_id_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_logger_id_Valid() const{
    return m_logger_id_isValid;
}

OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling OAIDiagnostic_ListByService_200_response_value_inner_properties::getSampling() const {
    return m_sampling;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties::setSampling(const OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling &sampling) {
    m_sampling = sampling;
    m_sampling_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_sampling_Set() const{
    return m_sampling_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_sampling_Valid() const{
    return m_sampling_isValid;
}

QString OAIDiagnostic_ListByService_200_response_value_inner_properties::getVerbosity() const {
    return m_verbosity;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties::setVerbosity(const QString &verbosity) {
    m_verbosity = verbosity;
    m_verbosity_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_verbosity_Set() const{
    return m_verbosity_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::is_verbosity_Valid() const{
    return m_verbosity_isValid;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_always_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_correlation_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_client_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logger_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verbosity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_logger_id_isValid && true;
}

} // namespace OpenAPI
