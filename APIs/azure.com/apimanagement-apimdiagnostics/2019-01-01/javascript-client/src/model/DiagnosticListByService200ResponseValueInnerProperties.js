/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiagnosticListByService200ResponseValueInnerPropertiesBackend from './DiagnosticListByService200ResponseValueInnerPropertiesBackend';
import DiagnosticListByService200ResponseValueInnerPropertiesSampling from './DiagnosticListByService200ResponseValueInnerPropertiesSampling';

/**
 * The DiagnosticListByService200ResponseValueInnerProperties model module.
 * @module model/DiagnosticListByService200ResponseValueInnerProperties
 * @version 2019-01-01
 */
class DiagnosticListByService200ResponseValueInnerProperties {
    /**
     * Constructs a new <code>DiagnosticListByService200ResponseValueInnerProperties</code>.
     * Diagnostic Entity Properties
     * @alias module:model/DiagnosticListByService200ResponseValueInnerProperties
     * @param loggerId {String} Resource Id of a target logger.
     */
    constructor(loggerId) { 
        
        DiagnosticListByService200ResponseValueInnerProperties.initialize(this, loggerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, loggerId) { 
        obj['loggerId'] = loggerId;
    }

    /**
     * Constructs a <code>DiagnosticListByService200ResponseValueInnerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticListByService200ResponseValueInnerProperties} obj Optional instance to populate.
     * @return {module:model/DiagnosticListByService200ResponseValueInnerProperties} The populated <code>DiagnosticListByService200ResponseValueInnerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticListByService200ResponseValueInnerProperties();

            if (data.hasOwnProperty('alwaysLog')) {
                obj['alwaysLog'] = ApiClient.convertToType(data['alwaysLog'], 'String');
            }
            if (data.hasOwnProperty('backend')) {
                obj['backend'] = DiagnosticListByService200ResponseValueInnerPropertiesBackend.constructFromObject(data['backend']);
            }
            if (data.hasOwnProperty('enableHttpCorrelationHeaders')) {
                obj['enableHttpCorrelationHeaders'] = ApiClient.convertToType(data['enableHttpCorrelationHeaders'], 'Boolean');
            }
            if (data.hasOwnProperty('frontend')) {
                obj['frontend'] = DiagnosticListByService200ResponseValueInnerPropertiesBackend.constructFromObject(data['frontend']);
            }
            if (data.hasOwnProperty('httpCorrelationProtocol')) {
                obj['httpCorrelationProtocol'] = ApiClient.convertToType(data['httpCorrelationProtocol'], 'String');
            }
            if (data.hasOwnProperty('loggerId')) {
                obj['loggerId'] = ApiClient.convertToType(data['loggerId'], 'String');
            }
            if (data.hasOwnProperty('sampling')) {
                obj['sampling'] = DiagnosticListByService200ResponseValueInnerPropertiesSampling.constructFromObject(data['sampling']);
            }
            if (data.hasOwnProperty('verbosity')) {
                obj['verbosity'] = ApiClient.convertToType(data['verbosity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticListByService200ResponseValueInnerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticListByService200ResponseValueInnerProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DiagnosticListByService200ResponseValueInnerProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alwaysLog'] && !(typeof data['alwaysLog'] === 'string' || data['alwaysLog'] instanceof String)) {
            throw new Error("Expected the field `alwaysLog` to be a primitive type in the JSON string but got " + data['alwaysLog']);
        }
        // validate the optional field `backend`
        if (data['backend']) { // data not null
          DiagnosticListByService200ResponseValueInnerPropertiesBackend.validateJSON(data['backend']);
        }
        // validate the optional field `frontend`
        if (data['frontend']) { // data not null
          DiagnosticListByService200ResponseValueInnerPropertiesBackend.validateJSON(data['frontend']);
        }
        // ensure the json data is a string
        if (data['httpCorrelationProtocol'] && !(typeof data['httpCorrelationProtocol'] === 'string' || data['httpCorrelationProtocol'] instanceof String)) {
            throw new Error("Expected the field `httpCorrelationProtocol` to be a primitive type in the JSON string but got " + data['httpCorrelationProtocol']);
        }
        // ensure the json data is a string
        if (data['loggerId'] && !(typeof data['loggerId'] === 'string' || data['loggerId'] instanceof String)) {
            throw new Error("Expected the field `loggerId` to be a primitive type in the JSON string but got " + data['loggerId']);
        }
        // validate the optional field `sampling`
        if (data['sampling']) { // data not null
          DiagnosticListByService200ResponseValueInnerPropertiesSampling.validateJSON(data['sampling']);
        }
        // ensure the json data is a string
        if (data['verbosity'] && !(typeof data['verbosity'] === 'string' || data['verbosity'] instanceof String)) {
            throw new Error("Expected the field `verbosity` to be a primitive type in the JSON string but got " + data['verbosity']);
        }

        return true;
    }


}

DiagnosticListByService200ResponseValueInnerProperties.RequiredProperties = ["loggerId"];

/**
 * Specifies for what type of messages sampling settings should not apply.
 * @member {module:model/DiagnosticListByService200ResponseValueInnerProperties.AlwaysLogEnum} alwaysLog
 */
DiagnosticListByService200ResponseValueInnerProperties.prototype['alwaysLog'] = undefined;

/**
 * @member {module:model/DiagnosticListByService200ResponseValueInnerPropertiesBackend} backend
 */
DiagnosticListByService200ResponseValueInnerProperties.prototype['backend'] = undefined;

/**
 * Whether to process Correlation Headers coming to Api Management Service. Only applicable to Application Insights diagnostics. Default is true.
 * @member {Boolean} enableHttpCorrelationHeaders
 */
DiagnosticListByService200ResponseValueInnerProperties.prototype['enableHttpCorrelationHeaders'] = undefined;

/**
 * @member {module:model/DiagnosticListByService200ResponseValueInnerPropertiesBackend} frontend
 */
DiagnosticListByService200ResponseValueInnerProperties.prototype['frontend'] = undefined;

/**
 * Sets correlation protocol to use for Application Insights diagnostics.
 * @member {module:model/DiagnosticListByService200ResponseValueInnerProperties.HttpCorrelationProtocolEnum} httpCorrelationProtocol
 */
DiagnosticListByService200ResponseValueInnerProperties.prototype['httpCorrelationProtocol'] = undefined;

/**
 * Resource Id of a target logger.
 * @member {String} loggerId
 */
DiagnosticListByService200ResponseValueInnerProperties.prototype['loggerId'] = undefined;

/**
 * @member {module:model/DiagnosticListByService200ResponseValueInnerPropertiesSampling} sampling
 */
DiagnosticListByService200ResponseValueInnerProperties.prototype['sampling'] = undefined;

/**
 * The verbosity level applied to traces emitted by trace policies.
 * @member {module:model/DiagnosticListByService200ResponseValueInnerProperties.VerbosityEnum} verbosity
 */
DiagnosticListByService200ResponseValueInnerProperties.prototype['verbosity'] = undefined;





/**
 * Allowed values for the <code>alwaysLog</code> property.
 * @enum {String}
 * @readonly
 */
DiagnosticListByService200ResponseValueInnerProperties['AlwaysLogEnum'] = {

    /**
     * value: "allErrors"
     * @const
     */
    "allErrors": "allErrors"
};


/**
 * Allowed values for the <code>httpCorrelationProtocol</code> property.
 * @enum {String}
 * @readonly
 */
DiagnosticListByService200ResponseValueInnerProperties['HttpCorrelationProtocolEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Legacy"
     * @const
     */
    "Legacy": "Legacy",

    /**
     * value: "W3C"
     * @const
     */
    "W3C": "W3C"
};


/**
 * Allowed values for the <code>verbosity</code> property.
 * @enum {String}
 * @readonly
 */
DiagnosticListByService200ResponseValueInnerProperties['VerbosityEnum'] = {

    /**
     * value: "verbose"
     * @const
     */
    "verbose": "verbose",

    /**
     * value: "information"
     * @const
     */
    "information": "information",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};



export default DiagnosticListByService200ResponseValueInnerProperties;

