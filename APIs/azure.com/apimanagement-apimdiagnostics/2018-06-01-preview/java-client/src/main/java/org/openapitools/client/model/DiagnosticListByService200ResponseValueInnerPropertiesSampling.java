/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sampling settings for Diagnostic.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:08.957734-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiagnosticListByService200ResponseValueInnerPropertiesSampling {
  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private Double percentage;

  /**
   * Sampling type.
   */
  @JsonAdapter(SamplingTypeEnum.Adapter.class)
  public enum SamplingTypeEnum {
    FIXED("fixed");

    private String value;

    SamplingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SamplingTypeEnum fromValue(String value) {
      for (SamplingTypeEnum b : SamplingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SamplingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SamplingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SamplingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SamplingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SamplingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAMPLING_TYPE = "samplingType";
  @SerializedName(SERIALIZED_NAME_SAMPLING_TYPE)
  private SamplingTypeEnum samplingType;

  public DiagnosticListByService200ResponseValueInnerPropertiesSampling() {
  }

  public DiagnosticListByService200ResponseValueInnerPropertiesSampling percentage(Double percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Rate of sampling for fixed-rate sampling.
   * minimum: 0
   * maximum: 1E+2
   * @return percentage
   */
  @javax.annotation.Nullable
  public Double getPercentage() {
    return percentage;
  }

  public void setPercentage(Double percentage) {
    this.percentage = percentage;
  }


  public DiagnosticListByService200ResponseValueInnerPropertiesSampling samplingType(SamplingTypeEnum samplingType) {
    this.samplingType = samplingType;
    return this;
  }

  /**
   * Sampling type.
   * @return samplingType
   */
  @javax.annotation.Nullable
  public SamplingTypeEnum getSamplingType() {
    return samplingType;
  }

  public void setSamplingType(SamplingTypeEnum samplingType) {
    this.samplingType = samplingType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticListByService200ResponseValueInnerPropertiesSampling diagnosticListByService200ResponseValueInnerPropertiesSampling = (DiagnosticListByService200ResponseValueInnerPropertiesSampling) o;
    return Objects.equals(this.percentage, diagnosticListByService200ResponseValueInnerPropertiesSampling.percentage) &&
        Objects.equals(this.samplingType, diagnosticListByService200ResponseValueInnerPropertiesSampling.samplingType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentage, samplingType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticListByService200ResponseValueInnerPropertiesSampling {\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    samplingType: ").append(toIndentedString(samplingType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("percentage");
    openapiFields.add("samplingType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiagnosticListByService200ResponseValueInnerPropertiesSampling
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiagnosticListByService200ResponseValueInnerPropertiesSampling.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiagnosticListByService200ResponseValueInnerPropertiesSampling is not found in the empty JSON string", DiagnosticListByService200ResponseValueInnerPropertiesSampling.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiagnosticListByService200ResponseValueInnerPropertiesSampling.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiagnosticListByService200ResponseValueInnerPropertiesSampling` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("samplingType") != null && !jsonObj.get("samplingType").isJsonNull()) && !jsonObj.get("samplingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samplingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samplingType").toString()));
      }
      // validate the optional field `samplingType`
      if (jsonObj.get("samplingType") != null && !jsonObj.get("samplingType").isJsonNull()) {
        SamplingTypeEnum.validateJsonElement(jsonObj.get("samplingType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiagnosticListByService200ResponseValueInnerPropertiesSampling.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiagnosticListByService200ResponseValueInnerPropertiesSampling' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiagnosticListByService200ResponseValueInnerPropertiesSampling> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiagnosticListByService200ResponseValueInnerPropertiesSampling.class));

       return (TypeAdapter<T>) new TypeAdapter<DiagnosticListByService200ResponseValueInnerPropertiesSampling>() {
           @Override
           public void write(JsonWriter out, DiagnosticListByService200ResponseValueInnerPropertiesSampling value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiagnosticListByService200ResponseValueInnerPropertiesSampling read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiagnosticListByService200ResponseValueInnerPropertiesSampling given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiagnosticListByService200ResponseValueInnerPropertiesSampling
   * @throws IOException if the JSON string is invalid with respect to DiagnosticListByService200ResponseValueInnerPropertiesSampling
   */
  public static DiagnosticListByService200ResponseValueInnerPropertiesSampling fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiagnosticListByService200ResponseValueInnerPropertiesSampling.class);
  }

  /**
   * Convert an instance of DiagnosticListByService200ResponseValueInnerPropertiesSampling to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

