/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body() {
    this->initializeModel();
}

OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::~OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body() {}

void OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::initializeModel() {

    m_bytes_isSet = false;
    m_bytes_isValid = false;
}

void OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::fromJsonObject(QJsonObject json) {

    m_bytes_isValid = ::OpenAPI::fromJsonValue(m_bytes, json[QString("bytes")]);
    m_bytes_isSet = !json[QString("bytes")].isNull() && m_bytes_isValid;
}

QString OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_isSet) {
        obj.insert(QString("bytes"), ::OpenAPI::toJsonValue(m_bytes));
    }
    return obj;
}

qint32 OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::getBytes() const {
    return m_bytes;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::setBytes(const qint32 &bytes) {
    m_bytes = bytes;
    m_bytes_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::is_bytes_Set() const{
    return m_bytes_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::is_bytes_Valid() const{
    return m_bytes_isValid;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties_backend_request_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
