/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling() {
    this->initializeModel();
}

OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::~OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling() {}

void OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::initializeModel() {

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_sampling_type_isSet = false;
    m_sampling_type_isValid = false;
}

void OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::fromJsonObject(QJsonObject json) {

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_sampling_type_isValid = ::OpenAPI::fromJsonValue(m_sampling_type, json[QString("samplingType")]);
    m_sampling_type_isSet = !json[QString("samplingType")].isNull() && m_sampling_type_isValid;
}

QString OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::asJsonObject() const {
    QJsonObject obj;
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_sampling_type_isSet) {
        obj.insert(QString("samplingType"), ::OpenAPI::toJsonValue(m_sampling_type));
    }
    return obj;
}

double OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::getPercentage() const {
    return m_percentage;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QString OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::getSamplingType() const {
    return m_sampling_type;
}
void OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::setSamplingType(const QString &sampling_type) {
    m_sampling_type = sampling_type;
    m_sampling_type_isSet = true;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::is_sampling_type_Set() const{
    return m_sampling_type_isSet;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::is_sampling_type_Valid() const{
    return m_sampling_type_isValid;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnostic_ListByService_200_response_value_inner_properties_sampling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
