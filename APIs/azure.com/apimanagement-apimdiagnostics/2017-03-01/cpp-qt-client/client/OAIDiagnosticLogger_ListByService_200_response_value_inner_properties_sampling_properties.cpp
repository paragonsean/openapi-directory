/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties() {
    this->initializeModel();
}

OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::~OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties() {}

void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::initializeModel() {

    m_evaluation_interval_isSet = false;
    m_evaluation_interval_isValid = false;

    m_initial_percentage_isSet = false;
    m_initial_percentage_isValid = false;

    m_max_percentage_isSet = false;
    m_max_percentage_isValid = false;

    m_max_telemetry_items_per_second_isSet = false;
    m_max_telemetry_items_per_second_isValid = false;

    m_min_percentage_isSet = false;
    m_min_percentage_isValid = false;

    m_moving_average_ratio_isSet = false;
    m_moving_average_ratio_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;

    m_percentage_decrease_timeout_isSet = false;
    m_percentage_decrease_timeout_isValid = false;

    m_percentage_increase_timeout_isSet = false;
    m_percentage_increase_timeout_isValid = false;

    m_sampling_type_isSet = false;
    m_sampling_type_isValid = false;
}

void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::fromJsonObject(QJsonObject json) {

    m_evaluation_interval_isValid = ::OpenAPI::fromJsonValue(m_evaluation_interval, json[QString("evaluationInterval")]);
    m_evaluation_interval_isSet = !json[QString("evaluationInterval")].isNull() && m_evaluation_interval_isValid;

    m_initial_percentage_isValid = ::OpenAPI::fromJsonValue(m_initial_percentage, json[QString("initialPercentage")]);
    m_initial_percentage_isSet = !json[QString("initialPercentage")].isNull() && m_initial_percentage_isValid;

    m_max_percentage_isValid = ::OpenAPI::fromJsonValue(m_max_percentage, json[QString("maxPercentage")]);
    m_max_percentage_isSet = !json[QString("maxPercentage")].isNull() && m_max_percentage_isValid;

    m_max_telemetry_items_per_second_isValid = ::OpenAPI::fromJsonValue(m_max_telemetry_items_per_second, json[QString("maxTelemetryItemsPerSecond")]);
    m_max_telemetry_items_per_second_isSet = !json[QString("maxTelemetryItemsPerSecond")].isNull() && m_max_telemetry_items_per_second_isValid;

    m_min_percentage_isValid = ::OpenAPI::fromJsonValue(m_min_percentage, json[QString("minPercentage")]);
    m_min_percentage_isSet = !json[QString("minPercentage")].isNull() && m_min_percentage_isValid;

    m_moving_average_ratio_isValid = ::OpenAPI::fromJsonValue(m_moving_average_ratio, json[QString("movingAverageRatio")]);
    m_moving_average_ratio_isSet = !json[QString("movingAverageRatio")].isNull() && m_moving_average_ratio_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;

    m_percentage_decrease_timeout_isValid = ::OpenAPI::fromJsonValue(m_percentage_decrease_timeout, json[QString("percentageDecreaseTimeout")]);
    m_percentage_decrease_timeout_isSet = !json[QString("percentageDecreaseTimeout")].isNull() && m_percentage_decrease_timeout_isValid;

    m_percentage_increase_timeout_isValid = ::OpenAPI::fromJsonValue(m_percentage_increase_timeout, json[QString("percentageIncreaseTimeout")]);
    m_percentage_increase_timeout_isSet = !json[QString("percentageIncreaseTimeout")].isNull() && m_percentage_increase_timeout_isValid;

    m_sampling_type_isValid = ::OpenAPI::fromJsonValue(m_sampling_type, json[QString("samplingType")]);
    m_sampling_type_isSet = !json[QString("samplingType")].isNull() && m_sampling_type_isValid;
}

QString OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluation_interval_isSet) {
        obj.insert(QString("evaluationInterval"), ::OpenAPI::toJsonValue(m_evaluation_interval));
    }
    if (m_initial_percentage_isSet) {
        obj.insert(QString("initialPercentage"), ::OpenAPI::toJsonValue(m_initial_percentage));
    }
    if (m_max_percentage_isSet) {
        obj.insert(QString("maxPercentage"), ::OpenAPI::toJsonValue(m_max_percentage));
    }
    if (m_max_telemetry_items_per_second_isSet) {
        obj.insert(QString("maxTelemetryItemsPerSecond"), ::OpenAPI::toJsonValue(m_max_telemetry_items_per_second));
    }
    if (m_min_percentage_isSet) {
        obj.insert(QString("minPercentage"), ::OpenAPI::toJsonValue(m_min_percentage));
    }
    if (m_moving_average_ratio_isSet) {
        obj.insert(QString("movingAverageRatio"), ::OpenAPI::toJsonValue(m_moving_average_ratio));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    if (m_percentage_decrease_timeout_isSet) {
        obj.insert(QString("percentageDecreaseTimeout"), ::OpenAPI::toJsonValue(m_percentage_decrease_timeout));
    }
    if (m_percentage_increase_timeout_isSet) {
        obj.insert(QString("percentageIncreaseTimeout"), ::OpenAPI::toJsonValue(m_percentage_increase_timeout));
    }
    if (m_sampling_type_isSet) {
        obj.insert(QString("samplingType"), ::OpenAPI::toJsonValue(m_sampling_type));
    }
    return obj;
}

QString OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::getEvaluationInterval() const {
    return m_evaluation_interval;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::setEvaluationInterval(const QString &evaluation_interval) {
    m_evaluation_interval = evaluation_interval;
    m_evaluation_interval_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_evaluation_interval_Set() const{
    return m_evaluation_interval_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_evaluation_interval_Valid() const{
    return m_evaluation_interval_isValid;
}

double OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::getInitialPercentage() const {
    return m_initial_percentage;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::setInitialPercentage(const double &initial_percentage) {
    m_initial_percentage = initial_percentage;
    m_initial_percentage_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_initial_percentage_Set() const{
    return m_initial_percentage_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_initial_percentage_Valid() const{
    return m_initial_percentage_isValid;
}

double OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::getMaxPercentage() const {
    return m_max_percentage;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::setMaxPercentage(const double &max_percentage) {
    m_max_percentage = max_percentage;
    m_max_percentage_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_max_percentage_Set() const{
    return m_max_percentage_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_max_percentage_Valid() const{
    return m_max_percentage_isValid;
}

qint32 OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::getMaxTelemetryItemsPerSecond() const {
    return m_max_telemetry_items_per_second;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::setMaxTelemetryItemsPerSecond(const qint32 &max_telemetry_items_per_second) {
    m_max_telemetry_items_per_second = max_telemetry_items_per_second;
    m_max_telemetry_items_per_second_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_max_telemetry_items_per_second_Set() const{
    return m_max_telemetry_items_per_second_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_max_telemetry_items_per_second_Valid() const{
    return m_max_telemetry_items_per_second_isValid;
}

double OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::getMinPercentage() const {
    return m_min_percentage;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::setMinPercentage(const double &min_percentage) {
    m_min_percentage = min_percentage;
    m_min_percentage_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_min_percentage_Set() const{
    return m_min_percentage_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_min_percentage_Valid() const{
    return m_min_percentage_isValid;
}

double OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::getMovingAverageRatio() const {
    return m_moving_average_ratio;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::setMovingAverageRatio(const double &moving_average_ratio) {
    m_moving_average_ratio = moving_average_ratio;
    m_moving_average_ratio_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_moving_average_ratio_Set() const{
    return m_moving_average_ratio_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_moving_average_ratio_Valid() const{
    return m_moving_average_ratio_isValid;
}

double OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::getPercentage() const {
    return m_percentage;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_percentage_Valid() const{
    return m_percentage_isValid;
}

QString OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::getPercentageDecreaseTimeout() const {
    return m_percentage_decrease_timeout;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::setPercentageDecreaseTimeout(const QString &percentage_decrease_timeout) {
    m_percentage_decrease_timeout = percentage_decrease_timeout;
    m_percentage_decrease_timeout_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_percentage_decrease_timeout_Set() const{
    return m_percentage_decrease_timeout_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_percentage_decrease_timeout_Valid() const{
    return m_percentage_decrease_timeout_isValid;
}

QString OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::getPercentageIncreaseTimeout() const {
    return m_percentage_increase_timeout;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::setPercentageIncreaseTimeout(const QString &percentage_increase_timeout) {
    m_percentage_increase_timeout = percentage_increase_timeout;
    m_percentage_increase_timeout_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_percentage_increase_timeout_Set() const{
    return m_percentage_increase_timeout_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_percentage_increase_timeout_Valid() const{
    return m_percentage_increase_timeout_isValid;
}

QString OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::getSamplingType() const {
    return m_sampling_type;
}
void OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::setSamplingType(const QString &sampling_type) {
    m_sampling_type = sampling_type;
    m_sampling_type_isSet = true;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_sampling_type_Set() const{
    return m_sampling_type_isSet;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::is_sampling_type_Valid() const{
    return m_sampling_type_isValid;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluation_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_telemetry_items_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moving_average_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_decrease_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_increase_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosticLogger_ListByService_200_response_value_inner_properties_sampling_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
