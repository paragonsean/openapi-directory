/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDiagnosticLoggersApi_H
#define OAI_OAIDiagnosticLoggersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDiagnosticLogger_CreateOrUpdate_200_response.h"
#include "OAIDiagnosticLogger_ListByService_200_response.h"
#include "OAIDiagnostic_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDiagnosticLoggersApi : public QObject {
    Q_OBJECT

public:
    OAIDiagnosticLoggersApi(const int timeOut = 0);
    ~OAIDiagnosticLoggersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  loggerid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void diagnosticLoggerCheckEntityExists(const QString &resource_group_name, const QString &service_name, const QString &diagnostic_id, const QString &loggerid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  loggerid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void diagnosticLoggerCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &diagnostic_id, const QString &loggerid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  loggerid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void diagnosticLoggerDelete(const QString &resource_group_name, const QString &service_name, const QString &diagnostic_id, const QString &loggerid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  diagnostic_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void diagnosticLoggerListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const QString &diagnostic_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void diagnosticLoggerCheckEntityExistsCallback(OAIHttpRequestWorker *worker);
    void diagnosticLoggerCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void diagnosticLoggerDeleteCallback(OAIHttpRequestWorker *worker);
    void diagnosticLoggerListByServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void diagnosticLoggerCheckEntityExistsSignal();
    void diagnosticLoggerCreateOrUpdateSignal(OAIDiagnosticLogger_CreateOrUpdate_200_response summary);
    void diagnosticLoggerDeleteSignal();
    void diagnosticLoggerListByServiceSignal(OAIDiagnosticLogger_ListByService_200_response summary);


    void diagnosticLoggerCheckEntityExistsSignalFull(OAIHttpRequestWorker *worker);
    void diagnosticLoggerCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticLogger_CreateOrUpdate_200_response summary);
    void diagnosticLoggerDeleteSignalFull(OAIHttpRequestWorker *worker);
    void diagnosticLoggerListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticLogger_ListByService_200_response summary);

    Q_DECL_DEPRECATED_X("Use diagnosticLoggerCheckEntityExistsSignalError() instead")
    void diagnosticLoggerCheckEntityExistsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticLoggerCheckEntityExistsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticLoggerCreateOrUpdateSignalError() instead")
    void diagnosticLoggerCreateOrUpdateSignalE(OAIDiagnosticLogger_CreateOrUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticLoggerCreateOrUpdateSignalError(OAIDiagnosticLogger_CreateOrUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticLoggerDeleteSignalError() instead")
    void diagnosticLoggerDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticLoggerDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticLoggerListByServiceSignalError() instead")
    void diagnosticLoggerListByServiceSignalE(OAIDiagnosticLogger_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticLoggerListByServiceSignalError(OAIDiagnosticLogger_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use diagnosticLoggerCheckEntityExistsSignalErrorFull() instead")
    void diagnosticLoggerCheckEntityExistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticLoggerCheckEntityExistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticLoggerCreateOrUpdateSignalErrorFull() instead")
    void diagnosticLoggerCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticLoggerCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticLoggerDeleteSignalErrorFull() instead")
    void diagnosticLoggerDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticLoggerDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosticLoggerListByServiceSignalErrorFull() instead")
    void diagnosticLoggerListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosticLoggerListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
