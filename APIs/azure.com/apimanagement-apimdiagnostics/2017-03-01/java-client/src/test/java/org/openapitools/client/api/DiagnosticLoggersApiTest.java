/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DiagnosticListByServiceDefaultResponse;
import org.openapitools.client.model.DiagnosticLoggerCreateOrUpdate200Response;
import org.openapitools.client.model.DiagnosticLoggerListByService200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DiagnosticLoggersApi
 */
@Disabled
public class DiagnosticLoggersApiTest {

    private final DiagnosticLoggersApi api = new DiagnosticLoggersApi();

    /**
     * Checks that logger entity specified by identifier is associated with the diagnostics entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticLoggerCheckEntityExistsTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String diagnosticId = null;
        String loggerid = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.diagnosticLoggerCheckEntityExists(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Attaches a logger to a diagnostic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticLoggerCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String diagnosticId = null;
        String loggerid = null;
        String apiVersion = null;
        String subscriptionId = null;
        DiagnosticLoggerCreateOrUpdate200Response response = api.diagnosticLoggerCreateOrUpdate(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes the specified Logger from Diagnostic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticLoggerDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String diagnosticId = null;
        String loggerid = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.diagnosticLoggerDelete(resourceGroupName, serviceName, diagnosticId, loggerid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all loggers associated with the specified Diagnostic of the API Management service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticLoggerListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String diagnosticId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        DiagnosticLoggerListByService200Response response = api.diagnosticLoggerListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, diagnosticId, $filter, $top, $skip);
        // TODO: test validations
    }

}
