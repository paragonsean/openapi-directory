/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DiagnosticCollection;
import org.openapitools.client.model.DiagnosticContract;
import org.openapitools.client.model.DiagnosticListByServiceDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DiagnosticsApi
 */
@Disabled
public class DiagnosticsApiTest {

    private final DiagnosticsApi api = new DiagnosticsApi();

    /**
     * Creates a new Diagnostic or updates an existing one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String diagnosticId = null;
        String apiVersion = null;
        String subscriptionId = null;
        DiagnosticContract parameters = null;
        String ifMatch = null;
        DiagnosticContract response = api.diagnosticCreateOrUpdate(resourceGroupName, serviceName, diagnosticId, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes the specified Diagnostic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String diagnosticId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.diagnosticDelete(resourceGroupName, serviceName, diagnosticId, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the details of the Diagnostic specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String diagnosticId = null;
        String apiVersion = null;
        String subscriptionId = null;
        DiagnosticContract response = api.diagnosticGet(resourceGroupName, serviceName, diagnosticId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the Diagnostic specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticHeadTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String diagnosticId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.diagnosticHead(resourceGroupName, serviceName, diagnosticId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all diagnostics of the API Management service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        DiagnosticCollection response = api.diagnosticListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates the details of the Diagnostic specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String diagnosticId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        DiagnosticContract parameters = null;
        api.diagnosticUpdate(resourceGroupName, serviceName, diagnosticId, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
