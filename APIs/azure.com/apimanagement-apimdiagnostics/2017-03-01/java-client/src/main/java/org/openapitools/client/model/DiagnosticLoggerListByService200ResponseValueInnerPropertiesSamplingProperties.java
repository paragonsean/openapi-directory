/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Diagnostic entity associated with your Azure API Management deployment. Diagnostics are used to log requests/responses in the APIM proxy.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sampling settings for an ApplicationInsights logger.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:07.529170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties {
  public static final String SERIALIZED_NAME_EVALUATION_INTERVAL = "evaluationInterval";
  @SerializedName(SERIALIZED_NAME_EVALUATION_INTERVAL)
  private String evaluationInterval;

  public static final String SERIALIZED_NAME_INITIAL_PERCENTAGE = "initialPercentage";
  @SerializedName(SERIALIZED_NAME_INITIAL_PERCENTAGE)
  private Double initialPercentage;

  public static final String SERIALIZED_NAME_MAX_PERCENTAGE = "maxPercentage";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENTAGE)
  private Double maxPercentage;

  public static final String SERIALIZED_NAME_MAX_TELEMETRY_ITEMS_PER_SECOND = "maxTelemetryItemsPerSecond";
  @SerializedName(SERIALIZED_NAME_MAX_TELEMETRY_ITEMS_PER_SECOND)
  private Integer maxTelemetryItemsPerSecond;

  public static final String SERIALIZED_NAME_MIN_PERCENTAGE = "minPercentage";
  @SerializedName(SERIALIZED_NAME_MIN_PERCENTAGE)
  private Double minPercentage;

  public static final String SERIALIZED_NAME_MOVING_AVERAGE_RATIO = "movingAverageRatio";
  @SerializedName(SERIALIZED_NAME_MOVING_AVERAGE_RATIO)
  private Double movingAverageRatio;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private Double percentage;

  public static final String SERIALIZED_NAME_PERCENTAGE_DECREASE_TIMEOUT = "percentageDecreaseTimeout";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_DECREASE_TIMEOUT)
  private String percentageDecreaseTimeout;

  public static final String SERIALIZED_NAME_PERCENTAGE_INCREASE_TIMEOUT = "percentageIncreaseTimeout";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_INCREASE_TIMEOUT)
  private String percentageIncreaseTimeout;

  /**
   * Sampling type.
   */
  @JsonAdapter(SamplingTypeEnum.Adapter.class)
  public enum SamplingTypeEnum {
    FIXED("fixed"),
    
    ADAPTIVE("adaptive");

    private String value;

    SamplingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SamplingTypeEnum fromValue(String value) {
      for (SamplingTypeEnum b : SamplingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SamplingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SamplingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SamplingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SamplingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SamplingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAMPLING_TYPE = "samplingType";
  @SerializedName(SERIALIZED_NAME_SAMPLING_TYPE)
  private SamplingTypeEnum samplingType;

  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties() {
  }

  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties evaluationInterval(String evaluationInterval) {
    this.evaluationInterval = evaluationInterval;
    return this;
  }

  /**
   * Rate re-evaluation interval in ISO8601 format.
   * @return evaluationInterval
   */
  @javax.annotation.Nullable
  public String getEvaluationInterval() {
    return evaluationInterval;
  }

  public void setEvaluationInterval(String evaluationInterval) {
    this.evaluationInterval = evaluationInterval;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties initialPercentage(Double initialPercentage) {
    this.initialPercentage = initialPercentage;
    return this;
  }

  /**
   * Initial sampling rate.
   * @return initialPercentage
   */
  @javax.annotation.Nullable
  public Double getInitialPercentage() {
    return initialPercentage;
  }

  public void setInitialPercentage(Double initialPercentage) {
    this.initialPercentage = initialPercentage;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties maxPercentage(Double maxPercentage) {
    this.maxPercentage = maxPercentage;
    return this;
  }

  /**
   * Maximum allowed rate of sampling.
   * @return maxPercentage
   */
  @javax.annotation.Nullable
  public Double getMaxPercentage() {
    return maxPercentage;
  }

  public void setMaxPercentage(Double maxPercentage) {
    this.maxPercentage = maxPercentage;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties maxTelemetryItemsPerSecond(Integer maxTelemetryItemsPerSecond) {
    this.maxTelemetryItemsPerSecond = maxTelemetryItemsPerSecond;
    return this;
  }

  /**
   * Target rate of telemetry items per second.
   * @return maxTelemetryItemsPerSecond
   */
  @javax.annotation.Nullable
  public Integer getMaxTelemetryItemsPerSecond() {
    return maxTelemetryItemsPerSecond;
  }

  public void setMaxTelemetryItemsPerSecond(Integer maxTelemetryItemsPerSecond) {
    this.maxTelemetryItemsPerSecond = maxTelemetryItemsPerSecond;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties minPercentage(Double minPercentage) {
    this.minPercentage = minPercentage;
    return this;
  }

  /**
   * Minimum allowed rate of sampling.
   * @return minPercentage
   */
  @javax.annotation.Nullable
  public Double getMinPercentage() {
    return minPercentage;
  }

  public void setMinPercentage(Double minPercentage) {
    this.minPercentage = minPercentage;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties movingAverageRatio(Double movingAverageRatio) {
    this.movingAverageRatio = movingAverageRatio;
    return this;
  }

  /**
   * Moving average ration assigned to most recent value.
   * @return movingAverageRatio
   */
  @javax.annotation.Nullable
  public Double getMovingAverageRatio() {
    return movingAverageRatio;
  }

  public void setMovingAverageRatio(Double movingAverageRatio) {
    this.movingAverageRatio = movingAverageRatio;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties percentage(Double percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Rate of sampling for fixed-rate sampling.
   * @return percentage
   */
  @javax.annotation.Nullable
  public Double getPercentage() {
    return percentage;
  }

  public void setPercentage(Double percentage) {
    this.percentage = percentage;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties percentageDecreaseTimeout(String percentageDecreaseTimeout) {
    this.percentageDecreaseTimeout = percentageDecreaseTimeout;
    return this;
  }

  /**
   * Duration in ISO8601 format after which it&#39;s allowed to lower the sampling rate.
   * @return percentageDecreaseTimeout
   */
  @javax.annotation.Nullable
  public String getPercentageDecreaseTimeout() {
    return percentageDecreaseTimeout;
  }

  public void setPercentageDecreaseTimeout(String percentageDecreaseTimeout) {
    this.percentageDecreaseTimeout = percentageDecreaseTimeout;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties percentageIncreaseTimeout(String percentageIncreaseTimeout) {
    this.percentageIncreaseTimeout = percentageIncreaseTimeout;
    return this;
  }

  /**
   * Duration in ISO8601 format after which it&#39;s allowed to increase the sampling rate.
   * @return percentageIncreaseTimeout
   */
  @javax.annotation.Nullable
  public String getPercentageIncreaseTimeout() {
    return percentageIncreaseTimeout;
  }

  public void setPercentageIncreaseTimeout(String percentageIncreaseTimeout) {
    this.percentageIncreaseTimeout = percentageIncreaseTimeout;
  }


  public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties samplingType(SamplingTypeEnum samplingType) {
    this.samplingType = samplingType;
    return this;
  }

  /**
   * Sampling type.
   * @return samplingType
   */
  @javax.annotation.Nullable
  public SamplingTypeEnum getSamplingType() {
    return samplingType;
  }

  public void setSamplingType(SamplingTypeEnum samplingType) {
    this.samplingType = samplingType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties = (DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties) o;
    return Objects.equals(this.evaluationInterval, diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.evaluationInterval) &&
        Objects.equals(this.initialPercentage, diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.initialPercentage) &&
        Objects.equals(this.maxPercentage, diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.maxPercentage) &&
        Objects.equals(this.maxTelemetryItemsPerSecond, diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.maxTelemetryItemsPerSecond) &&
        Objects.equals(this.minPercentage, diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.minPercentage) &&
        Objects.equals(this.movingAverageRatio, diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.movingAverageRatio) &&
        Objects.equals(this.percentage, diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.percentage) &&
        Objects.equals(this.percentageDecreaseTimeout, diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.percentageDecreaseTimeout) &&
        Objects.equals(this.percentageIncreaseTimeout, diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.percentageIncreaseTimeout) &&
        Objects.equals(this.samplingType, diagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.samplingType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluationInterval, initialPercentage, maxPercentage, maxTelemetryItemsPerSecond, minPercentage, movingAverageRatio, percentage, percentageDecreaseTimeout, percentageIncreaseTimeout, samplingType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties {\n");
    sb.append("    evaluationInterval: ").append(toIndentedString(evaluationInterval)).append("\n");
    sb.append("    initialPercentage: ").append(toIndentedString(initialPercentage)).append("\n");
    sb.append("    maxPercentage: ").append(toIndentedString(maxPercentage)).append("\n");
    sb.append("    maxTelemetryItemsPerSecond: ").append(toIndentedString(maxTelemetryItemsPerSecond)).append("\n");
    sb.append("    minPercentage: ").append(toIndentedString(minPercentage)).append("\n");
    sb.append("    movingAverageRatio: ").append(toIndentedString(movingAverageRatio)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    percentageDecreaseTimeout: ").append(toIndentedString(percentageDecreaseTimeout)).append("\n");
    sb.append("    percentageIncreaseTimeout: ").append(toIndentedString(percentageIncreaseTimeout)).append("\n");
    sb.append("    samplingType: ").append(toIndentedString(samplingType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evaluationInterval");
    openapiFields.add("initialPercentage");
    openapiFields.add("maxPercentage");
    openapiFields.add("maxTelemetryItemsPerSecond");
    openapiFields.add("minPercentage");
    openapiFields.add("movingAverageRatio");
    openapiFields.add("percentage");
    openapiFields.add("percentageDecreaseTimeout");
    openapiFields.add("percentageIncreaseTimeout");
    openapiFields.add("samplingType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties is not found in the empty JSON string", DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("evaluationInterval") != null && !jsonObj.get("evaluationInterval").isJsonNull()) && !jsonObj.get("evaluationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationInterval").toString()));
      }
      if ((jsonObj.get("percentageDecreaseTimeout") != null && !jsonObj.get("percentageDecreaseTimeout").isJsonNull()) && !jsonObj.get("percentageDecreaseTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentageDecreaseTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentageDecreaseTimeout").toString()));
      }
      if ((jsonObj.get("percentageIncreaseTimeout") != null && !jsonObj.get("percentageIncreaseTimeout").isJsonNull()) && !jsonObj.get("percentageIncreaseTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentageIncreaseTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentageIncreaseTimeout").toString()));
      }
      if ((jsonObj.get("samplingType") != null && !jsonObj.get("samplingType").isJsonNull()) && !jsonObj.get("samplingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samplingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samplingType").toString()));
      }
      // validate the optional field `samplingType`
      if (jsonObj.get("samplingType") != null && !jsonObj.get("samplingType").isJsonNull()) {
        SamplingTypeEnum.validateJsonElement(jsonObj.get("samplingType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties>() {
           @Override
           public void write(JsonWriter out, DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties
   * @throws IOException if the JSON string is invalid with respect to DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties
   */
  public static DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties.class);
  }

  /**
   * Convert an instance of DiagnosticLoggerListByService200ResponseValueInnerPropertiesSamplingProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

