/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrediction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrediction::OAIPrediction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrediction::OAIPrediction() {
    this->initializeModel();
}

OAIPrediction::~OAIPrediction() {}

void OAIPrediction::initializeModel() {

    m_auto_analyze_isSet = false;
    m_auto_analyze_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_grades_isSet = false;
    m_grades_isValid = false;

    m_involved_interaction_types_isSet = false;
    m_involved_interaction_types_isValid = false;

    m_involved_kpi_types_isSet = false;
    m_involved_kpi_types_isValid = false;

    m_involved_relationships_isSet = false;
    m_involved_relationships_isValid = false;

    m_mappings_isSet = false;
    m_mappings_isValid = false;

    m_negative_outcome_expression_isSet = false;
    m_negative_outcome_expression_isValid = false;

    m_positive_outcome_expression_isSet = false;
    m_positive_outcome_expression_isValid = false;

    m_prediction_name_isSet = false;
    m_prediction_name_isValid = false;

    m_primary_profile_type_isSet = false;
    m_primary_profile_type_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_scope_expression_isSet = false;
    m_scope_expression_isValid = false;

    m_score_label_isSet = false;
    m_score_label_isValid = false;

    m_system_generated_entities_isSet = false;
    m_system_generated_entities_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIPrediction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrediction::fromJsonObject(QJsonObject json) {

    m_auto_analyze_isValid = ::OpenAPI::fromJsonValue(m_auto_analyze, json[QString("autoAnalyze")]);
    m_auto_analyze_isSet = !json[QString("autoAnalyze")].isNull() && m_auto_analyze_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_grades_isValid = ::OpenAPI::fromJsonValue(m_grades, json[QString("grades")]);
    m_grades_isSet = !json[QString("grades")].isNull() && m_grades_isValid;

    m_involved_interaction_types_isValid = ::OpenAPI::fromJsonValue(m_involved_interaction_types, json[QString("involvedInteractionTypes")]);
    m_involved_interaction_types_isSet = !json[QString("involvedInteractionTypes")].isNull() && m_involved_interaction_types_isValid;

    m_involved_kpi_types_isValid = ::OpenAPI::fromJsonValue(m_involved_kpi_types, json[QString("involvedKpiTypes")]);
    m_involved_kpi_types_isSet = !json[QString("involvedKpiTypes")].isNull() && m_involved_kpi_types_isValid;

    m_involved_relationships_isValid = ::OpenAPI::fromJsonValue(m_involved_relationships, json[QString("involvedRelationships")]);
    m_involved_relationships_isSet = !json[QString("involvedRelationships")].isNull() && m_involved_relationships_isValid;

    m_mappings_isValid = ::OpenAPI::fromJsonValue(m_mappings, json[QString("mappings")]);
    m_mappings_isSet = !json[QString("mappings")].isNull() && m_mappings_isValid;

    m_negative_outcome_expression_isValid = ::OpenAPI::fromJsonValue(m_negative_outcome_expression, json[QString("negativeOutcomeExpression")]);
    m_negative_outcome_expression_isSet = !json[QString("negativeOutcomeExpression")].isNull() && m_negative_outcome_expression_isValid;

    m_positive_outcome_expression_isValid = ::OpenAPI::fromJsonValue(m_positive_outcome_expression, json[QString("positiveOutcomeExpression")]);
    m_positive_outcome_expression_isSet = !json[QString("positiveOutcomeExpression")].isNull() && m_positive_outcome_expression_isValid;

    m_prediction_name_isValid = ::OpenAPI::fromJsonValue(m_prediction_name, json[QString("predictionName")]);
    m_prediction_name_isSet = !json[QString("predictionName")].isNull() && m_prediction_name_isValid;

    m_primary_profile_type_isValid = ::OpenAPI::fromJsonValue(m_primary_profile_type, json[QString("primaryProfileType")]);
    m_primary_profile_type_isSet = !json[QString("primaryProfileType")].isNull() && m_primary_profile_type_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_scope_expression_isValid = ::OpenAPI::fromJsonValue(m_scope_expression, json[QString("scopeExpression")]);
    m_scope_expression_isSet = !json[QString("scopeExpression")].isNull() && m_scope_expression_isValid;

    m_score_label_isValid = ::OpenAPI::fromJsonValue(m_score_label, json[QString("scoreLabel")]);
    m_score_label_isSet = !json[QString("scoreLabel")].isNull() && m_score_label_isValid;

    m_system_generated_entities_isValid = ::OpenAPI::fromJsonValue(m_system_generated_entities, json[QString("systemGeneratedEntities")]);
    m_system_generated_entities_isSet = !json[QString("systemGeneratedEntities")].isNull() && m_system_generated_entities_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIPrediction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrediction::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_analyze_isSet) {
        obj.insert(QString("autoAnalyze"), ::OpenAPI::toJsonValue(m_auto_analyze));
    }
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_grades.size() > 0) {
        obj.insert(QString("grades"), ::OpenAPI::toJsonValue(m_grades));
    }
    if (m_involved_interaction_types.size() > 0) {
        obj.insert(QString("involvedInteractionTypes"), ::OpenAPI::toJsonValue(m_involved_interaction_types));
    }
    if (m_involved_kpi_types.size() > 0) {
        obj.insert(QString("involvedKpiTypes"), ::OpenAPI::toJsonValue(m_involved_kpi_types));
    }
    if (m_involved_relationships.size() > 0) {
        obj.insert(QString("involvedRelationships"), ::OpenAPI::toJsonValue(m_involved_relationships));
    }
    if (m_mappings.isSet()) {
        obj.insert(QString("mappings"), ::OpenAPI::toJsonValue(m_mappings));
    }
    if (m_negative_outcome_expression_isSet) {
        obj.insert(QString("negativeOutcomeExpression"), ::OpenAPI::toJsonValue(m_negative_outcome_expression));
    }
    if (m_positive_outcome_expression_isSet) {
        obj.insert(QString("positiveOutcomeExpression"), ::OpenAPI::toJsonValue(m_positive_outcome_expression));
    }
    if (m_prediction_name_isSet) {
        obj.insert(QString("predictionName"), ::OpenAPI::toJsonValue(m_prediction_name));
    }
    if (m_primary_profile_type_isSet) {
        obj.insert(QString("primaryProfileType"), ::OpenAPI::toJsonValue(m_primary_profile_type));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_scope_expression_isSet) {
        obj.insert(QString("scopeExpression"), ::OpenAPI::toJsonValue(m_scope_expression));
    }
    if (m_score_label_isSet) {
        obj.insert(QString("scoreLabel"), ::OpenAPI::toJsonValue(m_score_label));
    }
    if (m_system_generated_entities.isSet()) {
        obj.insert(QString("systemGeneratedEntities"), ::OpenAPI::toJsonValue(m_system_generated_entities));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

bool OAIPrediction::isAutoAnalyze() const {
    return m_auto_analyze;
}
void OAIPrediction::setAutoAnalyze(const bool &auto_analyze) {
    m_auto_analyze = auto_analyze;
    m_auto_analyze_isSet = true;
}

bool OAIPrediction::is_auto_analyze_Set() const{
    return m_auto_analyze_isSet;
}

bool OAIPrediction::is_auto_analyze_Valid() const{
    return m_auto_analyze_isValid;
}

QMap<QString, QString> OAIPrediction::getDescription() const {
    return m_description;
}
void OAIPrediction::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPrediction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPrediction::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIPrediction::getDisplayName() const {
    return m_display_name;
}
void OAIPrediction::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPrediction::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPrediction::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIPrediction_grades_inner> OAIPrediction::getGrades() const {
    return m_grades;
}
void OAIPrediction::setGrades(const QList<OAIPrediction_grades_inner> &grades) {
    m_grades = grades;
    m_grades_isSet = true;
}

bool OAIPrediction::is_grades_Set() const{
    return m_grades_isSet;
}

bool OAIPrediction::is_grades_Valid() const{
    return m_grades_isValid;
}

QList<QString> OAIPrediction::getInvolvedInteractionTypes() const {
    return m_involved_interaction_types;
}
void OAIPrediction::setInvolvedInteractionTypes(const QList<QString> &involved_interaction_types) {
    m_involved_interaction_types = involved_interaction_types;
    m_involved_interaction_types_isSet = true;
}

bool OAIPrediction::is_involved_interaction_types_Set() const{
    return m_involved_interaction_types_isSet;
}

bool OAIPrediction::is_involved_interaction_types_Valid() const{
    return m_involved_interaction_types_isValid;
}

QList<QString> OAIPrediction::getInvolvedKpiTypes() const {
    return m_involved_kpi_types;
}
void OAIPrediction::setInvolvedKpiTypes(const QList<QString> &involved_kpi_types) {
    m_involved_kpi_types = involved_kpi_types;
    m_involved_kpi_types_isSet = true;
}

bool OAIPrediction::is_involved_kpi_types_Set() const{
    return m_involved_kpi_types_isSet;
}

bool OAIPrediction::is_involved_kpi_types_Valid() const{
    return m_involved_kpi_types_isValid;
}

QList<QString> OAIPrediction::getInvolvedRelationships() const {
    return m_involved_relationships;
}
void OAIPrediction::setInvolvedRelationships(const QList<QString> &involved_relationships) {
    m_involved_relationships = involved_relationships;
    m_involved_relationships_isSet = true;
}

bool OAIPrediction::is_involved_relationships_Set() const{
    return m_involved_relationships_isSet;
}

bool OAIPrediction::is_involved_relationships_Valid() const{
    return m_involved_relationships_isValid;
}

OAIPrediction_mappings OAIPrediction::getMappings() const {
    return m_mappings;
}
void OAIPrediction::setMappings(const OAIPrediction_mappings &mappings) {
    m_mappings = mappings;
    m_mappings_isSet = true;
}

bool OAIPrediction::is_mappings_Set() const{
    return m_mappings_isSet;
}

bool OAIPrediction::is_mappings_Valid() const{
    return m_mappings_isValid;
}

QString OAIPrediction::getNegativeOutcomeExpression() const {
    return m_negative_outcome_expression;
}
void OAIPrediction::setNegativeOutcomeExpression(const QString &negative_outcome_expression) {
    m_negative_outcome_expression = negative_outcome_expression;
    m_negative_outcome_expression_isSet = true;
}

bool OAIPrediction::is_negative_outcome_expression_Set() const{
    return m_negative_outcome_expression_isSet;
}

bool OAIPrediction::is_negative_outcome_expression_Valid() const{
    return m_negative_outcome_expression_isValid;
}

QString OAIPrediction::getPositiveOutcomeExpression() const {
    return m_positive_outcome_expression;
}
void OAIPrediction::setPositiveOutcomeExpression(const QString &positive_outcome_expression) {
    m_positive_outcome_expression = positive_outcome_expression;
    m_positive_outcome_expression_isSet = true;
}

bool OAIPrediction::is_positive_outcome_expression_Set() const{
    return m_positive_outcome_expression_isSet;
}

bool OAIPrediction::is_positive_outcome_expression_Valid() const{
    return m_positive_outcome_expression_isValid;
}

QString OAIPrediction::getPredictionName() const {
    return m_prediction_name;
}
void OAIPrediction::setPredictionName(const QString &prediction_name) {
    m_prediction_name = prediction_name;
    m_prediction_name_isSet = true;
}

bool OAIPrediction::is_prediction_name_Set() const{
    return m_prediction_name_isSet;
}

bool OAIPrediction::is_prediction_name_Valid() const{
    return m_prediction_name_isValid;
}

QString OAIPrediction::getPrimaryProfileType() const {
    return m_primary_profile_type;
}
void OAIPrediction::setPrimaryProfileType(const QString &primary_profile_type) {
    m_primary_profile_type = primary_profile_type;
    m_primary_profile_type_isSet = true;
}

bool OAIPrediction::is_primary_profile_type_Set() const{
    return m_primary_profile_type_isSet;
}

bool OAIPrediction::is_primary_profile_type_Valid() const{
    return m_primary_profile_type_isValid;
}

OAIProvisioningState OAIPrediction::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPrediction::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPrediction::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPrediction::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIPrediction::getScopeExpression() const {
    return m_scope_expression;
}
void OAIPrediction::setScopeExpression(const QString &scope_expression) {
    m_scope_expression = scope_expression;
    m_scope_expression_isSet = true;
}

bool OAIPrediction::is_scope_expression_Set() const{
    return m_scope_expression_isSet;
}

bool OAIPrediction::is_scope_expression_Valid() const{
    return m_scope_expression_isValid;
}

QString OAIPrediction::getScoreLabel() const {
    return m_score_label;
}
void OAIPrediction::setScoreLabel(const QString &score_label) {
    m_score_label = score_label;
    m_score_label_isSet = true;
}

bool OAIPrediction::is_score_label_Set() const{
    return m_score_label_isSet;
}

bool OAIPrediction::is_score_label_Valid() const{
    return m_score_label_isValid;
}

OAIPrediction_systemGeneratedEntities OAIPrediction::getSystemGeneratedEntities() const {
    return m_system_generated_entities;
}
void OAIPrediction::setSystemGeneratedEntities(const OAIPrediction_systemGeneratedEntities &system_generated_entities) {
    m_system_generated_entities = system_generated_entities;
    m_system_generated_entities_isSet = true;
}

bool OAIPrediction::is_system_generated_entities_Set() const{
    return m_system_generated_entities_isSet;
}

bool OAIPrediction::is_system_generated_entities_Valid() const{
    return m_system_generated_entities_isValid;
}

QString OAIPrediction::getTenantId() const {
    return m_tenant_id;
}
void OAIPrediction::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIPrediction::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIPrediction::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIPrediction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_analyze_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grades.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_involved_interaction_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_involved_kpi_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_involved_relationships.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_outcome_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_positive_outcome_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_profile_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_generated_entities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrediction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_analyze_isValid && m_mappings_isValid && m_negative_outcome_expression_isValid && m_positive_outcome_expression_isValid && m_primary_profile_type_isValid && m_scope_expression_isValid && m_score_label_isValid && true;
}

} // namespace OpenAPI
