/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoleAssignmentsApi_H
#define OAI_OAIRoleAssignmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRoleAssignmentListResult.h"
#include "OAIRoleAssignmentResourceFormat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoleAssignmentsApi : public QObject {
    Q_OBJECT

public:
    OAIRoleAssignmentsApi(const int timeOut = 0);
    ~OAIRoleAssignmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  assignment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRoleAssignmentResourceFormat [required]
    */
    virtual void roleAssignmentsCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &assignment_name, const QString &api_version, const QString &subscription_id, const OAIRoleAssignmentResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  assignment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void roleAssignmentsDelete(const QString &resource_group_name, const QString &hub_name, const QString &assignment_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  assignment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void roleAssignmentsGet(const QString &resource_group_name, const QString &hub_name, const QString &assignment_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void roleAssignmentsListByHub(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void roleAssignmentsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsDeleteCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsGetCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsListByHubCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void roleAssignmentsCreateOrUpdateSignal(OAIRoleAssignmentResourceFormat summary);
    void roleAssignmentsDeleteSignal();
    void roleAssignmentsGetSignal(OAIRoleAssignmentResourceFormat summary);
    void roleAssignmentsListByHubSignal(OAIRoleAssignmentListResult summary);


    void roleAssignmentsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignmentResourceFormat summary);
    void roleAssignmentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void roleAssignmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignmentResourceFormat summary);
    void roleAssignmentsListByHubSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignmentListResult summary);

    Q_DECL_DEPRECATED_X("Use roleAssignmentsCreateOrUpdateSignalError() instead")
    void roleAssignmentsCreateOrUpdateSignalE(OAIRoleAssignmentResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsCreateOrUpdateSignalError(OAIRoleAssignmentResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsDeleteSignalError() instead")
    void roleAssignmentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsGetSignalError() instead")
    void roleAssignmentsGetSignalE(OAIRoleAssignmentResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsGetSignalError(OAIRoleAssignmentResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListByHubSignalError() instead")
    void roleAssignmentsListByHubSignalE(OAIRoleAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListByHubSignalError(OAIRoleAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use roleAssignmentsCreateOrUpdateSignalErrorFull() instead")
    void roleAssignmentsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsDeleteSignalErrorFull() instead")
    void roleAssignmentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsGetSignalErrorFull() instead")
    void roleAssignmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListByHubSignalErrorFull() instead")
    void roleAssignmentsListByHubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListByHubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
