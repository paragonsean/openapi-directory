/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictionDistributionDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictionDistributionDefinition::OAIPredictionDistributionDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictionDistributionDefinition::OAIPredictionDistributionDefinition() {
    this->initializeModel();
}

OAIPredictionDistributionDefinition::~OAIPredictionDistributionDefinition() {}

void OAIPredictionDistributionDefinition::initializeModel() {

    m_distributions_isSet = false;
    m_distributions_isValid = false;

    m_total_negatives_isSet = false;
    m_total_negatives_isValid = false;

    m_total_positives_isSet = false;
    m_total_positives_isValid = false;
}

void OAIPredictionDistributionDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictionDistributionDefinition::fromJsonObject(QJsonObject json) {

    m_distributions_isValid = ::OpenAPI::fromJsonValue(m_distributions, json[QString("distributions")]);
    m_distributions_isSet = !json[QString("distributions")].isNull() && m_distributions_isValid;

    m_total_negatives_isValid = ::OpenAPI::fromJsonValue(m_total_negatives, json[QString("totalNegatives")]);
    m_total_negatives_isSet = !json[QString("totalNegatives")].isNull() && m_total_negatives_isValid;

    m_total_positives_isValid = ::OpenAPI::fromJsonValue(m_total_positives, json[QString("totalPositives")]);
    m_total_positives_isSet = !json[QString("totalPositives")].isNull() && m_total_positives_isValid;
}

QString OAIPredictionDistributionDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictionDistributionDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_distributions.size() > 0) {
        obj.insert(QString("distributions"), ::OpenAPI::toJsonValue(m_distributions));
    }
    if (m_total_negatives_isSet) {
        obj.insert(QString("totalNegatives"), ::OpenAPI::toJsonValue(m_total_negatives));
    }
    if (m_total_positives_isSet) {
        obj.insert(QString("totalPositives"), ::OpenAPI::toJsonValue(m_total_positives));
    }
    return obj;
}

QList<OAIPredictionDistributionDefinition_distributions_inner> OAIPredictionDistributionDefinition::getDistributions() const {
    return m_distributions;
}
void OAIPredictionDistributionDefinition::setDistributions(const QList<OAIPredictionDistributionDefinition_distributions_inner> &distributions) {
    m_distributions = distributions;
    m_distributions_isSet = true;
}

bool OAIPredictionDistributionDefinition::is_distributions_Set() const{
    return m_distributions_isSet;
}

bool OAIPredictionDistributionDefinition::is_distributions_Valid() const{
    return m_distributions_isValid;
}

qint64 OAIPredictionDistributionDefinition::getTotalNegatives() const {
    return m_total_negatives;
}
void OAIPredictionDistributionDefinition::setTotalNegatives(const qint64 &total_negatives) {
    m_total_negatives = total_negatives;
    m_total_negatives_isSet = true;
}

bool OAIPredictionDistributionDefinition::is_total_negatives_Set() const{
    return m_total_negatives_isSet;
}

bool OAIPredictionDistributionDefinition::is_total_negatives_Valid() const{
    return m_total_negatives_isValid;
}

qint64 OAIPredictionDistributionDefinition::getTotalPositives() const {
    return m_total_positives;
}
void OAIPredictionDistributionDefinition::setTotalPositives(const qint64 &total_positives) {
    m_total_positives = total_positives;
    m_total_positives_isSet = true;
}

bool OAIPredictionDistributionDefinition::is_total_positives_Set() const{
    return m_total_positives_isSet;
}

bool OAIPredictionDistributionDefinition::is_total_positives_Valid() const{
    return m_total_positives_isValid;
}

bool OAIPredictionDistributionDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distributions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_negatives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_positives_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictionDistributionDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
