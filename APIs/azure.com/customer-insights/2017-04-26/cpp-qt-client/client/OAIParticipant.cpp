/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParticipant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParticipant::OAIParticipant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParticipant::OAIParticipant() {
    this->initializeModel();
}

OAIParticipant::~OAIParticipant() {}

void OAIParticipant::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_participant_name_isSet = false;
    m_participant_name_isValid = false;

    m_participant_property_references_isSet = false;
    m_participant_property_references_isValid = false;

    m_profile_type_name_isSet = false;
    m_profile_type_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIParticipant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParticipant::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_participant_name_isValid = ::OpenAPI::fromJsonValue(m_participant_name, json[QString("participantName")]);
    m_participant_name_isSet = !json[QString("participantName")].isNull() && m_participant_name_isValid;

    m_participant_property_references_isValid = ::OpenAPI::fromJsonValue(m_participant_property_references, json[QString("participantPropertyReferences")]);
    m_participant_property_references_isSet = !json[QString("participantPropertyReferences")].isNull() && m_participant_property_references_isValid;

    m_profile_type_name_isValid = ::OpenAPI::fromJsonValue(m_profile_type_name, json[QString("profileTypeName")]);
    m_profile_type_name_isSet = !json[QString("profileTypeName")].isNull() && m_profile_type_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIParticipant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParticipant::asJsonObject() const {
    QJsonObject obj;
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_participant_name_isSet) {
        obj.insert(QString("participantName"), ::OpenAPI::toJsonValue(m_participant_name));
    }
    if (m_participant_property_references.size() > 0) {
        obj.insert(QString("participantPropertyReferences"), ::OpenAPI::toJsonValue(m_participant_property_references));
    }
    if (m_profile_type_name_isSet) {
        obj.insert(QString("profileTypeName"), ::OpenAPI::toJsonValue(m_profile_type_name));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QMap<QString, QString> OAIParticipant::getDescription() const {
    return m_description;
}
void OAIParticipant::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIParticipant::is_description_Set() const{
    return m_description_isSet;
}

bool OAIParticipant::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIParticipant::getDisplayName() const {
    return m_display_name;
}
void OAIParticipant::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIParticipant::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIParticipant::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIParticipant::getParticipantName() const {
    return m_participant_name;
}
void OAIParticipant::setParticipantName(const QString &participant_name) {
    m_participant_name = participant_name;
    m_participant_name_isSet = true;
}

bool OAIParticipant::is_participant_name_Set() const{
    return m_participant_name_isSet;
}

bool OAIParticipant::is_participant_name_Valid() const{
    return m_participant_name_isValid;
}

QList<OAIParticipantPropertyReference> OAIParticipant::getParticipantPropertyReferences() const {
    return m_participant_property_references;
}
void OAIParticipant::setParticipantPropertyReferences(const QList<OAIParticipantPropertyReference> &participant_property_references) {
    m_participant_property_references = participant_property_references;
    m_participant_property_references_isSet = true;
}

bool OAIParticipant::is_participant_property_references_Set() const{
    return m_participant_property_references_isSet;
}

bool OAIParticipant::is_participant_property_references_Valid() const{
    return m_participant_property_references_isValid;
}

QString OAIParticipant::getProfileTypeName() const {
    return m_profile_type_name;
}
void OAIParticipant::setProfileTypeName(const QString &profile_type_name) {
    m_profile_type_name = profile_type_name;
    m_profile_type_name_isSet = true;
}

bool OAIParticipant::is_profile_type_name_Set() const{
    return m_profile_type_name_isSet;
}

bool OAIParticipant::is_profile_type_name_Valid() const{
    return m_profile_type_name_isValid;
}

QString OAIParticipant::getRole() const {
    return m_role;
}
void OAIParticipant::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIParticipant::is_role_Set() const{
    return m_role_isSet;
}

bool OAIParticipant::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIParticipant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_property_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParticipant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_participant_name_isValid && m_participant_property_references_isValid && m_profile_type_name_isValid && true;
}

} // namespace OpenAPI
