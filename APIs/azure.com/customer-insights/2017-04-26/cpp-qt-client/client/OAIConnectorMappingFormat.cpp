/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorMappingFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorMappingFormat::OAIConnectorMappingFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorMappingFormat::OAIConnectorMappingFormat() {
    this->initializeModel();
}

OAIConnectorMappingFormat::~OAIConnectorMappingFormat() {}

void OAIConnectorMappingFormat::initializeModel() {

    m_accept_language_isSet = false;
    m_accept_language_isValid = false;

    m_array_separator_isSet = false;
    m_array_separator_isValid = false;

    m_column_delimiter_isSet = false;
    m_column_delimiter_isValid = false;

    m_format_type_isSet = false;
    m_format_type_isValid = false;

    m_quote_character_isSet = false;
    m_quote_character_isValid = false;

    m_quote_escape_character_isSet = false;
    m_quote_escape_character_isValid = false;
}

void OAIConnectorMappingFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorMappingFormat::fromJsonObject(QJsonObject json) {

    m_accept_language_isValid = ::OpenAPI::fromJsonValue(m_accept_language, json[QString("acceptLanguage")]);
    m_accept_language_isSet = !json[QString("acceptLanguage")].isNull() && m_accept_language_isValid;

    m_array_separator_isValid = ::OpenAPI::fromJsonValue(m_array_separator, json[QString("arraySeparator")]);
    m_array_separator_isSet = !json[QString("arraySeparator")].isNull() && m_array_separator_isValid;

    m_column_delimiter_isValid = ::OpenAPI::fromJsonValue(m_column_delimiter, json[QString("columnDelimiter")]);
    m_column_delimiter_isSet = !json[QString("columnDelimiter")].isNull() && m_column_delimiter_isValid;

    m_format_type_isValid = ::OpenAPI::fromJsonValue(m_format_type, json[QString("formatType")]);
    m_format_type_isSet = !json[QString("formatType")].isNull() && m_format_type_isValid;

    m_quote_character_isValid = ::OpenAPI::fromJsonValue(m_quote_character, json[QString("quoteCharacter")]);
    m_quote_character_isSet = !json[QString("quoteCharacter")].isNull() && m_quote_character_isValid;

    m_quote_escape_character_isValid = ::OpenAPI::fromJsonValue(m_quote_escape_character, json[QString("quoteEscapeCharacter")]);
    m_quote_escape_character_isSet = !json[QString("quoteEscapeCharacter")].isNull() && m_quote_escape_character_isValid;
}

QString OAIConnectorMappingFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorMappingFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_language_isSet) {
        obj.insert(QString("acceptLanguage"), ::OpenAPI::toJsonValue(m_accept_language));
    }
    if (m_array_separator_isSet) {
        obj.insert(QString("arraySeparator"), ::OpenAPI::toJsonValue(m_array_separator));
    }
    if (m_column_delimiter_isSet) {
        obj.insert(QString("columnDelimiter"), ::OpenAPI::toJsonValue(m_column_delimiter));
    }
    if (m_format_type_isSet) {
        obj.insert(QString("formatType"), ::OpenAPI::toJsonValue(m_format_type));
    }
    if (m_quote_character_isSet) {
        obj.insert(QString("quoteCharacter"), ::OpenAPI::toJsonValue(m_quote_character));
    }
    if (m_quote_escape_character_isSet) {
        obj.insert(QString("quoteEscapeCharacter"), ::OpenAPI::toJsonValue(m_quote_escape_character));
    }
    return obj;
}

QString OAIConnectorMappingFormat::getAcceptLanguage() const {
    return m_accept_language;
}
void OAIConnectorMappingFormat::setAcceptLanguage(const QString &accept_language) {
    m_accept_language = accept_language;
    m_accept_language_isSet = true;
}

bool OAIConnectorMappingFormat::is_accept_language_Set() const{
    return m_accept_language_isSet;
}

bool OAIConnectorMappingFormat::is_accept_language_Valid() const{
    return m_accept_language_isValid;
}

QString OAIConnectorMappingFormat::getArraySeparator() const {
    return m_array_separator;
}
void OAIConnectorMappingFormat::setArraySeparator(const QString &array_separator) {
    m_array_separator = array_separator;
    m_array_separator_isSet = true;
}

bool OAIConnectorMappingFormat::is_array_separator_Set() const{
    return m_array_separator_isSet;
}

bool OAIConnectorMappingFormat::is_array_separator_Valid() const{
    return m_array_separator_isValid;
}

QString OAIConnectorMappingFormat::getColumnDelimiter() const {
    return m_column_delimiter;
}
void OAIConnectorMappingFormat::setColumnDelimiter(const QString &column_delimiter) {
    m_column_delimiter = column_delimiter;
    m_column_delimiter_isSet = true;
}

bool OAIConnectorMappingFormat::is_column_delimiter_Set() const{
    return m_column_delimiter_isSet;
}

bool OAIConnectorMappingFormat::is_column_delimiter_Valid() const{
    return m_column_delimiter_isValid;
}

QString OAIConnectorMappingFormat::getFormatType() const {
    return m_format_type;
}
void OAIConnectorMappingFormat::setFormatType(const QString &format_type) {
    m_format_type = format_type;
    m_format_type_isSet = true;
}

bool OAIConnectorMappingFormat::is_format_type_Set() const{
    return m_format_type_isSet;
}

bool OAIConnectorMappingFormat::is_format_type_Valid() const{
    return m_format_type_isValid;
}

QString OAIConnectorMappingFormat::getQuoteCharacter() const {
    return m_quote_character;
}
void OAIConnectorMappingFormat::setQuoteCharacter(const QString &quote_character) {
    m_quote_character = quote_character;
    m_quote_character_isSet = true;
}

bool OAIConnectorMappingFormat::is_quote_character_Set() const{
    return m_quote_character_isSet;
}

bool OAIConnectorMappingFormat::is_quote_character_Valid() const{
    return m_quote_character_isValid;
}

QString OAIConnectorMappingFormat::getQuoteEscapeCharacter() const {
    return m_quote_escape_character;
}
void OAIConnectorMappingFormat::setQuoteEscapeCharacter(const QString &quote_escape_character) {
    m_quote_escape_character = quote_escape_character;
    m_quote_escape_character_isSet = true;
}

bool OAIConnectorMappingFormat::is_quote_escape_character_Set() const{
    return m_quote_escape_character_isSet;
}

bool OAIConnectorMappingFormat::is_quote_escape_character_Valid() const{
    return m_quote_escape_character_isValid;
}

bool OAIConnectorMappingFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_array_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_escape_character_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorMappingFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_type_isValid && true;
}

} // namespace OpenAPI
