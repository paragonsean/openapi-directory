/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesforceTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesforceTable::OAISalesforceTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesforceTable::OAISalesforceTable() {
    this->initializeModel();
}

OAISalesforceTable::~OAISalesforceTable() {}

void OAISalesforceTable::initializeModel() {

    m_is_profile_isSet = false;
    m_is_profile_isValid = false;

    m_table_category_isSet = false;
    m_table_category_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_table_remarks_isSet = false;
    m_table_remarks_isValid = false;

    m_table_schema_isSet = false;
    m_table_schema_isValid = false;
}

void OAISalesforceTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesforceTable::fromJsonObject(QJsonObject json) {

    m_is_profile_isValid = ::OpenAPI::fromJsonValue(m_is_profile, json[QString("isProfile")]);
    m_is_profile_isSet = !json[QString("isProfile")].isNull() && m_is_profile_isValid;

    m_table_category_isValid = ::OpenAPI::fromJsonValue(m_table_category, json[QString("tableCategory")]);
    m_table_category_isSet = !json[QString("tableCategory")].isNull() && m_table_category_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_table_remarks_isValid = ::OpenAPI::fromJsonValue(m_table_remarks, json[QString("tableRemarks")]);
    m_table_remarks_isSet = !json[QString("tableRemarks")].isNull() && m_table_remarks_isValid;

    m_table_schema_isValid = ::OpenAPI::fromJsonValue(m_table_schema, json[QString("tableSchema")]);
    m_table_schema_isSet = !json[QString("tableSchema")].isNull() && m_table_schema_isValid;
}

QString OAISalesforceTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesforceTable::asJsonObject() const {
    QJsonObject obj;
    if (m_is_profile_isSet) {
        obj.insert(QString("isProfile"), ::OpenAPI::toJsonValue(m_is_profile));
    }
    if (m_table_category_isSet) {
        obj.insert(QString("tableCategory"), ::OpenAPI::toJsonValue(m_table_category));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_table_remarks_isSet) {
        obj.insert(QString("tableRemarks"), ::OpenAPI::toJsonValue(m_table_remarks));
    }
    if (m_table_schema_isSet) {
        obj.insert(QString("tableSchema"), ::OpenAPI::toJsonValue(m_table_schema));
    }
    return obj;
}

QString OAISalesforceTable::getIsProfile() const {
    return m_is_profile;
}
void OAISalesforceTable::setIsProfile(const QString &is_profile) {
    m_is_profile = is_profile;
    m_is_profile_isSet = true;
}

bool OAISalesforceTable::is_is_profile_Set() const{
    return m_is_profile_isSet;
}

bool OAISalesforceTable::is_is_profile_Valid() const{
    return m_is_profile_isValid;
}

QString OAISalesforceTable::getTableCategory() const {
    return m_table_category;
}
void OAISalesforceTable::setTableCategory(const QString &table_category) {
    m_table_category = table_category;
    m_table_category_isSet = true;
}

bool OAISalesforceTable::is_table_category_Set() const{
    return m_table_category_isSet;
}

bool OAISalesforceTable::is_table_category_Valid() const{
    return m_table_category_isValid;
}

QString OAISalesforceTable::getTableName() const {
    return m_table_name;
}
void OAISalesforceTable::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAISalesforceTable::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAISalesforceTable::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAISalesforceTable::getTableRemarks() const {
    return m_table_remarks;
}
void OAISalesforceTable::setTableRemarks(const QString &table_remarks) {
    m_table_remarks = table_remarks;
    m_table_remarks_isSet = true;
}

bool OAISalesforceTable::is_table_remarks_Set() const{
    return m_table_remarks_isSet;
}

bool OAISalesforceTable::is_table_remarks_Valid() const{
    return m_table_remarks_isValid;
}

QString OAISalesforceTable::getTableSchema() const {
    return m_table_schema;
}
void OAISalesforceTable::setTableSchema(const QString &table_schema) {
    m_table_schema = table_schema;
    m_table_schema_isSet = true;
}

bool OAISalesforceTable::is_table_schema_Set() const{
    return m_table_schema_isSet;
}

bool OAISalesforceTable::is_table_schema_Valid() const{
    return m_table_schema_isValid;
}

bool OAISalesforceTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_remarks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesforceTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_category_isValid && m_table_name_isValid && m_table_schema_isValid && true;
}

} // namespace OpenAPI
