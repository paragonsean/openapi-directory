/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrmConnectorProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrmConnectorProperties::OAICrmConnectorProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrmConnectorProperties::OAICrmConnectorProperties() {
    this->initializeModel();
}

OAICrmConnectorProperties::~OAICrmConnectorProperties() {}

void OAICrmConnectorProperties::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_connection_string_isSet = false;
    m_connection_string_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_organization_url_isSet = false;
    m_organization_url_isValid = false;
}

void OAICrmConnectorProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrmConnectorProperties::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_connection_string_isValid = ::OpenAPI::fromJsonValue(m_connection_string, json[QString("connectionString")]);
    m_connection_string_isSet = !json[QString("connectionString")].isNull() && m_connection_string_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organizationId")]);
    m_organization_id_isSet = !json[QString("organizationId")].isNull() && m_organization_id_isValid;

    m_organization_url_isValid = ::OpenAPI::fromJsonValue(m_organization_url, json[QString("organizationUrl")]);
    m_organization_url_isSet = !json[QString("organizationUrl")].isNull() && m_organization_url_isValid;
}

QString OAICrmConnectorProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrmConnectorProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_connection_string_isSet) {
        obj.insert(QString("connectionString"), ::OpenAPI::toJsonValue(m_connection_string));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organizationId"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_organization_url_isSet) {
        obj.insert(QString("organizationUrl"), ::OpenAPI::toJsonValue(m_organization_url));
    }
    return obj;
}

QString OAICrmConnectorProperties::getAccessToken() const {
    return m_access_token;
}
void OAICrmConnectorProperties::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAICrmConnectorProperties::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAICrmConnectorProperties::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAICrmConnectorProperties::getConnectionString() const {
    return m_connection_string;
}
void OAICrmConnectorProperties::setConnectionString(const QString &connection_string) {
    m_connection_string = connection_string;
    m_connection_string_isSet = true;
}

bool OAICrmConnectorProperties::is_connection_string_Set() const{
    return m_connection_string_isSet;
}

bool OAICrmConnectorProperties::is_connection_string_Valid() const{
    return m_connection_string_isValid;
}

QList<OAICrmConnectorEntities> OAICrmConnectorProperties::getEntities() const {
    return m_entities;
}
void OAICrmConnectorProperties::setEntities(const QList<OAICrmConnectorEntities> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAICrmConnectorProperties::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAICrmConnectorProperties::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAICrmConnectorProperties::getOrganizationId() const {
    return m_organization_id;
}
void OAICrmConnectorProperties::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAICrmConnectorProperties::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAICrmConnectorProperties::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAICrmConnectorProperties::getOrganizationUrl() const {
    return m_organization_url;
}
void OAICrmConnectorProperties::setOrganizationUrl(const QString &organization_url) {
    m_organization_url = organization_url;
    m_organization_url_isSet = true;
}

bool OAICrmConnectorProperties::is_organization_url_Set() const{
    return m_organization_url_isSet;
}

bool OAICrmConnectorProperties::is_organization_url_Valid() const{
    return m_organization_url_isValid;
}

bool OAICrmConnectorProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrmConnectorProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entities_isValid && m_organization_id_isValid && m_organization_url_isValid && true;
}

} // namespace OpenAPI
