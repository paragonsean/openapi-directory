/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationshipsLookup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationshipsLookup::OAIRelationshipsLookup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationshipsLookup::OAIRelationshipsLookup() {
    this->initializeModel();
}

OAIRelationshipsLookup::~OAIRelationshipsLookup() {}

void OAIRelationshipsLookup::initializeModel() {

    m_existing_relationship_name_isSet = false;
    m_existing_relationship_name_isValid = false;

    m_profile_name_isSet = false;
    m_profile_name_isValid = false;

    m_profile_property_references_isSet = false;
    m_profile_property_references_isValid = false;

    m_related_profile_name_isSet = false;
    m_related_profile_name_isValid = false;

    m_related_profile_property_references_isSet = false;
    m_related_profile_property_references_isValid = false;
}

void OAIRelationshipsLookup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationshipsLookup::fromJsonObject(QJsonObject json) {

    m_existing_relationship_name_isValid = ::OpenAPI::fromJsonValue(m_existing_relationship_name, json[QString("existingRelationshipName")]);
    m_existing_relationship_name_isSet = !json[QString("existingRelationshipName")].isNull() && m_existing_relationship_name_isValid;

    m_profile_name_isValid = ::OpenAPI::fromJsonValue(m_profile_name, json[QString("profileName")]);
    m_profile_name_isSet = !json[QString("profileName")].isNull() && m_profile_name_isValid;

    m_profile_property_references_isValid = ::OpenAPI::fromJsonValue(m_profile_property_references, json[QString("profilePropertyReferences")]);
    m_profile_property_references_isSet = !json[QString("profilePropertyReferences")].isNull() && m_profile_property_references_isValid;

    m_related_profile_name_isValid = ::OpenAPI::fromJsonValue(m_related_profile_name, json[QString("relatedProfileName")]);
    m_related_profile_name_isSet = !json[QString("relatedProfileName")].isNull() && m_related_profile_name_isValid;

    m_related_profile_property_references_isValid = ::OpenAPI::fromJsonValue(m_related_profile_property_references, json[QString("relatedProfilePropertyReferences")]);
    m_related_profile_property_references_isSet = !json[QString("relatedProfilePropertyReferences")].isNull() && m_related_profile_property_references_isValid;
}

QString OAIRelationshipsLookup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationshipsLookup::asJsonObject() const {
    QJsonObject obj;
    if (m_existing_relationship_name_isSet) {
        obj.insert(QString("existingRelationshipName"), ::OpenAPI::toJsonValue(m_existing_relationship_name));
    }
    if (m_profile_name_isSet) {
        obj.insert(QString("profileName"), ::OpenAPI::toJsonValue(m_profile_name));
    }
    if (m_profile_property_references.size() > 0) {
        obj.insert(QString("profilePropertyReferences"), ::OpenAPI::toJsonValue(m_profile_property_references));
    }
    if (m_related_profile_name_isSet) {
        obj.insert(QString("relatedProfileName"), ::OpenAPI::toJsonValue(m_related_profile_name));
    }
    if (m_related_profile_property_references.size() > 0) {
        obj.insert(QString("relatedProfilePropertyReferences"), ::OpenAPI::toJsonValue(m_related_profile_property_references));
    }
    return obj;
}

QString OAIRelationshipsLookup::getExistingRelationshipName() const {
    return m_existing_relationship_name;
}
void OAIRelationshipsLookup::setExistingRelationshipName(const QString &existing_relationship_name) {
    m_existing_relationship_name = existing_relationship_name;
    m_existing_relationship_name_isSet = true;
}

bool OAIRelationshipsLookup::is_existing_relationship_name_Set() const{
    return m_existing_relationship_name_isSet;
}

bool OAIRelationshipsLookup::is_existing_relationship_name_Valid() const{
    return m_existing_relationship_name_isValid;
}

QString OAIRelationshipsLookup::getProfileName() const {
    return m_profile_name;
}
void OAIRelationshipsLookup::setProfileName(const QString &profile_name) {
    m_profile_name = profile_name;
    m_profile_name_isSet = true;
}

bool OAIRelationshipsLookup::is_profile_name_Set() const{
    return m_profile_name_isSet;
}

bool OAIRelationshipsLookup::is_profile_name_Valid() const{
    return m_profile_name_isValid;
}

QList<OAIParticipantProfilePropertyReference> OAIRelationshipsLookup::getProfilePropertyReferences() const {
    return m_profile_property_references;
}
void OAIRelationshipsLookup::setProfilePropertyReferences(const QList<OAIParticipantProfilePropertyReference> &profile_property_references) {
    m_profile_property_references = profile_property_references;
    m_profile_property_references_isSet = true;
}

bool OAIRelationshipsLookup::is_profile_property_references_Set() const{
    return m_profile_property_references_isSet;
}

bool OAIRelationshipsLookup::is_profile_property_references_Valid() const{
    return m_profile_property_references_isValid;
}

QString OAIRelationshipsLookup::getRelatedProfileName() const {
    return m_related_profile_name;
}
void OAIRelationshipsLookup::setRelatedProfileName(const QString &related_profile_name) {
    m_related_profile_name = related_profile_name;
    m_related_profile_name_isSet = true;
}

bool OAIRelationshipsLookup::is_related_profile_name_Set() const{
    return m_related_profile_name_isSet;
}

bool OAIRelationshipsLookup::is_related_profile_name_Valid() const{
    return m_related_profile_name_isValid;
}

QList<OAIParticipantProfilePropertyReference> OAIRelationshipsLookup::getRelatedProfilePropertyReferences() const {
    return m_related_profile_property_references;
}
void OAIRelationshipsLookup::setRelatedProfilePropertyReferences(const QList<OAIParticipantProfilePropertyReference> &related_profile_property_references) {
    m_related_profile_property_references = related_profile_property_references;
    m_related_profile_property_references_isSet = true;
}

bool OAIRelationshipsLookup::is_related_profile_property_references_Set() const{
    return m_related_profile_property_references_isSet;
}

bool OAIRelationshipsLookup::is_related_profile_property_references_Valid() const{
    return m_related_profile_property_references_isValid;
}

bool OAIRelationshipsLookup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_existing_relationship_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_property_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_profile_property_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationshipsLookup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
