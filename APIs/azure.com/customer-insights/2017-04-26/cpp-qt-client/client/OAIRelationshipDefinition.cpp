/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationshipDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationshipDefinition::OAIRelationshipDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationshipDefinition::OAIRelationshipDefinition() {
    this->initializeModel();
}

OAIRelationshipDefinition::~OAIRelationshipDefinition() {}

void OAIRelationshipDefinition::initializeModel() {

    m_cardinality_isSet = false;
    m_cardinality_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_expiry_date_time_utc_isSet = false;
    m_expiry_date_time_utc_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_lookup_mappings_isSet = false;
    m_lookup_mappings_isValid = false;

    m_profile_type_isSet = false;
    m_profile_type_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_related_profile_type_isSet = false;
    m_related_profile_type_isValid = false;

    m_relationship_guid_id_isSet = false;
    m_relationship_guid_id_isValid = false;

    m_relationship_name_isSet = false;
    m_relationship_name_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIRelationshipDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationshipDefinition::fromJsonObject(QJsonObject json) {

    m_cardinality_isValid = ::OpenAPI::fromJsonValue(m_cardinality, json[QString("cardinality")]);
    m_cardinality_isSet = !json[QString("cardinality")].isNull() && m_cardinality_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_expiry_date_time_utc_isValid = ::OpenAPI::fromJsonValue(m_expiry_date_time_utc, json[QString("expiryDateTimeUtc")]);
    m_expiry_date_time_utc_isSet = !json[QString("expiryDateTimeUtc")].isNull() && m_expiry_date_time_utc_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_lookup_mappings_isValid = ::OpenAPI::fromJsonValue(m_lookup_mappings, json[QString("lookupMappings")]);
    m_lookup_mappings_isSet = !json[QString("lookupMappings")].isNull() && m_lookup_mappings_isValid;

    m_profile_type_isValid = ::OpenAPI::fromJsonValue(m_profile_type, json[QString("profileType")]);
    m_profile_type_isSet = !json[QString("profileType")].isNull() && m_profile_type_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_related_profile_type_isValid = ::OpenAPI::fromJsonValue(m_related_profile_type, json[QString("relatedProfileType")]);
    m_related_profile_type_isSet = !json[QString("relatedProfileType")].isNull() && m_related_profile_type_isValid;

    m_relationship_guid_id_isValid = ::OpenAPI::fromJsonValue(m_relationship_guid_id, json[QString("relationshipGuidId")]);
    m_relationship_guid_id_isSet = !json[QString("relationshipGuidId")].isNull() && m_relationship_guid_id_isValid;

    m_relationship_name_isValid = ::OpenAPI::fromJsonValue(m_relationship_name, json[QString("relationshipName")]);
    m_relationship_name_isSet = !json[QString("relationshipName")].isNull() && m_relationship_name_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIRelationshipDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationshipDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_cardinality_isSet) {
        obj.insert(QString("cardinality"), ::OpenAPI::toJsonValue(m_cardinality));
    }
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_expiry_date_time_utc_isSet) {
        obj.insert(QString("expiryDateTimeUtc"), ::OpenAPI::toJsonValue(m_expiry_date_time_utc));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_lookup_mappings.size() > 0) {
        obj.insert(QString("lookupMappings"), ::OpenAPI::toJsonValue(m_lookup_mappings));
    }
    if (m_profile_type_isSet) {
        obj.insert(QString("profileType"), ::OpenAPI::toJsonValue(m_profile_type));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_related_profile_type_isSet) {
        obj.insert(QString("relatedProfileType"), ::OpenAPI::toJsonValue(m_related_profile_type));
    }
    if (m_relationship_guid_id_isSet) {
        obj.insert(QString("relationshipGuidId"), ::OpenAPI::toJsonValue(m_relationship_guid_id));
    }
    if (m_relationship_name_isSet) {
        obj.insert(QString("relationshipName"), ::OpenAPI::toJsonValue(m_relationship_name));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIRelationshipDefinition::getCardinality() const {
    return m_cardinality;
}
void OAIRelationshipDefinition::setCardinality(const QString &cardinality) {
    m_cardinality = cardinality;
    m_cardinality_isSet = true;
}

bool OAIRelationshipDefinition::is_cardinality_Set() const{
    return m_cardinality_isSet;
}

bool OAIRelationshipDefinition::is_cardinality_Valid() const{
    return m_cardinality_isValid;
}

QMap<QString, QString> OAIRelationshipDefinition::getDescription() const {
    return m_description;
}
void OAIRelationshipDefinition::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRelationshipDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRelationshipDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIRelationshipDefinition::getDisplayName() const {
    return m_display_name;
}
void OAIRelationshipDefinition::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRelationshipDefinition::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRelationshipDefinition::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDateTime OAIRelationshipDefinition::getExpiryDateTimeUtc() const {
    return m_expiry_date_time_utc;
}
void OAIRelationshipDefinition::setExpiryDateTimeUtc(const QDateTime &expiry_date_time_utc) {
    m_expiry_date_time_utc = expiry_date_time_utc;
    m_expiry_date_time_utc_isSet = true;
}

bool OAIRelationshipDefinition::is_expiry_date_time_utc_Set() const{
    return m_expiry_date_time_utc_isSet;
}

bool OAIRelationshipDefinition::is_expiry_date_time_utc_Valid() const{
    return m_expiry_date_time_utc_isValid;
}

QList<OAIPropertyDefinition> OAIRelationshipDefinition::getFields() const {
    return m_fields;
}
void OAIRelationshipDefinition::setFields(const QList<OAIPropertyDefinition> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIRelationshipDefinition::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIRelationshipDefinition::is_fields_Valid() const{
    return m_fields_isValid;
}

QList<OAIRelationshipTypeMapping> OAIRelationshipDefinition::getLookupMappings() const {
    return m_lookup_mappings;
}
void OAIRelationshipDefinition::setLookupMappings(const QList<OAIRelationshipTypeMapping> &lookup_mappings) {
    m_lookup_mappings = lookup_mappings;
    m_lookup_mappings_isSet = true;
}

bool OAIRelationshipDefinition::is_lookup_mappings_Set() const{
    return m_lookup_mappings_isSet;
}

bool OAIRelationshipDefinition::is_lookup_mappings_Valid() const{
    return m_lookup_mappings_isValid;
}

QString OAIRelationshipDefinition::getProfileType() const {
    return m_profile_type;
}
void OAIRelationshipDefinition::setProfileType(const QString &profile_type) {
    m_profile_type = profile_type;
    m_profile_type_isSet = true;
}

bool OAIRelationshipDefinition::is_profile_type_Set() const{
    return m_profile_type_isSet;
}

bool OAIRelationshipDefinition::is_profile_type_Valid() const{
    return m_profile_type_isValid;
}

OAIProvisioningState OAIRelationshipDefinition::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRelationshipDefinition::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRelationshipDefinition::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRelationshipDefinition::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIRelationshipDefinition::getRelatedProfileType() const {
    return m_related_profile_type;
}
void OAIRelationshipDefinition::setRelatedProfileType(const QString &related_profile_type) {
    m_related_profile_type = related_profile_type;
    m_related_profile_type_isSet = true;
}

bool OAIRelationshipDefinition::is_related_profile_type_Set() const{
    return m_related_profile_type_isSet;
}

bool OAIRelationshipDefinition::is_related_profile_type_Valid() const{
    return m_related_profile_type_isValid;
}

QString OAIRelationshipDefinition::getRelationshipGuidId() const {
    return m_relationship_guid_id;
}
void OAIRelationshipDefinition::setRelationshipGuidId(const QString &relationship_guid_id) {
    m_relationship_guid_id = relationship_guid_id;
    m_relationship_guid_id_isSet = true;
}

bool OAIRelationshipDefinition::is_relationship_guid_id_Set() const{
    return m_relationship_guid_id_isSet;
}

bool OAIRelationshipDefinition::is_relationship_guid_id_Valid() const{
    return m_relationship_guid_id_isValid;
}

QString OAIRelationshipDefinition::getRelationshipName() const {
    return m_relationship_name;
}
void OAIRelationshipDefinition::setRelationshipName(const QString &relationship_name) {
    m_relationship_name = relationship_name;
    m_relationship_name_isSet = true;
}

bool OAIRelationshipDefinition::is_relationship_name_Set() const{
    return m_relationship_name_isSet;
}

bool OAIRelationshipDefinition::is_relationship_name_Valid() const{
    return m_relationship_name_isValid;
}

QString OAIRelationshipDefinition::getTenantId() const {
    return m_tenant_id;
}
void OAIRelationshipDefinition::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIRelationshipDefinition::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIRelationshipDefinition::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIRelationshipDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cardinality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookup_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_profile_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_guid_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationshipDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_profile_type_isValid && m_related_profile_type_isValid && true;
}

} // namespace OpenAPI
