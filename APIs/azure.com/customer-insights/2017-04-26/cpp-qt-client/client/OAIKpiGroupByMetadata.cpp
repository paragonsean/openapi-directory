/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKpiGroupByMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKpiGroupByMetadata::OAIKpiGroupByMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKpiGroupByMetadata::OAIKpiGroupByMetadata() {
    this->initializeModel();
}

OAIKpiGroupByMetadata::~OAIKpiGroupByMetadata() {}

void OAIKpiGroupByMetadata::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_field_type_isSet = false;
    m_field_type_isValid = false;
}

void OAIKpiGroupByMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKpiGroupByMetadata::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("fieldName")]);
    m_field_name_isSet = !json[QString("fieldName")].isNull() && m_field_name_isValid;

    m_field_type_isValid = ::OpenAPI::fromJsonValue(m_field_type, json[QString("fieldType")]);
    m_field_type_isSet = !json[QString("fieldType")].isNull() && m_field_type_isValid;
}

QString OAIKpiGroupByMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKpiGroupByMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_field_name_isSet) {
        obj.insert(QString("fieldName"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_field_type_isSet) {
        obj.insert(QString("fieldType"), ::OpenAPI::toJsonValue(m_field_type));
    }
    return obj;
}

QMap<QString, QString> OAIKpiGroupByMetadata::getDisplayName() const {
    return m_display_name;
}
void OAIKpiGroupByMetadata::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIKpiGroupByMetadata::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIKpiGroupByMetadata::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIKpiGroupByMetadata::getFieldName() const {
    return m_field_name;
}
void OAIKpiGroupByMetadata::setFieldName(const QString &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAIKpiGroupByMetadata::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAIKpiGroupByMetadata::is_field_name_Valid() const{
    return m_field_name_isValid;
}

QString OAIKpiGroupByMetadata::getFieldType() const {
    return m_field_type;
}
void OAIKpiGroupByMetadata::setFieldType(const QString &field_type) {
    m_field_type = field_type;
    m_field_type_isSet = true;
}

bool OAIKpiGroupByMetadata::is_field_type_Set() const{
    return m_field_type_isSet;
}

bool OAIKpiGroupByMetadata::is_field_type_Valid() const{
    return m_field_type_isValid;
}

bool OAIKpiGroupByMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKpiGroupByMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
