/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentPrincipal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentPrincipal::OAIAssignmentPrincipal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentPrincipal::OAIAssignmentPrincipal() {
    this->initializeModel();
}

OAIAssignmentPrincipal::~OAIAssignmentPrincipal() {}

void OAIAssignmentPrincipal::initializeModel() {

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_principal_metadata_isSet = false;
    m_principal_metadata_isValid = false;

    m_principal_type_isSet = false;
    m_principal_type_isValid = false;
}

void OAIAssignmentPrincipal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentPrincipal::fromJsonObject(QJsonObject json) {

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principalId")]);
    m_principal_id_isSet = !json[QString("principalId")].isNull() && m_principal_id_isValid;

    m_principal_metadata_isValid = ::OpenAPI::fromJsonValue(m_principal_metadata, json[QString("principalMetadata")]);
    m_principal_metadata_isSet = !json[QString("principalMetadata")].isNull() && m_principal_metadata_isValid;

    m_principal_type_isValid = ::OpenAPI::fromJsonValue(m_principal_type, json[QString("principalType")]);
    m_principal_type_isSet = !json[QString("principalType")].isNull() && m_principal_type_isValid;
}

QString OAIAssignmentPrincipal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentPrincipal::asJsonObject() const {
    QJsonObject obj;
    if (m_principal_id_isSet) {
        obj.insert(QString("principalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_principal_metadata.size() > 0) {
        obj.insert(QString("principalMetadata"), ::OpenAPI::toJsonValue(m_principal_metadata));
    }
    if (m_principal_type_isSet) {
        obj.insert(QString("principalType"), ::OpenAPI::toJsonValue(m_principal_type));
    }
    return obj;
}

QString OAIAssignmentPrincipal::getPrincipalId() const {
    return m_principal_id;
}
void OAIAssignmentPrincipal::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIAssignmentPrincipal::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIAssignmentPrincipal::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QMap<QString, QString> OAIAssignmentPrincipal::getPrincipalMetadata() const {
    return m_principal_metadata;
}
void OAIAssignmentPrincipal::setPrincipalMetadata(const QMap<QString, QString> &principal_metadata) {
    m_principal_metadata = principal_metadata;
    m_principal_metadata_isSet = true;
}

bool OAIAssignmentPrincipal::is_principal_metadata_Set() const{
    return m_principal_metadata_isSet;
}

bool OAIAssignmentPrincipal::is_principal_metadata_Valid() const{
    return m_principal_metadata_isValid;
}

QString OAIAssignmentPrincipal::getPrincipalType() const {
    return m_principal_type;
}
void OAIAssignmentPrincipal::setPrincipalType(const QString &principal_type) {
    m_principal_type = principal_type;
    m_principal_type_isSet = true;
}

bool OAIAssignmentPrincipal::is_principal_type_Set() const{
    return m_principal_type_isSet;
}

bool OAIAssignmentPrincipal::is_principal_type_Valid() const{
    return m_principal_type_isValid;
}

bool OAIAssignmentPrincipal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentPrincipal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_principal_id_isValid && m_principal_type_isValid && true;
}

} // namespace OpenAPI
