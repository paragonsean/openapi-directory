/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConnectorsApi_H
#define OAI_OAIConnectorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectorListResult.h"
#include "OAIConnectorResourceFormat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConnectorsApi : public QObject {
    Q_OBJECT

public:
    OAIConnectorsApi(const int timeOut = 0);
    ~OAIConnectorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  connector_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIConnectorResourceFormat [required]
    */
    virtual void connectorsCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &connector_name, const QString &api_version, const QString &subscription_id, const OAIConnectorResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  connector_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectorsDelete(const QString &resource_group_name, const QString &hub_name, const QString &connector_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  connector_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectorsGet(const QString &resource_group_name, const QString &hub_name, const QString &connector_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectorsListByHub(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void connectorsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void connectorsDeleteCallback(OAIHttpRequestWorker *worker);
    void connectorsGetCallback(OAIHttpRequestWorker *worker);
    void connectorsListByHubCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void connectorsCreateOrUpdateSignal(OAIConnectorResourceFormat summary);
    void connectorsDeleteSignal();
    void connectorsGetSignal(OAIConnectorResourceFormat summary);
    void connectorsListByHubSignal(OAIConnectorListResult summary);


    void connectorsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConnectorResourceFormat summary);
    void connectorsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void connectorsGetSignalFull(OAIHttpRequestWorker *worker, OAIConnectorResourceFormat summary);
    void connectorsListByHubSignalFull(OAIHttpRequestWorker *worker, OAIConnectorListResult summary);

    Q_DECL_DEPRECATED_X("Use connectorsCreateOrUpdateSignalError() instead")
    void connectorsCreateOrUpdateSignalE(OAIConnectorResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorsCreateOrUpdateSignalError(OAIConnectorResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorsDeleteSignalError() instead")
    void connectorsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void connectorsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorsGetSignalError() instead")
    void connectorsGetSignalE(OAIConnectorResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorsGetSignalError(OAIConnectorResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorsListByHubSignalError() instead")
    void connectorsListByHubSignalE(OAIConnectorListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorsListByHubSignalError(OAIConnectorListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use connectorsCreateOrUpdateSignalErrorFull() instead")
    void connectorsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorsDeleteSignalErrorFull() instead")
    void connectorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorsGetSignalErrorFull() instead")
    void connectorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorsListByHubSignalErrorFull() instead")
    void connectorsListByHubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorsListByHubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
