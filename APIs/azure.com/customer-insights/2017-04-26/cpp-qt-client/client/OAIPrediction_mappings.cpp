/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrediction_mappings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrediction_mappings::OAIPrediction_mappings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrediction_mappings::OAIPrediction_mappings() {
    this->initializeModel();
}

OAIPrediction_mappings::~OAIPrediction_mappings() {}

void OAIPrediction_mappings::initializeModel() {

    m_grade_isSet = false;
    m_grade_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIPrediction_mappings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrediction_mappings::fromJsonObject(QJsonObject json) {

    m_grade_isValid = ::OpenAPI::fromJsonValue(m_grade, json[QString("grade")]);
    m_grade_isSet = !json[QString("grade")].isNull() && m_grade_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIPrediction_mappings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrediction_mappings::asJsonObject() const {
    QJsonObject obj;
    if (m_grade_isSet) {
        obj.insert(QString("grade"), ::OpenAPI::toJsonValue(m_grade));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QString OAIPrediction_mappings::getGrade() const {
    return m_grade;
}
void OAIPrediction_mappings::setGrade(const QString &grade) {
    m_grade = grade;
    m_grade_isSet = true;
}

bool OAIPrediction_mappings::is_grade_Set() const{
    return m_grade_isSet;
}

bool OAIPrediction_mappings::is_grade_Valid() const{
    return m_grade_isValid;
}

QString OAIPrediction_mappings::getReason() const {
    return m_reason;
}
void OAIPrediction_mappings::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIPrediction_mappings::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIPrediction_mappings::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIPrediction_mappings::getScore() const {
    return m_score;
}
void OAIPrediction_mappings::setScore(const QString &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPrediction_mappings::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPrediction_mappings::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIPrediction_mappings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrediction_mappings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_grade_isValid && m_reason_isValid && m_score_isValid && true;
}

} // namespace OpenAPI
