/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureBlobConnectorProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureBlobConnectorProperties::OAIAzureBlobConnectorProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureBlobConnectorProperties::OAIAzureBlobConnectorProperties() {
    this->initializeModel();
}

OAIAzureBlobConnectorProperties::~OAIAzureBlobConnectorProperties() {}

void OAIAzureBlobConnectorProperties::initializeModel() {

    m_connection_key_vault_url_isSet = false;
    m_connection_key_vault_url_isValid = false;
}

void OAIAzureBlobConnectorProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureBlobConnectorProperties::fromJsonObject(QJsonObject json) {

    m_connection_key_vault_url_isValid = ::OpenAPI::fromJsonValue(m_connection_key_vault_url, json[QString("connectionKeyVaultUrl")]);
    m_connection_key_vault_url_isSet = !json[QString("connectionKeyVaultUrl")].isNull() && m_connection_key_vault_url_isValid;
}

QString OAIAzureBlobConnectorProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureBlobConnectorProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_key_vault_url_isSet) {
        obj.insert(QString("connectionKeyVaultUrl"), ::OpenAPI::toJsonValue(m_connection_key_vault_url));
    }
    return obj;
}

QString OAIAzureBlobConnectorProperties::getConnectionKeyVaultUrl() const {
    return m_connection_key_vault_url;
}
void OAIAzureBlobConnectorProperties::setConnectionKeyVaultUrl(const QString &connection_key_vault_url) {
    m_connection_key_vault_url = connection_key_vault_url;
    m_connection_key_vault_url_isSet = true;
}

bool OAIAzureBlobConnectorProperties::is_connection_key_vault_url_Set() const{
    return m_connection_key_vault_url_isSet;
}

bool OAIAzureBlobConnectorProperties::is_connection_key_vault_url_Valid() const{
    return m_connection_key_vault_url_isValid;
}

bool OAIAzureBlobConnectorProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_key_vault_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureBlobConnectorProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_key_vault_url_isValid && true;
}

} // namespace OpenAPI
