/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorMappingCompleteOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorMappingCompleteOperation::OAIConnectorMappingCompleteOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorMappingCompleteOperation::OAIConnectorMappingCompleteOperation() {
    this->initializeModel();
}

OAIConnectorMappingCompleteOperation::~OAIConnectorMappingCompleteOperation() {}

void OAIConnectorMappingCompleteOperation::initializeModel() {

    m_completion_operation_type_isSet = false;
    m_completion_operation_type_isValid = false;

    m_destination_folder_isSet = false;
    m_destination_folder_isValid = false;
}

void OAIConnectorMappingCompleteOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorMappingCompleteOperation::fromJsonObject(QJsonObject json) {

    m_completion_operation_type_isValid = ::OpenAPI::fromJsonValue(m_completion_operation_type, json[QString("completionOperationType")]);
    m_completion_operation_type_isSet = !json[QString("completionOperationType")].isNull() && m_completion_operation_type_isValid;

    m_destination_folder_isValid = ::OpenAPI::fromJsonValue(m_destination_folder, json[QString("destinationFolder")]);
    m_destination_folder_isSet = !json[QString("destinationFolder")].isNull() && m_destination_folder_isValid;
}

QString OAIConnectorMappingCompleteOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorMappingCompleteOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_completion_operation_type_isSet) {
        obj.insert(QString("completionOperationType"), ::OpenAPI::toJsonValue(m_completion_operation_type));
    }
    if (m_destination_folder_isSet) {
        obj.insert(QString("destinationFolder"), ::OpenAPI::toJsonValue(m_destination_folder));
    }
    return obj;
}

QString OAIConnectorMappingCompleteOperation::getCompletionOperationType() const {
    return m_completion_operation_type;
}
void OAIConnectorMappingCompleteOperation::setCompletionOperationType(const QString &completion_operation_type) {
    m_completion_operation_type = completion_operation_type;
    m_completion_operation_type_isSet = true;
}

bool OAIConnectorMappingCompleteOperation::is_completion_operation_type_Set() const{
    return m_completion_operation_type_isSet;
}

bool OAIConnectorMappingCompleteOperation::is_completion_operation_type_Valid() const{
    return m_completion_operation_type_isValid;
}

QString OAIConnectorMappingCompleteOperation::getDestinationFolder() const {
    return m_destination_folder;
}
void OAIConnectorMappingCompleteOperation::setDestinationFolder(const QString &destination_folder) {
    m_destination_folder = destination_folder;
    m_destination_folder_isSet = true;
}

bool OAIConnectorMappingCompleteOperation::is_destination_folder_Set() const{
    return m_destination_folder_isSet;
}

bool OAIConnectorMappingCompleteOperation::is_destination_folder_Valid() const{
    return m_destination_folder_isValid;
}

bool OAIConnectorMappingCompleteOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completion_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_folder_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorMappingCompleteOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
