/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnector::OAIConnector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnector::OAIConnector() {
    this->initializeModel();
}

OAIConnector::~OAIConnector() {}

void OAIConnector::initializeModel() {

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_connector_name_isSet = false;
    m_connector_name_isValid = false;

    m_connector_properties_isSet = false;
    m_connector_properties_isValid = false;

    m_connector_type_isSet = false;
    m_connector_type_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_is_internal_isSet = false;
    m_is_internal_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIConnector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnector::fromJsonObject(QJsonObject json) {

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_connector_name_isValid = ::OpenAPI::fromJsonValue(m_connector_name, json[QString("connectorName")]);
    m_connector_name_isSet = !json[QString("connectorName")].isNull() && m_connector_name_isValid;

    m_connector_properties_isValid = ::OpenAPI::fromJsonValue(m_connector_properties, json[QString("connectorProperties")]);
    m_connector_properties_isSet = !json[QString("connectorProperties")].isNull() && m_connector_properties_isValid;

    m_connector_type_isValid = ::OpenAPI::fromJsonValue(m_connector_type, json[QString("connectorType")]);
    m_connector_type_isSet = !json[QString("connectorType")].isNull() && m_connector_type_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_is_internal_isValid = ::OpenAPI::fromJsonValue(m_is_internal, json[QString("isInternal")]);
    m_is_internal_isSet = !json[QString("isInternal")].isNull() && m_is_internal_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIConnector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnector::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_connector_name_isSet) {
        obj.insert(QString("connectorName"), ::OpenAPI::toJsonValue(m_connector_name));
    }
    if (m_connector_properties.size() > 0) {
        obj.insert(QString("connectorProperties"), ::OpenAPI::toJsonValue(m_connector_properties));
    }
    if (m_connector_type.isSet()) {
        obj.insert(QString("connectorType"), ::OpenAPI::toJsonValue(m_connector_type));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_is_internal_isSet) {
        obj.insert(QString("isInternal"), ::OpenAPI::toJsonValue(m_is_internal));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

qint32 OAIConnector::getConnectorId() const {
    return m_connector_id;
}
void OAIConnector::setConnectorId(const qint32 &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIConnector::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIConnector::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIConnector::getConnectorName() const {
    return m_connector_name;
}
void OAIConnector::setConnectorName(const QString &connector_name) {
    m_connector_name = connector_name;
    m_connector_name_isSet = true;
}

bool OAIConnector::is_connector_name_Set() const{
    return m_connector_name_isSet;
}

bool OAIConnector::is_connector_name_Valid() const{
    return m_connector_name_isValid;
}

QMap<QString, OAIObject> OAIConnector::getConnectorProperties() const {
    return m_connector_properties;
}
void OAIConnector::setConnectorProperties(const QMap<QString, OAIObject> &connector_properties) {
    m_connector_properties = connector_properties;
    m_connector_properties_isSet = true;
}

bool OAIConnector::is_connector_properties_Set() const{
    return m_connector_properties_isSet;
}

bool OAIConnector::is_connector_properties_Valid() const{
    return m_connector_properties_isValid;
}

OAIConnectorType OAIConnector::getConnectorType() const {
    return m_connector_type;
}
void OAIConnector::setConnectorType(const OAIConnectorType &connector_type) {
    m_connector_type = connector_type;
    m_connector_type_isSet = true;
}

bool OAIConnector::is_connector_type_Set() const{
    return m_connector_type_isSet;
}

bool OAIConnector::is_connector_type_Valid() const{
    return m_connector_type_isValid;
}

QDateTime OAIConnector::getCreated() const {
    return m_created;
}
void OAIConnector::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIConnector::is_created_Set() const{
    return m_created_isSet;
}

bool OAIConnector::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIConnector::getDescription() const {
    return m_description;
}
void OAIConnector::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConnector::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConnector::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIConnector::getDisplayName() const {
    return m_display_name;
}
void OAIConnector::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConnector::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConnector::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIConnector::isIsInternal() const {
    return m_is_internal;
}
void OAIConnector::setIsInternal(const bool &is_internal) {
    m_is_internal = is_internal;
    m_is_internal_isSet = true;
}

bool OAIConnector::is_is_internal_Set() const{
    return m_is_internal_isSet;
}

bool OAIConnector::is_is_internal_Valid() const{
    return m_is_internal_isValid;
}

QDateTime OAIConnector::getLastModified() const {
    return m_last_modified;
}
void OAIConnector::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIConnector::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIConnector::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIConnector::getState() const {
    return m_state;
}
void OAIConnector::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConnector::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConnector::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIConnector::getTenantId() const {
    return m_tenant_id;
}
void OAIConnector::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIConnector::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIConnector::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIConnector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connector_properties_isValid && m_connector_type_isValid && true;
}

} // namespace OpenAPI
