/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesforceDiscoverSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesforceDiscoverSetting::OAISalesforceDiscoverSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesforceDiscoverSetting::OAISalesforceDiscoverSetting() {
    this->initializeModel();
}

OAISalesforceDiscoverSetting::~OAISalesforceDiscoverSetting() {}

void OAISalesforceDiscoverSetting::initializeModel() {

    m_salesforce_connection_string_secret_url_isSet = false;
    m_salesforce_connection_string_secret_url_isValid = false;
}

void OAISalesforceDiscoverSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesforceDiscoverSetting::fromJsonObject(QJsonObject json) {

    m_salesforce_connection_string_secret_url_isValid = ::OpenAPI::fromJsonValue(m_salesforce_connection_string_secret_url, json[QString("salesforceConnectionStringSecretUrl")]);
    m_salesforce_connection_string_secret_url_isSet = !json[QString("salesforceConnectionStringSecretUrl")].isNull() && m_salesforce_connection_string_secret_url_isValid;
}

QString OAISalesforceDiscoverSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesforceDiscoverSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_salesforce_connection_string_secret_url_isSet) {
        obj.insert(QString("salesforceConnectionStringSecretUrl"), ::OpenAPI::toJsonValue(m_salesforce_connection_string_secret_url));
    }
    return obj;
}

QString OAISalesforceDiscoverSetting::getSalesforceConnectionStringSecretUrl() const {
    return m_salesforce_connection_string_secret_url;
}
void OAISalesforceDiscoverSetting::setSalesforceConnectionStringSecretUrl(const QString &salesforce_connection_string_secret_url) {
    m_salesforce_connection_string_secret_url = salesforce_connection_string_secret_url;
    m_salesforce_connection_string_secret_url_isSet = true;
}

bool OAISalesforceDiscoverSetting::is_salesforce_connection_string_secret_url_Set() const{
    return m_salesforce_connection_string_secret_url_isSet;
}

bool OAISalesforceDiscoverSetting::is_salesforce_connection_string_secret_url_Valid() const{
    return m_salesforce_connection_string_secret_url_isValid;
}

bool OAISalesforceDiscoverSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_salesforce_connection_string_secret_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesforceDiscoverSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_salesforce_connection_string_secret_url_isValid && true;
}

} // namespace OpenAPI
