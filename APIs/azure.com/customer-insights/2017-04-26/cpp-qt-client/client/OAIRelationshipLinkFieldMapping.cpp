/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationshipLinkFieldMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationshipLinkFieldMapping::OAIRelationshipLinkFieldMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationshipLinkFieldMapping::OAIRelationshipLinkFieldMapping() {
    this->initializeModel();
}

OAIRelationshipLinkFieldMapping::~OAIRelationshipLinkFieldMapping() {}

void OAIRelationshipLinkFieldMapping::initializeModel() {

    m_interaction_field_name_isSet = false;
    m_interaction_field_name_isValid = false;

    m_link_type_isSet = false;
    m_link_type_isValid = false;

    m_relationship_field_name_isSet = false;
    m_relationship_field_name_isValid = false;
}

void OAIRelationshipLinkFieldMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationshipLinkFieldMapping::fromJsonObject(QJsonObject json) {

    m_interaction_field_name_isValid = ::OpenAPI::fromJsonValue(m_interaction_field_name, json[QString("interactionFieldName")]);
    m_interaction_field_name_isSet = !json[QString("interactionFieldName")].isNull() && m_interaction_field_name_isValid;

    m_link_type_isValid = ::OpenAPI::fromJsonValue(m_link_type, json[QString("linkType")]);
    m_link_type_isSet = !json[QString("linkType")].isNull() && m_link_type_isValid;

    m_relationship_field_name_isValid = ::OpenAPI::fromJsonValue(m_relationship_field_name, json[QString("relationshipFieldName")]);
    m_relationship_field_name_isSet = !json[QString("relationshipFieldName")].isNull() && m_relationship_field_name_isValid;
}

QString OAIRelationshipLinkFieldMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationshipLinkFieldMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_interaction_field_name_isSet) {
        obj.insert(QString("interactionFieldName"), ::OpenAPI::toJsonValue(m_interaction_field_name));
    }
    if (m_link_type_isSet) {
        obj.insert(QString("linkType"), ::OpenAPI::toJsonValue(m_link_type));
    }
    if (m_relationship_field_name_isSet) {
        obj.insert(QString("relationshipFieldName"), ::OpenAPI::toJsonValue(m_relationship_field_name));
    }
    return obj;
}

QString OAIRelationshipLinkFieldMapping::getInteractionFieldName() const {
    return m_interaction_field_name;
}
void OAIRelationshipLinkFieldMapping::setInteractionFieldName(const QString &interaction_field_name) {
    m_interaction_field_name = interaction_field_name;
    m_interaction_field_name_isSet = true;
}

bool OAIRelationshipLinkFieldMapping::is_interaction_field_name_Set() const{
    return m_interaction_field_name_isSet;
}

bool OAIRelationshipLinkFieldMapping::is_interaction_field_name_Valid() const{
    return m_interaction_field_name_isValid;
}

QString OAIRelationshipLinkFieldMapping::getLinkType() const {
    return m_link_type;
}
void OAIRelationshipLinkFieldMapping::setLinkType(const QString &link_type) {
    m_link_type = link_type;
    m_link_type_isSet = true;
}

bool OAIRelationshipLinkFieldMapping::is_link_type_Set() const{
    return m_link_type_isSet;
}

bool OAIRelationshipLinkFieldMapping::is_link_type_Valid() const{
    return m_link_type_isValid;
}

QString OAIRelationshipLinkFieldMapping::getRelationshipFieldName() const {
    return m_relationship_field_name;
}
void OAIRelationshipLinkFieldMapping::setRelationshipFieldName(const QString &relationship_field_name) {
    m_relationship_field_name = relationship_field_name;
    m_relationship_field_name_isSet = true;
}

bool OAIRelationshipLinkFieldMapping::is_relationship_field_name_Set() const{
    return m_relationship_field_name_isSet;
}

bool OAIRelationshipLinkFieldMapping::is_relationship_field_name_Valid() const{
    return m_relationship_field_name_isValid;
}

bool OAIRelationshipLinkFieldMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interaction_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationshipLinkFieldMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interaction_field_name_isValid && m_relationship_field_name_isValid && true;
}

} // namespace OpenAPI
