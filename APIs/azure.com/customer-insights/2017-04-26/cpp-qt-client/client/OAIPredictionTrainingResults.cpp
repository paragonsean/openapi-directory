/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictionTrainingResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictionTrainingResults::OAIPredictionTrainingResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictionTrainingResults::OAIPredictionTrainingResults() {
    this->initializeModel();
}

OAIPredictionTrainingResults::~OAIPredictionTrainingResults() {}

void OAIPredictionTrainingResults::initializeModel() {

    m_canonical_profiles_isSet = false;
    m_canonical_profiles_isValid = false;

    m_prediction_distribution_isSet = false;
    m_prediction_distribution_isValid = false;

    m_primary_profile_instance_count_isSet = false;
    m_primary_profile_instance_count_isValid = false;

    m_score_name_isSet = false;
    m_score_name_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIPredictionTrainingResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictionTrainingResults::fromJsonObject(QJsonObject json) {

    m_canonical_profiles_isValid = ::OpenAPI::fromJsonValue(m_canonical_profiles, json[QString("canonicalProfiles")]);
    m_canonical_profiles_isSet = !json[QString("canonicalProfiles")].isNull() && m_canonical_profiles_isValid;

    m_prediction_distribution_isValid = ::OpenAPI::fromJsonValue(m_prediction_distribution, json[QString("predictionDistribution")]);
    m_prediction_distribution_isSet = !json[QString("predictionDistribution")].isNull() && m_prediction_distribution_isValid;

    m_primary_profile_instance_count_isValid = ::OpenAPI::fromJsonValue(m_primary_profile_instance_count, json[QString("primaryProfileInstanceCount")]);
    m_primary_profile_instance_count_isSet = !json[QString("primaryProfileInstanceCount")].isNull() && m_primary_profile_instance_count_isValid;

    m_score_name_isValid = ::OpenAPI::fromJsonValue(m_score_name, json[QString("scoreName")]);
    m_score_name_isSet = !json[QString("scoreName")].isNull() && m_score_name_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIPredictionTrainingResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictionTrainingResults::asJsonObject() const {
    QJsonObject obj;
    if (m_canonical_profiles.size() > 0) {
        obj.insert(QString("canonicalProfiles"), ::OpenAPI::toJsonValue(m_canonical_profiles));
    }
    if (m_prediction_distribution.isSet()) {
        obj.insert(QString("predictionDistribution"), ::OpenAPI::toJsonValue(m_prediction_distribution));
    }
    if (m_primary_profile_instance_count_isSet) {
        obj.insert(QString("primaryProfileInstanceCount"), ::OpenAPI::toJsonValue(m_primary_profile_instance_count));
    }
    if (m_score_name_isSet) {
        obj.insert(QString("scoreName"), ::OpenAPI::toJsonValue(m_score_name));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QList<OAICanonicalProfileDefinition> OAIPredictionTrainingResults::getCanonicalProfiles() const {
    return m_canonical_profiles;
}
void OAIPredictionTrainingResults::setCanonicalProfiles(const QList<OAICanonicalProfileDefinition> &canonical_profiles) {
    m_canonical_profiles = canonical_profiles;
    m_canonical_profiles_isSet = true;
}

bool OAIPredictionTrainingResults::is_canonical_profiles_Set() const{
    return m_canonical_profiles_isSet;
}

bool OAIPredictionTrainingResults::is_canonical_profiles_Valid() const{
    return m_canonical_profiles_isValid;
}

OAIPredictionDistributionDefinition OAIPredictionTrainingResults::getPredictionDistribution() const {
    return m_prediction_distribution;
}
void OAIPredictionTrainingResults::setPredictionDistribution(const OAIPredictionDistributionDefinition &prediction_distribution) {
    m_prediction_distribution = prediction_distribution;
    m_prediction_distribution_isSet = true;
}

bool OAIPredictionTrainingResults::is_prediction_distribution_Set() const{
    return m_prediction_distribution_isSet;
}

bool OAIPredictionTrainingResults::is_prediction_distribution_Valid() const{
    return m_prediction_distribution_isValid;
}

qint64 OAIPredictionTrainingResults::getPrimaryProfileInstanceCount() const {
    return m_primary_profile_instance_count;
}
void OAIPredictionTrainingResults::setPrimaryProfileInstanceCount(const qint64 &primary_profile_instance_count) {
    m_primary_profile_instance_count = primary_profile_instance_count;
    m_primary_profile_instance_count_isSet = true;
}

bool OAIPredictionTrainingResults::is_primary_profile_instance_count_Set() const{
    return m_primary_profile_instance_count_isSet;
}

bool OAIPredictionTrainingResults::is_primary_profile_instance_count_Valid() const{
    return m_primary_profile_instance_count_isValid;
}

QString OAIPredictionTrainingResults::getScoreName() const {
    return m_score_name;
}
void OAIPredictionTrainingResults::setScoreName(const QString &score_name) {
    m_score_name = score_name;
    m_score_name_isSet = true;
}

bool OAIPredictionTrainingResults::is_score_name_Set() const{
    return m_score_name_isSet;
}

bool OAIPredictionTrainingResults::is_score_name_Valid() const{
    return m_score_name_isValid;
}

QString OAIPredictionTrainingResults::getTenantId() const {
    return m_tenant_id;
}
void OAIPredictionTrainingResults::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIPredictionTrainingResults::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIPredictionTrainingResults::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIPredictionTrainingResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canonical_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_distribution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_profile_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictionTrainingResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
