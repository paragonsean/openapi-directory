/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkDefinition::OAILinkDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkDefinition::OAILinkDefinition() {
    this->initializeModel();
}

OAILinkDefinition::~OAILinkDefinition() {}

void OAILinkDefinition::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_link_name_isSet = false;
    m_link_name_isValid = false;

    m_mappings_isSet = false;
    m_mappings_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_participant_property_references_isSet = false;
    m_participant_property_references_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_reference_only_isSet = false;
    m_reference_only_isValid = false;

    m_source_entity_type_isSet = false;
    m_source_entity_type_isValid = false;

    m_source_entity_type_name_isSet = false;
    m_source_entity_type_name_isValid = false;

    m_target_entity_type_isSet = false;
    m_target_entity_type_isValid = false;

    m_target_entity_type_name_isSet = false;
    m_target_entity_type_name_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAILinkDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkDefinition::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_link_name_isValid = ::OpenAPI::fromJsonValue(m_link_name, json[QString("linkName")]);
    m_link_name_isSet = !json[QString("linkName")].isNull() && m_link_name_isValid;

    m_mappings_isValid = ::OpenAPI::fromJsonValue(m_mappings, json[QString("mappings")]);
    m_mappings_isSet = !json[QString("mappings")].isNull() && m_mappings_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_participant_property_references_isValid = ::OpenAPI::fromJsonValue(m_participant_property_references, json[QString("participantPropertyReferences")]);
    m_participant_property_references_isSet = !json[QString("participantPropertyReferences")].isNull() && m_participant_property_references_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_reference_only_isValid = ::OpenAPI::fromJsonValue(m_reference_only, json[QString("referenceOnly")]);
    m_reference_only_isSet = !json[QString("referenceOnly")].isNull() && m_reference_only_isValid;

    m_source_entity_type_isValid = ::OpenAPI::fromJsonValue(m_source_entity_type, json[QString("sourceEntityType")]);
    m_source_entity_type_isSet = !json[QString("sourceEntityType")].isNull() && m_source_entity_type_isValid;

    m_source_entity_type_name_isValid = ::OpenAPI::fromJsonValue(m_source_entity_type_name, json[QString("sourceEntityTypeName")]);
    m_source_entity_type_name_isSet = !json[QString("sourceEntityTypeName")].isNull() && m_source_entity_type_name_isValid;

    m_target_entity_type_isValid = ::OpenAPI::fromJsonValue(m_target_entity_type, json[QString("targetEntityType")]);
    m_target_entity_type_isSet = !json[QString("targetEntityType")].isNull() && m_target_entity_type_isValid;

    m_target_entity_type_name_isValid = ::OpenAPI::fromJsonValue(m_target_entity_type_name, json[QString("targetEntityTypeName")]);
    m_target_entity_type_name_isSet = !json[QString("targetEntityTypeName")].isNull() && m_target_entity_type_name_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAILinkDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_link_name_isSet) {
        obj.insert(QString("linkName"), ::OpenAPI::toJsonValue(m_link_name));
    }
    if (m_mappings.size() > 0) {
        obj.insert(QString("mappings"), ::OpenAPI::toJsonValue(m_mappings));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_participant_property_references.size() > 0) {
        obj.insert(QString("participantPropertyReferences"), ::OpenAPI::toJsonValue(m_participant_property_references));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_reference_only_isSet) {
        obj.insert(QString("referenceOnly"), ::OpenAPI::toJsonValue(m_reference_only));
    }
    if (m_source_entity_type_isSet) {
        obj.insert(QString("sourceEntityType"), ::OpenAPI::toJsonValue(m_source_entity_type));
    }
    if (m_source_entity_type_name_isSet) {
        obj.insert(QString("sourceEntityTypeName"), ::OpenAPI::toJsonValue(m_source_entity_type_name));
    }
    if (m_target_entity_type_isSet) {
        obj.insert(QString("targetEntityType"), ::OpenAPI::toJsonValue(m_target_entity_type));
    }
    if (m_target_entity_type_name_isSet) {
        obj.insert(QString("targetEntityTypeName"), ::OpenAPI::toJsonValue(m_target_entity_type_name));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QMap<QString, QString> OAILinkDefinition::getDescription() const {
    return m_description;
}
void OAILinkDefinition::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILinkDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAILinkDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAILinkDefinition::getDisplayName() const {
    return m_display_name;
}
void OAILinkDefinition::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAILinkDefinition::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAILinkDefinition::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAILinkDefinition::getLinkName() const {
    return m_link_name;
}
void OAILinkDefinition::setLinkName(const QString &link_name) {
    m_link_name = link_name;
    m_link_name_isSet = true;
}

bool OAILinkDefinition::is_link_name_Set() const{
    return m_link_name_isSet;
}

bool OAILinkDefinition::is_link_name_Valid() const{
    return m_link_name_isValid;
}

QList<OAITypePropertiesMapping> OAILinkDefinition::getMappings() const {
    return m_mappings;
}
void OAILinkDefinition::setMappings(const QList<OAITypePropertiesMapping> &mappings) {
    m_mappings = mappings;
    m_mappings_isSet = true;
}

bool OAILinkDefinition::is_mappings_Set() const{
    return m_mappings_isSet;
}

bool OAILinkDefinition::is_mappings_Valid() const{
    return m_mappings_isValid;
}

QString OAILinkDefinition::getOperationType() const {
    return m_operation_type;
}
void OAILinkDefinition::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAILinkDefinition::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAILinkDefinition::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QList<OAIParticipantPropertyReference> OAILinkDefinition::getParticipantPropertyReferences() const {
    return m_participant_property_references;
}
void OAILinkDefinition::setParticipantPropertyReferences(const QList<OAIParticipantPropertyReference> &participant_property_references) {
    m_participant_property_references = participant_property_references;
    m_participant_property_references_isSet = true;
}

bool OAILinkDefinition::is_participant_property_references_Set() const{
    return m_participant_property_references_isSet;
}

bool OAILinkDefinition::is_participant_property_references_Valid() const{
    return m_participant_property_references_isValid;
}

OAIProvisioningState OAILinkDefinition::getProvisioningState() const {
    return m_provisioning_state;
}
void OAILinkDefinition::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAILinkDefinition::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAILinkDefinition::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAILinkDefinition::isReferenceOnly() const {
    return m_reference_only;
}
void OAILinkDefinition::setReferenceOnly(const bool &reference_only) {
    m_reference_only = reference_only;
    m_reference_only_isSet = true;
}

bool OAILinkDefinition::is_reference_only_Set() const{
    return m_reference_only_isSet;
}

bool OAILinkDefinition::is_reference_only_Valid() const{
    return m_reference_only_isValid;
}

QString OAILinkDefinition::getSourceEntityType() const {
    return m_source_entity_type;
}
void OAILinkDefinition::setSourceEntityType(const QString &source_entity_type) {
    m_source_entity_type = source_entity_type;
    m_source_entity_type_isSet = true;
}

bool OAILinkDefinition::is_source_entity_type_Set() const{
    return m_source_entity_type_isSet;
}

bool OAILinkDefinition::is_source_entity_type_Valid() const{
    return m_source_entity_type_isValid;
}

QString OAILinkDefinition::getSourceEntityTypeName() const {
    return m_source_entity_type_name;
}
void OAILinkDefinition::setSourceEntityTypeName(const QString &source_entity_type_name) {
    m_source_entity_type_name = source_entity_type_name;
    m_source_entity_type_name_isSet = true;
}

bool OAILinkDefinition::is_source_entity_type_name_Set() const{
    return m_source_entity_type_name_isSet;
}

bool OAILinkDefinition::is_source_entity_type_name_Valid() const{
    return m_source_entity_type_name_isValid;
}

QString OAILinkDefinition::getTargetEntityType() const {
    return m_target_entity_type;
}
void OAILinkDefinition::setTargetEntityType(const QString &target_entity_type) {
    m_target_entity_type = target_entity_type;
    m_target_entity_type_isSet = true;
}

bool OAILinkDefinition::is_target_entity_type_Set() const{
    return m_target_entity_type_isSet;
}

bool OAILinkDefinition::is_target_entity_type_Valid() const{
    return m_target_entity_type_isValid;
}

QString OAILinkDefinition::getTargetEntityTypeName() const {
    return m_target_entity_type_name;
}
void OAILinkDefinition::setTargetEntityTypeName(const QString &target_entity_type_name) {
    m_target_entity_type_name = target_entity_type_name;
    m_target_entity_type_name_isSet = true;
}

bool OAILinkDefinition::is_target_entity_type_name_Set() const{
    return m_target_entity_type_name_isSet;
}

bool OAILinkDefinition::is_target_entity_type_name_Valid() const{
    return m_target_entity_type_name_isValid;
}

QString OAILinkDefinition::getTenantId() const {
    return m_tenant_id;
}
void OAILinkDefinition::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAILinkDefinition::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAILinkDefinition::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAILinkDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_property_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_entity_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_entity_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_participant_property_references_isValid && m_source_entity_type_isValid && m_source_entity_type_name_isValid && m_target_entity_type_isValid && m_target_entity_type_name_isValid && true;
}

} // namespace OpenAPI
