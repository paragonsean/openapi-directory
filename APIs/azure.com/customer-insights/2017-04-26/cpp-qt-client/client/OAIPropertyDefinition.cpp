/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyDefinition::OAIPropertyDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyDefinition::OAIPropertyDefinition() {
    this->initializeModel();
}

OAIPropertyDefinition::~OAIPropertyDefinition() {}

void OAIPropertyDefinition::initializeModel() {

    m_array_value_separator_isSet = false;
    m_array_value_separator_isValid = false;

    m_data_source_precedence_rules_isSet = false;
    m_data_source_precedence_rules_isValid = false;

    m_enum_valid_values_isSet = false;
    m_enum_valid_values_isValid = false;

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_field_type_isSet = false;
    m_field_type_isValid = false;

    m_is_array_isSet = false;
    m_is_array_isValid = false;

    m_is_available_in_graph_isSet = false;
    m_is_available_in_graph_isValid = false;

    m_is_enum_isSet = false;
    m_is_enum_isValid = false;

    m_is_flag_enum_isSet = false;
    m_is_flag_enum_isValid = false;

    m_is_image_isSet = false;
    m_is_image_isValid = false;

    m_is_localized_string_isSet = false;
    m_is_localized_string_isValid = false;

    m_is_name_isSet = false;
    m_is_name_isValid = false;

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_property_id_isSet = false;
    m_property_id_isValid = false;

    m_schema_item_prop_link_isSet = false;
    m_schema_item_prop_link_isValid = false;
}

void OAIPropertyDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyDefinition::fromJsonObject(QJsonObject json) {

    m_array_value_separator_isValid = ::OpenAPI::fromJsonValue(m_array_value_separator, json[QString("arrayValueSeparator")]);
    m_array_value_separator_isSet = !json[QString("arrayValueSeparator")].isNull() && m_array_value_separator_isValid;

    m_data_source_precedence_rules_isValid = ::OpenAPI::fromJsonValue(m_data_source_precedence_rules, json[QString("dataSourcePrecedenceRules")]);
    m_data_source_precedence_rules_isSet = !json[QString("dataSourcePrecedenceRules")].isNull() && m_data_source_precedence_rules_isValid;

    m_enum_valid_values_isValid = ::OpenAPI::fromJsonValue(m_enum_valid_values, json[QString("enumValidValues")]);
    m_enum_valid_values_isSet = !json[QString("enumValidValues")].isNull() && m_enum_valid_values_isValid;

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("fieldName")]);
    m_field_name_isSet = !json[QString("fieldName")].isNull() && m_field_name_isValid;

    m_field_type_isValid = ::OpenAPI::fromJsonValue(m_field_type, json[QString("fieldType")]);
    m_field_type_isSet = !json[QString("fieldType")].isNull() && m_field_type_isValid;

    m_is_array_isValid = ::OpenAPI::fromJsonValue(m_is_array, json[QString("isArray")]);
    m_is_array_isSet = !json[QString("isArray")].isNull() && m_is_array_isValid;

    m_is_available_in_graph_isValid = ::OpenAPI::fromJsonValue(m_is_available_in_graph, json[QString("isAvailableInGraph")]);
    m_is_available_in_graph_isSet = !json[QString("isAvailableInGraph")].isNull() && m_is_available_in_graph_isValid;

    m_is_enum_isValid = ::OpenAPI::fromJsonValue(m_is_enum, json[QString("isEnum")]);
    m_is_enum_isSet = !json[QString("isEnum")].isNull() && m_is_enum_isValid;

    m_is_flag_enum_isValid = ::OpenAPI::fromJsonValue(m_is_flag_enum, json[QString("isFlagEnum")]);
    m_is_flag_enum_isSet = !json[QString("isFlagEnum")].isNull() && m_is_flag_enum_isValid;

    m_is_image_isValid = ::OpenAPI::fromJsonValue(m_is_image, json[QString("isImage")]);
    m_is_image_isSet = !json[QString("isImage")].isNull() && m_is_image_isValid;

    m_is_localized_string_isValid = ::OpenAPI::fromJsonValue(m_is_localized_string, json[QString("isLocalizedString")]);
    m_is_localized_string_isSet = !json[QString("isLocalizedString")].isNull() && m_is_localized_string_isValid;

    m_is_name_isValid = ::OpenAPI::fromJsonValue(m_is_name, json[QString("isName")]);
    m_is_name_isSet = !json[QString("isName")].isNull() && m_is_name_isValid;

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("isRequired")]);
    m_is_required_isSet = !json[QString("isRequired")].isNull() && m_is_required_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("maxLength")]);
    m_max_length_isSet = !json[QString("maxLength")].isNull() && m_max_length_isValid;

    m_property_id_isValid = ::OpenAPI::fromJsonValue(m_property_id, json[QString("propertyId")]);
    m_property_id_isSet = !json[QString("propertyId")].isNull() && m_property_id_isValid;

    m_schema_item_prop_link_isValid = ::OpenAPI::fromJsonValue(m_schema_item_prop_link, json[QString("schemaItemPropLink")]);
    m_schema_item_prop_link_isSet = !json[QString("schemaItemPropLink")].isNull() && m_schema_item_prop_link_isValid;
}

QString OAIPropertyDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_array_value_separator_isSet) {
        obj.insert(QString("arrayValueSeparator"), ::OpenAPI::toJsonValue(m_array_value_separator));
    }
    if (m_data_source_precedence_rules.size() > 0) {
        obj.insert(QString("dataSourcePrecedenceRules"), ::OpenAPI::toJsonValue(m_data_source_precedence_rules));
    }
    if (m_enum_valid_values.size() > 0) {
        obj.insert(QString("enumValidValues"), ::OpenAPI::toJsonValue(m_enum_valid_values));
    }
    if (m_field_name_isSet) {
        obj.insert(QString("fieldName"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_field_type_isSet) {
        obj.insert(QString("fieldType"), ::OpenAPI::toJsonValue(m_field_type));
    }
    if (m_is_array_isSet) {
        obj.insert(QString("isArray"), ::OpenAPI::toJsonValue(m_is_array));
    }
    if (m_is_available_in_graph_isSet) {
        obj.insert(QString("isAvailableInGraph"), ::OpenAPI::toJsonValue(m_is_available_in_graph));
    }
    if (m_is_enum_isSet) {
        obj.insert(QString("isEnum"), ::OpenAPI::toJsonValue(m_is_enum));
    }
    if (m_is_flag_enum_isSet) {
        obj.insert(QString("isFlagEnum"), ::OpenAPI::toJsonValue(m_is_flag_enum));
    }
    if (m_is_image_isSet) {
        obj.insert(QString("isImage"), ::OpenAPI::toJsonValue(m_is_image));
    }
    if (m_is_localized_string_isSet) {
        obj.insert(QString("isLocalizedString"), ::OpenAPI::toJsonValue(m_is_localized_string));
    }
    if (m_is_name_isSet) {
        obj.insert(QString("isName"), ::OpenAPI::toJsonValue(m_is_name));
    }
    if (m_is_required_isSet) {
        obj.insert(QString("isRequired"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("maxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_property_id_isSet) {
        obj.insert(QString("propertyId"), ::OpenAPI::toJsonValue(m_property_id));
    }
    if (m_schema_item_prop_link_isSet) {
        obj.insert(QString("schemaItemPropLink"), ::OpenAPI::toJsonValue(m_schema_item_prop_link));
    }
    return obj;
}

QString OAIPropertyDefinition::getArrayValueSeparator() const {
    return m_array_value_separator;
}
void OAIPropertyDefinition::setArrayValueSeparator(const QString &array_value_separator) {
    m_array_value_separator = array_value_separator;
    m_array_value_separator_isSet = true;
}

bool OAIPropertyDefinition::is_array_value_separator_Set() const{
    return m_array_value_separator_isSet;
}

bool OAIPropertyDefinition::is_array_value_separator_Valid() const{
    return m_array_value_separator_isValid;
}

QList<OAIDataSourcePrecedence> OAIPropertyDefinition::getDataSourcePrecedenceRules() const {
    return m_data_source_precedence_rules;
}
void OAIPropertyDefinition::setDataSourcePrecedenceRules(const QList<OAIDataSourcePrecedence> &data_source_precedence_rules) {
    m_data_source_precedence_rules = data_source_precedence_rules;
    m_data_source_precedence_rules_isSet = true;
}

bool OAIPropertyDefinition::is_data_source_precedence_rules_Set() const{
    return m_data_source_precedence_rules_isSet;
}

bool OAIPropertyDefinition::is_data_source_precedence_rules_Valid() const{
    return m_data_source_precedence_rules_isValid;
}

QList<OAIProfileEnumValidValuesFormat> OAIPropertyDefinition::getEnumValidValues() const {
    return m_enum_valid_values;
}
void OAIPropertyDefinition::setEnumValidValues(const QList<OAIProfileEnumValidValuesFormat> &enum_valid_values) {
    m_enum_valid_values = enum_valid_values;
    m_enum_valid_values_isSet = true;
}

bool OAIPropertyDefinition::is_enum_valid_values_Set() const{
    return m_enum_valid_values_isSet;
}

bool OAIPropertyDefinition::is_enum_valid_values_Valid() const{
    return m_enum_valid_values_isValid;
}

QString OAIPropertyDefinition::getFieldName() const {
    return m_field_name;
}
void OAIPropertyDefinition::setFieldName(const QString &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAIPropertyDefinition::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAIPropertyDefinition::is_field_name_Valid() const{
    return m_field_name_isValid;
}

QString OAIPropertyDefinition::getFieldType() const {
    return m_field_type;
}
void OAIPropertyDefinition::setFieldType(const QString &field_type) {
    m_field_type = field_type;
    m_field_type_isSet = true;
}

bool OAIPropertyDefinition::is_field_type_Set() const{
    return m_field_type_isSet;
}

bool OAIPropertyDefinition::is_field_type_Valid() const{
    return m_field_type_isValid;
}

bool OAIPropertyDefinition::isIsArray() const {
    return m_is_array;
}
void OAIPropertyDefinition::setIsArray(const bool &is_array) {
    m_is_array = is_array;
    m_is_array_isSet = true;
}

bool OAIPropertyDefinition::is_is_array_Set() const{
    return m_is_array_isSet;
}

bool OAIPropertyDefinition::is_is_array_Valid() const{
    return m_is_array_isValid;
}

bool OAIPropertyDefinition::isIsAvailableInGraph() const {
    return m_is_available_in_graph;
}
void OAIPropertyDefinition::setIsAvailableInGraph(const bool &is_available_in_graph) {
    m_is_available_in_graph = is_available_in_graph;
    m_is_available_in_graph_isSet = true;
}

bool OAIPropertyDefinition::is_is_available_in_graph_Set() const{
    return m_is_available_in_graph_isSet;
}

bool OAIPropertyDefinition::is_is_available_in_graph_Valid() const{
    return m_is_available_in_graph_isValid;
}

bool OAIPropertyDefinition::isIsEnum() const {
    return m_is_enum;
}
void OAIPropertyDefinition::setIsEnum(const bool &is_enum) {
    m_is_enum = is_enum;
    m_is_enum_isSet = true;
}

bool OAIPropertyDefinition::is_is_enum_Set() const{
    return m_is_enum_isSet;
}

bool OAIPropertyDefinition::is_is_enum_Valid() const{
    return m_is_enum_isValid;
}

bool OAIPropertyDefinition::isIsFlagEnum() const {
    return m_is_flag_enum;
}
void OAIPropertyDefinition::setIsFlagEnum(const bool &is_flag_enum) {
    m_is_flag_enum = is_flag_enum;
    m_is_flag_enum_isSet = true;
}

bool OAIPropertyDefinition::is_is_flag_enum_Set() const{
    return m_is_flag_enum_isSet;
}

bool OAIPropertyDefinition::is_is_flag_enum_Valid() const{
    return m_is_flag_enum_isValid;
}

bool OAIPropertyDefinition::isIsImage() const {
    return m_is_image;
}
void OAIPropertyDefinition::setIsImage(const bool &is_image) {
    m_is_image = is_image;
    m_is_image_isSet = true;
}

bool OAIPropertyDefinition::is_is_image_Set() const{
    return m_is_image_isSet;
}

bool OAIPropertyDefinition::is_is_image_Valid() const{
    return m_is_image_isValid;
}

bool OAIPropertyDefinition::isIsLocalizedString() const {
    return m_is_localized_string;
}
void OAIPropertyDefinition::setIsLocalizedString(const bool &is_localized_string) {
    m_is_localized_string = is_localized_string;
    m_is_localized_string_isSet = true;
}

bool OAIPropertyDefinition::is_is_localized_string_Set() const{
    return m_is_localized_string_isSet;
}

bool OAIPropertyDefinition::is_is_localized_string_Valid() const{
    return m_is_localized_string_isValid;
}

bool OAIPropertyDefinition::isIsName() const {
    return m_is_name;
}
void OAIPropertyDefinition::setIsName(const bool &is_name) {
    m_is_name = is_name;
    m_is_name_isSet = true;
}

bool OAIPropertyDefinition::is_is_name_Set() const{
    return m_is_name_isSet;
}

bool OAIPropertyDefinition::is_is_name_Valid() const{
    return m_is_name_isValid;
}

bool OAIPropertyDefinition::isIsRequired() const {
    return m_is_required;
}
void OAIPropertyDefinition::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAIPropertyDefinition::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAIPropertyDefinition::is_is_required_Valid() const{
    return m_is_required_isValid;
}

qint32 OAIPropertyDefinition::getMaxLength() const {
    return m_max_length;
}
void OAIPropertyDefinition::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIPropertyDefinition::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIPropertyDefinition::is_max_length_Valid() const{
    return m_max_length_isValid;
}

QString OAIPropertyDefinition::getPropertyId() const {
    return m_property_id;
}
void OAIPropertyDefinition::setPropertyId(const QString &property_id) {
    m_property_id = property_id;
    m_property_id_isSet = true;
}

bool OAIPropertyDefinition::is_property_id_Set() const{
    return m_property_id_isSet;
}

bool OAIPropertyDefinition::is_property_id_Valid() const{
    return m_property_id_isValid;
}

QString OAIPropertyDefinition::getSchemaItemPropLink() const {
    return m_schema_item_prop_link;
}
void OAIPropertyDefinition::setSchemaItemPropLink(const QString &schema_item_prop_link) {
    m_schema_item_prop_link = schema_item_prop_link;
    m_schema_item_prop_link_isSet = true;
}

bool OAIPropertyDefinition::is_schema_item_prop_link_Set() const{
    return m_schema_item_prop_link_isSet;
}

bool OAIPropertyDefinition::is_schema_item_prop_link_Valid() const{
    return m_schema_item_prop_link_isValid;
}

bool OAIPropertyDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array_value_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_precedence_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enum_valid_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_array_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_available_in_graph_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_flag_enum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_localized_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_item_prop_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_field_name_isValid && m_field_type_isValid && true;
}

} // namespace OpenAPI
