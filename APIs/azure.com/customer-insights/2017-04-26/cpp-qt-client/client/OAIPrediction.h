/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPrediction.h
 *
 * The prediction definition.
 */

#ifndef OAIPrediction_H
#define OAIPrediction_H

#include <QJsonObject>

#include "OAIPrediction_grades_inner.h"
#include "OAIPrediction_mappings.h"
#include "OAIPrediction_systemGeneratedEntities.h"
#include "OAIProvisioningState.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPrediction_grades_inner;
class OAIPrediction_mappings;
class OAIPrediction_systemGeneratedEntities;

class OAIPrediction : public OAIObject {
public:
    OAIPrediction();
    OAIPrediction(QString json);
    ~OAIPrediction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAutoAnalyze() const;
    void setAutoAnalyze(const bool &auto_analyze);
    bool is_auto_analyze_Set() const;
    bool is_auto_analyze_Valid() const;

    QMap<QString, QString> getDescription() const;
    void setDescription(const QMap<QString, QString> &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap<QString, QString> getDisplayName() const;
    void setDisplayName(const QMap<QString, QString> &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QList<OAIPrediction_grades_inner> getGrades() const;
    void setGrades(const QList<OAIPrediction_grades_inner> &grades);
    bool is_grades_Set() const;
    bool is_grades_Valid() const;

    QList<QString> getInvolvedInteractionTypes() const;
    void setInvolvedInteractionTypes(const QList<QString> &involved_interaction_types);
    bool is_involved_interaction_types_Set() const;
    bool is_involved_interaction_types_Valid() const;

    QList<QString> getInvolvedKpiTypes() const;
    void setInvolvedKpiTypes(const QList<QString> &involved_kpi_types);
    bool is_involved_kpi_types_Set() const;
    bool is_involved_kpi_types_Valid() const;

    QList<QString> getInvolvedRelationships() const;
    void setInvolvedRelationships(const QList<QString> &involved_relationships);
    bool is_involved_relationships_Set() const;
    bool is_involved_relationships_Valid() const;

    OAIPrediction_mappings getMappings() const;
    void setMappings(const OAIPrediction_mappings &mappings);
    bool is_mappings_Set() const;
    bool is_mappings_Valid() const;

    QString getNegativeOutcomeExpression() const;
    void setNegativeOutcomeExpression(const QString &negative_outcome_expression);
    bool is_negative_outcome_expression_Set() const;
    bool is_negative_outcome_expression_Valid() const;

    QString getPositiveOutcomeExpression() const;
    void setPositiveOutcomeExpression(const QString &positive_outcome_expression);
    bool is_positive_outcome_expression_Set() const;
    bool is_positive_outcome_expression_Valid() const;

    QString getPredictionName() const;
    void setPredictionName(const QString &prediction_name);
    bool is_prediction_name_Set() const;
    bool is_prediction_name_Valid() const;

    QString getPrimaryProfileType() const;
    void setPrimaryProfileType(const QString &primary_profile_type);
    bool is_primary_profile_type_Set() const;
    bool is_primary_profile_type_Valid() const;

    OAIProvisioningState getProvisioningState() const;
    void setProvisioningState(const OAIProvisioningState &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getScopeExpression() const;
    void setScopeExpression(const QString &scope_expression);
    bool is_scope_expression_Set() const;
    bool is_scope_expression_Valid() const;

    QString getScoreLabel() const;
    void setScoreLabel(const QString &score_label);
    bool is_score_label_Set() const;
    bool is_score_label_Valid() const;

    OAIPrediction_systemGeneratedEntities getSystemGeneratedEntities() const;
    void setSystemGeneratedEntities(const OAIPrediction_systemGeneratedEntities &system_generated_entities);
    bool is_system_generated_entities_Set() const;
    bool is_system_generated_entities_Valid() const;

    QString getTenantId() const;
    void setTenantId(const QString &tenant_id);
    bool is_tenant_id_Set() const;
    bool is_tenant_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_auto_analyze;
    bool m_auto_analyze_isSet;
    bool m_auto_analyze_isValid;

    QMap<QString, QString> m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap<QString, QString> m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QList<OAIPrediction_grades_inner> m_grades;
    bool m_grades_isSet;
    bool m_grades_isValid;

    QList<QString> m_involved_interaction_types;
    bool m_involved_interaction_types_isSet;
    bool m_involved_interaction_types_isValid;

    QList<QString> m_involved_kpi_types;
    bool m_involved_kpi_types_isSet;
    bool m_involved_kpi_types_isValid;

    QList<QString> m_involved_relationships;
    bool m_involved_relationships_isSet;
    bool m_involved_relationships_isValid;

    OAIPrediction_mappings m_mappings;
    bool m_mappings_isSet;
    bool m_mappings_isValid;

    QString m_negative_outcome_expression;
    bool m_negative_outcome_expression_isSet;
    bool m_negative_outcome_expression_isValid;

    QString m_positive_outcome_expression;
    bool m_positive_outcome_expression_isSet;
    bool m_positive_outcome_expression_isValid;

    QString m_prediction_name;
    bool m_prediction_name_isSet;
    bool m_prediction_name_isValid;

    QString m_primary_profile_type;
    bool m_primary_profile_type_isSet;
    bool m_primary_profile_type_isValid;

    OAIProvisioningState m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_scope_expression;
    bool m_scope_expression_isSet;
    bool m_scope_expression_isValid;

    QString m_score_label;
    bool m_score_label_isSet;
    bool m_score_label_isValid;

    OAIPrediction_systemGeneratedEntities m_system_generated_entities;
    bool m_system_generated_entities_isSet;
    bool m_system_generated_entities_isValid;

    QString m_tenant_id;
    bool m_tenant_id_isSet;
    bool m_tenant_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPrediction)

#endif // OAIPrediction_H
