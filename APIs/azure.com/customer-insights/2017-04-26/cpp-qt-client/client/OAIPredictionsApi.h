/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPredictionsApi_H
#define OAI_OAIPredictionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPredictionListResult.h"
#include "OAIPredictionModelStatus.h"
#include "OAIPredictionResourceFormat.h"
#include "OAIPredictionTrainingResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPredictionsApi : public QObject {
    Q_OBJECT

public:
    OAIPredictionsApi(const int timeOut = 0);
    ~OAIPredictionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  prediction_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPredictionResourceFormat [required]
    */
    virtual void predictionsCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &prediction_name, const QString &api_version, const QString &subscription_id, const OAIPredictionResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  prediction_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void predictionsDelete(const QString &resource_group_name, const QString &hub_name, const QString &prediction_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  prediction_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void predictionsGet(const QString &resource_group_name, const QString &hub_name, const QString &prediction_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  prediction_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void predictionsGetModelStatus(const QString &resource_group_name, const QString &hub_name, const QString &prediction_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  prediction_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void predictionsGetTrainingResults(const QString &resource_group_name, const QString &hub_name, const QString &prediction_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void predictionsListByHub(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  prediction_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPredictionModelStatus [required]
    */
    virtual void predictionsModelStatus(const QString &resource_group_name, const QString &hub_name, const QString &prediction_name, const QString &api_version, const QString &subscription_id, const OAIPredictionModelStatus &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void predictionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void predictionsDeleteCallback(OAIHttpRequestWorker *worker);
    void predictionsGetCallback(OAIHttpRequestWorker *worker);
    void predictionsGetModelStatusCallback(OAIHttpRequestWorker *worker);
    void predictionsGetTrainingResultsCallback(OAIHttpRequestWorker *worker);
    void predictionsListByHubCallback(OAIHttpRequestWorker *worker);
    void predictionsModelStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void predictionsCreateOrUpdateSignal(OAIPredictionResourceFormat summary);
    void predictionsDeleteSignal();
    void predictionsGetSignal(OAIPredictionResourceFormat summary);
    void predictionsGetModelStatusSignal(OAIPredictionModelStatus summary);
    void predictionsGetTrainingResultsSignal(OAIPredictionTrainingResults summary);
    void predictionsListByHubSignal(OAIPredictionListResult summary);
    void predictionsModelStatusSignal();


    void predictionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPredictionResourceFormat summary);
    void predictionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void predictionsGetSignalFull(OAIHttpRequestWorker *worker, OAIPredictionResourceFormat summary);
    void predictionsGetModelStatusSignalFull(OAIHttpRequestWorker *worker, OAIPredictionModelStatus summary);
    void predictionsGetTrainingResultsSignalFull(OAIHttpRequestWorker *worker, OAIPredictionTrainingResults summary);
    void predictionsListByHubSignalFull(OAIHttpRequestWorker *worker, OAIPredictionListResult summary);
    void predictionsModelStatusSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use predictionsCreateOrUpdateSignalError() instead")
    void predictionsCreateOrUpdateSignalE(OAIPredictionResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsCreateOrUpdateSignalError(OAIPredictionResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsDeleteSignalError() instead")
    void predictionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsGetSignalError() instead")
    void predictionsGetSignalE(OAIPredictionResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsGetSignalError(OAIPredictionResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsGetModelStatusSignalError() instead")
    void predictionsGetModelStatusSignalE(OAIPredictionModelStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsGetModelStatusSignalError(OAIPredictionModelStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsGetTrainingResultsSignalError() instead")
    void predictionsGetTrainingResultsSignalE(OAIPredictionTrainingResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsGetTrainingResultsSignalError(OAIPredictionTrainingResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsListByHubSignalError() instead")
    void predictionsListByHubSignalE(OAIPredictionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsListByHubSignalError(OAIPredictionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsModelStatusSignalError() instead")
    void predictionsModelStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsModelStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use predictionsCreateOrUpdateSignalErrorFull() instead")
    void predictionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsDeleteSignalErrorFull() instead")
    void predictionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsGetSignalErrorFull() instead")
    void predictionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsGetModelStatusSignalErrorFull() instead")
    void predictionsGetModelStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsGetModelStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsGetTrainingResultsSignalErrorFull() instead")
    void predictionsGetTrainingResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsGetTrainingResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsListByHubSignalErrorFull() instead")
    void predictionsListByHubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsListByHubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use predictionsModelStatusSignalErrorFull() instead")
    void predictionsModelStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void predictionsModelStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
