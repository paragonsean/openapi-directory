/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationPolicy::OAIAuthorizationPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationPolicy::OAIAuthorizationPolicy() {
    this->initializeModel();
}

OAIAuthorizationPolicy::~OAIAuthorizationPolicy() {}

void OAIAuthorizationPolicy::initializeModel() {

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_policy_name_isSet = false;
    m_policy_name_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_secondary_key_isSet = false;
    m_secondary_key_isValid = false;
}

void OAIAuthorizationPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationPolicy::fromJsonObject(QJsonObject json) {

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_policy_name_isValid = ::OpenAPI::fromJsonValue(m_policy_name, json[QString("policyName")]);
    m_policy_name_isSet = !json[QString("policyName")].isNull() && m_policy_name_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_secondary_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_key, json[QString("secondaryKey")]);
    m_secondary_key_isSet = !json[QString("secondaryKey")].isNull() && m_secondary_key_isValid;
}

QString OAIAuthorizationPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_policy_name_isSet) {
        obj.insert(QString("policyName"), ::OpenAPI::toJsonValue(m_policy_name));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_secondary_key_isSet) {
        obj.insert(QString("secondaryKey"), ::OpenAPI::toJsonValue(m_secondary_key));
    }
    return obj;
}

QSet<OAIPermissionTypes> OAIAuthorizationPolicy::getPermissions() const {
    return m_permissions;
}
void OAIAuthorizationPolicy::setPermissions(const QSet<OAIPermissionTypes> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIAuthorizationPolicy::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIAuthorizationPolicy::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIAuthorizationPolicy::getPolicyName() const {
    return m_policy_name;
}
void OAIAuthorizationPolicy::setPolicyName(const QString &policy_name) {
    m_policy_name = policy_name;
    m_policy_name_isSet = true;
}

bool OAIAuthorizationPolicy::is_policy_name_Set() const{
    return m_policy_name_isSet;
}

bool OAIAuthorizationPolicy::is_policy_name_Valid() const{
    return m_policy_name_isValid;
}

QString OAIAuthorizationPolicy::getPrimaryKey() const {
    return m_primary_key;
}
void OAIAuthorizationPolicy::setPrimaryKey(const QString &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAIAuthorizationPolicy::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAIAuthorizationPolicy::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QString OAIAuthorizationPolicy::getSecondaryKey() const {
    return m_secondary_key;
}
void OAIAuthorizationPolicy::setSecondaryKey(const QString &secondary_key) {
    m_secondary_key = secondary_key;
    m_secondary_key_isSet = true;
}

bool OAIAuthorizationPolicy::is_secondary_key_Set() const{
    return m_secondary_key_isSet;
}

bool OAIAuthorizationPolicy::is_secondary_key_Valid() const{
    return m_secondary_key_isValid;
}

bool OAIAuthorizationPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_permissions_isValid && true;
}

} // namespace OpenAPI
