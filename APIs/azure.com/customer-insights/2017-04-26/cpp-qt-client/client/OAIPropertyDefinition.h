/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPropertyDefinition.h
 *
 * Property definition.
 */

#ifndef OAIPropertyDefinition_H
#define OAIPropertyDefinition_H

#include <QJsonObject>

#include "OAIDataSourcePrecedence.h"
#include "OAIProfileEnumValidValuesFormat.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataSourcePrecedence;
class OAIProfileEnumValidValuesFormat;

class OAIPropertyDefinition : public OAIObject {
public:
    OAIPropertyDefinition();
    OAIPropertyDefinition(QString json);
    ~OAIPropertyDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArrayValueSeparator() const;
    void setArrayValueSeparator(const QString &array_value_separator);
    bool is_array_value_separator_Set() const;
    bool is_array_value_separator_Valid() const;

    QList<OAIDataSourcePrecedence> getDataSourcePrecedenceRules() const;
    void setDataSourcePrecedenceRules(const QList<OAIDataSourcePrecedence> &data_source_precedence_rules);
    bool is_data_source_precedence_rules_Set() const;
    bool is_data_source_precedence_rules_Valid() const;

    QList<OAIProfileEnumValidValuesFormat> getEnumValidValues() const;
    void setEnumValidValues(const QList<OAIProfileEnumValidValuesFormat> &enum_valid_values);
    bool is_enum_valid_values_Set() const;
    bool is_enum_valid_values_Valid() const;

    QString getFieldName() const;
    void setFieldName(const QString &field_name);
    bool is_field_name_Set() const;
    bool is_field_name_Valid() const;

    QString getFieldType() const;
    void setFieldType(const QString &field_type);
    bool is_field_type_Set() const;
    bool is_field_type_Valid() const;

    bool isIsArray() const;
    void setIsArray(const bool &is_array);
    bool is_is_array_Set() const;
    bool is_is_array_Valid() const;

    bool isIsAvailableInGraph() const;
    void setIsAvailableInGraph(const bool &is_available_in_graph);
    bool is_is_available_in_graph_Set() const;
    bool is_is_available_in_graph_Valid() const;

    bool isIsEnum() const;
    void setIsEnum(const bool &is_enum);
    bool is_is_enum_Set() const;
    bool is_is_enum_Valid() const;

    bool isIsFlagEnum() const;
    void setIsFlagEnum(const bool &is_flag_enum);
    bool is_is_flag_enum_Set() const;
    bool is_is_flag_enum_Valid() const;

    bool isIsImage() const;
    void setIsImage(const bool &is_image);
    bool is_is_image_Set() const;
    bool is_is_image_Valid() const;

    bool isIsLocalizedString() const;
    void setIsLocalizedString(const bool &is_localized_string);
    bool is_is_localized_string_Set() const;
    bool is_is_localized_string_Valid() const;

    bool isIsName() const;
    void setIsName(const bool &is_name);
    bool is_is_name_Set() const;
    bool is_is_name_Valid() const;

    bool isIsRequired() const;
    void setIsRequired(const bool &is_required);
    bool is_is_required_Set() const;
    bool is_is_required_Valid() const;

    qint32 getMaxLength() const;
    void setMaxLength(const qint32 &max_length);
    bool is_max_length_Set() const;
    bool is_max_length_Valid() const;

    QString getPropertyId() const;
    void setPropertyId(const QString &property_id);
    bool is_property_id_Set() const;
    bool is_property_id_Valid() const;

    QString getSchemaItemPropLink() const;
    void setSchemaItemPropLink(const QString &schema_item_prop_link);
    bool is_schema_item_prop_link_Set() const;
    bool is_schema_item_prop_link_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_array_value_separator;
    bool m_array_value_separator_isSet;
    bool m_array_value_separator_isValid;

    QList<OAIDataSourcePrecedence> m_data_source_precedence_rules;
    bool m_data_source_precedence_rules_isSet;
    bool m_data_source_precedence_rules_isValid;

    QList<OAIProfileEnumValidValuesFormat> m_enum_valid_values;
    bool m_enum_valid_values_isSet;
    bool m_enum_valid_values_isValid;

    QString m_field_name;
    bool m_field_name_isSet;
    bool m_field_name_isValid;

    QString m_field_type;
    bool m_field_type_isSet;
    bool m_field_type_isValid;

    bool m_is_array;
    bool m_is_array_isSet;
    bool m_is_array_isValid;

    bool m_is_available_in_graph;
    bool m_is_available_in_graph_isSet;
    bool m_is_available_in_graph_isValid;

    bool m_is_enum;
    bool m_is_enum_isSet;
    bool m_is_enum_isValid;

    bool m_is_flag_enum;
    bool m_is_flag_enum_isSet;
    bool m_is_flag_enum_isValid;

    bool m_is_image;
    bool m_is_image_isSet;
    bool m_is_image_isValid;

    bool m_is_localized_string;
    bool m_is_localized_string_isSet;
    bool m_is_localized_string_isValid;

    bool m_is_name;
    bool m_is_name_isSet;
    bool m_is_name_isValid;

    bool m_is_required;
    bool m_is_required_isSet;
    bool m_is_required_isValid;

    qint32 m_max_length;
    bool m_max_length_isSet;
    bool m_max_length_isValid;

    QString m_property_id;
    bool m_property_id_isSet;
    bool m_property_id_isValid;

    QString m_schema_item_prop_link;
    bool m_schema_item_prop_link_isSet;
    bool m_schema_item_prop_link_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPropertyDefinition)

#endif // OAIPropertyDefinition_H
