/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetImageUploadUrlInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetImageUploadUrlInput::OAIGetImageUploadUrlInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetImageUploadUrlInput::OAIGetImageUploadUrlInput() {
    this->initializeModel();
}

OAIGetImageUploadUrlInput::~OAIGetImageUploadUrlInput() {}

void OAIGetImageUploadUrlInput::initializeModel() {

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_entity_type_name_isSet = false;
    m_entity_type_name_isValid = false;

    m_relative_path_isSet = false;
    m_relative_path_isValid = false;
}

void OAIGetImageUploadUrlInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetImageUploadUrlInput::fromJsonObject(QJsonObject json) {

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_entity_type_name_isValid = ::OpenAPI::fromJsonValue(m_entity_type_name, json[QString("entityTypeName")]);
    m_entity_type_name_isSet = !json[QString("entityTypeName")].isNull() && m_entity_type_name_isValid;

    m_relative_path_isValid = ::OpenAPI::fromJsonValue(m_relative_path, json[QString("relativePath")]);
    m_relative_path_isSet = !json[QString("relativePath")].isNull() && m_relative_path_isValid;
}

QString OAIGetImageUploadUrlInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetImageUploadUrlInput::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_entity_type_name_isSet) {
        obj.insert(QString("entityTypeName"), ::OpenAPI::toJsonValue(m_entity_type_name));
    }
    if (m_relative_path_isSet) {
        obj.insert(QString("relativePath"), ::OpenAPI::toJsonValue(m_relative_path));
    }
    return obj;
}

QString OAIGetImageUploadUrlInput::getEntityType() const {
    return m_entity_type;
}
void OAIGetImageUploadUrlInput::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIGetImageUploadUrlInput::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIGetImageUploadUrlInput::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIGetImageUploadUrlInput::getEntityTypeName() const {
    return m_entity_type_name;
}
void OAIGetImageUploadUrlInput::setEntityTypeName(const QString &entity_type_name) {
    m_entity_type_name = entity_type_name;
    m_entity_type_name_isSet = true;
}

bool OAIGetImageUploadUrlInput::is_entity_type_name_Set() const{
    return m_entity_type_name_isSet;
}

bool OAIGetImageUploadUrlInput::is_entity_type_name_Valid() const{
    return m_entity_type_name_isValid;
}

QString OAIGetImageUploadUrlInput::getRelativePath() const {
    return m_relative_path;
}
void OAIGetImageUploadUrlInput::setRelativePath(const QString &relative_path) {
    m_relative_path = relative_path;
    m_relative_path_isSet = true;
}

bool OAIGetImageUploadUrlInput::is_relative_path_Set() const{
    return m_relative_path_isSet;
}

bool OAIGetImageUploadUrlInput::is_relative_path_Valid() const{
    return m_relative_path_isValid;
}

bool OAIGetImageUploadUrlInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetImageUploadUrlInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
