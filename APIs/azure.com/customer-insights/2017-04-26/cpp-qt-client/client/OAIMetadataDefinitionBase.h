/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetadataDefinitionBase.h
 *
 * The Metadata definition base.
 */

#ifndef OAIMetadataDefinitionBase_H
#define OAIMetadataDefinitionBase_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMetadataDefinitionBase : public OAIObject {
public:
    OAIMetadataDefinitionBase();
    OAIMetadataDefinitionBase(QString json);
    ~OAIMetadataDefinitionBase() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QList<QString>> getAttributes() const;
    void setAttributes(const QMap<QString, QList<QString>> &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QMap<QString, QString> getDescription() const;
    void setDescription(const QMap<QString, QString> &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap<QString, QString> getDisplayName() const;
    void setDisplayName(const QMap<QString, QString> &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getLargeImage() const;
    void setLargeImage(const QString &large_image);
    bool is_large_image_Set() const;
    bool is_large_image_Valid() const;

    QMap<QString, QMap<QString, QString>> getLocalizedAttributes() const;
    void setLocalizedAttributes(const QMap<QString, QMap<QString, QString>> &localized_attributes);
    bool is_localized_attributes_Set() const;
    bool is_localized_attributes_Valid() const;

    QString getMediumImage() const;
    void setMediumImage(const QString &medium_image);
    bool is_medium_image_Set() const;
    bool is_medium_image_Valid() const;

    QString getSmallImage() const;
    void setSmallImage(const QString &small_image);
    bool is_small_image_Set() const;
    bool is_small_image_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QList<QString>> m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QMap<QString, QString> m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap<QString, QString> m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_large_image;
    bool m_large_image_isSet;
    bool m_large_image_isValid;

    QMap<QString, QMap<QString, QString>> m_localized_attributes;
    bool m_localized_attributes_isSet;
    bool m_localized_attributes_isValid;

    QString m_medium_image;
    bool m_medium_image_isSet;
    bool m_medium_image_isValid;

    QString m_small_image;
    bool m_small_image_isSet;
    bool m_small_image_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetadataDefinitionBase)

#endif // OAIMetadataDefinitionBase_H
