/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParticipantPropertyReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParticipantPropertyReference::OAIParticipantPropertyReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParticipantPropertyReference::OAIParticipantPropertyReference() {
    this->initializeModel();
}

OAIParticipantPropertyReference::~OAIParticipantPropertyReference() {}

void OAIParticipantPropertyReference::initializeModel() {

    m_source_property_name_isSet = false;
    m_source_property_name_isValid = false;

    m_target_property_name_isSet = false;
    m_target_property_name_isValid = false;
}

void OAIParticipantPropertyReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParticipantPropertyReference::fromJsonObject(QJsonObject json) {

    m_source_property_name_isValid = ::OpenAPI::fromJsonValue(m_source_property_name, json[QString("sourcePropertyName")]);
    m_source_property_name_isSet = !json[QString("sourcePropertyName")].isNull() && m_source_property_name_isValid;

    m_target_property_name_isValid = ::OpenAPI::fromJsonValue(m_target_property_name, json[QString("targetPropertyName")]);
    m_target_property_name_isSet = !json[QString("targetPropertyName")].isNull() && m_target_property_name_isValid;
}

QString OAIParticipantPropertyReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParticipantPropertyReference::asJsonObject() const {
    QJsonObject obj;
    if (m_source_property_name_isSet) {
        obj.insert(QString("sourcePropertyName"), ::OpenAPI::toJsonValue(m_source_property_name));
    }
    if (m_target_property_name_isSet) {
        obj.insert(QString("targetPropertyName"), ::OpenAPI::toJsonValue(m_target_property_name));
    }
    return obj;
}

QString OAIParticipantPropertyReference::getSourcePropertyName() const {
    return m_source_property_name;
}
void OAIParticipantPropertyReference::setSourcePropertyName(const QString &source_property_name) {
    m_source_property_name = source_property_name;
    m_source_property_name_isSet = true;
}

bool OAIParticipantPropertyReference::is_source_property_name_Set() const{
    return m_source_property_name_isSet;
}

bool OAIParticipantPropertyReference::is_source_property_name_Valid() const{
    return m_source_property_name_isValid;
}

QString OAIParticipantPropertyReference::getTargetPropertyName() const {
    return m_target_property_name;
}
void OAIParticipantPropertyReference::setTargetPropertyName(const QString &target_property_name) {
    m_target_property_name = target_property_name;
    m_target_property_name_isSet = true;
}

bool OAIParticipantPropertyReference::is_target_property_name_Set() const{
    return m_target_property_name_isSet;
}

bool OAIParticipantPropertyReference::is_target_property_name_Valid() const{
    return m_target_property_name_isValid;
}

bool OAIParticipantPropertyReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParticipantPropertyReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_property_name_isValid && m_target_property_name_isValid && true;
}

} // namespace OpenAPI
