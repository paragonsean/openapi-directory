/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorMapping::OAIConnectorMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorMapping::OAIConnectorMapping() {
    this->initializeModel();
}

OAIConnectorMapping::~OAIConnectorMapping() {}

void OAIConnectorMapping::initializeModel() {

    m_connector_mapping_name_isSet = false;
    m_connector_mapping_name_isValid = false;

    m_connector_name_isSet = false;
    m_connector_name_isValid = false;

    m_connector_type_isSet = false;
    m_connector_type_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_data_format_id_isSet = false;
    m_data_format_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_entity_type_name_isSet = false;
    m_entity_type_name_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_mapping_properties_isSet = false;
    m_mapping_properties_isValid = false;

    m_next_run_time_isSet = false;
    m_next_run_time_isValid = false;

    m_run_id_isSet = false;
    m_run_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIConnectorMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorMapping::fromJsonObject(QJsonObject json) {

    m_connector_mapping_name_isValid = ::OpenAPI::fromJsonValue(m_connector_mapping_name, json[QString("connectorMappingName")]);
    m_connector_mapping_name_isSet = !json[QString("connectorMappingName")].isNull() && m_connector_mapping_name_isValid;

    m_connector_name_isValid = ::OpenAPI::fromJsonValue(m_connector_name, json[QString("connectorName")]);
    m_connector_name_isSet = !json[QString("connectorName")].isNull() && m_connector_name_isValid;

    m_connector_type_isValid = ::OpenAPI::fromJsonValue(m_connector_type, json[QString("connectorType")]);
    m_connector_type_isSet = !json[QString("connectorType")].isNull() && m_connector_type_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_data_format_id_isValid = ::OpenAPI::fromJsonValue(m_data_format_id, json[QString("dataFormatId")]);
    m_data_format_id_isSet = !json[QString("dataFormatId")].isNull() && m_data_format_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_entity_type_name_isValid = ::OpenAPI::fromJsonValue(m_entity_type_name, json[QString("entityTypeName")]);
    m_entity_type_name_isSet = !json[QString("entityTypeName")].isNull() && m_entity_type_name_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_mapping_properties_isValid = ::OpenAPI::fromJsonValue(m_mapping_properties, json[QString("mappingProperties")]);
    m_mapping_properties_isSet = !json[QString("mappingProperties")].isNull() && m_mapping_properties_isValid;

    m_next_run_time_isValid = ::OpenAPI::fromJsonValue(m_next_run_time, json[QString("nextRunTime")]);
    m_next_run_time_isSet = !json[QString("nextRunTime")].isNull() && m_next_run_time_isValid;

    m_run_id_isValid = ::OpenAPI::fromJsonValue(m_run_id, json[QString("runId")]);
    m_run_id_isSet = !json[QString("runId")].isNull() && m_run_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIConnectorMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_mapping_name_isSet) {
        obj.insert(QString("connectorMappingName"), ::OpenAPI::toJsonValue(m_connector_mapping_name));
    }
    if (m_connector_name_isSet) {
        obj.insert(QString("connectorName"), ::OpenAPI::toJsonValue(m_connector_name));
    }
    if (m_connector_type.isSet()) {
        obj.insert(QString("connectorType"), ::OpenAPI::toJsonValue(m_connector_type));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_data_format_id_isSet) {
        obj.insert(QString("dataFormatId"), ::OpenAPI::toJsonValue(m_data_format_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_entity_type_name_isSet) {
        obj.insert(QString("entityTypeName"), ::OpenAPI::toJsonValue(m_entity_type_name));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_mapping_properties.isSet()) {
        obj.insert(QString("mappingProperties"), ::OpenAPI::toJsonValue(m_mapping_properties));
    }
    if (m_next_run_time_isSet) {
        obj.insert(QString("nextRunTime"), ::OpenAPI::toJsonValue(m_next_run_time));
    }
    if (m_run_id_isSet) {
        obj.insert(QString("runId"), ::OpenAPI::toJsonValue(m_run_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIConnectorMapping::getConnectorMappingName() const {
    return m_connector_mapping_name;
}
void OAIConnectorMapping::setConnectorMappingName(const QString &connector_mapping_name) {
    m_connector_mapping_name = connector_mapping_name;
    m_connector_mapping_name_isSet = true;
}

bool OAIConnectorMapping::is_connector_mapping_name_Set() const{
    return m_connector_mapping_name_isSet;
}

bool OAIConnectorMapping::is_connector_mapping_name_Valid() const{
    return m_connector_mapping_name_isValid;
}

QString OAIConnectorMapping::getConnectorName() const {
    return m_connector_name;
}
void OAIConnectorMapping::setConnectorName(const QString &connector_name) {
    m_connector_name = connector_name;
    m_connector_name_isSet = true;
}

bool OAIConnectorMapping::is_connector_name_Set() const{
    return m_connector_name_isSet;
}

bool OAIConnectorMapping::is_connector_name_Valid() const{
    return m_connector_name_isValid;
}

OAIConnectorType OAIConnectorMapping::getConnectorType() const {
    return m_connector_type;
}
void OAIConnectorMapping::setConnectorType(const OAIConnectorType &connector_type) {
    m_connector_type = connector_type;
    m_connector_type_isSet = true;
}

bool OAIConnectorMapping::is_connector_type_Set() const{
    return m_connector_type_isSet;
}

bool OAIConnectorMapping::is_connector_type_Valid() const{
    return m_connector_type_isValid;
}

QDateTime OAIConnectorMapping::getCreated() const {
    return m_created;
}
void OAIConnectorMapping::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIConnectorMapping::is_created_Set() const{
    return m_created_isSet;
}

bool OAIConnectorMapping::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIConnectorMapping::getDataFormatId() const {
    return m_data_format_id;
}
void OAIConnectorMapping::setDataFormatId(const QString &data_format_id) {
    m_data_format_id = data_format_id;
    m_data_format_id_isSet = true;
}

bool OAIConnectorMapping::is_data_format_id_Set() const{
    return m_data_format_id_isSet;
}

bool OAIConnectorMapping::is_data_format_id_Valid() const{
    return m_data_format_id_isValid;
}

QString OAIConnectorMapping::getDescription() const {
    return m_description;
}
void OAIConnectorMapping::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConnectorMapping::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConnectorMapping::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIConnectorMapping::getDisplayName() const {
    return m_display_name;
}
void OAIConnectorMapping::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConnectorMapping::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConnectorMapping::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIConnectorMapping::getEntityType() const {
    return m_entity_type;
}
void OAIConnectorMapping::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIConnectorMapping::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIConnectorMapping::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIConnectorMapping::getEntityTypeName() const {
    return m_entity_type_name;
}
void OAIConnectorMapping::setEntityTypeName(const QString &entity_type_name) {
    m_entity_type_name = entity_type_name;
    m_entity_type_name_isSet = true;
}

bool OAIConnectorMapping::is_entity_type_name_Set() const{
    return m_entity_type_name_isSet;
}

bool OAIConnectorMapping::is_entity_type_name_Valid() const{
    return m_entity_type_name_isValid;
}

QDateTime OAIConnectorMapping::getLastModified() const {
    return m_last_modified;
}
void OAIConnectorMapping::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIConnectorMapping::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIConnectorMapping::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

OAIConnectorMappingProperties OAIConnectorMapping::getMappingProperties() const {
    return m_mapping_properties;
}
void OAIConnectorMapping::setMappingProperties(const OAIConnectorMappingProperties &mapping_properties) {
    m_mapping_properties = mapping_properties;
    m_mapping_properties_isSet = true;
}

bool OAIConnectorMapping::is_mapping_properties_Set() const{
    return m_mapping_properties_isSet;
}

bool OAIConnectorMapping::is_mapping_properties_Valid() const{
    return m_mapping_properties_isValid;
}

QDateTime OAIConnectorMapping::getNextRunTime() const {
    return m_next_run_time;
}
void OAIConnectorMapping::setNextRunTime(const QDateTime &next_run_time) {
    m_next_run_time = next_run_time;
    m_next_run_time_isSet = true;
}

bool OAIConnectorMapping::is_next_run_time_Set() const{
    return m_next_run_time_isSet;
}

bool OAIConnectorMapping::is_next_run_time_Valid() const{
    return m_next_run_time_isValid;
}

QString OAIConnectorMapping::getRunId() const {
    return m_run_id;
}
void OAIConnectorMapping::setRunId(const QString &run_id) {
    m_run_id = run_id;
    m_run_id_isSet = true;
}

bool OAIConnectorMapping::is_run_id_Set() const{
    return m_run_id_isSet;
}

bool OAIConnectorMapping::is_run_id_Valid() const{
    return m_run_id_isValid;
}

QString OAIConnectorMapping::getState() const {
    return m_state;
}
void OAIConnectorMapping::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConnectorMapping::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConnectorMapping::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIConnectorMapping::getTenantId() const {
    return m_tenant_id;
}
void OAIConnectorMapping::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIConnectorMapping::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIConnectorMapping::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIConnectorMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_mapping_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_run_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entity_type_isValid && m_entity_type_name_isValid && m_mapping_properties_isValid && true;
}

} // namespace OpenAPI
