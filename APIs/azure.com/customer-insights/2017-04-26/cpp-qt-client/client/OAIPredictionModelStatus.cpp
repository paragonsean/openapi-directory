/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictionModelStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictionModelStatus::OAIPredictionModelStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictionModelStatus::OAIPredictionModelStatus() {
    this->initializeModel();
}

OAIPredictionModelStatus::~OAIPredictionModelStatus() {}

void OAIPredictionModelStatus::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_model_version_isSet = false;
    m_model_version_isValid = false;

    m_prediction_guid_id_isSet = false;
    m_prediction_guid_id_isValid = false;

    m_prediction_name_isSet = false;
    m_prediction_name_isValid = false;

    m_signals_used_isSet = false;
    m_signals_used_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_test_set_count_isSet = false;
    m_test_set_count_isValid = false;

    m_training_accuracy_isSet = false;
    m_training_accuracy_isValid = false;

    m_training_set_count_isSet = false;
    m_training_set_count_isValid = false;

    m_validation_set_count_isSet = false;
    m_validation_set_count_isValid = false;
}

void OAIPredictionModelStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictionModelStatus::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("modelVersion")]);
    m_model_version_isSet = !json[QString("modelVersion")].isNull() && m_model_version_isValid;

    m_prediction_guid_id_isValid = ::OpenAPI::fromJsonValue(m_prediction_guid_id, json[QString("predictionGuidId")]);
    m_prediction_guid_id_isSet = !json[QString("predictionGuidId")].isNull() && m_prediction_guid_id_isValid;

    m_prediction_name_isValid = ::OpenAPI::fromJsonValue(m_prediction_name, json[QString("predictionName")]);
    m_prediction_name_isSet = !json[QString("predictionName")].isNull() && m_prediction_name_isValid;

    m_signals_used_isValid = ::OpenAPI::fromJsonValue(m_signals_used, json[QString("signalsUsed")]);
    m_signals_used_isSet = !json[QString("signalsUsed")].isNull() && m_signals_used_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_test_set_count_isValid = ::OpenAPI::fromJsonValue(m_test_set_count, json[QString("testSetCount")]);
    m_test_set_count_isSet = !json[QString("testSetCount")].isNull() && m_test_set_count_isValid;

    m_training_accuracy_isValid = ::OpenAPI::fromJsonValue(m_training_accuracy, json[QString("trainingAccuracy")]);
    m_training_accuracy_isSet = !json[QString("trainingAccuracy")].isNull() && m_training_accuracy_isValid;

    m_training_set_count_isValid = ::OpenAPI::fromJsonValue(m_training_set_count, json[QString("trainingSetCount")]);
    m_training_set_count_isSet = !json[QString("trainingSetCount")].isNull() && m_training_set_count_isValid;

    m_validation_set_count_isValid = ::OpenAPI::fromJsonValue(m_validation_set_count, json[QString("validationSetCount")]);
    m_validation_set_count_isSet = !json[QString("validationSetCount")].isNull() && m_validation_set_count_isValid;
}

QString OAIPredictionModelStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictionModelStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_model_version_isSet) {
        obj.insert(QString("modelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    if (m_prediction_guid_id_isSet) {
        obj.insert(QString("predictionGuidId"), ::OpenAPI::toJsonValue(m_prediction_guid_id));
    }
    if (m_prediction_name_isSet) {
        obj.insert(QString("predictionName"), ::OpenAPI::toJsonValue(m_prediction_name));
    }
    if (m_signals_used_isSet) {
        obj.insert(QString("signalsUsed"), ::OpenAPI::toJsonValue(m_signals_used));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_test_set_count_isSet) {
        obj.insert(QString("testSetCount"), ::OpenAPI::toJsonValue(m_test_set_count));
    }
    if (m_training_accuracy_isSet) {
        obj.insert(QString("trainingAccuracy"), ::OpenAPI::toJsonValue(m_training_accuracy));
    }
    if (m_training_set_count_isSet) {
        obj.insert(QString("trainingSetCount"), ::OpenAPI::toJsonValue(m_training_set_count));
    }
    if (m_validation_set_count_isSet) {
        obj.insert(QString("validationSetCount"), ::OpenAPI::toJsonValue(m_validation_set_count));
    }
    return obj;
}

QString OAIPredictionModelStatus::getMessage() const {
    return m_message;
}
void OAIPredictionModelStatus::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPredictionModelStatus::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPredictionModelStatus::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIPredictionModelStatus::getModelVersion() const {
    return m_model_version;
}
void OAIPredictionModelStatus::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAIPredictionModelStatus::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAIPredictionModelStatus::is_model_version_Valid() const{
    return m_model_version_isValid;
}

QString OAIPredictionModelStatus::getPredictionGuidId() const {
    return m_prediction_guid_id;
}
void OAIPredictionModelStatus::setPredictionGuidId(const QString &prediction_guid_id) {
    m_prediction_guid_id = prediction_guid_id;
    m_prediction_guid_id_isSet = true;
}

bool OAIPredictionModelStatus::is_prediction_guid_id_Set() const{
    return m_prediction_guid_id_isSet;
}

bool OAIPredictionModelStatus::is_prediction_guid_id_Valid() const{
    return m_prediction_guid_id_isValid;
}

QString OAIPredictionModelStatus::getPredictionName() const {
    return m_prediction_name;
}
void OAIPredictionModelStatus::setPredictionName(const QString &prediction_name) {
    m_prediction_name = prediction_name;
    m_prediction_name_isSet = true;
}

bool OAIPredictionModelStatus::is_prediction_name_Set() const{
    return m_prediction_name_isSet;
}

bool OAIPredictionModelStatus::is_prediction_name_Valid() const{
    return m_prediction_name_isValid;
}

qint32 OAIPredictionModelStatus::getSignalsUsed() const {
    return m_signals_used;
}
void OAIPredictionModelStatus::setSignalsUsed(const qint32 &signals_used) {
    m_signals_used = signals_used;
    m_signals_used_isSet = true;
}

bool OAIPredictionModelStatus::is_signals_used_Set() const{
    return m_signals_used_isSet;
}

bool OAIPredictionModelStatus::is_signals_used_Valid() const{
    return m_signals_used_isValid;
}

QString OAIPredictionModelStatus::getStatus() const {
    return m_status;
}
void OAIPredictionModelStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPredictionModelStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPredictionModelStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPredictionModelStatus::getTenantId() const {
    return m_tenant_id;
}
void OAIPredictionModelStatus::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIPredictionModelStatus::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIPredictionModelStatus::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

qint32 OAIPredictionModelStatus::getTestSetCount() const {
    return m_test_set_count;
}
void OAIPredictionModelStatus::setTestSetCount(const qint32 &test_set_count) {
    m_test_set_count = test_set_count;
    m_test_set_count_isSet = true;
}

bool OAIPredictionModelStatus::is_test_set_count_Set() const{
    return m_test_set_count_isSet;
}

bool OAIPredictionModelStatus::is_test_set_count_Valid() const{
    return m_test_set_count_isValid;
}

qint32 OAIPredictionModelStatus::getTrainingAccuracy() const {
    return m_training_accuracy;
}
void OAIPredictionModelStatus::setTrainingAccuracy(const qint32 &training_accuracy) {
    m_training_accuracy = training_accuracy;
    m_training_accuracy_isSet = true;
}

bool OAIPredictionModelStatus::is_training_accuracy_Set() const{
    return m_training_accuracy_isSet;
}

bool OAIPredictionModelStatus::is_training_accuracy_Valid() const{
    return m_training_accuracy_isValid;
}

qint32 OAIPredictionModelStatus::getTrainingSetCount() const {
    return m_training_set_count;
}
void OAIPredictionModelStatus::setTrainingSetCount(const qint32 &training_set_count) {
    m_training_set_count = training_set_count;
    m_training_set_count_isSet = true;
}

bool OAIPredictionModelStatus::is_training_set_count_Set() const{
    return m_training_set_count_isSet;
}

bool OAIPredictionModelStatus::is_training_set_count_Valid() const{
    return m_training_set_count_isValid;
}

qint32 OAIPredictionModelStatus::getValidationSetCount() const {
    return m_validation_set_count;
}
void OAIPredictionModelStatus::setValidationSetCount(const qint32 &validation_set_count) {
    m_validation_set_count = validation_set_count;
    m_validation_set_count_isSet = true;
}

bool OAIPredictionModelStatus::is_validation_set_count_Set() const{
    return m_validation_set_count_isSet;
}

bool OAIPredictionModelStatus::is_validation_set_count_Valid() const{
    return m_validation_set_count_isValid;
}

bool OAIPredictionModelStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_guid_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signals_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_set_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_set_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_set_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictionModelStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
