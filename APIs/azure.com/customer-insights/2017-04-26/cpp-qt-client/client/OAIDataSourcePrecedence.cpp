/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourcePrecedence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourcePrecedence::OAIDataSourcePrecedence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourcePrecedence::OAIDataSourcePrecedence() {
    this->initializeModel();
}

OAIDataSourcePrecedence::~OAIDataSourcePrecedence() {}

void OAIDataSourcePrecedence::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_precedence_isSet = false;
    m_precedence_isValid = false;
}

void OAIDataSourcePrecedence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSourcePrecedence::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("dataSource")]);
    m_data_source_isSet = !json[QString("dataSource")].isNull() && m_data_source_isValid;

    m_precedence_isValid = ::OpenAPI::fromJsonValue(m_precedence, json[QString("precedence")]);
    m_precedence_isSet = !json[QString("precedence")].isNull() && m_precedence_isValid;
}

QString OAIDataSourcePrecedence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSourcePrecedence::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source.isSet()) {
        obj.insert(QString("dataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_precedence_isSet) {
        obj.insert(QString("precedence"), ::OpenAPI::toJsonValue(m_precedence));
    }
    return obj;
}

OAIDataSource OAIDataSourcePrecedence::getDataSource() const {
    return m_data_source;
}
void OAIDataSourcePrecedence::setDataSource(const OAIDataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIDataSourcePrecedence::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIDataSourcePrecedence::is_data_source_Valid() const{
    return m_data_source_isValid;
}

qint32 OAIDataSourcePrecedence::getPrecedence() const {
    return m_precedence;
}
void OAIDataSourcePrecedence::setPrecedence(const qint32 &precedence) {
    m_precedence = precedence;
    m_precedence_isSet = true;
}

bool OAIDataSourcePrecedence::is_precedence_Set() const{
    return m_precedence_isSet;
}

bool OAIDataSourcePrecedence::is_precedence_Valid() const{
    return m_precedence_isValid;
}

bool OAIDataSourcePrecedence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_precedence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSourcePrecedence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
