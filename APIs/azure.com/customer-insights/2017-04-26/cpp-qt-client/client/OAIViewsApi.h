/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIViewsApi_H
#define OAI_OAIViewsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIViewListResult.h"
#include "OAIViewResourceFormat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIViewsApi : public QObject {
    Q_OBJECT

public:
    OAIViewsApi(const int timeOut = 0);
    ~OAIViewsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  view_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIViewResourceFormat [required]
    */
    virtual void viewsCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &view_name, const QString &api_version, const QString &subscription_id, const OAIViewResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  view_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void viewsDelete(const QString &resource_group_name, const QString &hub_name, const QString &view_name, const QString &api_version, const QString &subscription_id, const QString &user_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  view_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void viewsGet(const QString &resource_group_name, const QString &hub_name, const QString &view_name, const QString &api_version, const QString &subscription_id, const QString &user_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void viewsListByHub(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id, const QString &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void viewsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void viewsDeleteCallback(OAIHttpRequestWorker *worker);
    void viewsGetCallback(OAIHttpRequestWorker *worker);
    void viewsListByHubCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void viewsCreateOrUpdateSignal(OAIViewResourceFormat summary);
    void viewsDeleteSignal();
    void viewsGetSignal(OAIViewResourceFormat summary);
    void viewsListByHubSignal(OAIViewListResult summary);


    void viewsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIViewResourceFormat summary);
    void viewsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void viewsGetSignalFull(OAIHttpRequestWorker *worker, OAIViewResourceFormat summary);
    void viewsListByHubSignalFull(OAIHttpRequestWorker *worker, OAIViewListResult summary);

    Q_DECL_DEPRECATED_X("Use viewsCreateOrUpdateSignalError() instead")
    void viewsCreateOrUpdateSignalE(OAIViewResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsCreateOrUpdateSignalError(OAIViewResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsDeleteSignalError() instead")
    void viewsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void viewsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsGetSignalError() instead")
    void viewsGetSignalE(OAIViewResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsGetSignalError(OAIViewResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsListByHubSignalError() instead")
    void viewsListByHubSignalE(OAIViewListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsListByHubSignalError(OAIViewListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use viewsCreateOrUpdateSignalErrorFull() instead")
    void viewsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsDeleteSignalErrorFull() instead")
    void viewsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsGetSignalErrorFull() instead")
    void viewsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewsListByHubSignalErrorFull() instead")
    void viewsListByHubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewsListByHubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
