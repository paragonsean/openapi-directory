# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesforceTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_profile: str=None, table_category: str=None, table_name: str=None, table_remarks: str=None, table_schema: str=None):
        """SalesforceTable - a model defined in OpenAPI

        :param is_profile: The is_profile of this SalesforceTable.
        :param table_category: The table_category of this SalesforceTable.
        :param table_name: The table_name of this SalesforceTable.
        :param table_remarks: The table_remarks of this SalesforceTable.
        :param table_schema: The table_schema of this SalesforceTable.
        """
        self.openapi_types = {
            'is_profile': str,
            'table_category': str,
            'table_name': str,
            'table_remarks': str,
            'table_schema': str
        }

        self.attribute_map = {
            'is_profile': 'isProfile',
            'table_category': 'tableCategory',
            'table_name': 'tableName',
            'table_remarks': 'tableRemarks',
            'table_schema': 'tableSchema'
        }

        self._is_profile = is_profile
        self._table_category = table_category
        self._table_name = table_name
        self._table_remarks = table_remarks
        self._table_schema = table_schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesforceTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesforceTable of this SalesforceTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_profile(self):
        """Gets the is_profile of this SalesforceTable.

        Indicating whether this instance is profile.

        :return: The is_profile of this SalesforceTable.
        :rtype: str
        """
        return self._is_profile

    @is_profile.setter
    def is_profile(self, is_profile):
        """Sets the is_profile of this SalesforceTable.

        Indicating whether this instance is profile.

        :param is_profile: The is_profile of this SalesforceTable.
        :type is_profile: str
        """

        self._is_profile = is_profile

    @property
    def table_category(self):
        """Gets the table_category of this SalesforceTable.

        The table category.

        :return: The table_category of this SalesforceTable.
        :rtype: str
        """
        return self._table_category

    @table_category.setter
    def table_category(self, table_category):
        """Sets the table_category of this SalesforceTable.

        The table category.

        :param table_category: The table_category of this SalesforceTable.
        :type table_category: str
        """
        if table_category is None:
            raise ValueError("Invalid value for `table_category`, must not be `None`")

        self._table_category = table_category

    @property
    def table_name(self):
        """Gets the table_name of this SalesforceTable.

        The name of the table.

        :return: The table_name of this SalesforceTable.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this SalesforceTable.

        The name of the table.

        :param table_name: The table_name of this SalesforceTable.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def table_remarks(self):
        """Gets the table_remarks of this SalesforceTable.

        The table remarks.

        :return: The table_remarks of this SalesforceTable.
        :rtype: str
        """
        return self._table_remarks

    @table_remarks.setter
    def table_remarks(self, table_remarks):
        """Sets the table_remarks of this SalesforceTable.

        The table remarks.

        :param table_remarks: The table_remarks of this SalesforceTable.
        :type table_remarks: str
        """

        self._table_remarks = table_remarks

    @property
    def table_schema(self):
        """Gets the table_schema of this SalesforceTable.

        The table schema.

        :return: The table_schema of this SalesforceTable.
        :rtype: str
        """
        return self._table_schema

    @table_schema.setter
    def table_schema(self, table_schema):
        """Sets the table_schema of this SalesforceTable.

        The table schema.

        :param table_schema: The table_schema of this SalesforceTable.
        :type table_schema: str
        """
        if table_schema is None:
            raise ValueError("Invalid value for `table_schema`, must not be `None`")

        self._table_schema = table_schema
