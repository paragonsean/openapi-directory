# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WidgetType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changed: datetime=None, created: datetime=None, definition: str=None, description: str=None, display_name: Dict[str, str]=None, image_url: str=None, tenant_id: str=None, widget_type_name: str=None, widget_version: str=None):
        """WidgetType - a model defined in OpenAPI

        :param changed: The changed of this WidgetType.
        :param created: The created of this WidgetType.
        :param definition: The definition of this WidgetType.
        :param description: The description of this WidgetType.
        :param display_name: The display_name of this WidgetType.
        :param image_url: The image_url of this WidgetType.
        :param tenant_id: The tenant_id of this WidgetType.
        :param widget_type_name: The widget_type_name of this WidgetType.
        :param widget_version: The widget_version of this WidgetType.
        """
        self.openapi_types = {
            'changed': datetime,
            'created': datetime,
            'definition': str,
            'description': str,
            'display_name': Dict[str, str],
            'image_url': str,
            'tenant_id': str,
            'widget_type_name': str,
            'widget_version': str
        }

        self.attribute_map = {
            'changed': 'changed',
            'created': 'created',
            'definition': 'definition',
            'description': 'description',
            'display_name': 'displayName',
            'image_url': 'imageUrl',
            'tenant_id': 'tenantId',
            'widget_type_name': 'widgetTypeName',
            'widget_version': 'widgetVersion'
        }

        self._changed = changed
        self._created = created
        self._definition = definition
        self._description = description
        self._display_name = display_name
        self._image_url = image_url
        self._tenant_id = tenant_id
        self._widget_type_name = widget_type_name
        self._widget_version = widget_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WidgetType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WidgetType of this WidgetType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changed(self):
        """Gets the changed of this WidgetType.

        Date time when widget type was last modified.

        :return: The changed of this WidgetType.
        :rtype: datetime
        """
        return self._changed

    @changed.setter
    def changed(self, changed):
        """Sets the changed of this WidgetType.

        Date time when widget type was last modified.

        :param changed: The changed of this WidgetType.
        :type changed: datetime
        """

        self._changed = changed

    @property
    def created(self):
        """Gets the created of this WidgetType.

        Date time when widget type was created.

        :return: The created of this WidgetType.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WidgetType.

        Date time when widget type was created.

        :param created: The created of this WidgetType.
        :type created: datetime
        """

        self._created = created

    @property
    def definition(self):
        """Gets the definition of this WidgetType.

        Definition for widget type.

        :return: The definition of this WidgetType.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this WidgetType.

        Definition for widget type.

        :param definition: The definition of this WidgetType.
        :type definition: str
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def description(self):
        """Gets the description of this WidgetType.

        Description for widget type.

        :return: The description of this WidgetType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WidgetType.

        Description for widget type.

        :param description: The description of this WidgetType.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this WidgetType.

        Localized display name for the widget type.

        :return: The display_name of this WidgetType.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WidgetType.

        Localized display name for the widget type.

        :param display_name: The display_name of this WidgetType.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def image_url(self):
        """Gets the image_url of this WidgetType.

        The image URL.

        :return: The image_url of this WidgetType.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this WidgetType.

        The image URL.

        :param image_url: The image_url of this WidgetType.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def tenant_id(self):
        """Gets the tenant_id of this WidgetType.

        The hub name.

        :return: The tenant_id of this WidgetType.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this WidgetType.

        The hub name.

        :param tenant_id: The tenant_id of this WidgetType.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def widget_type_name(self):
        """Gets the widget_type_name of this WidgetType.

        Name of the widget type.

        :return: The widget_type_name of this WidgetType.
        :rtype: str
        """
        return self._widget_type_name

    @widget_type_name.setter
    def widget_type_name(self, widget_type_name):
        """Sets the widget_type_name of this WidgetType.

        Name of the widget type.

        :param widget_type_name: The widget_type_name of this WidgetType.
        :type widget_type_name: str
        """

        self._widget_type_name = widget_type_name

    @property
    def widget_version(self):
        """Gets the widget_version of this WidgetType.

        The widget version.

        :return: The widget_version of this WidgetType.
        :rtype: str
        """
        return self._widget_version

    @widget_version.setter
    def widget_version(self, widget_version):
        """Sets the widget_version of this WidgetType.

        The widget version.

        :param widget_version: The widget_version of this WidgetType.
        :type widget_version: str
        """

        self._widget_version = widget_version
