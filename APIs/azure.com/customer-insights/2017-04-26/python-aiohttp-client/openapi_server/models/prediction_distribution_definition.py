# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prediction_distribution_definition_distributions_inner import PredictionDistributionDefinitionDistributionsInner
from openapi_server import util


class PredictionDistributionDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distributions: List[PredictionDistributionDefinitionDistributionsInner]=None, total_negatives: int=None, total_positives: int=None):
        """PredictionDistributionDefinition - a model defined in OpenAPI

        :param distributions: The distributions of this PredictionDistributionDefinition.
        :param total_negatives: The total_negatives of this PredictionDistributionDefinition.
        :param total_positives: The total_positives of this PredictionDistributionDefinition.
        """
        self.openapi_types = {
            'distributions': List[PredictionDistributionDefinitionDistributionsInner],
            'total_negatives': int,
            'total_positives': int
        }

        self.attribute_map = {
            'distributions': 'distributions',
            'total_negatives': 'totalNegatives',
            'total_positives': 'totalPositives'
        }

        self._distributions = distributions
        self._total_negatives = total_negatives
        self._total_positives = total_positives

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictionDistributionDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PredictionDistributionDefinition of this PredictionDistributionDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distributions(self):
        """Gets the distributions of this PredictionDistributionDefinition.

        Distributions of the prediction.

        :return: The distributions of this PredictionDistributionDefinition.
        :rtype: List[PredictionDistributionDefinitionDistributionsInner]
        """
        return self._distributions

    @distributions.setter
    def distributions(self, distributions):
        """Sets the distributions of this PredictionDistributionDefinition.

        Distributions of the prediction.

        :param distributions: The distributions of this PredictionDistributionDefinition.
        :type distributions: List[PredictionDistributionDefinitionDistributionsInner]
        """

        self._distributions = distributions

    @property
    def total_negatives(self):
        """Gets the total_negatives of this PredictionDistributionDefinition.

        Total negatives in the distribution.

        :return: The total_negatives of this PredictionDistributionDefinition.
        :rtype: int
        """
        return self._total_negatives

    @total_negatives.setter
    def total_negatives(self, total_negatives):
        """Sets the total_negatives of this PredictionDistributionDefinition.

        Total negatives in the distribution.

        :param total_negatives: The total_negatives of this PredictionDistributionDefinition.
        :type total_negatives: int
        """

        self._total_negatives = total_negatives

    @property
    def total_positives(self):
        """Gets the total_positives of this PredictionDistributionDefinition.

        Total positive in the distribution.

        :return: The total_positives of this PredictionDistributionDefinition.
        :rtype: int
        """
        return self._total_positives

    @total_positives.setter
    def total_positives(self, total_positives):
        """Sets the total_positives of this PredictionDistributionDefinition.

        Total positive in the distribution.

        :param total_positives: The total_positives of this PredictionDistributionDefinition.
        :type total_positives: int
        """

        self._total_positives = total_positives
