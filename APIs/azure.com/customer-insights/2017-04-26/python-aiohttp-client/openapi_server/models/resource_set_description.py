# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceSetDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, elements: List[str]=None, exceptions: List[str]=None):
        """ResourceSetDescription - a model defined in OpenAPI

        :param elements: The elements of this ResourceSetDescription.
        :param exceptions: The exceptions of this ResourceSetDescription.
        """
        self.openapi_types = {
            'elements': List[str],
            'exceptions': List[str]
        }

        self.attribute_map = {
            'elements': 'elements',
            'exceptions': 'exceptions'
        }

        self._elements = elements
        self._exceptions = exceptions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceSetDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceSetDescription of this ResourceSetDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def elements(self):
        """Gets the elements of this ResourceSetDescription.

        The elements included in the set.

        :return: The elements of this ResourceSetDescription.
        :rtype: List[str]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this ResourceSetDescription.

        The elements included in the set.

        :param elements: The elements of this ResourceSetDescription.
        :type elements: List[str]
        """

        self._elements = elements

    @property
    def exceptions(self):
        """Gets the exceptions of this ResourceSetDescription.

        The elements that are not included in the set, in case elements contains '*' indicating 'all'.

        :return: The exceptions of this ResourceSetDescription.
        :rtype: List[str]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this ResourceSetDescription.

        The elements that are not included in the set, in case elements contains '*' indicating 'all'.

        :param exceptions: The exceptions of this ResourceSetDescription.
        :type exceptions: List[str]
        """

        self._exceptions = exceptions
