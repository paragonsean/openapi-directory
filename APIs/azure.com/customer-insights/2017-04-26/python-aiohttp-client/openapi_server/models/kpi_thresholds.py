# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KpiThresholds(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, increasing_kpi: bool=None, lower_limit: float=None, upper_limit: float=None):
        """KpiThresholds - a model defined in OpenAPI

        :param increasing_kpi: The increasing_kpi of this KpiThresholds.
        :param lower_limit: The lower_limit of this KpiThresholds.
        :param upper_limit: The upper_limit of this KpiThresholds.
        """
        self.openapi_types = {
            'increasing_kpi': bool,
            'lower_limit': float,
            'upper_limit': float
        }

        self.attribute_map = {
            'increasing_kpi': 'increasingKpi',
            'lower_limit': 'lowerLimit',
            'upper_limit': 'upperLimit'
        }

        self._increasing_kpi = increasing_kpi
        self._lower_limit = lower_limit
        self._upper_limit = upper_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KpiThresholds':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KpiThresholds of this KpiThresholds.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def increasing_kpi(self):
        """Gets the increasing_kpi of this KpiThresholds.

        Whether or not the KPI is an increasing KPI.

        :return: The increasing_kpi of this KpiThresholds.
        :rtype: bool
        """
        return self._increasing_kpi

    @increasing_kpi.setter
    def increasing_kpi(self, increasing_kpi):
        """Sets the increasing_kpi of this KpiThresholds.

        Whether or not the KPI is an increasing KPI.

        :param increasing_kpi: The increasing_kpi of this KpiThresholds.
        :type increasing_kpi: bool
        """
        if increasing_kpi is None:
            raise ValueError("Invalid value for `increasing_kpi`, must not be `None`")

        self._increasing_kpi = increasing_kpi

    @property
    def lower_limit(self):
        """Gets the lower_limit of this KpiThresholds.

        The lower threshold limit.

        :return: The lower_limit of this KpiThresholds.
        :rtype: float
        """
        return self._lower_limit

    @lower_limit.setter
    def lower_limit(self, lower_limit):
        """Sets the lower_limit of this KpiThresholds.

        The lower threshold limit.

        :param lower_limit: The lower_limit of this KpiThresholds.
        :type lower_limit: float
        """
        if lower_limit is None:
            raise ValueError("Invalid value for `lower_limit`, must not be `None`")

        self._lower_limit = lower_limit

    @property
    def upper_limit(self):
        """Gets the upper_limit of this KpiThresholds.

        The upper threshold limit.

        :return: The upper_limit of this KpiThresholds.
        :rtype: float
        """
        return self._upper_limit

    @upper_limit.setter
    def upper_limit(self, upper_limit):
        """Sets the upper_limit of this KpiThresholds.

        The upper threshold limit.

        :param upper_limit: The upper_limit of this KpiThresholds.
        :type upper_limit: float
        """
        if upper_limit is None:
            raise ValueError("Invalid value for `upper_limit`, must not be `None`")

        self._upper_limit = upper_limit
