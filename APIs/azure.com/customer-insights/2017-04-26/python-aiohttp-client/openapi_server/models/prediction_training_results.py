# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.canonical_profile_definition import CanonicalProfileDefinition
from openapi_server.models.prediction_distribution_definition import PredictionDistributionDefinition
from openapi_server import util


class PredictionTrainingResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canonical_profiles: List[CanonicalProfileDefinition]=None, prediction_distribution: PredictionDistributionDefinition=None, primary_profile_instance_count: int=None, score_name: str=None, tenant_id: str=None):
        """PredictionTrainingResults - a model defined in OpenAPI

        :param canonical_profiles: The canonical_profiles of this PredictionTrainingResults.
        :param prediction_distribution: The prediction_distribution of this PredictionTrainingResults.
        :param primary_profile_instance_count: The primary_profile_instance_count of this PredictionTrainingResults.
        :param score_name: The score_name of this PredictionTrainingResults.
        :param tenant_id: The tenant_id of this PredictionTrainingResults.
        """
        self.openapi_types = {
            'canonical_profiles': List[CanonicalProfileDefinition],
            'prediction_distribution': PredictionDistributionDefinition,
            'primary_profile_instance_count': int,
            'score_name': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'canonical_profiles': 'canonicalProfiles',
            'prediction_distribution': 'predictionDistribution',
            'primary_profile_instance_count': 'primaryProfileInstanceCount',
            'score_name': 'scoreName',
            'tenant_id': 'tenantId'
        }

        self._canonical_profiles = canonical_profiles
        self._prediction_distribution = prediction_distribution
        self._primary_profile_instance_count = primary_profile_instance_count
        self._score_name = score_name
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictionTrainingResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PredictionTrainingResults of this PredictionTrainingResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canonical_profiles(self):
        """Gets the canonical_profiles of this PredictionTrainingResults.

        Canonical profiles.

        :return: The canonical_profiles of this PredictionTrainingResults.
        :rtype: List[CanonicalProfileDefinition]
        """
        return self._canonical_profiles

    @canonical_profiles.setter
    def canonical_profiles(self, canonical_profiles):
        """Sets the canonical_profiles of this PredictionTrainingResults.

        Canonical profiles.

        :param canonical_profiles: The canonical_profiles of this PredictionTrainingResults.
        :type canonical_profiles: List[CanonicalProfileDefinition]
        """

        self._canonical_profiles = canonical_profiles

    @property
    def prediction_distribution(self):
        """Gets the prediction_distribution of this PredictionTrainingResults.


        :return: The prediction_distribution of this PredictionTrainingResults.
        :rtype: PredictionDistributionDefinition
        """
        return self._prediction_distribution

    @prediction_distribution.setter
    def prediction_distribution(self, prediction_distribution):
        """Sets the prediction_distribution of this PredictionTrainingResults.


        :param prediction_distribution: The prediction_distribution of this PredictionTrainingResults.
        :type prediction_distribution: PredictionDistributionDefinition
        """

        self._prediction_distribution = prediction_distribution

    @property
    def primary_profile_instance_count(self):
        """Gets the primary_profile_instance_count of this PredictionTrainingResults.

        Instance count of the primary profile.

        :return: The primary_profile_instance_count of this PredictionTrainingResults.
        :rtype: int
        """
        return self._primary_profile_instance_count

    @primary_profile_instance_count.setter
    def primary_profile_instance_count(self, primary_profile_instance_count):
        """Sets the primary_profile_instance_count of this PredictionTrainingResults.

        Instance count of the primary profile.

        :param primary_profile_instance_count: The primary_profile_instance_count of this PredictionTrainingResults.
        :type primary_profile_instance_count: int
        """

        self._primary_profile_instance_count = primary_profile_instance_count

    @property
    def score_name(self):
        """Gets the score_name of this PredictionTrainingResults.

        Score name.

        :return: The score_name of this PredictionTrainingResults.
        :rtype: str
        """
        return self._score_name

    @score_name.setter
    def score_name(self, score_name):
        """Sets the score_name of this PredictionTrainingResults.

        Score name.

        :param score_name: The score_name of this PredictionTrainingResults.
        :type score_name: str
        """

        self._score_name = score_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this PredictionTrainingResults.

        The hub name.

        :return: The tenant_id of this PredictionTrainingResults.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this PredictionTrainingResults.

        The hub name.

        :param tenant_id: The tenant_id of this PredictionTrainingResults.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
