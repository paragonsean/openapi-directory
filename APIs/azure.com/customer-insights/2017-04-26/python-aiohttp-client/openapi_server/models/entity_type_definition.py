# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_definition import PropertyDefinition
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server import util


class EntityTypeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_entity_set_name: str=None, entity_type: str=None, fields: List[PropertyDefinition]=None, instances_count: int=None, last_changed_utc: datetime=None, provisioning_state: ProvisioningState=None, schema_item_type_link: str=None, tenant_id: str=None, timestamp_field_name: str=None, type_name: str=None, attributes: Dict[str, List[str]]=None, description: Dict[str, str]=None, display_name: Dict[str, str]=None, large_image: str=None, localized_attributes: Dict[str, Dict[str, str]]=None, medium_image: str=None, small_image: str=None):
        """EntityTypeDefinition - a model defined in OpenAPI

        :param api_entity_set_name: The api_entity_set_name of this EntityTypeDefinition.
        :param entity_type: The entity_type of this EntityTypeDefinition.
        :param fields: The fields of this EntityTypeDefinition.
        :param instances_count: The instances_count of this EntityTypeDefinition.
        :param last_changed_utc: The last_changed_utc of this EntityTypeDefinition.
        :param provisioning_state: The provisioning_state of this EntityTypeDefinition.
        :param schema_item_type_link: The schema_item_type_link of this EntityTypeDefinition.
        :param tenant_id: The tenant_id of this EntityTypeDefinition.
        :param timestamp_field_name: The timestamp_field_name of this EntityTypeDefinition.
        :param type_name: The type_name of this EntityTypeDefinition.
        :param attributes: The attributes of this EntityTypeDefinition.
        :param description: The description of this EntityTypeDefinition.
        :param display_name: The display_name of this EntityTypeDefinition.
        :param large_image: The large_image of this EntityTypeDefinition.
        :param localized_attributes: The localized_attributes of this EntityTypeDefinition.
        :param medium_image: The medium_image of this EntityTypeDefinition.
        :param small_image: The small_image of this EntityTypeDefinition.
        """
        self.openapi_types = {
            'api_entity_set_name': str,
            'entity_type': str,
            'fields': List[PropertyDefinition],
            'instances_count': int,
            'last_changed_utc': datetime,
            'provisioning_state': ProvisioningState,
            'schema_item_type_link': str,
            'tenant_id': str,
            'timestamp_field_name': str,
            'type_name': str,
            'attributes': Dict[str, List[str]],
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'large_image': str,
            'localized_attributes': Dict[str, Dict[str, str]],
            'medium_image': str,
            'small_image': str
        }

        self.attribute_map = {
            'api_entity_set_name': 'apiEntitySetName',
            'entity_type': 'entityType',
            'fields': 'fields',
            'instances_count': 'instancesCount',
            'last_changed_utc': 'lastChangedUtc',
            'provisioning_state': 'provisioningState',
            'schema_item_type_link': 'schemaItemTypeLink',
            'tenant_id': 'tenantId',
            'timestamp_field_name': 'timestampFieldName',
            'type_name': 'typeName',
            'attributes': 'attributes',
            'description': 'description',
            'display_name': 'displayName',
            'large_image': 'largeImage',
            'localized_attributes': 'localizedAttributes',
            'medium_image': 'mediumImage',
            'small_image': 'smallImage'
        }

        self._api_entity_set_name = api_entity_set_name
        self._entity_type = entity_type
        self._fields = fields
        self._instances_count = instances_count
        self._last_changed_utc = last_changed_utc
        self._provisioning_state = provisioning_state
        self._schema_item_type_link = schema_item_type_link
        self._tenant_id = tenant_id
        self._timestamp_field_name = timestamp_field_name
        self._type_name = type_name
        self._attributes = attributes
        self._description = description
        self._display_name = display_name
        self._large_image = large_image
        self._localized_attributes = localized_attributes
        self._medium_image = medium_image
        self._small_image = small_image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityTypeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityTypeDefinition of this EntityTypeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_entity_set_name(self):
        """Gets the api_entity_set_name of this EntityTypeDefinition.

        The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.

        :return: The api_entity_set_name of this EntityTypeDefinition.
        :rtype: str
        """
        return self._api_entity_set_name

    @api_entity_set_name.setter
    def api_entity_set_name(self, api_entity_set_name):
        """Sets the api_entity_set_name of this EntityTypeDefinition.

        The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.

        :param api_entity_set_name: The api_entity_set_name of this EntityTypeDefinition.
        :type api_entity_set_name: str
        """

        self._api_entity_set_name = api_entity_set_name

    @property
    def entity_type(self):
        """Gets the entity_type of this EntityTypeDefinition.

        Type of entity.

        :return: The entity_type of this EntityTypeDefinition.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EntityTypeDefinition.

        Type of entity.

        :param entity_type: The entity_type of this EntityTypeDefinition.
        :type entity_type: str
        """
        allowed_values = ["None", "Profile", "Interaction", "Relationship"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def fields(self):
        """Gets the fields of this EntityTypeDefinition.

        The properties of the Profile.

        :return: The fields of this EntityTypeDefinition.
        :rtype: List[PropertyDefinition]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this EntityTypeDefinition.

        The properties of the Profile.

        :param fields: The fields of this EntityTypeDefinition.
        :type fields: List[PropertyDefinition]
        """

        self._fields = fields

    @property
    def instances_count(self):
        """Gets the instances_count of this EntityTypeDefinition.

        The instance count.

        :return: The instances_count of this EntityTypeDefinition.
        :rtype: int
        """
        return self._instances_count

    @instances_count.setter
    def instances_count(self, instances_count):
        """Sets the instances_count of this EntityTypeDefinition.

        The instance count.

        :param instances_count: The instances_count of this EntityTypeDefinition.
        :type instances_count: int
        """

        self._instances_count = instances_count

    @property
    def last_changed_utc(self):
        """Gets the last_changed_utc of this EntityTypeDefinition.

        The last changed time for the type definition.

        :return: The last_changed_utc of this EntityTypeDefinition.
        :rtype: datetime
        """
        return self._last_changed_utc

    @last_changed_utc.setter
    def last_changed_utc(self, last_changed_utc):
        """Sets the last_changed_utc of this EntityTypeDefinition.

        The last changed time for the type definition.

        :param last_changed_utc: The last_changed_utc of this EntityTypeDefinition.
        :type last_changed_utc: datetime
        """

        self._last_changed_utc = last_changed_utc

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this EntityTypeDefinition.


        :return: The provisioning_state of this EntityTypeDefinition.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this EntityTypeDefinition.


        :param provisioning_state: The provisioning_state of this EntityTypeDefinition.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def schema_item_type_link(self):
        """Gets the schema_item_type_link of this EntityTypeDefinition.

        The schema org link. This helps ACI identify and suggest semantic models.

        :return: The schema_item_type_link of this EntityTypeDefinition.
        :rtype: str
        """
        return self._schema_item_type_link

    @schema_item_type_link.setter
    def schema_item_type_link(self, schema_item_type_link):
        """Sets the schema_item_type_link of this EntityTypeDefinition.

        The schema org link. This helps ACI identify and suggest semantic models.

        :param schema_item_type_link: The schema_item_type_link of this EntityTypeDefinition.
        :type schema_item_type_link: str
        """

        self._schema_item_type_link = schema_item_type_link

    @property
    def tenant_id(self):
        """Gets the tenant_id of this EntityTypeDefinition.

        The hub name.

        :return: The tenant_id of this EntityTypeDefinition.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this EntityTypeDefinition.

        The hub name.

        :param tenant_id: The tenant_id of this EntityTypeDefinition.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def timestamp_field_name(self):
        """Gets the timestamp_field_name of this EntityTypeDefinition.

        The timestamp property name. Represents the time when the interaction or profile update happened.

        :return: The timestamp_field_name of this EntityTypeDefinition.
        :rtype: str
        """
        return self._timestamp_field_name

    @timestamp_field_name.setter
    def timestamp_field_name(self, timestamp_field_name):
        """Sets the timestamp_field_name of this EntityTypeDefinition.

        The timestamp property name. Represents the time when the interaction or profile update happened.

        :param timestamp_field_name: The timestamp_field_name of this EntityTypeDefinition.
        :type timestamp_field_name: str
        """

        self._timestamp_field_name = timestamp_field_name

    @property
    def type_name(self):
        """Gets the type_name of this EntityTypeDefinition.

        The name of the entity.

        :return: The type_name of this EntityTypeDefinition.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this EntityTypeDefinition.

        The name of the entity.

        :param type_name: The type_name of this EntityTypeDefinition.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def attributes(self):
        """Gets the attributes of this EntityTypeDefinition.

        The attributes for the Type.

        :return: The attributes of this EntityTypeDefinition.
        :rtype: Dict[str, List[str]]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this EntityTypeDefinition.

        The attributes for the Type.

        :param attributes: The attributes of this EntityTypeDefinition.
        :type attributes: Dict[str, List[str]]
        """

        self._attributes = attributes

    @property
    def description(self):
        """Gets the description of this EntityTypeDefinition.

        Localized descriptions for the property.

        :return: The description of this EntityTypeDefinition.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EntityTypeDefinition.

        Localized descriptions for the property.

        :param description: The description of this EntityTypeDefinition.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this EntityTypeDefinition.

        Localized display names for the property.

        :return: The display_name of this EntityTypeDefinition.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EntityTypeDefinition.

        Localized display names for the property.

        :param display_name: The display_name of this EntityTypeDefinition.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def large_image(self):
        """Gets the large_image of this EntityTypeDefinition.

        Large Image associated with the Property or EntityType.

        :return: The large_image of this EntityTypeDefinition.
        :rtype: str
        """
        return self._large_image

    @large_image.setter
    def large_image(self, large_image):
        """Sets the large_image of this EntityTypeDefinition.

        Large Image associated with the Property or EntityType.

        :param large_image: The large_image of this EntityTypeDefinition.
        :type large_image: str
        """

        self._large_image = large_image

    @property
    def localized_attributes(self):
        """Gets the localized_attributes of this EntityTypeDefinition.

        Any custom localized attributes for the Type.

        :return: The localized_attributes of this EntityTypeDefinition.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._localized_attributes

    @localized_attributes.setter
    def localized_attributes(self, localized_attributes):
        """Sets the localized_attributes of this EntityTypeDefinition.

        Any custom localized attributes for the Type.

        :param localized_attributes: The localized_attributes of this EntityTypeDefinition.
        :type localized_attributes: Dict[str, Dict[str, str]]
        """

        self._localized_attributes = localized_attributes

    @property
    def medium_image(self):
        """Gets the medium_image of this EntityTypeDefinition.

        Medium Image associated with the Property or EntityType.

        :return: The medium_image of this EntityTypeDefinition.
        :rtype: str
        """
        return self._medium_image

    @medium_image.setter
    def medium_image(self, medium_image):
        """Sets the medium_image of this EntityTypeDefinition.

        Medium Image associated with the Property or EntityType.

        :param medium_image: The medium_image of this EntityTypeDefinition.
        :type medium_image: str
        """

        self._medium_image = medium_image

    @property
    def small_image(self):
        """Gets the small_image of this EntityTypeDefinition.

        Small Image associated with the Property or EntityType.

        :return: The small_image of this EntityTypeDefinition.
        :rtype: str
        """
        return self._small_image

    @small_image.setter
    def small_image(self, small_image):
        """Sets the small_image of this EntityTypeDefinition.

        Small Image associated with the Property or EntityType.

        :param small_image: The small_image of this EntityTypeDefinition.
        :type small_image: str
        """

        self._small_image = small_image
