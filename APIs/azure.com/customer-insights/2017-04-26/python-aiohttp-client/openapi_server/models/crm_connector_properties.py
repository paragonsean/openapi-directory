# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crm_connector_entities import CrmConnectorEntities
from openapi_server import util


class CrmConnectorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, connection_string: str=None, entities: List[CrmConnectorEntities]=None, organization_id: str=None, organization_url: str=None):
        """CrmConnectorProperties - a model defined in OpenAPI

        :param access_token: The access_token of this CrmConnectorProperties.
        :param connection_string: The connection_string of this CrmConnectorProperties.
        :param entities: The entities of this CrmConnectorProperties.
        :param organization_id: The organization_id of this CrmConnectorProperties.
        :param organization_url: The organization_url of this CrmConnectorProperties.
        """
        self.openapi_types = {
            'access_token': str,
            'connection_string': str,
            'entities': List[CrmConnectorEntities],
            'organization_id': str,
            'organization_url': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'connection_string': 'connectionString',
            'entities': 'entities',
            'organization_id': 'organizationId',
            'organization_url': 'organizationUrl'
        }

        self._access_token = access_token
        self._connection_string = connection_string
        self._entities = entities
        self._organization_id = organization_id
        self._organization_url = organization_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrmConnectorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrmConnectorProperties of this CrmConnectorProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this CrmConnectorProperties.

        The access token.

        :return: The access_token of this CrmConnectorProperties.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this CrmConnectorProperties.

        The access token.

        :param access_token: The access_token of this CrmConnectorProperties.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def connection_string(self):
        """Gets the connection_string of this CrmConnectorProperties.

        The connection string.

        :return: The connection_string of this CrmConnectorProperties.
        :rtype: str
        """
        return self._connection_string

    @connection_string.setter
    def connection_string(self, connection_string):
        """Sets the connection_string of this CrmConnectorProperties.

        The connection string.

        :param connection_string: The connection_string of this CrmConnectorProperties.
        :type connection_string: str
        """

        self._connection_string = connection_string

    @property
    def entities(self):
        """Gets the entities of this CrmConnectorProperties.

        The entities like account, contact, opportunity.

        :return: The entities of this CrmConnectorProperties.
        :rtype: List[CrmConnectorEntities]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this CrmConnectorProperties.

        The entities like account, contact, opportunity.

        :param entities: The entities of this CrmConnectorProperties.
        :type entities: List[CrmConnectorEntities]
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")

        self._entities = entities

    @property
    def organization_id(self):
        """Gets the organization_id of this CrmConnectorProperties.

        The organization ID.

        :return: The organization_id of this CrmConnectorProperties.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CrmConnectorProperties.

        The organization ID.

        :param organization_id: The organization_id of this CrmConnectorProperties.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id

    @property
    def organization_url(self):
        """Gets the organization_url of this CrmConnectorProperties.

        The organization URL.

        :return: The organization_url of this CrmConnectorProperties.
        :rtype: str
        """
        return self._organization_url

    @organization_url.setter
    def organization_url(self, organization_url):
        """Sets the organization_url of this CrmConnectorProperties.

        The organization URL.

        :param organization_url: The organization_url of this CrmConnectorProperties.
        :type organization_url: str
        """
        if organization_url is None:
            raise ValueError("Invalid value for `organization_url`, must not be `None`")

        self._organization_url = organization_url
