# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant_profile_property_reference import ParticipantProfilePropertyReference
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server.models.relationship_link_field_mapping import RelationshipLinkFieldMapping
from openapi_server import util


class RelationshipLinkDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: Dict[str, str]=None, display_name: Dict[str, str]=None, interaction_type: str=None, link_name: str=None, mappings: List[RelationshipLinkFieldMapping]=None, profile_property_references: List[ParticipantProfilePropertyReference]=None, provisioning_state: ProvisioningState=None, related_profile_property_references: List[ParticipantProfilePropertyReference]=None, relationship_guid_id: str=None, relationship_name: str=None, tenant_id: str=None):
        """RelationshipLinkDefinition - a model defined in OpenAPI

        :param description: The description of this RelationshipLinkDefinition.
        :param display_name: The display_name of this RelationshipLinkDefinition.
        :param interaction_type: The interaction_type of this RelationshipLinkDefinition.
        :param link_name: The link_name of this RelationshipLinkDefinition.
        :param mappings: The mappings of this RelationshipLinkDefinition.
        :param profile_property_references: The profile_property_references of this RelationshipLinkDefinition.
        :param provisioning_state: The provisioning_state of this RelationshipLinkDefinition.
        :param related_profile_property_references: The related_profile_property_references of this RelationshipLinkDefinition.
        :param relationship_guid_id: The relationship_guid_id of this RelationshipLinkDefinition.
        :param relationship_name: The relationship_name of this RelationshipLinkDefinition.
        :param tenant_id: The tenant_id of this RelationshipLinkDefinition.
        """
        self.openapi_types = {
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'interaction_type': str,
            'link_name': str,
            'mappings': List[RelationshipLinkFieldMapping],
            'profile_property_references': List[ParticipantProfilePropertyReference],
            'provisioning_state': ProvisioningState,
            'related_profile_property_references': List[ParticipantProfilePropertyReference],
            'relationship_guid_id': str,
            'relationship_name': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'interaction_type': 'interactionType',
            'link_name': 'linkName',
            'mappings': 'mappings',
            'profile_property_references': 'profilePropertyReferences',
            'provisioning_state': 'provisioningState',
            'related_profile_property_references': 'relatedProfilePropertyReferences',
            'relationship_guid_id': 'relationshipGuidId',
            'relationship_name': 'relationshipName',
            'tenant_id': 'tenantId'
        }

        self._description = description
        self._display_name = display_name
        self._interaction_type = interaction_type
        self._link_name = link_name
        self._mappings = mappings
        self._profile_property_references = profile_property_references
        self._provisioning_state = provisioning_state
        self._related_profile_property_references = related_profile_property_references
        self._relationship_guid_id = relationship_guid_id
        self._relationship_name = relationship_name
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationshipLinkDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationshipLinkDefinition of this RelationshipLinkDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this RelationshipLinkDefinition.

        Localized descriptions for the Relationship Link.

        :return: The description of this RelationshipLinkDefinition.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RelationshipLinkDefinition.

        Localized descriptions for the Relationship Link.

        :param description: The description of this RelationshipLinkDefinition.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this RelationshipLinkDefinition.

        Localized display name for the Relationship Link.

        :return: The display_name of this RelationshipLinkDefinition.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RelationshipLinkDefinition.

        Localized display name for the Relationship Link.

        :param display_name: The display_name of this RelationshipLinkDefinition.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def interaction_type(self):
        """Gets the interaction_type of this RelationshipLinkDefinition.

        The InteractionType associated with the Relationship Link.

        :return: The interaction_type of this RelationshipLinkDefinition.
        :rtype: str
        """
        return self._interaction_type

    @interaction_type.setter
    def interaction_type(self, interaction_type):
        """Sets the interaction_type of this RelationshipLinkDefinition.

        The InteractionType associated with the Relationship Link.

        :param interaction_type: The interaction_type of this RelationshipLinkDefinition.
        :type interaction_type: str
        """
        if interaction_type is None:
            raise ValueError("Invalid value for `interaction_type`, must not be `None`")

        self._interaction_type = interaction_type

    @property
    def link_name(self):
        """Gets the link_name of this RelationshipLinkDefinition.

        The name of the Relationship Link.

        :return: The link_name of this RelationshipLinkDefinition.
        :rtype: str
        """
        return self._link_name

    @link_name.setter
    def link_name(self, link_name):
        """Sets the link_name of this RelationshipLinkDefinition.

        The name of the Relationship Link.

        :param link_name: The link_name of this RelationshipLinkDefinition.
        :type link_name: str
        """

        self._link_name = link_name

    @property
    def mappings(self):
        """Gets the mappings of this RelationshipLinkDefinition.

        The mappings between Interaction and Relationship fields.

        :return: The mappings of this RelationshipLinkDefinition.
        :rtype: List[RelationshipLinkFieldMapping]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this RelationshipLinkDefinition.

        The mappings between Interaction and Relationship fields.

        :param mappings: The mappings of this RelationshipLinkDefinition.
        :type mappings: List[RelationshipLinkFieldMapping]
        """

        self._mappings = mappings

    @property
    def profile_property_references(self):
        """Gets the profile_property_references of this RelationshipLinkDefinition.

        The property references for the Profile of the Relationship.

        :return: The profile_property_references of this RelationshipLinkDefinition.
        :rtype: List[ParticipantProfilePropertyReference]
        """
        return self._profile_property_references

    @profile_property_references.setter
    def profile_property_references(self, profile_property_references):
        """Sets the profile_property_references of this RelationshipLinkDefinition.

        The property references for the Profile of the Relationship.

        :param profile_property_references: The profile_property_references of this RelationshipLinkDefinition.
        :type profile_property_references: List[ParticipantProfilePropertyReference]
        """
        if profile_property_references is None:
            raise ValueError("Invalid value for `profile_property_references`, must not be `None`")

        self._profile_property_references = profile_property_references

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RelationshipLinkDefinition.


        :return: The provisioning_state of this RelationshipLinkDefinition.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RelationshipLinkDefinition.


        :param provisioning_state: The provisioning_state of this RelationshipLinkDefinition.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def related_profile_property_references(self):
        """Gets the related_profile_property_references of this RelationshipLinkDefinition.

        The property references for the Related Profile of the Relationship.

        :return: The related_profile_property_references of this RelationshipLinkDefinition.
        :rtype: List[ParticipantProfilePropertyReference]
        """
        return self._related_profile_property_references

    @related_profile_property_references.setter
    def related_profile_property_references(self, related_profile_property_references):
        """Sets the related_profile_property_references of this RelationshipLinkDefinition.

        The property references for the Related Profile of the Relationship.

        :param related_profile_property_references: The related_profile_property_references of this RelationshipLinkDefinition.
        :type related_profile_property_references: List[ParticipantProfilePropertyReference]
        """
        if related_profile_property_references is None:
            raise ValueError("Invalid value for `related_profile_property_references`, must not be `None`")

        self._related_profile_property_references = related_profile_property_references

    @property
    def relationship_guid_id(self):
        """Gets the relationship_guid_id of this RelationshipLinkDefinition.

        The relationship guid id.

        :return: The relationship_guid_id of this RelationshipLinkDefinition.
        :rtype: str
        """
        return self._relationship_guid_id

    @relationship_guid_id.setter
    def relationship_guid_id(self, relationship_guid_id):
        """Sets the relationship_guid_id of this RelationshipLinkDefinition.

        The relationship guid id.

        :param relationship_guid_id: The relationship_guid_id of this RelationshipLinkDefinition.
        :type relationship_guid_id: str
        """

        self._relationship_guid_id = relationship_guid_id

    @property
    def relationship_name(self):
        """Gets the relationship_name of this RelationshipLinkDefinition.

        The Relationship associated with the Link.

        :return: The relationship_name of this RelationshipLinkDefinition.
        :rtype: str
        """
        return self._relationship_name

    @relationship_name.setter
    def relationship_name(self, relationship_name):
        """Sets the relationship_name of this RelationshipLinkDefinition.

        The Relationship associated with the Link.

        :param relationship_name: The relationship_name of this RelationshipLinkDefinition.
        :type relationship_name: str
        """
        if relationship_name is None:
            raise ValueError("Invalid value for `relationship_name`, must not be `None`")

        self._relationship_name = relationship_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this RelationshipLinkDefinition.

        The hub name.

        :return: The tenant_id of this RelationshipLinkDefinition.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this RelationshipLinkDefinition.

        The hub name.

        :param tenant_id: The tenant_id of this RelationshipLinkDefinition.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
