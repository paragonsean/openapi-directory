# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PredictionDistributionDefinitionDistributionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, negatives: int=None, negatives_above_threshold: int=None, positives: int=None, positives_above_threshold: int=None, score_threshold: int=None):
        """PredictionDistributionDefinitionDistributionsInner - a model defined in OpenAPI

        :param negatives: The negatives of this PredictionDistributionDefinitionDistributionsInner.
        :param negatives_above_threshold: The negatives_above_threshold of this PredictionDistributionDefinitionDistributionsInner.
        :param positives: The positives of this PredictionDistributionDefinitionDistributionsInner.
        :param positives_above_threshold: The positives_above_threshold of this PredictionDistributionDefinitionDistributionsInner.
        :param score_threshold: The score_threshold of this PredictionDistributionDefinitionDistributionsInner.
        """
        self.openapi_types = {
            'negatives': int,
            'negatives_above_threshold': int,
            'positives': int,
            'positives_above_threshold': int,
            'score_threshold': int
        }

        self.attribute_map = {
            'negatives': 'negatives',
            'negatives_above_threshold': 'negativesAboveThreshold',
            'positives': 'positives',
            'positives_above_threshold': 'positivesAboveThreshold',
            'score_threshold': 'scoreThreshold'
        }

        self._negatives = negatives
        self._negatives_above_threshold = negatives_above_threshold
        self._positives = positives
        self._positives_above_threshold = positives_above_threshold
        self._score_threshold = score_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictionDistributionDefinitionDistributionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PredictionDistributionDefinition_distributions_inner of this PredictionDistributionDefinitionDistributionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def negatives(self):
        """Gets the negatives of this PredictionDistributionDefinitionDistributionsInner.

        Number of negatives.

        :return: The negatives of this PredictionDistributionDefinitionDistributionsInner.
        :rtype: int
        """
        return self._negatives

    @negatives.setter
    def negatives(self, negatives):
        """Sets the negatives of this PredictionDistributionDefinitionDistributionsInner.

        Number of negatives.

        :param negatives: The negatives of this PredictionDistributionDefinitionDistributionsInner.
        :type negatives: int
        """

        self._negatives = negatives

    @property
    def negatives_above_threshold(self):
        """Gets the negatives_above_threshold of this PredictionDistributionDefinitionDistributionsInner.

        Number of negatives above threshold.

        :return: The negatives_above_threshold of this PredictionDistributionDefinitionDistributionsInner.
        :rtype: int
        """
        return self._negatives_above_threshold

    @negatives_above_threshold.setter
    def negatives_above_threshold(self, negatives_above_threshold):
        """Sets the negatives_above_threshold of this PredictionDistributionDefinitionDistributionsInner.

        Number of negatives above threshold.

        :param negatives_above_threshold: The negatives_above_threshold of this PredictionDistributionDefinitionDistributionsInner.
        :type negatives_above_threshold: int
        """

        self._negatives_above_threshold = negatives_above_threshold

    @property
    def positives(self):
        """Gets the positives of this PredictionDistributionDefinitionDistributionsInner.

        Number of positives.

        :return: The positives of this PredictionDistributionDefinitionDistributionsInner.
        :rtype: int
        """
        return self._positives

    @positives.setter
    def positives(self, positives):
        """Sets the positives of this PredictionDistributionDefinitionDistributionsInner.

        Number of positives.

        :param positives: The positives of this PredictionDistributionDefinitionDistributionsInner.
        :type positives: int
        """

        self._positives = positives

    @property
    def positives_above_threshold(self):
        """Gets the positives_above_threshold of this PredictionDistributionDefinitionDistributionsInner.

        Number of positives above threshold.

        :return: The positives_above_threshold of this PredictionDistributionDefinitionDistributionsInner.
        :rtype: int
        """
        return self._positives_above_threshold

    @positives_above_threshold.setter
    def positives_above_threshold(self, positives_above_threshold):
        """Sets the positives_above_threshold of this PredictionDistributionDefinitionDistributionsInner.

        Number of positives above threshold.

        :param positives_above_threshold: The positives_above_threshold of this PredictionDistributionDefinitionDistributionsInner.
        :type positives_above_threshold: int
        """

        self._positives_above_threshold = positives_above_threshold

    @property
    def score_threshold(self):
        """Gets the score_threshold of this PredictionDistributionDefinitionDistributionsInner.

        Score threshold.

        :return: The score_threshold of this PredictionDistributionDefinitionDistributionsInner.
        :rtype: int
        """
        return self._score_threshold

    @score_threshold.setter
    def score_threshold(self, score_threshold):
        """Sets the score_threshold of this PredictionDistributionDefinitionDistributionsInner.

        Score threshold.

        :param score_threshold: The score_threshold of this PredictionDistributionDefinitionDistributionsInner.
        :type score_threshold: int
        """

        self._score_threshold = score_threshold
