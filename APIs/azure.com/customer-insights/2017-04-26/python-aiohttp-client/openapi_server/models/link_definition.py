# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant_property_reference import ParticipantPropertyReference
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server.models.type_properties_mapping import TypePropertiesMapping
from openapi_server import util


class LinkDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: Dict[str, str]=None, display_name: Dict[str, str]=None, link_name: str=None, mappings: List[TypePropertiesMapping]=None, operation_type: str=None, participant_property_references: List[ParticipantPropertyReference]=None, provisioning_state: ProvisioningState=None, reference_only: bool=None, source_entity_type: str=None, source_entity_type_name: str=None, target_entity_type: str=None, target_entity_type_name: str=None, tenant_id: str=None):
        """LinkDefinition - a model defined in OpenAPI

        :param description: The description of this LinkDefinition.
        :param display_name: The display_name of this LinkDefinition.
        :param link_name: The link_name of this LinkDefinition.
        :param mappings: The mappings of this LinkDefinition.
        :param operation_type: The operation_type of this LinkDefinition.
        :param participant_property_references: The participant_property_references of this LinkDefinition.
        :param provisioning_state: The provisioning_state of this LinkDefinition.
        :param reference_only: The reference_only of this LinkDefinition.
        :param source_entity_type: The source_entity_type of this LinkDefinition.
        :param source_entity_type_name: The source_entity_type_name of this LinkDefinition.
        :param target_entity_type: The target_entity_type of this LinkDefinition.
        :param target_entity_type_name: The target_entity_type_name of this LinkDefinition.
        :param tenant_id: The tenant_id of this LinkDefinition.
        """
        self.openapi_types = {
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'link_name': str,
            'mappings': List[TypePropertiesMapping],
            'operation_type': str,
            'participant_property_references': List[ParticipantPropertyReference],
            'provisioning_state': ProvisioningState,
            'reference_only': bool,
            'source_entity_type': str,
            'source_entity_type_name': str,
            'target_entity_type': str,
            'target_entity_type_name': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'link_name': 'linkName',
            'mappings': 'mappings',
            'operation_type': 'operationType',
            'participant_property_references': 'participantPropertyReferences',
            'provisioning_state': 'provisioningState',
            'reference_only': 'referenceOnly',
            'source_entity_type': 'sourceEntityType',
            'source_entity_type_name': 'sourceEntityTypeName',
            'target_entity_type': 'targetEntityType',
            'target_entity_type_name': 'targetEntityTypeName',
            'tenant_id': 'tenantId'
        }

        self._description = description
        self._display_name = display_name
        self._link_name = link_name
        self._mappings = mappings
        self._operation_type = operation_type
        self._participant_property_references = participant_property_references
        self._provisioning_state = provisioning_state
        self._reference_only = reference_only
        self._source_entity_type = source_entity_type
        self._source_entity_type_name = source_entity_type_name
        self._target_entity_type = target_entity_type
        self._target_entity_type_name = target_entity_type_name
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinkDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinkDefinition of this LinkDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this LinkDefinition.

        Localized descriptions for the Link.

        :return: The description of this LinkDefinition.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LinkDefinition.

        Localized descriptions for the Link.

        :param description: The description of this LinkDefinition.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this LinkDefinition.

        Localized display name for the Link.

        :return: The display_name of this LinkDefinition.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LinkDefinition.

        Localized display name for the Link.

        :param display_name: The display_name of this LinkDefinition.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def link_name(self):
        """Gets the link_name of this LinkDefinition.

        The link name.

        :return: The link_name of this LinkDefinition.
        :rtype: str
        """
        return self._link_name

    @link_name.setter
    def link_name(self, link_name):
        """Sets the link_name of this LinkDefinition.

        The link name.

        :param link_name: The link_name of this LinkDefinition.
        :type link_name: str
        """

        self._link_name = link_name

    @property
    def mappings(self):
        """Gets the mappings of this LinkDefinition.

        The set of properties mappings between the source and target Types.

        :return: The mappings of this LinkDefinition.
        :rtype: List[TypePropertiesMapping]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this LinkDefinition.

        The set of properties mappings between the source and target Types.

        :param mappings: The mappings of this LinkDefinition.
        :type mappings: List[TypePropertiesMapping]
        """

        self._mappings = mappings

    @property
    def operation_type(self):
        """Gets the operation_type of this LinkDefinition.

        Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.

        :return: The operation_type of this LinkDefinition.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this LinkDefinition.

        Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.

        :param operation_type: The operation_type of this LinkDefinition.
        :type operation_type: str
        """
        allowed_values = ["Upsert", "Delete"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def participant_property_references(self):
        """Gets the participant_property_references of this LinkDefinition.

        The properties that represent the participating profile.

        :return: The participant_property_references of this LinkDefinition.
        :rtype: List[ParticipantPropertyReference]
        """
        return self._participant_property_references

    @participant_property_references.setter
    def participant_property_references(self, participant_property_references):
        """Sets the participant_property_references of this LinkDefinition.

        The properties that represent the participating profile.

        :param participant_property_references: The participant_property_references of this LinkDefinition.
        :type participant_property_references: List[ParticipantPropertyReference]
        """
        if participant_property_references is None:
            raise ValueError("Invalid value for `participant_property_references`, must not be `None`")

        self._participant_property_references = participant_property_references

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LinkDefinition.


        :return: The provisioning_state of this LinkDefinition.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LinkDefinition.


        :param provisioning_state: The provisioning_state of this LinkDefinition.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def reference_only(self):
        """Gets the reference_only of this LinkDefinition.

        Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.

        :return: The reference_only of this LinkDefinition.
        :rtype: bool
        """
        return self._reference_only

    @reference_only.setter
    def reference_only(self, reference_only):
        """Sets the reference_only of this LinkDefinition.

        Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.

        :param reference_only: The reference_only of this LinkDefinition.
        :type reference_only: bool
        """

        self._reference_only = reference_only

    @property
    def source_entity_type(self):
        """Gets the source_entity_type of this LinkDefinition.

        Type of source entity.

        :return: The source_entity_type of this LinkDefinition.
        :rtype: str
        """
        return self._source_entity_type

    @source_entity_type.setter
    def source_entity_type(self, source_entity_type):
        """Sets the source_entity_type of this LinkDefinition.

        Type of source entity.

        :param source_entity_type: The source_entity_type of this LinkDefinition.
        :type source_entity_type: str
        """
        allowed_values = ["None", "Profile", "Interaction", "Relationship"]  # noqa: E501
        if source_entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_entity_type` ({0}), must be one of {1}"
                .format(source_entity_type, allowed_values)
            )

        self._source_entity_type = source_entity_type

    @property
    def source_entity_type_name(self):
        """Gets the source_entity_type_name of this LinkDefinition.

        Name of the source Entity Type.

        :return: The source_entity_type_name of this LinkDefinition.
        :rtype: str
        """
        return self._source_entity_type_name

    @source_entity_type_name.setter
    def source_entity_type_name(self, source_entity_type_name):
        """Sets the source_entity_type_name of this LinkDefinition.

        Name of the source Entity Type.

        :param source_entity_type_name: The source_entity_type_name of this LinkDefinition.
        :type source_entity_type_name: str
        """
        if source_entity_type_name is None:
            raise ValueError("Invalid value for `source_entity_type_name`, must not be `None`")

        self._source_entity_type_name = source_entity_type_name

    @property
    def target_entity_type(self):
        """Gets the target_entity_type of this LinkDefinition.

        Type of target entity.

        :return: The target_entity_type of this LinkDefinition.
        :rtype: str
        """
        return self._target_entity_type

    @target_entity_type.setter
    def target_entity_type(self, target_entity_type):
        """Sets the target_entity_type of this LinkDefinition.

        Type of target entity.

        :param target_entity_type: The target_entity_type of this LinkDefinition.
        :type target_entity_type: str
        """
        allowed_values = ["None", "Profile", "Interaction", "Relationship"]  # noqa: E501
        if target_entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_entity_type` ({0}), must be one of {1}"
                .format(target_entity_type, allowed_values)
            )

        self._target_entity_type = target_entity_type

    @property
    def target_entity_type_name(self):
        """Gets the target_entity_type_name of this LinkDefinition.

        Name of the target Entity Type.

        :return: The target_entity_type_name of this LinkDefinition.
        :rtype: str
        """
        return self._target_entity_type_name

    @target_entity_type_name.setter
    def target_entity_type_name(self, target_entity_type_name):
        """Sets the target_entity_type_name of this LinkDefinition.

        Name of the target Entity Type.

        :param target_entity_type_name: The target_entity_type_name of this LinkDefinition.
        :type target_entity_type_name: str
        """
        if target_entity_type_name is None:
            raise ValueError("Invalid value for `target_entity_type_name`, must not be `None`")

        self._target_entity_type_name = target_entity_type_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this LinkDefinition.

        The hub name.

        :return: The tenant_id of this LinkDefinition.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this LinkDefinition.

        The hub name.

        :param tenant_id: The tenant_id of this LinkDefinition.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
