# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_precedence import DataSourcePrecedence
from openapi_server.models.profile_enum_valid_values_format import ProfileEnumValidValuesFormat
from openapi_server import util


class PropertyDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, array_value_separator: str=None, data_source_precedence_rules: List[DataSourcePrecedence]=None, enum_valid_values: List[ProfileEnumValidValuesFormat]=None, field_name: str=None, field_type: str=None, is_array: bool=None, is_available_in_graph: bool=None, is_enum: bool=None, is_flag_enum: bool=None, is_image: bool=None, is_localized_string: bool=None, is_name: bool=None, is_required: bool=None, max_length: int=None, property_id: str=None, schema_item_prop_link: str=None):
        """PropertyDefinition - a model defined in OpenAPI

        :param array_value_separator: The array_value_separator of this PropertyDefinition.
        :param data_source_precedence_rules: The data_source_precedence_rules of this PropertyDefinition.
        :param enum_valid_values: The enum_valid_values of this PropertyDefinition.
        :param field_name: The field_name of this PropertyDefinition.
        :param field_type: The field_type of this PropertyDefinition.
        :param is_array: The is_array of this PropertyDefinition.
        :param is_available_in_graph: The is_available_in_graph of this PropertyDefinition.
        :param is_enum: The is_enum of this PropertyDefinition.
        :param is_flag_enum: The is_flag_enum of this PropertyDefinition.
        :param is_image: The is_image of this PropertyDefinition.
        :param is_localized_string: The is_localized_string of this PropertyDefinition.
        :param is_name: The is_name of this PropertyDefinition.
        :param is_required: The is_required of this PropertyDefinition.
        :param max_length: The max_length of this PropertyDefinition.
        :param property_id: The property_id of this PropertyDefinition.
        :param schema_item_prop_link: The schema_item_prop_link of this PropertyDefinition.
        """
        self.openapi_types = {
            'array_value_separator': str,
            'data_source_precedence_rules': List[DataSourcePrecedence],
            'enum_valid_values': List[ProfileEnumValidValuesFormat],
            'field_name': str,
            'field_type': str,
            'is_array': bool,
            'is_available_in_graph': bool,
            'is_enum': bool,
            'is_flag_enum': bool,
            'is_image': bool,
            'is_localized_string': bool,
            'is_name': bool,
            'is_required': bool,
            'max_length': int,
            'property_id': str,
            'schema_item_prop_link': str
        }

        self.attribute_map = {
            'array_value_separator': 'arrayValueSeparator',
            'data_source_precedence_rules': 'dataSourcePrecedenceRules',
            'enum_valid_values': 'enumValidValues',
            'field_name': 'fieldName',
            'field_type': 'fieldType',
            'is_array': 'isArray',
            'is_available_in_graph': 'isAvailableInGraph',
            'is_enum': 'isEnum',
            'is_flag_enum': 'isFlagEnum',
            'is_image': 'isImage',
            'is_localized_string': 'isLocalizedString',
            'is_name': 'isName',
            'is_required': 'isRequired',
            'max_length': 'maxLength',
            'property_id': 'propertyId',
            'schema_item_prop_link': 'schemaItemPropLink'
        }

        self._array_value_separator = array_value_separator
        self._data_source_precedence_rules = data_source_precedence_rules
        self._enum_valid_values = enum_valid_values
        self._field_name = field_name
        self._field_type = field_type
        self._is_array = is_array
        self._is_available_in_graph = is_available_in_graph
        self._is_enum = is_enum
        self._is_flag_enum = is_flag_enum
        self._is_image = is_image
        self._is_localized_string = is_localized_string
        self._is_name = is_name
        self._is_required = is_required
        self._max_length = max_length
        self._property_id = property_id
        self._schema_item_prop_link = schema_item_prop_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyDefinition of this PropertyDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def array_value_separator(self):
        """Gets the array_value_separator of this PropertyDefinition.

        Array value separator for properties with isArray set.

        :return: The array_value_separator of this PropertyDefinition.
        :rtype: str
        """
        return self._array_value_separator

    @array_value_separator.setter
    def array_value_separator(self, array_value_separator):
        """Sets the array_value_separator of this PropertyDefinition.

        Array value separator for properties with isArray set.

        :param array_value_separator: The array_value_separator of this PropertyDefinition.
        :type array_value_separator: str
        """

        self._array_value_separator = array_value_separator

    @property
    def data_source_precedence_rules(self):
        """Gets the data_source_precedence_rules of this PropertyDefinition.

        This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.

        :return: The data_source_precedence_rules of this PropertyDefinition.
        :rtype: List[DataSourcePrecedence]
        """
        return self._data_source_precedence_rules

    @data_source_precedence_rules.setter
    def data_source_precedence_rules(self, data_source_precedence_rules):
        """Sets the data_source_precedence_rules of this PropertyDefinition.

        This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.

        :param data_source_precedence_rules: The data_source_precedence_rules of this PropertyDefinition.
        :type data_source_precedence_rules: List[DataSourcePrecedence]
        """

        self._data_source_precedence_rules = data_source_precedence_rules

    @property
    def enum_valid_values(self):
        """Gets the enum_valid_values of this PropertyDefinition.

        Describes valid values for an enum property.

        :return: The enum_valid_values of this PropertyDefinition.
        :rtype: List[ProfileEnumValidValuesFormat]
        """
        return self._enum_valid_values

    @enum_valid_values.setter
    def enum_valid_values(self, enum_valid_values):
        """Sets the enum_valid_values of this PropertyDefinition.

        Describes valid values for an enum property.

        :param enum_valid_values: The enum_valid_values of this PropertyDefinition.
        :type enum_valid_values: List[ProfileEnumValidValuesFormat]
        """

        self._enum_valid_values = enum_valid_values

    @property
    def field_name(self):
        """Gets the field_name of this PropertyDefinition.

        Name of the property.

        :return: The field_name of this PropertyDefinition.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this PropertyDefinition.

        Name of the property.

        :param field_name: The field_name of this PropertyDefinition.
        :type field_name: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")

        self._field_name = field_name

    @property
    def field_type(self):
        """Gets the field_type of this PropertyDefinition.

        Type of the property.

        :return: The field_type of this PropertyDefinition.
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this PropertyDefinition.

        Type of the property.

        :param field_type: The field_type of this PropertyDefinition.
        :type field_type: str
        """
        if field_type is None:
            raise ValueError("Invalid value for `field_type`, must not be `None`")

        self._field_type = field_type

    @property
    def is_array(self):
        """Gets the is_array of this PropertyDefinition.

        Indicates if the property is actually an array of the fieldType above on the data api.

        :return: The is_array of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_array

    @is_array.setter
    def is_array(self, is_array):
        """Sets the is_array of this PropertyDefinition.

        Indicates if the property is actually an array of the fieldType above on the data api.

        :param is_array: The is_array of this PropertyDefinition.
        :type is_array: bool
        """

        self._is_array = is_array

    @property
    def is_available_in_graph(self):
        """Gets the is_available_in_graph of this PropertyDefinition.

        Whether property is available in graph or not.

        :return: The is_available_in_graph of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_available_in_graph

    @is_available_in_graph.setter
    def is_available_in_graph(self, is_available_in_graph):
        """Sets the is_available_in_graph of this PropertyDefinition.

        Whether property is available in graph or not.

        :param is_available_in_graph: The is_available_in_graph of this PropertyDefinition.
        :type is_available_in_graph: bool
        """

        self._is_available_in_graph = is_available_in_graph

    @property
    def is_enum(self):
        """Gets the is_enum of this PropertyDefinition.

        Indicates if the property is an enum.

        :return: The is_enum of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_enum

    @is_enum.setter
    def is_enum(self, is_enum):
        """Sets the is_enum of this PropertyDefinition.

        Indicates if the property is an enum.

        :param is_enum: The is_enum of this PropertyDefinition.
        :type is_enum: bool
        """

        self._is_enum = is_enum

    @property
    def is_flag_enum(self):
        """Gets the is_flag_enum of this PropertyDefinition.

        Indicates if the property is an flag enum.

        :return: The is_flag_enum of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_flag_enum

    @is_flag_enum.setter
    def is_flag_enum(self, is_flag_enum):
        """Sets the is_flag_enum of this PropertyDefinition.

        Indicates if the property is an flag enum.

        :param is_flag_enum: The is_flag_enum of this PropertyDefinition.
        :type is_flag_enum: bool
        """

        self._is_flag_enum = is_flag_enum

    @property
    def is_image(self):
        """Gets the is_image of this PropertyDefinition.

        Whether the property is an Image.

        :return: The is_image of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_image

    @is_image.setter
    def is_image(self, is_image):
        """Sets the is_image of this PropertyDefinition.

        Whether the property is an Image.

        :param is_image: The is_image of this PropertyDefinition.
        :type is_image: bool
        """

        self._is_image = is_image

    @property
    def is_localized_string(self):
        """Gets the is_localized_string of this PropertyDefinition.

        Whether the property is a localized string.

        :return: The is_localized_string of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_localized_string

    @is_localized_string.setter
    def is_localized_string(self, is_localized_string):
        """Sets the is_localized_string of this PropertyDefinition.

        Whether the property is a localized string.

        :param is_localized_string: The is_localized_string of this PropertyDefinition.
        :type is_localized_string: bool
        """

        self._is_localized_string = is_localized_string

    @property
    def is_name(self):
        """Gets the is_name of this PropertyDefinition.

        Whether the property is a name or a part of name.

        :return: The is_name of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_name

    @is_name.setter
    def is_name(self, is_name):
        """Sets the is_name of this PropertyDefinition.

        Whether the property is a name or a part of name.

        :param is_name: The is_name of this PropertyDefinition.
        :type is_name: bool
        """

        self._is_name = is_name

    @property
    def is_required(self):
        """Gets the is_required of this PropertyDefinition.

        Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.

        :return: The is_required of this PropertyDefinition.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this PropertyDefinition.

        Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.

        :param is_required: The is_required of this PropertyDefinition.
        :type is_required: bool
        """

        self._is_required = is_required

    @property
    def max_length(self):
        """Gets the max_length of this PropertyDefinition.

        Max length of string. Used only if type is string.

        :return: The max_length of this PropertyDefinition.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this PropertyDefinition.

        Max length of string. Used only if type is string.

        :param max_length: The max_length of this PropertyDefinition.
        :type max_length: int
        """

        self._max_length = max_length

    @property
    def property_id(self):
        """Gets the property_id of this PropertyDefinition.

        The ID associated with the property.

        :return: The property_id of this PropertyDefinition.
        :rtype: str
        """
        return self._property_id

    @property_id.setter
    def property_id(self, property_id):
        """Sets the property_id of this PropertyDefinition.

        The ID associated with the property.

        :param property_id: The property_id of this PropertyDefinition.
        :type property_id: str
        """

        self._property_id = property_id

    @property
    def schema_item_prop_link(self):
        """Gets the schema_item_prop_link of this PropertyDefinition.

        URL encoded schema.org item prop link for the property.

        :return: The schema_item_prop_link of this PropertyDefinition.
        :rtype: str
        """
        return self._schema_item_prop_link

    @schema_item_prop_link.setter
    def schema_item_prop_link(self, schema_item_prop_link):
        """Sets the schema_item_prop_link of this PropertyDefinition.

        URL encoded schema.org item prop link for the property.

        :param schema_item_prop_link: The schema_item_prop_link of this PropertyDefinition.
        :type schema_item_prop_link: str
        """

        self._schema_item_prop_link = schema_item_prop_link
