# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permission_types import PermissionTypes
from openapi_server import util


class AuthorizationPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permissions: list[PermissionTypes]=None, policy_name: str=None, primary_key: str=None, secondary_key: str=None):
        """AuthorizationPolicy - a model defined in OpenAPI

        :param permissions: The permissions of this AuthorizationPolicy.
        :param policy_name: The policy_name of this AuthorizationPolicy.
        :param primary_key: The primary_key of this AuthorizationPolicy.
        :param secondary_key: The secondary_key of this AuthorizationPolicy.
        """
        self.openapi_types = {
            'permissions': list[PermissionTypes],
            'policy_name': str,
            'primary_key': str,
            'secondary_key': str
        }

        self.attribute_map = {
            'permissions': 'permissions',
            'policy_name': 'policyName',
            'primary_key': 'primaryKey',
            'secondary_key': 'secondaryKey'
        }

        self._permissions = permissions
        self._policy_name = policy_name
        self._primary_key = primary_key
        self._secondary_key = secondary_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizationPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizationPolicy of this AuthorizationPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permissions(self):
        """Gets the permissions of this AuthorizationPolicy.

        The permissions associated with the policy.

        :return: The permissions of this AuthorizationPolicy.
        :rtype: list[PermissionTypes]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AuthorizationPolicy.

        The permissions associated with the policy.

        :param permissions: The permissions of this AuthorizationPolicy.
        :type permissions: list[PermissionTypes]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def policy_name(self):
        """Gets the policy_name of this AuthorizationPolicy.

        Name of the policy.

        :return: The policy_name of this AuthorizationPolicy.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this AuthorizationPolicy.

        Name of the policy.

        :param policy_name: The policy_name of this AuthorizationPolicy.
        :type policy_name: str
        """

        self._policy_name = policy_name

    @property
    def primary_key(self):
        """Gets the primary_key of this AuthorizationPolicy.

        Primary key associated with the policy.

        :return: The primary_key of this AuthorizationPolicy.
        :rtype: str
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this AuthorizationPolicy.

        Primary key associated with the policy.

        :param primary_key: The primary_key of this AuthorizationPolicy.
        :type primary_key: str
        """

        self._primary_key = primary_key

    @property
    def secondary_key(self):
        """Gets the secondary_key of this AuthorizationPolicy.

        Secondary key associated with the policy.

        :return: The secondary_key of this AuthorizationPolicy.
        :rtype: str
        """
        return self._secondary_key

    @secondary_key.setter
    def secondary_key(self, secondary_key):
        """Sets the secondary_key of this AuthorizationPolicy.

        Secondary key associated with the policy.

        :param secondary_key: The secondary_key of this AuthorizationPolicy.
        :type secondary_key: str
        """

        self._secondary_key = secondary_key
