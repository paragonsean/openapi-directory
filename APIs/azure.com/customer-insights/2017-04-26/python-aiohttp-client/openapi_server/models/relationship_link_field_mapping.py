# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelationshipLinkFieldMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interaction_field_name: str=None, link_type: str=None, relationship_field_name: str=None):
        """RelationshipLinkFieldMapping - a model defined in OpenAPI

        :param interaction_field_name: The interaction_field_name of this RelationshipLinkFieldMapping.
        :param link_type: The link_type of this RelationshipLinkFieldMapping.
        :param relationship_field_name: The relationship_field_name of this RelationshipLinkFieldMapping.
        """
        self.openapi_types = {
            'interaction_field_name': str,
            'link_type': str,
            'relationship_field_name': str
        }

        self.attribute_map = {
            'interaction_field_name': 'interactionFieldName',
            'link_type': 'linkType',
            'relationship_field_name': 'relationshipFieldName'
        }

        self._interaction_field_name = interaction_field_name
        self._link_type = link_type
        self._relationship_field_name = relationship_field_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationshipLinkFieldMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationshipLinkFieldMapping of this RelationshipLinkFieldMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interaction_field_name(self):
        """Gets the interaction_field_name of this RelationshipLinkFieldMapping.

        The field name on the Interaction Type.

        :return: The interaction_field_name of this RelationshipLinkFieldMapping.
        :rtype: str
        """
        return self._interaction_field_name

    @interaction_field_name.setter
    def interaction_field_name(self, interaction_field_name):
        """Sets the interaction_field_name of this RelationshipLinkFieldMapping.

        The field name on the Interaction Type.

        :param interaction_field_name: The interaction_field_name of this RelationshipLinkFieldMapping.
        :type interaction_field_name: str
        """
        if interaction_field_name is None:
            raise ValueError("Invalid value for `interaction_field_name`, must not be `None`")

        self._interaction_field_name = interaction_field_name

    @property
    def link_type(self):
        """Gets the link_type of this RelationshipLinkFieldMapping.

        Link type.

        :return: The link_type of this RelationshipLinkFieldMapping.
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this RelationshipLinkFieldMapping.

        Link type.

        :param link_type: The link_type of this RelationshipLinkFieldMapping.
        :type link_type: str
        """
        allowed_values = ["UpdateAlways", "CopyIfNull"]  # noqa: E501
        if link_type not in allowed_values:
            raise ValueError(
                "Invalid value for `link_type` ({0}), must be one of {1}"
                .format(link_type, allowed_values)
            )

        self._link_type = link_type

    @property
    def relationship_field_name(self):
        """Gets the relationship_field_name of this RelationshipLinkFieldMapping.

        The field name on the Relationship metadata.

        :return: The relationship_field_name of this RelationshipLinkFieldMapping.
        :rtype: str
        """
        return self._relationship_field_name

    @relationship_field_name.setter
    def relationship_field_name(self, relationship_field_name):
        """Sets the relationship_field_name of this RelationshipLinkFieldMapping.

        The field name on the Relationship metadata.

        :param relationship_field_name: The relationship_field_name of this RelationshipLinkFieldMapping.
        :type relationship_field_name: str
        """
        if relationship_field_name is None:
            raise ValueError("Invalid value for `relationship_field_name`, must not be `None`")

        self._relationship_field_name = relationship_field_name
