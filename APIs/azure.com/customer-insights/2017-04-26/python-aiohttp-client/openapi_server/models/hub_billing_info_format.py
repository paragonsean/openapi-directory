# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HubBillingInfoFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_units: int=None, min_units: int=None, sku_name: str=None):
        """HubBillingInfoFormat - a model defined in OpenAPI

        :param max_units: The max_units of this HubBillingInfoFormat.
        :param min_units: The min_units of this HubBillingInfoFormat.
        :param sku_name: The sku_name of this HubBillingInfoFormat.
        """
        self.openapi_types = {
            'max_units': int,
            'min_units': int,
            'sku_name': str
        }

        self.attribute_map = {
            'max_units': 'maxUnits',
            'min_units': 'minUnits',
            'sku_name': 'skuName'
        }

        self._max_units = max_units
        self._min_units = min_units
        self._sku_name = sku_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HubBillingInfoFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HubBillingInfoFormat of this HubBillingInfoFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_units(self):
        """Gets the max_units of this HubBillingInfoFormat.

        The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.

        :return: The max_units of this HubBillingInfoFormat.
        :rtype: int
        """
        return self._max_units

    @max_units.setter
    def max_units(self, max_units):
        """Sets the max_units of this HubBillingInfoFormat.

        The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.

        :param max_units: The max_units of this HubBillingInfoFormat.
        :type max_units: int
        """
        if max_units is not None and max_units > 10:
            raise ValueError("Invalid value for `max_units`, must be a value less than or equal to `10`")
        if max_units is not None and max_units < 1:
            raise ValueError("Invalid value for `max_units`, must be a value greater than or equal to `1`")

        self._max_units = max_units

    @property
    def min_units(self):
        """Gets the min_units of this HubBillingInfoFormat.

        The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.

        :return: The min_units of this HubBillingInfoFormat.
        :rtype: int
        """
        return self._min_units

    @min_units.setter
    def min_units(self, min_units):
        """Sets the min_units of this HubBillingInfoFormat.

        The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.

        :param min_units: The min_units of this HubBillingInfoFormat.
        :type min_units: int
        """
        if min_units is not None and min_units > 10:
            raise ValueError("Invalid value for `min_units`, must be a value less than or equal to `10`")
        if min_units is not None and min_units < 1:
            raise ValueError("Invalid value for `min_units`, must be a value greater than or equal to `1`")

        self._min_units = min_units

    @property
    def sku_name(self):
        """Gets the sku_name of this HubBillingInfoFormat.

        The sku name.

        :return: The sku_name of this HubBillingInfoFormat.
        :rtype: str
        """
        return self._sku_name

    @sku_name.setter
    def sku_name(self, sku_name):
        """Sets the sku_name of this HubBillingInfoFormat.

        The sku name.

        :param sku_name: The sku_name of this HubBillingInfoFormat.
        :type sku_name: str
        """

        self._sku_name = sku_name
