# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PredictionModelStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, model_version: str=None, prediction_guid_id: str=None, prediction_name: str=None, signals_used: int=None, status: str=None, tenant_id: str=None, test_set_count: int=None, training_accuracy: int=None, training_set_count: int=None, validation_set_count: int=None):
        """PredictionModelStatus - a model defined in OpenAPI

        :param message: The message of this PredictionModelStatus.
        :param model_version: The model_version of this PredictionModelStatus.
        :param prediction_guid_id: The prediction_guid_id of this PredictionModelStatus.
        :param prediction_name: The prediction_name of this PredictionModelStatus.
        :param signals_used: The signals_used of this PredictionModelStatus.
        :param status: The status of this PredictionModelStatus.
        :param tenant_id: The tenant_id of this PredictionModelStatus.
        :param test_set_count: The test_set_count of this PredictionModelStatus.
        :param training_accuracy: The training_accuracy of this PredictionModelStatus.
        :param training_set_count: The training_set_count of this PredictionModelStatus.
        :param validation_set_count: The validation_set_count of this PredictionModelStatus.
        """
        self.openapi_types = {
            'message': str,
            'model_version': str,
            'prediction_guid_id': str,
            'prediction_name': str,
            'signals_used': int,
            'status': str,
            'tenant_id': str,
            'test_set_count': int,
            'training_accuracy': int,
            'training_set_count': int,
            'validation_set_count': int
        }

        self.attribute_map = {
            'message': 'message',
            'model_version': 'modelVersion',
            'prediction_guid_id': 'predictionGuidId',
            'prediction_name': 'predictionName',
            'signals_used': 'signalsUsed',
            'status': 'status',
            'tenant_id': 'tenantId',
            'test_set_count': 'testSetCount',
            'training_accuracy': 'trainingAccuracy',
            'training_set_count': 'trainingSetCount',
            'validation_set_count': 'validationSetCount'
        }

        self._message = message
        self._model_version = model_version
        self._prediction_guid_id = prediction_guid_id
        self._prediction_name = prediction_name
        self._signals_used = signals_used
        self._status = status
        self._tenant_id = tenant_id
        self._test_set_count = test_set_count
        self._training_accuracy = training_accuracy
        self._training_set_count = training_set_count
        self._validation_set_count = validation_set_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictionModelStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PredictionModelStatus of this PredictionModelStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this PredictionModelStatus.

        The model status message.

        :return: The message of this PredictionModelStatus.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PredictionModelStatus.

        The model status message.

        :param message: The message of this PredictionModelStatus.
        :type message: str
        """

        self._message = message

    @property
    def model_version(self):
        """Gets the model_version of this PredictionModelStatus.

        Version of the model.

        :return: The model_version of this PredictionModelStatus.
        :rtype: str
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this PredictionModelStatus.

        Version of the model.

        :param model_version: The model_version of this PredictionModelStatus.
        :type model_version: str
        """

        self._model_version = model_version

    @property
    def prediction_guid_id(self):
        """Gets the prediction_guid_id of this PredictionModelStatus.

        The prediction GUID ID.

        :return: The prediction_guid_id of this PredictionModelStatus.
        :rtype: str
        """
        return self._prediction_guid_id

    @prediction_guid_id.setter
    def prediction_guid_id(self, prediction_guid_id):
        """Sets the prediction_guid_id of this PredictionModelStatus.

        The prediction GUID ID.

        :param prediction_guid_id: The prediction_guid_id of this PredictionModelStatus.
        :type prediction_guid_id: str
        """

        self._prediction_guid_id = prediction_guid_id

    @property
    def prediction_name(self):
        """Gets the prediction_name of this PredictionModelStatus.

        The prediction name.

        :return: The prediction_name of this PredictionModelStatus.
        :rtype: str
        """
        return self._prediction_name

    @prediction_name.setter
    def prediction_name(self, prediction_name):
        """Sets the prediction_name of this PredictionModelStatus.

        The prediction name.

        :param prediction_name: The prediction_name of this PredictionModelStatus.
        :type prediction_name: str
        """

        self._prediction_name = prediction_name

    @property
    def signals_used(self):
        """Gets the signals_used of this PredictionModelStatus.

        The signals used.

        :return: The signals_used of this PredictionModelStatus.
        :rtype: int
        """
        return self._signals_used

    @signals_used.setter
    def signals_used(self, signals_used):
        """Sets the signals_used of this PredictionModelStatus.

        The signals used.

        :param signals_used: The signals_used of this PredictionModelStatus.
        :type signals_used: int
        """

        self._signals_used = signals_used

    @property
    def status(self):
        """Gets the status of this PredictionModelStatus.

        Prediction model life cycle.  When prediction is in PendingModelConfirmation status, it is allowed to update the status to PendingFeaturing or Active through API.

        :return: The status of this PredictionModelStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PredictionModelStatus.

        Prediction model life cycle.  When prediction is in PendingModelConfirmation status, it is allowed to update the status to PendingFeaturing or Active through API.

        :param status: The status of this PredictionModelStatus.
        :type status: str
        """
        allowed_values = ["New", "Provisioning", "ProvisioningFailed", "PendingDiscovering", "Discovering", "PendingFeaturing", "Featuring", "FeaturingFailed", "PendingTraining", "Training", "TrainingFailed", "Evaluating", "EvaluatingFailed", "PendingModelConfirmation", "Active", "Deleted", "HumanIntervention", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tenant_id(self):
        """Gets the tenant_id of this PredictionModelStatus.

        The hub name.

        :return: The tenant_id of this PredictionModelStatus.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this PredictionModelStatus.

        The hub name.

        :param tenant_id: The tenant_id of this PredictionModelStatus.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def test_set_count(self):
        """Gets the test_set_count of this PredictionModelStatus.

        Count of the test set.

        :return: The test_set_count of this PredictionModelStatus.
        :rtype: int
        """
        return self._test_set_count

    @test_set_count.setter
    def test_set_count(self, test_set_count):
        """Sets the test_set_count of this PredictionModelStatus.

        Count of the test set.

        :param test_set_count: The test_set_count of this PredictionModelStatus.
        :type test_set_count: int
        """

        self._test_set_count = test_set_count

    @property
    def training_accuracy(self):
        """Gets the training_accuracy of this PredictionModelStatus.

        The training accuracy.

        :return: The training_accuracy of this PredictionModelStatus.
        :rtype: int
        """
        return self._training_accuracy

    @training_accuracy.setter
    def training_accuracy(self, training_accuracy):
        """Sets the training_accuracy of this PredictionModelStatus.

        The training accuracy.

        :param training_accuracy: The training_accuracy of this PredictionModelStatus.
        :type training_accuracy: int
        """

        self._training_accuracy = training_accuracy

    @property
    def training_set_count(self):
        """Gets the training_set_count of this PredictionModelStatus.

        Count of the training set.

        :return: The training_set_count of this PredictionModelStatus.
        :rtype: int
        """
        return self._training_set_count

    @training_set_count.setter
    def training_set_count(self, training_set_count):
        """Sets the training_set_count of this PredictionModelStatus.

        Count of the training set.

        :param training_set_count: The training_set_count of this PredictionModelStatus.
        :type training_set_count: int
        """

        self._training_set_count = training_set_count

    @property
    def validation_set_count(self):
        """Gets the validation_set_count of this PredictionModelStatus.

        Count of the validation set.

        :return: The validation_set_count of this PredictionModelStatus.
        :rtype: int
        """
        return self._validation_set_count

    @validation_set_count.setter
    def validation_set_count(self, validation_set_count):
        """Sets the validation_set_count of this PredictionModelStatus.

        Count of the validation set.

        :param validation_set_count: The validation_set_count of this PredictionModelStatus.
        :type validation_set_count: int
        """

        self._validation_set_count = validation_set_count
