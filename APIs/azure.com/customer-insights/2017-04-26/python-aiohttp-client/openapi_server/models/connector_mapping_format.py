# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorMappingFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_language: str=None, array_separator: str=None, column_delimiter: str=None, format_type: str=None, quote_character: str=None, quote_escape_character: str=None):
        """ConnectorMappingFormat - a model defined in OpenAPI

        :param accept_language: The accept_language of this ConnectorMappingFormat.
        :param array_separator: The array_separator of this ConnectorMappingFormat.
        :param column_delimiter: The column_delimiter of this ConnectorMappingFormat.
        :param format_type: The format_type of this ConnectorMappingFormat.
        :param quote_character: The quote_character of this ConnectorMappingFormat.
        :param quote_escape_character: The quote_escape_character of this ConnectorMappingFormat.
        """
        self.openapi_types = {
            'accept_language': str,
            'array_separator': str,
            'column_delimiter': str,
            'format_type': str,
            'quote_character': str,
            'quote_escape_character': str
        }

        self.attribute_map = {
            'accept_language': 'acceptLanguage',
            'array_separator': 'arraySeparator',
            'column_delimiter': 'columnDelimiter',
            'format_type': 'formatType',
            'quote_character': 'quoteCharacter',
            'quote_escape_character': 'quoteEscapeCharacter'
        }

        self._accept_language = accept_language
        self._array_separator = array_separator
        self._column_delimiter = column_delimiter
        self._format_type = format_type
        self._quote_character = quote_character
        self._quote_escape_character = quote_escape_character

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorMappingFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorMappingFormat of this ConnectorMappingFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_language(self):
        """Gets the accept_language of this ConnectorMappingFormat.

        The oData language.

        :return: The accept_language of this ConnectorMappingFormat.
        :rtype: str
        """
        return self._accept_language

    @accept_language.setter
    def accept_language(self, accept_language):
        """Sets the accept_language of this ConnectorMappingFormat.

        The oData language.

        :param accept_language: The accept_language of this ConnectorMappingFormat.
        :type accept_language: str
        """

        self._accept_language = accept_language

    @property
    def array_separator(self):
        """Gets the array_separator of this ConnectorMappingFormat.

        Character separating array elements.

        :return: The array_separator of this ConnectorMappingFormat.
        :rtype: str
        """
        return self._array_separator

    @array_separator.setter
    def array_separator(self, array_separator):
        """Sets the array_separator of this ConnectorMappingFormat.

        Character separating array elements.

        :param array_separator: The array_separator of this ConnectorMappingFormat.
        :type array_separator: str
        """

        self._array_separator = array_separator

    @property
    def column_delimiter(self):
        """Gets the column_delimiter of this ConnectorMappingFormat.

        The character that signifies a break between columns.

        :return: The column_delimiter of this ConnectorMappingFormat.
        :rtype: str
        """
        return self._column_delimiter

    @column_delimiter.setter
    def column_delimiter(self, column_delimiter):
        """Sets the column_delimiter of this ConnectorMappingFormat.

        The character that signifies a break between columns.

        :param column_delimiter: The column_delimiter of this ConnectorMappingFormat.
        :type column_delimiter: str
        """

        self._column_delimiter = column_delimiter

    @property
    def format_type(self):
        """Gets the format_type of this ConnectorMappingFormat.

        The type mapping format.

        :return: The format_type of this ConnectorMappingFormat.
        :rtype: str
        """
        return self._format_type

    @format_type.setter
    def format_type(self, format_type):
        """Sets the format_type of this ConnectorMappingFormat.

        The type mapping format.

        :param format_type: The format_type of this ConnectorMappingFormat.
        :type format_type: str
        """
        allowed_values = ["TextFormat"]  # noqa: E501
        if format_type not in allowed_values:
            raise ValueError(
                "Invalid value for `format_type` ({0}), must be one of {1}"
                .format(format_type, allowed_values)
            )

        self._format_type = format_type

    @property
    def quote_character(self):
        """Gets the quote_character of this ConnectorMappingFormat.

        Quote character, used to indicate enquoted fields.

        :return: The quote_character of this ConnectorMappingFormat.
        :rtype: str
        """
        return self._quote_character

    @quote_character.setter
    def quote_character(self, quote_character):
        """Sets the quote_character of this ConnectorMappingFormat.

        Quote character, used to indicate enquoted fields.

        :param quote_character: The quote_character of this ConnectorMappingFormat.
        :type quote_character: str
        """

        self._quote_character = quote_character

    @property
    def quote_escape_character(self):
        """Gets the quote_escape_character of this ConnectorMappingFormat.

        Escape character for quotes, can be the same as the quoteCharacter.

        :return: The quote_escape_character of this ConnectorMappingFormat.
        :rtype: str
        """
        return self._quote_escape_character

    @quote_escape_character.setter
    def quote_escape_character(self, quote_escape_character):
        """Sets the quote_escape_character of this ConnectorMappingFormat.

        Escape character for quotes, can be the same as the quoteCharacter.

        :param quote_escape_character: The quote_escape_character of this ConnectorMappingFormat.
        :type quote_escape_character: str
        """

        self._quote_escape_character = quote_escape_character
