# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.salesforce_discover_setting import SalesforceDiscoverSetting
from openapi_server.models.salesforce_table import SalesforceTable
from openapi_server import util


class SalesforceConnectorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, salesforcetables: List[SalesforceTable]=None, usersetting: SalesforceDiscoverSetting=None):
        """SalesforceConnectorProperties - a model defined in OpenAPI

        :param salesforcetables: The salesforcetables of this SalesforceConnectorProperties.
        :param usersetting: The usersetting of this SalesforceConnectorProperties.
        """
        self.openapi_types = {
            'salesforcetables': List[SalesforceTable],
            'usersetting': SalesforceDiscoverSetting
        }

        self.attribute_map = {
            'salesforcetables': 'salesforcetables',
            'usersetting': 'usersetting'
        }

        self._salesforcetables = salesforcetables
        self._usersetting = usersetting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SalesforceConnectorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SalesforceConnectorProperties of this SalesforceConnectorProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def salesforcetables(self):
        """Gets the salesforcetables of this SalesforceConnectorProperties.

        The Salesforce tables.

        :return: The salesforcetables of this SalesforceConnectorProperties.
        :rtype: List[SalesforceTable]
        """
        return self._salesforcetables

    @salesforcetables.setter
    def salesforcetables(self, salesforcetables):
        """Sets the salesforcetables of this SalesforceConnectorProperties.

        The Salesforce tables.

        :param salesforcetables: The salesforcetables of this SalesforceConnectorProperties.
        :type salesforcetables: List[SalesforceTable]
        """
        if salesforcetables is None:
            raise ValueError("Invalid value for `salesforcetables`, must not be `None`")

        self._salesforcetables = salesforcetables

    @property
    def usersetting(self):
        """Gets the usersetting of this SalesforceConnectorProperties.


        :return: The usersetting of this SalesforceConnectorProperties.
        :rtype: SalesforceDiscoverSetting
        """
        return self._usersetting

    @usersetting.setter
    def usersetting(self, usersetting):
        """Sets the usersetting of this SalesforceConnectorProperties.


        :param usersetting: The usersetting of this SalesforceConnectorProperties.
        :type usersetting: SalesforceDiscoverSetting
        """
        if usersetting is None:
            raise ValueError("Invalid value for `usersetting`, must not be `None`")

        self._usersetting = usersetting
