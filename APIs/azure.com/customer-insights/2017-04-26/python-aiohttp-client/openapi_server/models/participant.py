# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participant_property_reference import ParticipantPropertyReference
from openapi_server import util


class Participant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: Dict[str, str]=None, display_name: Dict[str, str]=None, participant_name: str=None, participant_property_references: List[ParticipantPropertyReference]=None, profile_type_name: str=None, role: str=None):
        """Participant - a model defined in OpenAPI

        :param description: The description of this Participant.
        :param display_name: The display_name of this Participant.
        :param participant_name: The participant_name of this Participant.
        :param participant_property_references: The participant_property_references of this Participant.
        :param profile_type_name: The profile_type_name of this Participant.
        :param role: The role of this Participant.
        """
        self.openapi_types = {
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'participant_name': str,
            'participant_property_references': List[ParticipantPropertyReference],
            'profile_type_name': str,
            'role': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'participant_name': 'participantName',
            'participant_property_references': 'participantPropertyReferences',
            'profile_type_name': 'profileTypeName',
            'role': 'role'
        }

        self._description = description
        self._display_name = display_name
        self._participant_name = participant_name
        self._participant_property_references = participant_property_references
        self._profile_type_name = profile_type_name
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Participant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Participant of this Participant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Participant.

        Localized descriptions.

        :return: The description of this Participant.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Participant.

        Localized descriptions.

        :param description: The description of this Participant.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Participant.

        Localized display name.

        :return: The display_name of this Participant.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Participant.

        Localized display name.

        :param display_name: The display_name of this Participant.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def participant_name(self):
        """Gets the participant_name of this Participant.

        Participant name.

        :return: The participant_name of this Participant.
        :rtype: str
        """
        return self._participant_name

    @participant_name.setter
    def participant_name(self, participant_name):
        """Sets the participant_name of this Participant.

        Participant name.

        :param participant_name: The participant_name of this Participant.
        :type participant_name: str
        """
        if participant_name is None:
            raise ValueError("Invalid value for `participant_name`, must not be `None`")

        self._participant_name = participant_name

    @property
    def participant_property_references(self):
        """Gets the participant_property_references of this Participant.

        The property references.

        :return: The participant_property_references of this Participant.
        :rtype: List[ParticipantPropertyReference]
        """
        return self._participant_property_references

    @participant_property_references.setter
    def participant_property_references(self, participant_property_references):
        """Sets the participant_property_references of this Participant.

        The property references.

        :param participant_property_references: The participant_property_references of this Participant.
        :type participant_property_references: List[ParticipantPropertyReference]
        """
        if participant_property_references is None:
            raise ValueError("Invalid value for `participant_property_references`, must not be `None`")

        self._participant_property_references = participant_property_references

    @property
    def profile_type_name(self):
        """Gets the profile_type_name of this Participant.

        Profile type name.

        :return: The profile_type_name of this Participant.
        :rtype: str
        """
        return self._profile_type_name

    @profile_type_name.setter
    def profile_type_name(self, profile_type_name):
        """Sets the profile_type_name of this Participant.

        Profile type name.

        :param profile_type_name: The profile_type_name of this Participant.
        :type profile_type_name: str
        """
        if profile_type_name is None:
            raise ValueError("Invalid value for `profile_type_name`, must not be `None`")

        self._profile_type_name = profile_type_name

    @property
    def role(self):
        """Gets the role of this Participant.

        The role that the participant is playing in the interaction.

        :return: The role of this Participant.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Participant.

        The role that the participant is playing in the interaction.

        :param role: The role of this Participant.
        :type role: str
        """

        self._role = role
