# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_type import ConnectorType
from openapi_server import util


class Connector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_id: int=None, connector_name: str=None, connector_properties: Dict[str, object]=None, connector_type: ConnectorType=None, created: datetime=None, description: str=None, display_name: str=None, is_internal: bool=None, last_modified: datetime=None, state: str=None, tenant_id: str=None):
        """Connector - a model defined in OpenAPI

        :param connector_id: The connector_id of this Connector.
        :param connector_name: The connector_name of this Connector.
        :param connector_properties: The connector_properties of this Connector.
        :param connector_type: The connector_type of this Connector.
        :param created: The created of this Connector.
        :param description: The description of this Connector.
        :param display_name: The display_name of this Connector.
        :param is_internal: The is_internal of this Connector.
        :param last_modified: The last_modified of this Connector.
        :param state: The state of this Connector.
        :param tenant_id: The tenant_id of this Connector.
        """
        self.openapi_types = {
            'connector_id': int,
            'connector_name': str,
            'connector_properties': Dict[str, object],
            'connector_type': ConnectorType,
            'created': datetime,
            'description': str,
            'display_name': str,
            'is_internal': bool,
            'last_modified': datetime,
            'state': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'connector_id': 'connectorId',
            'connector_name': 'connectorName',
            'connector_properties': 'connectorProperties',
            'connector_type': 'connectorType',
            'created': 'created',
            'description': 'description',
            'display_name': 'displayName',
            'is_internal': 'isInternal',
            'last_modified': 'lastModified',
            'state': 'state',
            'tenant_id': 'tenantId'
        }

        self._connector_id = connector_id
        self._connector_name = connector_name
        self._connector_properties = connector_properties
        self._connector_type = connector_type
        self._created = created
        self._description = description
        self._display_name = display_name
        self._is_internal = is_internal
        self._last_modified = last_modified
        self._state = state
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connector of this Connector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_id(self):
        """Gets the connector_id of this Connector.

        ID of the connector.

        :return: The connector_id of this Connector.
        :rtype: int
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this Connector.

        ID of the connector.

        :param connector_id: The connector_id of this Connector.
        :type connector_id: int
        """

        self._connector_id = connector_id

    @property
    def connector_name(self):
        """Gets the connector_name of this Connector.

        Name of the connector.

        :return: The connector_name of this Connector.
        :rtype: str
        """
        return self._connector_name

    @connector_name.setter
    def connector_name(self, connector_name):
        """Sets the connector_name of this Connector.

        Name of the connector.

        :param connector_name: The connector_name of this Connector.
        :type connector_name: str
        """

        self._connector_name = connector_name

    @property
    def connector_properties(self):
        """Gets the connector_properties of this Connector.

        The connector properties.

        :return: The connector_properties of this Connector.
        :rtype: Dict[str, object]
        """
        return self._connector_properties

    @connector_properties.setter
    def connector_properties(self, connector_properties):
        """Sets the connector_properties of this Connector.

        The connector properties.

        :param connector_properties: The connector_properties of this Connector.
        :type connector_properties: Dict[str, object]
        """
        if connector_properties is None:
            raise ValueError("Invalid value for `connector_properties`, must not be `None`")

        self._connector_properties = connector_properties

    @property
    def connector_type(self):
        """Gets the connector_type of this Connector.


        :return: The connector_type of this Connector.
        :rtype: ConnectorType
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this Connector.


        :param connector_type: The connector_type of this Connector.
        :type connector_type: ConnectorType
        """
        if connector_type is None:
            raise ValueError("Invalid value for `connector_type`, must not be `None`")

        self._connector_type = connector_type

    @property
    def created(self):
        """Gets the created of this Connector.

        The created time.

        :return: The created of this Connector.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Connector.

        The created time.

        :param created: The created of this Connector.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Connector.

        Description of the connector.

        :return: The description of this Connector.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Connector.

        Description of the connector.

        :param description: The description of this Connector.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Connector.

        Display name of the connector.

        :return: The display_name of this Connector.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Connector.

        Display name of the connector.

        :param display_name: The display_name of this Connector.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def is_internal(self):
        """Gets the is_internal of this Connector.

        If this is an internal connector.

        :return: The is_internal of this Connector.
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this Connector.

        If this is an internal connector.

        :param is_internal: The is_internal of this Connector.
        :type is_internal: bool
        """

        self._is_internal = is_internal

    @property
    def last_modified(self):
        """Gets the last_modified of this Connector.

        The last modified time.

        :return: The last_modified of this Connector.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Connector.

        The last modified time.

        :param last_modified: The last_modified of this Connector.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def state(self):
        """Gets the state of this Connector.

        State of connector.

        :return: The state of this Connector.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Connector.

        State of connector.

        :param state: The state of this Connector.
        :type state: str
        """
        allowed_values = ["Creating", "Created", "Ready", "Expiring", "Deleting", "Failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Connector.

        The hub name.

        :return: The tenant_id of this Connector.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Connector.

        The hub name.

        :param tenant_id: The tenant_id of this Connector.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
