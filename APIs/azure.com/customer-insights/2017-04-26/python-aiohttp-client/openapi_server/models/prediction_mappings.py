# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PredictionMappings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grade: str=None, reason: str=None, score: str=None):
        """PredictionMappings - a model defined in OpenAPI

        :param grade: The grade of this PredictionMappings.
        :param reason: The reason of this PredictionMappings.
        :param score: The score of this PredictionMappings.
        """
        self.openapi_types = {
            'grade': str,
            'reason': str,
            'score': str
        }

        self.attribute_map = {
            'grade': 'grade',
            'reason': 'reason',
            'score': 'score'
        }

        self._grade = grade
        self._reason = reason
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictionMappings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Prediction_mappings of this PredictionMappings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grade(self):
        """Gets the grade of this PredictionMappings.

        The grade of the link mapping.

        :return: The grade of this PredictionMappings.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this PredictionMappings.

        The grade of the link mapping.

        :param grade: The grade of this PredictionMappings.
        :type grade: str
        """
        if grade is None:
            raise ValueError("Invalid value for `grade`, must not be `None`")

        self._grade = grade

    @property
    def reason(self):
        """Gets the reason of this PredictionMappings.

        The reason of the link mapping.

        :return: The reason of this PredictionMappings.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this PredictionMappings.

        The reason of the link mapping.

        :param reason: The reason of this PredictionMappings.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def score(self):
        """Gets the score of this PredictionMappings.

        The score of the link mapping.

        :return: The score of this PredictionMappings.
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PredictionMappings.

        The score of the link mapping.

        :param score: The score of this PredictionMappings.
        :type score: str
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score
