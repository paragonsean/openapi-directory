# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.prediction_grades_inner import PredictionGradesInner
from openapi_server.models.prediction_mappings import PredictionMappings
from openapi_server.models.prediction_system_generated_entities import PredictionSystemGeneratedEntities
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server import util


class Prediction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_analyze: bool=None, description: Dict[str, str]=None, display_name: Dict[str, str]=None, grades: List[PredictionGradesInner]=None, involved_interaction_types: List[str]=None, involved_kpi_types: List[str]=None, involved_relationships: List[str]=None, mappings: PredictionMappings=None, negative_outcome_expression: str=None, positive_outcome_expression: str=None, prediction_name: str=None, primary_profile_type: str=None, provisioning_state: ProvisioningState=None, scope_expression: str=None, score_label: str=None, system_generated_entities: PredictionSystemGeneratedEntities=None, tenant_id: str=None):
        """Prediction - a model defined in OpenAPI

        :param auto_analyze: The auto_analyze of this Prediction.
        :param description: The description of this Prediction.
        :param display_name: The display_name of this Prediction.
        :param grades: The grades of this Prediction.
        :param involved_interaction_types: The involved_interaction_types of this Prediction.
        :param involved_kpi_types: The involved_kpi_types of this Prediction.
        :param involved_relationships: The involved_relationships of this Prediction.
        :param mappings: The mappings of this Prediction.
        :param negative_outcome_expression: The negative_outcome_expression of this Prediction.
        :param positive_outcome_expression: The positive_outcome_expression of this Prediction.
        :param prediction_name: The prediction_name of this Prediction.
        :param primary_profile_type: The primary_profile_type of this Prediction.
        :param provisioning_state: The provisioning_state of this Prediction.
        :param scope_expression: The scope_expression of this Prediction.
        :param score_label: The score_label of this Prediction.
        :param system_generated_entities: The system_generated_entities of this Prediction.
        :param tenant_id: The tenant_id of this Prediction.
        """
        self.openapi_types = {
            'auto_analyze': bool,
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'grades': List[PredictionGradesInner],
            'involved_interaction_types': List[str],
            'involved_kpi_types': List[str],
            'involved_relationships': List[str],
            'mappings': PredictionMappings,
            'negative_outcome_expression': str,
            'positive_outcome_expression': str,
            'prediction_name': str,
            'primary_profile_type': str,
            'provisioning_state': ProvisioningState,
            'scope_expression': str,
            'score_label': str,
            'system_generated_entities': PredictionSystemGeneratedEntities,
            'tenant_id': str
        }

        self.attribute_map = {
            'auto_analyze': 'autoAnalyze',
            'description': 'description',
            'display_name': 'displayName',
            'grades': 'grades',
            'involved_interaction_types': 'involvedInteractionTypes',
            'involved_kpi_types': 'involvedKpiTypes',
            'involved_relationships': 'involvedRelationships',
            'mappings': 'mappings',
            'negative_outcome_expression': 'negativeOutcomeExpression',
            'positive_outcome_expression': 'positiveOutcomeExpression',
            'prediction_name': 'predictionName',
            'primary_profile_type': 'primaryProfileType',
            'provisioning_state': 'provisioningState',
            'scope_expression': 'scopeExpression',
            'score_label': 'scoreLabel',
            'system_generated_entities': 'systemGeneratedEntities',
            'tenant_id': 'tenantId'
        }

        self._auto_analyze = auto_analyze
        self._description = description
        self._display_name = display_name
        self._grades = grades
        self._involved_interaction_types = involved_interaction_types
        self._involved_kpi_types = involved_kpi_types
        self._involved_relationships = involved_relationships
        self._mappings = mappings
        self._negative_outcome_expression = negative_outcome_expression
        self._positive_outcome_expression = positive_outcome_expression
        self._prediction_name = prediction_name
        self._primary_profile_type = primary_profile_type
        self._provisioning_state = provisioning_state
        self._scope_expression = scope_expression
        self._score_label = score_label
        self._system_generated_entities = system_generated_entities
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Prediction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Prediction of this Prediction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_analyze(self):
        """Gets the auto_analyze of this Prediction.

        Whether do auto analyze.

        :return: The auto_analyze of this Prediction.
        :rtype: bool
        """
        return self._auto_analyze

    @auto_analyze.setter
    def auto_analyze(self, auto_analyze):
        """Sets the auto_analyze of this Prediction.

        Whether do auto analyze.

        :param auto_analyze: The auto_analyze of this Prediction.
        :type auto_analyze: bool
        """
        if auto_analyze is None:
            raise ValueError("Invalid value for `auto_analyze`, must not be `None`")

        self._auto_analyze = auto_analyze

    @property
    def description(self):
        """Gets the description of this Prediction.

        Description of the prediction.

        :return: The description of this Prediction.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Prediction.

        Description of the prediction.

        :param description: The description of this Prediction.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Prediction.

        Display name of the prediction.

        :return: The display_name of this Prediction.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Prediction.

        Display name of the prediction.

        :param display_name: The display_name of this Prediction.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def grades(self):
        """Gets the grades of this Prediction.

        The prediction grades.

        :return: The grades of this Prediction.
        :rtype: List[PredictionGradesInner]
        """
        return self._grades

    @grades.setter
    def grades(self, grades):
        """Sets the grades of this Prediction.

        The prediction grades.

        :param grades: The grades of this Prediction.
        :type grades: List[PredictionGradesInner]
        """

        self._grades = grades

    @property
    def involved_interaction_types(self):
        """Gets the involved_interaction_types of this Prediction.

        Interaction types involved in the prediction.

        :return: The involved_interaction_types of this Prediction.
        :rtype: List[str]
        """
        return self._involved_interaction_types

    @involved_interaction_types.setter
    def involved_interaction_types(self, involved_interaction_types):
        """Sets the involved_interaction_types of this Prediction.

        Interaction types involved in the prediction.

        :param involved_interaction_types: The involved_interaction_types of this Prediction.
        :type involved_interaction_types: List[str]
        """

        self._involved_interaction_types = involved_interaction_types

    @property
    def involved_kpi_types(self):
        """Gets the involved_kpi_types of this Prediction.

        KPI types involved in the prediction.

        :return: The involved_kpi_types of this Prediction.
        :rtype: List[str]
        """
        return self._involved_kpi_types

    @involved_kpi_types.setter
    def involved_kpi_types(self, involved_kpi_types):
        """Sets the involved_kpi_types of this Prediction.

        KPI types involved in the prediction.

        :param involved_kpi_types: The involved_kpi_types of this Prediction.
        :type involved_kpi_types: List[str]
        """

        self._involved_kpi_types = involved_kpi_types

    @property
    def involved_relationships(self):
        """Gets the involved_relationships of this Prediction.

        Relationships involved in the prediction.

        :return: The involved_relationships of this Prediction.
        :rtype: List[str]
        """
        return self._involved_relationships

    @involved_relationships.setter
    def involved_relationships(self, involved_relationships):
        """Sets the involved_relationships of this Prediction.

        Relationships involved in the prediction.

        :param involved_relationships: The involved_relationships of this Prediction.
        :type involved_relationships: List[str]
        """

        self._involved_relationships = involved_relationships

    @property
    def mappings(self):
        """Gets the mappings of this Prediction.


        :return: The mappings of this Prediction.
        :rtype: PredictionMappings
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """Sets the mappings of this Prediction.


        :param mappings: The mappings of this Prediction.
        :type mappings: PredictionMappings
        """
        if mappings is None:
            raise ValueError("Invalid value for `mappings`, must not be `None`")

        self._mappings = mappings

    @property
    def negative_outcome_expression(self):
        """Gets the negative_outcome_expression of this Prediction.

        Negative outcome expression.

        :return: The negative_outcome_expression of this Prediction.
        :rtype: str
        """
        return self._negative_outcome_expression

    @negative_outcome_expression.setter
    def negative_outcome_expression(self, negative_outcome_expression):
        """Sets the negative_outcome_expression of this Prediction.

        Negative outcome expression.

        :param negative_outcome_expression: The negative_outcome_expression of this Prediction.
        :type negative_outcome_expression: str
        """
        if negative_outcome_expression is None:
            raise ValueError("Invalid value for `negative_outcome_expression`, must not be `None`")

        self._negative_outcome_expression = negative_outcome_expression

    @property
    def positive_outcome_expression(self):
        """Gets the positive_outcome_expression of this Prediction.

        Positive outcome expression.

        :return: The positive_outcome_expression of this Prediction.
        :rtype: str
        """
        return self._positive_outcome_expression

    @positive_outcome_expression.setter
    def positive_outcome_expression(self, positive_outcome_expression):
        """Sets the positive_outcome_expression of this Prediction.

        Positive outcome expression.

        :param positive_outcome_expression: The positive_outcome_expression of this Prediction.
        :type positive_outcome_expression: str
        """
        if positive_outcome_expression is None:
            raise ValueError("Invalid value for `positive_outcome_expression`, must not be `None`")

        self._positive_outcome_expression = positive_outcome_expression

    @property
    def prediction_name(self):
        """Gets the prediction_name of this Prediction.

        Name of the prediction.

        :return: The prediction_name of this Prediction.
        :rtype: str
        """
        return self._prediction_name

    @prediction_name.setter
    def prediction_name(self, prediction_name):
        """Sets the prediction_name of this Prediction.

        Name of the prediction.

        :param prediction_name: The prediction_name of this Prediction.
        :type prediction_name: str
        """

        self._prediction_name = prediction_name

    @property
    def primary_profile_type(self):
        """Gets the primary_profile_type of this Prediction.

        Primary profile type.

        :return: The primary_profile_type of this Prediction.
        :rtype: str
        """
        return self._primary_profile_type

    @primary_profile_type.setter
    def primary_profile_type(self, primary_profile_type):
        """Sets the primary_profile_type of this Prediction.

        Primary profile type.

        :param primary_profile_type: The primary_profile_type of this Prediction.
        :type primary_profile_type: str
        """
        if primary_profile_type is None:
            raise ValueError("Invalid value for `primary_profile_type`, must not be `None`")

        self._primary_profile_type = primary_profile_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this Prediction.


        :return: The provisioning_state of this Prediction.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this Prediction.


        :param provisioning_state: The provisioning_state of this Prediction.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def scope_expression(self):
        """Gets the scope_expression of this Prediction.

        Scope expression.

        :return: The scope_expression of this Prediction.
        :rtype: str
        """
        return self._scope_expression

    @scope_expression.setter
    def scope_expression(self, scope_expression):
        """Sets the scope_expression of this Prediction.

        Scope expression.

        :param scope_expression: The scope_expression of this Prediction.
        :type scope_expression: str
        """
        if scope_expression is None:
            raise ValueError("Invalid value for `scope_expression`, must not be `None`")

        self._scope_expression = scope_expression

    @property
    def score_label(self):
        """Gets the score_label of this Prediction.

        Score label.

        :return: The score_label of this Prediction.
        :rtype: str
        """
        return self._score_label

    @score_label.setter
    def score_label(self, score_label):
        """Sets the score_label of this Prediction.

        Score label.

        :param score_label: The score_label of this Prediction.
        :type score_label: str
        """
        if score_label is None:
            raise ValueError("Invalid value for `score_label`, must not be `None`")

        self._score_label = score_label

    @property
    def system_generated_entities(self):
        """Gets the system_generated_entities of this Prediction.


        :return: The system_generated_entities of this Prediction.
        :rtype: PredictionSystemGeneratedEntities
        """
        return self._system_generated_entities

    @system_generated_entities.setter
    def system_generated_entities(self, system_generated_entities):
        """Sets the system_generated_entities of this Prediction.


        :param system_generated_entities: The system_generated_entities of this Prediction.
        :type system_generated_entities: PredictionSystemGeneratedEntities
        """

        self._system_generated_entities = system_generated_entities

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Prediction.

        The hub name.

        :return: The tenant_id of this Prediction.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Prediction.

        The hub name.

        :param tenant_id: The tenant_id of this Prediction.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
