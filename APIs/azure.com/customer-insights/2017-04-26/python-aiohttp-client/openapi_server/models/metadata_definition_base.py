# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetadataDefinitionBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, List[str]]=None, description: Dict[str, str]=None, display_name: Dict[str, str]=None, large_image: str=None, localized_attributes: Dict[str, Dict[str, str]]=None, medium_image: str=None, small_image: str=None):
        """MetadataDefinitionBase - a model defined in OpenAPI

        :param attributes: The attributes of this MetadataDefinitionBase.
        :param description: The description of this MetadataDefinitionBase.
        :param display_name: The display_name of this MetadataDefinitionBase.
        :param large_image: The large_image of this MetadataDefinitionBase.
        :param localized_attributes: The localized_attributes of this MetadataDefinitionBase.
        :param medium_image: The medium_image of this MetadataDefinitionBase.
        :param small_image: The small_image of this MetadataDefinitionBase.
        """
        self.openapi_types = {
            'attributes': Dict[str, List[str]],
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'large_image': str,
            'localized_attributes': Dict[str, Dict[str, str]],
            'medium_image': str,
            'small_image': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'description': 'description',
            'display_name': 'displayName',
            'large_image': 'largeImage',
            'localized_attributes': 'localizedAttributes',
            'medium_image': 'mediumImage',
            'small_image': 'smallImage'
        }

        self._attributes = attributes
        self._description = description
        self._display_name = display_name
        self._large_image = large_image
        self._localized_attributes = localized_attributes
        self._medium_image = medium_image
        self._small_image = small_image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetadataDefinitionBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetadataDefinitionBase of this MetadataDefinitionBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this MetadataDefinitionBase.

        The attributes for the Type.

        :return: The attributes of this MetadataDefinitionBase.
        :rtype: Dict[str, List[str]]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MetadataDefinitionBase.

        The attributes for the Type.

        :param attributes: The attributes of this MetadataDefinitionBase.
        :type attributes: Dict[str, List[str]]
        """

        self._attributes = attributes

    @property
    def description(self):
        """Gets the description of this MetadataDefinitionBase.

        Localized descriptions for the property.

        :return: The description of this MetadataDefinitionBase.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetadataDefinitionBase.

        Localized descriptions for the property.

        :param description: The description of this MetadataDefinitionBase.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this MetadataDefinitionBase.

        Localized display names for the property.

        :return: The display_name of this MetadataDefinitionBase.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MetadataDefinitionBase.

        Localized display names for the property.

        :param display_name: The display_name of this MetadataDefinitionBase.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def large_image(self):
        """Gets the large_image of this MetadataDefinitionBase.

        Large Image associated with the Property or EntityType.

        :return: The large_image of this MetadataDefinitionBase.
        :rtype: str
        """
        return self._large_image

    @large_image.setter
    def large_image(self, large_image):
        """Sets the large_image of this MetadataDefinitionBase.

        Large Image associated with the Property or EntityType.

        :param large_image: The large_image of this MetadataDefinitionBase.
        :type large_image: str
        """

        self._large_image = large_image

    @property
    def localized_attributes(self):
        """Gets the localized_attributes of this MetadataDefinitionBase.

        Any custom localized attributes for the Type.

        :return: The localized_attributes of this MetadataDefinitionBase.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._localized_attributes

    @localized_attributes.setter
    def localized_attributes(self, localized_attributes):
        """Sets the localized_attributes of this MetadataDefinitionBase.

        Any custom localized attributes for the Type.

        :param localized_attributes: The localized_attributes of this MetadataDefinitionBase.
        :type localized_attributes: Dict[str, Dict[str, str]]
        """

        self._localized_attributes = localized_attributes

    @property
    def medium_image(self):
        """Gets the medium_image of this MetadataDefinitionBase.

        Medium Image associated with the Property or EntityType.

        :return: The medium_image of this MetadataDefinitionBase.
        :rtype: str
        """
        return self._medium_image

    @medium_image.setter
    def medium_image(self, medium_image):
        """Sets the medium_image of this MetadataDefinitionBase.

        Medium Image associated with the Property or EntityType.

        :param medium_image: The medium_image of this MetadataDefinitionBase.
        :type medium_image: str
        """

        self._medium_image = medium_image

    @property
    def small_image(self):
        """Gets the small_image of this MetadataDefinitionBase.

        Small Image associated with the Property or EntityType.

        :return: The small_image of this MetadataDefinitionBase.
        :rtype: str
        """
        return self._small_image

    @small_image.setter
    def small_image(self, small_image):
        """Sets the small_image of this MetadataDefinitionBase.

        Small Image associated with the Property or EntityType.

        :param small_image: The small_image of this MetadataDefinitionBase.
        :type small_image: str
        """

        self._small_image = small_image
