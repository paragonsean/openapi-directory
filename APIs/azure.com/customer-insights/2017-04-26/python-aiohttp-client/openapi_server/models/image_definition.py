# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_url: str=None, image_exists: bool=None, relative_path: str=None):
        """ImageDefinition - a model defined in OpenAPI

        :param content_url: The content_url of this ImageDefinition.
        :param image_exists: The image_exists of this ImageDefinition.
        :param relative_path: The relative_path of this ImageDefinition.
        """
        self.openapi_types = {
            'content_url': str,
            'image_exists': bool,
            'relative_path': str
        }

        self.attribute_map = {
            'content_url': 'contentUrl',
            'image_exists': 'imageExists',
            'relative_path': 'relativePath'
        }

        self._content_url = content_url
        self._image_exists = image_exists
        self._relative_path = relative_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageDefinition of this ImageDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_url(self):
        """Gets the content_url of this ImageDefinition.

        Content URL for the image blob.

        :return: The content_url of this ImageDefinition.
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this ImageDefinition.

        Content URL for the image blob.

        :param content_url: The content_url of this ImageDefinition.
        :type content_url: str
        """

        self._content_url = content_url

    @property
    def image_exists(self):
        """Gets the image_exists of this ImageDefinition.

        Whether image exists already.

        :return: The image_exists of this ImageDefinition.
        :rtype: bool
        """
        return self._image_exists

    @image_exists.setter
    def image_exists(self, image_exists):
        """Sets the image_exists of this ImageDefinition.

        Whether image exists already.

        :param image_exists: The image_exists of this ImageDefinition.
        :type image_exists: bool
        """

        self._image_exists = image_exists

    @property
    def relative_path(self):
        """Gets the relative_path of this ImageDefinition.

        Relative path of the image.

        :return: The relative_path of this ImageDefinition.
        :rtype: str
        """
        return self._relative_path

    @relative_path.setter
    def relative_path(self, relative_path):
        """Sets the relative_path of this ImageDefinition.

        Relative path of the image.

        :param relative_path: The relative_path of this ImageDefinition.
        :type relative_path: str
        """

        self._relative_path = relative_path
