# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class View(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changed: datetime=None, created: datetime=None, definition: str=None, display_name: Dict[str, str]=None, tenant_id: str=None, user_id: str=None, view_name: str=None):
        """View - a model defined in OpenAPI

        :param changed: The changed of this View.
        :param created: The created of this View.
        :param definition: The definition of this View.
        :param display_name: The display_name of this View.
        :param tenant_id: The tenant_id of this View.
        :param user_id: The user_id of this View.
        :param view_name: The view_name of this View.
        """
        self.openapi_types = {
            'changed': datetime,
            'created': datetime,
            'definition': str,
            'display_name': Dict[str, str],
            'tenant_id': str,
            'user_id': str,
            'view_name': str
        }

        self.attribute_map = {
            'changed': 'changed',
            'created': 'created',
            'definition': 'definition',
            'display_name': 'displayName',
            'tenant_id': 'tenantId',
            'user_id': 'userId',
            'view_name': 'viewName'
        }

        self._changed = changed
        self._created = created
        self._definition = definition
        self._display_name = display_name
        self._tenant_id = tenant_id
        self._user_id = user_id
        self._view_name = view_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'View':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The View of this View.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changed(self):
        """Gets the changed of this View.

        Date time when view was last modified.

        :return: The changed of this View.
        :rtype: datetime
        """
        return self._changed

    @changed.setter
    def changed(self, changed):
        """Sets the changed of this View.

        Date time when view was last modified.

        :param changed: The changed of this View.
        :type changed: datetime
        """

        self._changed = changed

    @property
    def created(self):
        """Gets the created of this View.

        Date time when view was created.

        :return: The created of this View.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this View.

        Date time when view was created.

        :param created: The created of this View.
        :type created: datetime
        """

        self._created = created

    @property
    def definition(self):
        """Gets the definition of this View.

        View definition.

        :return: The definition of this View.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this View.

        View definition.

        :param definition: The definition of this View.
        :type definition: str
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def display_name(self):
        """Gets the display_name of this View.

        Localized display name for the view.

        :return: The display_name of this View.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this View.

        Localized display name for the view.

        :param display_name: The display_name of this View.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this View.

        the hub name.

        :return: The tenant_id of this View.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this View.

        the hub name.

        :param tenant_id: The tenant_id of this View.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def user_id(self):
        """Gets the user_id of this View.

        the user ID.

        :return: The user_id of this View.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this View.

        the user ID.

        :param user_id: The user_id of this View.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def view_name(self):
        """Gets the view_name of this View.

        Name of the view.

        :return: The view_name of this View.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this View.

        Name of the view.

        :param view_name: The view_name of this View.
        :type view_name: str
        """

        self._view_name = view_name
