# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorMappingErrorManagement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_limit: int=None, error_management_type: str=None):
        """ConnectorMappingErrorManagement - a model defined in OpenAPI

        :param error_limit: The error_limit of this ConnectorMappingErrorManagement.
        :param error_management_type: The error_management_type of this ConnectorMappingErrorManagement.
        """
        self.openapi_types = {
            'error_limit': int,
            'error_management_type': str
        }

        self.attribute_map = {
            'error_limit': 'errorLimit',
            'error_management_type': 'errorManagementType'
        }

        self._error_limit = error_limit
        self._error_management_type = error_management_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorMappingErrorManagement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorMappingErrorManagement of this ConnectorMappingErrorManagement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_limit(self):
        """Gets the error_limit of this ConnectorMappingErrorManagement.

        The error limit allowed while importing data.

        :return: The error_limit of this ConnectorMappingErrorManagement.
        :rtype: int
        """
        return self._error_limit

    @error_limit.setter
    def error_limit(self, error_limit):
        """Sets the error_limit of this ConnectorMappingErrorManagement.

        The error limit allowed while importing data.

        :param error_limit: The error_limit of this ConnectorMappingErrorManagement.
        :type error_limit: int
        """

        self._error_limit = error_limit

    @property
    def error_management_type(self):
        """Gets the error_management_type of this ConnectorMappingErrorManagement.

        The type of error management to use for the mapping.

        :return: The error_management_type of this ConnectorMappingErrorManagement.
        :rtype: str
        """
        return self._error_management_type

    @error_management_type.setter
    def error_management_type(self, error_management_type):
        """Sets the error_management_type of this ConnectorMappingErrorManagement.

        The type of error management to use for the mapping.

        :param error_management_type: The error_management_type of this ConnectorMappingErrorManagement.
        :type error_management_type: str
        """
        allowed_values = ["RejectAndContinue", "StopImport", "RejectUntilLimit"]  # noqa: E501
        if error_management_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_management_type` ({0}), must be one of {1}"
                .format(error_management_type, allowed_values)
            )

        self._error_management_type = error_management_type
