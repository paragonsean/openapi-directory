/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PredictionDistributionDefinitionDistributionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of the prediction distribution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictionDistributionDefinition {
  public static final String SERIALIZED_NAME_DISTRIBUTIONS = "distributions";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTIONS)
  private List<PredictionDistributionDefinitionDistributionsInner> distributions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_NEGATIVES = "totalNegatives";
  @SerializedName(SERIALIZED_NAME_TOTAL_NEGATIVES)
  private Long totalNegatives;

  public static final String SERIALIZED_NAME_TOTAL_POSITIVES = "totalPositives";
  @SerializedName(SERIALIZED_NAME_TOTAL_POSITIVES)
  private Long totalPositives;

  public PredictionDistributionDefinition() {
  }

  public PredictionDistributionDefinition distributions(List<PredictionDistributionDefinitionDistributionsInner> distributions) {
    this.distributions = distributions;
    return this;
  }

  public PredictionDistributionDefinition addDistributionsItem(PredictionDistributionDefinitionDistributionsInner distributionsItem) {
    if (this.distributions == null) {
      this.distributions = new ArrayList<>();
    }
    this.distributions.add(distributionsItem);
    return this;
  }

  /**
   * Distributions of the prediction.
   * @return distributions
   */
  @javax.annotation.Nullable
  public List<PredictionDistributionDefinitionDistributionsInner> getDistributions() {
    return distributions;
  }

  public void setDistributions(List<PredictionDistributionDefinitionDistributionsInner> distributions) {
    this.distributions = distributions;
  }


  public PredictionDistributionDefinition totalNegatives(Long totalNegatives) {
    this.totalNegatives = totalNegatives;
    return this;
  }

  /**
   * Total negatives in the distribution.
   * @return totalNegatives
   */
  @javax.annotation.Nullable
  public Long getTotalNegatives() {
    return totalNegatives;
  }

  public void setTotalNegatives(Long totalNegatives) {
    this.totalNegatives = totalNegatives;
  }


  public PredictionDistributionDefinition totalPositives(Long totalPositives) {
    this.totalPositives = totalPositives;
    return this;
  }

  /**
   * Total positive in the distribution.
   * @return totalPositives
   */
  @javax.annotation.Nullable
  public Long getTotalPositives() {
    return totalPositives;
  }

  public void setTotalPositives(Long totalPositives) {
    this.totalPositives = totalPositives;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictionDistributionDefinition predictionDistributionDefinition = (PredictionDistributionDefinition) o;
    return Objects.equals(this.distributions, predictionDistributionDefinition.distributions) &&
        Objects.equals(this.totalNegatives, predictionDistributionDefinition.totalNegatives) &&
        Objects.equals(this.totalPositives, predictionDistributionDefinition.totalPositives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distributions, totalNegatives, totalPositives);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictionDistributionDefinition {\n");
    sb.append("    distributions: ").append(toIndentedString(distributions)).append("\n");
    sb.append("    totalNegatives: ").append(toIndentedString(totalNegatives)).append("\n");
    sb.append("    totalPositives: ").append(toIndentedString(totalPositives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distributions");
    openapiFields.add("totalNegatives");
    openapiFields.add("totalPositives");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictionDistributionDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictionDistributionDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictionDistributionDefinition is not found in the empty JSON string", PredictionDistributionDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictionDistributionDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictionDistributionDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("distributions") != null && !jsonObj.get("distributions").isJsonNull()) {
        JsonArray jsonArraydistributions = jsonObj.getAsJsonArray("distributions");
        if (jsonArraydistributions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("distributions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `distributions` to be an array in the JSON string but got `%s`", jsonObj.get("distributions").toString()));
          }

          // validate the optional field `distributions` (array)
          for (int i = 0; i < jsonArraydistributions.size(); i++) {
            PredictionDistributionDefinitionDistributionsInner.validateJsonElement(jsonArraydistributions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictionDistributionDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictionDistributionDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictionDistributionDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictionDistributionDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictionDistributionDefinition>() {
           @Override
           public void write(JsonWriter out, PredictionDistributionDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictionDistributionDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictionDistributionDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictionDistributionDefinition
   * @throws IOException if the JSON string is invalid with respect to PredictionDistributionDefinition
   */
  public static PredictionDistributionDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictionDistributionDefinition.class);
  }

  /**
   * Convert an instance of PredictionDistributionDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

