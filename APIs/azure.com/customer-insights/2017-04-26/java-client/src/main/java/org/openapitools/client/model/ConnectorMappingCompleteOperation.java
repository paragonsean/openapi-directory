/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The complete operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorMappingCompleteOperation {
  /**
   * The type of completion operation.
   */
  @JsonAdapter(CompletionOperationTypeEnum.Adapter.class)
  public enum CompletionOperationTypeEnum {
    DO_NOTHING("DoNothing"),
    
    DELETE_FILE("DeleteFile"),
    
    MOVE_FILE("MoveFile");

    private String value;

    CompletionOperationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompletionOperationTypeEnum fromValue(String value) {
      for (CompletionOperationTypeEnum b : CompletionOperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompletionOperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompletionOperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompletionOperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompletionOperationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompletionOperationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPLETION_OPERATION_TYPE = "completionOperationType";
  @SerializedName(SERIALIZED_NAME_COMPLETION_OPERATION_TYPE)
  private CompletionOperationTypeEnum completionOperationType;

  public static final String SERIALIZED_NAME_DESTINATION_FOLDER = "destinationFolder";
  @SerializedName(SERIALIZED_NAME_DESTINATION_FOLDER)
  private String destinationFolder;

  public ConnectorMappingCompleteOperation() {
  }

  public ConnectorMappingCompleteOperation completionOperationType(CompletionOperationTypeEnum completionOperationType) {
    this.completionOperationType = completionOperationType;
    return this;
  }

  /**
   * The type of completion operation.
   * @return completionOperationType
   */
  @javax.annotation.Nullable
  public CompletionOperationTypeEnum getCompletionOperationType() {
    return completionOperationType;
  }

  public void setCompletionOperationType(CompletionOperationTypeEnum completionOperationType) {
    this.completionOperationType = completionOperationType;
  }


  public ConnectorMappingCompleteOperation destinationFolder(String destinationFolder) {
    this.destinationFolder = destinationFolder;
    return this;
  }

  /**
   * The destination folder where files will be moved to once the import is done.
   * @return destinationFolder
   */
  @javax.annotation.Nullable
  public String getDestinationFolder() {
    return destinationFolder;
  }

  public void setDestinationFolder(String destinationFolder) {
    this.destinationFolder = destinationFolder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorMappingCompleteOperation connectorMappingCompleteOperation = (ConnectorMappingCompleteOperation) o;
    return Objects.equals(this.completionOperationType, connectorMappingCompleteOperation.completionOperationType) &&
        Objects.equals(this.destinationFolder, connectorMappingCompleteOperation.destinationFolder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionOperationType, destinationFolder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorMappingCompleteOperation {\n");
    sb.append("    completionOperationType: ").append(toIndentedString(completionOperationType)).append("\n");
    sb.append("    destinationFolder: ").append(toIndentedString(destinationFolder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("completionOperationType");
    openapiFields.add("destinationFolder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorMappingCompleteOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorMappingCompleteOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorMappingCompleteOperation is not found in the empty JSON string", ConnectorMappingCompleteOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorMappingCompleteOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorMappingCompleteOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("completionOperationType") != null && !jsonObj.get("completionOperationType").isJsonNull()) && !jsonObj.get("completionOperationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completionOperationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completionOperationType").toString()));
      }
      // validate the optional field `completionOperationType`
      if (jsonObj.get("completionOperationType") != null && !jsonObj.get("completionOperationType").isJsonNull()) {
        CompletionOperationTypeEnum.validateJsonElement(jsonObj.get("completionOperationType"));
      }
      if ((jsonObj.get("destinationFolder") != null && !jsonObj.get("destinationFolder").isJsonNull()) && !jsonObj.get("destinationFolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationFolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationFolder").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorMappingCompleteOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorMappingCompleteOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorMappingCompleteOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorMappingCompleteOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorMappingCompleteOperation>() {
           @Override
           public void write(JsonWriter out, ConnectorMappingCompleteOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorMappingCompleteOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorMappingCompleteOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorMappingCompleteOperation
   * @throws IOException if the JSON string is invalid with respect to ConnectorMappingCompleteOperation
   */
  public static ConnectorMappingCompleteOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorMappingCompleteOperation.class);
  }

  /**
   * Convert an instance of ConnectorMappingCompleteOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

