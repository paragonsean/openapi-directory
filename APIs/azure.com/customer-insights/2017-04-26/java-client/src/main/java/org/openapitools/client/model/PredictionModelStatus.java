/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The prediction model status.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictionModelStatus {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_MODEL_VERSION = "modelVersion";
  @SerializedName(SERIALIZED_NAME_MODEL_VERSION)
  private String modelVersion;

  public static final String SERIALIZED_NAME_PREDICTION_GUID_ID = "predictionGuidId";
  @SerializedName(SERIALIZED_NAME_PREDICTION_GUID_ID)
  private String predictionGuidId;

  public static final String SERIALIZED_NAME_PREDICTION_NAME = "predictionName";
  @SerializedName(SERIALIZED_NAME_PREDICTION_NAME)
  private String predictionName;

  public static final String SERIALIZED_NAME_SIGNALS_USED = "signalsUsed";
  @SerializedName(SERIALIZED_NAME_SIGNALS_USED)
  private Integer signalsUsed;

  /**
   * Prediction model life cycle.  When prediction is in PendingModelConfirmation status, it is allowed to update the status to PendingFeaturing or Active through API.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("New"),
    
    PROVISIONING("Provisioning"),
    
    PROVISIONING_FAILED("ProvisioningFailed"),
    
    PENDING_DISCOVERING("PendingDiscovering"),
    
    DISCOVERING("Discovering"),
    
    PENDING_FEATURING("PendingFeaturing"),
    
    FEATURING("Featuring"),
    
    FEATURING_FAILED("FeaturingFailed"),
    
    PENDING_TRAINING("PendingTraining"),
    
    TRAINING("Training"),
    
    TRAINING_FAILED("TrainingFailed"),
    
    EVALUATING("Evaluating"),
    
    EVALUATING_FAILED("EvaluatingFailed"),
    
    PENDING_MODEL_CONFIRMATION("PendingModelConfirmation"),
    
    ACTIVE("Active"),
    
    DELETED("Deleted"),
    
    HUMAN_INTERVENTION("HumanIntervention"),
    
    FAILED("Failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TEST_SET_COUNT = "testSetCount";
  @SerializedName(SERIALIZED_NAME_TEST_SET_COUNT)
  private Integer testSetCount;

  public static final String SERIALIZED_NAME_TRAINING_ACCURACY = "trainingAccuracy";
  @SerializedName(SERIALIZED_NAME_TRAINING_ACCURACY)
  private Integer trainingAccuracy;

  public static final String SERIALIZED_NAME_TRAINING_SET_COUNT = "trainingSetCount";
  @SerializedName(SERIALIZED_NAME_TRAINING_SET_COUNT)
  private Integer trainingSetCount;

  public static final String SERIALIZED_NAME_VALIDATION_SET_COUNT = "validationSetCount";
  @SerializedName(SERIALIZED_NAME_VALIDATION_SET_COUNT)
  private Integer validationSetCount;

  public PredictionModelStatus() {
  }

  public PredictionModelStatus(
     String message, 
     String modelVersion, 
     String predictionGuidId, 
     String predictionName, 
     Integer signalsUsed, 
     String tenantId, 
     Integer testSetCount, 
     Integer trainingAccuracy, 
     Integer trainingSetCount, 
     Integer validationSetCount
  ) {
    this();
    this.message = message;
    this.modelVersion = modelVersion;
    this.predictionGuidId = predictionGuidId;
    this.predictionName = predictionName;
    this.signalsUsed = signalsUsed;
    this.tenantId = tenantId;
    this.testSetCount = testSetCount;
    this.trainingAccuracy = trainingAccuracy;
    this.trainingSetCount = trainingSetCount;
    this.validationSetCount = validationSetCount;
  }

  /**
   * The model status message.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }



  /**
   * Version of the model.
   * @return modelVersion
   */
  @javax.annotation.Nullable
  public String getModelVersion() {
    return modelVersion;
  }



  /**
   * The prediction GUID ID.
   * @return predictionGuidId
   */
  @javax.annotation.Nullable
  public String getPredictionGuidId() {
    return predictionGuidId;
  }



  /**
   * The prediction name.
   * @return predictionName
   */
  @javax.annotation.Nullable
  public String getPredictionName() {
    return predictionName;
  }



  /**
   * The signals used.
   * @return signalsUsed
   */
  @javax.annotation.Nullable
  public Integer getSignalsUsed() {
    return signalsUsed;
  }



  public PredictionModelStatus status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Prediction model life cycle.  When prediction is in PendingModelConfirmation status, it is allowed to update the status to PendingFeaturing or Active through API.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  /**
   * The hub name.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }



  /**
   * Count of the test set.
   * @return testSetCount
   */
  @javax.annotation.Nullable
  public Integer getTestSetCount() {
    return testSetCount;
  }



  /**
   * The training accuracy.
   * @return trainingAccuracy
   */
  @javax.annotation.Nullable
  public Integer getTrainingAccuracy() {
    return trainingAccuracy;
  }



  /**
   * Count of the training set.
   * @return trainingSetCount
   */
  @javax.annotation.Nullable
  public Integer getTrainingSetCount() {
    return trainingSetCount;
  }



  /**
   * Count of the validation set.
   * @return validationSetCount
   */
  @javax.annotation.Nullable
  public Integer getValidationSetCount() {
    return validationSetCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictionModelStatus predictionModelStatus = (PredictionModelStatus) o;
    return Objects.equals(this.message, predictionModelStatus.message) &&
        Objects.equals(this.modelVersion, predictionModelStatus.modelVersion) &&
        Objects.equals(this.predictionGuidId, predictionModelStatus.predictionGuidId) &&
        Objects.equals(this.predictionName, predictionModelStatus.predictionName) &&
        Objects.equals(this.signalsUsed, predictionModelStatus.signalsUsed) &&
        Objects.equals(this.status, predictionModelStatus.status) &&
        Objects.equals(this.tenantId, predictionModelStatus.tenantId) &&
        Objects.equals(this.testSetCount, predictionModelStatus.testSetCount) &&
        Objects.equals(this.trainingAccuracy, predictionModelStatus.trainingAccuracy) &&
        Objects.equals(this.trainingSetCount, predictionModelStatus.trainingSetCount) &&
        Objects.equals(this.validationSetCount, predictionModelStatus.validationSetCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, modelVersion, predictionGuidId, predictionName, signalsUsed, status, tenantId, testSetCount, trainingAccuracy, trainingSetCount, validationSetCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictionModelStatus {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    modelVersion: ").append(toIndentedString(modelVersion)).append("\n");
    sb.append("    predictionGuidId: ").append(toIndentedString(predictionGuidId)).append("\n");
    sb.append("    predictionName: ").append(toIndentedString(predictionName)).append("\n");
    sb.append("    signalsUsed: ").append(toIndentedString(signalsUsed)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    testSetCount: ").append(toIndentedString(testSetCount)).append("\n");
    sb.append("    trainingAccuracy: ").append(toIndentedString(trainingAccuracy)).append("\n");
    sb.append("    trainingSetCount: ").append(toIndentedString(trainingSetCount)).append("\n");
    sb.append("    validationSetCount: ").append(toIndentedString(validationSetCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("modelVersion");
    openapiFields.add("predictionGuidId");
    openapiFields.add("predictionName");
    openapiFields.add("signalsUsed");
    openapiFields.add("status");
    openapiFields.add("tenantId");
    openapiFields.add("testSetCount");
    openapiFields.add("trainingAccuracy");
    openapiFields.add("trainingSetCount");
    openapiFields.add("validationSetCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictionModelStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictionModelStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictionModelStatus is not found in the empty JSON string", PredictionModelStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictionModelStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictionModelStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PredictionModelStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("modelVersion") != null && !jsonObj.get("modelVersion").isJsonNull()) && !jsonObj.get("modelVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelVersion").toString()));
      }
      if ((jsonObj.get("predictionGuidId") != null && !jsonObj.get("predictionGuidId").isJsonNull()) && !jsonObj.get("predictionGuidId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predictionGuidId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predictionGuidId").toString()));
      }
      if ((jsonObj.get("predictionName") != null && !jsonObj.get("predictionName").isJsonNull()) && !jsonObj.get("predictionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `predictionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("predictionName").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictionModelStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictionModelStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictionModelStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictionModelStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictionModelStatus>() {
           @Override
           public void write(JsonWriter out, PredictionModelStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictionModelStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictionModelStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictionModelStatus
   * @throws IOException if the JSON string is invalid with respect to PredictionModelStatus
   */
  public static PredictionModelStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictionModelStatus.class);
  }

  /**
   * Convert an instance of PredictionModelStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

