/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ParticipantProfilePropertyReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of suggested relationship for the type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelationshipsLookup {
  public static final String SERIALIZED_NAME_EXISTING_RELATIONSHIP_NAME = "existingRelationshipName";
  @SerializedName(SERIALIZED_NAME_EXISTING_RELATIONSHIP_NAME)
  private String existingRelationshipName;

  public static final String SERIALIZED_NAME_PROFILE_NAME = "profileName";
  @SerializedName(SERIALIZED_NAME_PROFILE_NAME)
  private String profileName;

  public static final String SERIALIZED_NAME_PROFILE_PROPERTY_REFERENCES = "profilePropertyReferences";
  @SerializedName(SERIALIZED_NAME_PROFILE_PROPERTY_REFERENCES)
  private List<ParticipantProfilePropertyReference> profilePropertyReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATED_PROFILE_NAME = "relatedProfileName";
  @SerializedName(SERIALIZED_NAME_RELATED_PROFILE_NAME)
  private String relatedProfileName;

  public static final String SERIALIZED_NAME_RELATED_PROFILE_PROPERTY_REFERENCES = "relatedProfilePropertyReferences";
  @SerializedName(SERIALIZED_NAME_RELATED_PROFILE_PROPERTY_REFERENCES)
  private List<ParticipantProfilePropertyReference> relatedProfilePropertyReferences = new ArrayList<>();

  public RelationshipsLookup() {
  }

  public RelationshipsLookup(
     String existingRelationshipName, 
     String profileName, 
     List<ParticipantProfilePropertyReference> profilePropertyReferences, 
     String relatedProfileName, 
     List<ParticipantProfilePropertyReference> relatedProfilePropertyReferences
  ) {
    this();
    this.existingRelationshipName = existingRelationshipName;
    this.profileName = profileName;
    this.profilePropertyReferences = profilePropertyReferences;
    this.relatedProfileName = relatedProfileName;
    this.relatedProfilePropertyReferences = relatedProfilePropertyReferences;
  }

  /**
   * The name of existing Relationship.
   * @return existingRelationshipName
   */
  @javax.annotation.Nullable
  public String getExistingRelationshipName() {
    return existingRelationshipName;
  }



  /**
   * The relationship profile.
   * @return profileName
   */
  @javax.annotation.Nullable
  public String getProfileName() {
    return profileName;
  }



  /**
   * The property references for the profile type.
   * @return profilePropertyReferences
   */
  @javax.annotation.Nullable
  public List<ParticipantProfilePropertyReference> getProfilePropertyReferences() {
    return profilePropertyReferences;
  }



  /**
   * The related profile.
   * @return relatedProfileName
   */
  @javax.annotation.Nullable
  public String getRelatedProfileName() {
    return relatedProfileName;
  }



  /**
   * The property references for the related profile type.
   * @return relatedProfilePropertyReferences
   */
  @javax.annotation.Nullable
  public List<ParticipantProfilePropertyReference> getRelatedProfilePropertyReferences() {
    return relatedProfilePropertyReferences;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationshipsLookup relationshipsLookup = (RelationshipsLookup) o;
    return Objects.equals(this.existingRelationshipName, relationshipsLookup.existingRelationshipName) &&
        Objects.equals(this.profileName, relationshipsLookup.profileName) &&
        Objects.equals(this.profilePropertyReferences, relationshipsLookup.profilePropertyReferences) &&
        Objects.equals(this.relatedProfileName, relationshipsLookup.relatedProfileName) &&
        Objects.equals(this.relatedProfilePropertyReferences, relationshipsLookup.relatedProfilePropertyReferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(existingRelationshipName, profileName, profilePropertyReferences, relatedProfileName, relatedProfilePropertyReferences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationshipsLookup {\n");
    sb.append("    existingRelationshipName: ").append(toIndentedString(existingRelationshipName)).append("\n");
    sb.append("    profileName: ").append(toIndentedString(profileName)).append("\n");
    sb.append("    profilePropertyReferences: ").append(toIndentedString(profilePropertyReferences)).append("\n");
    sb.append("    relatedProfileName: ").append(toIndentedString(relatedProfileName)).append("\n");
    sb.append("    relatedProfilePropertyReferences: ").append(toIndentedString(relatedProfilePropertyReferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("existingRelationshipName");
    openapiFields.add("profileName");
    openapiFields.add("profilePropertyReferences");
    openapiFields.add("relatedProfileName");
    openapiFields.add("relatedProfilePropertyReferences");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelationshipsLookup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelationshipsLookup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelationshipsLookup is not found in the empty JSON string", RelationshipsLookup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelationshipsLookup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelationshipsLookup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("existingRelationshipName") != null && !jsonObj.get("existingRelationshipName").isJsonNull()) && !jsonObj.get("existingRelationshipName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `existingRelationshipName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("existingRelationshipName").toString()));
      }
      if ((jsonObj.get("profileName") != null && !jsonObj.get("profileName").isJsonNull()) && !jsonObj.get("profileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileName").toString()));
      }
      if (jsonObj.get("profilePropertyReferences") != null && !jsonObj.get("profilePropertyReferences").isJsonNull()) {
        JsonArray jsonArrayprofilePropertyReferences = jsonObj.getAsJsonArray("profilePropertyReferences");
        if (jsonArrayprofilePropertyReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("profilePropertyReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `profilePropertyReferences` to be an array in the JSON string but got `%s`", jsonObj.get("profilePropertyReferences").toString()));
          }

          // validate the optional field `profilePropertyReferences` (array)
          for (int i = 0; i < jsonArrayprofilePropertyReferences.size(); i++) {
            ParticipantProfilePropertyReference.validateJsonElement(jsonArrayprofilePropertyReferences.get(i));
          };
        }
      }
      if ((jsonObj.get("relatedProfileName") != null && !jsonObj.get("relatedProfileName").isJsonNull()) && !jsonObj.get("relatedProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedProfileName").toString()));
      }
      if (jsonObj.get("relatedProfilePropertyReferences") != null && !jsonObj.get("relatedProfilePropertyReferences").isJsonNull()) {
        JsonArray jsonArrayrelatedProfilePropertyReferences = jsonObj.getAsJsonArray("relatedProfilePropertyReferences");
        if (jsonArrayrelatedProfilePropertyReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedProfilePropertyReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedProfilePropertyReferences` to be an array in the JSON string but got `%s`", jsonObj.get("relatedProfilePropertyReferences").toString()));
          }

          // validate the optional field `relatedProfilePropertyReferences` (array)
          for (int i = 0; i < jsonArrayrelatedProfilePropertyReferences.size(); i++) {
            ParticipantProfilePropertyReference.validateJsonElement(jsonArrayrelatedProfilePropertyReferences.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelationshipsLookup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelationshipsLookup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelationshipsLookup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelationshipsLookup.class));

       return (TypeAdapter<T>) new TypeAdapter<RelationshipsLookup>() {
           @Override
           public void write(JsonWriter out, RelationshipsLookup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelationshipsLookup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelationshipsLookup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelationshipsLookup
   * @throws IOException if the JSON string is invalid with respect to RelationshipsLookup
   */
  public static RelationshipsLookup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelationshipsLookup.class);
  }

  /**
   * Convert an instance of RelationshipsLookup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

