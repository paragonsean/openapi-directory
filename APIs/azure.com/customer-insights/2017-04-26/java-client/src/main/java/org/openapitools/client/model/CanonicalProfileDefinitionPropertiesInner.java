/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of a canonical profile property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CanonicalProfileDefinitionPropertiesInner {
  public static final String SERIALIZED_NAME_PROFILE_NAME = "profileName";
  @SerializedName(SERIALIZED_NAME_PROFILE_NAME)
  private String profileName;

  public static final String SERIALIZED_NAME_PROFILE_PROPERTY_NAME = "profilePropertyName";
  @SerializedName(SERIALIZED_NAME_PROFILE_PROPERTY_NAME)
  private String profilePropertyName;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  /**
   * Type of canonical property value.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NUMERIC("Numeric"),
    
    CATEGORICAL("Categorical"),
    
    DERIVED_CATEGORICAL("DerivedCategorical"),
    
    DERIVED_NUMERIC("DerivedNumeric");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public CanonicalProfileDefinitionPropertiesInner() {
  }

  public CanonicalProfileDefinitionPropertiesInner profileName(String profileName) {
    this.profileName = profileName;
    return this;
  }

  /**
   * Profile name.
   * @return profileName
   */
  @javax.annotation.Nullable
  public String getProfileName() {
    return profileName;
  }

  public void setProfileName(String profileName) {
    this.profileName = profileName;
  }


  public CanonicalProfileDefinitionPropertiesInner profilePropertyName(String profilePropertyName) {
    this.profilePropertyName = profilePropertyName;
    return this;
  }

  /**
   * Property name of profile.
   * @return profilePropertyName
   */
  @javax.annotation.Nullable
  public String getProfilePropertyName() {
    return profilePropertyName;
  }

  public void setProfilePropertyName(String profilePropertyName) {
    this.profilePropertyName = profilePropertyName;
  }


  public CanonicalProfileDefinitionPropertiesInner rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * The rank.
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public CanonicalProfileDefinitionPropertiesInner type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of canonical property value.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CanonicalProfileDefinitionPropertiesInner value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Value of the canonical property.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CanonicalProfileDefinitionPropertiesInner canonicalProfileDefinitionPropertiesInner = (CanonicalProfileDefinitionPropertiesInner) o;
    return Objects.equals(this.profileName, canonicalProfileDefinitionPropertiesInner.profileName) &&
        Objects.equals(this.profilePropertyName, canonicalProfileDefinitionPropertiesInner.profilePropertyName) &&
        Objects.equals(this.rank, canonicalProfileDefinitionPropertiesInner.rank) &&
        Objects.equals(this.type, canonicalProfileDefinitionPropertiesInner.type) &&
        Objects.equals(this.value, canonicalProfileDefinitionPropertiesInner.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profileName, profilePropertyName, rank, type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CanonicalProfileDefinitionPropertiesInner {\n");
    sb.append("    profileName: ").append(toIndentedString(profileName)).append("\n");
    sb.append("    profilePropertyName: ").append(toIndentedString(profilePropertyName)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("profileName");
    openapiFields.add("profilePropertyName");
    openapiFields.add("rank");
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CanonicalProfileDefinitionPropertiesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CanonicalProfileDefinitionPropertiesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CanonicalProfileDefinitionPropertiesInner is not found in the empty JSON string", CanonicalProfileDefinitionPropertiesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CanonicalProfileDefinitionPropertiesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CanonicalProfileDefinitionPropertiesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("profileName") != null && !jsonObj.get("profileName").isJsonNull()) && !jsonObj.get("profileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileName").toString()));
      }
      if ((jsonObj.get("profilePropertyName") != null && !jsonObj.get("profilePropertyName").isJsonNull()) && !jsonObj.get("profilePropertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profilePropertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profilePropertyName").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CanonicalProfileDefinitionPropertiesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CanonicalProfileDefinitionPropertiesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CanonicalProfileDefinitionPropertiesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CanonicalProfileDefinitionPropertiesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CanonicalProfileDefinitionPropertiesInner>() {
           @Override
           public void write(JsonWriter out, CanonicalProfileDefinitionPropertiesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CanonicalProfileDefinitionPropertiesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CanonicalProfileDefinitionPropertiesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CanonicalProfileDefinitionPropertiesInner
   * @throws IOException if the JSON string is invalid with respect to CanonicalProfileDefinitionPropertiesInner
   */
  public static CanonicalProfileDefinitionPropertiesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CanonicalProfileDefinitionPropertiesInner.class);
  }

  /**
   * Convert an instance of CanonicalProfileDefinitionPropertiesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

