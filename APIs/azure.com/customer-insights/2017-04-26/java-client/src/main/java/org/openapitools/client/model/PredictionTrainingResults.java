/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CanonicalProfileDefinition;
import org.openapitools.client.model.PredictionDistributionDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The training results of the prediction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictionTrainingResults {
  public static final String SERIALIZED_NAME_CANONICAL_PROFILES = "canonicalProfiles";
  @SerializedName(SERIALIZED_NAME_CANONICAL_PROFILES)
  private List<CanonicalProfileDefinition> canonicalProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREDICTION_DISTRIBUTION = "predictionDistribution";
  @SerializedName(SERIALIZED_NAME_PREDICTION_DISTRIBUTION)
  private PredictionDistributionDefinition predictionDistribution;

  public static final String SERIALIZED_NAME_PRIMARY_PROFILE_INSTANCE_COUNT = "primaryProfileInstanceCount";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PROFILE_INSTANCE_COUNT)
  private Long primaryProfileInstanceCount;

  public static final String SERIALIZED_NAME_SCORE_NAME = "scoreName";
  @SerializedName(SERIALIZED_NAME_SCORE_NAME)
  private String scoreName;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public PredictionTrainingResults() {
  }

  public PredictionTrainingResults(
     List<CanonicalProfileDefinition> canonicalProfiles, 
     Long primaryProfileInstanceCount, 
     String scoreName, 
     String tenantId
  ) {
    this();
    this.canonicalProfiles = canonicalProfiles;
    this.primaryProfileInstanceCount = primaryProfileInstanceCount;
    this.scoreName = scoreName;
    this.tenantId = tenantId;
  }

  /**
   * Canonical profiles.
   * @return canonicalProfiles
   */
  @javax.annotation.Nullable
  public List<CanonicalProfileDefinition> getCanonicalProfiles() {
    return canonicalProfiles;
  }



  public PredictionTrainingResults predictionDistribution(PredictionDistributionDefinition predictionDistribution) {
    this.predictionDistribution = predictionDistribution;
    return this;
  }

  /**
   * Get predictionDistribution
   * @return predictionDistribution
   */
  @javax.annotation.Nullable
  public PredictionDistributionDefinition getPredictionDistribution() {
    return predictionDistribution;
  }

  public void setPredictionDistribution(PredictionDistributionDefinition predictionDistribution) {
    this.predictionDistribution = predictionDistribution;
  }


  /**
   * Instance count of the primary profile.
   * @return primaryProfileInstanceCount
   */
  @javax.annotation.Nullable
  public Long getPrimaryProfileInstanceCount() {
    return primaryProfileInstanceCount;
  }



  /**
   * Score name.
   * @return scoreName
   */
  @javax.annotation.Nullable
  public String getScoreName() {
    return scoreName;
  }



  /**
   * The hub name.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictionTrainingResults predictionTrainingResults = (PredictionTrainingResults) o;
    return Objects.equals(this.canonicalProfiles, predictionTrainingResults.canonicalProfiles) &&
        Objects.equals(this.predictionDistribution, predictionTrainingResults.predictionDistribution) &&
        Objects.equals(this.primaryProfileInstanceCount, predictionTrainingResults.primaryProfileInstanceCount) &&
        Objects.equals(this.scoreName, predictionTrainingResults.scoreName) &&
        Objects.equals(this.tenantId, predictionTrainingResults.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canonicalProfiles, predictionDistribution, primaryProfileInstanceCount, scoreName, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictionTrainingResults {\n");
    sb.append("    canonicalProfiles: ").append(toIndentedString(canonicalProfiles)).append("\n");
    sb.append("    predictionDistribution: ").append(toIndentedString(predictionDistribution)).append("\n");
    sb.append("    primaryProfileInstanceCount: ").append(toIndentedString(primaryProfileInstanceCount)).append("\n");
    sb.append("    scoreName: ").append(toIndentedString(scoreName)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canonicalProfiles");
    openapiFields.add("predictionDistribution");
    openapiFields.add("primaryProfileInstanceCount");
    openapiFields.add("scoreName");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictionTrainingResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictionTrainingResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictionTrainingResults is not found in the empty JSON string", PredictionTrainingResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictionTrainingResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictionTrainingResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("canonicalProfiles") != null && !jsonObj.get("canonicalProfiles").isJsonNull()) {
        JsonArray jsonArraycanonicalProfiles = jsonObj.getAsJsonArray("canonicalProfiles");
        if (jsonArraycanonicalProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("canonicalProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `canonicalProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("canonicalProfiles").toString()));
          }

          // validate the optional field `canonicalProfiles` (array)
          for (int i = 0; i < jsonArraycanonicalProfiles.size(); i++) {
            CanonicalProfileDefinition.validateJsonElement(jsonArraycanonicalProfiles.get(i));
          };
        }
      }
      // validate the optional field `predictionDistribution`
      if (jsonObj.get("predictionDistribution") != null && !jsonObj.get("predictionDistribution").isJsonNull()) {
        PredictionDistributionDefinition.validateJsonElement(jsonObj.get("predictionDistribution"));
      }
      if ((jsonObj.get("scoreName") != null && !jsonObj.get("scoreName").isJsonNull()) && !jsonObj.get("scoreName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scoreName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scoreName").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictionTrainingResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictionTrainingResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictionTrainingResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictionTrainingResults.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictionTrainingResults>() {
           @Override
           public void write(JsonWriter out, PredictionTrainingResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictionTrainingResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictionTrainingResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictionTrainingResults
   * @throws IOException if the JSON string is invalid with respect to PredictionTrainingResults
   */
  public static PredictionTrainingResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictionTrainingResults.class);
  }

  /**
   * Convert an instance of PredictionTrainingResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

