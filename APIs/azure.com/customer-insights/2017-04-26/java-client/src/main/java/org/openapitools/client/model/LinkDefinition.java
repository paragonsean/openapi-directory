/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ParticipantPropertyReference;
import org.openapitools.client.model.ProvisioningState;
import org.openapitools.client.model.TypePropertiesMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of Link.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinkDefinition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Map<String, String> description = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private Map<String, String> displayName = new HashMap<>();

  public static final String SERIALIZED_NAME_LINK_NAME = "linkName";
  @SerializedName(SERIALIZED_NAME_LINK_NAME)
  private String linkName;

  public static final String SERIALIZED_NAME_MAPPINGS = "mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  private List<TypePropertiesMapping> mappings = new ArrayList<>();

  /**
   * Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
   */
  @JsonAdapter(OperationTypeEnum.Adapter.class)
  public enum OperationTypeEnum {
    UPSERT("Upsert"),
    
    DELETE("Delete");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationTypeEnum fromValue(String value) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private OperationTypeEnum operationType;

  public static final String SERIALIZED_NAME_PARTICIPANT_PROPERTY_REFERENCES = "participantPropertyReferences";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_PROPERTY_REFERENCES)
  private List<ParticipantPropertyReference> participantPropertyReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_REFERENCE_ONLY = "referenceOnly";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ONLY)
  private Boolean referenceOnly;

  /**
   * Type of source entity.
   */
  @JsonAdapter(SourceEntityTypeEnum.Adapter.class)
  public enum SourceEntityTypeEnum {
    NONE("None"),
    
    PROFILE("Profile"),
    
    INTERACTION("Interaction"),
    
    RELATIONSHIP("Relationship");

    private String value;

    SourceEntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEntityTypeEnum fromValue(String value) {
      for (SourceEntityTypeEnum b : SourceEntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceEntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_ENTITY_TYPE = "sourceEntityType";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY_TYPE)
  private SourceEntityTypeEnum sourceEntityType;

  public static final String SERIALIZED_NAME_SOURCE_ENTITY_TYPE_NAME = "sourceEntityTypeName";
  @SerializedName(SERIALIZED_NAME_SOURCE_ENTITY_TYPE_NAME)
  private String sourceEntityTypeName;

  /**
   * Type of target entity.
   */
  @JsonAdapter(TargetEntityTypeEnum.Adapter.class)
  public enum TargetEntityTypeEnum {
    NONE("None"),
    
    PROFILE("Profile"),
    
    INTERACTION("Interaction"),
    
    RELATIONSHIP("Relationship");

    private String value;

    TargetEntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetEntityTypeEnum fromValue(String value) {
      for (TargetEntityTypeEnum b : TargetEntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetEntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetEntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_ENTITY_TYPE = "targetEntityType";
  @SerializedName(SERIALIZED_NAME_TARGET_ENTITY_TYPE)
  private TargetEntityTypeEnum targetEntityType;

  public static final String SERIALIZED_NAME_TARGET_ENTITY_TYPE_NAME = "targetEntityTypeName";
  @SerializedName(SERIALIZED_NAME_TARGET_ENTITY_TYPE_NAME)
  private String targetEntityTypeName;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public LinkDefinition() {
  }

  public LinkDefinition(
     String linkName, 
     String tenantId
  ) {
    this();
    this.linkName = linkName;
    this.tenantId = tenantId;
  }

  public LinkDefinition description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public LinkDefinition putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

  /**
   * Localized descriptions for the Link.
   * @return description
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }


  public LinkDefinition displayName(Map<String, String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public LinkDefinition putDisplayNameItem(String key, String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new HashMap<>();
    }
    this.displayName.put(key, displayNameItem);
    return this;
  }

  /**
   * Localized display name for the Link.
   * @return displayName
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(Map<String, String> displayName) {
    this.displayName = displayName;
  }


  /**
   * The link name.
   * @return linkName
   */
  @javax.annotation.Nullable
  public String getLinkName() {
    return linkName;
  }



  public LinkDefinition mappings(List<TypePropertiesMapping> mappings) {
    this.mappings = mappings;
    return this;
  }

  public LinkDefinition addMappingsItem(TypePropertiesMapping mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new ArrayList<>();
    }
    this.mappings.add(mappingsItem);
    return this;
  }

  /**
   * The set of properties mappings between the source and target Types.
   * @return mappings
   */
  @javax.annotation.Nullable
  public List<TypePropertiesMapping> getMappings() {
    return mappings;
  }

  public void setMappings(List<TypePropertiesMapping> mappings) {
    this.mappings = mappings;
  }


  public LinkDefinition operationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
   * @return operationType
   */
  @javax.annotation.Nullable
  public OperationTypeEnum getOperationType() {
    return operationType;
  }

  public void setOperationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
  }


  public LinkDefinition participantPropertyReferences(List<ParticipantPropertyReference> participantPropertyReferences) {
    this.participantPropertyReferences = participantPropertyReferences;
    return this;
  }

  public LinkDefinition addParticipantPropertyReferencesItem(ParticipantPropertyReference participantPropertyReferencesItem) {
    if (this.participantPropertyReferences == null) {
      this.participantPropertyReferences = new ArrayList<>();
    }
    this.participantPropertyReferences.add(participantPropertyReferencesItem);
    return this;
  }

  /**
   * The properties that represent the participating profile.
   * @return participantPropertyReferences
   */
  @javax.annotation.Nonnull
  public List<ParticipantPropertyReference> getParticipantPropertyReferences() {
    return participantPropertyReferences;
  }

  public void setParticipantPropertyReferences(List<ParticipantPropertyReference> participantPropertyReferences) {
    this.participantPropertyReferences = participantPropertyReferences;
  }


  public LinkDefinition provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public LinkDefinition referenceOnly(Boolean referenceOnly) {
    this.referenceOnly = referenceOnly;
    return this;
  }

  /**
   * Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
   * @return referenceOnly
   */
  @javax.annotation.Nullable
  public Boolean getReferenceOnly() {
    return referenceOnly;
  }

  public void setReferenceOnly(Boolean referenceOnly) {
    this.referenceOnly = referenceOnly;
  }


  public LinkDefinition sourceEntityType(SourceEntityTypeEnum sourceEntityType) {
    this.sourceEntityType = sourceEntityType;
    return this;
  }

  /**
   * Type of source entity.
   * @return sourceEntityType
   */
  @javax.annotation.Nonnull
  public SourceEntityTypeEnum getSourceEntityType() {
    return sourceEntityType;
  }

  public void setSourceEntityType(SourceEntityTypeEnum sourceEntityType) {
    this.sourceEntityType = sourceEntityType;
  }


  public LinkDefinition sourceEntityTypeName(String sourceEntityTypeName) {
    this.sourceEntityTypeName = sourceEntityTypeName;
    return this;
  }

  /**
   * Name of the source Entity Type.
   * @return sourceEntityTypeName
   */
  @javax.annotation.Nonnull
  public String getSourceEntityTypeName() {
    return sourceEntityTypeName;
  }

  public void setSourceEntityTypeName(String sourceEntityTypeName) {
    this.sourceEntityTypeName = sourceEntityTypeName;
  }


  public LinkDefinition targetEntityType(TargetEntityTypeEnum targetEntityType) {
    this.targetEntityType = targetEntityType;
    return this;
  }

  /**
   * Type of target entity.
   * @return targetEntityType
   */
  @javax.annotation.Nonnull
  public TargetEntityTypeEnum getTargetEntityType() {
    return targetEntityType;
  }

  public void setTargetEntityType(TargetEntityTypeEnum targetEntityType) {
    this.targetEntityType = targetEntityType;
  }


  public LinkDefinition targetEntityTypeName(String targetEntityTypeName) {
    this.targetEntityTypeName = targetEntityTypeName;
    return this;
  }

  /**
   * Name of the target Entity Type.
   * @return targetEntityTypeName
   */
  @javax.annotation.Nonnull
  public String getTargetEntityTypeName() {
    return targetEntityTypeName;
  }

  public void setTargetEntityTypeName(String targetEntityTypeName) {
    this.targetEntityTypeName = targetEntityTypeName;
  }


  /**
   * The hub name.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkDefinition linkDefinition = (LinkDefinition) o;
    return Objects.equals(this.description, linkDefinition.description) &&
        Objects.equals(this.displayName, linkDefinition.displayName) &&
        Objects.equals(this.linkName, linkDefinition.linkName) &&
        Objects.equals(this.mappings, linkDefinition.mappings) &&
        Objects.equals(this.operationType, linkDefinition.operationType) &&
        Objects.equals(this.participantPropertyReferences, linkDefinition.participantPropertyReferences) &&
        Objects.equals(this.provisioningState, linkDefinition.provisioningState) &&
        Objects.equals(this.referenceOnly, linkDefinition.referenceOnly) &&
        Objects.equals(this.sourceEntityType, linkDefinition.sourceEntityType) &&
        Objects.equals(this.sourceEntityTypeName, linkDefinition.sourceEntityTypeName) &&
        Objects.equals(this.targetEntityType, linkDefinition.targetEntityType) &&
        Objects.equals(this.targetEntityTypeName, linkDefinition.targetEntityTypeName) &&
        Objects.equals(this.tenantId, linkDefinition.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, linkName, mappings, operationType, participantPropertyReferences, provisioningState, referenceOnly, sourceEntityType, sourceEntityTypeName, targetEntityType, targetEntityTypeName, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkDefinition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    linkName: ").append(toIndentedString(linkName)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    participantPropertyReferences: ").append(toIndentedString(participantPropertyReferences)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    referenceOnly: ").append(toIndentedString(referenceOnly)).append("\n");
    sb.append("    sourceEntityType: ").append(toIndentedString(sourceEntityType)).append("\n");
    sb.append("    sourceEntityTypeName: ").append(toIndentedString(sourceEntityTypeName)).append("\n");
    sb.append("    targetEntityType: ").append(toIndentedString(targetEntityType)).append("\n");
    sb.append("    targetEntityTypeName: ").append(toIndentedString(targetEntityTypeName)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("linkName");
    openapiFields.add("mappings");
    openapiFields.add("operationType");
    openapiFields.add("participantPropertyReferences");
    openapiFields.add("provisioningState");
    openapiFields.add("referenceOnly");
    openapiFields.add("sourceEntityType");
    openapiFields.add("sourceEntityTypeName");
    openapiFields.add("targetEntityType");
    openapiFields.add("targetEntityTypeName");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("participantPropertyReferences");
    openapiRequiredFields.add("sourceEntityType");
    openapiRequiredFields.add("sourceEntityTypeName");
    openapiRequiredFields.add("targetEntityType");
    openapiRequiredFields.add("targetEntityTypeName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinkDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkDefinition is not found in the empty JSON string", LinkDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LinkDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("linkName") != null && !jsonObj.get("linkName").isJsonNull()) && !jsonObj.get("linkName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkName").toString()));
      }
      if (jsonObj.get("mappings") != null && !jsonObj.get("mappings").isJsonNull()) {
        JsonArray jsonArraymappings = jsonObj.getAsJsonArray("mappings");
        if (jsonArraymappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mappings` to be an array in the JSON string but got `%s`", jsonObj.get("mappings").toString()));
          }

          // validate the optional field `mappings` (array)
          for (int i = 0; i < jsonArraymappings.size(); i++) {
            TypePropertiesMapping.validateJsonElement(jsonArraymappings.get(i));
          };
        }
      }
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      // validate the optional field `operationType`
      if (jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) {
        OperationTypeEnum.validateJsonElement(jsonObj.get("operationType"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("participantPropertyReferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `participantPropertyReferences` to be an array in the JSON string but got `%s`", jsonObj.get("participantPropertyReferences").toString()));
      }

      JsonArray jsonArrayparticipantPropertyReferences = jsonObj.getAsJsonArray("participantPropertyReferences");
      // validate the required field `participantPropertyReferences` (array)
      for (int i = 0; i < jsonArrayparticipantPropertyReferences.size(); i++) {
        ParticipantPropertyReference.validateJsonElement(jsonArrayparticipantPropertyReferences.get(i));
      };
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if (!jsonObj.get("sourceEntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceEntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceEntityType").toString()));
      }
      // validate the required field `sourceEntityType`
      SourceEntityTypeEnum.validateJsonElement(jsonObj.get("sourceEntityType"));
      if (!jsonObj.get("sourceEntityTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceEntityTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceEntityTypeName").toString()));
      }
      if (!jsonObj.get("targetEntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetEntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetEntityType").toString()));
      }
      // validate the required field `targetEntityType`
      TargetEntityTypeEnum.validateJsonElement(jsonObj.get("targetEntityType"));
      if (!jsonObj.get("targetEntityTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetEntityTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetEntityTypeName").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkDefinition>() {
           @Override
           public void write(JsonWriter out, LinkDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinkDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinkDefinition
   * @throws IOException if the JSON string is invalid with respect to LinkDefinition
   */
  public static LinkDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkDefinition.class);
  }

  /**
   * Convert an instance of LinkDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

