/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.PropertyDefinition;
import org.openapitools.client.model.ProvisioningState;
import org.openapitools.client.model.StrongId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The profile type definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProfileTypeDefinition {
  public static final String SERIALIZED_NAME_STRONG_IDS = "strongIds";
  @SerializedName(SERIALIZED_NAME_STRONG_IDS)
  private List<StrongId> strongIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_API_ENTITY_SET_NAME = "apiEntitySetName";
  @SerializedName(SERIALIZED_NAME_API_ENTITY_SET_NAME)
  private String apiEntitySetName;

  /**
   * Type of entity.
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    NONE("None"),
    
    PROFILE("Profile"),
    
    INTERACTION("Interaction"),
    
    RELATIONSHIP("Relationship");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<PropertyDefinition> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANCES_COUNT = "instancesCount";
  @SerializedName(SERIALIZED_NAME_INSTANCES_COUNT)
  private Integer instancesCount;

  public static final String SERIALIZED_NAME_LAST_CHANGED_UTC = "lastChangedUtc";
  @SerializedName(SERIALIZED_NAME_LAST_CHANGED_UTC)
  private OffsetDateTime lastChangedUtc;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_SCHEMA_ITEM_TYPE_LINK = "schemaItemTypeLink";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ITEM_TYPE_LINK)
  private String schemaItemTypeLink;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TIMESTAMP_FIELD_NAME = "timestampFieldName";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_FIELD_NAME)
  private String timestampFieldName;

  public static final String SERIALIZED_NAME_TYPE_NAME = "typeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, List<String>> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Map<String, String> description = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private Map<String, String> displayName = new HashMap<>();

  public static final String SERIALIZED_NAME_LARGE_IMAGE = "largeImage";
  @SerializedName(SERIALIZED_NAME_LARGE_IMAGE)
  private String largeImage;

  public static final String SERIALIZED_NAME_LOCALIZED_ATTRIBUTES = "localizedAttributes";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_ATTRIBUTES)
  private Map<String, Map<String, String>> localizedAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_MEDIUM_IMAGE = "mediumImage";
  @SerializedName(SERIALIZED_NAME_MEDIUM_IMAGE)
  private String mediumImage;

  public static final String SERIALIZED_NAME_SMALL_IMAGE = "smallImage";
  @SerializedName(SERIALIZED_NAME_SMALL_IMAGE)
  private String smallImage;

  public ProfileTypeDefinition() {
  }

  public ProfileTypeDefinition(
     OffsetDateTime lastChangedUtc, 
     String tenantId
  ) {
    this();
    this.lastChangedUtc = lastChangedUtc;
    this.tenantId = tenantId;
  }

  public ProfileTypeDefinition strongIds(List<StrongId> strongIds) {
    this.strongIds = strongIds;
    return this;
  }

  public ProfileTypeDefinition addStrongIdsItem(StrongId strongIdsItem) {
    if (this.strongIds == null) {
      this.strongIds = new ArrayList<>();
    }
    this.strongIds.add(strongIdsItem);
    return this;
  }

  /**
   * The strong IDs.
   * @return strongIds
   */
  @javax.annotation.Nullable
  public List<StrongId> getStrongIds() {
    return strongIds;
  }

  public void setStrongIds(List<StrongId> strongIds) {
    this.strongIds = strongIds;
  }


  public ProfileTypeDefinition apiEntitySetName(String apiEntitySetName) {
    this.apiEntitySetName = apiEntitySetName;
    return this;
  }

  /**
   * The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
   * @return apiEntitySetName
   */
  @javax.annotation.Nullable
  public String getApiEntitySetName() {
    return apiEntitySetName;
  }

  public void setApiEntitySetName(String apiEntitySetName) {
    this.apiEntitySetName = apiEntitySetName;
  }


  public ProfileTypeDefinition entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Type of entity.
   * @return entityType
   */
  @javax.annotation.Nullable
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public ProfileTypeDefinition fields(List<PropertyDefinition> fields) {
    this.fields = fields;
    return this;
  }

  public ProfileTypeDefinition addFieldsItem(PropertyDefinition fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * The properties of the Profile.
   * @return fields
   */
  @javax.annotation.Nullable
  public List<PropertyDefinition> getFields() {
    return fields;
  }

  public void setFields(List<PropertyDefinition> fields) {
    this.fields = fields;
  }


  public ProfileTypeDefinition instancesCount(Integer instancesCount) {
    this.instancesCount = instancesCount;
    return this;
  }

  /**
   * The instance count.
   * @return instancesCount
   */
  @javax.annotation.Nullable
  public Integer getInstancesCount() {
    return instancesCount;
  }

  public void setInstancesCount(Integer instancesCount) {
    this.instancesCount = instancesCount;
  }


  /**
   * The last changed time for the type definition.
   * @return lastChangedUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastChangedUtc() {
    return lastChangedUtc;
  }



  public ProfileTypeDefinition provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ProfileTypeDefinition schemaItemTypeLink(String schemaItemTypeLink) {
    this.schemaItemTypeLink = schemaItemTypeLink;
    return this;
  }

  /**
   * The schema org link. This helps ACI identify and suggest semantic models.
   * @return schemaItemTypeLink
   */
  @javax.annotation.Nullable
  public String getSchemaItemTypeLink() {
    return schemaItemTypeLink;
  }

  public void setSchemaItemTypeLink(String schemaItemTypeLink) {
    this.schemaItemTypeLink = schemaItemTypeLink;
  }


  /**
   * The hub name.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }



  public ProfileTypeDefinition timestampFieldName(String timestampFieldName) {
    this.timestampFieldName = timestampFieldName;
    return this;
  }

  /**
   * The timestamp property name. Represents the time when the interaction or profile update happened.
   * @return timestampFieldName
   */
  @javax.annotation.Nullable
  public String getTimestampFieldName() {
    return timestampFieldName;
  }

  public void setTimestampFieldName(String timestampFieldName) {
    this.timestampFieldName = timestampFieldName;
  }


  public ProfileTypeDefinition typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * The name of the entity.
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public ProfileTypeDefinition attributes(Map<String, List<String>> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ProfileTypeDefinition putAttributesItem(String key, List<String> attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * The attributes for the Type.
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, List<String>> attributes) {
    this.attributes = attributes;
  }


  public ProfileTypeDefinition description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public ProfileTypeDefinition putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

  /**
   * Localized descriptions for the property.
   * @return description
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }


  public ProfileTypeDefinition displayName(Map<String, String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public ProfileTypeDefinition putDisplayNameItem(String key, String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new HashMap<>();
    }
    this.displayName.put(key, displayNameItem);
    return this;
  }

  /**
   * Localized display names for the property.
   * @return displayName
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(Map<String, String> displayName) {
    this.displayName = displayName;
  }


  public ProfileTypeDefinition largeImage(String largeImage) {
    this.largeImage = largeImage;
    return this;
  }

  /**
   * Large Image associated with the Property or EntityType.
   * @return largeImage
   */
  @javax.annotation.Nullable
  public String getLargeImage() {
    return largeImage;
  }

  public void setLargeImage(String largeImage) {
    this.largeImage = largeImage;
  }


  public ProfileTypeDefinition localizedAttributes(Map<String, Map<String, String>> localizedAttributes) {
    this.localizedAttributes = localizedAttributes;
    return this;
  }

  public ProfileTypeDefinition putLocalizedAttributesItem(String key, Map<String, String> localizedAttributesItem) {
    if (this.localizedAttributes == null) {
      this.localizedAttributes = new HashMap<>();
    }
    this.localizedAttributes.put(key, localizedAttributesItem);
    return this;
  }

  /**
   * Any custom localized attributes for the Type.
   * @return localizedAttributes
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, String>> getLocalizedAttributes() {
    return localizedAttributes;
  }

  public void setLocalizedAttributes(Map<String, Map<String, String>> localizedAttributes) {
    this.localizedAttributes = localizedAttributes;
  }


  public ProfileTypeDefinition mediumImage(String mediumImage) {
    this.mediumImage = mediumImage;
    return this;
  }

  /**
   * Medium Image associated with the Property or EntityType.
   * @return mediumImage
   */
  @javax.annotation.Nullable
  public String getMediumImage() {
    return mediumImage;
  }

  public void setMediumImage(String mediumImage) {
    this.mediumImage = mediumImage;
  }


  public ProfileTypeDefinition smallImage(String smallImage) {
    this.smallImage = smallImage;
    return this;
  }

  /**
   * Small Image associated with the Property or EntityType.
   * @return smallImage
   */
  @javax.annotation.Nullable
  public String getSmallImage() {
    return smallImage;
  }

  public void setSmallImage(String smallImage) {
    this.smallImage = smallImage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfileTypeDefinition profileTypeDefinition = (ProfileTypeDefinition) o;
    return Objects.equals(this.strongIds, profileTypeDefinition.strongIds) &&
        Objects.equals(this.apiEntitySetName, profileTypeDefinition.apiEntitySetName) &&
        Objects.equals(this.entityType, profileTypeDefinition.entityType) &&
        Objects.equals(this.fields, profileTypeDefinition.fields) &&
        Objects.equals(this.instancesCount, profileTypeDefinition.instancesCount) &&
        Objects.equals(this.lastChangedUtc, profileTypeDefinition.lastChangedUtc) &&
        Objects.equals(this.provisioningState, profileTypeDefinition.provisioningState) &&
        Objects.equals(this.schemaItemTypeLink, profileTypeDefinition.schemaItemTypeLink) &&
        Objects.equals(this.tenantId, profileTypeDefinition.tenantId) &&
        Objects.equals(this.timestampFieldName, profileTypeDefinition.timestampFieldName) &&
        Objects.equals(this.typeName, profileTypeDefinition.typeName) &&
        Objects.equals(this.attributes, profileTypeDefinition.attributes) &&
        Objects.equals(this.description, profileTypeDefinition.description) &&
        Objects.equals(this.displayName, profileTypeDefinition.displayName) &&
        Objects.equals(this.largeImage, profileTypeDefinition.largeImage) &&
        Objects.equals(this.localizedAttributes, profileTypeDefinition.localizedAttributes) &&
        Objects.equals(this.mediumImage, profileTypeDefinition.mediumImage) &&
        Objects.equals(this.smallImage, profileTypeDefinition.smallImage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(strongIds, apiEntitySetName, entityType, fields, instancesCount, lastChangedUtc, provisioningState, schemaItemTypeLink, tenantId, timestampFieldName, typeName, attributes, description, displayName, largeImage, localizedAttributes, mediumImage, smallImage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfileTypeDefinition {\n");
    sb.append("    strongIds: ").append(toIndentedString(strongIds)).append("\n");
    sb.append("    apiEntitySetName: ").append(toIndentedString(apiEntitySetName)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    instancesCount: ").append(toIndentedString(instancesCount)).append("\n");
    sb.append("    lastChangedUtc: ").append(toIndentedString(lastChangedUtc)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    schemaItemTypeLink: ").append(toIndentedString(schemaItemTypeLink)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    timestampFieldName: ").append(toIndentedString(timestampFieldName)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    largeImage: ").append(toIndentedString(largeImage)).append("\n");
    sb.append("    localizedAttributes: ").append(toIndentedString(localizedAttributes)).append("\n");
    sb.append("    mediumImage: ").append(toIndentedString(mediumImage)).append("\n");
    sb.append("    smallImage: ").append(toIndentedString(smallImage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiEntitySetName");
    openapiFields.add("entityType");
    openapiFields.add("fields");
    openapiFields.add("instancesCount");
    openapiFields.add("lastChangedUtc");
    openapiFields.add("provisioningState");
    openapiFields.add("schemaItemTypeLink");
    openapiFields.add("tenantId");
    openapiFields.add("timestampFieldName");
    openapiFields.add("typeName");
    openapiFields.add("attributes");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("largeImage");
    openapiFields.add("localizedAttributes");
    openapiFields.add("mediumImage");
    openapiFields.add("smallImage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProfileTypeDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfileTypeDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfileTypeDefinition is not found in the empty JSON string", ProfileTypeDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfileTypeDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfileTypeDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("strongIds") != null && !jsonObj.get("strongIds").isJsonNull()) {
        JsonArray jsonArraystrongIds = jsonObj.getAsJsonArray("strongIds");
        if (jsonArraystrongIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("strongIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `strongIds` to be an array in the JSON string but got `%s`", jsonObj.get("strongIds").toString()));
          }

          // validate the optional field `strongIds` (array)
          for (int i = 0; i < jsonArraystrongIds.size(); i++) {
            StrongId.validateJsonElement(jsonArraystrongIds.get(i));
          };
        }
      }
      if ((jsonObj.get("apiEntitySetName") != null && !jsonObj.get("apiEntitySetName").isJsonNull()) && !jsonObj.get("apiEntitySetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiEntitySetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiEntitySetName").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            PropertyDefinition.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("schemaItemTypeLink") != null && !jsonObj.get("schemaItemTypeLink").isJsonNull()) && !jsonObj.get("schemaItemTypeLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaItemTypeLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaItemTypeLink").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("timestampFieldName") != null && !jsonObj.get("timestampFieldName").isJsonNull()) && !jsonObj.get("timestampFieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestampFieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestampFieldName").toString()));
      }
      if ((jsonObj.get("typeName") != null && !jsonObj.get("typeName").isJsonNull()) && !jsonObj.get("typeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeName").toString()));
      }
      if ((jsonObj.get("largeImage") != null && !jsonObj.get("largeImage").isJsonNull()) && !jsonObj.get("largeImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largeImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largeImage").toString()));
      }
      if ((jsonObj.get("mediumImage") != null && !jsonObj.get("mediumImage").isJsonNull()) && !jsonObj.get("mediumImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediumImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediumImage").toString()));
      }
      if ((jsonObj.get("smallImage") != null && !jsonObj.get("smallImage").isJsonNull()) && !jsonObj.get("smallImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallImage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfileTypeDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfileTypeDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfileTypeDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfileTypeDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfileTypeDefinition>() {
           @Override
           public void write(JsonWriter out, ProfileTypeDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfileTypeDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProfileTypeDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProfileTypeDefinition
   * @throws IOException if the JSON string is invalid with respect to ProfileTypeDefinition
   */
  public static ProfileTypeDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfileTypeDefinition.class);
  }

  /**
   * Convert an instance of ProfileTypeDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

