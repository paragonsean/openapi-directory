/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of a prediction distribution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictionDistributionDefinitionDistributionsInner {
  public static final String SERIALIZED_NAME_NEGATIVES = "negatives";
  @SerializedName(SERIALIZED_NAME_NEGATIVES)
  private Long negatives;

  public static final String SERIALIZED_NAME_NEGATIVES_ABOVE_THRESHOLD = "negativesAboveThreshold";
  @SerializedName(SERIALIZED_NAME_NEGATIVES_ABOVE_THRESHOLD)
  private Long negativesAboveThreshold;

  public static final String SERIALIZED_NAME_POSITIVES = "positives";
  @SerializedName(SERIALIZED_NAME_POSITIVES)
  private Long positives;

  public static final String SERIALIZED_NAME_POSITIVES_ABOVE_THRESHOLD = "positivesAboveThreshold";
  @SerializedName(SERIALIZED_NAME_POSITIVES_ABOVE_THRESHOLD)
  private Long positivesAboveThreshold;

  public static final String SERIALIZED_NAME_SCORE_THRESHOLD = "scoreThreshold";
  @SerializedName(SERIALIZED_NAME_SCORE_THRESHOLD)
  private Integer scoreThreshold;

  public PredictionDistributionDefinitionDistributionsInner() {
  }

  public PredictionDistributionDefinitionDistributionsInner negatives(Long negatives) {
    this.negatives = negatives;
    return this;
  }

  /**
   * Number of negatives.
   * @return negatives
   */
  @javax.annotation.Nullable
  public Long getNegatives() {
    return negatives;
  }

  public void setNegatives(Long negatives) {
    this.negatives = negatives;
  }


  public PredictionDistributionDefinitionDistributionsInner negativesAboveThreshold(Long negativesAboveThreshold) {
    this.negativesAboveThreshold = negativesAboveThreshold;
    return this;
  }

  /**
   * Number of negatives above threshold.
   * @return negativesAboveThreshold
   */
  @javax.annotation.Nullable
  public Long getNegativesAboveThreshold() {
    return negativesAboveThreshold;
  }

  public void setNegativesAboveThreshold(Long negativesAboveThreshold) {
    this.negativesAboveThreshold = negativesAboveThreshold;
  }


  public PredictionDistributionDefinitionDistributionsInner positives(Long positives) {
    this.positives = positives;
    return this;
  }

  /**
   * Number of positives.
   * @return positives
   */
  @javax.annotation.Nullable
  public Long getPositives() {
    return positives;
  }

  public void setPositives(Long positives) {
    this.positives = positives;
  }


  public PredictionDistributionDefinitionDistributionsInner positivesAboveThreshold(Long positivesAboveThreshold) {
    this.positivesAboveThreshold = positivesAboveThreshold;
    return this;
  }

  /**
   * Number of positives above threshold.
   * @return positivesAboveThreshold
   */
  @javax.annotation.Nullable
  public Long getPositivesAboveThreshold() {
    return positivesAboveThreshold;
  }

  public void setPositivesAboveThreshold(Long positivesAboveThreshold) {
    this.positivesAboveThreshold = positivesAboveThreshold;
  }


  public PredictionDistributionDefinitionDistributionsInner scoreThreshold(Integer scoreThreshold) {
    this.scoreThreshold = scoreThreshold;
    return this;
  }

  /**
   * Score threshold.
   * @return scoreThreshold
   */
  @javax.annotation.Nullable
  public Integer getScoreThreshold() {
    return scoreThreshold;
  }

  public void setScoreThreshold(Integer scoreThreshold) {
    this.scoreThreshold = scoreThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictionDistributionDefinitionDistributionsInner predictionDistributionDefinitionDistributionsInner = (PredictionDistributionDefinitionDistributionsInner) o;
    return Objects.equals(this.negatives, predictionDistributionDefinitionDistributionsInner.negatives) &&
        Objects.equals(this.negativesAboveThreshold, predictionDistributionDefinitionDistributionsInner.negativesAboveThreshold) &&
        Objects.equals(this.positives, predictionDistributionDefinitionDistributionsInner.positives) &&
        Objects.equals(this.positivesAboveThreshold, predictionDistributionDefinitionDistributionsInner.positivesAboveThreshold) &&
        Objects.equals(this.scoreThreshold, predictionDistributionDefinitionDistributionsInner.scoreThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negatives, negativesAboveThreshold, positives, positivesAboveThreshold, scoreThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictionDistributionDefinitionDistributionsInner {\n");
    sb.append("    negatives: ").append(toIndentedString(negatives)).append("\n");
    sb.append("    negativesAboveThreshold: ").append(toIndentedString(negativesAboveThreshold)).append("\n");
    sb.append("    positives: ").append(toIndentedString(positives)).append("\n");
    sb.append("    positivesAboveThreshold: ").append(toIndentedString(positivesAboveThreshold)).append("\n");
    sb.append("    scoreThreshold: ").append(toIndentedString(scoreThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("negatives");
    openapiFields.add("negativesAboveThreshold");
    openapiFields.add("positives");
    openapiFields.add("positivesAboveThreshold");
    openapiFields.add("scoreThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictionDistributionDefinitionDistributionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictionDistributionDefinitionDistributionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictionDistributionDefinitionDistributionsInner is not found in the empty JSON string", PredictionDistributionDefinitionDistributionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictionDistributionDefinitionDistributionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictionDistributionDefinitionDistributionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictionDistributionDefinitionDistributionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictionDistributionDefinitionDistributionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictionDistributionDefinitionDistributionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictionDistributionDefinitionDistributionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictionDistributionDefinitionDistributionsInner>() {
           @Override
           public void write(JsonWriter out, PredictionDistributionDefinitionDistributionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictionDistributionDefinitionDistributionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictionDistributionDefinitionDistributionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictionDistributionDefinitionDistributionsInner
   * @throws IOException if the JSON string is invalid with respect to PredictionDistributionDefinitionDistributionsInner
   */
  public static PredictionDistributionDefinitionDistributionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictionDistributionDefinitionDistributionsInner.class);
  }

  /**
   * Convert an instance of PredictionDistributionDefinitionDistributionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

