/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.KpiAlias;
import org.openapitools.client.model.KpiExtract;
import org.openapitools.client.model.KpiGroupByMetadata;
import org.openapitools.client.model.KpiParticipantProfilesMetadata;
import org.openapitools.client.model.KpiThresholds;
import org.openapitools.client.model.ProvisioningState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the KPI Threshold limits.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KpiDefinition {
  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private List<KpiAlias> aliases = new ArrayList<>();

  /**
   * The calculation window.
   */
  @JsonAdapter(CalculationWindowEnum.Adapter.class)
  public enum CalculationWindowEnum {
    LIFETIME("Lifetime"),
    
    HOUR("Hour"),
    
    DAY("Day"),
    
    WEEK("Week"),
    
    MONTH("Month");

    private String value;

    CalculationWindowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalculationWindowEnum fromValue(String value) {
      for (CalculationWindowEnum b : CalculationWindowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalculationWindowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalculationWindowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalculationWindowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CalculationWindowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CalculationWindowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALCULATION_WINDOW = "calculationWindow";
  @SerializedName(SERIALIZED_NAME_CALCULATION_WINDOW)
  private CalculationWindowEnum calculationWindow;

  public static final String SERIALIZED_NAME_CALCULATION_WINDOW_FIELD_NAME = "calculationWindowFieldName";
  @SerializedName(SERIALIZED_NAME_CALCULATION_WINDOW_FIELD_NAME)
  private String calculationWindowFieldName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Map<String, String> description = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private Map<String, String> displayName = new HashMap<>();

  /**
   * The mapping entity type.
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    NONE("None"),
    
    PROFILE("Profile"),
    
    INTERACTION("Interaction"),
    
    RELATIONSHIP("Relationship");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_ENTITY_TYPE_NAME = "entityTypeName";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE_NAME)
  private String entityTypeName;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_EXTRACTS = "extracts";
  @SerializedName(SERIALIZED_NAME_EXTRACTS)
  private List<KpiExtract> extracts = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  /**
   * The computation function for the KPI.
   */
  @JsonAdapter(FunctionEnum.Adapter.class)
  public enum FunctionEnum {
    SUM("Sum"),
    
    AVG("Avg"),
    
    MIN("Min"),
    
    MAX("Max"),
    
    LAST("Last"),
    
    COUNT("Count"),
    
    NONE("None"),
    
    COUNT_DISTINCT("CountDistinct");

    private String value;

    FunctionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FunctionEnum fromValue(String value) {
      for (FunctionEnum b : FunctionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FunctionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FunctionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FunctionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FunctionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FunctionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FUNCTION = "function";
  @SerializedName(SERIALIZED_NAME_FUNCTION)
  private FunctionEnum function;

  public static final String SERIALIZED_NAME_GROUP_BY = "groupBy";
  @SerializedName(SERIALIZED_NAME_GROUP_BY)
  private List<String> groupBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_BY_METADATA = "groupByMetadata";
  @SerializedName(SERIALIZED_NAME_GROUP_BY_METADATA)
  private List<KpiGroupByMetadata> groupByMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_KPI_NAME = "kpiName";
  @SerializedName(SERIALIZED_NAME_KPI_NAME)
  private String kpiName;

  public static final String SERIALIZED_NAME_PARTICIPANT_PROFILES_METADATA = "participantProfilesMetadata";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_PROFILES_METADATA)
  private List<KpiParticipantProfilesMetadata> participantProfilesMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_THRES_HOLDS = "thresHolds";
  @SerializedName(SERIALIZED_NAME_THRES_HOLDS)
  private KpiThresholds thresHolds;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public KpiDefinition() {
  }

  public KpiDefinition(
     List<KpiGroupByMetadata> groupByMetadata, 
     String kpiName, 
     List<KpiParticipantProfilesMetadata> participantProfilesMetadata, 
     String tenantId
  ) {
    this();
    this.groupByMetadata = groupByMetadata;
    this.kpiName = kpiName;
    this.participantProfilesMetadata = participantProfilesMetadata;
    this.tenantId = tenantId;
  }

  public KpiDefinition aliases(List<KpiAlias> aliases) {
    this.aliases = aliases;
    return this;
  }

  public KpiDefinition addAliasesItem(KpiAlias aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

  /**
   * The aliases.
   * @return aliases
   */
  @javax.annotation.Nullable
  public List<KpiAlias> getAliases() {
    return aliases;
  }

  public void setAliases(List<KpiAlias> aliases) {
    this.aliases = aliases;
  }


  public KpiDefinition calculationWindow(CalculationWindowEnum calculationWindow) {
    this.calculationWindow = calculationWindow;
    return this;
  }

  /**
   * The calculation window.
   * @return calculationWindow
   */
  @javax.annotation.Nonnull
  public CalculationWindowEnum getCalculationWindow() {
    return calculationWindow;
  }

  public void setCalculationWindow(CalculationWindowEnum calculationWindow) {
    this.calculationWindow = calculationWindow;
  }


  public KpiDefinition calculationWindowFieldName(String calculationWindowFieldName) {
    this.calculationWindowFieldName = calculationWindowFieldName;
    return this;
  }

  /**
   * Name of calculation window field.
   * @return calculationWindowFieldName
   */
  @javax.annotation.Nullable
  public String getCalculationWindowFieldName() {
    return calculationWindowFieldName;
  }

  public void setCalculationWindowFieldName(String calculationWindowFieldName) {
    this.calculationWindowFieldName = calculationWindowFieldName;
  }


  public KpiDefinition description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public KpiDefinition putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

  /**
   * Localized description for the KPI.
   * @return description
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }


  public KpiDefinition displayName(Map<String, String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public KpiDefinition putDisplayNameItem(String key, String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new HashMap<>();
    }
    this.displayName.put(key, displayNameItem);
    return this;
  }

  /**
   * Localized display name for the KPI.
   * @return displayName
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(Map<String, String> displayName) {
    this.displayName = displayName;
  }


  public KpiDefinition entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * The mapping entity type.
   * @return entityType
   */
  @javax.annotation.Nonnull
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public KpiDefinition entityTypeName(String entityTypeName) {
    this.entityTypeName = entityTypeName;
    return this;
  }

  /**
   * The mapping entity name.
   * @return entityTypeName
   */
  @javax.annotation.Nonnull
  public String getEntityTypeName() {
    return entityTypeName;
  }

  public void setEntityTypeName(String entityTypeName) {
    this.entityTypeName = entityTypeName;
  }


  public KpiDefinition expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * The computation expression for the KPI.
   * @return expression
   */
  @javax.annotation.Nonnull
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public KpiDefinition extracts(List<KpiExtract> extracts) {
    this.extracts = extracts;
    return this;
  }

  public KpiDefinition addExtractsItem(KpiExtract extractsItem) {
    if (this.extracts == null) {
      this.extracts = new ArrayList<>();
    }
    this.extracts.add(extractsItem);
    return this;
  }

  /**
   * The KPI extracts.
   * @return extracts
   */
  @javax.annotation.Nullable
  public List<KpiExtract> getExtracts() {
    return extracts;
  }

  public void setExtracts(List<KpiExtract> extracts) {
    this.extracts = extracts;
  }


  public KpiDefinition filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * The filter expression for the KPI.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public KpiDefinition function(FunctionEnum function) {
    this.function = function;
    return this;
  }

  /**
   * The computation function for the KPI.
   * @return function
   */
  @javax.annotation.Nonnull
  public FunctionEnum getFunction() {
    return function;
  }

  public void setFunction(FunctionEnum function) {
    this.function = function;
  }


  public KpiDefinition groupBy(List<String> groupBy) {
    this.groupBy = groupBy;
    return this;
  }

  public KpiDefinition addGroupByItem(String groupByItem) {
    if (this.groupBy == null) {
      this.groupBy = new ArrayList<>();
    }
    this.groupBy.add(groupByItem);
    return this;
  }

  /**
   * the group by properties for the KPI.
   * @return groupBy
   */
  @javax.annotation.Nullable
  public List<String> getGroupBy() {
    return groupBy;
  }

  public void setGroupBy(List<String> groupBy) {
    this.groupBy = groupBy;
  }


  /**
   * The KPI GroupByMetadata.
   * @return groupByMetadata
   */
  @javax.annotation.Nullable
  public List<KpiGroupByMetadata> getGroupByMetadata() {
    return groupByMetadata;
  }



  /**
   * The KPI name.
   * @return kpiName
   */
  @javax.annotation.Nullable
  public String getKpiName() {
    return kpiName;
  }



  /**
   * The participant profiles.
   * @return participantProfilesMetadata
   */
  @javax.annotation.Nullable
  public List<KpiParticipantProfilesMetadata> getParticipantProfilesMetadata() {
    return participantProfilesMetadata;
  }



  public KpiDefinition provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  /**
   * The hub name.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }



  public KpiDefinition thresHolds(KpiThresholds thresHolds) {
    this.thresHolds = thresHolds;
    return this;
  }

  /**
   * Get thresHolds
   * @return thresHolds
   */
  @javax.annotation.Nullable
  public KpiThresholds getThresHolds() {
    return thresHolds;
  }

  public void setThresHolds(KpiThresholds thresHolds) {
    this.thresHolds = thresHolds;
  }


  public KpiDefinition unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The unit of measurement for the KPI.
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KpiDefinition kpiDefinition = (KpiDefinition) o;
    return Objects.equals(this.aliases, kpiDefinition.aliases) &&
        Objects.equals(this.calculationWindow, kpiDefinition.calculationWindow) &&
        Objects.equals(this.calculationWindowFieldName, kpiDefinition.calculationWindowFieldName) &&
        Objects.equals(this.description, kpiDefinition.description) &&
        Objects.equals(this.displayName, kpiDefinition.displayName) &&
        Objects.equals(this.entityType, kpiDefinition.entityType) &&
        Objects.equals(this.entityTypeName, kpiDefinition.entityTypeName) &&
        Objects.equals(this.expression, kpiDefinition.expression) &&
        Objects.equals(this.extracts, kpiDefinition.extracts) &&
        Objects.equals(this.filter, kpiDefinition.filter) &&
        Objects.equals(this.function, kpiDefinition.function) &&
        Objects.equals(this.groupBy, kpiDefinition.groupBy) &&
        Objects.equals(this.groupByMetadata, kpiDefinition.groupByMetadata) &&
        Objects.equals(this.kpiName, kpiDefinition.kpiName) &&
        Objects.equals(this.participantProfilesMetadata, kpiDefinition.participantProfilesMetadata) &&
        Objects.equals(this.provisioningState, kpiDefinition.provisioningState) &&
        Objects.equals(this.tenantId, kpiDefinition.tenantId) &&
        Objects.equals(this.thresHolds, kpiDefinition.thresHolds) &&
        Objects.equals(this.unit, kpiDefinition.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliases, calculationWindow, calculationWindowFieldName, description, displayName, entityType, entityTypeName, expression, extracts, filter, function, groupBy, groupByMetadata, kpiName, participantProfilesMetadata, provisioningState, tenantId, thresHolds, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KpiDefinition {\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    calculationWindow: ").append(toIndentedString(calculationWindow)).append("\n");
    sb.append("    calculationWindowFieldName: ").append(toIndentedString(calculationWindowFieldName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityTypeName: ").append(toIndentedString(entityTypeName)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    extracts: ").append(toIndentedString(extracts)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("    groupByMetadata: ").append(toIndentedString(groupByMetadata)).append("\n");
    sb.append("    kpiName: ").append(toIndentedString(kpiName)).append("\n");
    sb.append("    participantProfilesMetadata: ").append(toIndentedString(participantProfilesMetadata)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    thresHolds: ").append(toIndentedString(thresHolds)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliases");
    openapiFields.add("calculationWindow");
    openapiFields.add("calculationWindowFieldName");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("entityType");
    openapiFields.add("entityTypeName");
    openapiFields.add("expression");
    openapiFields.add("extracts");
    openapiFields.add("filter");
    openapiFields.add("function");
    openapiFields.add("groupBy");
    openapiFields.add("groupByMetadata");
    openapiFields.add("kpiName");
    openapiFields.add("participantProfilesMetadata");
    openapiFields.add("provisioningState");
    openapiFields.add("tenantId");
    openapiFields.add("thresHolds");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("calculationWindow");
    openapiRequiredFields.add("entityType");
    openapiRequiredFields.add("entityTypeName");
    openapiRequiredFields.add("expression");
    openapiRequiredFields.add("function");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KpiDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KpiDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KpiDefinition is not found in the empty JSON string", KpiDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KpiDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KpiDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : KpiDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("aliases") != null && !jsonObj.get("aliases").isJsonNull()) {
        JsonArray jsonArrayaliases = jsonObj.getAsJsonArray("aliases");
        if (jsonArrayaliases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aliases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aliases` to be an array in the JSON string but got `%s`", jsonObj.get("aliases").toString()));
          }

          // validate the optional field `aliases` (array)
          for (int i = 0; i < jsonArrayaliases.size(); i++) {
            KpiAlias.validateJsonElement(jsonArrayaliases.get(i));
          };
        }
      }
      if (!jsonObj.get("calculationWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculationWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculationWindow").toString()));
      }
      // validate the required field `calculationWindow`
      CalculationWindowEnum.validateJsonElement(jsonObj.get("calculationWindow"));
      if ((jsonObj.get("calculationWindowFieldName") != null && !jsonObj.get("calculationWindowFieldName").isJsonNull()) && !jsonObj.get("calculationWindowFieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculationWindowFieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculationWindowFieldName").toString()));
      }
      if (!jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the required field `entityType`
      EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      if (!jsonObj.get("entityTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityTypeName").toString()));
      }
      if (!jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      if (jsonObj.get("extracts") != null && !jsonObj.get("extracts").isJsonNull()) {
        JsonArray jsonArrayextracts = jsonObj.getAsJsonArray("extracts");
        if (jsonArrayextracts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extracts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extracts` to be an array in the JSON string but got `%s`", jsonObj.get("extracts").toString()));
          }

          // validate the optional field `extracts` (array)
          for (int i = 0; i < jsonArrayextracts.size(); i++) {
            KpiExtract.validateJsonElement(jsonArrayextracts.get(i));
          };
        }
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if (!jsonObj.get("function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("function").toString()));
      }
      // validate the required field `function`
      FunctionEnum.validateJsonElement(jsonObj.get("function"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("groupBy") != null && !jsonObj.get("groupBy").isJsonNull() && !jsonObj.get("groupBy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupBy` to be an array in the JSON string but got `%s`", jsonObj.get("groupBy").toString()));
      }
      if (jsonObj.get("groupByMetadata") != null && !jsonObj.get("groupByMetadata").isJsonNull()) {
        JsonArray jsonArraygroupByMetadata = jsonObj.getAsJsonArray("groupByMetadata");
        if (jsonArraygroupByMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupByMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupByMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("groupByMetadata").toString()));
          }

          // validate the optional field `groupByMetadata` (array)
          for (int i = 0; i < jsonArraygroupByMetadata.size(); i++) {
            KpiGroupByMetadata.validateJsonElement(jsonArraygroupByMetadata.get(i));
          };
        }
      }
      if ((jsonObj.get("kpiName") != null && !jsonObj.get("kpiName").isJsonNull()) && !jsonObj.get("kpiName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kpiName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kpiName").toString()));
      }
      if (jsonObj.get("participantProfilesMetadata") != null && !jsonObj.get("participantProfilesMetadata").isJsonNull()) {
        JsonArray jsonArrayparticipantProfilesMetadata = jsonObj.getAsJsonArray("participantProfilesMetadata");
        if (jsonArrayparticipantProfilesMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("participantProfilesMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `participantProfilesMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("participantProfilesMetadata").toString()));
          }

          // validate the optional field `participantProfilesMetadata` (array)
          for (int i = 0; i < jsonArrayparticipantProfilesMetadata.size(); i++) {
            KpiParticipantProfilesMetadata.validateJsonElement(jsonArrayparticipantProfilesMetadata.get(i));
          };
        }
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      // validate the optional field `thresHolds`
      if (jsonObj.get("thresHolds") != null && !jsonObj.get("thresHolds").isJsonNull()) {
        KpiThresholds.validateJsonElement(jsonObj.get("thresHolds"));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KpiDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KpiDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KpiDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KpiDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<KpiDefinition>() {
           @Override
           public void write(JsonWriter out, KpiDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KpiDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KpiDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KpiDefinition
   * @throws IOException if the JSON string is invalid with respect to KpiDefinition
   */
  public static KpiDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KpiDefinition.class);
  }

  /**
   * Convert an instance of KpiDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

