/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ConnectorMappingProperties;
import org.openapitools.client.model.ConnectorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The connector mapping definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorMapping {
  public static final String SERIALIZED_NAME_CONNECTOR_MAPPING_NAME = "connectorMappingName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_MAPPING_NAME)
  private String connectorMappingName;

  public static final String SERIALIZED_NAME_CONNECTOR_NAME = "connectorName";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_NAME)
  private String connectorName;

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  private ConnectorType connectorType;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DATA_FORMAT_ID = "dataFormatId";
  @SerializedName(SERIALIZED_NAME_DATA_FORMAT_ID)
  private String dataFormatId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Defines which entity type the file should map to.
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    NONE("None"),
    
    PROFILE("Profile"),
    
    INTERACTION("Interaction"),
    
    RELATIONSHIP("Relationship");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_ENTITY_TYPE_NAME = "entityTypeName";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE_NAME)
  private String entityTypeName;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_MAPPING_PROPERTIES = "mappingProperties";
  @SerializedName(SERIALIZED_NAME_MAPPING_PROPERTIES)
  private ConnectorMappingProperties mappingProperties;

  public static final String SERIALIZED_NAME_NEXT_RUN_TIME = "nextRunTime";
  @SerializedName(SERIALIZED_NAME_NEXT_RUN_TIME)
  private OffsetDateTime nextRunTime;

  public static final String SERIALIZED_NAME_RUN_ID = "runId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  /**
   * State of connector mapping.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    CREATING("Creating"),
    
    CREATED("Created"),
    
    FAILED("Failed"),
    
    READY("Ready"),
    
    RUNNING("Running"),
    
    STOPPED("Stopped"),
    
    EXPIRING("Expiring");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public ConnectorMapping() {
  }

  public ConnectorMapping(
     String connectorMappingName, 
     String connectorName, 
     OffsetDateTime created, 
     String dataFormatId, 
     OffsetDateTime lastModified, 
     OffsetDateTime nextRunTime, 
     String runId, 
     StateEnum state, 
     String tenantId
  ) {
    this();
    this.connectorMappingName = connectorMappingName;
    this.connectorName = connectorName;
    this.created = created;
    this.dataFormatId = dataFormatId;
    this.lastModified = lastModified;
    this.nextRunTime = nextRunTime;
    this.runId = runId;
    this.state = state;
    this.tenantId = tenantId;
  }

  /**
   * The connector mapping name
   * @return connectorMappingName
   */
  @javax.annotation.Nullable
  public String getConnectorMappingName() {
    return connectorMappingName;
  }



  /**
   * The connector name.
   * @return connectorName
   */
  @javax.annotation.Nullable
  public String getConnectorName() {
    return connectorName;
  }



  public ConnectorMapping connectorType(ConnectorType connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  /**
   * Get connectorType
   * @return connectorType
   */
  @javax.annotation.Nullable
  public ConnectorType getConnectorType() {
    return connectorType;
  }

  public void setConnectorType(ConnectorType connectorType) {
    this.connectorType = connectorType;
  }


  /**
   * The created time.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * The DataFormat ID.
   * @return dataFormatId
   */
  @javax.annotation.Nullable
  public String getDataFormatId() {
    return dataFormatId;
  }



  public ConnectorMapping description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the connector mapping.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ConnectorMapping displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name for the connector mapping.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ConnectorMapping entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Defines which entity type the file should map to.
   * @return entityType
   */
  @javax.annotation.Nonnull
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public ConnectorMapping entityTypeName(String entityTypeName) {
    this.entityTypeName = entityTypeName;
    return this;
  }

  /**
   * The mapping entity name.
   * @return entityTypeName
   */
  @javax.annotation.Nonnull
  public String getEntityTypeName() {
    return entityTypeName;
  }

  public void setEntityTypeName(String entityTypeName) {
    this.entityTypeName = entityTypeName;
  }


  /**
   * The last modified time.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }



  public ConnectorMapping mappingProperties(ConnectorMappingProperties mappingProperties) {
    this.mappingProperties = mappingProperties;
    return this;
  }

  /**
   * Get mappingProperties
   * @return mappingProperties
   */
  @javax.annotation.Nonnull
  public ConnectorMappingProperties getMappingProperties() {
    return mappingProperties;
  }

  public void setMappingProperties(ConnectorMappingProperties mappingProperties) {
    this.mappingProperties = mappingProperties;
  }


  /**
   * The next run time based on customer&#39;s settings.
   * @return nextRunTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextRunTime() {
    return nextRunTime;
  }



  /**
   * The RunId.
   * @return runId
   */
  @javax.annotation.Nullable
  public String getRunId() {
    return runId;
  }



  /**
   * State of connector mapping.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * The hub name.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorMapping connectorMapping = (ConnectorMapping) o;
    return Objects.equals(this.connectorMappingName, connectorMapping.connectorMappingName) &&
        Objects.equals(this.connectorName, connectorMapping.connectorName) &&
        Objects.equals(this.connectorType, connectorMapping.connectorType) &&
        Objects.equals(this.created, connectorMapping.created) &&
        Objects.equals(this.dataFormatId, connectorMapping.dataFormatId) &&
        Objects.equals(this.description, connectorMapping.description) &&
        Objects.equals(this.displayName, connectorMapping.displayName) &&
        Objects.equals(this.entityType, connectorMapping.entityType) &&
        Objects.equals(this.entityTypeName, connectorMapping.entityTypeName) &&
        Objects.equals(this.lastModified, connectorMapping.lastModified) &&
        Objects.equals(this.mappingProperties, connectorMapping.mappingProperties) &&
        Objects.equals(this.nextRunTime, connectorMapping.nextRunTime) &&
        Objects.equals(this.runId, connectorMapping.runId) &&
        Objects.equals(this.state, connectorMapping.state) &&
        Objects.equals(this.tenantId, connectorMapping.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorMappingName, connectorName, connectorType, created, dataFormatId, description, displayName, entityType, entityTypeName, lastModified, mappingProperties, nextRunTime, runId, state, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorMapping {\n");
    sb.append("    connectorMappingName: ").append(toIndentedString(connectorMappingName)).append("\n");
    sb.append("    connectorName: ").append(toIndentedString(connectorName)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dataFormatId: ").append(toIndentedString(dataFormatId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityTypeName: ").append(toIndentedString(entityTypeName)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    mappingProperties: ").append(toIndentedString(mappingProperties)).append("\n");
    sb.append("    nextRunTime: ").append(toIndentedString(nextRunTime)).append("\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorMappingName");
    openapiFields.add("connectorName");
    openapiFields.add("connectorType");
    openapiFields.add("created");
    openapiFields.add("dataFormatId");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("entityType");
    openapiFields.add("entityTypeName");
    openapiFields.add("lastModified");
    openapiFields.add("mappingProperties");
    openapiFields.add("nextRunTime");
    openapiFields.add("runId");
    openapiFields.add("state");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("entityType");
    openapiRequiredFields.add("entityTypeName");
    openapiRequiredFields.add("mappingProperties");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorMapping is not found in the empty JSON string", ConnectorMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectorMapping.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectorMappingName") != null && !jsonObj.get("connectorMappingName").isJsonNull()) && !jsonObj.get("connectorMappingName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorMappingName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorMappingName").toString()));
      }
      if ((jsonObj.get("connectorName") != null && !jsonObj.get("connectorName").isJsonNull()) && !jsonObj.get("connectorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorName").toString()));
      }
      // validate the optional field `connectorType`
      if (jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) {
        ConnectorType.validateJsonElement(jsonObj.get("connectorType"));
      }
      if ((jsonObj.get("dataFormatId") != null && !jsonObj.get("dataFormatId").isJsonNull()) && !jsonObj.get("dataFormatId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataFormatId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataFormatId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the required field `entityType`
      EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      if (!jsonObj.get("entityTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityTypeName").toString()));
      }
      // validate the required field `mappingProperties`
      ConnectorMappingProperties.validateJsonElement(jsonObj.get("mappingProperties"));
      if ((jsonObj.get("runId") != null && !jsonObj.get("runId").isJsonNull()) && !jsonObj.get("runId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorMapping>() {
           @Override
           public void write(JsonWriter out, ConnectorMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorMapping
   * @throws IOException if the JSON string is invalid with respect to ConnectorMapping
   */
  public static ConnectorMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorMapping.class);
  }

  /**
   * Convert an instance of ConnectorMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

