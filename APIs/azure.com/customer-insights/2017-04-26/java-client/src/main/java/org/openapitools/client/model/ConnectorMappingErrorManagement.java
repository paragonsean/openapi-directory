/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The error management.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorMappingErrorManagement {
  public static final String SERIALIZED_NAME_ERROR_LIMIT = "errorLimit";
  @SerializedName(SERIALIZED_NAME_ERROR_LIMIT)
  private Integer errorLimit;

  /**
   * The type of error management to use for the mapping.
   */
  @JsonAdapter(ErrorManagementTypeEnum.Adapter.class)
  public enum ErrorManagementTypeEnum {
    REJECT_AND_CONTINUE("RejectAndContinue"),
    
    STOP_IMPORT("StopImport"),
    
    REJECT_UNTIL_LIMIT("RejectUntilLimit");

    private String value;

    ErrorManagementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorManagementTypeEnum fromValue(String value) {
      for (ErrorManagementTypeEnum b : ErrorManagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorManagementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorManagementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorManagementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorManagementTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorManagementTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_MANAGEMENT_TYPE = "errorManagementType";
  @SerializedName(SERIALIZED_NAME_ERROR_MANAGEMENT_TYPE)
  private ErrorManagementTypeEnum errorManagementType;

  public ConnectorMappingErrorManagement() {
  }

  public ConnectorMappingErrorManagement errorLimit(Integer errorLimit) {
    this.errorLimit = errorLimit;
    return this;
  }

  /**
   * The error limit allowed while importing data.
   * @return errorLimit
   */
  @javax.annotation.Nullable
  public Integer getErrorLimit() {
    return errorLimit;
  }

  public void setErrorLimit(Integer errorLimit) {
    this.errorLimit = errorLimit;
  }


  public ConnectorMappingErrorManagement errorManagementType(ErrorManagementTypeEnum errorManagementType) {
    this.errorManagementType = errorManagementType;
    return this;
  }

  /**
   * The type of error management to use for the mapping.
   * @return errorManagementType
   */
  @javax.annotation.Nonnull
  public ErrorManagementTypeEnum getErrorManagementType() {
    return errorManagementType;
  }

  public void setErrorManagementType(ErrorManagementTypeEnum errorManagementType) {
    this.errorManagementType = errorManagementType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorMappingErrorManagement connectorMappingErrorManagement = (ConnectorMappingErrorManagement) o;
    return Objects.equals(this.errorLimit, connectorMappingErrorManagement.errorLimit) &&
        Objects.equals(this.errorManagementType, connectorMappingErrorManagement.errorManagementType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorLimit, errorManagementType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorMappingErrorManagement {\n");
    sb.append("    errorLimit: ").append(toIndentedString(errorLimit)).append("\n");
    sb.append("    errorManagementType: ").append(toIndentedString(errorManagementType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorLimit");
    openapiFields.add("errorManagementType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("errorManagementType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorMappingErrorManagement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorMappingErrorManagement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorMappingErrorManagement is not found in the empty JSON string", ConnectorMappingErrorManagement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorMappingErrorManagement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorMappingErrorManagement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectorMappingErrorManagement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("errorManagementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorManagementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorManagementType").toString()));
      }
      // validate the required field `errorManagementType`
      ErrorManagementTypeEnum.validateJsonElement(jsonObj.get("errorManagementType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorMappingErrorManagement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorMappingErrorManagement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorMappingErrorManagement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorMappingErrorManagement.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorMappingErrorManagement>() {
           @Override
           public void write(JsonWriter out, ConnectorMappingErrorManagement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorMappingErrorManagement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorMappingErrorManagement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorMappingErrorManagement
   * @throws IOException if the JSON string is invalid with respect to ConnectorMappingErrorManagement
   */
  public static ConnectorMappingErrorManagement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorMappingErrorManagement.class);
  }

  /**
   * Convert an instance of ConnectorMappingErrorManagement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

