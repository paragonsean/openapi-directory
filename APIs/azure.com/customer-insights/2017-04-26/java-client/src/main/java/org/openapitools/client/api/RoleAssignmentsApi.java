/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RoleAssignmentListResult;
import org.openapitools.client.model.RoleAssignmentResourceFormat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoleAssignmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoleAssignmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoleAssignmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for roleAssignmentsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The assignment name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the role assignment. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create role assignment operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsCreateOrUpdateCall(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, RoleAssignmentResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "assignmentName" + "}", localVarApiClient.escapeString(assignmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, RoleAssignmentResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling roleAssignmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling roleAssignmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'assignmentName' is set
        if (assignmentName == null) {
            throw new ApiException("Missing the required parameter 'assignmentName' when calling roleAssignmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling roleAssignmentsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling roleAssignmentsCreateOrUpdate(Async)");
        }

        return roleAssignmentsCreateOrUpdateCall(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a role assignment in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The assignment name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation. (required)
     * @return RoleAssignmentResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the role assignment. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create role assignment operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignmentResourceFormat roleAssignmentsCreateOrUpdate(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, RoleAssignmentResourceFormat parameters) throws ApiException {
        ApiResponse<RoleAssignmentResourceFormat> localVarResp = roleAssignmentsCreateOrUpdateWithHttpInfo(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a role assignment in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The assignment name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation. (required)
     * @return ApiResponse&lt;RoleAssignmentResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the role assignment. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create role assignment operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignmentResourceFormat> roleAssignmentsCreateOrUpdateWithHttpInfo(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, RoleAssignmentResourceFormat parameters) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<RoleAssignmentResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a role assignment in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The assignment name (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate RoleAssignment operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the role assignment. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create role assignment operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsCreateOrUpdateAsync(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, RoleAssignmentResourceFormat parameters, final ApiCallback<RoleAssignmentResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignmentResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The name of the role assignment. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The role assignment is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsDeleteCall(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "assignmentName" + "}", localVarApiClient.escapeString(assignmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsDeleteValidateBeforeCall(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling roleAssignmentsDelete(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling roleAssignmentsDelete(Async)");
        }

        // verify the required parameter 'assignmentName' is set
        if (assignmentName == null) {
            throw new ApiException("Missing the required parameter 'assignmentName' when calling roleAssignmentsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling roleAssignmentsDelete(Async)");
        }

        return roleAssignmentsDeleteCall(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the role assignment in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The name of the role assignment. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The role assignment is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public void roleAssignmentsDelete(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId) throws ApiException {
        roleAssignmentsDeleteWithHttpInfo(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the role assignment in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The name of the role assignment. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The role assignment is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> roleAssignmentsDeleteWithHttpInfo(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsDeleteValidateBeforeCall(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the role assignment in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The name of the role assignment. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The role assignment is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsDeleteAsync(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsDeleteValidateBeforeCall(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The name of the role assignment. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsGetCall(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments/{assignmentName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "assignmentName" + "}", localVarApiClient.escapeString(assignmentName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsGetValidateBeforeCall(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling roleAssignmentsGet(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling roleAssignmentsGet(Async)");
        }

        // verify the required parameter 'assignmentName' is set
        if (assignmentName == null) {
            throw new ApiException("Missing the required parameter 'assignmentName' when calling roleAssignmentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling roleAssignmentsGet(Async)");
        }

        return roleAssignmentsGetCall(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the role assignment in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The name of the role assignment. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return RoleAssignmentResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignmentResourceFormat roleAssignmentsGet(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<RoleAssignmentResourceFormat> localVarResp = roleAssignmentsGetWithHttpInfo(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the role assignment in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The name of the role assignment. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;RoleAssignmentResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignmentResourceFormat> roleAssignmentsGetWithHttpInfo(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsGetValidateBeforeCall(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<RoleAssignmentResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the role assignment in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param assignmentName The name of the role assignment. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the role assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsGetAsync(String resourceGroupName, String hubName, String assignmentName, String apiVersion, String subscriptionId, final ApiCallback<RoleAssignmentResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsGetValidateBeforeCall(resourceGroupName, hubName, assignmentName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignmentResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsListByHub
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the role assignment in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListByHubCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/roleAssignments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsListByHubValidateBeforeCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling roleAssignmentsListByHub(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling roleAssignmentsListByHub(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleAssignmentsListByHub(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling roleAssignmentsListByHub(Async)");
        }

        return roleAssignmentsListByHubCall(resourceGroupName, hubName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the role assignments for the specified hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return RoleAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the role assignment in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignmentListResult roleAssignmentsListByHub(String resourceGroupName, String hubName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<RoleAssignmentListResult> localVarResp = roleAssignmentsListByHubWithHttpInfo(resourceGroupName, hubName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the role assignments for the specified hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;RoleAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the role assignment in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignmentListResult> roleAssignmentsListByHubWithHttpInfo(String resourceGroupName, String hubName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<RoleAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the role assignments for the specified hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the role assignment in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListByHubAsync(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback<RoleAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
