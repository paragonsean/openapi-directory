/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The CRM connector entities.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrmConnectorEntities {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IS_PROFILE = "isProfile";
  @SerializedName(SERIALIZED_NAME_IS_PROFILE)
  private Boolean isProfile;

  public static final String SERIALIZED_NAME_LOGICAL_NAME = "logicalName";
  @SerializedName(SERIALIZED_NAME_LOGICAL_NAME)
  private String logicalName;

  public CrmConnectorEntities() {
  }

  public CrmConnectorEntities displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CrmConnectorEntities isProfile(Boolean isProfile) {
    this.isProfile = isProfile;
    return this;
  }

  /**
   * Indicating whether this is profile.
   * @return isProfile
   */
  @javax.annotation.Nullable
  public Boolean getIsProfile() {
    return isProfile;
  }

  public void setIsProfile(Boolean isProfile) {
    this.isProfile = isProfile;
  }


  public CrmConnectorEntities logicalName(String logicalName) {
    this.logicalName = logicalName;
    return this;
  }

  /**
   * The logical name.
   * @return logicalName
   */
  @javax.annotation.Nonnull
  public String getLogicalName() {
    return logicalName;
  }

  public void setLogicalName(String logicalName) {
    this.logicalName = logicalName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrmConnectorEntities crmConnectorEntities = (CrmConnectorEntities) o;
    return Objects.equals(this.displayName, crmConnectorEntities.displayName) &&
        Objects.equals(this.isProfile, crmConnectorEntities.isProfile) &&
        Objects.equals(this.logicalName, crmConnectorEntities.logicalName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, isProfile, logicalName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrmConnectorEntities {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    isProfile: ").append(toIndentedString(isProfile)).append("\n");
    sb.append("    logicalName: ").append(toIndentedString(logicalName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("isProfile");
    openapiFields.add("logicalName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("logicalName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrmConnectorEntities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrmConnectorEntities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrmConnectorEntities is not found in the empty JSON string", CrmConnectorEntities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrmConnectorEntities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrmConnectorEntities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CrmConnectorEntities.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("logicalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logicalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logicalName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrmConnectorEntities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrmConnectorEntities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrmConnectorEntities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrmConnectorEntities.class));

       return (TypeAdapter<T>) new TypeAdapter<CrmConnectorEntities>() {
           @Override
           public void write(JsonWriter out, CrmConnectorEntities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrmConnectorEntities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrmConnectorEntities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrmConnectorEntities
   * @throws IOException if the JSON string is invalid with respect to CrmConnectorEntities
   */
  public static CrmConnectorEntities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrmConnectorEntities.class);
  }

  /**
   * Convert an instance of CrmConnectorEntities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

