/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of WidgetType.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WidgetType {
  public static final String SERIALIZED_NAME_CHANGED = "changed";
  @SerializedName(SERIALIZED_NAME_CHANGED)
  private OffsetDateTime changed;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private String definition;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private Map<String, String> displayName = new HashMap<>();

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_WIDGET_TYPE_NAME = "widgetTypeName";
  @SerializedName(SERIALIZED_NAME_WIDGET_TYPE_NAME)
  private String widgetTypeName;

  public static final String SERIALIZED_NAME_WIDGET_VERSION = "widgetVersion";
  @SerializedName(SERIALIZED_NAME_WIDGET_VERSION)
  private String widgetVersion;

  public WidgetType() {
  }

  public WidgetType(
     OffsetDateTime changed, 
     OffsetDateTime created, 
     String tenantId, 
     String widgetTypeName
  ) {
    this();
    this.changed = changed;
    this.created = created;
    this.tenantId = tenantId;
    this.widgetTypeName = widgetTypeName;
  }

  /**
   * Date time when widget type was last modified.
   * @return changed
   */
  @javax.annotation.Nullable
  public OffsetDateTime getChanged() {
    return changed;
  }



  /**
   * Date time when widget type was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public WidgetType definition(String definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Definition for widget type.
   * @return definition
   */
  @javax.annotation.Nonnull
  public String getDefinition() {
    return definition;
  }

  public void setDefinition(String definition) {
    this.definition = definition;
  }


  public WidgetType description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for widget type.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WidgetType displayName(Map<String, String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public WidgetType putDisplayNameItem(String key, String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new HashMap<>();
    }
    this.displayName.put(key, displayNameItem);
    return this;
  }

  /**
   * Localized display name for the widget type.
   * @return displayName
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(Map<String, String> displayName) {
    this.displayName = displayName;
  }


  public WidgetType imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * The image URL.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  /**
   * The hub name.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }



  /**
   * Name of the widget type.
   * @return widgetTypeName
   */
  @javax.annotation.Nullable
  public String getWidgetTypeName() {
    return widgetTypeName;
  }



  public WidgetType widgetVersion(String widgetVersion) {
    this.widgetVersion = widgetVersion;
    return this;
  }

  /**
   * The widget version.
   * @return widgetVersion
   */
  @javax.annotation.Nullable
  public String getWidgetVersion() {
    return widgetVersion;
  }

  public void setWidgetVersion(String widgetVersion) {
    this.widgetVersion = widgetVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WidgetType widgetType = (WidgetType) o;
    return Objects.equals(this.changed, widgetType.changed) &&
        Objects.equals(this.created, widgetType.created) &&
        Objects.equals(this.definition, widgetType.definition) &&
        Objects.equals(this.description, widgetType.description) &&
        Objects.equals(this.displayName, widgetType.displayName) &&
        Objects.equals(this.imageUrl, widgetType.imageUrl) &&
        Objects.equals(this.tenantId, widgetType.tenantId) &&
        Objects.equals(this.widgetTypeName, widgetType.widgetTypeName) &&
        Objects.equals(this.widgetVersion, widgetType.widgetVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changed, created, definition, description, displayName, imageUrl, tenantId, widgetTypeName, widgetVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WidgetType {\n");
    sb.append("    changed: ").append(toIndentedString(changed)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    widgetTypeName: ").append(toIndentedString(widgetTypeName)).append("\n");
    sb.append("    widgetVersion: ").append(toIndentedString(widgetVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changed");
    openapiFields.add("created");
    openapiFields.add("definition");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("imageUrl");
    openapiFields.add("tenantId");
    openapiFields.add("widgetTypeName");
    openapiFields.add("widgetVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("definition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WidgetType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WidgetType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WidgetType is not found in the empty JSON string", WidgetType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WidgetType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WidgetType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WidgetType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("definition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definition").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("widgetTypeName") != null && !jsonObj.get("widgetTypeName").isJsonNull()) && !jsonObj.get("widgetTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `widgetTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("widgetTypeName").toString()));
      }
      if ((jsonObj.get("widgetVersion") != null && !jsonObj.get("widgetVersion").isJsonNull()) && !jsonObj.get("widgetVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `widgetVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("widgetVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WidgetType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WidgetType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WidgetType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WidgetType.class));

       return (TypeAdapter<T>) new TypeAdapter<WidgetType>() {
           @Override
           public void write(JsonWriter out, WidgetType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WidgetType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WidgetType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WidgetType
   * @throws IOException if the JSON string is invalid with respect to WidgetType
   */
  public static WidgetType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WidgetType.class);
  }

  /**
   * Convert an instance of WidgetType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

