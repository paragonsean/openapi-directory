/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ParticipantPropertyReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a profile type participating in an interaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Participant {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Map<String, String> description = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private Map<String, String> displayName = new HashMap<>();

  public static final String SERIALIZED_NAME_PARTICIPANT_NAME = "participantName";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_NAME)
  private String participantName;

  public static final String SERIALIZED_NAME_PARTICIPANT_PROPERTY_REFERENCES = "participantPropertyReferences";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_PROPERTY_REFERENCES)
  private List<ParticipantPropertyReference> participantPropertyReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILE_TYPE_NAME = "profileTypeName";
  @SerializedName(SERIALIZED_NAME_PROFILE_TYPE_NAME)
  private String profileTypeName;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public Participant() {
  }

  public Participant description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public Participant putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

  /**
   * Localized descriptions.
   * @return description
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }


  public Participant displayName(Map<String, String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public Participant putDisplayNameItem(String key, String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new HashMap<>();
    }
    this.displayName.put(key, displayNameItem);
    return this;
  }

  /**
   * Localized display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(Map<String, String> displayName) {
    this.displayName = displayName;
  }


  public Participant participantName(String participantName) {
    this.participantName = participantName;
    return this;
  }

  /**
   * Participant name.
   * @return participantName
   */
  @javax.annotation.Nonnull
  public String getParticipantName() {
    return participantName;
  }

  public void setParticipantName(String participantName) {
    this.participantName = participantName;
  }


  public Participant participantPropertyReferences(List<ParticipantPropertyReference> participantPropertyReferences) {
    this.participantPropertyReferences = participantPropertyReferences;
    return this;
  }

  public Participant addParticipantPropertyReferencesItem(ParticipantPropertyReference participantPropertyReferencesItem) {
    if (this.participantPropertyReferences == null) {
      this.participantPropertyReferences = new ArrayList<>();
    }
    this.participantPropertyReferences.add(participantPropertyReferencesItem);
    return this;
  }

  /**
   * The property references.
   * @return participantPropertyReferences
   */
  @javax.annotation.Nonnull
  public List<ParticipantPropertyReference> getParticipantPropertyReferences() {
    return participantPropertyReferences;
  }

  public void setParticipantPropertyReferences(List<ParticipantPropertyReference> participantPropertyReferences) {
    this.participantPropertyReferences = participantPropertyReferences;
  }


  public Participant profileTypeName(String profileTypeName) {
    this.profileTypeName = profileTypeName;
    return this;
  }

  /**
   * Profile type name.
   * @return profileTypeName
   */
  @javax.annotation.Nonnull
  public String getProfileTypeName() {
    return profileTypeName;
  }

  public void setProfileTypeName(String profileTypeName) {
    this.profileTypeName = profileTypeName;
  }


  public Participant role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The role that the participant is playing in the interaction.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Participant participant = (Participant) o;
    return Objects.equals(this.description, participant.description) &&
        Objects.equals(this.displayName, participant.displayName) &&
        Objects.equals(this.participantName, participant.participantName) &&
        Objects.equals(this.participantPropertyReferences, participant.participantPropertyReferences) &&
        Objects.equals(this.profileTypeName, participant.profileTypeName) &&
        Objects.equals(this.role, participant.role);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, participantName, participantPropertyReferences, profileTypeName, role);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Participant {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    participantName: ").append(toIndentedString(participantName)).append("\n");
    sb.append("    participantPropertyReferences: ").append(toIndentedString(participantPropertyReferences)).append("\n");
    sb.append("    profileTypeName: ").append(toIndentedString(profileTypeName)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("participantName");
    openapiFields.add("participantPropertyReferences");
    openapiFields.add("profileTypeName");
    openapiFields.add("role");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("participantName");
    openapiRequiredFields.add("participantPropertyReferences");
    openapiRequiredFields.add("profileTypeName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Participant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Participant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Participant is not found in the empty JSON string", Participant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Participant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Participant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Participant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("participantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participantName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("participantPropertyReferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `participantPropertyReferences` to be an array in the JSON string but got `%s`", jsonObj.get("participantPropertyReferences").toString()));
      }

      JsonArray jsonArrayparticipantPropertyReferences = jsonObj.getAsJsonArray("participantPropertyReferences");
      // validate the required field `participantPropertyReferences` (array)
      for (int i = 0; i < jsonArrayparticipantPropertyReferences.size(); i++) {
        ParticipantPropertyReference.validateJsonElement(jsonArrayparticipantPropertyReferences.get(i));
      };
      if (!jsonObj.get("profileTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileTypeName").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Participant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Participant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Participant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Participant.class));

       return (TypeAdapter<T>) new TypeAdapter<Participant>() {
           @Override
           public void write(JsonWriter out, Participant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Participant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Participant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Participant
   * @throws IOException if the JSON string is invalid with respect to Participant
   */
  public static Participant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Participant.class);
  }

  /**
   * Convert an instance of Participant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

