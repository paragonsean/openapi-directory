/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthorizationPolicy;
import org.openapitools.client.model.AuthorizationPolicyListResult;
import org.openapitools.client.model.AuthorizationPolicyResourceFormat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authorizationPoliciesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate authorization policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully update an existing authorization policy. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A new authorization policy is created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationPoliciesCreateOrUpdateCall(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, AuthorizationPolicyResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "authorizationPolicyName" + "}", localVarApiClient.escapeString(authorizationPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationPoliciesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, AuthorizationPolicyResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling authorizationPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling authorizationPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'authorizationPolicyName' is set
        if (authorizationPolicyName == null) {
            throw new ApiException("Missing the required parameter 'authorizationPolicyName' when calling authorizationPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling authorizationPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling authorizationPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling authorizationPoliciesCreateOrUpdate(Async)");
        }

        return authorizationPoliciesCreateOrUpdateCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates an authorization policy or updates an existing authorization policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate authorization policy operation. (required)
     * @return AuthorizationPolicyResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully update an existing authorization policy. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A new authorization policy is created. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationPolicyResourceFormat authorizationPoliciesCreateOrUpdate(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, AuthorizationPolicyResourceFormat parameters) throws ApiException {
        ApiResponse<AuthorizationPolicyResourceFormat> localVarResp = authorizationPoliciesCreateOrUpdateWithHttpInfo(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an authorization policy or updates an existing authorization policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate authorization policy operation. (required)
     * @return ApiResponse&lt;AuthorizationPolicyResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully update an existing authorization policy. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A new authorization policy is created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationPolicyResourceFormat> authorizationPoliciesCreateOrUpdateWithHttpInfo(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, AuthorizationPolicyResourceFormat parameters) throws ApiException {
        okhttp3.Call localVarCall = authorizationPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<AuthorizationPolicyResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an authorization policy or updates an existing authorization policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate authorization policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully update an existing authorization policy. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A new authorization policy is created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationPoliciesCreateOrUpdateAsync(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, AuthorizationPolicyResourceFormat parameters, final ApiCallback<AuthorizationPolicyResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationPolicyResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationPoliciesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the authorization policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationPoliciesGetCall(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "authorizationPolicyName" + "}", localVarApiClient.escapeString(authorizationPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationPoliciesGetValidateBeforeCall(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling authorizationPoliciesGet(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling authorizationPoliciesGet(Async)");
        }

        // verify the required parameter 'authorizationPolicyName' is set
        if (authorizationPolicyName == null) {
            throw new ApiException("Missing the required parameter 'authorizationPolicyName' when calling authorizationPoliciesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling authorizationPoliciesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling authorizationPoliciesGet(Async)");
        }

        return authorizationPoliciesGetCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets an authorization policy in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationPolicyResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the authorization policy. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationPolicyResourceFormat authorizationPoliciesGet(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationPolicyResourceFormat> localVarResp = authorizationPoliciesGetWithHttpInfo(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an authorization policy in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationPolicyResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the authorization policy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationPolicyResourceFormat> authorizationPoliciesGetWithHttpInfo(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = authorizationPoliciesGetValidateBeforeCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationPolicyResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an authorization policy in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the authorization policy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationPoliciesGetAsync(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationPolicyResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationPoliciesGetValidateBeforeCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationPolicyResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationPoliciesListByHub
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the authorization policies in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationPoliciesListByHubCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationPoliciesListByHubValidateBeforeCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling authorizationPoliciesListByHub(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling authorizationPoliciesListByHub(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling authorizationPoliciesListByHub(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling authorizationPoliciesListByHub(Async)");
        }

        return authorizationPoliciesListByHubCall(resourceGroupName, hubName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the authorization policies in a specified hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationPolicyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the authorization policies in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationPolicyListResult authorizationPoliciesListByHub(String resourceGroupName, String hubName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationPolicyListResult> localVarResp = authorizationPoliciesListByHubWithHttpInfo(resourceGroupName, hubName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the authorization policies in a specified hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationPolicyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the authorization policies in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationPolicyListResult> authorizationPoliciesListByHubWithHttpInfo(String resourceGroupName, String hubName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = authorizationPoliciesListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationPolicyListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the authorization policies in a specified hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the authorization policies in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationPoliciesListByHubAsync(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationPolicyListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationPoliciesListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationPolicyListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationPoliciesRegeneratePrimaryKey
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The primary key of the authorization policy is regenerated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationPoliciesRegeneratePrimaryKeyCall(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}/regeneratePrimaryKey"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "authorizationPolicyName" + "}", localVarApiClient.escapeString(authorizationPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationPoliciesRegeneratePrimaryKeyValidateBeforeCall(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling authorizationPoliciesRegeneratePrimaryKey(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling authorizationPoliciesRegeneratePrimaryKey(Async)");
        }

        // verify the required parameter 'authorizationPolicyName' is set
        if (authorizationPolicyName == null) {
            throw new ApiException("Missing the required parameter 'authorizationPolicyName' when calling authorizationPoliciesRegeneratePrimaryKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling authorizationPoliciesRegeneratePrimaryKey(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling authorizationPoliciesRegeneratePrimaryKey(Async)");
        }

        return authorizationPoliciesRegeneratePrimaryKeyCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Regenerates the primary policy key of the specified authorization policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The primary key of the authorization policy is regenerated. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationPolicy authorizationPoliciesRegeneratePrimaryKey(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationPolicy> localVarResp = authorizationPoliciesRegeneratePrimaryKeyWithHttpInfo(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates the primary policy key of the specified authorization policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The primary key of the authorization policy is regenerated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationPolicy> authorizationPoliciesRegeneratePrimaryKeyWithHttpInfo(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = authorizationPoliciesRegeneratePrimaryKeyValidateBeforeCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the primary policy key of the specified authorization policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The primary key of the authorization policy is regenerated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationPoliciesRegeneratePrimaryKeyAsync(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationPoliciesRegeneratePrimaryKeyValidateBeforeCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authorizationPoliciesRegenerateSecondaryKey
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The secondary key of the authorization policy is regenerated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationPoliciesRegenerateSecondaryKeyCall(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}/regenerateSecondaryKey"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "authorizationPolicyName" + "}", localVarApiClient.escapeString(authorizationPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizationPoliciesRegenerateSecondaryKeyValidateBeforeCall(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling authorizationPoliciesRegenerateSecondaryKey(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling authorizationPoliciesRegenerateSecondaryKey(Async)");
        }

        // verify the required parameter 'authorizationPolicyName' is set
        if (authorizationPolicyName == null) {
            throw new ApiException("Missing the required parameter 'authorizationPolicyName' when calling authorizationPoliciesRegenerateSecondaryKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling authorizationPoliciesRegenerateSecondaryKey(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling authorizationPoliciesRegenerateSecondaryKey(Async)");
        }

        return authorizationPoliciesRegenerateSecondaryKeyCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Regenerates the secondary policy key of the specified authorization policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AuthorizationPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The secondary key of the authorization policy is regenerated. </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizationPolicy authorizationPoliciesRegenerateSecondaryKey(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AuthorizationPolicy> localVarResp = authorizationPoliciesRegenerateSecondaryKeyWithHttpInfo(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates the secondary policy key of the specified authorization policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AuthorizationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The secondary key of the authorization policy is regenerated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizationPolicy> authorizationPoliciesRegenerateSecondaryKeyWithHttpInfo(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = authorizationPoliciesRegenerateSecondaryKeyValidateBeforeCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AuthorizationPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the secondary policy key of the specified authorization policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param authorizationPolicyName The name of the policy. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The secondary key of the authorization policy is regenerated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authorizationPoliciesRegenerateSecondaryKeyAsync(String resourceGroupName, String hubName, String authorizationPolicyName, String apiVersion, String subscriptionId, final ApiCallback<AuthorizationPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizationPoliciesRegenerateSecondaryKeyValidateBeforeCall(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizationPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
