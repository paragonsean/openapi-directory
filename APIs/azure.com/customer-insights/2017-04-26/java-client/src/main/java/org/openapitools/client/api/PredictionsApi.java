/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PredictionListResult;
import org.openapitools.client.model.PredictionModelStatus;
import org.openapitools.client.model.PredictionResourceFormat;
import org.openapitools.client.model.PredictionTrainingResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PredictionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PredictionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PredictionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for predictionsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/update Prediction operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the Prediction. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create Prediction operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsCreateOrUpdateCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, PredictionResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "predictionName" + "}", localVarApiClient.escapeString(predictionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, PredictionResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling predictionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling predictionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'predictionName' is set
        if (predictionName == null) {
            throw new ApiException("Missing the required parameter 'predictionName' when calling predictionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling predictionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling predictionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling predictionsCreateOrUpdate(Async)");
        }

        return predictionsCreateOrUpdateCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates a Prediction or updates an existing Prediction in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/update Prediction operation. (required)
     * @return PredictionResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the Prediction. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create Prediction operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public PredictionResourceFormat predictionsCreateOrUpdate(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, PredictionResourceFormat parameters) throws ApiException {
        ApiResponse<PredictionResourceFormat> localVarResp = predictionsCreateOrUpdateWithHttpInfo(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a Prediction or updates an existing Prediction in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/update Prediction operation. (required)
     * @return ApiResponse&lt;PredictionResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the Prediction. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create Prediction operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PredictionResourceFormat> predictionsCreateOrUpdateWithHttpInfo(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, PredictionResourceFormat parameters) throws ApiException {
        okhttp3.Call localVarCall = predictionsCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<PredictionResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a Prediction or updates an existing Prediction in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/update Prediction operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the Prediction. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create Prediction operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsCreateOrUpdateAsync(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, PredictionResourceFormat parameters, final ApiCallback<PredictionResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionsCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<PredictionResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictionsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The Prediction is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsDeleteCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "predictionName" + "}", localVarApiClient.escapeString(predictionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionsDeleteValidateBeforeCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling predictionsDelete(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling predictionsDelete(Async)");
        }

        // verify the required parameter 'predictionName' is set
        if (predictionName == null) {
            throw new ApiException("Missing the required parameter 'predictionName' when calling predictionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling predictionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling predictionsDelete(Async)");
        }

        return predictionsDeleteCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a Prediction in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The Prediction is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public void predictionsDelete(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId) throws ApiException {
        predictionsDeleteWithHttpInfo(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a Prediction in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The Prediction is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> predictionsDeleteWithHttpInfo(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = predictionsDeleteValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a Prediction in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The Prediction is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsDeleteAsync(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionsDeleteValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictionsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the Prediction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsGetCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "predictionName" + "}", localVarApiClient.escapeString(predictionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionsGetValidateBeforeCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling predictionsGet(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling predictionsGet(Async)");
        }

        // verify the required parameter 'predictionName' is set
        if (predictionName == null) {
            throw new ApiException("Missing the required parameter 'predictionName' when calling predictionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling predictionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling predictionsGet(Async)");
        }

        return predictionsGetCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a Prediction in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PredictionResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the Prediction. </td><td>  -  </td></tr>
     </table>
     */
    public PredictionResourceFormat predictionsGet(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PredictionResourceFormat> localVarResp = predictionsGetWithHttpInfo(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a Prediction in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PredictionResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the Prediction. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PredictionResourceFormat> predictionsGetWithHttpInfo(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = predictionsGetValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PredictionResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a Prediction in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the Prediction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsGetAsync(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback<PredictionResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionsGetValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PredictionResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictionsGetModelStatus
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the model status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsGetModelStatusCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/getModelStatus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "predictionName" + "}", localVarApiClient.escapeString(predictionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionsGetModelStatusValidateBeforeCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling predictionsGetModelStatus(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling predictionsGetModelStatus(Async)");
        }

        // verify the required parameter 'predictionName' is set
        if (predictionName == null) {
            throw new ApiException("Missing the required parameter 'predictionName' when calling predictionsGetModelStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling predictionsGetModelStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling predictionsGetModelStatus(Async)");
        }

        return predictionsGetModelStatusCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets model status of the prediction.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PredictionModelStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the model status. </td><td>  -  </td></tr>
     </table>
     */
    public PredictionModelStatus predictionsGetModelStatus(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PredictionModelStatus> localVarResp = predictionsGetModelStatusWithHttpInfo(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets model status of the prediction.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PredictionModelStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the model status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PredictionModelStatus> predictionsGetModelStatusWithHttpInfo(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = predictionsGetModelStatusValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PredictionModelStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets model status of the prediction.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the model status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsGetModelStatusAsync(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback<PredictionModelStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionsGetModelStatusValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PredictionModelStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictionsGetTrainingResults
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the training results. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsGetTrainingResultsCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/getTrainingResults"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "predictionName" + "}", localVarApiClient.escapeString(predictionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionsGetTrainingResultsValidateBeforeCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling predictionsGetTrainingResults(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling predictionsGetTrainingResults(Async)");
        }

        // verify the required parameter 'predictionName' is set
        if (predictionName == null) {
            throw new ApiException("Missing the required parameter 'predictionName' when calling predictionsGetTrainingResults(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling predictionsGetTrainingResults(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling predictionsGetTrainingResults(Async)");
        }

        return predictionsGetTrainingResultsCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets training results.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PredictionTrainingResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the training results. </td><td>  -  </td></tr>
     </table>
     */
    public PredictionTrainingResults predictionsGetTrainingResults(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PredictionTrainingResults> localVarResp = predictionsGetTrainingResultsWithHttpInfo(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets training results.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PredictionTrainingResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the training results. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PredictionTrainingResults> predictionsGetTrainingResultsWithHttpInfo(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = predictionsGetTrainingResultsValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PredictionTrainingResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets training results.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the training results. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsGetTrainingResultsAsync(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, final ApiCallback<PredictionTrainingResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionsGetTrainingResultsValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PredictionTrainingResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictionsListByHub
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the predictions in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsListByHubCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionsListByHubValidateBeforeCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling predictionsListByHub(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling predictionsListByHub(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling predictionsListByHub(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling predictionsListByHub(Async)");
        }

        return predictionsListByHubCall(resourceGroupName, hubName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the predictions in the specified hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PredictionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the predictions in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public PredictionListResult predictionsListByHub(String resourceGroupName, String hubName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PredictionListResult> localVarResp = predictionsListByHubWithHttpInfo(resourceGroupName, hubName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the predictions in the specified hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PredictionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the predictions in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PredictionListResult> predictionsListByHubWithHttpInfo(String resourceGroupName, String hubName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = predictionsListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PredictionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the predictions in the specified hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the predictions in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsListByHubAsync(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback<PredictionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionsListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PredictionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for predictionsModelStatus
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/update prediction model status operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created or updated the prediction model status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsModelStatusCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, PredictionModelStatus parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/modelStatus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "predictionName" + "}", localVarApiClient.escapeString(predictionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call predictionsModelStatusValidateBeforeCall(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, PredictionModelStatus parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling predictionsModelStatus(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling predictionsModelStatus(Async)");
        }

        // verify the required parameter 'predictionName' is set
        if (predictionName == null) {
            throw new ApiException("Missing the required parameter 'predictionName' when calling predictionsModelStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling predictionsModelStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling predictionsModelStatus(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling predictionsModelStatus(Async)");
        }

        return predictionsModelStatusCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates the model status of prediction.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/update prediction model status operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created or updated the prediction model status. </td><td>  -  </td></tr>
     </table>
     */
    public void predictionsModelStatus(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, PredictionModelStatus parameters) throws ApiException {
        predictionsModelStatusWithHttpInfo(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, parameters);
    }

    /**
     * 
     * Creates or updates the model status of prediction.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/update prediction model status operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created or updated the prediction model status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> predictionsModelStatusWithHttpInfo(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, PredictionModelStatus parameters) throws ApiException {
        okhttp3.Call localVarCall = predictionsModelStatusValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates or updates the model status of prediction.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param predictionName The name of the Prediction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/update prediction model status operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created or updated the prediction model status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call predictionsModelStatusAsync(String resourceGroupName, String hubName, String predictionName, String apiVersion, String subscriptionId, PredictionModelStatus parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = predictionsModelStatusValidateBeforeCall(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
