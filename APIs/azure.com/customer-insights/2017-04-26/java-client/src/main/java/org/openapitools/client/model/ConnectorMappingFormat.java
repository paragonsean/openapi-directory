/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Connector mapping property format.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorMappingFormat {
  public static final String SERIALIZED_NAME_ACCEPT_LANGUAGE = "acceptLanguage";
  @SerializedName(SERIALIZED_NAME_ACCEPT_LANGUAGE)
  private String acceptLanguage;

  public static final String SERIALIZED_NAME_ARRAY_SEPARATOR = "arraySeparator";
  @SerializedName(SERIALIZED_NAME_ARRAY_SEPARATOR)
  private String arraySeparator;

  public static final String SERIALIZED_NAME_COLUMN_DELIMITER = "columnDelimiter";
  @SerializedName(SERIALIZED_NAME_COLUMN_DELIMITER)
  private String columnDelimiter;

  /**
   * The type mapping format.
   */
  @JsonAdapter(FormatTypeEnum.Adapter.class)
  public enum FormatTypeEnum {
    TEXT_FORMAT("TextFormat");

    private String value;

    FormatTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatTypeEnum fromValue(String value) {
      for (FormatTypeEnum b : FormatTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT_TYPE = "formatType";
  @SerializedName(SERIALIZED_NAME_FORMAT_TYPE)
  private FormatTypeEnum formatType;

  public static final String SERIALIZED_NAME_QUOTE_CHARACTER = "quoteCharacter";
  @SerializedName(SERIALIZED_NAME_QUOTE_CHARACTER)
  private String quoteCharacter;

  public static final String SERIALIZED_NAME_QUOTE_ESCAPE_CHARACTER = "quoteEscapeCharacter";
  @SerializedName(SERIALIZED_NAME_QUOTE_ESCAPE_CHARACTER)
  private String quoteEscapeCharacter;

  public ConnectorMappingFormat() {
  }

  public ConnectorMappingFormat acceptLanguage(String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
    return this;
  }

  /**
   * The oData language.
   * @return acceptLanguage
   */
  @javax.annotation.Nullable
  public String getAcceptLanguage() {
    return acceptLanguage;
  }

  public void setAcceptLanguage(String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
  }


  public ConnectorMappingFormat arraySeparator(String arraySeparator) {
    this.arraySeparator = arraySeparator;
    return this;
  }

  /**
   * Character separating array elements.
   * @return arraySeparator
   */
  @javax.annotation.Nullable
  public String getArraySeparator() {
    return arraySeparator;
  }

  public void setArraySeparator(String arraySeparator) {
    this.arraySeparator = arraySeparator;
  }


  public ConnectorMappingFormat columnDelimiter(String columnDelimiter) {
    this.columnDelimiter = columnDelimiter;
    return this;
  }

  /**
   * The character that signifies a break between columns.
   * @return columnDelimiter
   */
  @javax.annotation.Nullable
  public String getColumnDelimiter() {
    return columnDelimiter;
  }

  public void setColumnDelimiter(String columnDelimiter) {
    this.columnDelimiter = columnDelimiter;
  }


  public ConnectorMappingFormat formatType(FormatTypeEnum formatType) {
    this.formatType = formatType;
    return this;
  }

  /**
   * The type mapping format.
   * @return formatType
   */
  @javax.annotation.Nonnull
  public FormatTypeEnum getFormatType() {
    return formatType;
  }

  public void setFormatType(FormatTypeEnum formatType) {
    this.formatType = formatType;
  }


  public ConnectorMappingFormat quoteCharacter(String quoteCharacter) {
    this.quoteCharacter = quoteCharacter;
    return this;
  }

  /**
   * Quote character, used to indicate enquoted fields.
   * @return quoteCharacter
   */
  @javax.annotation.Nullable
  public String getQuoteCharacter() {
    return quoteCharacter;
  }

  public void setQuoteCharacter(String quoteCharacter) {
    this.quoteCharacter = quoteCharacter;
  }


  public ConnectorMappingFormat quoteEscapeCharacter(String quoteEscapeCharacter) {
    this.quoteEscapeCharacter = quoteEscapeCharacter;
    return this;
  }

  /**
   * Escape character for quotes, can be the same as the quoteCharacter.
   * @return quoteEscapeCharacter
   */
  @javax.annotation.Nullable
  public String getQuoteEscapeCharacter() {
    return quoteEscapeCharacter;
  }

  public void setQuoteEscapeCharacter(String quoteEscapeCharacter) {
    this.quoteEscapeCharacter = quoteEscapeCharacter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorMappingFormat connectorMappingFormat = (ConnectorMappingFormat) o;
    return Objects.equals(this.acceptLanguage, connectorMappingFormat.acceptLanguage) &&
        Objects.equals(this.arraySeparator, connectorMappingFormat.arraySeparator) &&
        Objects.equals(this.columnDelimiter, connectorMappingFormat.columnDelimiter) &&
        Objects.equals(this.formatType, connectorMappingFormat.formatType) &&
        Objects.equals(this.quoteCharacter, connectorMappingFormat.quoteCharacter) &&
        Objects.equals(this.quoteEscapeCharacter, connectorMappingFormat.quoteEscapeCharacter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptLanguage, arraySeparator, columnDelimiter, formatType, quoteCharacter, quoteEscapeCharacter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorMappingFormat {\n");
    sb.append("    acceptLanguage: ").append(toIndentedString(acceptLanguage)).append("\n");
    sb.append("    arraySeparator: ").append(toIndentedString(arraySeparator)).append("\n");
    sb.append("    columnDelimiter: ").append(toIndentedString(columnDelimiter)).append("\n");
    sb.append("    formatType: ").append(toIndentedString(formatType)).append("\n");
    sb.append("    quoteCharacter: ").append(toIndentedString(quoteCharacter)).append("\n");
    sb.append("    quoteEscapeCharacter: ").append(toIndentedString(quoteEscapeCharacter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptLanguage");
    openapiFields.add("arraySeparator");
    openapiFields.add("columnDelimiter");
    openapiFields.add("formatType");
    openapiFields.add("quoteCharacter");
    openapiFields.add("quoteEscapeCharacter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("formatType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorMappingFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorMappingFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorMappingFormat is not found in the empty JSON string", ConnectorMappingFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorMappingFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorMappingFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectorMappingFormat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acceptLanguage") != null && !jsonObj.get("acceptLanguage").isJsonNull()) && !jsonObj.get("acceptLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceptLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acceptLanguage").toString()));
      }
      if ((jsonObj.get("arraySeparator") != null && !jsonObj.get("arraySeparator").isJsonNull()) && !jsonObj.get("arraySeparator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arraySeparator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arraySeparator").toString()));
      }
      if ((jsonObj.get("columnDelimiter") != null && !jsonObj.get("columnDelimiter").isJsonNull()) && !jsonObj.get("columnDelimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnDelimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnDelimiter").toString()));
      }
      if (!jsonObj.get("formatType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatType").toString()));
      }
      // validate the required field `formatType`
      FormatTypeEnum.validateJsonElement(jsonObj.get("formatType"));
      if ((jsonObj.get("quoteCharacter") != null && !jsonObj.get("quoteCharacter").isJsonNull()) && !jsonObj.get("quoteCharacter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteCharacter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteCharacter").toString()));
      }
      if ((jsonObj.get("quoteEscapeCharacter") != null && !jsonObj.get("quoteEscapeCharacter").isJsonNull()) && !jsonObj.get("quoteEscapeCharacter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteEscapeCharacter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteEscapeCharacter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorMappingFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorMappingFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorMappingFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorMappingFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorMappingFormat>() {
           @Override
           public void write(JsonWriter out, ConnectorMappingFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorMappingFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorMappingFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorMappingFormat
   * @throws IOException if the JSON string is invalid with respect to ConnectorMappingFormat
   */
  public static ConnectorMappingFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorMappingFormat.class);
  }

  /**
   * Convert an instance of ConnectorMappingFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

