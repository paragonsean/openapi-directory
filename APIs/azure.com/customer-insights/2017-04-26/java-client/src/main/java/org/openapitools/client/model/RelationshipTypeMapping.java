/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RelationshipTypeFieldMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Maps fields in Profile to their corresponding StrongIds in Related Profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelationshipTypeMapping {
  public static final String SERIALIZED_NAME_FIELD_MAPPINGS = "fieldMappings";
  @SerializedName(SERIALIZED_NAME_FIELD_MAPPINGS)
  private List<RelationshipTypeFieldMapping> fieldMappings = new ArrayList<>();

  public RelationshipTypeMapping() {
  }

  public RelationshipTypeMapping fieldMappings(List<RelationshipTypeFieldMapping> fieldMappings) {
    this.fieldMappings = fieldMappings;
    return this;
  }

  public RelationshipTypeMapping addFieldMappingsItem(RelationshipTypeFieldMapping fieldMappingsItem) {
    if (this.fieldMappings == null) {
      this.fieldMappings = new ArrayList<>();
    }
    this.fieldMappings.add(fieldMappingsItem);
    return this;
  }

  /**
   * Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
   * @return fieldMappings
   */
  @javax.annotation.Nonnull
  public List<RelationshipTypeFieldMapping> getFieldMappings() {
    return fieldMappings;
  }

  public void setFieldMappings(List<RelationshipTypeFieldMapping> fieldMappings) {
    this.fieldMappings = fieldMappings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationshipTypeMapping relationshipTypeMapping = (RelationshipTypeMapping) o;
    return Objects.equals(this.fieldMappings, relationshipTypeMapping.fieldMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldMappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationshipTypeMapping {\n");
    sb.append("    fieldMappings: ").append(toIndentedString(fieldMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldMappings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldMappings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelationshipTypeMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelationshipTypeMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelationshipTypeMapping is not found in the empty JSON string", RelationshipTypeMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelationshipTypeMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelationshipTypeMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RelationshipTypeMapping.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("fieldMappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldMappings` to be an array in the JSON string but got `%s`", jsonObj.get("fieldMappings").toString()));
      }

      JsonArray jsonArrayfieldMappings = jsonObj.getAsJsonArray("fieldMappings");
      // validate the required field `fieldMappings` (array)
      for (int i = 0; i < jsonArrayfieldMappings.size(); i++) {
        RelationshipTypeFieldMapping.validateJsonElement(jsonArrayfieldMappings.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelationshipTypeMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelationshipTypeMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelationshipTypeMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelationshipTypeMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<RelationshipTypeMapping>() {
           @Override
           public void write(JsonWriter out, RelationshipTypeMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelationshipTypeMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelationshipTypeMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelationshipTypeMapping
   * @throws IOException if the JSON string is invalid with respect to RelationshipTypeMapping
   */
  public static RelationshipTypeMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelationshipTypeMapping.class);
  }

  /**
   * Convert an instance of RelationshipTypeMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

