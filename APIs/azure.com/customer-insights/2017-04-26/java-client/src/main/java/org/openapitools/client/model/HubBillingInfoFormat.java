/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hub billing info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HubBillingInfoFormat {
  public static final String SERIALIZED_NAME_MAX_UNITS = "maxUnits";
  @SerializedName(SERIALIZED_NAME_MAX_UNITS)
  private Integer maxUnits;

  public static final String SERIALIZED_NAME_MIN_UNITS = "minUnits";
  @SerializedName(SERIALIZED_NAME_MIN_UNITS)
  private Integer minUnits;

  public static final String SERIALIZED_NAME_SKU_NAME = "skuName";
  @SerializedName(SERIALIZED_NAME_SKU_NAME)
  private String skuName;

  public HubBillingInfoFormat() {
  }

  public HubBillingInfoFormat maxUnits(Integer maxUnits) {
    this.maxUnits = maxUnits;
    return this;
  }

  /**
   * The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions.
   * minimum: 1
   * maximum: 10
   * @return maxUnits
   */
  @javax.annotation.Nullable
  public Integer getMaxUnits() {
    return maxUnits;
  }

  public void setMaxUnits(Integer maxUnits) {
    this.maxUnits = maxUnits;
  }


  public HubBillingInfoFormat minUnits(Integer minUnits) {
    this.minUnits = minUnits;
    return this;
  }

  /**
   * The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions.
   * minimum: 1
   * maximum: 10
   * @return minUnits
   */
  @javax.annotation.Nullable
  public Integer getMinUnits() {
    return minUnits;
  }

  public void setMinUnits(Integer minUnits) {
    this.minUnits = minUnits;
  }


  public HubBillingInfoFormat skuName(String skuName) {
    this.skuName = skuName;
    return this;
  }

  /**
   * The sku name.
   * @return skuName
   */
  @javax.annotation.Nullable
  public String getSkuName() {
    return skuName;
  }

  public void setSkuName(String skuName) {
    this.skuName = skuName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HubBillingInfoFormat hubBillingInfoFormat = (HubBillingInfoFormat) o;
    return Objects.equals(this.maxUnits, hubBillingInfoFormat.maxUnits) &&
        Objects.equals(this.minUnits, hubBillingInfoFormat.minUnits) &&
        Objects.equals(this.skuName, hubBillingInfoFormat.skuName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxUnits, minUnits, skuName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HubBillingInfoFormat {\n");
    sb.append("    maxUnits: ").append(toIndentedString(maxUnits)).append("\n");
    sb.append("    minUnits: ").append(toIndentedString(minUnits)).append("\n");
    sb.append("    skuName: ").append(toIndentedString(skuName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxUnits");
    openapiFields.add("minUnits");
    openapiFields.add("skuName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HubBillingInfoFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HubBillingInfoFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HubBillingInfoFormat is not found in the empty JSON string", HubBillingInfoFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HubBillingInfoFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HubBillingInfoFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("skuName") != null && !jsonObj.get("skuName").isJsonNull()) && !jsonObj.get("skuName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HubBillingInfoFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HubBillingInfoFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HubBillingInfoFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HubBillingInfoFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<HubBillingInfoFormat>() {
           @Override
           public void write(JsonWriter out, HubBillingInfoFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HubBillingInfoFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HubBillingInfoFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HubBillingInfoFormat
   * @throws IOException if the JSON string is invalid with respect to HubBillingInfoFormat
   */
  public static HubBillingInfoFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HubBillingInfoFormat.class);
  }

  /**
   * Convert an instance of HubBillingInfoFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

