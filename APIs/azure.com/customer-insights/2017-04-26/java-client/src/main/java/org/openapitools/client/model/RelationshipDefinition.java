/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.PropertyDefinition;
import org.openapitools.client.model.ProvisioningState;
import org.openapitools.client.model.RelationshipTypeMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of Relationship.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelationshipDefinition {
  /**
   * The Relationship Cardinality.
   */
  @JsonAdapter(CardinalityEnum.Adapter.class)
  public enum CardinalityEnum {
    ONE_TO_ONE("OneToOne"),
    
    ONE_TO_MANY("OneToMany"),
    
    MANY_TO_MANY("ManyToMany");

    private String value;

    CardinalityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardinalityEnum fromValue(String value) {
      for (CardinalityEnum b : CardinalityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CardinalityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardinalityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardinalityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CardinalityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CardinalityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CARDINALITY = "cardinality";
  @SerializedName(SERIALIZED_NAME_CARDINALITY)
  private CardinalityEnum cardinality;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Map<String, String> description = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private Map<String, String> displayName = new HashMap<>();

  public static final String SERIALIZED_NAME_EXPIRY_DATE_TIME_UTC = "expiryDateTimeUtc";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE_TIME_UTC)
  private OffsetDateTime expiryDateTimeUtc;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<PropertyDefinition> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOOKUP_MAPPINGS = "lookupMappings";
  @SerializedName(SERIALIZED_NAME_LOOKUP_MAPPINGS)
  private List<RelationshipTypeMapping> lookupMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILE_TYPE = "profileType";
  @SerializedName(SERIALIZED_NAME_PROFILE_TYPE)
  private String profileType;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_RELATED_PROFILE_TYPE = "relatedProfileType";
  @SerializedName(SERIALIZED_NAME_RELATED_PROFILE_TYPE)
  private String relatedProfileType;

  public static final String SERIALIZED_NAME_RELATIONSHIP_GUID_ID = "relationshipGuidId";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_GUID_ID)
  private String relationshipGuidId;

  public static final String SERIALIZED_NAME_RELATIONSHIP_NAME = "relationshipName";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_NAME)
  private String relationshipName;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public RelationshipDefinition() {
  }

  public RelationshipDefinition(
     String relationshipGuidId, 
     String relationshipName, 
     String tenantId
  ) {
    this();
    this.relationshipGuidId = relationshipGuidId;
    this.relationshipName = relationshipName;
    this.tenantId = tenantId;
  }

  public RelationshipDefinition cardinality(CardinalityEnum cardinality) {
    this.cardinality = cardinality;
    return this;
  }

  /**
   * The Relationship Cardinality.
   * @return cardinality
   */
  @javax.annotation.Nullable
  public CardinalityEnum getCardinality() {
    return cardinality;
  }

  public void setCardinality(CardinalityEnum cardinality) {
    this.cardinality = cardinality;
  }


  public RelationshipDefinition description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public RelationshipDefinition putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

  /**
   * Localized descriptions for the Relationship.
   * @return description
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }


  public RelationshipDefinition displayName(Map<String, String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public RelationshipDefinition putDisplayNameItem(String key, String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new HashMap<>();
    }
    this.displayName.put(key, displayNameItem);
    return this;
  }

  /**
   * Localized display name for the Relationship.
   * @return displayName
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(Map<String, String> displayName) {
    this.displayName = displayName;
  }


  public RelationshipDefinition expiryDateTimeUtc(OffsetDateTime expiryDateTimeUtc) {
    this.expiryDateTimeUtc = expiryDateTimeUtc;
    return this;
  }

  /**
   * The expiry date time in UTC.
   * @return expiryDateTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiryDateTimeUtc() {
    return expiryDateTimeUtc;
  }

  public void setExpiryDateTimeUtc(OffsetDateTime expiryDateTimeUtc) {
    this.expiryDateTimeUtc = expiryDateTimeUtc;
  }


  public RelationshipDefinition fields(List<PropertyDefinition> fields) {
    this.fields = fields;
    return this;
  }

  public RelationshipDefinition addFieldsItem(PropertyDefinition fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * The properties of the Relationship.
   * @return fields
   */
  @javax.annotation.Nullable
  public List<PropertyDefinition> getFields() {
    return fields;
  }

  public void setFields(List<PropertyDefinition> fields) {
    this.fields = fields;
  }


  public RelationshipDefinition lookupMappings(List<RelationshipTypeMapping> lookupMappings) {
    this.lookupMappings = lookupMappings;
    return this;
  }

  public RelationshipDefinition addLookupMappingsItem(RelationshipTypeMapping lookupMappingsItem) {
    if (this.lookupMappings == null) {
      this.lookupMappings = new ArrayList<>();
    }
    this.lookupMappings.add(lookupMappingsItem);
    return this;
  }

  /**
   * Optional property to be used to map fields in profile to their strong ids in related profile.
   * @return lookupMappings
   */
  @javax.annotation.Nullable
  public List<RelationshipTypeMapping> getLookupMappings() {
    return lookupMappings;
  }

  public void setLookupMappings(List<RelationshipTypeMapping> lookupMappings) {
    this.lookupMappings = lookupMappings;
  }


  public RelationshipDefinition profileType(String profileType) {
    this.profileType = profileType;
    return this;
  }

  /**
   * Profile type.
   * @return profileType
   */
  @javax.annotation.Nonnull
  public String getProfileType() {
    return profileType;
  }

  public void setProfileType(String profileType) {
    this.profileType = profileType;
  }


  public RelationshipDefinition provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public RelationshipDefinition relatedProfileType(String relatedProfileType) {
    this.relatedProfileType = relatedProfileType;
    return this;
  }

  /**
   * Related profile being referenced.
   * @return relatedProfileType
   */
  @javax.annotation.Nonnull
  public String getRelatedProfileType() {
    return relatedProfileType;
  }

  public void setRelatedProfileType(String relatedProfileType) {
    this.relatedProfileType = relatedProfileType;
  }


  /**
   * The relationship guid id.
   * @return relationshipGuidId
   */
  @javax.annotation.Nullable
  public String getRelationshipGuidId() {
    return relationshipGuidId;
  }



  /**
   * The Relationship name.
   * @return relationshipName
   */
  @javax.annotation.Nullable
  public String getRelationshipName() {
    return relationshipName;
  }



  /**
   * The hub name.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationshipDefinition relationshipDefinition = (RelationshipDefinition) o;
    return Objects.equals(this.cardinality, relationshipDefinition.cardinality) &&
        Objects.equals(this.description, relationshipDefinition.description) &&
        Objects.equals(this.displayName, relationshipDefinition.displayName) &&
        Objects.equals(this.expiryDateTimeUtc, relationshipDefinition.expiryDateTimeUtc) &&
        Objects.equals(this.fields, relationshipDefinition.fields) &&
        Objects.equals(this.lookupMappings, relationshipDefinition.lookupMappings) &&
        Objects.equals(this.profileType, relationshipDefinition.profileType) &&
        Objects.equals(this.provisioningState, relationshipDefinition.provisioningState) &&
        Objects.equals(this.relatedProfileType, relationshipDefinition.relatedProfileType) &&
        Objects.equals(this.relationshipGuidId, relationshipDefinition.relationshipGuidId) &&
        Objects.equals(this.relationshipName, relationshipDefinition.relationshipName) &&
        Objects.equals(this.tenantId, relationshipDefinition.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardinality, description, displayName, expiryDateTimeUtc, fields, lookupMappings, profileType, provisioningState, relatedProfileType, relationshipGuidId, relationshipName, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationshipDefinition {\n");
    sb.append("    cardinality: ").append(toIndentedString(cardinality)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    expiryDateTimeUtc: ").append(toIndentedString(expiryDateTimeUtc)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    lookupMappings: ").append(toIndentedString(lookupMappings)).append("\n");
    sb.append("    profileType: ").append(toIndentedString(profileType)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    relatedProfileType: ").append(toIndentedString(relatedProfileType)).append("\n");
    sb.append("    relationshipGuidId: ").append(toIndentedString(relationshipGuidId)).append("\n");
    sb.append("    relationshipName: ").append(toIndentedString(relationshipName)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardinality");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("expiryDateTimeUtc");
    openapiFields.add("fields");
    openapiFields.add("lookupMappings");
    openapiFields.add("profileType");
    openapiFields.add("provisioningState");
    openapiFields.add("relatedProfileType");
    openapiFields.add("relationshipGuidId");
    openapiFields.add("relationshipName");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("profileType");
    openapiRequiredFields.add("relatedProfileType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelationshipDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelationshipDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelationshipDefinition is not found in the empty JSON string", RelationshipDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelationshipDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelationshipDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RelationshipDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cardinality") != null && !jsonObj.get("cardinality").isJsonNull()) && !jsonObj.get("cardinality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardinality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardinality").toString()));
      }
      // validate the optional field `cardinality`
      if (jsonObj.get("cardinality") != null && !jsonObj.get("cardinality").isJsonNull()) {
        CardinalityEnum.validateJsonElement(jsonObj.get("cardinality"));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            PropertyDefinition.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if (jsonObj.get("lookupMappings") != null && !jsonObj.get("lookupMappings").isJsonNull()) {
        JsonArray jsonArraylookupMappings = jsonObj.getAsJsonArray("lookupMappings");
        if (jsonArraylookupMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lookupMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lookupMappings` to be an array in the JSON string but got `%s`", jsonObj.get("lookupMappings").toString()));
          }

          // validate the optional field `lookupMappings` (array)
          for (int i = 0; i < jsonArraylookupMappings.size(); i++) {
            RelationshipTypeMapping.validateJsonElement(jsonArraylookupMappings.get(i));
          };
        }
      }
      if (!jsonObj.get("profileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileType").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if (!jsonObj.get("relatedProfileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedProfileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relatedProfileType").toString()));
      }
      if ((jsonObj.get("relationshipGuidId") != null && !jsonObj.get("relationshipGuidId").isJsonNull()) && !jsonObj.get("relationshipGuidId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationshipGuidId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationshipGuidId").toString()));
      }
      if ((jsonObj.get("relationshipName") != null && !jsonObj.get("relationshipName").isJsonNull()) && !jsonObj.get("relationshipName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationshipName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationshipName").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelationshipDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelationshipDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelationshipDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelationshipDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<RelationshipDefinition>() {
           @Override
           public void write(JsonWriter out, RelationshipDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelationshipDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelationshipDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelationshipDefinition
   * @throws IOException if the JSON string is invalid with respect to RelationshipDefinition
   */
  public static RelationshipDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelationshipDefinition.class);
  }

  /**
   * Convert an instance of RelationshipDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

