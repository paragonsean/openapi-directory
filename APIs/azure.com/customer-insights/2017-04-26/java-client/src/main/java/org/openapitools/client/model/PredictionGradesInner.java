/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of a prediction grade.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:52.400724-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictionGradesInner {
  public static final String SERIALIZED_NAME_GRADE_NAME = "gradeName";
  @SerializedName(SERIALIZED_NAME_GRADE_NAME)
  private String gradeName;

  public static final String SERIALIZED_NAME_MAX_SCORE_THRESHOLD = "maxScoreThreshold";
  @SerializedName(SERIALIZED_NAME_MAX_SCORE_THRESHOLD)
  private Integer maxScoreThreshold;

  public static final String SERIALIZED_NAME_MIN_SCORE_THRESHOLD = "minScoreThreshold";
  @SerializedName(SERIALIZED_NAME_MIN_SCORE_THRESHOLD)
  private Integer minScoreThreshold;

  public PredictionGradesInner() {
  }

  public PredictionGradesInner gradeName(String gradeName) {
    this.gradeName = gradeName;
    return this;
  }

  /**
   * Name of the grade.
   * @return gradeName
   */
  @javax.annotation.Nullable
  public String getGradeName() {
    return gradeName;
  }

  public void setGradeName(String gradeName) {
    this.gradeName = gradeName;
  }


  public PredictionGradesInner maxScoreThreshold(Integer maxScoreThreshold) {
    this.maxScoreThreshold = maxScoreThreshold;
    return this;
  }

  /**
   * Maximum score threshold.
   * @return maxScoreThreshold
   */
  @javax.annotation.Nullable
  public Integer getMaxScoreThreshold() {
    return maxScoreThreshold;
  }

  public void setMaxScoreThreshold(Integer maxScoreThreshold) {
    this.maxScoreThreshold = maxScoreThreshold;
  }


  public PredictionGradesInner minScoreThreshold(Integer minScoreThreshold) {
    this.minScoreThreshold = minScoreThreshold;
    return this;
  }

  /**
   * Minimum score threshold.
   * @return minScoreThreshold
   */
  @javax.annotation.Nullable
  public Integer getMinScoreThreshold() {
    return minScoreThreshold;
  }

  public void setMinScoreThreshold(Integer minScoreThreshold) {
    this.minScoreThreshold = minScoreThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictionGradesInner predictionGradesInner = (PredictionGradesInner) o;
    return Objects.equals(this.gradeName, predictionGradesInner.gradeName) &&
        Objects.equals(this.maxScoreThreshold, predictionGradesInner.maxScoreThreshold) &&
        Objects.equals(this.minScoreThreshold, predictionGradesInner.minScoreThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gradeName, maxScoreThreshold, minScoreThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictionGradesInner {\n");
    sb.append("    gradeName: ").append(toIndentedString(gradeName)).append("\n");
    sb.append("    maxScoreThreshold: ").append(toIndentedString(maxScoreThreshold)).append("\n");
    sb.append("    minScoreThreshold: ").append(toIndentedString(minScoreThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gradeName");
    openapiFields.add("maxScoreThreshold");
    openapiFields.add("minScoreThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictionGradesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictionGradesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictionGradesInner is not found in the empty JSON string", PredictionGradesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictionGradesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictionGradesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gradeName") != null && !jsonObj.get("gradeName").isJsonNull()) && !jsonObj.get("gradeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictionGradesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictionGradesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictionGradesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictionGradesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictionGradesInner>() {
           @Override
           public void write(JsonWriter out, PredictionGradesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictionGradesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictionGradesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictionGradesInner
   * @throws IOException if the JSON string is invalid with respect to PredictionGradesInner
   */
  public static PredictionGradesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictionGradesInner.class);
  }

  /**
   * Convert an instance of PredictionGradesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

