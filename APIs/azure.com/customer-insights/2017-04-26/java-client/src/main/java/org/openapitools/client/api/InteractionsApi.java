/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InteractionListResult;
import org.openapitools.client.model.InteractionResourceFormat;
import org.openapitools.client.model.SuggestRelationshipLinksResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InteractionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InteractionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InteractionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for interactionsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Interaction operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the interaction. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create interaction operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionsCreateOrUpdateCall(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, InteractionResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "interactionName" + "}", localVarApiClient.escapeString(interactionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interactionsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, InteractionResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling interactionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling interactionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'interactionName' is set
        if (interactionName == null) {
            throw new ApiException("Missing the required parameter 'interactionName' when calling interactionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling interactionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling interactionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling interactionsCreateOrUpdate(Async)");
        }

        return interactionsCreateOrUpdateCall(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates an interaction or updates an existing interaction within a hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Interaction operation. (required)
     * @return InteractionResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the interaction. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create interaction operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public InteractionResourceFormat interactionsCreateOrUpdate(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, InteractionResourceFormat parameters) throws ApiException {
        ApiResponse<InteractionResourceFormat> localVarResp = interactionsCreateOrUpdateWithHttpInfo(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an interaction or updates an existing interaction within a hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Interaction operation. (required)
     * @return ApiResponse&lt;InteractionResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the interaction. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create interaction operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InteractionResourceFormat> interactionsCreateOrUpdateWithHttpInfo(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, InteractionResourceFormat parameters) throws ApiException {
        okhttp3.Call localVarCall = interactionsCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<InteractionResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an interaction or updates an existing interaction within a hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Interaction operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the interaction. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create interaction operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionsCreateOrUpdateAsync(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, InteractionResourceFormat parameters, final ApiCallback<InteractionResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = interactionsCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<InteractionResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interactionsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of interaction to retrieve, default is en-us. (optional, default to en-us)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the interaction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionsGetCall(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "interactionName" + "}", localVarApiClient.escapeString(interactionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (localeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale-code", localeCode));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interactionsGetValidateBeforeCall(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling interactionsGet(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling interactionsGet(Async)");
        }

        // verify the required parameter 'interactionName' is set
        if (interactionName == null) {
            throw new ApiException("Missing the required parameter 'interactionName' when calling interactionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling interactionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling interactionsGet(Async)");
        }

        return interactionsGetCall(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, localeCode, _callback);

    }

    /**
     * 
     * Gets information about the specified interaction.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of interaction to retrieve, default is en-us. (optional, default to en-us)
     * @return InteractionResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the interaction. </td><td>  -  </td></tr>
     </table>
     */
    public InteractionResourceFormat interactionsGet(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, String localeCode) throws ApiException {
        ApiResponse<InteractionResourceFormat> localVarResp = interactionsGetWithHttpInfo(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, localeCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the specified interaction.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of interaction to retrieve, default is en-us. (optional, default to en-us)
     * @return ApiResponse&lt;InteractionResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the interaction. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InteractionResourceFormat> interactionsGetWithHttpInfo(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, String localeCode) throws ApiException {
        okhttp3.Call localVarCall = interactionsGetValidateBeforeCall(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, localeCode, null);
        Type localVarReturnType = new TypeToken<InteractionResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the specified interaction.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of interaction to retrieve, default is en-us. (optional, default to en-us)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the interaction. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionsGetAsync(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback<InteractionResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = interactionsGetValidateBeforeCall(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, localeCode, _callback);
        Type localVarReturnType = new TypeToken<InteractionResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interactionsListByHub
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of interaction to retrieve, default is en-us. (optional, default to en-us)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the interactions in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionsListByHubCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (localeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale-code", localeCode));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interactionsListByHubValidateBeforeCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling interactionsListByHub(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling interactionsListByHub(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling interactionsListByHub(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling interactionsListByHub(Async)");
        }

        return interactionsListByHubCall(resourceGroupName, hubName, apiVersion, subscriptionId, localeCode, _callback);

    }

    /**
     * 
     * Gets all interactions in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of interaction to retrieve, default is en-us. (optional, default to en-us)
     * @return InteractionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the interactions in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public InteractionListResult interactionsListByHub(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, String localeCode) throws ApiException {
        ApiResponse<InteractionListResult> localVarResp = interactionsListByHubWithHttpInfo(resourceGroupName, hubName, apiVersion, subscriptionId, localeCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all interactions in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of interaction to retrieve, default is en-us. (optional, default to en-us)
     * @return ApiResponse&lt;InteractionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the interactions in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InteractionListResult> interactionsListByHubWithHttpInfo(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, String localeCode) throws ApiException {
        okhttp3.Call localVarCall = interactionsListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, localeCode, null);
        Type localVarReturnType = new TypeToken<InteractionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all interactions in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of interaction to retrieve, default is en-us. (optional, default to en-us)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the interactions in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionsListByHubAsync(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback<InteractionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = interactionsListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, localeCode, _callback);
        Type localVarReturnType = new TypeToken<InteractionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for interactionsSuggestRelationshipLinks
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get suggested Relationship Links. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionsSuggestRelationshipLinksCall(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/interactions/{interactionName}/suggestRelationshipLinks"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "interactionName" + "}", localVarApiClient.escapeString(interactionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call interactionsSuggestRelationshipLinksValidateBeforeCall(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling interactionsSuggestRelationshipLinks(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling interactionsSuggestRelationshipLinks(Async)");
        }

        // verify the required parameter 'interactionName' is set
        if (interactionName == null) {
            throw new ApiException("Missing the required parameter 'interactionName' when calling interactionsSuggestRelationshipLinks(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling interactionsSuggestRelationshipLinks(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling interactionsSuggestRelationshipLinks(Async)");
        }

        return interactionsSuggestRelationshipLinksCall(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Suggests relationships to create relationship links.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SuggestRelationshipLinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get suggested Relationship Links. </td><td>  -  </td></tr>
     </table>
     */
    public SuggestRelationshipLinksResponse interactionsSuggestRelationshipLinks(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SuggestRelationshipLinksResponse> localVarResp = interactionsSuggestRelationshipLinksWithHttpInfo(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Suggests relationships to create relationship links.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SuggestRelationshipLinksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get suggested Relationship Links. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuggestRelationshipLinksResponse> interactionsSuggestRelationshipLinksWithHttpInfo(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = interactionsSuggestRelationshipLinksValidateBeforeCall(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SuggestRelationshipLinksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Suggests relationships to create relationship links.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param interactionName The name of the interaction. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get suggested Relationship Links. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call interactionsSuggestRelationshipLinksAsync(String resourceGroupName, String hubName, String interactionName, String apiVersion, String subscriptionId, final ApiCallback<SuggestRelationshipLinksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = interactionsSuggestRelationshipLinksValidateBeforeCall(resourceGroupName, hubName, interactionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SuggestRelationshipLinksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
