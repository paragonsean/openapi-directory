/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PredictionListResult from '../model/PredictionListResult';
import PredictionModelStatus from '../model/PredictionModelStatus';
import PredictionResourceFormat from '../model/PredictionResourceFormat';
import PredictionTrainingResults from '../model/PredictionTrainingResults';

/**
* Predictions service.
* @module api/PredictionsApi
* @version 2017-04-26
*/
export default class PredictionsApi {

    /**
    * Constructs a new PredictionsApi. 
    * @alias module:api/PredictionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the predictionsCreateOrUpdate operation.
     * @callback module:api/PredictionsApi~predictionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictionResourceFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Prediction or updates an existing Prediction in the hub.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} predictionName The name of the Prediction.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/PredictionResourceFormat} parameters Parameters supplied to the create/update Prediction operation.
     * @param {module:api/PredictionsApi~predictionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictionResourceFormat}
     */
    predictionsCreateOrUpdate(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling predictionsCreateOrUpdate");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling predictionsCreateOrUpdate");
      }
      // verify the required parameter 'predictionName' is set
      if (predictionName === undefined || predictionName === null) {
        throw new Error("Missing the required parameter 'predictionName' when calling predictionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling predictionsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling predictionsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling predictionsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'predictionName': predictionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PredictionResourceFormat;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictionsDelete operation.
     * @callback module:api/PredictionsApi~predictionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Prediction in the hub.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} predictionName The name of the Prediction.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/PredictionsApi~predictionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    predictionsDelete(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling predictionsDelete");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling predictionsDelete");
      }
      // verify the required parameter 'predictionName' is set
      if (predictionName === undefined || predictionName === null) {
        throw new Error("Missing the required parameter 'predictionName' when calling predictionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling predictionsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling predictionsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'predictionName': predictionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictionsGet operation.
     * @callback module:api/PredictionsApi~predictionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictionResourceFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Prediction in the hub.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} predictionName The name of the Prediction.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/PredictionsApi~predictionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictionResourceFormat}
     */
    predictionsGet(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling predictionsGet");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling predictionsGet");
      }
      // verify the required parameter 'predictionName' is set
      if (predictionName === undefined || predictionName === null) {
        throw new Error("Missing the required parameter 'predictionName' when calling predictionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling predictionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling predictionsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'predictionName': predictionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PredictionResourceFormat;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictionsGetModelStatus operation.
     * @callback module:api/PredictionsApi~predictionsGetModelStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictionModelStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets model status of the prediction.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} predictionName The name of the Prediction.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/PredictionsApi~predictionsGetModelStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictionModelStatus}
     */
    predictionsGetModelStatus(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling predictionsGetModelStatus");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling predictionsGetModelStatus");
      }
      // verify the required parameter 'predictionName' is set
      if (predictionName === undefined || predictionName === null) {
        throw new Error("Missing the required parameter 'predictionName' when calling predictionsGetModelStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling predictionsGetModelStatus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling predictionsGetModelStatus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'predictionName': predictionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PredictionModelStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/getModelStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictionsGetTrainingResults operation.
     * @callback module:api/PredictionsApi~predictionsGetTrainingResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictionTrainingResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets training results.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} predictionName The name of the Prediction.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/PredictionsApi~predictionsGetTrainingResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictionTrainingResults}
     */
    predictionsGetTrainingResults(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling predictionsGetTrainingResults");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling predictionsGetTrainingResults");
      }
      // verify the required parameter 'predictionName' is set
      if (predictionName === undefined || predictionName === null) {
        throw new Error("Missing the required parameter 'predictionName' when calling predictionsGetTrainingResults");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling predictionsGetTrainingResults");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling predictionsGetTrainingResults");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'predictionName': predictionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PredictionTrainingResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/getTrainingResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictionsListByHub operation.
     * @callback module:api/PredictionsApi~predictionsListByHubCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the predictions in the specified hub.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/PredictionsApi~predictionsListByHubCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictionListResult}
     */
    predictionsListByHub(resourceGroupName, hubName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling predictionsListByHub");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling predictionsListByHub");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling predictionsListByHub");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling predictionsListByHub");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PredictionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the predictionsModelStatus operation.
     * @callback module:api/PredictionsApi~predictionsModelStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the model status of prediction.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} predictionName The name of the Prediction.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/PredictionModelStatus} parameters Parameters supplied to the create/update prediction model status operation.
     * @param {module:api/PredictionsApi~predictionsModelStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    predictionsModelStatus(resourceGroupName, hubName, predictionName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling predictionsModelStatus");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling predictionsModelStatus");
      }
      // verify the required parameter 'predictionName' is set
      if (predictionName === undefined || predictionName === null) {
        throw new Error("Missing the required parameter 'predictionName' when calling predictionsModelStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling predictionsModelStatus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling predictionsModelStatus");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling predictionsModelStatus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'predictionName': predictionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/predictions/{predictionName}/modelStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
