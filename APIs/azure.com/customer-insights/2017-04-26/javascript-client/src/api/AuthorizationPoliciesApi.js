/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthorizationPolicy from '../model/AuthorizationPolicy';
import AuthorizationPolicyListResult from '../model/AuthorizationPolicyListResult';
import AuthorizationPolicyResourceFormat from '../model/AuthorizationPolicyResourceFormat';

/**
* AuthorizationPolicies service.
* @module api/AuthorizationPoliciesApi
* @version 2017-04-26
*/
export default class AuthorizationPoliciesApi {

    /**
    * Constructs a new AuthorizationPoliciesApi. 
    * @alias module:api/AuthorizationPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authorizationPoliciesCreateOrUpdate operation.
     * @callback module:api/AuthorizationPoliciesApi~authorizationPoliciesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationPolicyResourceFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an authorization policy or updates an existing authorization policy.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} authorizationPolicyName The name of the policy.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/AuthorizationPolicyResourceFormat} parameters Parameters supplied to the CreateOrUpdate authorization policy operation.
     * @param {module:api/AuthorizationPoliciesApi~authorizationPoliciesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizationPolicyResourceFormat}
     */
    authorizationPoliciesCreateOrUpdate(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling authorizationPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling authorizationPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'authorizationPolicyName' is set
      if (authorizationPolicyName === undefined || authorizationPolicyName === null) {
        throw new Error("Missing the required parameter 'authorizationPolicyName' when calling authorizationPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling authorizationPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling authorizationPoliciesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling authorizationPoliciesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'authorizationPolicyName': authorizationPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthorizationPolicyResourceFormat;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationPoliciesGet operation.
     * @callback module:api/AuthorizationPoliciesApi~authorizationPoliciesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationPolicyResourceFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an authorization policy in the hub.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} authorizationPolicyName The name of the policy.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/AuthorizationPoliciesApi~authorizationPoliciesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizationPolicyResourceFormat}
     */
    authorizationPoliciesGet(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling authorizationPoliciesGet");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling authorizationPoliciesGet");
      }
      // verify the required parameter 'authorizationPolicyName' is set
      if (authorizationPolicyName === undefined || authorizationPolicyName === null) {
        throw new Error("Missing the required parameter 'authorizationPolicyName' when calling authorizationPoliciesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling authorizationPoliciesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling authorizationPoliciesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'authorizationPolicyName': authorizationPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthorizationPolicyResourceFormat;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationPoliciesListByHub operation.
     * @callback module:api/AuthorizationPoliciesApi~authorizationPoliciesListByHubCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationPolicyListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the authorization policies in a specified hub.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/AuthorizationPoliciesApi~authorizationPoliciesListByHubCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizationPolicyListResult}
     */
    authorizationPoliciesListByHub(resourceGroupName, hubName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling authorizationPoliciesListByHub");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling authorizationPoliciesListByHub");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling authorizationPoliciesListByHub");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling authorizationPoliciesListByHub");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthorizationPolicyListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationPoliciesRegeneratePrimaryKey operation.
     * @callback module:api/AuthorizationPoliciesApi~authorizationPoliciesRegeneratePrimaryKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates the primary policy key of the specified authorization policy.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} authorizationPolicyName The name of the policy.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/AuthorizationPoliciesApi~authorizationPoliciesRegeneratePrimaryKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizationPolicy}
     */
    authorizationPoliciesRegeneratePrimaryKey(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling authorizationPoliciesRegeneratePrimaryKey");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling authorizationPoliciesRegeneratePrimaryKey");
      }
      // verify the required parameter 'authorizationPolicyName' is set
      if (authorizationPolicyName === undefined || authorizationPolicyName === null) {
        throw new Error("Missing the required parameter 'authorizationPolicyName' when calling authorizationPoliciesRegeneratePrimaryKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling authorizationPoliciesRegeneratePrimaryKey");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling authorizationPoliciesRegeneratePrimaryKey");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'authorizationPolicyName': authorizationPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthorizationPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}/regeneratePrimaryKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizationPoliciesRegenerateSecondaryKey operation.
     * @callback module:api/AuthorizationPoliciesApi~authorizationPoliciesRegenerateSecondaryKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizationPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates the secondary policy key of the specified authorization policy.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} authorizationPolicyName The name of the policy.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/AuthorizationPoliciesApi~authorizationPoliciesRegenerateSecondaryKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizationPolicy}
     */
    authorizationPoliciesRegenerateSecondaryKey(resourceGroupName, hubName, authorizationPolicyName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling authorizationPoliciesRegenerateSecondaryKey");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling authorizationPoliciesRegenerateSecondaryKey");
      }
      // verify the required parameter 'authorizationPolicyName' is set
      if (authorizationPolicyName === undefined || authorizationPolicyName === null) {
        throw new Error("Missing the required parameter 'authorizationPolicyName' when calling authorizationPoliciesRegenerateSecondaryKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling authorizationPoliciesRegenerateSecondaryKey");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling authorizationPoliciesRegenerateSecondaryKey");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'authorizationPolicyName': authorizationPolicyName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthorizationPolicy;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/authorizationPolicies/{authorizationPolicyName}/regenerateSecondaryKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
