/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParticipantPropertyReference from './ParticipantPropertyReference';
import ProvisioningState from './ProvisioningState';
import TypePropertiesMapping from './TypePropertiesMapping';

/**
 * The LinkDefinition model module.
 * @module model/LinkDefinition
 * @version 2017-04-26
 */
class LinkDefinition {
    /**
     * Constructs a new <code>LinkDefinition</code>.
     * The definition of Link.
     * @alias module:model/LinkDefinition
     * @param participantPropertyReferences {Array.<module:model/ParticipantPropertyReference>} The properties that represent the participating profile.
     * @param sourceEntityType {module:model/LinkDefinition.SourceEntityTypeEnum} Type of source entity.
     * @param sourceEntityTypeName {String} Name of the source Entity Type.
     * @param targetEntityType {module:model/LinkDefinition.TargetEntityTypeEnum} Type of target entity.
     * @param targetEntityTypeName {String} Name of the target Entity Type.
     */
    constructor(participantPropertyReferences, sourceEntityType, sourceEntityTypeName, targetEntityType, targetEntityTypeName) { 
        
        LinkDefinition.initialize(this, participantPropertyReferences, sourceEntityType, sourceEntityTypeName, targetEntityType, targetEntityTypeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, participantPropertyReferences, sourceEntityType, sourceEntityTypeName, targetEntityType, targetEntityTypeName) { 
        obj['participantPropertyReferences'] = participantPropertyReferences;
        obj['sourceEntityType'] = sourceEntityType;
        obj['sourceEntityTypeName'] = sourceEntityTypeName;
        obj['targetEntityType'] = targetEntityType;
        obj['targetEntityTypeName'] = targetEntityTypeName;
    }

    /**
     * Constructs a <code>LinkDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkDefinition} obj Optional instance to populate.
     * @return {module:model/LinkDefinition} The populated <code>LinkDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkDefinition();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], {'String': 'String'});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], {'String': 'String'});
            }
            if (data.hasOwnProperty('linkName')) {
                obj['linkName'] = ApiClient.convertToType(data['linkName'], 'String');
            }
            if (data.hasOwnProperty('mappings')) {
                obj['mappings'] = ApiClient.convertToType(data['mappings'], [TypePropertiesMapping]);
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'String');
            }
            if (data.hasOwnProperty('participantPropertyReferences')) {
                obj['participantPropertyReferences'] = ApiClient.convertToType(data['participantPropertyReferences'], [ParticipantPropertyReference]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
            if (data.hasOwnProperty('referenceOnly')) {
                obj['referenceOnly'] = ApiClient.convertToType(data['referenceOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('sourceEntityType')) {
                obj['sourceEntityType'] = ApiClient.convertToType(data['sourceEntityType'], 'String');
            }
            if (data.hasOwnProperty('sourceEntityTypeName')) {
                obj['sourceEntityTypeName'] = ApiClient.convertToType(data['sourceEntityTypeName'], 'String');
            }
            if (data.hasOwnProperty('targetEntityType')) {
                obj['targetEntityType'] = ApiClient.convertToType(data['targetEntityType'], 'String');
            }
            if (data.hasOwnProperty('targetEntityTypeName')) {
                obj['targetEntityTypeName'] = ApiClient.convertToType(data['targetEntityTypeName'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LinkDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['linkName'] && !(typeof data['linkName'] === 'string' || data['linkName'] instanceof String)) {
            throw new Error("Expected the field `linkName` to be a primitive type in the JSON string but got " + data['linkName']);
        }
        if (data['mappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mappings'])) {
                throw new Error("Expected the field `mappings` to be an array in the JSON data but got " + data['mappings']);
            }
            // validate the optional field `mappings` (array)
            for (const item of data['mappings']) {
                TypePropertiesMapping.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operationType'] && !(typeof data['operationType'] === 'string' || data['operationType'] instanceof String)) {
            throw new Error("Expected the field `operationType` to be a primitive type in the JSON string but got " + data['operationType']);
        }
        if (data['participantPropertyReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['participantPropertyReferences'])) {
                throw new Error("Expected the field `participantPropertyReferences` to be an array in the JSON data but got " + data['participantPropertyReferences']);
            }
            // validate the optional field `participantPropertyReferences` (array)
            for (const item of data['participantPropertyReferences']) {
                ParticipantPropertyReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sourceEntityType'] && !(typeof data['sourceEntityType'] === 'string' || data['sourceEntityType'] instanceof String)) {
            throw new Error("Expected the field `sourceEntityType` to be a primitive type in the JSON string but got " + data['sourceEntityType']);
        }
        // ensure the json data is a string
        if (data['sourceEntityTypeName'] && !(typeof data['sourceEntityTypeName'] === 'string' || data['sourceEntityTypeName'] instanceof String)) {
            throw new Error("Expected the field `sourceEntityTypeName` to be a primitive type in the JSON string but got " + data['sourceEntityTypeName']);
        }
        // ensure the json data is a string
        if (data['targetEntityType'] && !(typeof data['targetEntityType'] === 'string' || data['targetEntityType'] instanceof String)) {
            throw new Error("Expected the field `targetEntityType` to be a primitive type in the JSON string but got " + data['targetEntityType']);
        }
        // ensure the json data is a string
        if (data['targetEntityTypeName'] && !(typeof data['targetEntityTypeName'] === 'string' || data['targetEntityTypeName'] instanceof String)) {
            throw new Error("Expected the field `targetEntityTypeName` to be a primitive type in the JSON string but got " + data['targetEntityTypeName']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}

LinkDefinition.RequiredProperties = ["participantPropertyReferences", "sourceEntityType", "sourceEntityTypeName", "targetEntityType", "targetEntityTypeName"];

/**
 * Localized descriptions for the Link.
 * @member {Object.<String, String>} description
 */
LinkDefinition.prototype['description'] = undefined;

/**
 * Localized display name for the Link.
 * @member {Object.<String, String>} displayName
 */
LinkDefinition.prototype['displayName'] = undefined;

/**
 * The link name.
 * @member {String} linkName
 */
LinkDefinition.prototype['linkName'] = undefined;

/**
 * The set of properties mappings between the source and target Types.
 * @member {Array.<module:model/TypePropertiesMapping>} mappings
 */
LinkDefinition.prototype['mappings'] = undefined;

/**
 * Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only.
 * @member {module:model/LinkDefinition.OperationTypeEnum} operationType
 */
LinkDefinition.prototype['operationType'] = undefined;

/**
 * The properties that represent the participating profile.
 * @member {Array.<module:model/ParticipantPropertyReference>} participantPropertyReferences
 */
LinkDefinition.prototype['participantPropertyReferences'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
LinkDefinition.prototype['provisioningState'] = undefined;

/**
 * Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles.
 * @member {Boolean} referenceOnly
 */
LinkDefinition.prototype['referenceOnly'] = undefined;

/**
 * Type of source entity.
 * @member {module:model/LinkDefinition.SourceEntityTypeEnum} sourceEntityType
 */
LinkDefinition.prototype['sourceEntityType'] = undefined;

/**
 * Name of the source Entity Type.
 * @member {String} sourceEntityTypeName
 */
LinkDefinition.prototype['sourceEntityTypeName'] = undefined;

/**
 * Type of target entity.
 * @member {module:model/LinkDefinition.TargetEntityTypeEnum} targetEntityType
 */
LinkDefinition.prototype['targetEntityType'] = undefined;

/**
 * Name of the target Entity Type.
 * @member {String} targetEntityTypeName
 */
LinkDefinition.prototype['targetEntityTypeName'] = undefined;

/**
 * The hub name.
 * @member {String} tenantId
 */
LinkDefinition.prototype['tenantId'] = undefined;





/**
 * Allowed values for the <code>operationType</code> property.
 * @enum {String}
 * @readonly
 */
LinkDefinition['OperationTypeEnum'] = {

    /**
     * value: "Upsert"
     * @const
     */
    "Upsert": "Upsert",

    /**
     * value: "Delete"
     * @const
     */
    "Delete": "Delete"
};


/**
 * Allowed values for the <code>sourceEntityType</code> property.
 * @enum {String}
 * @readonly
 */
LinkDefinition['SourceEntityTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Profile"
     * @const
     */
    "Profile": "Profile",

    /**
     * value: "Interaction"
     * @const
     */
    "Interaction": "Interaction",

    /**
     * value: "Relationship"
     * @const
     */
    "Relationship": "Relationship"
};


/**
 * Allowed values for the <code>targetEntityType</code> property.
 * @enum {String}
 * @readonly
 */
LinkDefinition['TargetEntityTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Profile"
     * @const
     */
    "Profile": "Profile",

    /**
     * value: "Interaction"
     * @const
     */
    "Interaction": "Interaction",

    /**
     * value: "Relationship"
     * @const
     */
    "Relationship": "Relationship"
};



export default LinkDefinition;

