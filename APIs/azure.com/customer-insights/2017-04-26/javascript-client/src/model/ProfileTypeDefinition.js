/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityTypeDefinition from './EntityTypeDefinition';
import PropertyDefinition from './PropertyDefinition';
import ProvisioningState from './ProvisioningState';
import StrongId from './StrongId';

/**
 * The ProfileTypeDefinition model module.
 * @module model/ProfileTypeDefinition
 * @version 2017-04-26
 */
class ProfileTypeDefinition {
    /**
     * Constructs a new <code>ProfileTypeDefinition</code>.
     * The profile type definition.
     * @alias module:model/ProfileTypeDefinition
     * @implements module:model/EntityTypeDefinition
     */
    constructor() { 
        EntityTypeDefinition.initialize(this);
        ProfileTypeDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProfileTypeDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProfileTypeDefinition} obj Optional instance to populate.
     * @return {module:model/ProfileTypeDefinition} The populated <code>ProfileTypeDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProfileTypeDefinition();
            EntityTypeDefinition.constructFromObject(data, obj);

            if (data.hasOwnProperty('strongIds')) {
                obj['strongIds'] = ApiClient.convertToType(data['strongIds'], [StrongId]);
            }
            if (data.hasOwnProperty('apiEntitySetName')) {
                obj['apiEntitySetName'] = ApiClient.convertToType(data['apiEntitySetName'], 'String');
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [PropertyDefinition]);
            }
            if (data.hasOwnProperty('instancesCount')) {
                obj['instancesCount'] = ApiClient.convertToType(data['instancesCount'], 'Number');
            }
            if (data.hasOwnProperty('lastChangedUtc')) {
                obj['lastChangedUtc'] = ApiClient.convertToType(data['lastChangedUtc'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
            if (data.hasOwnProperty('schemaItemTypeLink')) {
                obj['schemaItemTypeLink'] = ApiClient.convertToType(data['schemaItemTypeLink'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('timestampFieldName')) {
                obj['timestampFieldName'] = ApiClient.convertToType(data['timestampFieldName'], 'String');
            }
            if (data.hasOwnProperty('typeName')) {
                obj['typeName'] = ApiClient.convertToType(data['typeName'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': ['String']});
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], {'String': 'String'});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], {'String': 'String'});
            }
            if (data.hasOwnProperty('largeImage')) {
                obj['largeImage'] = ApiClient.convertToType(data['largeImage'], 'String');
            }
            if (data.hasOwnProperty('localizedAttributes')) {
                obj['localizedAttributes'] = ApiClient.convertToType(data['localizedAttributes'], {'String': {'String': 'String'}});
            }
            if (data.hasOwnProperty('mediumImage')) {
                obj['mediumImage'] = ApiClient.convertToType(data['mediumImage'], 'String');
            }
            if (data.hasOwnProperty('smallImage')) {
                obj['smallImage'] = ApiClient.convertToType(data['smallImage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProfileTypeDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProfileTypeDefinition</code>.
     */
    static validateJSON(data) {
        if (data['strongIds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['strongIds'])) {
                throw new Error("Expected the field `strongIds` to be an array in the JSON data but got " + data['strongIds']);
            }
            // validate the optional field `strongIds` (array)
            for (const item of data['strongIds']) {
                StrongId.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['apiEntitySetName'] && !(typeof data['apiEntitySetName'] === 'string' || data['apiEntitySetName'] instanceof String)) {
            throw new Error("Expected the field `apiEntitySetName` to be a primitive type in the JSON string but got " + data['apiEntitySetName']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                PropertyDefinition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['schemaItemTypeLink'] && !(typeof data['schemaItemTypeLink'] === 'string' || data['schemaItemTypeLink'] instanceof String)) {
            throw new Error("Expected the field `schemaItemTypeLink` to be a primitive type in the JSON string but got " + data['schemaItemTypeLink']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['timestampFieldName'] && !(typeof data['timestampFieldName'] === 'string' || data['timestampFieldName'] instanceof String)) {
            throw new Error("Expected the field `timestampFieldName` to be a primitive type in the JSON string but got " + data['timestampFieldName']);
        }
        // ensure the json data is a string
        if (data['typeName'] && !(typeof data['typeName'] === 'string' || data['typeName'] instanceof String)) {
            throw new Error("Expected the field `typeName` to be a primitive type in the JSON string but got " + data['typeName']);
        }
        // ensure the json data is a string
        if (data['largeImage'] && !(typeof data['largeImage'] === 'string' || data['largeImage'] instanceof String)) {
            throw new Error("Expected the field `largeImage` to be a primitive type in the JSON string but got " + data['largeImage']);
        }
        // ensure the json data is a string
        if (data['mediumImage'] && !(typeof data['mediumImage'] === 'string' || data['mediumImage'] instanceof String)) {
            throw new Error("Expected the field `mediumImage` to be a primitive type in the JSON string but got " + data['mediumImage']);
        }
        // ensure the json data is a string
        if (data['smallImage'] && !(typeof data['smallImage'] === 'string' || data['smallImage'] instanceof String)) {
            throw new Error("Expected the field `smallImage` to be a primitive type in the JSON string but got " + data['smallImage']);
        }

        return true;
    }


}



/**
 * The strong IDs.
 * @member {Array.<module:model/StrongId>} strongIds
 */
ProfileTypeDefinition.prototype['strongIds'] = undefined;

/**
 * The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
 * @member {String} apiEntitySetName
 */
ProfileTypeDefinition.prototype['apiEntitySetName'] = undefined;

/**
 * Type of entity.
 * @member {module:model/ProfileTypeDefinition.EntityTypeEnum} entityType
 */
ProfileTypeDefinition.prototype['entityType'] = undefined;

/**
 * The properties of the Profile.
 * @member {Array.<module:model/PropertyDefinition>} fields
 */
ProfileTypeDefinition.prototype['fields'] = undefined;

/**
 * The instance count.
 * @member {Number} instancesCount
 */
ProfileTypeDefinition.prototype['instancesCount'] = undefined;

/**
 * The last changed time for the type definition.
 * @member {Date} lastChangedUtc
 */
ProfileTypeDefinition.prototype['lastChangedUtc'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
ProfileTypeDefinition.prototype['provisioningState'] = undefined;

/**
 * The schema org link. This helps ACI identify and suggest semantic models.
 * @member {String} schemaItemTypeLink
 */
ProfileTypeDefinition.prototype['schemaItemTypeLink'] = undefined;

/**
 * The hub name.
 * @member {String} tenantId
 */
ProfileTypeDefinition.prototype['tenantId'] = undefined;

/**
 * The timestamp property name. Represents the time when the interaction or profile update happened.
 * @member {String} timestampFieldName
 */
ProfileTypeDefinition.prototype['timestampFieldName'] = undefined;

/**
 * The name of the entity.
 * @member {String} typeName
 */
ProfileTypeDefinition.prototype['typeName'] = undefined;

/**
 * The attributes for the Type.
 * @member {Object.<String, Array.<String>>} attributes
 */
ProfileTypeDefinition.prototype['attributes'] = undefined;

/**
 * Localized descriptions for the property.
 * @member {Object.<String, String>} description
 */
ProfileTypeDefinition.prototype['description'] = undefined;

/**
 * Localized display names for the property.
 * @member {Object.<String, String>} displayName
 */
ProfileTypeDefinition.prototype['displayName'] = undefined;

/**
 * Large Image associated with the Property or EntityType.
 * @member {String} largeImage
 */
ProfileTypeDefinition.prototype['largeImage'] = undefined;

/**
 * Any custom localized attributes for the Type.
 * @member {Object.<String, Object.<String, String>>} localizedAttributes
 */
ProfileTypeDefinition.prototype['localizedAttributes'] = undefined;

/**
 * Medium Image associated with the Property or EntityType.
 * @member {String} mediumImage
 */
ProfileTypeDefinition.prototype['mediumImage'] = undefined;

/**
 * Small Image associated with the Property or EntityType.
 * @member {String} smallImage
 */
ProfileTypeDefinition.prototype['smallImage'] = undefined;


// Implement EntityTypeDefinition interface:
/**
 * The attributes for the Type.
 * @member {Object.<String, Array.<String>>} attributes
 */
EntityTypeDefinition.prototype['attributes'] = undefined;
/**
 * Localized descriptions for the property.
 * @member {Object.<String, String>} description
 */
EntityTypeDefinition.prototype['description'] = undefined;
/**
 * Localized display names for the property.
 * @member {Object.<String, String>} displayName
 */
EntityTypeDefinition.prototype['displayName'] = undefined;
/**
 * Large Image associated with the Property or EntityType.
 * @member {String} largeImage
 */
EntityTypeDefinition.prototype['largeImage'] = undefined;
/**
 * Any custom localized attributes for the Type.
 * @member {Object.<String, Object.<String, String>>} localizedAttributes
 */
EntityTypeDefinition.prototype['localizedAttributes'] = undefined;
/**
 * Medium Image associated with the Property or EntityType.
 * @member {String} mediumImage
 */
EntityTypeDefinition.prototype['mediumImage'] = undefined;
/**
 * Small Image associated with the Property or EntityType.
 * @member {String} smallImage
 */
EntityTypeDefinition.prototype['smallImage'] = undefined;



/**
 * Allowed values for the <code>entityType</code> property.
 * @enum {String}
 * @readonly
 */
ProfileTypeDefinition['EntityTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Profile"
     * @const
     */
    "Profile": "Profile",

    /**
     * value: "Interaction"
     * @const
     */
    "Interaction": "Interaction",

    /**
     * value: "Relationship"
     * @const
     */
    "Relationship": "Relationship"
};



export default ProfileTypeDefinition;

