/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParticipantProfilePropertyReference from './ParticipantProfilePropertyReference';
import ProvisioningState from './ProvisioningState';
import RelationshipLinkFieldMapping from './RelationshipLinkFieldMapping';

/**
 * The RelationshipLinkDefinition model module.
 * @module model/RelationshipLinkDefinition
 * @version 2017-04-26
 */
class RelationshipLinkDefinition {
    /**
     * Constructs a new <code>RelationshipLinkDefinition</code>.
     * The definition of relationship link.
     * @alias module:model/RelationshipLinkDefinition
     * @param interactionType {String} The InteractionType associated with the Relationship Link.
     * @param profilePropertyReferences {Array.<module:model/ParticipantProfilePropertyReference>} The property references for the Profile of the Relationship.
     * @param relatedProfilePropertyReferences {Array.<module:model/ParticipantProfilePropertyReference>} The property references for the Related Profile of the Relationship.
     * @param relationshipName {String} The Relationship associated with the Link.
     */
    constructor(interactionType, profilePropertyReferences, relatedProfilePropertyReferences, relationshipName) { 
        
        RelationshipLinkDefinition.initialize(this, interactionType, profilePropertyReferences, relatedProfilePropertyReferences, relationshipName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, interactionType, profilePropertyReferences, relatedProfilePropertyReferences, relationshipName) { 
        obj['interactionType'] = interactionType;
        obj['profilePropertyReferences'] = profilePropertyReferences;
        obj['relatedProfilePropertyReferences'] = relatedProfilePropertyReferences;
        obj['relationshipName'] = relationshipName;
    }

    /**
     * Constructs a <code>RelationshipLinkDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelationshipLinkDefinition} obj Optional instance to populate.
     * @return {module:model/RelationshipLinkDefinition} The populated <code>RelationshipLinkDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationshipLinkDefinition();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], {'String': 'String'});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], {'String': 'String'});
            }
            if (data.hasOwnProperty('interactionType')) {
                obj['interactionType'] = ApiClient.convertToType(data['interactionType'], 'String');
            }
            if (data.hasOwnProperty('linkName')) {
                obj['linkName'] = ApiClient.convertToType(data['linkName'], 'String');
            }
            if (data.hasOwnProperty('mappings')) {
                obj['mappings'] = ApiClient.convertToType(data['mappings'], [RelationshipLinkFieldMapping]);
            }
            if (data.hasOwnProperty('profilePropertyReferences')) {
                obj['profilePropertyReferences'] = ApiClient.convertToType(data['profilePropertyReferences'], [ParticipantProfilePropertyReference]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
            if (data.hasOwnProperty('relatedProfilePropertyReferences')) {
                obj['relatedProfilePropertyReferences'] = ApiClient.convertToType(data['relatedProfilePropertyReferences'], [ParticipantProfilePropertyReference]);
            }
            if (data.hasOwnProperty('relationshipGuidId')) {
                obj['relationshipGuidId'] = ApiClient.convertToType(data['relationshipGuidId'], 'String');
            }
            if (data.hasOwnProperty('relationshipName')) {
                obj['relationshipName'] = ApiClient.convertToType(data['relationshipName'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelationshipLinkDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelationshipLinkDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RelationshipLinkDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['interactionType'] && !(typeof data['interactionType'] === 'string' || data['interactionType'] instanceof String)) {
            throw new Error("Expected the field `interactionType` to be a primitive type in the JSON string but got " + data['interactionType']);
        }
        // ensure the json data is a string
        if (data['linkName'] && !(typeof data['linkName'] === 'string' || data['linkName'] instanceof String)) {
            throw new Error("Expected the field `linkName` to be a primitive type in the JSON string but got " + data['linkName']);
        }
        if (data['mappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mappings'])) {
                throw new Error("Expected the field `mappings` to be an array in the JSON data but got " + data['mappings']);
            }
            // validate the optional field `mappings` (array)
            for (const item of data['mappings']) {
                RelationshipLinkFieldMapping.validateJSON(item);
            };
        }
        if (data['profilePropertyReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['profilePropertyReferences'])) {
                throw new Error("Expected the field `profilePropertyReferences` to be an array in the JSON data but got " + data['profilePropertyReferences']);
            }
            // validate the optional field `profilePropertyReferences` (array)
            for (const item of data['profilePropertyReferences']) {
                ParticipantProfilePropertyReference.validateJSON(item);
            };
        }
        if (data['relatedProfilePropertyReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relatedProfilePropertyReferences'])) {
                throw new Error("Expected the field `relatedProfilePropertyReferences` to be an array in the JSON data but got " + data['relatedProfilePropertyReferences']);
            }
            // validate the optional field `relatedProfilePropertyReferences` (array)
            for (const item of data['relatedProfilePropertyReferences']) {
                ParticipantProfilePropertyReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['relationshipGuidId'] && !(typeof data['relationshipGuidId'] === 'string' || data['relationshipGuidId'] instanceof String)) {
            throw new Error("Expected the field `relationshipGuidId` to be a primitive type in the JSON string but got " + data['relationshipGuidId']);
        }
        // ensure the json data is a string
        if (data['relationshipName'] && !(typeof data['relationshipName'] === 'string' || data['relationshipName'] instanceof String)) {
            throw new Error("Expected the field `relationshipName` to be a primitive type in the JSON string but got " + data['relationshipName']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}

RelationshipLinkDefinition.RequiredProperties = ["interactionType", "profilePropertyReferences", "relatedProfilePropertyReferences", "relationshipName"];

/**
 * Localized descriptions for the Relationship Link.
 * @member {Object.<String, String>} description
 */
RelationshipLinkDefinition.prototype['description'] = undefined;

/**
 * Localized display name for the Relationship Link.
 * @member {Object.<String, String>} displayName
 */
RelationshipLinkDefinition.prototype['displayName'] = undefined;

/**
 * The InteractionType associated with the Relationship Link.
 * @member {String} interactionType
 */
RelationshipLinkDefinition.prototype['interactionType'] = undefined;

/**
 * The name of the Relationship Link.
 * @member {String} linkName
 */
RelationshipLinkDefinition.prototype['linkName'] = undefined;

/**
 * The mappings between Interaction and Relationship fields.
 * @member {Array.<module:model/RelationshipLinkFieldMapping>} mappings
 */
RelationshipLinkDefinition.prototype['mappings'] = undefined;

/**
 * The property references for the Profile of the Relationship.
 * @member {Array.<module:model/ParticipantProfilePropertyReference>} profilePropertyReferences
 */
RelationshipLinkDefinition.prototype['profilePropertyReferences'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
RelationshipLinkDefinition.prototype['provisioningState'] = undefined;

/**
 * The property references for the Related Profile of the Relationship.
 * @member {Array.<module:model/ParticipantProfilePropertyReference>} relatedProfilePropertyReferences
 */
RelationshipLinkDefinition.prototype['relatedProfilePropertyReferences'] = undefined;

/**
 * The relationship guid id.
 * @member {String} relationshipGuidId
 */
RelationshipLinkDefinition.prototype['relationshipGuidId'] = undefined;

/**
 * The Relationship associated with the Link.
 * @member {String} relationshipName
 */
RelationshipLinkDefinition.prototype['relationshipName'] = undefined;

/**
 * The hub name.
 * @member {String} tenantId
 */
RelationshipLinkDefinition.prototype['tenantId'] = undefined;






export default RelationshipLinkDefinition;

