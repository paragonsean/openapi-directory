/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourcePrecedence from './DataSourcePrecedence';
import ProfileEnumValidValuesFormat from './ProfileEnumValidValuesFormat';

/**
 * The PropertyDefinition model module.
 * @module model/PropertyDefinition
 * @version 2017-04-26
 */
class PropertyDefinition {
    /**
     * Constructs a new <code>PropertyDefinition</code>.
     * Property definition.
     * @alias module:model/PropertyDefinition
     * @param fieldName {String} Name of the property.
     * @param fieldType {String} Type of the property.
     */
    constructor(fieldName, fieldType) { 
        
        PropertyDefinition.initialize(this, fieldName, fieldType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fieldName, fieldType) { 
        obj['fieldName'] = fieldName;
        obj['fieldType'] = fieldType;
    }

    /**
     * Constructs a <code>PropertyDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyDefinition} obj Optional instance to populate.
     * @return {module:model/PropertyDefinition} The populated <code>PropertyDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyDefinition();

            if (data.hasOwnProperty('arrayValueSeparator')) {
                obj['arrayValueSeparator'] = ApiClient.convertToType(data['arrayValueSeparator'], 'String');
            }
            if (data.hasOwnProperty('dataSourcePrecedenceRules')) {
                obj['dataSourcePrecedenceRules'] = ApiClient.convertToType(data['dataSourcePrecedenceRules'], [DataSourcePrecedence]);
            }
            if (data.hasOwnProperty('enumValidValues')) {
                obj['enumValidValues'] = ApiClient.convertToType(data['enumValidValues'], [ProfileEnumValidValuesFormat]);
            }
            if (data.hasOwnProperty('fieldName')) {
                obj['fieldName'] = ApiClient.convertToType(data['fieldName'], 'String');
            }
            if (data.hasOwnProperty('fieldType')) {
                obj['fieldType'] = ApiClient.convertToType(data['fieldType'], 'String');
            }
            if (data.hasOwnProperty('isArray')) {
                obj['isArray'] = ApiClient.convertToType(data['isArray'], 'Boolean');
            }
            if (data.hasOwnProperty('isAvailableInGraph')) {
                obj['isAvailableInGraph'] = ApiClient.convertToType(data['isAvailableInGraph'], 'Boolean');
            }
            if (data.hasOwnProperty('isEnum')) {
                obj['isEnum'] = ApiClient.convertToType(data['isEnum'], 'Boolean');
            }
            if (data.hasOwnProperty('isFlagEnum')) {
                obj['isFlagEnum'] = ApiClient.convertToType(data['isFlagEnum'], 'Boolean');
            }
            if (data.hasOwnProperty('isImage')) {
                obj['isImage'] = ApiClient.convertToType(data['isImage'], 'Boolean');
            }
            if (data.hasOwnProperty('isLocalizedString')) {
                obj['isLocalizedString'] = ApiClient.convertToType(data['isLocalizedString'], 'Boolean');
            }
            if (data.hasOwnProperty('isName')) {
                obj['isName'] = ApiClient.convertToType(data['isName'], 'Boolean');
            }
            if (data.hasOwnProperty('isRequired')) {
                obj['isRequired'] = ApiClient.convertToType(data['isRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('maxLength')) {
                obj['maxLength'] = ApiClient.convertToType(data['maxLength'], 'Number');
            }
            if (data.hasOwnProperty('propertyId')) {
                obj['propertyId'] = ApiClient.convertToType(data['propertyId'], 'String');
            }
            if (data.hasOwnProperty('schemaItemPropLink')) {
                obj['schemaItemPropLink'] = ApiClient.convertToType(data['schemaItemPropLink'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PropertyDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['arrayValueSeparator'] && !(typeof data['arrayValueSeparator'] === 'string' || data['arrayValueSeparator'] instanceof String)) {
            throw new Error("Expected the field `arrayValueSeparator` to be a primitive type in the JSON string but got " + data['arrayValueSeparator']);
        }
        if (data['dataSourcePrecedenceRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataSourcePrecedenceRules'])) {
                throw new Error("Expected the field `dataSourcePrecedenceRules` to be an array in the JSON data but got " + data['dataSourcePrecedenceRules']);
            }
            // validate the optional field `dataSourcePrecedenceRules` (array)
            for (const item of data['dataSourcePrecedenceRules']) {
                DataSourcePrecedence.validateJSON(item);
            };
        }
        if (data['enumValidValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['enumValidValues'])) {
                throw new Error("Expected the field `enumValidValues` to be an array in the JSON data but got " + data['enumValidValues']);
            }
            // validate the optional field `enumValidValues` (array)
            for (const item of data['enumValidValues']) {
                ProfileEnumValidValuesFormat.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fieldName'] && !(typeof data['fieldName'] === 'string' || data['fieldName'] instanceof String)) {
            throw new Error("Expected the field `fieldName` to be a primitive type in the JSON string but got " + data['fieldName']);
        }
        // ensure the json data is a string
        if (data['fieldType'] && !(typeof data['fieldType'] === 'string' || data['fieldType'] instanceof String)) {
            throw new Error("Expected the field `fieldType` to be a primitive type in the JSON string but got " + data['fieldType']);
        }
        // ensure the json data is a string
        if (data['propertyId'] && !(typeof data['propertyId'] === 'string' || data['propertyId'] instanceof String)) {
            throw new Error("Expected the field `propertyId` to be a primitive type in the JSON string but got " + data['propertyId']);
        }
        // ensure the json data is a string
        if (data['schemaItemPropLink'] && !(typeof data['schemaItemPropLink'] === 'string' || data['schemaItemPropLink'] instanceof String)) {
            throw new Error("Expected the field `schemaItemPropLink` to be a primitive type in the JSON string but got " + data['schemaItemPropLink']);
        }

        return true;
    }


}

PropertyDefinition.RequiredProperties = ["fieldName", "fieldType"];

/**
 * Array value separator for properties with isArray set.
 * @member {String} arrayValueSeparator
 */
PropertyDefinition.prototype['arrayValueSeparator'] = undefined;

/**
 * This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
 * @member {Array.<module:model/DataSourcePrecedence>} dataSourcePrecedenceRules
 */
PropertyDefinition.prototype['dataSourcePrecedenceRules'] = undefined;

/**
 * Describes valid values for an enum property.
 * @member {Array.<module:model/ProfileEnumValidValuesFormat>} enumValidValues
 */
PropertyDefinition.prototype['enumValidValues'] = undefined;

/**
 * Name of the property.
 * @member {String} fieldName
 */
PropertyDefinition.prototype['fieldName'] = undefined;

/**
 * Type of the property.
 * @member {String} fieldType
 */
PropertyDefinition.prototype['fieldType'] = undefined;

/**
 * Indicates if the property is actually an array of the fieldType above on the data api.
 * @member {Boolean} isArray
 */
PropertyDefinition.prototype['isArray'] = undefined;

/**
 * Whether property is available in graph or not.
 * @member {Boolean} isAvailableInGraph
 */
PropertyDefinition.prototype['isAvailableInGraph'] = undefined;

/**
 * Indicates if the property is an enum.
 * @member {Boolean} isEnum
 */
PropertyDefinition.prototype['isEnum'] = undefined;

/**
 * Indicates if the property is an flag enum.
 * @member {Boolean} isFlagEnum
 */
PropertyDefinition.prototype['isFlagEnum'] = undefined;

/**
 * Whether the property is an Image.
 * @member {Boolean} isImage
 */
PropertyDefinition.prototype['isImage'] = undefined;

/**
 * Whether the property is a localized string.
 * @member {Boolean} isLocalizedString
 */
PropertyDefinition.prototype['isLocalizedString'] = undefined;

/**
 * Whether the property is a name or a part of name.
 * @member {Boolean} isName
 */
PropertyDefinition.prototype['isName'] = undefined;

/**
 * Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
 * @member {Boolean} isRequired
 */
PropertyDefinition.prototype['isRequired'] = undefined;

/**
 * Max length of string. Used only if type is string.
 * @member {Number} maxLength
 */
PropertyDefinition.prototype['maxLength'] = undefined;

/**
 * The ID associated with the property.
 * @member {String} propertyId
 */
PropertyDefinition.prototype['propertyId'] = undefined;

/**
 * URL encoded schema.org item prop link for the property.
 * @member {String} schemaItemPropLink
 */
PropertyDefinition.prototype['schemaItemPropLink'] = undefined;






export default PropertyDefinition;

