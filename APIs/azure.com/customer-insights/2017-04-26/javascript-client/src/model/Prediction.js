/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PredictionGradesInner from './PredictionGradesInner';
import PredictionMappings from './PredictionMappings';
import PredictionSystemGeneratedEntities from './PredictionSystemGeneratedEntities';
import ProvisioningState from './ProvisioningState';

/**
 * The Prediction model module.
 * @module model/Prediction
 * @version 2017-04-26
 */
class Prediction {
    /**
     * Constructs a new <code>Prediction</code>.
     * The prediction definition.
     * @alias module:model/Prediction
     * @param autoAnalyze {Boolean} Whether do auto analyze.
     * @param mappings {module:model/PredictionMappings} 
     * @param negativeOutcomeExpression {String} Negative outcome expression.
     * @param positiveOutcomeExpression {String} Positive outcome expression.
     * @param primaryProfileType {String} Primary profile type.
     * @param scopeExpression {String} Scope expression.
     * @param scoreLabel {String} Score label.
     */
    constructor(autoAnalyze, mappings, negativeOutcomeExpression, positiveOutcomeExpression, primaryProfileType, scopeExpression, scoreLabel) { 
        
        Prediction.initialize(this, autoAnalyze, mappings, negativeOutcomeExpression, positiveOutcomeExpression, primaryProfileType, scopeExpression, scoreLabel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, autoAnalyze, mappings, negativeOutcomeExpression, positiveOutcomeExpression, primaryProfileType, scopeExpression, scoreLabel) { 
        obj['autoAnalyze'] = autoAnalyze;
        obj['mappings'] = mappings;
        obj['negativeOutcomeExpression'] = negativeOutcomeExpression;
        obj['positiveOutcomeExpression'] = positiveOutcomeExpression;
        obj['primaryProfileType'] = primaryProfileType;
        obj['scopeExpression'] = scopeExpression;
        obj['scoreLabel'] = scoreLabel;
    }

    /**
     * Constructs a <code>Prediction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Prediction} obj Optional instance to populate.
     * @return {module:model/Prediction} The populated <code>Prediction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Prediction();

            if (data.hasOwnProperty('autoAnalyze')) {
                obj['autoAnalyze'] = ApiClient.convertToType(data['autoAnalyze'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], {'String': 'String'});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], {'String': 'String'});
            }
            if (data.hasOwnProperty('grades')) {
                obj['grades'] = ApiClient.convertToType(data['grades'], [PredictionGradesInner]);
            }
            if (data.hasOwnProperty('involvedInteractionTypes')) {
                obj['involvedInteractionTypes'] = ApiClient.convertToType(data['involvedInteractionTypes'], ['String']);
            }
            if (data.hasOwnProperty('involvedKpiTypes')) {
                obj['involvedKpiTypes'] = ApiClient.convertToType(data['involvedKpiTypes'], ['String']);
            }
            if (data.hasOwnProperty('involvedRelationships')) {
                obj['involvedRelationships'] = ApiClient.convertToType(data['involvedRelationships'], ['String']);
            }
            if (data.hasOwnProperty('mappings')) {
                obj['mappings'] = PredictionMappings.constructFromObject(data['mappings']);
            }
            if (data.hasOwnProperty('negativeOutcomeExpression')) {
                obj['negativeOutcomeExpression'] = ApiClient.convertToType(data['negativeOutcomeExpression'], 'String');
            }
            if (data.hasOwnProperty('positiveOutcomeExpression')) {
                obj['positiveOutcomeExpression'] = ApiClient.convertToType(data['positiveOutcomeExpression'], 'String');
            }
            if (data.hasOwnProperty('predictionName')) {
                obj['predictionName'] = ApiClient.convertToType(data['predictionName'], 'String');
            }
            if (data.hasOwnProperty('primaryProfileType')) {
                obj['primaryProfileType'] = ApiClient.convertToType(data['primaryProfileType'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
            if (data.hasOwnProperty('scopeExpression')) {
                obj['scopeExpression'] = ApiClient.convertToType(data['scopeExpression'], 'String');
            }
            if (data.hasOwnProperty('scoreLabel')) {
                obj['scoreLabel'] = ApiClient.convertToType(data['scoreLabel'], 'String');
            }
            if (data.hasOwnProperty('systemGeneratedEntities')) {
                obj['systemGeneratedEntities'] = PredictionSystemGeneratedEntities.constructFromObject(data['systemGeneratedEntities']);
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Prediction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Prediction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Prediction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['grades']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['grades'])) {
                throw new Error("Expected the field `grades` to be an array in the JSON data but got " + data['grades']);
            }
            // validate the optional field `grades` (array)
            for (const item of data['grades']) {
                PredictionGradesInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['involvedInteractionTypes'])) {
            throw new Error("Expected the field `involvedInteractionTypes` to be an array in the JSON data but got " + data['involvedInteractionTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['involvedKpiTypes'])) {
            throw new Error("Expected the field `involvedKpiTypes` to be an array in the JSON data but got " + data['involvedKpiTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['involvedRelationships'])) {
            throw new Error("Expected the field `involvedRelationships` to be an array in the JSON data but got " + data['involvedRelationships']);
        }
        // validate the optional field `mappings`
        if (data['mappings']) { // data not null
          PredictionMappings.validateJSON(data['mappings']);
        }
        // ensure the json data is a string
        if (data['negativeOutcomeExpression'] && !(typeof data['negativeOutcomeExpression'] === 'string' || data['negativeOutcomeExpression'] instanceof String)) {
            throw new Error("Expected the field `negativeOutcomeExpression` to be a primitive type in the JSON string but got " + data['negativeOutcomeExpression']);
        }
        // ensure the json data is a string
        if (data['positiveOutcomeExpression'] && !(typeof data['positiveOutcomeExpression'] === 'string' || data['positiveOutcomeExpression'] instanceof String)) {
            throw new Error("Expected the field `positiveOutcomeExpression` to be a primitive type in the JSON string but got " + data['positiveOutcomeExpression']);
        }
        // ensure the json data is a string
        if (data['predictionName'] && !(typeof data['predictionName'] === 'string' || data['predictionName'] instanceof String)) {
            throw new Error("Expected the field `predictionName` to be a primitive type in the JSON string but got " + data['predictionName']);
        }
        // ensure the json data is a string
        if (data['primaryProfileType'] && !(typeof data['primaryProfileType'] === 'string' || data['primaryProfileType'] instanceof String)) {
            throw new Error("Expected the field `primaryProfileType` to be a primitive type in the JSON string but got " + data['primaryProfileType']);
        }
        // ensure the json data is a string
        if (data['scopeExpression'] && !(typeof data['scopeExpression'] === 'string' || data['scopeExpression'] instanceof String)) {
            throw new Error("Expected the field `scopeExpression` to be a primitive type in the JSON string but got " + data['scopeExpression']);
        }
        // ensure the json data is a string
        if (data['scoreLabel'] && !(typeof data['scoreLabel'] === 'string' || data['scoreLabel'] instanceof String)) {
            throw new Error("Expected the field `scoreLabel` to be a primitive type in the JSON string but got " + data['scoreLabel']);
        }
        // validate the optional field `systemGeneratedEntities`
        if (data['systemGeneratedEntities']) { // data not null
          PredictionSystemGeneratedEntities.validateJSON(data['systemGeneratedEntities']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}

Prediction.RequiredProperties = ["autoAnalyze", "mappings", "negativeOutcomeExpression", "positiveOutcomeExpression", "primaryProfileType", "scopeExpression", "scoreLabel"];

/**
 * Whether do auto analyze.
 * @member {Boolean} autoAnalyze
 */
Prediction.prototype['autoAnalyze'] = undefined;

/**
 * Description of the prediction.
 * @member {Object.<String, String>} description
 */
Prediction.prototype['description'] = undefined;

/**
 * Display name of the prediction.
 * @member {Object.<String, String>} displayName
 */
Prediction.prototype['displayName'] = undefined;

/**
 * The prediction grades.
 * @member {Array.<module:model/PredictionGradesInner>} grades
 */
Prediction.prototype['grades'] = undefined;

/**
 * Interaction types involved in the prediction.
 * @member {Array.<String>} involvedInteractionTypes
 */
Prediction.prototype['involvedInteractionTypes'] = undefined;

/**
 * KPI types involved in the prediction.
 * @member {Array.<String>} involvedKpiTypes
 */
Prediction.prototype['involvedKpiTypes'] = undefined;

/**
 * Relationships involved in the prediction.
 * @member {Array.<String>} involvedRelationships
 */
Prediction.prototype['involvedRelationships'] = undefined;

/**
 * @member {module:model/PredictionMappings} mappings
 */
Prediction.prototype['mappings'] = undefined;

/**
 * Negative outcome expression.
 * @member {String} negativeOutcomeExpression
 */
Prediction.prototype['negativeOutcomeExpression'] = undefined;

/**
 * Positive outcome expression.
 * @member {String} positiveOutcomeExpression
 */
Prediction.prototype['positiveOutcomeExpression'] = undefined;

/**
 * Name of the prediction.
 * @member {String} predictionName
 */
Prediction.prototype['predictionName'] = undefined;

/**
 * Primary profile type.
 * @member {String} primaryProfileType
 */
Prediction.prototype['primaryProfileType'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
Prediction.prototype['provisioningState'] = undefined;

/**
 * Scope expression.
 * @member {String} scopeExpression
 */
Prediction.prototype['scopeExpression'] = undefined;

/**
 * Score label.
 * @member {String} scoreLabel
 */
Prediction.prototype['scoreLabel'] = undefined;

/**
 * @member {module:model/PredictionSystemGeneratedEntities} systemGeneratedEntities
 */
Prediction.prototype['systemGeneratedEntities'] = undefined;

/**
 * The hub name.
 * @member {String} tenantId
 */
Prediction.prototype['tenantId'] = undefined;






export default Prediction;

