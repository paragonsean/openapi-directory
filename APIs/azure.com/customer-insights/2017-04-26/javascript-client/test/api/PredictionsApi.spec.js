/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-04-26
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CustomerInsightsManagementClient);
  }
}(this, function(expect, CustomerInsightsManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CustomerInsightsManagementClient.PredictionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PredictionsApi', function() {
    describe('predictionsCreateOrUpdate', function() {
      it('should call predictionsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test predictionsCreateOrUpdate
        //instance.predictionsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictionsDelete', function() {
      it('should call predictionsDelete successfully', function(done) {
        //uncomment below and update the code to test predictionsDelete
        //instance.predictionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictionsGet', function() {
      it('should call predictionsGet successfully', function(done) {
        //uncomment below and update the code to test predictionsGet
        //instance.predictionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictionsGetModelStatus', function() {
      it('should call predictionsGetModelStatus successfully', function(done) {
        //uncomment below and update the code to test predictionsGetModelStatus
        //instance.predictionsGetModelStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictionsGetTrainingResults', function() {
      it('should call predictionsGetTrainingResults successfully', function(done) {
        //uncomment below and update the code to test predictionsGetTrainingResults
        //instance.predictionsGetTrainingResults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictionsListByHub', function() {
      it('should call predictionsListByHub successfully', function(done) {
        //uncomment below and update the code to test predictionsListByHub
        //instance.predictionsListByHub(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('predictionsModelStatus', function() {
      it('should call predictionsModelStatus successfully', function(done) {
        //uncomment below and update the code to test predictionsModelStatus
        //instance.predictionsModelStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
