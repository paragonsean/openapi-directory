/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectorListResult from '../model/ConnectorListResult';
import ConnectorResourceFormat from '../model/ConnectorResourceFormat';

/**
* Connectors service.
* @module api/ConnectorsApi
* @version 2017-01-01
*/
export default class ConnectorsApi {

    /**
    * Constructs a new ConnectorsApi. 
    * @alias module:api/ConnectorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the connectorsCreateOrUpdate operation.
     * @callback module:api/ConnectorsApi~connectorsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectorResourceFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a connector or updates an existing connector in the hub.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} connectorName The name of the connector.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ConnectorResourceFormat} parameters Parameters supplied to the CreateOrUpdate Connector operation.
     * @param {module:api/ConnectorsApi~connectorsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectorResourceFormat}
     */
    connectorsCreateOrUpdate(resourceGroupName, hubName, connectorName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectorsCreateOrUpdate");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling connectorsCreateOrUpdate");
      }
      // verify the required parameter 'connectorName' is set
      if (connectorName === undefined || connectorName === null) {
        throw new Error("Missing the required parameter 'connectorName' when calling connectorsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectorsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectorsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling connectorsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'connectorName': connectorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectorResourceFormat;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectorsDelete operation.
     * @callback module:api/ConnectorsApi~connectorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a connector in the hub.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} connectorName The name of the connector.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConnectorsApi~connectorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    connectorsDelete(resourceGroupName, hubName, connectorName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectorsDelete");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling connectorsDelete");
      }
      // verify the required parameter 'connectorName' is set
      if (connectorName === undefined || connectorName === null) {
        throw new Error("Missing the required parameter 'connectorName' when calling connectorsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectorsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectorsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'connectorName': connectorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectorsGet operation.
     * @callback module:api/ConnectorsApi~connectorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectorResourceFormat} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a connector in the hub.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} connectorName The name of the connector.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConnectorsApi~connectorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectorResourceFormat}
     */
    connectorsGet(resourceGroupName, hubName, connectorName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectorsGet");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling connectorsGet");
      }
      // verify the required parameter 'connectorName' is set
      if (connectorName === undefined || connectorName === null) {
        throw new Error("Missing the required parameter 'connectorName' when calling connectorsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectorsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectorsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'connectorName': connectorName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectorResourceFormat;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectorsListByHub operation.
     * @callback module:api/ConnectorsApi~connectorsListByHubCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectorListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the connectors in the specified hub.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} hubName The name of the hub.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ConnectorsApi~connectorsListByHubCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectorListResult}
     */
    connectorsListByHub(resourceGroupName, hubName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectorsListByHub");
      }
      // verify the required parameter 'hubName' is set
      if (hubName === undefined || hubName === null) {
        throw new Error("Missing the required parameter 'hubName' when calling connectorsListByHub");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectorsListByHub");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectorsListByHub");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'hubName': hubName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectorListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
