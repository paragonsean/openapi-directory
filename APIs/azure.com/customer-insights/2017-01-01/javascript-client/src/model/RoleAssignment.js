/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssignmentPrincipal from './AssignmentPrincipal';
import ProvisioningState from './ProvisioningState';
import ResourceSetDescription from './ResourceSetDescription';

/**
 * The RoleAssignment model module.
 * @module model/RoleAssignment
 * @version 2017-01-01
 */
class RoleAssignment {
    /**
     * Constructs a new <code>RoleAssignment</code>.
     * The Role Assignment definition.
     * @alias module:model/RoleAssignment
     * @param principals {Array.<module:model/AssignmentPrincipal>} The principals being assigned to.
     * @param role {module:model/RoleAssignment.RoleEnum} Type of roles.
     */
    constructor(principals, role) { 
        
        RoleAssignment.initialize(this, principals, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, principals, role) { 
        obj['principals'] = principals;
        obj['role'] = role;
    }

    /**
     * Constructs a <code>RoleAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoleAssignment} obj Optional instance to populate.
     * @return {module:model/RoleAssignment} The populated <code>RoleAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoleAssignment();

            if (data.hasOwnProperty('assignmentName')) {
                obj['assignmentName'] = ApiClient.convertToType(data['assignmentName'], 'String');
            }
            if (data.hasOwnProperty('conflationPolicies')) {
                obj['conflationPolicies'] = ResourceSetDescription.constructFromObject(data['conflationPolicies']);
            }
            if (data.hasOwnProperty('connectors')) {
                obj['connectors'] = ResourceSetDescription.constructFromObject(data['connectors']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], {'String': 'String'});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], {'String': 'String'});
            }
            if (data.hasOwnProperty('interactions')) {
                obj['interactions'] = ResourceSetDescription.constructFromObject(data['interactions']);
            }
            if (data.hasOwnProperty('kpis')) {
                obj['kpis'] = ResourceSetDescription.constructFromObject(data['kpis']);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ResourceSetDescription.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('principals')) {
                obj['principals'] = ApiClient.convertToType(data['principals'], [AssignmentPrincipal]);
            }
            if (data.hasOwnProperty('profiles')) {
                obj['profiles'] = ResourceSetDescription.constructFromObject(data['profiles']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
            if (data.hasOwnProperty('relationshipLinks')) {
                obj['relationshipLinks'] = ResourceSetDescription.constructFromObject(data['relationshipLinks']);
            }
            if (data.hasOwnProperty('relationships')) {
                obj['relationships'] = ResourceSetDescription.constructFromObject(data['relationships']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('roleAssignments')) {
                obj['roleAssignments'] = ResourceSetDescription.constructFromObject(data['roleAssignments']);
            }
            if (data.hasOwnProperty('sasPolicies')) {
                obj['sasPolicies'] = ResourceSetDescription.constructFromObject(data['sasPolicies']);
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ResourceSetDescription.constructFromObject(data['segments']);
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('views')) {
                obj['views'] = ResourceSetDescription.constructFromObject(data['views']);
            }
            if (data.hasOwnProperty('widgetTypes')) {
                obj['widgetTypes'] = ResourceSetDescription.constructFromObject(data['widgetTypes']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoleAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoleAssignment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RoleAssignment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['assignmentName'] && !(typeof data['assignmentName'] === 'string' || data['assignmentName'] instanceof String)) {
            throw new Error("Expected the field `assignmentName` to be a primitive type in the JSON string but got " + data['assignmentName']);
        }
        // validate the optional field `conflationPolicies`
        if (data['conflationPolicies']) { // data not null
          ResourceSetDescription.validateJSON(data['conflationPolicies']);
        }
        // validate the optional field `connectors`
        if (data['connectors']) { // data not null
          ResourceSetDescription.validateJSON(data['connectors']);
        }
        // validate the optional field `interactions`
        if (data['interactions']) { // data not null
          ResourceSetDescription.validateJSON(data['interactions']);
        }
        // validate the optional field `kpis`
        if (data['kpis']) { // data not null
          ResourceSetDescription.validateJSON(data['kpis']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          ResourceSetDescription.validateJSON(data['links']);
        }
        if (data['principals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['principals'])) {
                throw new Error("Expected the field `principals` to be an array in the JSON data but got " + data['principals']);
            }
            // validate the optional field `principals` (array)
            for (const item of data['principals']) {
                AssignmentPrincipal.validateJSON(item);
            };
        }
        // validate the optional field `profiles`
        if (data['profiles']) { // data not null
          ResourceSetDescription.validateJSON(data['profiles']);
        }
        // validate the optional field `relationshipLinks`
        if (data['relationshipLinks']) { // data not null
          ResourceSetDescription.validateJSON(data['relationshipLinks']);
        }
        // validate the optional field `relationships`
        if (data['relationships']) { // data not null
          ResourceSetDescription.validateJSON(data['relationships']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // validate the optional field `roleAssignments`
        if (data['roleAssignments']) { // data not null
          ResourceSetDescription.validateJSON(data['roleAssignments']);
        }
        // validate the optional field `sasPolicies`
        if (data['sasPolicies']) { // data not null
          ResourceSetDescription.validateJSON(data['sasPolicies']);
        }
        // validate the optional field `segments`
        if (data['segments']) { // data not null
          ResourceSetDescription.validateJSON(data['segments']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // validate the optional field `views`
        if (data['views']) { // data not null
          ResourceSetDescription.validateJSON(data['views']);
        }
        // validate the optional field `widgetTypes`
        if (data['widgetTypes']) { // data not null
          ResourceSetDescription.validateJSON(data['widgetTypes']);
        }

        return true;
    }


}

RoleAssignment.RequiredProperties = ["principals", "role"];

/**
 * The name of the metadata object.
 * @member {String} assignmentName
 */
RoleAssignment.prototype['assignmentName'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} conflationPolicies
 */
RoleAssignment.prototype['conflationPolicies'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} connectors
 */
RoleAssignment.prototype['connectors'] = undefined;

/**
 * Localized description for the metadata.
 * @member {Object.<String, String>} description
 */
RoleAssignment.prototype['description'] = undefined;

/**
 * Localized display names for the metadata.
 * @member {Object.<String, String>} displayName
 */
RoleAssignment.prototype['displayName'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} interactions
 */
RoleAssignment.prototype['interactions'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} kpis
 */
RoleAssignment.prototype['kpis'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} links
 */
RoleAssignment.prototype['links'] = undefined;

/**
 * The principals being assigned to.
 * @member {Array.<module:model/AssignmentPrincipal>} principals
 */
RoleAssignment.prototype['principals'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} profiles
 */
RoleAssignment.prototype['profiles'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
RoleAssignment.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} relationshipLinks
 */
RoleAssignment.prototype['relationshipLinks'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} relationships
 */
RoleAssignment.prototype['relationships'] = undefined;

/**
 * Type of roles.
 * @member {module:model/RoleAssignment.RoleEnum} role
 */
RoleAssignment.prototype['role'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} roleAssignments
 */
RoleAssignment.prototype['roleAssignments'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} sasPolicies
 */
RoleAssignment.prototype['sasPolicies'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} segments
 */
RoleAssignment.prototype['segments'] = undefined;

/**
 * The hub name.
 * @member {String} tenantId
 */
RoleAssignment.prototype['tenantId'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} views
 */
RoleAssignment.prototype['views'] = undefined;

/**
 * @member {module:model/ResourceSetDescription} widgetTypes
 */
RoleAssignment.prototype['widgetTypes'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
RoleAssignment['RoleEnum'] = {

    /**
     * value: "Admin"
     * @const
     */
    "Admin": "Admin",

    /**
     * value: "Reader"
     * @const
     */
    "Reader": "Reader",

    /**
     * value: "ManageAdmin"
     * @const
     */
    "ManageAdmin": "ManageAdmin",

    /**
     * value: "ManageReader"
     * @const
     */
    "ManageReader": "ManageReader",

    /**
     * value: "DataAdmin"
     * @const
     */
    "DataAdmin": "DataAdmin",

    /**
     * value: "DataReader"
     * @const
     */
    "DataReader": "DataReader"
};



export default RoleAssignment;

