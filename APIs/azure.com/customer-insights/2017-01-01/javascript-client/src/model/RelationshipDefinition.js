/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyDefinition from './PropertyDefinition';
import ProvisioningState from './ProvisioningState';
import RelationshipTypeMapping from './RelationshipTypeMapping';

/**
 * The RelationshipDefinition model module.
 * @module model/RelationshipDefinition
 * @version 2017-01-01
 */
class RelationshipDefinition {
    /**
     * Constructs a new <code>RelationshipDefinition</code>.
     * The definition of Relationship.
     * @alias module:model/RelationshipDefinition
     * @param profileType {String} Profile type.
     * @param relatedProfileType {String} Related profile being referenced.
     */
    constructor(profileType, relatedProfileType) { 
        
        RelationshipDefinition.initialize(this, profileType, relatedProfileType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, profileType, relatedProfileType) { 
        obj['profileType'] = profileType;
        obj['relatedProfileType'] = relatedProfileType;
    }

    /**
     * Constructs a <code>RelationshipDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelationshipDefinition} obj Optional instance to populate.
     * @return {module:model/RelationshipDefinition} The populated <code>RelationshipDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationshipDefinition();

            if (data.hasOwnProperty('cardinality')) {
                obj['cardinality'] = ApiClient.convertToType(data['cardinality'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], {'String': 'String'});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], {'String': 'String'});
            }
            if (data.hasOwnProperty('expiryDateTimeUtc')) {
                obj['expiryDateTimeUtc'] = ApiClient.convertToType(data['expiryDateTimeUtc'], 'Date');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [PropertyDefinition]);
            }
            if (data.hasOwnProperty('lookupMappings')) {
                obj['lookupMappings'] = ApiClient.convertToType(data['lookupMappings'], [RelationshipTypeMapping]);
            }
            if (data.hasOwnProperty('profileType')) {
                obj['profileType'] = ApiClient.convertToType(data['profileType'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
            if (data.hasOwnProperty('relatedProfileType')) {
                obj['relatedProfileType'] = ApiClient.convertToType(data['relatedProfileType'], 'String');
            }
            if (data.hasOwnProperty('relationshipGuidId')) {
                obj['relationshipGuidId'] = ApiClient.convertToType(data['relationshipGuidId'], 'String');
            }
            if (data.hasOwnProperty('relationshipName')) {
                obj['relationshipName'] = ApiClient.convertToType(data['relationshipName'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelationshipDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelationshipDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RelationshipDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cardinality'] && !(typeof data['cardinality'] === 'string' || data['cardinality'] instanceof String)) {
            throw new Error("Expected the field `cardinality` to be a primitive type in the JSON string but got " + data['cardinality']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                PropertyDefinition.validateJSON(item);
            };
        }
        if (data['lookupMappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lookupMappings'])) {
                throw new Error("Expected the field `lookupMappings` to be an array in the JSON data but got " + data['lookupMappings']);
            }
            // validate the optional field `lookupMappings` (array)
            for (const item of data['lookupMappings']) {
                RelationshipTypeMapping.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['profileType'] && !(typeof data['profileType'] === 'string' || data['profileType'] instanceof String)) {
            throw new Error("Expected the field `profileType` to be a primitive type in the JSON string but got " + data['profileType']);
        }
        // ensure the json data is a string
        if (data['relatedProfileType'] && !(typeof data['relatedProfileType'] === 'string' || data['relatedProfileType'] instanceof String)) {
            throw new Error("Expected the field `relatedProfileType` to be a primitive type in the JSON string but got " + data['relatedProfileType']);
        }
        // ensure the json data is a string
        if (data['relationshipGuidId'] && !(typeof data['relationshipGuidId'] === 'string' || data['relationshipGuidId'] instanceof String)) {
            throw new Error("Expected the field `relationshipGuidId` to be a primitive type in the JSON string but got " + data['relationshipGuidId']);
        }
        // ensure the json data is a string
        if (data['relationshipName'] && !(typeof data['relationshipName'] === 'string' || data['relationshipName'] instanceof String)) {
            throw new Error("Expected the field `relationshipName` to be a primitive type in the JSON string but got " + data['relationshipName']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}

RelationshipDefinition.RequiredProperties = ["profileType", "relatedProfileType"];

/**
 * The Relationship Cardinality.
 * @member {module:model/RelationshipDefinition.CardinalityEnum} cardinality
 */
RelationshipDefinition.prototype['cardinality'] = undefined;

/**
 * Localized descriptions for the Relationship.
 * @member {Object.<String, String>} description
 */
RelationshipDefinition.prototype['description'] = undefined;

/**
 * Localized display name for the Relationship.
 * @member {Object.<String, String>} displayName
 */
RelationshipDefinition.prototype['displayName'] = undefined;

/**
 * The expiry date time in UTC.
 * @member {Date} expiryDateTimeUtc
 */
RelationshipDefinition.prototype['expiryDateTimeUtc'] = undefined;

/**
 * The properties of the Relationship.
 * @member {Array.<module:model/PropertyDefinition>} fields
 */
RelationshipDefinition.prototype['fields'] = undefined;

/**
 * Optional property to be used to map fields in profile to their strong ids in related profile.
 * @member {Array.<module:model/RelationshipTypeMapping>} lookupMappings
 */
RelationshipDefinition.prototype['lookupMappings'] = undefined;

/**
 * Profile type.
 * @member {String} profileType
 */
RelationshipDefinition.prototype['profileType'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
RelationshipDefinition.prototype['provisioningState'] = undefined;

/**
 * Related profile being referenced.
 * @member {String} relatedProfileType
 */
RelationshipDefinition.prototype['relatedProfileType'] = undefined;

/**
 * The relationship guid id.
 * @member {String} relationshipGuidId
 */
RelationshipDefinition.prototype['relationshipGuidId'] = undefined;

/**
 * The Relationship name.
 * @member {String} relationshipName
 */
RelationshipDefinition.prototype['relationshipName'] = undefined;

/**
 * The hub name.
 * @member {String} tenantId
 */
RelationshipDefinition.prototype['tenantId'] = undefined;





/**
 * Allowed values for the <code>cardinality</code> property.
 * @enum {String}
 * @readonly
 */
RelationshipDefinition['CardinalityEnum'] = {

    /**
     * value: "OneToOne"
     * @const
     */
    "OneToOne": "OneToOne",

    /**
     * value: "OneToMany"
     * @const
     */
    "OneToMany": "OneToMany",

    /**
     * value: "ManyToMany"
     * @const
     */
    "ManyToMany": "ManyToMany"
};



export default RelationshipDefinition;

