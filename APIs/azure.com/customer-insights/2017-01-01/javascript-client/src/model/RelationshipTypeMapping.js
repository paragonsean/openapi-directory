/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RelationshipTypeFieldMapping from './RelationshipTypeFieldMapping';

/**
 * The RelationshipTypeMapping model module.
 * @module model/RelationshipTypeMapping
 * @version 2017-01-01
 */
class RelationshipTypeMapping {
    /**
     * Constructs a new <code>RelationshipTypeMapping</code>.
     * Maps fields in Profile to their corresponding StrongIds in Related Profile.
     * @alias module:model/RelationshipTypeMapping
     * @param fieldMappings {Array.<module:model/RelationshipTypeFieldMapping>} Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
     */
    constructor(fieldMappings) { 
        
        RelationshipTypeMapping.initialize(this, fieldMappings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fieldMappings) { 
        obj['fieldMappings'] = fieldMappings;
    }

    /**
     * Constructs a <code>RelationshipTypeMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelationshipTypeMapping} obj Optional instance to populate.
     * @return {module:model/RelationshipTypeMapping} The populated <code>RelationshipTypeMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelationshipTypeMapping();

            if (data.hasOwnProperty('fieldMappings')) {
                obj['fieldMappings'] = ApiClient.convertToType(data['fieldMappings'], [RelationshipTypeFieldMapping]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelationshipTypeMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelationshipTypeMapping</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RelationshipTypeMapping.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['fieldMappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldMappings'])) {
                throw new Error("Expected the field `fieldMappings` to be an array in the JSON data but got " + data['fieldMappings']);
            }
            // validate the optional field `fieldMappings` (array)
            for (const item of data['fieldMappings']) {
                RelationshipTypeFieldMapping.validateJSON(item);
            };
        }

        return true;
    }


}

RelationshipTypeMapping.RequiredProperties = ["fieldMappings"];

/**
 * Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.
 * @member {Array.<module:model/RelationshipTypeFieldMapping>} fieldMappings
 */
RelationshipTypeMapping.prototype['fieldMappings'] = undefined;






export default RelationshipTypeMapping;

