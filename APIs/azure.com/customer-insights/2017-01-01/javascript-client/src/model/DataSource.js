/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataSource model module.
 * @module model/DataSource
 * @version 2017-01-01
 */
class DataSource {
    /**
     * Constructs a new <code>DataSource</code>.
     * Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple places. In activities we use this to determine precedence rules.
     * @alias module:model/DataSource
     */
    constructor() { 
        
        DataSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSource} obj Optional instance to populate.
     * @return {module:model/DataSource} The populated <code>DataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSource();

            if (data.hasOwnProperty('dataSourceReferenceId')) {
                obj['dataSourceReferenceId'] = ApiClient.convertToType(data['dataSourceReferenceId'], 'String');
            }
            if (data.hasOwnProperty('dataSourceType')) {
                obj['dataSourceType'] = ApiClient.convertToType(data['dataSourceType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSourceReferenceId'] && !(typeof data['dataSourceReferenceId'] === 'string' || data['dataSourceReferenceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceReferenceId` to be a primitive type in the JSON string but got " + data['dataSourceReferenceId']);
        }
        // ensure the json data is a string
        if (data['dataSourceType'] && !(typeof data['dataSourceType'] === 'string' || data['dataSourceType'] instanceof String)) {
            throw new Error("Expected the field `dataSourceType` to be a primitive type in the JSON string but got " + data['dataSourceType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The data source reference id.
 * @member {String} dataSourceReferenceId
 */
DataSource.prototype['dataSourceReferenceId'] = undefined;

/**
 * The data source type.
 * @member {module:model/DataSource.DataSourceTypeEnum} dataSourceType
 */
DataSource.prototype['dataSourceType'] = undefined;

/**
 * The data source ID.
 * @member {Number} id
 */
DataSource.prototype['id'] = undefined;

/**
 * The data source name
 * @member {String} name
 */
DataSource.prototype['name'] = undefined;

/**
 * The data source status.
 * @member {module:model/DataSource.StatusEnum} status
 */
DataSource.prototype['status'] = undefined;





/**
 * Allowed values for the <code>dataSourceType</code> property.
 * @enum {String}
 * @readonly
 */
DataSource['DataSourceTypeEnum'] = {

    /**
     * value: "Connector"
     * @const
     */
    "Connector": "Connector",

    /**
     * value: "LinkInteraction"
     * @const
     */
    "LinkInteraction": "LinkInteraction",

    /**
     * value: "SystemDefault"
     * @const
     */
    "SystemDefault": "SystemDefault"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DataSource['StatusEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted"
};



export default DataSource;

