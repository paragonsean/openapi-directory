/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KpiAlias from './KpiAlias';
import KpiExtract from './KpiExtract';
import KpiGroupByMetadata from './KpiGroupByMetadata';
import KpiParticipantProfilesMetadata from './KpiParticipantProfilesMetadata';
import KpiThresholds from './KpiThresholds';
import ProvisioningState from './ProvisioningState';

/**
 * The KpiDefinition model module.
 * @module model/KpiDefinition
 * @version 2017-01-01
 */
class KpiDefinition {
    /**
     * Constructs a new <code>KpiDefinition</code>.
     * Defines the KPI Threshold limits.
     * @alias module:model/KpiDefinition
     * @param calculationWindow {module:model/KpiDefinition.CalculationWindowEnum} The calculation window.
     * @param entityType {module:model/KpiDefinition.EntityTypeEnum} The mapping entity type.
     * @param entityTypeName {String} The mapping entity name.
     * @param expression {String} The computation expression for the KPI.
     * @param _function {module:model/KpiDefinition.FunctionEnum} The computation function for the KPI.
     */
    constructor(calculationWindow, entityType, entityTypeName, expression, _function) { 
        
        KpiDefinition.initialize(this, calculationWindow, entityType, entityTypeName, expression, _function);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, calculationWindow, entityType, entityTypeName, expression, _function) { 
        obj['calculationWindow'] = calculationWindow;
        obj['entityType'] = entityType;
        obj['entityTypeName'] = entityTypeName;
        obj['expression'] = expression;
        obj['function'] = _function;
    }

    /**
     * Constructs a <code>KpiDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KpiDefinition} obj Optional instance to populate.
     * @return {module:model/KpiDefinition} The populated <code>KpiDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KpiDefinition();

            if (data.hasOwnProperty('aliases')) {
                obj['aliases'] = ApiClient.convertToType(data['aliases'], [KpiAlias]);
            }
            if (data.hasOwnProperty('calculationWindow')) {
                obj['calculationWindow'] = ApiClient.convertToType(data['calculationWindow'], 'String');
            }
            if (data.hasOwnProperty('calculationWindowFieldName')) {
                obj['calculationWindowFieldName'] = ApiClient.convertToType(data['calculationWindowFieldName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], {'String': 'String'});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], {'String': 'String'});
            }
            if (data.hasOwnProperty('entityType')) {
                obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
            }
            if (data.hasOwnProperty('entityTypeName')) {
                obj['entityTypeName'] = ApiClient.convertToType(data['entityTypeName'], 'String');
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('extracts')) {
                obj['extracts'] = ApiClient.convertToType(data['extracts'], [KpiExtract]);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('function')) {
                obj['function'] = ApiClient.convertToType(data['function'], 'String');
            }
            if (data.hasOwnProperty('groupBy')) {
                obj['groupBy'] = ApiClient.convertToType(data['groupBy'], ['String']);
            }
            if (data.hasOwnProperty('groupByMetadata')) {
                obj['groupByMetadata'] = ApiClient.convertToType(data['groupByMetadata'], [KpiGroupByMetadata]);
            }
            if (data.hasOwnProperty('kpiName')) {
                obj['kpiName'] = ApiClient.convertToType(data['kpiName'], 'String');
            }
            if (data.hasOwnProperty('participantProfilesMetadata')) {
                obj['participantProfilesMetadata'] = ApiClient.convertToType(data['participantProfilesMetadata'], [KpiParticipantProfilesMetadata]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ProvisioningState.constructFromObject(data['provisioningState']);
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('thresHolds')) {
                obj['thresHolds'] = KpiThresholds.constructFromObject(data['thresHolds']);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KpiDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KpiDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KpiDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['aliases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['aliases'])) {
                throw new Error("Expected the field `aliases` to be an array in the JSON data but got " + data['aliases']);
            }
            // validate the optional field `aliases` (array)
            for (const item of data['aliases']) {
                KpiAlias.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['calculationWindow'] && !(typeof data['calculationWindow'] === 'string' || data['calculationWindow'] instanceof String)) {
            throw new Error("Expected the field `calculationWindow` to be a primitive type in the JSON string but got " + data['calculationWindow']);
        }
        // ensure the json data is a string
        if (data['calculationWindowFieldName'] && !(typeof data['calculationWindowFieldName'] === 'string' || data['calculationWindowFieldName'] instanceof String)) {
            throw new Error("Expected the field `calculationWindowFieldName` to be a primitive type in the JSON string but got " + data['calculationWindowFieldName']);
        }
        // ensure the json data is a string
        if (data['entityType'] && !(typeof data['entityType'] === 'string' || data['entityType'] instanceof String)) {
            throw new Error("Expected the field `entityType` to be a primitive type in the JSON string but got " + data['entityType']);
        }
        // ensure the json data is a string
        if (data['entityTypeName'] && !(typeof data['entityTypeName'] === 'string' || data['entityTypeName'] instanceof String)) {
            throw new Error("Expected the field `entityTypeName` to be a primitive type in the JSON string but got " + data['entityTypeName']);
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        if (data['extracts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['extracts'])) {
                throw new Error("Expected the field `extracts` to be an array in the JSON data but got " + data['extracts']);
            }
            // validate the optional field `extracts` (array)
            for (const item of data['extracts']) {
                KpiExtract.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['function'] && !(typeof data['function'] === 'string' || data['function'] instanceof String)) {
            throw new Error("Expected the field `function` to be a primitive type in the JSON string but got " + data['function']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groupBy'])) {
            throw new Error("Expected the field `groupBy` to be an array in the JSON data but got " + data['groupBy']);
        }
        if (data['groupByMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupByMetadata'])) {
                throw new Error("Expected the field `groupByMetadata` to be an array in the JSON data but got " + data['groupByMetadata']);
            }
            // validate the optional field `groupByMetadata` (array)
            for (const item of data['groupByMetadata']) {
                KpiGroupByMetadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kpiName'] && !(typeof data['kpiName'] === 'string' || data['kpiName'] instanceof String)) {
            throw new Error("Expected the field `kpiName` to be a primitive type in the JSON string but got " + data['kpiName']);
        }
        if (data['participantProfilesMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['participantProfilesMetadata'])) {
                throw new Error("Expected the field `participantProfilesMetadata` to be an array in the JSON data but got " + data['participantProfilesMetadata']);
            }
            // validate the optional field `participantProfilesMetadata` (array)
            for (const item of data['participantProfilesMetadata']) {
                KpiParticipantProfilesMetadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // validate the optional field `thresHolds`
        if (data['thresHolds']) { // data not null
          KpiThresholds.validateJSON(data['thresHolds']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

KpiDefinition.RequiredProperties = ["calculationWindow", "entityType", "entityTypeName", "expression", "function"];

/**
 * The aliases.
 * @member {Array.<module:model/KpiAlias>} aliases
 */
KpiDefinition.prototype['aliases'] = undefined;

/**
 * The calculation window.
 * @member {module:model/KpiDefinition.CalculationWindowEnum} calculationWindow
 */
KpiDefinition.prototype['calculationWindow'] = undefined;

/**
 * Name of calculation window field.
 * @member {String} calculationWindowFieldName
 */
KpiDefinition.prototype['calculationWindowFieldName'] = undefined;

/**
 * Localized description for the KPI.
 * @member {Object.<String, String>} description
 */
KpiDefinition.prototype['description'] = undefined;

/**
 * Localized display name for the KPI.
 * @member {Object.<String, String>} displayName
 */
KpiDefinition.prototype['displayName'] = undefined;

/**
 * The mapping entity type.
 * @member {module:model/KpiDefinition.EntityTypeEnum} entityType
 */
KpiDefinition.prototype['entityType'] = undefined;

/**
 * The mapping entity name.
 * @member {String} entityTypeName
 */
KpiDefinition.prototype['entityTypeName'] = undefined;

/**
 * The computation expression for the KPI.
 * @member {String} expression
 */
KpiDefinition.prototype['expression'] = undefined;

/**
 * The KPI extracts.
 * @member {Array.<module:model/KpiExtract>} extracts
 */
KpiDefinition.prototype['extracts'] = undefined;

/**
 * The filter expression for the KPI.
 * @member {String} filter
 */
KpiDefinition.prototype['filter'] = undefined;

/**
 * The computation function for the KPI.
 * @member {module:model/KpiDefinition.FunctionEnum} function
 */
KpiDefinition.prototype['function'] = undefined;

/**
 * the group by properties for the KPI.
 * @member {Array.<String>} groupBy
 */
KpiDefinition.prototype['groupBy'] = undefined;

/**
 * The KPI GroupByMetadata.
 * @member {Array.<module:model/KpiGroupByMetadata>} groupByMetadata
 */
KpiDefinition.prototype['groupByMetadata'] = undefined;

/**
 * The KPI name.
 * @member {String} kpiName
 */
KpiDefinition.prototype['kpiName'] = undefined;

/**
 * The participant profiles.
 * @member {Array.<module:model/KpiParticipantProfilesMetadata>} participantProfilesMetadata
 */
KpiDefinition.prototype['participantProfilesMetadata'] = undefined;

/**
 * @member {module:model/ProvisioningState} provisioningState
 */
KpiDefinition.prototype['provisioningState'] = undefined;

/**
 * The hub name.
 * @member {String} tenantId
 */
KpiDefinition.prototype['tenantId'] = undefined;

/**
 * @member {module:model/KpiThresholds} thresHolds
 */
KpiDefinition.prototype['thresHolds'] = undefined;

/**
 * The unit of measurement for the KPI.
 * @member {String} unit
 */
KpiDefinition.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>calculationWindow</code> property.
 * @enum {String}
 * @readonly
 */
KpiDefinition['CalculationWindowEnum'] = {

    /**
     * value: "Lifetime"
     * @const
     */
    "Lifetime": "Lifetime",

    /**
     * value: "Hour"
     * @const
     */
    "Hour": "Hour",

    /**
     * value: "Day"
     * @const
     */
    "Day": "Day",

    /**
     * value: "Week"
     * @const
     */
    "Week": "Week",

    /**
     * value: "Month"
     * @const
     */
    "Month": "Month"
};


/**
 * Allowed values for the <code>entityType</code> property.
 * @enum {String}
 * @readonly
 */
KpiDefinition['EntityTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Profile"
     * @const
     */
    "Profile": "Profile",

    /**
     * value: "Interaction"
     * @const
     */
    "Interaction": "Interaction",

    /**
     * value: "Relationship"
     * @const
     */
    "Relationship": "Relationship"
};


/**
 * Allowed values for the <code>function</code> property.
 * @enum {String}
 * @readonly
 */
KpiDefinition['FunctionEnum'] = {

    /**
     * value: "Sum"
     * @const
     */
    "Sum": "Sum",

    /**
     * value: "Avg"
     * @const
     */
    "Avg": "Avg",

    /**
     * value: "Min"
     * @const
     */
    "Min": "Min",

    /**
     * value: "Max"
     * @const
     */
    "Max": "Max",

    /**
     * value: "Last"
     * @const
     */
    "Last": "Last",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "CountDistinct"
     * @const
     */
    "CountDistinct": "CountDistinct"
};



export default KpiDefinition;

