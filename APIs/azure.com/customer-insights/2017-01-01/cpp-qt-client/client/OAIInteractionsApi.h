/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInteractionsApi_H
#define OAI_OAIInteractionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInteractionListResult.h"
#include "OAIInteractionResourceFormat.h"
#include "OAISuggestRelationshipLinksResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInteractionsApi : public QObject {
    Q_OBJECT

public:
    OAIInteractionsApi(const int timeOut = 0);
    ~OAIInteractionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  interaction_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIInteractionResourceFormat [required]
    */
    virtual void interactionsCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &interaction_name, const QString &api_version, const QString &subscription_id, const OAIInteractionResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  interaction_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  locale_code QString [optional]
    */
    virtual void interactionsGet(const QString &resource_group_name, const QString &hub_name, const QString &interaction_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &locale_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  locale_code QString [optional]
    */
    virtual void interactionsListByHub(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &locale_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  interaction_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void interactionsSuggestRelationshipLinks(const QString &resource_group_name, const QString &hub_name, const QString &interaction_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void interactionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void interactionsGetCallback(OAIHttpRequestWorker *worker);
    void interactionsListByHubCallback(OAIHttpRequestWorker *worker);
    void interactionsSuggestRelationshipLinksCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void interactionsCreateOrUpdateSignal(OAIInteractionResourceFormat summary);
    void interactionsGetSignal(OAIInteractionResourceFormat summary);
    void interactionsListByHubSignal(OAIInteractionListResult summary);
    void interactionsSuggestRelationshipLinksSignal(OAISuggestRelationshipLinksResponse summary);


    void interactionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIInteractionResourceFormat summary);
    void interactionsGetSignalFull(OAIHttpRequestWorker *worker, OAIInteractionResourceFormat summary);
    void interactionsListByHubSignalFull(OAIHttpRequestWorker *worker, OAIInteractionListResult summary);
    void interactionsSuggestRelationshipLinksSignalFull(OAIHttpRequestWorker *worker, OAISuggestRelationshipLinksResponse summary);

    Q_DECL_DEPRECATED_X("Use interactionsCreateOrUpdateSignalError() instead")
    void interactionsCreateOrUpdateSignalE(OAIInteractionResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void interactionsCreateOrUpdateSignalError(OAIInteractionResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use interactionsGetSignalError() instead")
    void interactionsGetSignalE(OAIInteractionResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void interactionsGetSignalError(OAIInteractionResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use interactionsListByHubSignalError() instead")
    void interactionsListByHubSignalE(OAIInteractionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void interactionsListByHubSignalError(OAIInteractionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use interactionsSuggestRelationshipLinksSignalError() instead")
    void interactionsSuggestRelationshipLinksSignalE(OAISuggestRelationshipLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void interactionsSuggestRelationshipLinksSignalError(OAISuggestRelationshipLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use interactionsCreateOrUpdateSignalErrorFull() instead")
    void interactionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void interactionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use interactionsGetSignalErrorFull() instead")
    void interactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void interactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use interactionsListByHubSignalErrorFull() instead")
    void interactionsListByHubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void interactionsListByHubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use interactionsSuggestRelationshipLinksSignalErrorFull() instead")
    void interactionsSuggestRelationshipLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void interactionsSuggestRelationshipLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
