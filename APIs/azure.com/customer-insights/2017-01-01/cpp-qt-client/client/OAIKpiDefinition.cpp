/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKpiDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKpiDefinition::OAIKpiDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKpiDefinition::OAIKpiDefinition() {
    this->initializeModel();
}

OAIKpiDefinition::~OAIKpiDefinition() {}

void OAIKpiDefinition::initializeModel() {

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_calculation_window_isSet = false;
    m_calculation_window_isValid = false;

    m_calculation_window_field_name_isSet = false;
    m_calculation_window_field_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_entity_type_name_isSet = false;
    m_entity_type_name_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_extracts_isSet = false;
    m_extracts_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_group_by_metadata_isSet = false;
    m_group_by_metadata_isValid = false;

    m_kpi_name_isSet = false;
    m_kpi_name_isValid = false;

    m_participant_profiles_metadata_isSet = false;
    m_participant_profiles_metadata_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_thres_holds_isSet = false;
    m_thres_holds_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIKpiDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKpiDefinition::fromJsonObject(QJsonObject json) {

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("aliases")]);
    m_aliases_isSet = !json[QString("aliases")].isNull() && m_aliases_isValid;

    m_calculation_window_isValid = ::OpenAPI::fromJsonValue(m_calculation_window, json[QString("calculationWindow")]);
    m_calculation_window_isSet = !json[QString("calculationWindow")].isNull() && m_calculation_window_isValid;

    m_calculation_window_field_name_isValid = ::OpenAPI::fromJsonValue(m_calculation_window_field_name, json[QString("calculationWindowFieldName")]);
    m_calculation_window_field_name_isSet = !json[QString("calculationWindowFieldName")].isNull() && m_calculation_window_field_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_entity_type_name_isValid = ::OpenAPI::fromJsonValue(m_entity_type_name, json[QString("entityTypeName")]);
    m_entity_type_name_isSet = !json[QString("entityTypeName")].isNull() && m_entity_type_name_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_extracts_isValid = ::OpenAPI::fromJsonValue(m_extracts, json[QString("extracts")]);
    m_extracts_isSet = !json[QString("extracts")].isNull() && m_extracts_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("function")]);
    m_function_isSet = !json[QString("function")].isNull() && m_function_isValid;

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("groupBy")]);
    m_group_by_isSet = !json[QString("groupBy")].isNull() && m_group_by_isValid;

    m_group_by_metadata_isValid = ::OpenAPI::fromJsonValue(m_group_by_metadata, json[QString("groupByMetadata")]);
    m_group_by_metadata_isSet = !json[QString("groupByMetadata")].isNull() && m_group_by_metadata_isValid;

    m_kpi_name_isValid = ::OpenAPI::fromJsonValue(m_kpi_name, json[QString("kpiName")]);
    m_kpi_name_isSet = !json[QString("kpiName")].isNull() && m_kpi_name_isValid;

    m_participant_profiles_metadata_isValid = ::OpenAPI::fromJsonValue(m_participant_profiles_metadata, json[QString("participantProfilesMetadata")]);
    m_participant_profiles_metadata_isSet = !json[QString("participantProfilesMetadata")].isNull() && m_participant_profiles_metadata_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_thres_holds_isValid = ::OpenAPI::fromJsonValue(m_thres_holds, json[QString("thresHolds")]);
    m_thres_holds_isSet = !json[QString("thresHolds")].isNull() && m_thres_holds_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIKpiDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKpiDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_aliases.size() > 0) {
        obj.insert(QString("aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_calculation_window_isSet) {
        obj.insert(QString("calculationWindow"), ::OpenAPI::toJsonValue(m_calculation_window));
    }
    if (m_calculation_window_field_name_isSet) {
        obj.insert(QString("calculationWindowFieldName"), ::OpenAPI::toJsonValue(m_calculation_window_field_name));
    }
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_entity_type_name_isSet) {
        obj.insert(QString("entityTypeName"), ::OpenAPI::toJsonValue(m_entity_type_name));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_extracts.size() > 0) {
        obj.insert(QString("extracts"), ::OpenAPI::toJsonValue(m_extracts));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_function_isSet) {
        obj.insert(QString("function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_group_by.size() > 0) {
        obj.insert(QString("groupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_group_by_metadata.size() > 0) {
        obj.insert(QString("groupByMetadata"), ::OpenAPI::toJsonValue(m_group_by_metadata));
    }
    if (m_kpi_name_isSet) {
        obj.insert(QString("kpiName"), ::OpenAPI::toJsonValue(m_kpi_name));
    }
    if (m_participant_profiles_metadata.size() > 0) {
        obj.insert(QString("participantProfilesMetadata"), ::OpenAPI::toJsonValue(m_participant_profiles_metadata));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_thres_holds.isSet()) {
        obj.insert(QString("thresHolds"), ::OpenAPI::toJsonValue(m_thres_holds));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QList<OAIKpiAlias> OAIKpiDefinition::getAliases() const {
    return m_aliases;
}
void OAIKpiDefinition::setAliases(const QList<OAIKpiAlias> &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAIKpiDefinition::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAIKpiDefinition::is_aliases_Valid() const{
    return m_aliases_isValid;
}

QString OAIKpiDefinition::getCalculationWindow() const {
    return m_calculation_window;
}
void OAIKpiDefinition::setCalculationWindow(const QString &calculation_window) {
    m_calculation_window = calculation_window;
    m_calculation_window_isSet = true;
}

bool OAIKpiDefinition::is_calculation_window_Set() const{
    return m_calculation_window_isSet;
}

bool OAIKpiDefinition::is_calculation_window_Valid() const{
    return m_calculation_window_isValid;
}

QString OAIKpiDefinition::getCalculationWindowFieldName() const {
    return m_calculation_window_field_name;
}
void OAIKpiDefinition::setCalculationWindowFieldName(const QString &calculation_window_field_name) {
    m_calculation_window_field_name = calculation_window_field_name;
    m_calculation_window_field_name_isSet = true;
}

bool OAIKpiDefinition::is_calculation_window_field_name_Set() const{
    return m_calculation_window_field_name_isSet;
}

bool OAIKpiDefinition::is_calculation_window_field_name_Valid() const{
    return m_calculation_window_field_name_isValid;
}

QMap<QString, QString> OAIKpiDefinition::getDescription() const {
    return m_description;
}
void OAIKpiDefinition::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIKpiDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIKpiDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIKpiDefinition::getDisplayName() const {
    return m_display_name;
}
void OAIKpiDefinition::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIKpiDefinition::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIKpiDefinition::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIKpiDefinition::getEntityType() const {
    return m_entity_type;
}
void OAIKpiDefinition::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIKpiDefinition::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIKpiDefinition::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIKpiDefinition::getEntityTypeName() const {
    return m_entity_type_name;
}
void OAIKpiDefinition::setEntityTypeName(const QString &entity_type_name) {
    m_entity_type_name = entity_type_name;
    m_entity_type_name_isSet = true;
}

bool OAIKpiDefinition::is_entity_type_name_Set() const{
    return m_entity_type_name_isSet;
}

bool OAIKpiDefinition::is_entity_type_name_Valid() const{
    return m_entity_type_name_isValid;
}

QString OAIKpiDefinition::getExpression() const {
    return m_expression;
}
void OAIKpiDefinition::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIKpiDefinition::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIKpiDefinition::is_expression_Valid() const{
    return m_expression_isValid;
}

QList<OAIKpiExtract> OAIKpiDefinition::getExtracts() const {
    return m_extracts;
}
void OAIKpiDefinition::setExtracts(const QList<OAIKpiExtract> &extracts) {
    m_extracts = extracts;
    m_extracts_isSet = true;
}

bool OAIKpiDefinition::is_extracts_Set() const{
    return m_extracts_isSet;
}

bool OAIKpiDefinition::is_extracts_Valid() const{
    return m_extracts_isValid;
}

QString OAIKpiDefinition::getFilter() const {
    return m_filter;
}
void OAIKpiDefinition::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIKpiDefinition::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIKpiDefinition::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIKpiDefinition::getFunction() const {
    return m_function;
}
void OAIKpiDefinition::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIKpiDefinition::is_function_Set() const{
    return m_function_isSet;
}

bool OAIKpiDefinition::is_function_Valid() const{
    return m_function_isValid;
}

QList<QString> OAIKpiDefinition::getGroupBy() const {
    return m_group_by;
}
void OAIKpiDefinition::setGroupBy(const QList<QString> &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAIKpiDefinition::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAIKpiDefinition::is_group_by_Valid() const{
    return m_group_by_isValid;
}

QList<OAIKpiGroupByMetadata> OAIKpiDefinition::getGroupByMetadata() const {
    return m_group_by_metadata;
}
void OAIKpiDefinition::setGroupByMetadata(const QList<OAIKpiGroupByMetadata> &group_by_metadata) {
    m_group_by_metadata = group_by_metadata;
    m_group_by_metadata_isSet = true;
}

bool OAIKpiDefinition::is_group_by_metadata_Set() const{
    return m_group_by_metadata_isSet;
}

bool OAIKpiDefinition::is_group_by_metadata_Valid() const{
    return m_group_by_metadata_isValid;
}

QString OAIKpiDefinition::getKpiName() const {
    return m_kpi_name;
}
void OAIKpiDefinition::setKpiName(const QString &kpi_name) {
    m_kpi_name = kpi_name;
    m_kpi_name_isSet = true;
}

bool OAIKpiDefinition::is_kpi_name_Set() const{
    return m_kpi_name_isSet;
}

bool OAIKpiDefinition::is_kpi_name_Valid() const{
    return m_kpi_name_isValid;
}

QList<OAIKpiParticipantProfilesMetadata> OAIKpiDefinition::getParticipantProfilesMetadata() const {
    return m_participant_profiles_metadata;
}
void OAIKpiDefinition::setParticipantProfilesMetadata(const QList<OAIKpiParticipantProfilesMetadata> &participant_profiles_metadata) {
    m_participant_profiles_metadata = participant_profiles_metadata;
    m_participant_profiles_metadata_isSet = true;
}

bool OAIKpiDefinition::is_participant_profiles_metadata_Set() const{
    return m_participant_profiles_metadata_isSet;
}

bool OAIKpiDefinition::is_participant_profiles_metadata_Valid() const{
    return m_participant_profiles_metadata_isValid;
}

OAIProvisioningState OAIKpiDefinition::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIKpiDefinition::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIKpiDefinition::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIKpiDefinition::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIKpiDefinition::getTenantId() const {
    return m_tenant_id;
}
void OAIKpiDefinition::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIKpiDefinition::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIKpiDefinition::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

OAIKpiThresholds OAIKpiDefinition::getThresHolds() const {
    return m_thres_holds;
}
void OAIKpiDefinition::setThresHolds(const OAIKpiThresholds &thres_holds) {
    m_thres_holds = thres_holds;
    m_thres_holds_isSet = true;
}

bool OAIKpiDefinition::is_thres_holds_Set() const{
    return m_thres_holds_isSet;
}

bool OAIKpiDefinition::is_thres_holds_Valid() const{
    return m_thres_holds_isValid;
}

QString OAIKpiDefinition::getUnit() const {
    return m_unit;
}
void OAIKpiDefinition::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIKpiDefinition::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIKpiDefinition::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIKpiDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculation_window_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extracts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kpi_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_profiles_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thres_holds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKpiDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_calculation_window_isValid && m_entity_type_isValid && m_entity_type_name_isValid && m_expression_isValid && m_function_isValid && true;
}

} // namespace OpenAPI
