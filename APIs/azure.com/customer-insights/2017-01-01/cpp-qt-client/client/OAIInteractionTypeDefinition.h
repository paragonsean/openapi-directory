/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInteractionTypeDefinition.h
 *
 * The Interaction Type Definition
 */

#ifndef OAIInteractionTypeDefinition_H
#define OAIInteractionTypeDefinition_H

#include <QJsonObject>

#include "OAIDataSource.h"
#include "OAIDataSourcePrecedence.h"
#include "OAIParticipant.h"
#include "OAIPropertyDefinition.h"
#include "OAIProvisioningState.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataSourcePrecedence;
class OAIDataSource;
class OAIParticipant;
class OAIPropertyDefinition;

class OAIInteractionTypeDefinition : public OAIObject {
public:
    OAIInteractionTypeDefinition();
    OAIInteractionTypeDefinition(QString json);
    ~OAIInteractionTypeDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDataSourcePrecedence> getDataSourcePrecedenceRules() const;
    void setDataSourcePrecedenceRules(const QList<OAIDataSourcePrecedence> &data_source_precedence_rules);
    bool is_data_source_precedence_rules_Set() const;
    bool is_data_source_precedence_rules_Valid() const;

    OAIDataSource getDefaultDataSource() const;
    void setDefaultDataSource(const OAIDataSource &default_data_source);
    bool is_default_data_source_Set() const;
    bool is_default_data_source_Valid() const;

    QList<QString> getIdPropertyNames() const;
    void setIdPropertyNames(const QList<QString> &id_property_names);
    bool is_id_property_names_Set() const;
    bool is_id_property_names_Valid() const;

    bool isIsActivity() const;
    void setIsActivity(const bool &is_activity);
    bool is_is_activity_Set() const;
    bool is_is_activity_Valid() const;

    QList<OAIParticipant> getParticipantProfiles() const;
    void setParticipantProfiles(const QList<OAIParticipant> &participant_profiles);
    bool is_participant_profiles_Set() const;
    bool is_participant_profiles_Valid() const;

    QString getPrimaryParticipantProfilePropertyName() const;
    void setPrimaryParticipantProfilePropertyName(const QString &primary_participant_profile_property_name);
    bool is_primary_participant_profile_property_name_Set() const;
    bool is_primary_participant_profile_property_name_Valid() const;

    QString getApiEntitySetName() const;
    void setApiEntitySetName(const QString &api_entity_set_name);
    bool is_api_entity_set_name_Set() const;
    bool is_api_entity_set_name_Valid() const;

    QString getEntityType() const;
    void setEntityType(const QString &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QList<OAIPropertyDefinition> getFields() const;
    void setFields(const QList<OAIPropertyDefinition> &fields);
    bool is_fields_Set() const;
    bool is_fields_Valid() const;

    qint32 getInstancesCount() const;
    void setInstancesCount(const qint32 &instances_count);
    bool is_instances_count_Set() const;
    bool is_instances_count_Valid() const;

    QDateTime getLastChangedUtc() const;
    void setLastChangedUtc(const QDateTime &last_changed_utc);
    bool is_last_changed_utc_Set() const;
    bool is_last_changed_utc_Valid() const;

    OAIProvisioningState getProvisioningState() const;
    void setProvisioningState(const OAIProvisioningState &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getSchemaItemTypeLink() const;
    void setSchemaItemTypeLink(const QString &schema_item_type_link);
    bool is_schema_item_type_link_Set() const;
    bool is_schema_item_type_link_Valid() const;

    QString getTenantId() const;
    void setTenantId(const QString &tenant_id);
    bool is_tenant_id_Set() const;
    bool is_tenant_id_Valid() const;

    QString getTimestampFieldName() const;
    void setTimestampFieldName(const QString &timestamp_field_name);
    bool is_timestamp_field_name_Set() const;
    bool is_timestamp_field_name_Valid() const;

    QString getTypeName() const;
    void setTypeName(const QString &type_name);
    bool is_type_name_Set() const;
    bool is_type_name_Valid() const;

    QMap<QString, QList<QString>> getAttributes() const;
    void setAttributes(const QMap<QString, QList<QString>> &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QMap<QString, QString> getDescription() const;
    void setDescription(const QMap<QString, QString> &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap<QString, QString> getDisplayName() const;
    void setDisplayName(const QMap<QString, QString> &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getLargeImage() const;
    void setLargeImage(const QString &large_image);
    bool is_large_image_Set() const;
    bool is_large_image_Valid() const;

    QMap<QString, QMap<QString, QString>> getLocalizedAttributes() const;
    void setLocalizedAttributes(const QMap<QString, QMap<QString, QString>> &localized_attributes);
    bool is_localized_attributes_Set() const;
    bool is_localized_attributes_Valid() const;

    QString getMediumImage() const;
    void setMediumImage(const QString &medium_image);
    bool is_medium_image_Set() const;
    bool is_medium_image_Valid() const;

    QString getSmallImage() const;
    void setSmallImage(const QString &small_image);
    bool is_small_image_Set() const;
    bool is_small_image_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDataSourcePrecedence> m_data_source_precedence_rules;
    bool m_data_source_precedence_rules_isSet;
    bool m_data_source_precedence_rules_isValid;

    OAIDataSource m_default_data_source;
    bool m_default_data_source_isSet;
    bool m_default_data_source_isValid;

    QList<QString> m_id_property_names;
    bool m_id_property_names_isSet;
    bool m_id_property_names_isValid;

    bool m_is_activity;
    bool m_is_activity_isSet;
    bool m_is_activity_isValid;

    QList<OAIParticipant> m_participant_profiles;
    bool m_participant_profiles_isSet;
    bool m_participant_profiles_isValid;

    QString m_primary_participant_profile_property_name;
    bool m_primary_participant_profile_property_name_isSet;
    bool m_primary_participant_profile_property_name_isValid;

    QString m_api_entity_set_name;
    bool m_api_entity_set_name_isSet;
    bool m_api_entity_set_name_isValid;

    QString m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QList<OAIPropertyDefinition> m_fields;
    bool m_fields_isSet;
    bool m_fields_isValid;

    qint32 m_instances_count;
    bool m_instances_count_isSet;
    bool m_instances_count_isValid;

    QDateTime m_last_changed_utc;
    bool m_last_changed_utc_isSet;
    bool m_last_changed_utc_isValid;

    OAIProvisioningState m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_schema_item_type_link;
    bool m_schema_item_type_link_isSet;
    bool m_schema_item_type_link_isValid;

    QString m_tenant_id;
    bool m_tenant_id_isSet;
    bool m_tenant_id_isValid;

    QString m_timestamp_field_name;
    bool m_timestamp_field_name_isSet;
    bool m_timestamp_field_name_isValid;

    QString m_type_name;
    bool m_type_name_isSet;
    bool m_type_name_isValid;

    QMap<QString, QList<QString>> m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QMap<QString, QString> m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap<QString, QString> m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_large_image;
    bool m_large_image_isSet;
    bool m_large_image_isValid;

    QMap<QString, QMap<QString, QString>> m_localized_attributes;
    bool m_localized_attributes_isSet;
    bool m_localized_attributes_isValid;

    QString m_medium_image;
    bool m_medium_image_isSet;
    bool m_medium_image_isValid;

    QString m_small_image;
    bool m_small_image_isSet;
    bool m_small_image_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInteractionTypeDefinition)

#endif // OAIInteractionTypeDefinition_H
