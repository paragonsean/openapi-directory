/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorMappingStructure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorMappingStructure::OAIConnectorMappingStructure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorMappingStructure::OAIConnectorMappingStructure() {
    this->initializeModel();
}

OAIConnectorMappingStructure::~OAIConnectorMappingStructure() {}

void OAIConnectorMappingStructure::initializeModel() {

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_custom_format_specifier_isSet = false;
    m_custom_format_specifier_isValid = false;

    m_is_encrypted_isSet = false;
    m_is_encrypted_isValid = false;

    m_property_name_isSet = false;
    m_property_name_isValid = false;
}

void OAIConnectorMappingStructure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorMappingStructure::fromJsonObject(QJsonObject json) {

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("columnName")]);
    m_column_name_isSet = !json[QString("columnName")].isNull() && m_column_name_isValid;

    m_custom_format_specifier_isValid = ::OpenAPI::fromJsonValue(m_custom_format_specifier, json[QString("customFormatSpecifier")]);
    m_custom_format_specifier_isSet = !json[QString("customFormatSpecifier")].isNull() && m_custom_format_specifier_isValid;

    m_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_encrypted, json[QString("isEncrypted")]);
    m_is_encrypted_isSet = !json[QString("isEncrypted")].isNull() && m_is_encrypted_isValid;

    m_property_name_isValid = ::OpenAPI::fromJsonValue(m_property_name, json[QString("propertyName")]);
    m_property_name_isSet = !json[QString("propertyName")].isNull() && m_property_name_isValid;
}

QString OAIConnectorMappingStructure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorMappingStructure::asJsonObject() const {
    QJsonObject obj;
    if (m_column_name_isSet) {
        obj.insert(QString("columnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_custom_format_specifier_isSet) {
        obj.insert(QString("customFormatSpecifier"), ::OpenAPI::toJsonValue(m_custom_format_specifier));
    }
    if (m_is_encrypted_isSet) {
        obj.insert(QString("isEncrypted"), ::OpenAPI::toJsonValue(m_is_encrypted));
    }
    if (m_property_name_isSet) {
        obj.insert(QString("propertyName"), ::OpenAPI::toJsonValue(m_property_name));
    }
    return obj;
}

QString OAIConnectorMappingStructure::getColumnName() const {
    return m_column_name;
}
void OAIConnectorMappingStructure::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIConnectorMappingStructure::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIConnectorMappingStructure::is_column_name_Valid() const{
    return m_column_name_isValid;
}

QString OAIConnectorMappingStructure::getCustomFormatSpecifier() const {
    return m_custom_format_specifier;
}
void OAIConnectorMappingStructure::setCustomFormatSpecifier(const QString &custom_format_specifier) {
    m_custom_format_specifier = custom_format_specifier;
    m_custom_format_specifier_isSet = true;
}

bool OAIConnectorMappingStructure::is_custom_format_specifier_Set() const{
    return m_custom_format_specifier_isSet;
}

bool OAIConnectorMappingStructure::is_custom_format_specifier_Valid() const{
    return m_custom_format_specifier_isValid;
}

bool OAIConnectorMappingStructure::isIsEncrypted() const {
    return m_is_encrypted;
}
void OAIConnectorMappingStructure::setIsEncrypted(const bool &is_encrypted) {
    m_is_encrypted = is_encrypted;
    m_is_encrypted_isSet = true;
}

bool OAIConnectorMappingStructure::is_is_encrypted_Set() const{
    return m_is_encrypted_isSet;
}

bool OAIConnectorMappingStructure::is_is_encrypted_Valid() const{
    return m_is_encrypted_isValid;
}

QString OAIConnectorMappingStructure::getPropertyName() const {
    return m_property_name;
}
void OAIConnectorMappingStructure::setPropertyName(const QString &property_name) {
    m_property_name = property_name;
    m_property_name_isSet = true;
}

bool OAIConnectorMappingStructure::is_property_name_Set() const{
    return m_property_name_isSet;
}

bool OAIConnectorMappingStructure::is_property_name_Valid() const{
    return m_property_name_isValid;
}

bool OAIConnectorMappingStructure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_format_specifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorMappingStructure::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_property_name_isValid && true;
}

} // namespace OpenAPI
