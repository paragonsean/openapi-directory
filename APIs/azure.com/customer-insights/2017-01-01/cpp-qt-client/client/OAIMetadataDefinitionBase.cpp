/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataDefinitionBase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataDefinitionBase::OAIMetadataDefinitionBase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataDefinitionBase::OAIMetadataDefinitionBase() {
    this->initializeModel();
}

OAIMetadataDefinitionBase::~OAIMetadataDefinitionBase() {}

void OAIMetadataDefinitionBase::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_large_image_isSet = false;
    m_large_image_isValid = false;

    m_localized_attributes_isSet = false;
    m_localized_attributes_isValid = false;

    m_medium_image_isSet = false;
    m_medium_image_isValid = false;

    m_small_image_isSet = false;
    m_small_image_isValid = false;
}

void OAIMetadataDefinitionBase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadataDefinitionBase::fromJsonObject(QJsonObject json) {

    if(json["attributes"].isObject()){
        auto varmap = json["attributes"].toObject().toVariantMap();
        m_attributes_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_attributes_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_attributes_isSet &= !jval.isNull() && m_attributes_isValid;
                m_attributes.insert(m_attributes.end(), val, item);
            }
        }
    }

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_large_image_isValid = ::OpenAPI::fromJsonValue(m_large_image, json[QString("largeImage")]);
    m_large_image_isSet = !json[QString("largeImage")].isNull() && m_large_image_isValid;

    if(json["localizedAttributes"].isObject()){
        auto varmap = json["localizedAttributes"].toObject().toVariantMap();
        m_localized_attributes_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_localized_attributes_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_localized_attributes_isSet &= !jval.isNull() && m_localized_attributes_isValid;
                m_localized_attributes.insert(m_localized_attributes.end(), val, item);
            }
        }
    }

    m_medium_image_isValid = ::OpenAPI::fromJsonValue(m_medium_image, json[QString("mediumImage")]);
    m_medium_image_isSet = !json[QString("mediumImage")].isNull() && m_medium_image_isValid;

    m_small_image_isValid = ::OpenAPI::fromJsonValue(m_small_image, json[QString("smallImage")]);
    m_small_image_isSet = !json[QString("smallImage")].isNull() && m_small_image_isValid;
}

QString OAIMetadataDefinitionBase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadataDefinitionBase::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        
        obj.insert(QString("attributes"), toJsonValue(m_attributes));
    }
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_large_image_isSet) {
        obj.insert(QString("largeImage"), ::OpenAPI::toJsonValue(m_large_image));
    }
    if (m_localized_attributes.size() > 0) {
        
        obj.insert(QString("localizedAttributes"), toJsonValue(m_localized_attributes));
    }
    if (m_medium_image_isSet) {
        obj.insert(QString("mediumImage"), ::OpenAPI::toJsonValue(m_medium_image));
    }
    if (m_small_image_isSet) {
        obj.insert(QString("smallImage"), ::OpenAPI::toJsonValue(m_small_image));
    }
    return obj;
}

QMap<QString, QList<QString>> OAIMetadataDefinitionBase::getAttributes() const {
    return m_attributes;
}
void OAIMetadataDefinitionBase::setAttributes(const QMap<QString, QList<QString>> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIMetadataDefinitionBase::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIMetadataDefinitionBase::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QMap<QString, QString> OAIMetadataDefinitionBase::getDescription() const {
    return m_description;
}
void OAIMetadataDefinitionBase::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMetadataDefinitionBase::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMetadataDefinitionBase::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIMetadataDefinitionBase::getDisplayName() const {
    return m_display_name;
}
void OAIMetadataDefinitionBase::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMetadataDefinitionBase::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMetadataDefinitionBase::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIMetadataDefinitionBase::getLargeImage() const {
    return m_large_image;
}
void OAIMetadataDefinitionBase::setLargeImage(const QString &large_image) {
    m_large_image = large_image;
    m_large_image_isSet = true;
}

bool OAIMetadataDefinitionBase::is_large_image_Set() const{
    return m_large_image_isSet;
}

bool OAIMetadataDefinitionBase::is_large_image_Valid() const{
    return m_large_image_isValid;
}

QMap<QString, QMap<QString, QString>> OAIMetadataDefinitionBase::getLocalizedAttributes() const {
    return m_localized_attributes;
}
void OAIMetadataDefinitionBase::setLocalizedAttributes(const QMap<QString, QMap<QString, QString>> &localized_attributes) {
    m_localized_attributes = localized_attributes;
    m_localized_attributes_isSet = true;
}

bool OAIMetadataDefinitionBase::is_localized_attributes_Set() const{
    return m_localized_attributes_isSet;
}

bool OAIMetadataDefinitionBase::is_localized_attributes_Valid() const{
    return m_localized_attributes_isValid;
}

QString OAIMetadataDefinitionBase::getMediumImage() const {
    return m_medium_image;
}
void OAIMetadataDefinitionBase::setMediumImage(const QString &medium_image) {
    m_medium_image = medium_image;
    m_medium_image_isSet = true;
}

bool OAIMetadataDefinitionBase::is_medium_image_Set() const{
    return m_medium_image_isSet;
}

bool OAIMetadataDefinitionBase::is_medium_image_Valid() const{
    return m_medium_image_isValid;
}

QString OAIMetadataDefinitionBase::getSmallImage() const {
    return m_small_image;
}
void OAIMetadataDefinitionBase::setSmallImage(const QString &small_image) {
    m_small_image = small_image;
    m_small_image_isSet = true;
}

bool OAIMetadataDefinitionBase::is_small_image_Set() const{
    return m_small_image_isSet;
}

bool OAIMetadataDefinitionBase::is_small_image_Valid() const{
    return m_small_image_isValid;
}

bool OAIMetadataDefinitionBase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadataDefinitionBase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
