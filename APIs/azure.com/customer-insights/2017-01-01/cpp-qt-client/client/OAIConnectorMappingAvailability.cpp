/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorMappingAvailability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorMappingAvailability::OAIConnectorMappingAvailability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorMappingAvailability::OAIConnectorMappingAvailability() {
    this->initializeModel();
}

OAIConnectorMappingAvailability::~OAIConnectorMappingAvailability() {}

void OAIConnectorMappingAvailability::initializeModel() {

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;
}

void OAIConnectorMappingAvailability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorMappingAvailability::fromJsonObject(QJsonObject json) {

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;
}

QString OAIConnectorMappingAvailability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorMappingAvailability::asJsonObject() const {
    QJsonObject obj;
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    return obj;
}

QString OAIConnectorMappingAvailability::getFrequency() const {
    return m_frequency;
}
void OAIConnectorMappingAvailability::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIConnectorMappingAvailability::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIConnectorMappingAvailability::is_frequency_Valid() const{
    return m_frequency_isValid;
}

qint32 OAIConnectorMappingAvailability::getInterval() const {
    return m_interval;
}
void OAIConnectorMappingAvailability::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIConnectorMappingAvailability::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIConnectorMappingAvailability::is_interval_Valid() const{
    return m_interval_isValid;
}

bool OAIConnectorMappingAvailability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorMappingAvailability::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interval_isValid && true;
}

} // namespace OpenAPI
