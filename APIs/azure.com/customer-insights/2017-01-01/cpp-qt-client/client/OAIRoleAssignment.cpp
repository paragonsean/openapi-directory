/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleAssignment::OAIRoleAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleAssignment::OAIRoleAssignment() {
    this->initializeModel();
}

OAIRoleAssignment::~OAIRoleAssignment() {}

void OAIRoleAssignment::initializeModel() {

    m_assignment_name_isSet = false;
    m_assignment_name_isValid = false;

    m_conflation_policies_isSet = false;
    m_conflation_policies_isValid = false;

    m_connectors_isSet = false;
    m_connectors_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_interactions_isSet = false;
    m_interactions_isValid = false;

    m_kpis_isSet = false;
    m_kpis_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_profiles_isSet = false;
    m_profiles_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_relationship_links_isSet = false;
    m_relationship_links_isValid = false;

    m_relationships_isSet = false;
    m_relationships_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_role_assignments_isSet = false;
    m_role_assignments_isValid = false;

    m_sas_policies_isSet = false;
    m_sas_policies_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;

    m_widget_types_isSet = false;
    m_widget_types_isValid = false;
}

void OAIRoleAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleAssignment::fromJsonObject(QJsonObject json) {

    m_assignment_name_isValid = ::OpenAPI::fromJsonValue(m_assignment_name, json[QString("assignmentName")]);
    m_assignment_name_isSet = !json[QString("assignmentName")].isNull() && m_assignment_name_isValid;

    m_conflation_policies_isValid = ::OpenAPI::fromJsonValue(m_conflation_policies, json[QString("conflationPolicies")]);
    m_conflation_policies_isSet = !json[QString("conflationPolicies")].isNull() && m_conflation_policies_isValid;

    m_connectors_isValid = ::OpenAPI::fromJsonValue(m_connectors, json[QString("connectors")]);
    m_connectors_isSet = !json[QString("connectors")].isNull() && m_connectors_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_interactions_isValid = ::OpenAPI::fromJsonValue(m_interactions, json[QString("interactions")]);
    m_interactions_isSet = !json[QString("interactions")].isNull() && m_interactions_isValid;

    m_kpis_isValid = ::OpenAPI::fromJsonValue(m_kpis, json[QString("kpis")]);
    m_kpis_isSet = !json[QString("kpis")].isNull() && m_kpis_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("principals")]);
    m_principals_isSet = !json[QString("principals")].isNull() && m_principals_isValid;

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("profiles")]);
    m_profiles_isSet = !json[QString("profiles")].isNull() && m_profiles_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_relationship_links_isValid = ::OpenAPI::fromJsonValue(m_relationship_links, json[QString("relationshipLinks")]);
    m_relationship_links_isSet = !json[QString("relationshipLinks")].isNull() && m_relationship_links_isValid;

    m_relationships_isValid = ::OpenAPI::fromJsonValue(m_relationships, json[QString("relationships")]);
    m_relationships_isSet = !json[QString("relationships")].isNull() && m_relationships_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_role_assignments_isValid = ::OpenAPI::fromJsonValue(m_role_assignments, json[QString("roleAssignments")]);
    m_role_assignments_isSet = !json[QString("roleAssignments")].isNull() && m_role_assignments_isValid;

    m_sas_policies_isValid = ::OpenAPI::fromJsonValue(m_sas_policies, json[QString("sasPolicies")]);
    m_sas_policies_isSet = !json[QString("sasPolicies")].isNull() && m_sas_policies_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;

    m_widget_types_isValid = ::OpenAPI::fromJsonValue(m_widget_types, json[QString("widgetTypes")]);
    m_widget_types_isSet = !json[QString("widgetTypes")].isNull() && m_widget_types_isValid;
}

QString OAIRoleAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_name_isSet) {
        obj.insert(QString("assignmentName"), ::OpenAPI::toJsonValue(m_assignment_name));
    }
    if (m_conflation_policies.isSet()) {
        obj.insert(QString("conflationPolicies"), ::OpenAPI::toJsonValue(m_conflation_policies));
    }
    if (m_connectors.isSet()) {
        obj.insert(QString("connectors"), ::OpenAPI::toJsonValue(m_connectors));
    }
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_interactions.isSet()) {
        obj.insert(QString("interactions"), ::OpenAPI::toJsonValue(m_interactions));
    }
    if (m_kpis.isSet()) {
        obj.insert(QString("kpis"), ::OpenAPI::toJsonValue(m_kpis));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_principals.size() > 0) {
        obj.insert(QString("principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_profiles.isSet()) {
        obj.insert(QString("profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_relationship_links.isSet()) {
        obj.insert(QString("relationshipLinks"), ::OpenAPI::toJsonValue(m_relationship_links));
    }
    if (m_relationships.isSet()) {
        obj.insert(QString("relationships"), ::OpenAPI::toJsonValue(m_relationships));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_role_assignments.isSet()) {
        obj.insert(QString("roleAssignments"), ::OpenAPI::toJsonValue(m_role_assignments));
    }
    if (m_sas_policies.isSet()) {
        obj.insert(QString("sasPolicies"), ::OpenAPI::toJsonValue(m_sas_policies));
    }
    if (m_segments.isSet()) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_views.isSet()) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    if (m_widget_types.isSet()) {
        obj.insert(QString("widgetTypes"), ::OpenAPI::toJsonValue(m_widget_types));
    }
    return obj;
}

QString OAIRoleAssignment::getAssignmentName() const {
    return m_assignment_name;
}
void OAIRoleAssignment::setAssignmentName(const QString &assignment_name) {
    m_assignment_name = assignment_name;
    m_assignment_name_isSet = true;
}

bool OAIRoleAssignment::is_assignment_name_Set() const{
    return m_assignment_name_isSet;
}

bool OAIRoleAssignment::is_assignment_name_Valid() const{
    return m_assignment_name_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getConflationPolicies() const {
    return m_conflation_policies;
}
void OAIRoleAssignment::setConflationPolicies(const OAIResourceSetDescription &conflation_policies) {
    m_conflation_policies = conflation_policies;
    m_conflation_policies_isSet = true;
}

bool OAIRoleAssignment::is_conflation_policies_Set() const{
    return m_conflation_policies_isSet;
}

bool OAIRoleAssignment::is_conflation_policies_Valid() const{
    return m_conflation_policies_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getConnectors() const {
    return m_connectors;
}
void OAIRoleAssignment::setConnectors(const OAIResourceSetDescription &connectors) {
    m_connectors = connectors;
    m_connectors_isSet = true;
}

bool OAIRoleAssignment::is_connectors_Set() const{
    return m_connectors_isSet;
}

bool OAIRoleAssignment::is_connectors_Valid() const{
    return m_connectors_isValid;
}

QMap<QString, QString> OAIRoleAssignment::getDescription() const {
    return m_description;
}
void OAIRoleAssignment::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRoleAssignment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRoleAssignment::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIRoleAssignment::getDisplayName() const {
    return m_display_name;
}
void OAIRoleAssignment::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRoleAssignment::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRoleAssignment::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getInteractions() const {
    return m_interactions;
}
void OAIRoleAssignment::setInteractions(const OAIResourceSetDescription &interactions) {
    m_interactions = interactions;
    m_interactions_isSet = true;
}

bool OAIRoleAssignment::is_interactions_Set() const{
    return m_interactions_isSet;
}

bool OAIRoleAssignment::is_interactions_Valid() const{
    return m_interactions_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getKpis() const {
    return m_kpis;
}
void OAIRoleAssignment::setKpis(const OAIResourceSetDescription &kpis) {
    m_kpis = kpis;
    m_kpis_isSet = true;
}

bool OAIRoleAssignment::is_kpis_Set() const{
    return m_kpis_isSet;
}

bool OAIRoleAssignment::is_kpis_Valid() const{
    return m_kpis_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getLinks() const {
    return m_links;
}
void OAIRoleAssignment::setLinks(const OAIResourceSetDescription &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIRoleAssignment::is_links_Set() const{
    return m_links_isSet;
}

bool OAIRoleAssignment::is_links_Valid() const{
    return m_links_isValid;
}

QList<OAIAssignmentPrincipal> OAIRoleAssignment::getPrincipals() const {
    return m_principals;
}
void OAIRoleAssignment::setPrincipals(const QList<OAIAssignmentPrincipal> &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAIRoleAssignment::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAIRoleAssignment::is_principals_Valid() const{
    return m_principals_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getProfiles() const {
    return m_profiles;
}
void OAIRoleAssignment::setProfiles(const OAIResourceSetDescription &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAIRoleAssignment::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAIRoleAssignment::is_profiles_Valid() const{
    return m_profiles_isValid;
}

OAIProvisioningState OAIRoleAssignment::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRoleAssignment::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRoleAssignment::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRoleAssignment::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getRelationshipLinks() const {
    return m_relationship_links;
}
void OAIRoleAssignment::setRelationshipLinks(const OAIResourceSetDescription &relationship_links) {
    m_relationship_links = relationship_links;
    m_relationship_links_isSet = true;
}

bool OAIRoleAssignment::is_relationship_links_Set() const{
    return m_relationship_links_isSet;
}

bool OAIRoleAssignment::is_relationship_links_Valid() const{
    return m_relationship_links_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getRelationships() const {
    return m_relationships;
}
void OAIRoleAssignment::setRelationships(const OAIResourceSetDescription &relationships) {
    m_relationships = relationships;
    m_relationships_isSet = true;
}

bool OAIRoleAssignment::is_relationships_Set() const{
    return m_relationships_isSet;
}

bool OAIRoleAssignment::is_relationships_Valid() const{
    return m_relationships_isValid;
}

QString OAIRoleAssignment::getRole() const {
    return m_role;
}
void OAIRoleAssignment::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIRoleAssignment::is_role_Set() const{
    return m_role_isSet;
}

bool OAIRoleAssignment::is_role_Valid() const{
    return m_role_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getRoleAssignments() const {
    return m_role_assignments;
}
void OAIRoleAssignment::setRoleAssignments(const OAIResourceSetDescription &role_assignments) {
    m_role_assignments = role_assignments;
    m_role_assignments_isSet = true;
}

bool OAIRoleAssignment::is_role_assignments_Set() const{
    return m_role_assignments_isSet;
}

bool OAIRoleAssignment::is_role_assignments_Valid() const{
    return m_role_assignments_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getSasPolicies() const {
    return m_sas_policies;
}
void OAIRoleAssignment::setSasPolicies(const OAIResourceSetDescription &sas_policies) {
    m_sas_policies = sas_policies;
    m_sas_policies_isSet = true;
}

bool OAIRoleAssignment::is_sas_policies_Set() const{
    return m_sas_policies_isSet;
}

bool OAIRoleAssignment::is_sas_policies_Valid() const{
    return m_sas_policies_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getSegments() const {
    return m_segments;
}
void OAIRoleAssignment::setSegments(const OAIResourceSetDescription &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIRoleAssignment::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIRoleAssignment::is_segments_Valid() const{
    return m_segments_isValid;
}

QString OAIRoleAssignment::getTenantId() const {
    return m_tenant_id;
}
void OAIRoleAssignment::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIRoleAssignment::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIRoleAssignment::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getViews() const {
    return m_views;
}
void OAIRoleAssignment::setViews(const OAIResourceSetDescription &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIRoleAssignment::is_views_Set() const{
    return m_views_isSet;
}

bool OAIRoleAssignment::is_views_Valid() const{
    return m_views_isValid;
}

OAIResourceSetDescription OAIRoleAssignment::getWidgetTypes() const {
    return m_widget_types;
}
void OAIRoleAssignment::setWidgetTypes(const OAIResourceSetDescription &widget_types) {
    m_widget_types = widget_types;
    m_widget_types_isSet = true;
}

bool OAIRoleAssignment::is_widget_types_Set() const{
    return m_widget_types_isSet;
}

bool OAIRoleAssignment::is_widget_types_Valid() const{
    return m_widget_types_isValid;
}

bool OAIRoleAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conflation_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kpis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_principals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationships.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_assignments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sas_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_widget_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_principals_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
