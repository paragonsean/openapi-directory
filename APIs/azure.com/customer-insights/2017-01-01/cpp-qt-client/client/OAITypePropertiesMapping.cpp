/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypePropertiesMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypePropertiesMapping::OAITypePropertiesMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypePropertiesMapping::OAITypePropertiesMapping() {
    this->initializeModel();
}

OAITypePropertiesMapping::~OAITypePropertiesMapping() {}

void OAITypePropertiesMapping::initializeModel() {

    m_interaction_type_property_name_isSet = false;
    m_interaction_type_property_name_isValid = false;

    m_is_profile_type_id_isSet = false;
    m_is_profile_type_id_isValid = false;

    m_link_type_isSet = false;
    m_link_type_isValid = false;

    m_profile_type_property_name_isSet = false;
    m_profile_type_property_name_isValid = false;
}

void OAITypePropertiesMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypePropertiesMapping::fromJsonObject(QJsonObject json) {

    m_interaction_type_property_name_isValid = ::OpenAPI::fromJsonValue(m_interaction_type_property_name, json[QString("interactionTypePropertyName")]);
    m_interaction_type_property_name_isSet = !json[QString("interactionTypePropertyName")].isNull() && m_interaction_type_property_name_isValid;

    m_is_profile_type_id_isValid = ::OpenAPI::fromJsonValue(m_is_profile_type_id, json[QString("isProfileTypeId")]);
    m_is_profile_type_id_isSet = !json[QString("isProfileTypeId")].isNull() && m_is_profile_type_id_isValid;

    m_link_type_isValid = ::OpenAPI::fromJsonValue(m_link_type, json[QString("linkType")]);
    m_link_type_isSet = !json[QString("linkType")].isNull() && m_link_type_isValid;

    m_profile_type_property_name_isValid = ::OpenAPI::fromJsonValue(m_profile_type_property_name, json[QString("profileTypePropertyName")]);
    m_profile_type_property_name_isSet = !json[QString("profileTypePropertyName")].isNull() && m_profile_type_property_name_isValid;
}

QString OAITypePropertiesMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypePropertiesMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_interaction_type_property_name_isSet) {
        obj.insert(QString("interactionTypePropertyName"), ::OpenAPI::toJsonValue(m_interaction_type_property_name));
    }
    if (m_is_profile_type_id_isSet) {
        obj.insert(QString("isProfileTypeId"), ::OpenAPI::toJsonValue(m_is_profile_type_id));
    }
    if (m_link_type_isSet) {
        obj.insert(QString("linkType"), ::OpenAPI::toJsonValue(m_link_type));
    }
    if (m_profile_type_property_name_isSet) {
        obj.insert(QString("profileTypePropertyName"), ::OpenAPI::toJsonValue(m_profile_type_property_name));
    }
    return obj;
}

QString OAITypePropertiesMapping::getInteractionTypePropertyName() const {
    return m_interaction_type_property_name;
}
void OAITypePropertiesMapping::setInteractionTypePropertyName(const QString &interaction_type_property_name) {
    m_interaction_type_property_name = interaction_type_property_name;
    m_interaction_type_property_name_isSet = true;
}

bool OAITypePropertiesMapping::is_interaction_type_property_name_Set() const{
    return m_interaction_type_property_name_isSet;
}

bool OAITypePropertiesMapping::is_interaction_type_property_name_Valid() const{
    return m_interaction_type_property_name_isValid;
}

bool OAITypePropertiesMapping::isIsProfileTypeId() const {
    return m_is_profile_type_id;
}
void OAITypePropertiesMapping::setIsProfileTypeId(const bool &is_profile_type_id) {
    m_is_profile_type_id = is_profile_type_id;
    m_is_profile_type_id_isSet = true;
}

bool OAITypePropertiesMapping::is_is_profile_type_id_Set() const{
    return m_is_profile_type_id_isSet;
}

bool OAITypePropertiesMapping::is_is_profile_type_id_Valid() const{
    return m_is_profile_type_id_isValid;
}

QString OAITypePropertiesMapping::getLinkType() const {
    return m_link_type;
}
void OAITypePropertiesMapping::setLinkType(const QString &link_type) {
    m_link_type = link_type;
    m_link_type_isSet = true;
}

bool OAITypePropertiesMapping::is_link_type_Set() const{
    return m_link_type_isSet;
}

bool OAITypePropertiesMapping::is_link_type_Valid() const{
    return m_link_type_isValid;
}

QString OAITypePropertiesMapping::getProfileTypePropertyName() const {
    return m_profile_type_property_name;
}
void OAITypePropertiesMapping::setProfileTypePropertyName(const QString &profile_type_property_name) {
    m_profile_type_property_name = profile_type_property_name;
    m_profile_type_property_name_isSet = true;
}

bool OAITypePropertiesMapping::is_profile_type_property_name_Set() const{
    return m_profile_type_property_name_isSet;
}

bool OAITypePropertiesMapping::is_profile_type_property_name_Valid() const{
    return m_profile_type_property_name_isValid;
}

bool OAITypePropertiesMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interaction_type_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_profile_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_type_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypePropertiesMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interaction_type_property_name_isValid && m_profile_type_property_name_isValid && true;
}

} // namespace OpenAPI
