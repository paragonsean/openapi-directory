/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIKpiApi_H
#define OAI_OAIKpiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIKpiListResult.h"
#include "OAIKpiResourceFormat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIKpiApi : public QObject {
    Q_OBJECT

public:
    OAIKpiApi(const int timeOut = 0);
    ~OAIKpiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  kpi_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIKpiResourceFormat [required]
    */
    virtual void kpiCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &kpi_name, const QString &api_version, const QString &subscription_id, const OAIKpiResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  kpi_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void kpiDelete(const QString &resource_group_name, const QString &hub_name, const QString &kpi_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  kpi_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void kpiGet(const QString &resource_group_name, const QString &hub_name, const QString &kpi_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void kpiListByHub(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  kpi_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void kpiReprocess(const QString &resource_group_name, const QString &hub_name, const QString &kpi_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void kpiCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void kpiDeleteCallback(OAIHttpRequestWorker *worker);
    void kpiGetCallback(OAIHttpRequestWorker *worker);
    void kpiListByHubCallback(OAIHttpRequestWorker *worker);
    void kpiReprocessCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void kpiCreateOrUpdateSignal(OAIKpiResourceFormat summary);
    void kpiDeleteSignal();
    void kpiGetSignal(OAIKpiResourceFormat summary);
    void kpiListByHubSignal(OAIKpiListResult summary);
    void kpiReprocessSignal();


    void kpiCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIKpiResourceFormat summary);
    void kpiDeleteSignalFull(OAIHttpRequestWorker *worker);
    void kpiGetSignalFull(OAIHttpRequestWorker *worker, OAIKpiResourceFormat summary);
    void kpiListByHubSignalFull(OAIHttpRequestWorker *worker, OAIKpiListResult summary);
    void kpiReprocessSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use kpiCreateOrUpdateSignalError() instead")
    void kpiCreateOrUpdateSignalE(OAIKpiResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kpiCreateOrUpdateSignalError(OAIKpiResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kpiDeleteSignalError() instead")
    void kpiDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void kpiDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kpiGetSignalError() instead")
    void kpiGetSignalE(OAIKpiResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kpiGetSignalError(OAIKpiResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kpiListByHubSignalError() instead")
    void kpiListByHubSignalE(OAIKpiListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void kpiListByHubSignalError(OAIKpiListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kpiReprocessSignalError() instead")
    void kpiReprocessSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void kpiReprocessSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use kpiCreateOrUpdateSignalErrorFull() instead")
    void kpiCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kpiCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kpiDeleteSignalErrorFull() instead")
    void kpiDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kpiDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kpiGetSignalErrorFull() instead")
    void kpiGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kpiGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kpiListByHubSignalErrorFull() instead")
    void kpiListByHubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kpiListByHubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use kpiReprocessSignalErrorFull() instead")
    void kpiReprocessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kpiReprocessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
