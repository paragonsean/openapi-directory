/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIView::OAIView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIView::OAIView() {
    this->initializeModel();
}

OAIView::~OAIView() {}

void OAIView::initializeModel() {

    m_changed_isSet = false;
    m_changed_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_view_name_isSet = false;
    m_view_name_isValid = false;
}

void OAIView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIView::fromJsonObject(QJsonObject json) {

    m_changed_isValid = ::OpenAPI::fromJsonValue(m_changed, json[QString("changed")]);
    m_changed_isSet = !json[QString("changed")].isNull() && m_changed_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_view_name_isValid = ::OpenAPI::fromJsonValue(m_view_name, json[QString("viewName")]);
    m_view_name_isSet = !json[QString("viewName")].isNull() && m_view_name_isValid;
}

QString OAIView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIView::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_isSet) {
        obj.insert(QString("changed"), ::OpenAPI::toJsonValue(m_changed));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_view_name_isSet) {
        obj.insert(QString("viewName"), ::OpenAPI::toJsonValue(m_view_name));
    }
    return obj;
}

QDateTime OAIView::getChanged() const {
    return m_changed;
}
void OAIView::setChanged(const QDateTime &changed) {
    m_changed = changed;
    m_changed_isSet = true;
}

bool OAIView::is_changed_Set() const{
    return m_changed_isSet;
}

bool OAIView::is_changed_Valid() const{
    return m_changed_isValid;
}

QDateTime OAIView::getCreated() const {
    return m_created;
}
void OAIView::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIView::is_created_Set() const{
    return m_created_isSet;
}

bool OAIView::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIView::getDefinition() const {
    return m_definition;
}
void OAIView::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIView::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIView::is_definition_Valid() const{
    return m_definition_isValid;
}

QMap<QString, QString> OAIView::getDisplayName() const {
    return m_display_name;
}
void OAIView::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIView::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIView::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIView::getTenantId() const {
    return m_tenant_id;
}
void OAIView::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIView::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIView::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIView::getUserId() const {
    return m_user_id;
}
void OAIView::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIView::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIView::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIView::getViewName() const {
    return m_view_name;
}
void OAIView::setViewName(const QString &view_name) {
    m_view_name = view_name;
    m_view_name_isSet = true;
}

bool OAIView::is_view_name_Set() const{
    return m_view_name_isSet;
}

bool OAIView::is_view_name_Valid() const{
    return m_view_name_isValid;
}

bool OAIView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIView::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_definition_isValid && true;
}

} // namespace OpenAPI
