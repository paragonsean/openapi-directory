/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileTypeDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileTypeDefinition::OAIProfileTypeDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileTypeDefinition::OAIProfileTypeDefinition() {
    this->initializeModel();
}

OAIProfileTypeDefinition::~OAIProfileTypeDefinition() {}

void OAIProfileTypeDefinition::initializeModel() {

    m_strong_ids_isSet = false;
    m_strong_ids_isValid = false;

    m_api_entity_set_name_isSet = false;
    m_api_entity_set_name_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_instances_count_isSet = false;
    m_instances_count_isValid = false;

    m_last_changed_utc_isSet = false;
    m_last_changed_utc_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_schema_item_type_link_isSet = false;
    m_schema_item_type_link_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_timestamp_field_name_isSet = false;
    m_timestamp_field_name_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_large_image_isSet = false;
    m_large_image_isValid = false;

    m_localized_attributes_isSet = false;
    m_localized_attributes_isValid = false;

    m_medium_image_isSet = false;
    m_medium_image_isValid = false;

    m_small_image_isSet = false;
    m_small_image_isValid = false;
}

void OAIProfileTypeDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileTypeDefinition::fromJsonObject(QJsonObject json) {

    m_strong_ids_isValid = ::OpenAPI::fromJsonValue(m_strong_ids, json[QString("strongIds")]);
    m_strong_ids_isSet = !json[QString("strongIds")].isNull() && m_strong_ids_isValid;

    m_api_entity_set_name_isValid = ::OpenAPI::fromJsonValue(m_api_entity_set_name, json[QString("apiEntitySetName")]);
    m_api_entity_set_name_isSet = !json[QString("apiEntitySetName")].isNull() && m_api_entity_set_name_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_instances_count_isValid = ::OpenAPI::fromJsonValue(m_instances_count, json[QString("instancesCount")]);
    m_instances_count_isSet = !json[QString("instancesCount")].isNull() && m_instances_count_isValid;

    m_last_changed_utc_isValid = ::OpenAPI::fromJsonValue(m_last_changed_utc, json[QString("lastChangedUtc")]);
    m_last_changed_utc_isSet = !json[QString("lastChangedUtc")].isNull() && m_last_changed_utc_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_schema_item_type_link_isValid = ::OpenAPI::fromJsonValue(m_schema_item_type_link, json[QString("schemaItemTypeLink")]);
    m_schema_item_type_link_isSet = !json[QString("schemaItemTypeLink")].isNull() && m_schema_item_type_link_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_timestamp_field_name_isValid = ::OpenAPI::fromJsonValue(m_timestamp_field_name, json[QString("timestampFieldName")]);
    m_timestamp_field_name_isSet = !json[QString("timestampFieldName")].isNull() && m_timestamp_field_name_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("typeName")]);
    m_type_name_isSet = !json[QString("typeName")].isNull() && m_type_name_isValid;

    if(json["attributes"].isObject()){
        auto varmap = json["attributes"].toObject().toVariantMap();
        m_attributes_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_attributes_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_attributes_isSet &= !jval.isNull() && m_attributes_isValid;
                m_attributes.insert(m_attributes.end(), val, item);
            }
        }
    }

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_large_image_isValid = ::OpenAPI::fromJsonValue(m_large_image, json[QString("largeImage")]);
    m_large_image_isSet = !json[QString("largeImage")].isNull() && m_large_image_isValid;

    if(json["localizedAttributes"].isObject()){
        auto varmap = json["localizedAttributes"].toObject().toVariantMap();
        m_localized_attributes_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_localized_attributes_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_localized_attributes_isSet &= !jval.isNull() && m_localized_attributes_isValid;
                m_localized_attributes.insert(m_localized_attributes.end(), val, item);
            }
        }
    }

    m_medium_image_isValid = ::OpenAPI::fromJsonValue(m_medium_image, json[QString("mediumImage")]);
    m_medium_image_isSet = !json[QString("mediumImage")].isNull() && m_medium_image_isValid;

    m_small_image_isValid = ::OpenAPI::fromJsonValue(m_small_image, json[QString("smallImage")]);
    m_small_image_isSet = !json[QString("smallImage")].isNull() && m_small_image_isValid;
}

QString OAIProfileTypeDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileTypeDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_strong_ids.size() > 0) {
        obj.insert(QString("strongIds"), ::OpenAPI::toJsonValue(m_strong_ids));
    }
    if (m_api_entity_set_name_isSet) {
        obj.insert(QString("apiEntitySetName"), ::OpenAPI::toJsonValue(m_api_entity_set_name));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_instances_count_isSet) {
        obj.insert(QString("instancesCount"), ::OpenAPI::toJsonValue(m_instances_count));
    }
    if (m_last_changed_utc_isSet) {
        obj.insert(QString("lastChangedUtc"), ::OpenAPI::toJsonValue(m_last_changed_utc));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_schema_item_type_link_isSet) {
        obj.insert(QString("schemaItemTypeLink"), ::OpenAPI::toJsonValue(m_schema_item_type_link));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_timestamp_field_name_isSet) {
        obj.insert(QString("timestampFieldName"), ::OpenAPI::toJsonValue(m_timestamp_field_name));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("typeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_attributes.size() > 0) {
        
        obj.insert(QString("attributes"), toJsonValue(m_attributes));
    }
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_large_image_isSet) {
        obj.insert(QString("largeImage"), ::OpenAPI::toJsonValue(m_large_image));
    }
    if (m_localized_attributes.size() > 0) {
        
        obj.insert(QString("localizedAttributes"), toJsonValue(m_localized_attributes));
    }
    if (m_medium_image_isSet) {
        obj.insert(QString("mediumImage"), ::OpenAPI::toJsonValue(m_medium_image));
    }
    if (m_small_image_isSet) {
        obj.insert(QString("smallImage"), ::OpenAPI::toJsonValue(m_small_image));
    }
    return obj;
}

QList<OAIStrongId> OAIProfileTypeDefinition::getStrongIds() const {
    return m_strong_ids;
}
void OAIProfileTypeDefinition::setStrongIds(const QList<OAIStrongId> &strong_ids) {
    m_strong_ids = strong_ids;
    m_strong_ids_isSet = true;
}

bool OAIProfileTypeDefinition::is_strong_ids_Set() const{
    return m_strong_ids_isSet;
}

bool OAIProfileTypeDefinition::is_strong_ids_Valid() const{
    return m_strong_ids_isValid;
}

QString OAIProfileTypeDefinition::getApiEntitySetName() const {
    return m_api_entity_set_name;
}
void OAIProfileTypeDefinition::setApiEntitySetName(const QString &api_entity_set_name) {
    m_api_entity_set_name = api_entity_set_name;
    m_api_entity_set_name_isSet = true;
}

bool OAIProfileTypeDefinition::is_api_entity_set_name_Set() const{
    return m_api_entity_set_name_isSet;
}

bool OAIProfileTypeDefinition::is_api_entity_set_name_Valid() const{
    return m_api_entity_set_name_isValid;
}

QString OAIProfileTypeDefinition::getEntityType() const {
    return m_entity_type;
}
void OAIProfileTypeDefinition::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIProfileTypeDefinition::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIProfileTypeDefinition::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QList<OAIPropertyDefinition> OAIProfileTypeDefinition::getFields() const {
    return m_fields;
}
void OAIProfileTypeDefinition::setFields(const QList<OAIPropertyDefinition> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIProfileTypeDefinition::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIProfileTypeDefinition::is_fields_Valid() const{
    return m_fields_isValid;
}

qint32 OAIProfileTypeDefinition::getInstancesCount() const {
    return m_instances_count;
}
void OAIProfileTypeDefinition::setInstancesCount(const qint32 &instances_count) {
    m_instances_count = instances_count;
    m_instances_count_isSet = true;
}

bool OAIProfileTypeDefinition::is_instances_count_Set() const{
    return m_instances_count_isSet;
}

bool OAIProfileTypeDefinition::is_instances_count_Valid() const{
    return m_instances_count_isValid;
}

QDateTime OAIProfileTypeDefinition::getLastChangedUtc() const {
    return m_last_changed_utc;
}
void OAIProfileTypeDefinition::setLastChangedUtc(const QDateTime &last_changed_utc) {
    m_last_changed_utc = last_changed_utc;
    m_last_changed_utc_isSet = true;
}

bool OAIProfileTypeDefinition::is_last_changed_utc_Set() const{
    return m_last_changed_utc_isSet;
}

bool OAIProfileTypeDefinition::is_last_changed_utc_Valid() const{
    return m_last_changed_utc_isValid;
}

OAIProvisioningState OAIProfileTypeDefinition::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIProfileTypeDefinition::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIProfileTypeDefinition::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIProfileTypeDefinition::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIProfileTypeDefinition::getSchemaItemTypeLink() const {
    return m_schema_item_type_link;
}
void OAIProfileTypeDefinition::setSchemaItemTypeLink(const QString &schema_item_type_link) {
    m_schema_item_type_link = schema_item_type_link;
    m_schema_item_type_link_isSet = true;
}

bool OAIProfileTypeDefinition::is_schema_item_type_link_Set() const{
    return m_schema_item_type_link_isSet;
}

bool OAIProfileTypeDefinition::is_schema_item_type_link_Valid() const{
    return m_schema_item_type_link_isValid;
}

QString OAIProfileTypeDefinition::getTenantId() const {
    return m_tenant_id;
}
void OAIProfileTypeDefinition::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIProfileTypeDefinition::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIProfileTypeDefinition::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIProfileTypeDefinition::getTimestampFieldName() const {
    return m_timestamp_field_name;
}
void OAIProfileTypeDefinition::setTimestampFieldName(const QString &timestamp_field_name) {
    m_timestamp_field_name = timestamp_field_name;
    m_timestamp_field_name_isSet = true;
}

bool OAIProfileTypeDefinition::is_timestamp_field_name_Set() const{
    return m_timestamp_field_name_isSet;
}

bool OAIProfileTypeDefinition::is_timestamp_field_name_Valid() const{
    return m_timestamp_field_name_isValid;
}

QString OAIProfileTypeDefinition::getTypeName() const {
    return m_type_name;
}
void OAIProfileTypeDefinition::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIProfileTypeDefinition::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIProfileTypeDefinition::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QMap<QString, QList<QString>> OAIProfileTypeDefinition::getAttributes() const {
    return m_attributes;
}
void OAIProfileTypeDefinition::setAttributes(const QMap<QString, QList<QString>> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIProfileTypeDefinition::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIProfileTypeDefinition::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QMap<QString, QString> OAIProfileTypeDefinition::getDescription() const {
    return m_description;
}
void OAIProfileTypeDefinition::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProfileTypeDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProfileTypeDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIProfileTypeDefinition::getDisplayName() const {
    return m_display_name;
}
void OAIProfileTypeDefinition::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIProfileTypeDefinition::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIProfileTypeDefinition::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIProfileTypeDefinition::getLargeImage() const {
    return m_large_image;
}
void OAIProfileTypeDefinition::setLargeImage(const QString &large_image) {
    m_large_image = large_image;
    m_large_image_isSet = true;
}

bool OAIProfileTypeDefinition::is_large_image_Set() const{
    return m_large_image_isSet;
}

bool OAIProfileTypeDefinition::is_large_image_Valid() const{
    return m_large_image_isValid;
}

QMap<QString, QMap<QString, QString>> OAIProfileTypeDefinition::getLocalizedAttributes() const {
    return m_localized_attributes;
}
void OAIProfileTypeDefinition::setLocalizedAttributes(const QMap<QString, QMap<QString, QString>> &localized_attributes) {
    m_localized_attributes = localized_attributes;
    m_localized_attributes_isSet = true;
}

bool OAIProfileTypeDefinition::is_localized_attributes_Set() const{
    return m_localized_attributes_isSet;
}

bool OAIProfileTypeDefinition::is_localized_attributes_Valid() const{
    return m_localized_attributes_isValid;
}

QString OAIProfileTypeDefinition::getMediumImage() const {
    return m_medium_image;
}
void OAIProfileTypeDefinition::setMediumImage(const QString &medium_image) {
    m_medium_image = medium_image;
    m_medium_image_isSet = true;
}

bool OAIProfileTypeDefinition::is_medium_image_Set() const{
    return m_medium_image_isSet;
}

bool OAIProfileTypeDefinition::is_medium_image_Valid() const{
    return m_medium_image_isValid;
}

QString OAIProfileTypeDefinition::getSmallImage() const {
    return m_small_image;
}
void OAIProfileTypeDefinition::setSmallImage(const QString &small_image) {
    m_small_image = small_image;
    m_small_image_isSet = true;
}

bool OAIProfileTypeDefinition::is_small_image_Set() const{
    return m_small_image_isSet;
}

bool OAIProfileTypeDefinition::is_small_image_Valid() const{
    return m_small_image_isValid;
}

bool OAIProfileTypeDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_strong_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_entity_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_changed_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_item_type_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileTypeDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
