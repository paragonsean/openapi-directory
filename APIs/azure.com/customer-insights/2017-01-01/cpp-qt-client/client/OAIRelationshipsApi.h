/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRelationshipsApi_H
#define OAI_OAIRelationshipsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRelationshipListResult.h"
#include "OAIRelationshipResourceFormat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRelationshipsApi : public QObject {
    Q_OBJECT

public:
    OAIRelationshipsApi(const int timeOut = 0);
    ~OAIRelationshipsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  relationship_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRelationshipResourceFormat [required]
    */
    virtual void relationshipsCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &relationship_name, const QString &api_version, const QString &subscription_id, const OAIRelationshipResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  relationship_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void relationshipsDelete(const QString &resource_group_name, const QString &hub_name, const QString &relationship_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  relationship_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void relationshipsGet(const QString &resource_group_name, const QString &hub_name, const QString &relationship_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void relationshipsListByHub(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void relationshipsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void relationshipsDeleteCallback(OAIHttpRequestWorker *worker);
    void relationshipsGetCallback(OAIHttpRequestWorker *worker);
    void relationshipsListByHubCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void relationshipsCreateOrUpdateSignal(OAIRelationshipResourceFormat summary);
    void relationshipsDeleteSignal();
    void relationshipsGetSignal(OAIRelationshipResourceFormat summary);
    void relationshipsListByHubSignal(OAIRelationshipListResult summary);


    void relationshipsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRelationshipResourceFormat summary);
    void relationshipsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void relationshipsGetSignalFull(OAIHttpRequestWorker *worker, OAIRelationshipResourceFormat summary);
    void relationshipsListByHubSignalFull(OAIHttpRequestWorker *worker, OAIRelationshipListResult summary);

    Q_DECL_DEPRECATED_X("Use relationshipsCreateOrUpdateSignalError() instead")
    void relationshipsCreateOrUpdateSignalE(OAIRelationshipResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipsCreateOrUpdateSignalError(OAIRelationshipResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipsDeleteSignalError() instead")
    void relationshipsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipsGetSignalError() instead")
    void relationshipsGetSignalE(OAIRelationshipResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipsGetSignalError(OAIRelationshipResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipsListByHubSignalError() instead")
    void relationshipsListByHubSignalE(OAIRelationshipListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipsListByHubSignalError(OAIRelationshipListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use relationshipsCreateOrUpdateSignalErrorFull() instead")
    void relationshipsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipsDeleteSignalErrorFull() instead")
    void relationshipsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipsGetSignalErrorFull() instead")
    void relationshipsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipsListByHubSignalErrorFull() instead")
    void relationshipsListByHubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipsListByHubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
