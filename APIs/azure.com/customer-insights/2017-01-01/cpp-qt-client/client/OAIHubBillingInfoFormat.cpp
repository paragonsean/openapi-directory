/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHubBillingInfoFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHubBillingInfoFormat::OAIHubBillingInfoFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHubBillingInfoFormat::OAIHubBillingInfoFormat() {
    this->initializeModel();
}

OAIHubBillingInfoFormat::~OAIHubBillingInfoFormat() {}

void OAIHubBillingInfoFormat::initializeModel() {

    m_max_units_isSet = false;
    m_max_units_isValid = false;

    m_min_units_isSet = false;
    m_min_units_isValid = false;

    m_sku_name_isSet = false;
    m_sku_name_isValid = false;
}

void OAIHubBillingInfoFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHubBillingInfoFormat::fromJsonObject(QJsonObject json) {

    m_max_units_isValid = ::OpenAPI::fromJsonValue(m_max_units, json[QString("maxUnits")]);
    m_max_units_isSet = !json[QString("maxUnits")].isNull() && m_max_units_isValid;

    m_min_units_isValid = ::OpenAPI::fromJsonValue(m_min_units, json[QString("minUnits")]);
    m_min_units_isSet = !json[QString("minUnits")].isNull() && m_min_units_isValid;

    m_sku_name_isValid = ::OpenAPI::fromJsonValue(m_sku_name, json[QString("skuName")]);
    m_sku_name_isSet = !json[QString("skuName")].isNull() && m_sku_name_isValid;
}

QString OAIHubBillingInfoFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHubBillingInfoFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_max_units_isSet) {
        obj.insert(QString("maxUnits"), ::OpenAPI::toJsonValue(m_max_units));
    }
    if (m_min_units_isSet) {
        obj.insert(QString("minUnits"), ::OpenAPI::toJsonValue(m_min_units));
    }
    if (m_sku_name_isSet) {
        obj.insert(QString("skuName"), ::OpenAPI::toJsonValue(m_sku_name));
    }
    return obj;
}

qint32 OAIHubBillingInfoFormat::getMaxUnits() const {
    return m_max_units;
}
void OAIHubBillingInfoFormat::setMaxUnits(const qint32 &max_units) {
    m_max_units = max_units;
    m_max_units_isSet = true;
}

bool OAIHubBillingInfoFormat::is_max_units_Set() const{
    return m_max_units_isSet;
}

bool OAIHubBillingInfoFormat::is_max_units_Valid() const{
    return m_max_units_isValid;
}

qint32 OAIHubBillingInfoFormat::getMinUnits() const {
    return m_min_units;
}
void OAIHubBillingInfoFormat::setMinUnits(const qint32 &min_units) {
    m_min_units = min_units;
    m_min_units_isSet = true;
}

bool OAIHubBillingInfoFormat::is_min_units_Set() const{
    return m_min_units_isSet;
}

bool OAIHubBillingInfoFormat::is_min_units_Valid() const{
    return m_min_units_isValid;
}

QString OAIHubBillingInfoFormat::getSkuName() const {
    return m_sku_name;
}
void OAIHubBillingInfoFormat::setSkuName(const QString &sku_name) {
    m_sku_name = sku_name;
    m_sku_name_isSet = true;
}

bool OAIHubBillingInfoFormat::is_sku_name_Set() const{
    return m_sku_name_isSet;
}

bool OAIHubBillingInfoFormat::is_sku_name_Valid() const{
    return m_sku_name_isValid;
}

bool OAIHubBillingInfoFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHubBillingInfoFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
