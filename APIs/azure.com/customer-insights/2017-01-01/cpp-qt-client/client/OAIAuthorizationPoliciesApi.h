/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthorizationPoliciesApi_H
#define OAI_OAIAuthorizationPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthorizationPolicy.h"
#include "OAIAuthorizationPolicyListResult.h"
#include "OAIAuthorizationPolicyResourceFormat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthorizationPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIAuthorizationPoliciesApi(const int timeOut = 0);
    ~OAIAuthorizationPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  authorization_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAuthorizationPolicyResourceFormat [required]
    */
    virtual void authorizationPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &authorization_policy_name, const QString &api_version, const QString &subscription_id, const OAIAuthorizationPolicyResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  authorization_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void authorizationPoliciesGet(const QString &resource_group_name, const QString &hub_name, const QString &authorization_policy_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void authorizationPoliciesListByHub(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  authorization_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void authorizationPoliciesRegeneratePrimaryKey(const QString &resource_group_name, const QString &hub_name, const QString &authorization_policy_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  authorization_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void authorizationPoliciesRegenerateSecondaryKey(const QString &resource_group_name, const QString &hub_name, const QString &authorization_policy_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authorizationPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void authorizationPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void authorizationPoliciesListByHubCallback(OAIHttpRequestWorker *worker);
    void authorizationPoliciesRegeneratePrimaryKeyCallback(OAIHttpRequestWorker *worker);
    void authorizationPoliciesRegenerateSecondaryKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authorizationPoliciesCreateOrUpdateSignal(OAIAuthorizationPolicyResourceFormat summary);
    void authorizationPoliciesGetSignal(OAIAuthorizationPolicyResourceFormat summary);
    void authorizationPoliciesListByHubSignal(OAIAuthorizationPolicyListResult summary);
    void authorizationPoliciesRegeneratePrimaryKeySignal(OAIAuthorizationPolicy summary);
    void authorizationPoliciesRegenerateSecondaryKeySignal(OAIAuthorizationPolicy summary);


    void authorizationPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationPolicyResourceFormat summary);
    void authorizationPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationPolicyResourceFormat summary);
    void authorizationPoliciesListByHubSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationPolicyListResult summary);
    void authorizationPoliciesRegeneratePrimaryKeySignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationPolicy summary);
    void authorizationPoliciesRegenerateSecondaryKeySignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationPolicy summary);

    Q_DECL_DEPRECATED_X("Use authorizationPoliciesCreateOrUpdateSignalError() instead")
    void authorizationPoliciesCreateOrUpdateSignalE(OAIAuthorizationPolicyResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationPoliciesCreateOrUpdateSignalError(OAIAuthorizationPolicyResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationPoliciesGetSignalError() instead")
    void authorizationPoliciesGetSignalE(OAIAuthorizationPolicyResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationPoliciesGetSignalError(OAIAuthorizationPolicyResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationPoliciesListByHubSignalError() instead")
    void authorizationPoliciesListByHubSignalE(OAIAuthorizationPolicyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationPoliciesListByHubSignalError(OAIAuthorizationPolicyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationPoliciesRegeneratePrimaryKeySignalError() instead")
    void authorizationPoliciesRegeneratePrimaryKeySignalE(OAIAuthorizationPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationPoliciesRegeneratePrimaryKeySignalError(OAIAuthorizationPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationPoliciesRegenerateSecondaryKeySignalError() instead")
    void authorizationPoliciesRegenerateSecondaryKeySignalE(OAIAuthorizationPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationPoliciesRegenerateSecondaryKeySignalError(OAIAuthorizationPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authorizationPoliciesCreateOrUpdateSignalErrorFull() instead")
    void authorizationPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationPoliciesGetSignalErrorFull() instead")
    void authorizationPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationPoliciesListByHubSignalErrorFull() instead")
    void authorizationPoliciesListByHubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationPoliciesListByHubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationPoliciesRegeneratePrimaryKeySignalErrorFull() instead")
    void authorizationPoliciesRegeneratePrimaryKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationPoliciesRegeneratePrimaryKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationPoliciesRegenerateSecondaryKeySignalErrorFull() instead")
    void authorizationPoliciesRegenerateSecondaryKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationPoliciesRegenerateSecondaryKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
