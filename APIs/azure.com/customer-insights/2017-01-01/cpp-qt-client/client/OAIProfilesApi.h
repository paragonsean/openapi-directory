/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProfilesApi_H
#define OAI_OAIProfilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIKpiDefinition.h"
#include "OAIProfileListResult.h"
#include "OAIProfileResourceFormat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProfilesApi : public QObject {
    Q_OBJECT

public:
    OAIProfilesApi(const int timeOut = 0);
    ~OAIProfilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIProfileResourceFormat [required]
    */
    virtual void profilesCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &profile_name, const QString &api_version, const QString &subscription_id, const OAIProfileResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  locale_code QString [optional]
    */
    virtual void profilesDelete(const QString &resource_group_name, const QString &hub_name, const QString &profile_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &locale_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  locale_code QString [optional]
    */
    virtual void profilesGet(const QString &resource_group_name, const QString &hub_name, const QString &profile_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &locale_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  profile_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void profilesGetEnrichingKpis(const QString &resource_group_name, const QString &hub_name, const QString &profile_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  locale_code QString [optional]
    */
    virtual void profilesListByHub(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &locale_code = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void profilesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void profilesDeleteCallback(OAIHttpRequestWorker *worker);
    void profilesGetCallback(OAIHttpRequestWorker *worker);
    void profilesGetEnrichingKpisCallback(OAIHttpRequestWorker *worker);
    void profilesListByHubCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void profilesCreateOrUpdateSignal(OAIProfileResourceFormat summary);
    void profilesDeleteSignal();
    void profilesGetSignal(OAIProfileResourceFormat summary);
    void profilesGetEnrichingKpisSignal(QList<OAIKpiDefinition> summary);
    void profilesListByHubSignal(OAIProfileListResult summary);


    void profilesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProfileResourceFormat summary);
    void profilesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void profilesGetSignalFull(OAIHttpRequestWorker *worker, OAIProfileResourceFormat summary);
    void profilesGetEnrichingKpisSignalFull(OAIHttpRequestWorker *worker, QList<OAIKpiDefinition> summary);
    void profilesListByHubSignalFull(OAIHttpRequestWorker *worker, OAIProfileListResult summary);

    Q_DECL_DEPRECATED_X("Use profilesCreateOrUpdateSignalError() instead")
    void profilesCreateOrUpdateSignalE(OAIProfileResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesCreateOrUpdateSignalError(OAIProfileResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesDeleteSignalError() instead")
    void profilesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void profilesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGetSignalError() instead")
    void profilesGetSignalE(OAIProfileResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGetSignalError(OAIProfileResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGetEnrichingKpisSignalError() instead")
    void profilesGetEnrichingKpisSignalE(QList<OAIKpiDefinition> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGetEnrichingKpisSignalError(QList<OAIKpiDefinition> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListByHubSignalError() instead")
    void profilesListByHubSignalE(OAIProfileListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListByHubSignalError(OAIProfileListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use profilesCreateOrUpdateSignalErrorFull() instead")
    void profilesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesDeleteSignalErrorFull() instead")
    void profilesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGetSignalErrorFull() instead")
    void profilesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesGetEnrichingKpisSignalErrorFull() instead")
    void profilesGetEnrichingKpisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesGetEnrichingKpisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesListByHubSignalErrorFull() instead")
    void profilesListByHubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesListByHubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
