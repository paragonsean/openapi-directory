/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInteractionTypeDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInteractionTypeDefinition::OAIInteractionTypeDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInteractionTypeDefinition::OAIInteractionTypeDefinition() {
    this->initializeModel();
}

OAIInteractionTypeDefinition::~OAIInteractionTypeDefinition() {}

void OAIInteractionTypeDefinition::initializeModel() {

    m_data_source_precedence_rules_isSet = false;
    m_data_source_precedence_rules_isValid = false;

    m_default_data_source_isSet = false;
    m_default_data_source_isValid = false;

    m_id_property_names_isSet = false;
    m_id_property_names_isValid = false;

    m_is_activity_isSet = false;
    m_is_activity_isValid = false;

    m_participant_profiles_isSet = false;
    m_participant_profiles_isValid = false;

    m_primary_participant_profile_property_name_isSet = false;
    m_primary_participant_profile_property_name_isValid = false;

    m_api_entity_set_name_isSet = false;
    m_api_entity_set_name_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_instances_count_isSet = false;
    m_instances_count_isValid = false;

    m_last_changed_utc_isSet = false;
    m_last_changed_utc_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_schema_item_type_link_isSet = false;
    m_schema_item_type_link_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_timestamp_field_name_isSet = false;
    m_timestamp_field_name_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_large_image_isSet = false;
    m_large_image_isValid = false;

    m_localized_attributes_isSet = false;
    m_localized_attributes_isValid = false;

    m_medium_image_isSet = false;
    m_medium_image_isValid = false;

    m_small_image_isSet = false;
    m_small_image_isValid = false;
}

void OAIInteractionTypeDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInteractionTypeDefinition::fromJsonObject(QJsonObject json) {

    m_data_source_precedence_rules_isValid = ::OpenAPI::fromJsonValue(m_data_source_precedence_rules, json[QString("dataSourcePrecedenceRules")]);
    m_data_source_precedence_rules_isSet = !json[QString("dataSourcePrecedenceRules")].isNull() && m_data_source_precedence_rules_isValid;

    m_default_data_source_isValid = ::OpenAPI::fromJsonValue(m_default_data_source, json[QString("defaultDataSource")]);
    m_default_data_source_isSet = !json[QString("defaultDataSource")].isNull() && m_default_data_source_isValid;

    m_id_property_names_isValid = ::OpenAPI::fromJsonValue(m_id_property_names, json[QString("idPropertyNames")]);
    m_id_property_names_isSet = !json[QString("idPropertyNames")].isNull() && m_id_property_names_isValid;

    m_is_activity_isValid = ::OpenAPI::fromJsonValue(m_is_activity, json[QString("isActivity")]);
    m_is_activity_isSet = !json[QString("isActivity")].isNull() && m_is_activity_isValid;

    m_participant_profiles_isValid = ::OpenAPI::fromJsonValue(m_participant_profiles, json[QString("participantProfiles")]);
    m_participant_profiles_isSet = !json[QString("participantProfiles")].isNull() && m_participant_profiles_isValid;

    m_primary_participant_profile_property_name_isValid = ::OpenAPI::fromJsonValue(m_primary_participant_profile_property_name, json[QString("primaryParticipantProfilePropertyName")]);
    m_primary_participant_profile_property_name_isSet = !json[QString("primaryParticipantProfilePropertyName")].isNull() && m_primary_participant_profile_property_name_isValid;

    m_api_entity_set_name_isValid = ::OpenAPI::fromJsonValue(m_api_entity_set_name, json[QString("apiEntitySetName")]);
    m_api_entity_set_name_isSet = !json[QString("apiEntitySetName")].isNull() && m_api_entity_set_name_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_instances_count_isValid = ::OpenAPI::fromJsonValue(m_instances_count, json[QString("instancesCount")]);
    m_instances_count_isSet = !json[QString("instancesCount")].isNull() && m_instances_count_isValid;

    m_last_changed_utc_isValid = ::OpenAPI::fromJsonValue(m_last_changed_utc, json[QString("lastChangedUtc")]);
    m_last_changed_utc_isSet = !json[QString("lastChangedUtc")].isNull() && m_last_changed_utc_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_schema_item_type_link_isValid = ::OpenAPI::fromJsonValue(m_schema_item_type_link, json[QString("schemaItemTypeLink")]);
    m_schema_item_type_link_isSet = !json[QString("schemaItemTypeLink")].isNull() && m_schema_item_type_link_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_timestamp_field_name_isValid = ::OpenAPI::fromJsonValue(m_timestamp_field_name, json[QString("timestampFieldName")]);
    m_timestamp_field_name_isSet = !json[QString("timestampFieldName")].isNull() && m_timestamp_field_name_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("typeName")]);
    m_type_name_isSet = !json[QString("typeName")].isNull() && m_type_name_isValid;

    if(json["attributes"].isObject()){
        auto varmap = json["attributes"].toObject().toVariantMap();
        m_attributes_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_attributes_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_attributes_isSet &= !jval.isNull() && m_attributes_isValid;
                m_attributes.insert(m_attributes.end(), val, item);
            }
        }
    }

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_large_image_isValid = ::OpenAPI::fromJsonValue(m_large_image, json[QString("largeImage")]);
    m_large_image_isSet = !json[QString("largeImage")].isNull() && m_large_image_isValid;

    if(json["localizedAttributes"].isObject()){
        auto varmap = json["localizedAttributes"].toObject().toVariantMap();
        m_localized_attributes_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_localized_attributes_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_localized_attributes_isSet &= !jval.isNull() && m_localized_attributes_isValid;
                m_localized_attributes.insert(m_localized_attributes.end(), val, item);
            }
        }
    }

    m_medium_image_isValid = ::OpenAPI::fromJsonValue(m_medium_image, json[QString("mediumImage")]);
    m_medium_image_isSet = !json[QString("mediumImage")].isNull() && m_medium_image_isValid;

    m_small_image_isValid = ::OpenAPI::fromJsonValue(m_small_image, json[QString("smallImage")]);
    m_small_image_isSet = !json[QString("smallImage")].isNull() && m_small_image_isValid;
}

QString OAIInteractionTypeDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInteractionTypeDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_precedence_rules.size() > 0) {
        obj.insert(QString("dataSourcePrecedenceRules"), ::OpenAPI::toJsonValue(m_data_source_precedence_rules));
    }
    if (m_default_data_source.isSet()) {
        obj.insert(QString("defaultDataSource"), ::OpenAPI::toJsonValue(m_default_data_source));
    }
    if (m_id_property_names.size() > 0) {
        obj.insert(QString("idPropertyNames"), ::OpenAPI::toJsonValue(m_id_property_names));
    }
    if (m_is_activity_isSet) {
        obj.insert(QString("isActivity"), ::OpenAPI::toJsonValue(m_is_activity));
    }
    if (m_participant_profiles.size() > 0) {
        obj.insert(QString("participantProfiles"), ::OpenAPI::toJsonValue(m_participant_profiles));
    }
    if (m_primary_participant_profile_property_name_isSet) {
        obj.insert(QString("primaryParticipantProfilePropertyName"), ::OpenAPI::toJsonValue(m_primary_participant_profile_property_name));
    }
    if (m_api_entity_set_name_isSet) {
        obj.insert(QString("apiEntitySetName"), ::OpenAPI::toJsonValue(m_api_entity_set_name));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_instances_count_isSet) {
        obj.insert(QString("instancesCount"), ::OpenAPI::toJsonValue(m_instances_count));
    }
    if (m_last_changed_utc_isSet) {
        obj.insert(QString("lastChangedUtc"), ::OpenAPI::toJsonValue(m_last_changed_utc));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_schema_item_type_link_isSet) {
        obj.insert(QString("schemaItemTypeLink"), ::OpenAPI::toJsonValue(m_schema_item_type_link));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_timestamp_field_name_isSet) {
        obj.insert(QString("timestampFieldName"), ::OpenAPI::toJsonValue(m_timestamp_field_name));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("typeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_attributes.size() > 0) {
        
        obj.insert(QString("attributes"), toJsonValue(m_attributes));
    }
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_large_image_isSet) {
        obj.insert(QString("largeImage"), ::OpenAPI::toJsonValue(m_large_image));
    }
    if (m_localized_attributes.size() > 0) {
        
        obj.insert(QString("localizedAttributes"), toJsonValue(m_localized_attributes));
    }
    if (m_medium_image_isSet) {
        obj.insert(QString("mediumImage"), ::OpenAPI::toJsonValue(m_medium_image));
    }
    if (m_small_image_isSet) {
        obj.insert(QString("smallImage"), ::OpenAPI::toJsonValue(m_small_image));
    }
    return obj;
}

QList<OAIDataSourcePrecedence> OAIInteractionTypeDefinition::getDataSourcePrecedenceRules() const {
    return m_data_source_precedence_rules;
}
void OAIInteractionTypeDefinition::setDataSourcePrecedenceRules(const QList<OAIDataSourcePrecedence> &data_source_precedence_rules) {
    m_data_source_precedence_rules = data_source_precedence_rules;
    m_data_source_precedence_rules_isSet = true;
}

bool OAIInteractionTypeDefinition::is_data_source_precedence_rules_Set() const{
    return m_data_source_precedence_rules_isSet;
}

bool OAIInteractionTypeDefinition::is_data_source_precedence_rules_Valid() const{
    return m_data_source_precedence_rules_isValid;
}

OAIDataSource OAIInteractionTypeDefinition::getDefaultDataSource() const {
    return m_default_data_source;
}
void OAIInteractionTypeDefinition::setDefaultDataSource(const OAIDataSource &default_data_source) {
    m_default_data_source = default_data_source;
    m_default_data_source_isSet = true;
}

bool OAIInteractionTypeDefinition::is_default_data_source_Set() const{
    return m_default_data_source_isSet;
}

bool OAIInteractionTypeDefinition::is_default_data_source_Valid() const{
    return m_default_data_source_isValid;
}

QList<QString> OAIInteractionTypeDefinition::getIdPropertyNames() const {
    return m_id_property_names;
}
void OAIInteractionTypeDefinition::setIdPropertyNames(const QList<QString> &id_property_names) {
    m_id_property_names = id_property_names;
    m_id_property_names_isSet = true;
}

bool OAIInteractionTypeDefinition::is_id_property_names_Set() const{
    return m_id_property_names_isSet;
}

bool OAIInteractionTypeDefinition::is_id_property_names_Valid() const{
    return m_id_property_names_isValid;
}

bool OAIInteractionTypeDefinition::isIsActivity() const {
    return m_is_activity;
}
void OAIInteractionTypeDefinition::setIsActivity(const bool &is_activity) {
    m_is_activity = is_activity;
    m_is_activity_isSet = true;
}

bool OAIInteractionTypeDefinition::is_is_activity_Set() const{
    return m_is_activity_isSet;
}

bool OAIInteractionTypeDefinition::is_is_activity_Valid() const{
    return m_is_activity_isValid;
}

QList<OAIParticipant> OAIInteractionTypeDefinition::getParticipantProfiles() const {
    return m_participant_profiles;
}
void OAIInteractionTypeDefinition::setParticipantProfiles(const QList<OAIParticipant> &participant_profiles) {
    m_participant_profiles = participant_profiles;
    m_participant_profiles_isSet = true;
}

bool OAIInteractionTypeDefinition::is_participant_profiles_Set() const{
    return m_participant_profiles_isSet;
}

bool OAIInteractionTypeDefinition::is_participant_profiles_Valid() const{
    return m_participant_profiles_isValid;
}

QString OAIInteractionTypeDefinition::getPrimaryParticipantProfilePropertyName() const {
    return m_primary_participant_profile_property_name;
}
void OAIInteractionTypeDefinition::setPrimaryParticipantProfilePropertyName(const QString &primary_participant_profile_property_name) {
    m_primary_participant_profile_property_name = primary_participant_profile_property_name;
    m_primary_participant_profile_property_name_isSet = true;
}

bool OAIInteractionTypeDefinition::is_primary_participant_profile_property_name_Set() const{
    return m_primary_participant_profile_property_name_isSet;
}

bool OAIInteractionTypeDefinition::is_primary_participant_profile_property_name_Valid() const{
    return m_primary_participant_profile_property_name_isValid;
}

QString OAIInteractionTypeDefinition::getApiEntitySetName() const {
    return m_api_entity_set_name;
}
void OAIInteractionTypeDefinition::setApiEntitySetName(const QString &api_entity_set_name) {
    m_api_entity_set_name = api_entity_set_name;
    m_api_entity_set_name_isSet = true;
}

bool OAIInteractionTypeDefinition::is_api_entity_set_name_Set() const{
    return m_api_entity_set_name_isSet;
}

bool OAIInteractionTypeDefinition::is_api_entity_set_name_Valid() const{
    return m_api_entity_set_name_isValid;
}

QString OAIInteractionTypeDefinition::getEntityType() const {
    return m_entity_type;
}
void OAIInteractionTypeDefinition::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIInteractionTypeDefinition::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIInteractionTypeDefinition::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QList<OAIPropertyDefinition> OAIInteractionTypeDefinition::getFields() const {
    return m_fields;
}
void OAIInteractionTypeDefinition::setFields(const QList<OAIPropertyDefinition> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIInteractionTypeDefinition::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIInteractionTypeDefinition::is_fields_Valid() const{
    return m_fields_isValid;
}

qint32 OAIInteractionTypeDefinition::getInstancesCount() const {
    return m_instances_count;
}
void OAIInteractionTypeDefinition::setInstancesCount(const qint32 &instances_count) {
    m_instances_count = instances_count;
    m_instances_count_isSet = true;
}

bool OAIInteractionTypeDefinition::is_instances_count_Set() const{
    return m_instances_count_isSet;
}

bool OAIInteractionTypeDefinition::is_instances_count_Valid() const{
    return m_instances_count_isValid;
}

QDateTime OAIInteractionTypeDefinition::getLastChangedUtc() const {
    return m_last_changed_utc;
}
void OAIInteractionTypeDefinition::setLastChangedUtc(const QDateTime &last_changed_utc) {
    m_last_changed_utc = last_changed_utc;
    m_last_changed_utc_isSet = true;
}

bool OAIInteractionTypeDefinition::is_last_changed_utc_Set() const{
    return m_last_changed_utc_isSet;
}

bool OAIInteractionTypeDefinition::is_last_changed_utc_Valid() const{
    return m_last_changed_utc_isValid;
}

OAIProvisioningState OAIInteractionTypeDefinition::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIInteractionTypeDefinition::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIInteractionTypeDefinition::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIInteractionTypeDefinition::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIInteractionTypeDefinition::getSchemaItemTypeLink() const {
    return m_schema_item_type_link;
}
void OAIInteractionTypeDefinition::setSchemaItemTypeLink(const QString &schema_item_type_link) {
    m_schema_item_type_link = schema_item_type_link;
    m_schema_item_type_link_isSet = true;
}

bool OAIInteractionTypeDefinition::is_schema_item_type_link_Set() const{
    return m_schema_item_type_link_isSet;
}

bool OAIInteractionTypeDefinition::is_schema_item_type_link_Valid() const{
    return m_schema_item_type_link_isValid;
}

QString OAIInteractionTypeDefinition::getTenantId() const {
    return m_tenant_id;
}
void OAIInteractionTypeDefinition::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIInteractionTypeDefinition::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIInteractionTypeDefinition::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIInteractionTypeDefinition::getTimestampFieldName() const {
    return m_timestamp_field_name;
}
void OAIInteractionTypeDefinition::setTimestampFieldName(const QString &timestamp_field_name) {
    m_timestamp_field_name = timestamp_field_name;
    m_timestamp_field_name_isSet = true;
}

bool OAIInteractionTypeDefinition::is_timestamp_field_name_Set() const{
    return m_timestamp_field_name_isSet;
}

bool OAIInteractionTypeDefinition::is_timestamp_field_name_Valid() const{
    return m_timestamp_field_name_isValid;
}

QString OAIInteractionTypeDefinition::getTypeName() const {
    return m_type_name;
}
void OAIInteractionTypeDefinition::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIInteractionTypeDefinition::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIInteractionTypeDefinition::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QMap<QString, QList<QString>> OAIInteractionTypeDefinition::getAttributes() const {
    return m_attributes;
}
void OAIInteractionTypeDefinition::setAttributes(const QMap<QString, QList<QString>> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIInteractionTypeDefinition::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIInteractionTypeDefinition::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QMap<QString, QString> OAIInteractionTypeDefinition::getDescription() const {
    return m_description;
}
void OAIInteractionTypeDefinition::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInteractionTypeDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInteractionTypeDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIInteractionTypeDefinition::getDisplayName() const {
    return m_display_name;
}
void OAIInteractionTypeDefinition::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInteractionTypeDefinition::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInteractionTypeDefinition::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIInteractionTypeDefinition::getLargeImage() const {
    return m_large_image;
}
void OAIInteractionTypeDefinition::setLargeImage(const QString &large_image) {
    m_large_image = large_image;
    m_large_image_isSet = true;
}

bool OAIInteractionTypeDefinition::is_large_image_Set() const{
    return m_large_image_isSet;
}

bool OAIInteractionTypeDefinition::is_large_image_Valid() const{
    return m_large_image_isValid;
}

QMap<QString, QMap<QString, QString>> OAIInteractionTypeDefinition::getLocalizedAttributes() const {
    return m_localized_attributes;
}
void OAIInteractionTypeDefinition::setLocalizedAttributes(const QMap<QString, QMap<QString, QString>> &localized_attributes) {
    m_localized_attributes = localized_attributes;
    m_localized_attributes_isSet = true;
}

bool OAIInteractionTypeDefinition::is_localized_attributes_Set() const{
    return m_localized_attributes_isSet;
}

bool OAIInteractionTypeDefinition::is_localized_attributes_Valid() const{
    return m_localized_attributes_isValid;
}

QString OAIInteractionTypeDefinition::getMediumImage() const {
    return m_medium_image;
}
void OAIInteractionTypeDefinition::setMediumImage(const QString &medium_image) {
    m_medium_image = medium_image;
    m_medium_image_isSet = true;
}

bool OAIInteractionTypeDefinition::is_medium_image_Set() const{
    return m_medium_image_isSet;
}

bool OAIInteractionTypeDefinition::is_medium_image_Valid() const{
    return m_medium_image_isValid;
}

QString OAIInteractionTypeDefinition::getSmallImage() const {
    return m_small_image;
}
void OAIInteractionTypeDefinition::setSmallImage(const QString &small_image) {
    m_small_image = small_image;
    m_small_image_isSet = true;
}

bool OAIInteractionTypeDefinition::is_small_image_Set() const{
    return m_small_image_isSet;
}

bool OAIInteractionTypeDefinition::is_small_image_Valid() const{
    return m_small_image_isValid;
}

bool OAIInteractionTypeDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_precedence_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_property_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_participant_profile_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_entity_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_changed_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_item_type_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInteractionTypeDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
