/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageDefinition::OAIImageDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageDefinition::OAIImageDefinition() {
    this->initializeModel();
}

OAIImageDefinition::~OAIImageDefinition() {}

void OAIImageDefinition::initializeModel() {

    m_content_url_isSet = false;
    m_content_url_isValid = false;

    m_image_exists_isSet = false;
    m_image_exists_isValid = false;

    m_relative_path_isSet = false;
    m_relative_path_isValid = false;
}

void OAIImageDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageDefinition::fromJsonObject(QJsonObject json) {

    m_content_url_isValid = ::OpenAPI::fromJsonValue(m_content_url, json[QString("contentUrl")]);
    m_content_url_isSet = !json[QString("contentUrl")].isNull() && m_content_url_isValid;

    m_image_exists_isValid = ::OpenAPI::fromJsonValue(m_image_exists, json[QString("imageExists")]);
    m_image_exists_isSet = !json[QString("imageExists")].isNull() && m_image_exists_isValid;

    m_relative_path_isValid = ::OpenAPI::fromJsonValue(m_relative_path, json[QString("relativePath")]);
    m_relative_path_isSet = !json[QString("relativePath")].isNull() && m_relative_path_isValid;
}

QString OAIImageDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_content_url_isSet) {
        obj.insert(QString("contentUrl"), ::OpenAPI::toJsonValue(m_content_url));
    }
    if (m_image_exists_isSet) {
        obj.insert(QString("imageExists"), ::OpenAPI::toJsonValue(m_image_exists));
    }
    if (m_relative_path_isSet) {
        obj.insert(QString("relativePath"), ::OpenAPI::toJsonValue(m_relative_path));
    }
    return obj;
}

QString OAIImageDefinition::getContentUrl() const {
    return m_content_url;
}
void OAIImageDefinition::setContentUrl(const QString &content_url) {
    m_content_url = content_url;
    m_content_url_isSet = true;
}

bool OAIImageDefinition::is_content_url_Set() const{
    return m_content_url_isSet;
}

bool OAIImageDefinition::is_content_url_Valid() const{
    return m_content_url_isValid;
}

bool OAIImageDefinition::isImageExists() const {
    return m_image_exists;
}
void OAIImageDefinition::setImageExists(const bool &image_exists) {
    m_image_exists = image_exists;
    m_image_exists_isSet = true;
}

bool OAIImageDefinition::is_image_exists_Set() const{
    return m_image_exists_isSet;
}

bool OAIImageDefinition::is_image_exists_Valid() const{
    return m_image_exists_isValid;
}

QString OAIImageDefinition::getRelativePath() const {
    return m_relative_path;
}
void OAIImageDefinition::setRelativePath(const QString &relative_path) {
    m_relative_path = relative_path;
    m_relative_path_isSet = true;
}

bool OAIImageDefinition::is_relative_path_Set() const{
    return m_relative_path_isSet;
}

bool OAIImageDefinition::is_relative_path_Valid() const{
    return m_relative_path_isValid;
}

bool OAIImageDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_exists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
