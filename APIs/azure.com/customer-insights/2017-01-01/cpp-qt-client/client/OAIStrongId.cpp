/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStrongId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStrongId::OAIStrongId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStrongId::OAIStrongId() {
    this->initializeModel();
}

OAIStrongId::~OAIStrongId() {}

void OAIStrongId::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_key_property_names_isSet = false;
    m_key_property_names_isValid = false;

    m_strong_id_name_isSet = false;
    m_strong_id_name_isValid = false;
}

void OAIStrongId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStrongId::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_key_property_names_isValid = ::OpenAPI::fromJsonValue(m_key_property_names, json[QString("keyPropertyNames")]);
    m_key_property_names_isSet = !json[QString("keyPropertyNames")].isNull() && m_key_property_names_isValid;

    m_strong_id_name_isValid = ::OpenAPI::fromJsonValue(m_strong_id_name, json[QString("strongIdName")]);
    m_strong_id_name_isSet = !json[QString("strongIdName")].isNull() && m_strong_id_name_isValid;
}

QString OAIStrongId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStrongId::asJsonObject() const {
    QJsonObject obj;
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_key_property_names.size() > 0) {
        obj.insert(QString("keyPropertyNames"), ::OpenAPI::toJsonValue(m_key_property_names));
    }
    if (m_strong_id_name_isSet) {
        obj.insert(QString("strongIdName"), ::OpenAPI::toJsonValue(m_strong_id_name));
    }
    return obj;
}

QMap<QString, QString> OAIStrongId::getDescription() const {
    return m_description;
}
void OAIStrongId::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStrongId::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStrongId::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIStrongId::getDisplayName() const {
    return m_display_name;
}
void OAIStrongId::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIStrongId::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIStrongId::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIStrongId::getKeyPropertyNames() const {
    return m_key_property_names;
}
void OAIStrongId::setKeyPropertyNames(const QList<QString> &key_property_names) {
    m_key_property_names = key_property_names;
    m_key_property_names_isSet = true;
}

bool OAIStrongId::is_key_property_names_Set() const{
    return m_key_property_names_isSet;
}

bool OAIStrongId::is_key_property_names_Valid() const{
    return m_key_property_names_isValid;
}

QString OAIStrongId::getStrongIdName() const {
    return m_strong_id_name;
}
void OAIStrongId::setStrongIdName(const QString &strong_id_name) {
    m_strong_id_name = strong_id_name;
    m_strong_id_name_isSet = true;
}

bool OAIStrongId::is_strong_id_name_Set() const{
    return m_strong_id_name_isSet;
}

bool OAIStrongId::is_strong_id_name_Valid() const{
    return m_strong_id_name_isValid;
}

bool OAIStrongId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_property_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_strong_id_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStrongId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_property_names_isValid && m_strong_id_name_isValid && true;
}

} // namespace OpenAPI
