/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConnectorMappingsApi_H
#define OAI_OAIConnectorMappingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectorMappingListResult.h"
#include "OAIConnectorMappingResourceFormat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConnectorMappingsApi : public QObject {
    Q_OBJECT

public:
    OAIConnectorMappingsApi(const int timeOut = 0);
    ~OAIConnectorMappingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  connector_name QString [required]
    * @param[in]  mapping_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIConnectorMappingResourceFormat [required]
    */
    virtual void connectorMappingsCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &connector_name, const QString &mapping_name, const QString &api_version, const QString &subscription_id, const OAIConnectorMappingResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  connector_name QString [required]
    * @param[in]  mapping_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectorMappingsDelete(const QString &resource_group_name, const QString &hub_name, const QString &connector_name, const QString &mapping_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  connector_name QString [required]
    * @param[in]  mapping_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectorMappingsGet(const QString &resource_group_name, const QString &hub_name, const QString &connector_name, const QString &mapping_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  connector_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void connectorMappingsListByConnector(const QString &resource_group_name, const QString &hub_name, const QString &connector_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void connectorMappingsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void connectorMappingsDeleteCallback(OAIHttpRequestWorker *worker);
    void connectorMappingsGetCallback(OAIHttpRequestWorker *worker);
    void connectorMappingsListByConnectorCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void connectorMappingsCreateOrUpdateSignal(OAIConnectorMappingResourceFormat summary);
    void connectorMappingsDeleteSignal();
    void connectorMappingsGetSignal(OAIConnectorMappingResourceFormat summary);
    void connectorMappingsListByConnectorSignal(OAIConnectorMappingListResult summary);


    void connectorMappingsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConnectorMappingResourceFormat summary);
    void connectorMappingsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void connectorMappingsGetSignalFull(OAIHttpRequestWorker *worker, OAIConnectorMappingResourceFormat summary);
    void connectorMappingsListByConnectorSignalFull(OAIHttpRequestWorker *worker, OAIConnectorMappingListResult summary);

    Q_DECL_DEPRECATED_X("Use connectorMappingsCreateOrUpdateSignalError() instead")
    void connectorMappingsCreateOrUpdateSignalE(OAIConnectorMappingResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorMappingsCreateOrUpdateSignalError(OAIConnectorMappingResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorMappingsDeleteSignalError() instead")
    void connectorMappingsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void connectorMappingsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorMappingsGetSignalError() instead")
    void connectorMappingsGetSignalE(OAIConnectorMappingResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorMappingsGetSignalError(OAIConnectorMappingResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorMappingsListByConnectorSignalError() instead")
    void connectorMappingsListByConnectorSignalE(OAIConnectorMappingListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorMappingsListByConnectorSignalError(OAIConnectorMappingListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use connectorMappingsCreateOrUpdateSignalErrorFull() instead")
    void connectorMappingsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorMappingsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorMappingsDeleteSignalErrorFull() instead")
    void connectorMappingsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorMappingsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorMappingsGetSignalErrorFull() instead")
    void connectorMappingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorMappingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectorMappingsListByConnectorSignalErrorFull() instead")
    void connectorMappingsListByConnectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectorMappingsListByConnectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
