/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationshipLinkDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationshipLinkDefinition::OAIRelationshipLinkDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationshipLinkDefinition::OAIRelationshipLinkDefinition() {
    this->initializeModel();
}

OAIRelationshipLinkDefinition::~OAIRelationshipLinkDefinition() {}

void OAIRelationshipLinkDefinition::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_interaction_type_isSet = false;
    m_interaction_type_isValid = false;

    m_link_name_isSet = false;
    m_link_name_isValid = false;

    m_mappings_isSet = false;
    m_mappings_isValid = false;

    m_profile_property_references_isSet = false;
    m_profile_property_references_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_related_profile_property_references_isSet = false;
    m_related_profile_property_references_isValid = false;

    m_relationship_guid_id_isSet = false;
    m_relationship_guid_id_isValid = false;

    m_relationship_name_isSet = false;
    m_relationship_name_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIRelationshipLinkDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelationshipLinkDefinition::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_interaction_type_isValid = ::OpenAPI::fromJsonValue(m_interaction_type, json[QString("interactionType")]);
    m_interaction_type_isSet = !json[QString("interactionType")].isNull() && m_interaction_type_isValid;

    m_link_name_isValid = ::OpenAPI::fromJsonValue(m_link_name, json[QString("linkName")]);
    m_link_name_isSet = !json[QString("linkName")].isNull() && m_link_name_isValid;

    m_mappings_isValid = ::OpenAPI::fromJsonValue(m_mappings, json[QString("mappings")]);
    m_mappings_isSet = !json[QString("mappings")].isNull() && m_mappings_isValid;

    m_profile_property_references_isValid = ::OpenAPI::fromJsonValue(m_profile_property_references, json[QString("profilePropertyReferences")]);
    m_profile_property_references_isSet = !json[QString("profilePropertyReferences")].isNull() && m_profile_property_references_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_related_profile_property_references_isValid = ::OpenAPI::fromJsonValue(m_related_profile_property_references, json[QString("relatedProfilePropertyReferences")]);
    m_related_profile_property_references_isSet = !json[QString("relatedProfilePropertyReferences")].isNull() && m_related_profile_property_references_isValid;

    m_relationship_guid_id_isValid = ::OpenAPI::fromJsonValue(m_relationship_guid_id, json[QString("relationshipGuidId")]);
    m_relationship_guid_id_isSet = !json[QString("relationshipGuidId")].isNull() && m_relationship_guid_id_isValid;

    m_relationship_name_isValid = ::OpenAPI::fromJsonValue(m_relationship_name, json[QString("relationshipName")]);
    m_relationship_name_isSet = !json[QString("relationshipName")].isNull() && m_relationship_name_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIRelationshipLinkDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelationshipLinkDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_description.size() > 0) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_interaction_type_isSet) {
        obj.insert(QString("interactionType"), ::OpenAPI::toJsonValue(m_interaction_type));
    }
    if (m_link_name_isSet) {
        obj.insert(QString("linkName"), ::OpenAPI::toJsonValue(m_link_name));
    }
    if (m_mappings.size() > 0) {
        obj.insert(QString("mappings"), ::OpenAPI::toJsonValue(m_mappings));
    }
    if (m_profile_property_references.size() > 0) {
        obj.insert(QString("profilePropertyReferences"), ::OpenAPI::toJsonValue(m_profile_property_references));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_related_profile_property_references.size() > 0) {
        obj.insert(QString("relatedProfilePropertyReferences"), ::OpenAPI::toJsonValue(m_related_profile_property_references));
    }
    if (m_relationship_guid_id_isSet) {
        obj.insert(QString("relationshipGuidId"), ::OpenAPI::toJsonValue(m_relationship_guid_id));
    }
    if (m_relationship_name_isSet) {
        obj.insert(QString("relationshipName"), ::OpenAPI::toJsonValue(m_relationship_name));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QMap<QString, QString> OAIRelationshipLinkDefinition::getDescription() const {
    return m_description;
}
void OAIRelationshipLinkDefinition::setDescription(const QMap<QString, QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRelationshipLinkDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIRelationshipLinkDefinition::getDisplayName() const {
    return m_display_name;
}
void OAIRelationshipLinkDefinition::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRelationshipLinkDefinition::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIRelationshipLinkDefinition::getInteractionType() const {
    return m_interaction_type;
}
void OAIRelationshipLinkDefinition::setInteractionType(const QString &interaction_type) {
    m_interaction_type = interaction_type;
    m_interaction_type_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_interaction_type_Set() const{
    return m_interaction_type_isSet;
}

bool OAIRelationshipLinkDefinition::is_interaction_type_Valid() const{
    return m_interaction_type_isValid;
}

QString OAIRelationshipLinkDefinition::getLinkName() const {
    return m_link_name;
}
void OAIRelationshipLinkDefinition::setLinkName(const QString &link_name) {
    m_link_name = link_name;
    m_link_name_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_link_name_Set() const{
    return m_link_name_isSet;
}

bool OAIRelationshipLinkDefinition::is_link_name_Valid() const{
    return m_link_name_isValid;
}

QList<OAIRelationshipLinkFieldMapping> OAIRelationshipLinkDefinition::getMappings() const {
    return m_mappings;
}
void OAIRelationshipLinkDefinition::setMappings(const QList<OAIRelationshipLinkFieldMapping> &mappings) {
    m_mappings = mappings;
    m_mappings_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_mappings_Set() const{
    return m_mappings_isSet;
}

bool OAIRelationshipLinkDefinition::is_mappings_Valid() const{
    return m_mappings_isValid;
}

QList<OAIParticipantPropertyReference> OAIRelationshipLinkDefinition::getProfilePropertyReferences() const {
    return m_profile_property_references;
}
void OAIRelationshipLinkDefinition::setProfilePropertyReferences(const QList<OAIParticipantPropertyReference> &profile_property_references) {
    m_profile_property_references = profile_property_references;
    m_profile_property_references_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_profile_property_references_Set() const{
    return m_profile_property_references_isSet;
}

bool OAIRelationshipLinkDefinition::is_profile_property_references_Valid() const{
    return m_profile_property_references_isValid;
}

OAIProvisioningState OAIRelationshipLinkDefinition::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRelationshipLinkDefinition::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRelationshipLinkDefinition::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIParticipantPropertyReference> OAIRelationshipLinkDefinition::getRelatedProfilePropertyReferences() const {
    return m_related_profile_property_references;
}
void OAIRelationshipLinkDefinition::setRelatedProfilePropertyReferences(const QList<OAIParticipantPropertyReference> &related_profile_property_references) {
    m_related_profile_property_references = related_profile_property_references;
    m_related_profile_property_references_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_related_profile_property_references_Set() const{
    return m_related_profile_property_references_isSet;
}

bool OAIRelationshipLinkDefinition::is_related_profile_property_references_Valid() const{
    return m_related_profile_property_references_isValid;
}

QString OAIRelationshipLinkDefinition::getRelationshipGuidId() const {
    return m_relationship_guid_id;
}
void OAIRelationshipLinkDefinition::setRelationshipGuidId(const QString &relationship_guid_id) {
    m_relationship_guid_id = relationship_guid_id;
    m_relationship_guid_id_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_relationship_guid_id_Set() const{
    return m_relationship_guid_id_isSet;
}

bool OAIRelationshipLinkDefinition::is_relationship_guid_id_Valid() const{
    return m_relationship_guid_id_isValid;
}

QString OAIRelationshipLinkDefinition::getRelationshipName() const {
    return m_relationship_name;
}
void OAIRelationshipLinkDefinition::setRelationshipName(const QString &relationship_name) {
    m_relationship_name = relationship_name;
    m_relationship_name_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_relationship_name_Set() const{
    return m_relationship_name_isSet;
}

bool OAIRelationshipLinkDefinition::is_relationship_name_Valid() const{
    return m_relationship_name_isValid;
}

QString OAIRelationshipLinkDefinition::getTenantId() const {
    return m_tenant_id;
}
void OAIRelationshipLinkDefinition::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIRelationshipLinkDefinition::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIRelationshipLinkDefinition::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIRelationshipLinkDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_property_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_profile_property_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_guid_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelationshipLinkDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interaction_type_isValid && m_profile_property_references_isValid && m_related_profile_property_references_isValid && m_relationship_name_isValid && true;
}

} // namespace OpenAPI
