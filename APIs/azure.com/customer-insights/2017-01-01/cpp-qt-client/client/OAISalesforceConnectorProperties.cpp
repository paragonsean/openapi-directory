/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISalesforceConnectorProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISalesforceConnectorProperties::OAISalesforceConnectorProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISalesforceConnectorProperties::OAISalesforceConnectorProperties() {
    this->initializeModel();
}

OAISalesforceConnectorProperties::~OAISalesforceConnectorProperties() {}

void OAISalesforceConnectorProperties::initializeModel() {

    m_salesforcetables_isSet = false;
    m_salesforcetables_isValid = false;

    m_usersetting_isSet = false;
    m_usersetting_isValid = false;
}

void OAISalesforceConnectorProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISalesforceConnectorProperties::fromJsonObject(QJsonObject json) {

    m_salesforcetables_isValid = ::OpenAPI::fromJsonValue(m_salesforcetables, json[QString("salesforcetables")]);
    m_salesforcetables_isSet = !json[QString("salesforcetables")].isNull() && m_salesforcetables_isValid;

    m_usersetting_isValid = ::OpenAPI::fromJsonValue(m_usersetting, json[QString("usersetting")]);
    m_usersetting_isSet = !json[QString("usersetting")].isNull() && m_usersetting_isValid;
}

QString OAISalesforceConnectorProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISalesforceConnectorProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_salesforcetables.size() > 0) {
        obj.insert(QString("salesforcetables"), ::OpenAPI::toJsonValue(m_salesforcetables));
    }
    if (m_usersetting.isSet()) {
        obj.insert(QString("usersetting"), ::OpenAPI::toJsonValue(m_usersetting));
    }
    return obj;
}

QList<OAISalesforceTable> OAISalesforceConnectorProperties::getSalesforcetables() const {
    return m_salesforcetables;
}
void OAISalesforceConnectorProperties::setSalesforcetables(const QList<OAISalesforceTable> &salesforcetables) {
    m_salesforcetables = salesforcetables;
    m_salesforcetables_isSet = true;
}

bool OAISalesforceConnectorProperties::is_salesforcetables_Set() const{
    return m_salesforcetables_isSet;
}

bool OAISalesforceConnectorProperties::is_salesforcetables_Valid() const{
    return m_salesforcetables_isValid;
}

OAISalesforceDiscoverSetting OAISalesforceConnectorProperties::getUsersetting() const {
    return m_usersetting;
}
void OAISalesforceConnectorProperties::setUsersetting(const OAISalesforceDiscoverSetting &usersetting) {
    m_usersetting = usersetting;
    m_usersetting_isSet = true;
}

bool OAISalesforceConnectorProperties::is_usersetting_Set() const{
    return m_usersetting_isSet;
}

bool OAISalesforceConnectorProperties::is_usersetting_Valid() const{
    return m_usersetting_isValid;
}

bool OAISalesforceConnectorProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_salesforcetables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usersetting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISalesforceConnectorProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_salesforcetables_isValid && m_usersetting_isValid && true;
}

} // namespace OpenAPI
