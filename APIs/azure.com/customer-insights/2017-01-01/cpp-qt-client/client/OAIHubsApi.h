/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHubsApi_H
#define OAI_OAIHubsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHub.h"
#include "OAIHubListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHubsApi : public QObject {
    Q_OBJECT

public:
    OAIHubsApi(const int timeOut = 0);
    ~OAIHubsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIHub [required]
    */
    virtual void hubsCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id, const OAIHub &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void hubsDelete(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void hubsGet(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void hubsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void hubsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIHub [required]
    */
    virtual void hubsUpdate(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id, const OAIHub &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void hubsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void hubsDeleteCallback(OAIHttpRequestWorker *worker);
    void hubsGetCallback(OAIHttpRequestWorker *worker);
    void hubsListCallback(OAIHttpRequestWorker *worker);
    void hubsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void hubsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void hubsCreateOrUpdateSignal(OAIHub summary);
    void hubsDeleteSignal();
    void hubsGetSignal(OAIHub summary);
    void hubsListSignal(OAIHubListResult summary);
    void hubsListByResourceGroupSignal(OAIHubListResult summary);
    void hubsUpdateSignal(OAIHub summary);


    void hubsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIHub summary);
    void hubsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void hubsGetSignalFull(OAIHttpRequestWorker *worker, OAIHub summary);
    void hubsListSignalFull(OAIHttpRequestWorker *worker, OAIHubListResult summary);
    void hubsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIHubListResult summary);
    void hubsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIHub summary);

    Q_DECL_DEPRECATED_X("Use hubsCreateOrUpdateSignalError() instead")
    void hubsCreateOrUpdateSignalE(OAIHub summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsCreateOrUpdateSignalError(OAIHub summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubsDeleteSignalError() instead")
    void hubsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hubsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubsGetSignalError() instead")
    void hubsGetSignalE(OAIHub summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsGetSignalError(OAIHub summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubsListSignalError() instead")
    void hubsListSignalE(OAIHubListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsListSignalError(OAIHubListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubsListByResourceGroupSignalError() instead")
    void hubsListByResourceGroupSignalE(OAIHubListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsListByResourceGroupSignalError(OAIHubListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubsUpdateSignalError() instead")
    void hubsUpdateSignalE(OAIHub summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsUpdateSignalError(OAIHub summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use hubsCreateOrUpdateSignalErrorFull() instead")
    void hubsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubsDeleteSignalErrorFull() instead")
    void hubsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubsGetSignalErrorFull() instead")
    void hubsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubsListSignalErrorFull() instead")
    void hubsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubsListByResourceGroupSignalErrorFull() instead")
    void hubsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hubsUpdateSignalErrorFull() instead")
    void hubsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hubsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
