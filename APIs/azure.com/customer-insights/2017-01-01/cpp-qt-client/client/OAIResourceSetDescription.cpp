/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceSetDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceSetDescription::OAIResourceSetDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceSetDescription::OAIResourceSetDescription() {
    this->initializeModel();
}

OAIResourceSetDescription::~OAIResourceSetDescription() {}

void OAIResourceSetDescription::initializeModel() {

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_exceptions_isSet = false;
    m_exceptions_isValid = false;
}

void OAIResourceSetDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceSetDescription::fromJsonObject(QJsonObject json) {

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_exceptions_isValid = ::OpenAPI::fromJsonValue(m_exceptions, json[QString("exceptions")]);
    m_exceptions_isSet = !json[QString("exceptions")].isNull() && m_exceptions_isValid;
}

QString OAIResourceSetDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceSetDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_exceptions.size() > 0) {
        obj.insert(QString("exceptions"), ::OpenAPI::toJsonValue(m_exceptions));
    }
    return obj;
}

QList<QString> OAIResourceSetDescription::getElements() const {
    return m_elements;
}
void OAIResourceSetDescription::setElements(const QList<QString> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIResourceSetDescription::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIResourceSetDescription::is_elements_Valid() const{
    return m_elements_isValid;
}

QList<QString> OAIResourceSetDescription::getExceptions() const {
    return m_exceptions;
}
void OAIResourceSetDescription::setExceptions(const QList<QString> &exceptions) {
    m_exceptions = exceptions;
    m_exceptions_isSet = true;
}

bool OAIResourceSetDescription::is_exceptions_Set() const{
    return m_exceptions_isSet;
}

bool OAIResourceSetDescription::is_exceptions_Valid() const{
    return m_exceptions_isValid;
}

bool OAIResourceSetDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exceptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceSetDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
