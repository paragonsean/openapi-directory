/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConnectorMapping.h
 *
 * The connector mapping definition.
 */

#ifndef OAIConnectorMapping_H
#define OAIConnectorMapping_H

#include <QJsonObject>

#include "OAIConnectorMappingProperties.h"
#include "OAIConnectorType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConnectorMappingProperties;

class OAIConnectorMapping : public OAIObject {
public:
    OAIConnectorMapping();
    OAIConnectorMapping(QString json);
    ~OAIConnectorMapping() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectorMappingName() const;
    void setConnectorMappingName(const QString &connector_mapping_name);
    bool is_connector_mapping_name_Set() const;
    bool is_connector_mapping_name_Valid() const;

    QString getConnectorName() const;
    void setConnectorName(const QString &connector_name);
    bool is_connector_name_Set() const;
    bool is_connector_name_Valid() const;

    OAIConnectorType getConnectorType() const;
    void setConnectorType(const OAIConnectorType &connector_type);
    bool is_connector_type_Set() const;
    bool is_connector_type_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QString getDataFormatId() const;
    void setDataFormatId(const QString &data_format_id);
    bool is_data_format_id_Set() const;
    bool is_data_format_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getEntityType() const;
    void setEntityType(const QString &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getEntityTypeName() const;
    void setEntityTypeName(const QString &entity_type_name);
    bool is_entity_type_name_Set() const;
    bool is_entity_type_name_Valid() const;

    QDateTime getLastModified() const;
    void setLastModified(const QDateTime &last_modified);
    bool is_last_modified_Set() const;
    bool is_last_modified_Valid() const;

    OAIConnectorMappingProperties getMappingProperties() const;
    void setMappingProperties(const OAIConnectorMappingProperties &mapping_properties);
    bool is_mapping_properties_Set() const;
    bool is_mapping_properties_Valid() const;

    QDateTime getNextRunTime() const;
    void setNextRunTime(const QDateTime &next_run_time);
    bool is_next_run_time_Set() const;
    bool is_next_run_time_Valid() const;

    QString getRunId() const;
    void setRunId(const QString &run_id);
    bool is_run_id_Set() const;
    bool is_run_id_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getTenantId() const;
    void setTenantId(const QString &tenant_id);
    bool is_tenant_id_Set() const;
    bool is_tenant_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connector_mapping_name;
    bool m_connector_mapping_name_isSet;
    bool m_connector_mapping_name_isValid;

    QString m_connector_name;
    bool m_connector_name_isSet;
    bool m_connector_name_isValid;

    OAIConnectorType m_connector_type;
    bool m_connector_type_isSet;
    bool m_connector_type_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QString m_data_format_id;
    bool m_data_format_id_isSet;
    bool m_data_format_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_entity_type_name;
    bool m_entity_type_name_isSet;
    bool m_entity_type_name_isValid;

    QDateTime m_last_modified;
    bool m_last_modified_isSet;
    bool m_last_modified_isValid;

    OAIConnectorMappingProperties m_mapping_properties;
    bool m_mapping_properties_isSet;
    bool m_mapping_properties_isValid;

    QDateTime m_next_run_time;
    bool m_next_run_time_isSet;
    bool m_next_run_time_isValid;

    QString m_run_id;
    bool m_run_id_isSet;
    bool m_run_id_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_tenant_id;
    bool m_tenant_id_isSet;
    bool m_tenant_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConnectorMapping)

#endif // OAIConnectorMapping_H
