/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWidgetType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWidgetType::OAIWidgetType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWidgetType::OAIWidgetType() {
    this->initializeModel();
}

OAIWidgetType::~OAIWidgetType() {}

void OAIWidgetType::initializeModel() {

    m_changed_isSet = false;
    m_changed_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_widget_type_name_isSet = false;
    m_widget_type_name_isValid = false;

    m_widget_version_isSet = false;
    m_widget_version_isValid = false;
}

void OAIWidgetType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWidgetType::fromJsonObject(QJsonObject json) {

    m_changed_isValid = ::OpenAPI::fromJsonValue(m_changed, json[QString("changed")]);
    m_changed_isSet = !json[QString("changed")].isNull() && m_changed_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_widget_type_name_isValid = ::OpenAPI::fromJsonValue(m_widget_type_name, json[QString("widgetTypeName")]);
    m_widget_type_name_isSet = !json[QString("widgetTypeName")].isNull() && m_widget_type_name_isValid;

    m_widget_version_isValid = ::OpenAPI::fromJsonValue(m_widget_version, json[QString("widgetVersion")]);
    m_widget_version_isSet = !json[QString("widgetVersion")].isNull() && m_widget_version_isValid;
}

QString OAIWidgetType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWidgetType::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_isSet) {
        obj.insert(QString("changed"), ::OpenAPI::toJsonValue(m_changed));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name.size() > 0) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_widget_type_name_isSet) {
        obj.insert(QString("widgetTypeName"), ::OpenAPI::toJsonValue(m_widget_type_name));
    }
    if (m_widget_version_isSet) {
        obj.insert(QString("widgetVersion"), ::OpenAPI::toJsonValue(m_widget_version));
    }
    return obj;
}

QDateTime OAIWidgetType::getChanged() const {
    return m_changed;
}
void OAIWidgetType::setChanged(const QDateTime &changed) {
    m_changed = changed;
    m_changed_isSet = true;
}

bool OAIWidgetType::is_changed_Set() const{
    return m_changed_isSet;
}

bool OAIWidgetType::is_changed_Valid() const{
    return m_changed_isValid;
}

QDateTime OAIWidgetType::getCreated() const {
    return m_created;
}
void OAIWidgetType::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWidgetType::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWidgetType::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIWidgetType::getDefinition() const {
    return m_definition;
}
void OAIWidgetType::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIWidgetType::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIWidgetType::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAIWidgetType::getDescription() const {
    return m_description;
}
void OAIWidgetType::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWidgetType::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWidgetType::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIWidgetType::getDisplayName() const {
    return m_display_name;
}
void OAIWidgetType::setDisplayName(const QMap<QString, QString> &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIWidgetType::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIWidgetType::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIWidgetType::getImageUrl() const {
    return m_image_url;
}
void OAIWidgetType::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIWidgetType::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIWidgetType::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIWidgetType::getTenantId() const {
    return m_tenant_id;
}
void OAIWidgetType::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIWidgetType::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIWidgetType::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIWidgetType::getWidgetTypeName() const {
    return m_widget_type_name;
}
void OAIWidgetType::setWidgetTypeName(const QString &widget_type_name) {
    m_widget_type_name = widget_type_name;
    m_widget_type_name_isSet = true;
}

bool OAIWidgetType::is_widget_type_name_Set() const{
    return m_widget_type_name_isSet;
}

bool OAIWidgetType::is_widget_type_name_Valid() const{
    return m_widget_type_name_isValid;
}

QString OAIWidgetType::getWidgetVersion() const {
    return m_widget_version;
}
void OAIWidgetType::setWidgetVersion(const QString &widget_version) {
    m_widget_version = widget_version;
    m_widget_version_isSet = true;
}

bool OAIWidgetType::is_widget_version_Set() const{
    return m_widget_version_isSet;
}

bool OAIWidgetType::is_widget_version_Valid() const{
    return m_widget_version_isValid;
}

bool OAIWidgetType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_widget_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_widget_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWidgetType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_definition_isValid && true;
}

} // namespace OpenAPI
