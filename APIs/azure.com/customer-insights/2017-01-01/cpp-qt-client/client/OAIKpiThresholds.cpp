/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKpiThresholds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKpiThresholds::OAIKpiThresholds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKpiThresholds::OAIKpiThresholds() {
    this->initializeModel();
}

OAIKpiThresholds::~OAIKpiThresholds() {}

void OAIKpiThresholds::initializeModel() {

    m_increasing_kpi_isSet = false;
    m_increasing_kpi_isValid = false;

    m_lower_limit_isSet = false;
    m_lower_limit_isValid = false;

    m_upper_limit_isSet = false;
    m_upper_limit_isValid = false;
}

void OAIKpiThresholds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKpiThresholds::fromJsonObject(QJsonObject json) {

    m_increasing_kpi_isValid = ::OpenAPI::fromJsonValue(m_increasing_kpi, json[QString("increasingKpi")]);
    m_increasing_kpi_isSet = !json[QString("increasingKpi")].isNull() && m_increasing_kpi_isValid;

    m_lower_limit_isValid = ::OpenAPI::fromJsonValue(m_lower_limit, json[QString("lowerLimit")]);
    m_lower_limit_isSet = !json[QString("lowerLimit")].isNull() && m_lower_limit_isValid;

    m_upper_limit_isValid = ::OpenAPI::fromJsonValue(m_upper_limit, json[QString("upperLimit")]);
    m_upper_limit_isSet = !json[QString("upperLimit")].isNull() && m_upper_limit_isValid;
}

QString OAIKpiThresholds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKpiThresholds::asJsonObject() const {
    QJsonObject obj;
    if (m_increasing_kpi_isSet) {
        obj.insert(QString("increasingKpi"), ::OpenAPI::toJsonValue(m_increasing_kpi));
    }
    if (m_lower_limit_isSet) {
        obj.insert(QString("lowerLimit"), ::OpenAPI::toJsonValue(m_lower_limit));
    }
    if (m_upper_limit_isSet) {
        obj.insert(QString("upperLimit"), ::OpenAPI::toJsonValue(m_upper_limit));
    }
    return obj;
}

bool OAIKpiThresholds::isIncreasingKpi() const {
    return m_increasing_kpi;
}
void OAIKpiThresholds::setIncreasingKpi(const bool &increasing_kpi) {
    m_increasing_kpi = increasing_kpi;
    m_increasing_kpi_isSet = true;
}

bool OAIKpiThresholds::is_increasing_kpi_Set() const{
    return m_increasing_kpi_isSet;
}

bool OAIKpiThresholds::is_increasing_kpi_Valid() const{
    return m_increasing_kpi_isValid;
}

double OAIKpiThresholds::getLowerLimit() const {
    return m_lower_limit;
}
void OAIKpiThresholds::setLowerLimit(const double &lower_limit) {
    m_lower_limit = lower_limit;
    m_lower_limit_isSet = true;
}

bool OAIKpiThresholds::is_lower_limit_Set() const{
    return m_lower_limit_isSet;
}

bool OAIKpiThresholds::is_lower_limit_Valid() const{
    return m_lower_limit_isValid;
}

double OAIKpiThresholds::getUpperLimit() const {
    return m_upper_limit;
}
void OAIKpiThresholds::setUpperLimit(const double &upper_limit) {
    m_upper_limit = upper_limit;
    m_upper_limit_isSet = true;
}

bool OAIKpiThresholds::is_upper_limit_Set() const{
    return m_upper_limit_isSet;
}

bool OAIKpiThresholds::is_upper_limit_Valid() const{
    return m_upper_limit_isValid;
}

bool OAIKpiThresholds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_increasing_kpi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKpiThresholds::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_increasing_kpi_isValid && m_lower_limit_isValid && m_upper_limit_isValid && true;
}

} // namespace OpenAPI
