/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSource::OAIDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSource::OAIDataSource() {
    this->initializeModel();
}

OAIDataSource::~OAIDataSource() {}

void OAIDataSource::initializeModel() {

    m_data_source_reference_id_isSet = false;
    m_data_source_reference_id_isValid = false;

    m_data_source_type_isSet = false;
    m_data_source_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSource::fromJsonObject(QJsonObject json) {

    m_data_source_reference_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_reference_id, json[QString("dataSourceReferenceId")]);
    m_data_source_reference_id_isSet = !json[QString("dataSourceReferenceId")].isNull() && m_data_source_reference_id_isValid;

    m_data_source_type_isValid = ::OpenAPI::fromJsonValue(m_data_source_type, json[QString("dataSourceType")]);
    m_data_source_type_isSet = !json[QString("dataSourceType")].isNull() && m_data_source_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_reference_id_isSet) {
        obj.insert(QString("dataSourceReferenceId"), ::OpenAPI::toJsonValue(m_data_source_reference_id));
    }
    if (m_data_source_type_isSet) {
        obj.insert(QString("dataSourceType"), ::OpenAPI::toJsonValue(m_data_source_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDataSource::getDataSourceReferenceId() const {
    return m_data_source_reference_id;
}
void OAIDataSource::setDataSourceReferenceId(const QString &data_source_reference_id) {
    m_data_source_reference_id = data_source_reference_id;
    m_data_source_reference_id_isSet = true;
}

bool OAIDataSource::is_data_source_reference_id_Set() const{
    return m_data_source_reference_id_isSet;
}

bool OAIDataSource::is_data_source_reference_id_Valid() const{
    return m_data_source_reference_id_isValid;
}

QString OAIDataSource::getDataSourceType() const {
    return m_data_source_type;
}
void OAIDataSource::setDataSourceType(const QString &data_source_type) {
    m_data_source_type = data_source_type;
    m_data_source_type_isSet = true;
}

bool OAIDataSource::is_data_source_type_Set() const{
    return m_data_source_type_isSet;
}

bool OAIDataSource::is_data_source_type_Valid() const{
    return m_data_source_type_isValid;
}

qint32 OAIDataSource::getId() const {
    return m_id;
}
void OAIDataSource::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDataSource::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataSource::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDataSource::getName() const {
    return m_name;
}
void OAIDataSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataSource::getStatus() const {
    return m_status;
}
void OAIDataSource::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataSource::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataSource::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
