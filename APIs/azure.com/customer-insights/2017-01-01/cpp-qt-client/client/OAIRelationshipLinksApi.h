/**
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRelationshipLinksApi_H
#define OAI_OAIRelationshipLinksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRelationshipLinkListResult.h"
#include "OAIRelationshipLinkResourceFormat.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRelationshipLinksApi : public QObject {
    Q_OBJECT

public:
    OAIRelationshipLinksApi(const int timeOut = 0);
    ~OAIRelationshipLinksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  relationship_link_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRelationshipLinkResourceFormat [required]
    */
    virtual void relationshipLinksCreateOrUpdate(const QString &resource_group_name, const QString &hub_name, const QString &relationship_link_name, const QString &api_version, const QString &subscription_id, const OAIRelationshipLinkResourceFormat &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  relationship_link_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void relationshipLinksDelete(const QString &resource_group_name, const QString &hub_name, const QString &relationship_link_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  relationship_link_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void relationshipLinksGet(const QString &resource_group_name, const QString &hub_name, const QString &relationship_link_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void relationshipLinksListByHub(const QString &resource_group_name, const QString &hub_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void relationshipLinksCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void relationshipLinksDeleteCallback(OAIHttpRequestWorker *worker);
    void relationshipLinksGetCallback(OAIHttpRequestWorker *worker);
    void relationshipLinksListByHubCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void relationshipLinksCreateOrUpdateSignal(OAIRelationshipLinkResourceFormat summary);
    void relationshipLinksDeleteSignal();
    void relationshipLinksGetSignal(OAIRelationshipLinkResourceFormat summary);
    void relationshipLinksListByHubSignal(OAIRelationshipLinkListResult summary);


    void relationshipLinksCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRelationshipLinkResourceFormat summary);
    void relationshipLinksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void relationshipLinksGetSignalFull(OAIHttpRequestWorker *worker, OAIRelationshipLinkResourceFormat summary);
    void relationshipLinksListByHubSignalFull(OAIHttpRequestWorker *worker, OAIRelationshipLinkListResult summary);

    Q_DECL_DEPRECATED_X("Use relationshipLinksCreateOrUpdateSignalError() instead")
    void relationshipLinksCreateOrUpdateSignalE(OAIRelationshipLinkResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipLinksCreateOrUpdateSignalError(OAIRelationshipLinkResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipLinksDeleteSignalError() instead")
    void relationshipLinksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipLinksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipLinksGetSignalError() instead")
    void relationshipLinksGetSignalE(OAIRelationshipLinkResourceFormat summary, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipLinksGetSignalError(OAIRelationshipLinkResourceFormat summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipLinksListByHubSignalError() instead")
    void relationshipLinksListByHubSignalE(OAIRelationshipLinkListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipLinksListByHubSignalError(OAIRelationshipLinkListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use relationshipLinksCreateOrUpdateSignalErrorFull() instead")
    void relationshipLinksCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipLinksCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipLinksDeleteSignalErrorFull() instead")
    void relationshipLinksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipLinksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipLinksGetSignalErrorFull() instead")
    void relationshipLinksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipLinksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use relationshipLinksListByHubSignalErrorFull() instead")
    void relationshipLinksListByHubSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void relationshipLinksListByHubSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
