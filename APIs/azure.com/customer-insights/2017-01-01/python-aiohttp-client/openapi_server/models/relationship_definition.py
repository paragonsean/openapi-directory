# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_definition import PropertyDefinition
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server.models.relationship_type_mapping import RelationshipTypeMapping
from openapi_server import util


class RelationshipDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cardinality: str=None, description: Dict[str, str]=None, display_name: Dict[str, str]=None, expiry_date_time_utc: datetime=None, fields: List[PropertyDefinition]=None, lookup_mappings: List[RelationshipTypeMapping]=None, profile_type: str=None, provisioning_state: ProvisioningState=None, related_profile_type: str=None, relationship_guid_id: str=None, relationship_name: str=None, tenant_id: str=None):
        """RelationshipDefinition - a model defined in OpenAPI

        :param cardinality: The cardinality of this RelationshipDefinition.
        :param description: The description of this RelationshipDefinition.
        :param display_name: The display_name of this RelationshipDefinition.
        :param expiry_date_time_utc: The expiry_date_time_utc of this RelationshipDefinition.
        :param fields: The fields of this RelationshipDefinition.
        :param lookup_mappings: The lookup_mappings of this RelationshipDefinition.
        :param profile_type: The profile_type of this RelationshipDefinition.
        :param provisioning_state: The provisioning_state of this RelationshipDefinition.
        :param related_profile_type: The related_profile_type of this RelationshipDefinition.
        :param relationship_guid_id: The relationship_guid_id of this RelationshipDefinition.
        :param relationship_name: The relationship_name of this RelationshipDefinition.
        :param tenant_id: The tenant_id of this RelationshipDefinition.
        """
        self.openapi_types = {
            'cardinality': str,
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'expiry_date_time_utc': datetime,
            'fields': List[PropertyDefinition],
            'lookup_mappings': List[RelationshipTypeMapping],
            'profile_type': str,
            'provisioning_state': ProvisioningState,
            'related_profile_type': str,
            'relationship_guid_id': str,
            'relationship_name': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'cardinality': 'cardinality',
            'description': 'description',
            'display_name': 'displayName',
            'expiry_date_time_utc': 'expiryDateTimeUtc',
            'fields': 'fields',
            'lookup_mappings': 'lookupMappings',
            'profile_type': 'profileType',
            'provisioning_state': 'provisioningState',
            'related_profile_type': 'relatedProfileType',
            'relationship_guid_id': 'relationshipGuidId',
            'relationship_name': 'relationshipName',
            'tenant_id': 'tenantId'
        }

        self._cardinality = cardinality
        self._description = description
        self._display_name = display_name
        self._expiry_date_time_utc = expiry_date_time_utc
        self._fields = fields
        self._lookup_mappings = lookup_mappings
        self._profile_type = profile_type
        self._provisioning_state = provisioning_state
        self._related_profile_type = related_profile_type
        self._relationship_guid_id = relationship_guid_id
        self._relationship_name = relationship_name
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationshipDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationshipDefinition of this RelationshipDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cardinality(self):
        """Gets the cardinality of this RelationshipDefinition.

        The Relationship Cardinality.

        :return: The cardinality of this RelationshipDefinition.
        :rtype: str
        """
        return self._cardinality

    @cardinality.setter
    def cardinality(self, cardinality):
        """Sets the cardinality of this RelationshipDefinition.

        The Relationship Cardinality.

        :param cardinality: The cardinality of this RelationshipDefinition.
        :type cardinality: str
        """
        allowed_values = ["OneToOne", "OneToMany", "ManyToMany"]  # noqa: E501
        if cardinality not in allowed_values:
            raise ValueError(
                "Invalid value for `cardinality` ({0}), must be one of {1}"
                .format(cardinality, allowed_values)
            )

        self._cardinality = cardinality

    @property
    def description(self):
        """Gets the description of this RelationshipDefinition.

        Localized descriptions for the Relationship.

        :return: The description of this RelationshipDefinition.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RelationshipDefinition.

        Localized descriptions for the Relationship.

        :param description: The description of this RelationshipDefinition.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this RelationshipDefinition.

        Localized display name for the Relationship.

        :return: The display_name of this RelationshipDefinition.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RelationshipDefinition.

        Localized display name for the Relationship.

        :param display_name: The display_name of this RelationshipDefinition.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def expiry_date_time_utc(self):
        """Gets the expiry_date_time_utc of this RelationshipDefinition.

        The expiry date time in UTC.

        :return: The expiry_date_time_utc of this RelationshipDefinition.
        :rtype: datetime
        """
        return self._expiry_date_time_utc

    @expiry_date_time_utc.setter
    def expiry_date_time_utc(self, expiry_date_time_utc):
        """Sets the expiry_date_time_utc of this RelationshipDefinition.

        The expiry date time in UTC.

        :param expiry_date_time_utc: The expiry_date_time_utc of this RelationshipDefinition.
        :type expiry_date_time_utc: datetime
        """

        self._expiry_date_time_utc = expiry_date_time_utc

    @property
    def fields(self):
        """Gets the fields of this RelationshipDefinition.

        The properties of the Relationship.

        :return: The fields of this RelationshipDefinition.
        :rtype: List[PropertyDefinition]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this RelationshipDefinition.

        The properties of the Relationship.

        :param fields: The fields of this RelationshipDefinition.
        :type fields: List[PropertyDefinition]
        """

        self._fields = fields

    @property
    def lookup_mappings(self):
        """Gets the lookup_mappings of this RelationshipDefinition.

        Optional property to be used to map fields in profile to their strong ids in related profile.

        :return: The lookup_mappings of this RelationshipDefinition.
        :rtype: List[RelationshipTypeMapping]
        """
        return self._lookup_mappings

    @lookup_mappings.setter
    def lookup_mappings(self, lookup_mappings):
        """Sets the lookup_mappings of this RelationshipDefinition.

        Optional property to be used to map fields in profile to their strong ids in related profile.

        :param lookup_mappings: The lookup_mappings of this RelationshipDefinition.
        :type lookup_mappings: List[RelationshipTypeMapping]
        """

        self._lookup_mappings = lookup_mappings

    @property
    def profile_type(self):
        """Gets the profile_type of this RelationshipDefinition.

        Profile type.

        :return: The profile_type of this RelationshipDefinition.
        :rtype: str
        """
        return self._profile_type

    @profile_type.setter
    def profile_type(self, profile_type):
        """Sets the profile_type of this RelationshipDefinition.

        Profile type.

        :param profile_type: The profile_type of this RelationshipDefinition.
        :type profile_type: str
        """
        if profile_type is None:
            raise ValueError("Invalid value for `profile_type`, must not be `None`")

        self._profile_type = profile_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RelationshipDefinition.


        :return: The provisioning_state of this RelationshipDefinition.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RelationshipDefinition.


        :param provisioning_state: The provisioning_state of this RelationshipDefinition.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def related_profile_type(self):
        """Gets the related_profile_type of this RelationshipDefinition.

        Related profile being referenced.

        :return: The related_profile_type of this RelationshipDefinition.
        :rtype: str
        """
        return self._related_profile_type

    @related_profile_type.setter
    def related_profile_type(self, related_profile_type):
        """Sets the related_profile_type of this RelationshipDefinition.

        Related profile being referenced.

        :param related_profile_type: The related_profile_type of this RelationshipDefinition.
        :type related_profile_type: str
        """
        if related_profile_type is None:
            raise ValueError("Invalid value for `related_profile_type`, must not be `None`")

        self._related_profile_type = related_profile_type

    @property
    def relationship_guid_id(self):
        """Gets the relationship_guid_id of this RelationshipDefinition.

        The relationship guid id.

        :return: The relationship_guid_id of this RelationshipDefinition.
        :rtype: str
        """
        return self._relationship_guid_id

    @relationship_guid_id.setter
    def relationship_guid_id(self, relationship_guid_id):
        """Sets the relationship_guid_id of this RelationshipDefinition.

        The relationship guid id.

        :param relationship_guid_id: The relationship_guid_id of this RelationshipDefinition.
        :type relationship_guid_id: str
        """

        self._relationship_guid_id = relationship_guid_id

    @property
    def relationship_name(self):
        """Gets the relationship_name of this RelationshipDefinition.

        The Relationship name.

        :return: The relationship_name of this RelationshipDefinition.
        :rtype: str
        """
        return self._relationship_name

    @relationship_name.setter
    def relationship_name(self, relationship_name):
        """Sets the relationship_name of this RelationshipDefinition.

        The Relationship name.

        :param relationship_name: The relationship_name of this RelationshipDefinition.
        :type relationship_name: str
        """

        self._relationship_name = relationship_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this RelationshipDefinition.

        The hub name.

        :return: The tenant_id of this RelationshipDefinition.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this RelationshipDefinition.

        The hub name.

        :param tenant_id: The tenant_id of this RelationshipDefinition.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
