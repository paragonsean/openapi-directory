# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorMappingStructure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_name: str=None, custom_format_specifier: str=None, is_encrypted: bool=None, property_name: str=None):
        """ConnectorMappingStructure - a model defined in OpenAPI

        :param column_name: The column_name of this ConnectorMappingStructure.
        :param custom_format_specifier: The custom_format_specifier of this ConnectorMappingStructure.
        :param is_encrypted: The is_encrypted of this ConnectorMappingStructure.
        :param property_name: The property_name of this ConnectorMappingStructure.
        """
        self.openapi_types = {
            'column_name': str,
            'custom_format_specifier': str,
            'is_encrypted': bool,
            'property_name': str
        }

        self.attribute_map = {
            'column_name': 'columnName',
            'custom_format_specifier': 'customFormatSpecifier',
            'is_encrypted': 'isEncrypted',
            'property_name': 'propertyName'
        }

        self._column_name = column_name
        self._custom_format_specifier = custom_format_specifier
        self._is_encrypted = is_encrypted
        self._property_name = property_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorMappingStructure':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorMappingStructure of this ConnectorMappingStructure.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_name(self):
        """Gets the column_name of this ConnectorMappingStructure.

        The column name of the import file.

        :return: The column_name of this ConnectorMappingStructure.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this ConnectorMappingStructure.

        The column name of the import file.

        :param column_name: The column_name of this ConnectorMappingStructure.
        :type column_name: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")

        self._column_name = column_name

    @property
    def custom_format_specifier(self):
        """Gets the custom_format_specifier of this ConnectorMappingStructure.

        Custom format specifier for input parsing.

        :return: The custom_format_specifier of this ConnectorMappingStructure.
        :rtype: str
        """
        return self._custom_format_specifier

    @custom_format_specifier.setter
    def custom_format_specifier(self, custom_format_specifier):
        """Sets the custom_format_specifier of this ConnectorMappingStructure.

        Custom format specifier for input parsing.

        :param custom_format_specifier: The custom_format_specifier of this ConnectorMappingStructure.
        :type custom_format_specifier: str
        """

        self._custom_format_specifier = custom_format_specifier

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this ConnectorMappingStructure.

        Indicates if the column is encrypted.

        :return: The is_encrypted of this ConnectorMappingStructure.
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this ConnectorMappingStructure.

        Indicates if the column is encrypted.

        :param is_encrypted: The is_encrypted of this ConnectorMappingStructure.
        :type is_encrypted: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def property_name(self):
        """Gets the property_name of this ConnectorMappingStructure.

        The property name of the mapping entity.

        :return: The property_name of this ConnectorMappingStructure.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this ConnectorMappingStructure.

        The property name of the mapping entity.

        :param property_name: The property_name of this ConnectorMappingStructure.
        :type property_name: str
        """
        if property_name is None:
            raise ValueError("Invalid value for `property_name`, must not be `None`")

        self._property_name = property_name
