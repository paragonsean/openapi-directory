# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KpiParticipantProfilesMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type_name: str=None):
        """KpiParticipantProfilesMetadata - a model defined in OpenAPI

        :param type_name: The type_name of this KpiParticipantProfilesMetadata.
        """
        self.openapi_types = {
            'type_name': str
        }

        self.attribute_map = {
            'type_name': 'typeName'
        }

        self._type_name = type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KpiParticipantProfilesMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KpiParticipantProfilesMetadata of this KpiParticipantProfilesMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type_name(self):
        """Gets the type_name of this KpiParticipantProfilesMetadata.

        Name of the type.

        :return: The type_name of this KpiParticipantProfilesMetadata.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this KpiParticipantProfilesMetadata.

        Name of the type.

        :param type_name: The type_name of this KpiParticipantProfilesMetadata.
        :type type_name: str
        """
        if type_name is None:
            raise ValueError("Invalid value for `type_name`, must not be `None`")

        self._type_name = type_name
