# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_mapping_properties import ConnectorMappingProperties
from openapi_server.models.connector_type import ConnectorType
from openapi_server import util


class ConnectorMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_mapping_name: str=None, connector_name: str=None, connector_type: ConnectorType=None, created: datetime=None, data_format_id: str=None, description: str=None, display_name: str=None, entity_type: str=None, entity_type_name: str=None, last_modified: datetime=None, mapping_properties: ConnectorMappingProperties=None, next_run_time: datetime=None, run_id: str=None, state: str=None, tenant_id: str=None):
        """ConnectorMapping - a model defined in OpenAPI

        :param connector_mapping_name: The connector_mapping_name of this ConnectorMapping.
        :param connector_name: The connector_name of this ConnectorMapping.
        :param connector_type: The connector_type of this ConnectorMapping.
        :param created: The created of this ConnectorMapping.
        :param data_format_id: The data_format_id of this ConnectorMapping.
        :param description: The description of this ConnectorMapping.
        :param display_name: The display_name of this ConnectorMapping.
        :param entity_type: The entity_type of this ConnectorMapping.
        :param entity_type_name: The entity_type_name of this ConnectorMapping.
        :param last_modified: The last_modified of this ConnectorMapping.
        :param mapping_properties: The mapping_properties of this ConnectorMapping.
        :param next_run_time: The next_run_time of this ConnectorMapping.
        :param run_id: The run_id of this ConnectorMapping.
        :param state: The state of this ConnectorMapping.
        :param tenant_id: The tenant_id of this ConnectorMapping.
        """
        self.openapi_types = {
            'connector_mapping_name': str,
            'connector_name': str,
            'connector_type': ConnectorType,
            'created': datetime,
            'data_format_id': str,
            'description': str,
            'display_name': str,
            'entity_type': str,
            'entity_type_name': str,
            'last_modified': datetime,
            'mapping_properties': ConnectorMappingProperties,
            'next_run_time': datetime,
            'run_id': str,
            'state': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'connector_mapping_name': 'connectorMappingName',
            'connector_name': 'connectorName',
            'connector_type': 'connectorType',
            'created': 'created',
            'data_format_id': 'dataFormatId',
            'description': 'description',
            'display_name': 'displayName',
            'entity_type': 'entityType',
            'entity_type_name': 'entityTypeName',
            'last_modified': 'lastModified',
            'mapping_properties': 'mappingProperties',
            'next_run_time': 'nextRunTime',
            'run_id': 'runId',
            'state': 'state',
            'tenant_id': 'tenantId'
        }

        self._connector_mapping_name = connector_mapping_name
        self._connector_name = connector_name
        self._connector_type = connector_type
        self._created = created
        self._data_format_id = data_format_id
        self._description = description
        self._display_name = display_name
        self._entity_type = entity_type
        self._entity_type_name = entity_type_name
        self._last_modified = last_modified
        self._mapping_properties = mapping_properties
        self._next_run_time = next_run_time
        self._run_id = run_id
        self._state = state
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorMapping of this ConnectorMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_mapping_name(self):
        """Gets the connector_mapping_name of this ConnectorMapping.

        The connector mapping name

        :return: The connector_mapping_name of this ConnectorMapping.
        :rtype: str
        """
        return self._connector_mapping_name

    @connector_mapping_name.setter
    def connector_mapping_name(self, connector_mapping_name):
        """Sets the connector_mapping_name of this ConnectorMapping.

        The connector mapping name

        :param connector_mapping_name: The connector_mapping_name of this ConnectorMapping.
        :type connector_mapping_name: str
        """

        self._connector_mapping_name = connector_mapping_name

    @property
    def connector_name(self):
        """Gets the connector_name of this ConnectorMapping.

        The connector name.

        :return: The connector_name of this ConnectorMapping.
        :rtype: str
        """
        return self._connector_name

    @connector_name.setter
    def connector_name(self, connector_name):
        """Sets the connector_name of this ConnectorMapping.

        The connector name.

        :param connector_name: The connector_name of this ConnectorMapping.
        :type connector_name: str
        """

        self._connector_name = connector_name

    @property
    def connector_type(self):
        """Gets the connector_type of this ConnectorMapping.


        :return: The connector_type of this ConnectorMapping.
        :rtype: ConnectorType
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this ConnectorMapping.


        :param connector_type: The connector_type of this ConnectorMapping.
        :type connector_type: ConnectorType
        """

        self._connector_type = connector_type

    @property
    def created(self):
        """Gets the created of this ConnectorMapping.

        The created time.

        :return: The created of this ConnectorMapping.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ConnectorMapping.

        The created time.

        :param created: The created of this ConnectorMapping.
        :type created: datetime
        """

        self._created = created

    @property
    def data_format_id(self):
        """Gets the data_format_id of this ConnectorMapping.

        The DataFormat ID.

        :return: The data_format_id of this ConnectorMapping.
        :rtype: str
        """
        return self._data_format_id

    @data_format_id.setter
    def data_format_id(self, data_format_id):
        """Sets the data_format_id of this ConnectorMapping.

        The DataFormat ID.

        :param data_format_id: The data_format_id of this ConnectorMapping.
        :type data_format_id: str
        """

        self._data_format_id = data_format_id

    @property
    def description(self):
        """Gets the description of this ConnectorMapping.

        The description of the connector mapping.

        :return: The description of this ConnectorMapping.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConnectorMapping.

        The description of the connector mapping.

        :param description: The description of this ConnectorMapping.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ConnectorMapping.

        Display name for the connector mapping.

        :return: The display_name of this ConnectorMapping.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConnectorMapping.

        Display name for the connector mapping.

        :param display_name: The display_name of this ConnectorMapping.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def entity_type(self):
        """Gets the entity_type of this ConnectorMapping.

        Defines which entity type the file should map to.

        :return: The entity_type of this ConnectorMapping.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this ConnectorMapping.

        Defines which entity type the file should map to.

        :param entity_type: The entity_type of this ConnectorMapping.
        :type entity_type: str
        """
        allowed_values = ["None", "Profile", "Interaction", "Relationship"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def entity_type_name(self):
        """Gets the entity_type_name of this ConnectorMapping.

        The mapping entity name.

        :return: The entity_type_name of this ConnectorMapping.
        :rtype: str
        """
        return self._entity_type_name

    @entity_type_name.setter
    def entity_type_name(self, entity_type_name):
        """Sets the entity_type_name of this ConnectorMapping.

        The mapping entity name.

        :param entity_type_name: The entity_type_name of this ConnectorMapping.
        :type entity_type_name: str
        """
        if entity_type_name is None:
            raise ValueError("Invalid value for `entity_type_name`, must not be `None`")

        self._entity_type_name = entity_type_name

    @property
    def last_modified(self):
        """Gets the last_modified of this ConnectorMapping.

        The last modified time.

        :return: The last_modified of this ConnectorMapping.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this ConnectorMapping.

        The last modified time.

        :param last_modified: The last_modified of this ConnectorMapping.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def mapping_properties(self):
        """Gets the mapping_properties of this ConnectorMapping.


        :return: The mapping_properties of this ConnectorMapping.
        :rtype: ConnectorMappingProperties
        """
        return self._mapping_properties

    @mapping_properties.setter
    def mapping_properties(self, mapping_properties):
        """Sets the mapping_properties of this ConnectorMapping.


        :param mapping_properties: The mapping_properties of this ConnectorMapping.
        :type mapping_properties: ConnectorMappingProperties
        """
        if mapping_properties is None:
            raise ValueError("Invalid value for `mapping_properties`, must not be `None`")

        self._mapping_properties = mapping_properties

    @property
    def next_run_time(self):
        """Gets the next_run_time of this ConnectorMapping.

        The next run time based on customer's settings.

        :return: The next_run_time of this ConnectorMapping.
        :rtype: datetime
        """
        return self._next_run_time

    @next_run_time.setter
    def next_run_time(self, next_run_time):
        """Sets the next_run_time of this ConnectorMapping.

        The next run time based on customer's settings.

        :param next_run_time: The next_run_time of this ConnectorMapping.
        :type next_run_time: datetime
        """

        self._next_run_time = next_run_time

    @property
    def run_id(self):
        """Gets the run_id of this ConnectorMapping.

        The RunId.

        :return: The run_id of this ConnectorMapping.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this ConnectorMapping.

        The RunId.

        :param run_id: The run_id of this ConnectorMapping.
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def state(self):
        """Gets the state of this ConnectorMapping.

        State of connector mapping.

        :return: The state of this ConnectorMapping.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConnectorMapping.

        State of connector mapping.

        :param state: The state of this ConnectorMapping.
        :type state: str
        """
        allowed_values = ["Creating", "Created", "Failed", "Ready", "Running", "Stopped", "Expiring"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ConnectorMapping.

        The hub name.

        :return: The tenant_id of this ConnectorMapping.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ConnectorMapping.

        The hub name.

        :param tenant_id: The tenant_id of this ConnectorMapping.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
