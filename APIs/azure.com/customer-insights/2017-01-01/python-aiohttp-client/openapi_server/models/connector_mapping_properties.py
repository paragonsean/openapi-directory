# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_mapping_availability import ConnectorMappingAvailability
from openapi_server.models.connector_mapping_complete_operation import ConnectorMappingCompleteOperation
from openapi_server.models.connector_mapping_error_management import ConnectorMappingErrorManagement
from openapi_server.models.connector_mapping_format import ConnectorMappingFormat
from openapi_server.models.connector_mapping_structure import ConnectorMappingStructure
from openapi_server import util


class ConnectorMappingProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: ConnectorMappingAvailability=None, complete_operation: ConnectorMappingCompleteOperation=None, error_management: ConnectorMappingErrorManagement=None, file_filter: str=None, folder_path: str=None, format: ConnectorMappingFormat=None, has_header: bool=None, structure: List[ConnectorMappingStructure]=None):
        """ConnectorMappingProperties - a model defined in OpenAPI

        :param availability: The availability of this ConnectorMappingProperties.
        :param complete_operation: The complete_operation of this ConnectorMappingProperties.
        :param error_management: The error_management of this ConnectorMappingProperties.
        :param file_filter: The file_filter of this ConnectorMappingProperties.
        :param folder_path: The folder_path of this ConnectorMappingProperties.
        :param format: The format of this ConnectorMappingProperties.
        :param has_header: The has_header of this ConnectorMappingProperties.
        :param structure: The structure of this ConnectorMappingProperties.
        """
        self.openapi_types = {
            'availability': ConnectorMappingAvailability,
            'complete_operation': ConnectorMappingCompleteOperation,
            'error_management': ConnectorMappingErrorManagement,
            'file_filter': str,
            'folder_path': str,
            'format': ConnectorMappingFormat,
            'has_header': bool,
            'structure': List[ConnectorMappingStructure]
        }

        self.attribute_map = {
            'availability': 'availability',
            'complete_operation': 'completeOperation',
            'error_management': 'errorManagement',
            'file_filter': 'fileFilter',
            'folder_path': 'folderPath',
            'format': 'format',
            'has_header': 'hasHeader',
            'structure': 'structure'
        }

        self._availability = availability
        self._complete_operation = complete_operation
        self._error_management = error_management
        self._file_filter = file_filter
        self._folder_path = folder_path
        self._format = format
        self._has_header = has_header
        self._structure = structure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorMappingProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorMappingProperties of this ConnectorMappingProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this ConnectorMappingProperties.


        :return: The availability of this ConnectorMappingProperties.
        :rtype: ConnectorMappingAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this ConnectorMappingProperties.


        :param availability: The availability of this ConnectorMappingProperties.
        :type availability: ConnectorMappingAvailability
        """
        if availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")

        self._availability = availability

    @property
    def complete_operation(self):
        """Gets the complete_operation of this ConnectorMappingProperties.


        :return: The complete_operation of this ConnectorMappingProperties.
        :rtype: ConnectorMappingCompleteOperation
        """
        return self._complete_operation

    @complete_operation.setter
    def complete_operation(self, complete_operation):
        """Sets the complete_operation of this ConnectorMappingProperties.


        :param complete_operation: The complete_operation of this ConnectorMappingProperties.
        :type complete_operation: ConnectorMappingCompleteOperation
        """
        if complete_operation is None:
            raise ValueError("Invalid value for `complete_operation`, must not be `None`")

        self._complete_operation = complete_operation

    @property
    def error_management(self):
        """Gets the error_management of this ConnectorMappingProperties.


        :return: The error_management of this ConnectorMappingProperties.
        :rtype: ConnectorMappingErrorManagement
        """
        return self._error_management

    @error_management.setter
    def error_management(self, error_management):
        """Sets the error_management of this ConnectorMappingProperties.


        :param error_management: The error_management of this ConnectorMappingProperties.
        :type error_management: ConnectorMappingErrorManagement
        """
        if error_management is None:
            raise ValueError("Invalid value for `error_management`, must not be `None`")

        self._error_management = error_management

    @property
    def file_filter(self):
        """Gets the file_filter of this ConnectorMappingProperties.

        The file filter for the mapping.

        :return: The file_filter of this ConnectorMappingProperties.
        :rtype: str
        """
        return self._file_filter

    @file_filter.setter
    def file_filter(self, file_filter):
        """Sets the file_filter of this ConnectorMappingProperties.

        The file filter for the mapping.

        :param file_filter: The file_filter of this ConnectorMappingProperties.
        :type file_filter: str
        """

        self._file_filter = file_filter

    @property
    def folder_path(self):
        """Gets the folder_path of this ConnectorMappingProperties.

        The folder path for the mapping.

        :return: The folder_path of this ConnectorMappingProperties.
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this ConnectorMappingProperties.

        The folder path for the mapping.

        :param folder_path: The folder_path of this ConnectorMappingProperties.
        :type folder_path: str
        """

        self._folder_path = folder_path

    @property
    def format(self):
        """Gets the format of this ConnectorMappingProperties.


        :return: The format of this ConnectorMappingProperties.
        :rtype: ConnectorMappingFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ConnectorMappingProperties.


        :param format: The format of this ConnectorMappingProperties.
        :type format: ConnectorMappingFormat
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def has_header(self):
        """Gets the has_header of this ConnectorMappingProperties.

        If the file contains a header or not.

        :return: The has_header of this ConnectorMappingProperties.
        :rtype: bool
        """
        return self._has_header

    @has_header.setter
    def has_header(self, has_header):
        """Sets the has_header of this ConnectorMappingProperties.

        If the file contains a header or not.

        :param has_header: The has_header of this ConnectorMappingProperties.
        :type has_header: bool
        """

        self._has_header = has_header

    @property
    def structure(self):
        """Gets the structure of this ConnectorMappingProperties.

        Ingestion mapping information at property level.

        :return: The structure of this ConnectorMappingProperties.
        :rtype: List[ConnectorMappingStructure]
        """
        return self._structure

    @structure.setter
    def structure(self, structure):
        """Sets the structure of this ConnectorMappingProperties.

        Ingestion mapping information at property level.

        :param structure: The structure of this ConnectorMappingProperties.
        :type structure: List[ConnectorMappingStructure]
        """
        if structure is None:
            raise ValueError("Invalid value for `structure`, must not be `None`")

        self._structure = structure
