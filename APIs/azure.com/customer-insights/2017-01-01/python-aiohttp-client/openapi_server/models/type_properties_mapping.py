# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TypePropertiesMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interaction_type_property_name: str=None, is_profile_type_id: bool=None, link_type: str=None, profile_type_property_name: str=None):
        """TypePropertiesMapping - a model defined in OpenAPI

        :param interaction_type_property_name: The interaction_type_property_name of this TypePropertiesMapping.
        :param is_profile_type_id: The is_profile_type_id of this TypePropertiesMapping.
        :param link_type: The link_type of this TypePropertiesMapping.
        :param profile_type_property_name: The profile_type_property_name of this TypePropertiesMapping.
        """
        self.openapi_types = {
            'interaction_type_property_name': str,
            'is_profile_type_id': bool,
            'link_type': str,
            'profile_type_property_name': str
        }

        self.attribute_map = {
            'interaction_type_property_name': 'interactionTypePropertyName',
            'is_profile_type_id': 'isProfileTypeId',
            'link_type': 'linkType',
            'profile_type_property_name': 'profileTypePropertyName'
        }

        self._interaction_type_property_name = interaction_type_property_name
        self._is_profile_type_id = is_profile_type_id
        self._link_type = link_type
        self._profile_type_property_name = profile_type_property_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TypePropertiesMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TypePropertiesMapping of this TypePropertiesMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interaction_type_property_name(self):
        """Gets the interaction_type_property_name of this TypePropertiesMapping.

         Property name on the source Interaction Type.

        :return: The interaction_type_property_name of this TypePropertiesMapping.
        :rtype: str
        """
        return self._interaction_type_property_name

    @interaction_type_property_name.setter
    def interaction_type_property_name(self, interaction_type_property_name):
        """Sets the interaction_type_property_name of this TypePropertiesMapping.

         Property name on the source Interaction Type.

        :param interaction_type_property_name: The interaction_type_property_name of this TypePropertiesMapping.
        :type interaction_type_property_name: str
        """
        if interaction_type_property_name is None:
            raise ValueError("Invalid value for `interaction_type_property_name`, must not be `None`")

        self._interaction_type_property_name = interaction_type_property_name

    @property
    def is_profile_type_id(self):
        """Gets the is_profile_type_id of this TypePropertiesMapping.

        Flag to indicate whether the Profile Type property is an id on the Profile Type.

        :return: The is_profile_type_id of this TypePropertiesMapping.
        :rtype: bool
        """
        return self._is_profile_type_id

    @is_profile_type_id.setter
    def is_profile_type_id(self, is_profile_type_id):
        """Sets the is_profile_type_id of this TypePropertiesMapping.

        Flag to indicate whether the Profile Type property is an id on the Profile Type.

        :param is_profile_type_id: The is_profile_type_id of this TypePropertiesMapping.
        :type is_profile_type_id: bool
        """

        self._is_profile_type_id = is_profile_type_id

    @property
    def link_type(self):
        """Gets the link_type of this TypePropertiesMapping.

        Link type.

        :return: The link_type of this TypePropertiesMapping.
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this TypePropertiesMapping.

        Link type.

        :param link_type: The link_type of this TypePropertiesMapping.
        :type link_type: str
        """
        allowed_values = ["UpdateAlways", "CopyIfNull"]  # noqa: E501
        if link_type not in allowed_values:
            raise ValueError(
                "Invalid value for `link_type` ({0}), must be one of {1}"
                .format(link_type, allowed_values)
            )

        self._link_type = link_type

    @property
    def profile_type_property_name(self):
        """Gets the profile_type_property_name of this TypePropertiesMapping.

        Property name on the target Profile Type.

        :return: The profile_type_property_name of this TypePropertiesMapping.
        :rtype: str
        """
        return self._profile_type_property_name

    @profile_type_property_name.setter
    def profile_type_property_name(self, profile_type_property_name):
        """Sets the profile_type_property_name of this TypePropertiesMapping.

        Property name on the target Profile Type.

        :param profile_type_property_name: The profile_type_property_name of this TypePropertiesMapping.
        :type profile_type_property_name: str
        """
        if profile_type_property_name is None:
            raise ValueError("Invalid value for `profile_type_property_name`, must not be `None`")

        self._profile_type_property_name = profile_type_property_name
