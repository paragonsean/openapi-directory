# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssignmentPrincipal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principal_id: str=None, principal_metadata: Dict[str, str]=None, principal_type: str=None):
        """AssignmentPrincipal - a model defined in OpenAPI

        :param principal_id: The principal_id of this AssignmentPrincipal.
        :param principal_metadata: The principal_metadata of this AssignmentPrincipal.
        :param principal_type: The principal_type of this AssignmentPrincipal.
        """
        self.openapi_types = {
            'principal_id': str,
            'principal_metadata': Dict[str, str],
            'principal_type': str
        }

        self.attribute_map = {
            'principal_id': 'principalId',
            'principal_metadata': 'principalMetadata',
            'principal_type': 'principalType'
        }

        self._principal_id = principal_id
        self._principal_metadata = principal_metadata
        self._principal_type = principal_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignmentPrincipal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignmentPrincipal of this AssignmentPrincipal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principal_id(self):
        """Gets the principal_id of this AssignmentPrincipal.

        The principal id being assigned to.

        :return: The principal_id of this AssignmentPrincipal.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this AssignmentPrincipal.

        The principal id being assigned to.

        :param principal_id: The principal_id of this AssignmentPrincipal.
        :type principal_id: str
        """
        if principal_id is None:
            raise ValueError("Invalid value for `principal_id`, must not be `None`")

        self._principal_id = principal_id

    @property
    def principal_metadata(self):
        """Gets the principal_metadata of this AssignmentPrincipal.

        Other metadata for the principal.

        :return: The principal_metadata of this AssignmentPrincipal.
        :rtype: Dict[str, str]
        """
        return self._principal_metadata

    @principal_metadata.setter
    def principal_metadata(self, principal_metadata):
        """Sets the principal_metadata of this AssignmentPrincipal.

        Other metadata for the principal.

        :param principal_metadata: The principal_metadata of this AssignmentPrincipal.
        :type principal_metadata: Dict[str, str]
        """

        self._principal_metadata = principal_metadata

    @property
    def principal_type(self):
        """Gets the principal_type of this AssignmentPrincipal.

        The Type of the principal ID.

        :return: The principal_type of this AssignmentPrincipal.
        :rtype: str
        """
        return self._principal_type

    @principal_type.setter
    def principal_type(self, principal_type):
        """Sets the principal_type of this AssignmentPrincipal.

        The Type of the principal ID.

        :param principal_type: The principal_type of this AssignmentPrincipal.
        :type principal_type: str
        """
        if principal_type is None:
            raise ValueError("Invalid value for `principal_type`, must not be `None`")

        self._principal_type = principal_type
