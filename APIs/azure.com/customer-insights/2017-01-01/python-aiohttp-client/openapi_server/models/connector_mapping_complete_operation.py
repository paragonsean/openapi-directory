# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorMappingCompleteOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completion_operation_type: str=None, destination_folder: str=None):
        """ConnectorMappingCompleteOperation - a model defined in OpenAPI

        :param completion_operation_type: The completion_operation_type of this ConnectorMappingCompleteOperation.
        :param destination_folder: The destination_folder of this ConnectorMappingCompleteOperation.
        """
        self.openapi_types = {
            'completion_operation_type': str,
            'destination_folder': str
        }

        self.attribute_map = {
            'completion_operation_type': 'completionOperationType',
            'destination_folder': 'destinationFolder'
        }

        self._completion_operation_type = completion_operation_type
        self._destination_folder = destination_folder

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorMappingCompleteOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorMappingCompleteOperation of this ConnectorMappingCompleteOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completion_operation_type(self):
        """Gets the completion_operation_type of this ConnectorMappingCompleteOperation.

        The type of completion operation.

        :return: The completion_operation_type of this ConnectorMappingCompleteOperation.
        :rtype: str
        """
        return self._completion_operation_type

    @completion_operation_type.setter
    def completion_operation_type(self, completion_operation_type):
        """Sets the completion_operation_type of this ConnectorMappingCompleteOperation.

        The type of completion operation.

        :param completion_operation_type: The completion_operation_type of this ConnectorMappingCompleteOperation.
        :type completion_operation_type: str
        """
        allowed_values = ["DoNothing", "DeleteFile", "MoveFile"]  # noqa: E501
        if completion_operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `completion_operation_type` ({0}), must be one of {1}"
                .format(completion_operation_type, allowed_values)
            )

        self._completion_operation_type = completion_operation_type

    @property
    def destination_folder(self):
        """Gets the destination_folder of this ConnectorMappingCompleteOperation.

        The destination folder where files will be moved to once the import is done.

        :return: The destination_folder of this ConnectorMappingCompleteOperation.
        :rtype: str
        """
        return self._destination_folder

    @destination_folder.setter
    def destination_folder(self, destination_folder):
        """Sets the destination_folder of this ConnectorMappingCompleteOperation.

        The destination folder where files will be moved to once the import is done.

        :param destination_folder: The destination_folder of this ConnectorMappingCompleteOperation.
        :type destination_folder: str
        """

        self._destination_folder = destination_folder
