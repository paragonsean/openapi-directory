# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source import DataSource
from openapi_server.models.data_source_precedence import DataSourcePrecedence
from openapi_server.models.participant import Participant
from openapi_server.models.property_definition import PropertyDefinition
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server import util


class InteractionTypeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_precedence_rules: List[DataSourcePrecedence]=None, default_data_source: DataSource=None, id_property_names: List[str]=None, is_activity: bool=None, participant_profiles: List[Participant]=None, primary_participant_profile_property_name: str=None, api_entity_set_name: str=None, entity_type: str=None, fields: List[PropertyDefinition]=None, instances_count: int=None, last_changed_utc: datetime=None, provisioning_state: ProvisioningState=None, schema_item_type_link: str=None, tenant_id: str=None, timestamp_field_name: str=None, type_name: str=None, attributes: Dict[str, List[str]]=None, description: Dict[str, str]=None, display_name: Dict[str, str]=None, large_image: str=None, localized_attributes: Dict[str, Dict[str, str]]=None, medium_image: str=None, small_image: str=None):
        """InteractionTypeDefinition - a model defined in OpenAPI

        :param data_source_precedence_rules: The data_source_precedence_rules of this InteractionTypeDefinition.
        :param default_data_source: The default_data_source of this InteractionTypeDefinition.
        :param id_property_names: The id_property_names of this InteractionTypeDefinition.
        :param is_activity: The is_activity of this InteractionTypeDefinition.
        :param participant_profiles: The participant_profiles of this InteractionTypeDefinition.
        :param primary_participant_profile_property_name: The primary_participant_profile_property_name of this InteractionTypeDefinition.
        :param api_entity_set_name: The api_entity_set_name of this InteractionTypeDefinition.
        :param entity_type: The entity_type of this InteractionTypeDefinition.
        :param fields: The fields of this InteractionTypeDefinition.
        :param instances_count: The instances_count of this InteractionTypeDefinition.
        :param last_changed_utc: The last_changed_utc of this InteractionTypeDefinition.
        :param provisioning_state: The provisioning_state of this InteractionTypeDefinition.
        :param schema_item_type_link: The schema_item_type_link of this InteractionTypeDefinition.
        :param tenant_id: The tenant_id of this InteractionTypeDefinition.
        :param timestamp_field_name: The timestamp_field_name of this InteractionTypeDefinition.
        :param type_name: The type_name of this InteractionTypeDefinition.
        :param attributes: The attributes of this InteractionTypeDefinition.
        :param description: The description of this InteractionTypeDefinition.
        :param display_name: The display_name of this InteractionTypeDefinition.
        :param large_image: The large_image of this InteractionTypeDefinition.
        :param localized_attributes: The localized_attributes of this InteractionTypeDefinition.
        :param medium_image: The medium_image of this InteractionTypeDefinition.
        :param small_image: The small_image of this InteractionTypeDefinition.
        """
        self.openapi_types = {
            'data_source_precedence_rules': List[DataSourcePrecedence],
            'default_data_source': DataSource,
            'id_property_names': List[str],
            'is_activity': bool,
            'participant_profiles': List[Participant],
            'primary_participant_profile_property_name': str,
            'api_entity_set_name': str,
            'entity_type': str,
            'fields': List[PropertyDefinition],
            'instances_count': int,
            'last_changed_utc': datetime,
            'provisioning_state': ProvisioningState,
            'schema_item_type_link': str,
            'tenant_id': str,
            'timestamp_field_name': str,
            'type_name': str,
            'attributes': Dict[str, List[str]],
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'large_image': str,
            'localized_attributes': Dict[str, Dict[str, str]],
            'medium_image': str,
            'small_image': str
        }

        self.attribute_map = {
            'data_source_precedence_rules': 'dataSourcePrecedenceRules',
            'default_data_source': 'defaultDataSource',
            'id_property_names': 'idPropertyNames',
            'is_activity': 'isActivity',
            'participant_profiles': 'participantProfiles',
            'primary_participant_profile_property_name': 'primaryParticipantProfilePropertyName',
            'api_entity_set_name': 'apiEntitySetName',
            'entity_type': 'entityType',
            'fields': 'fields',
            'instances_count': 'instancesCount',
            'last_changed_utc': 'lastChangedUtc',
            'provisioning_state': 'provisioningState',
            'schema_item_type_link': 'schemaItemTypeLink',
            'tenant_id': 'tenantId',
            'timestamp_field_name': 'timestampFieldName',
            'type_name': 'typeName',
            'attributes': 'attributes',
            'description': 'description',
            'display_name': 'displayName',
            'large_image': 'largeImage',
            'localized_attributes': 'localizedAttributes',
            'medium_image': 'mediumImage',
            'small_image': 'smallImage'
        }

        self._data_source_precedence_rules = data_source_precedence_rules
        self._default_data_source = default_data_source
        self._id_property_names = id_property_names
        self._is_activity = is_activity
        self._participant_profiles = participant_profiles
        self._primary_participant_profile_property_name = primary_participant_profile_property_name
        self._api_entity_set_name = api_entity_set_name
        self._entity_type = entity_type
        self._fields = fields
        self._instances_count = instances_count
        self._last_changed_utc = last_changed_utc
        self._provisioning_state = provisioning_state
        self._schema_item_type_link = schema_item_type_link
        self._tenant_id = tenant_id
        self._timestamp_field_name = timestamp_field_name
        self._type_name = type_name
        self._attributes = attributes
        self._description = description
        self._display_name = display_name
        self._large_image = large_image
        self._localized_attributes = localized_attributes
        self._medium_image = medium_image
        self._small_image = small_image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InteractionTypeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InteractionTypeDefinition of this InteractionTypeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_precedence_rules(self):
        """Gets the data_source_precedence_rules of this InteractionTypeDefinition.

        This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.

        :return: The data_source_precedence_rules of this InteractionTypeDefinition.
        :rtype: List[DataSourcePrecedence]
        """
        return self._data_source_precedence_rules

    @data_source_precedence_rules.setter
    def data_source_precedence_rules(self, data_source_precedence_rules):
        """Sets the data_source_precedence_rules of this InteractionTypeDefinition.

        This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.

        :param data_source_precedence_rules: The data_source_precedence_rules of this InteractionTypeDefinition.
        :type data_source_precedence_rules: List[DataSourcePrecedence]
        """

        self._data_source_precedence_rules = data_source_precedence_rules

    @property
    def default_data_source(self):
        """Gets the default_data_source of this InteractionTypeDefinition.


        :return: The default_data_source of this InteractionTypeDefinition.
        :rtype: DataSource
        """
        return self._default_data_source

    @default_data_source.setter
    def default_data_source(self, default_data_source):
        """Sets the default_data_source of this InteractionTypeDefinition.


        :param default_data_source: The default_data_source of this InteractionTypeDefinition.
        :type default_data_source: DataSource
        """

        self._default_data_source = default_data_source

    @property
    def id_property_names(self):
        """Gets the id_property_names of this InteractionTypeDefinition.

        The id property names. Properties which uniquely identify an interaction instance.

        :return: The id_property_names of this InteractionTypeDefinition.
        :rtype: List[str]
        """
        return self._id_property_names

    @id_property_names.setter
    def id_property_names(self, id_property_names):
        """Sets the id_property_names of this InteractionTypeDefinition.

        The id property names. Properties which uniquely identify an interaction instance.

        :param id_property_names: The id_property_names of this InteractionTypeDefinition.
        :type id_property_names: List[str]
        """

        self._id_property_names = id_property_names

    @property
    def is_activity(self):
        """Gets the is_activity of this InteractionTypeDefinition.

        An interaction can be tagged as an activity only during create. This enables the interaction to be editable and can enable merging of properties from multiple data sources based on precedence, which is defined at a link level.

        :return: The is_activity of this InteractionTypeDefinition.
        :rtype: bool
        """
        return self._is_activity

    @is_activity.setter
    def is_activity(self, is_activity):
        """Sets the is_activity of this InteractionTypeDefinition.

        An interaction can be tagged as an activity only during create. This enables the interaction to be editable and can enable merging of properties from multiple data sources based on precedence, which is defined at a link level.

        :param is_activity: The is_activity of this InteractionTypeDefinition.
        :type is_activity: bool
        """

        self._is_activity = is_activity

    @property
    def participant_profiles(self):
        """Gets the participant_profiles of this InteractionTypeDefinition.

        Profiles that participated in the interaction.

        :return: The participant_profiles of this InteractionTypeDefinition.
        :rtype: List[Participant]
        """
        return self._participant_profiles

    @participant_profiles.setter
    def participant_profiles(self, participant_profiles):
        """Sets the participant_profiles of this InteractionTypeDefinition.

        Profiles that participated in the interaction.

        :param participant_profiles: The participant_profiles of this InteractionTypeDefinition.
        :type participant_profiles: List[Participant]
        """

        self._participant_profiles = participant_profiles

    @property
    def primary_participant_profile_property_name(self):
        """Gets the primary_participant_profile_property_name of this InteractionTypeDefinition.

        The primary participant property name for an interaction ,This is used to logically represent the agent of the interaction, Specify the participant name here from ParticipantName.

        :return: The primary_participant_profile_property_name of this InteractionTypeDefinition.
        :rtype: str
        """
        return self._primary_participant_profile_property_name

    @primary_participant_profile_property_name.setter
    def primary_participant_profile_property_name(self, primary_participant_profile_property_name):
        """Sets the primary_participant_profile_property_name of this InteractionTypeDefinition.

        The primary participant property name for an interaction ,This is used to logically represent the agent of the interaction, Specify the participant name here from ParticipantName.

        :param primary_participant_profile_property_name: The primary_participant_profile_property_name of this InteractionTypeDefinition.
        :type primary_participant_profile_property_name: str
        """

        self._primary_participant_profile_property_name = primary_participant_profile_property_name

    @property
    def api_entity_set_name(self):
        """Gets the api_entity_set_name of this InteractionTypeDefinition.

        The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.

        :return: The api_entity_set_name of this InteractionTypeDefinition.
        :rtype: str
        """
        return self._api_entity_set_name

    @api_entity_set_name.setter
    def api_entity_set_name(self, api_entity_set_name):
        """Sets the api_entity_set_name of this InteractionTypeDefinition.

        The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.

        :param api_entity_set_name: The api_entity_set_name of this InteractionTypeDefinition.
        :type api_entity_set_name: str
        """

        self._api_entity_set_name = api_entity_set_name

    @property
    def entity_type(self):
        """Gets the entity_type of this InteractionTypeDefinition.

        Type of entity.

        :return: The entity_type of this InteractionTypeDefinition.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this InteractionTypeDefinition.

        Type of entity.

        :param entity_type: The entity_type of this InteractionTypeDefinition.
        :type entity_type: str
        """
        allowed_values = ["None", "Profile", "Interaction", "Relationship"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def fields(self):
        """Gets the fields of this InteractionTypeDefinition.

        The properties of the Profile.

        :return: The fields of this InteractionTypeDefinition.
        :rtype: List[PropertyDefinition]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this InteractionTypeDefinition.

        The properties of the Profile.

        :param fields: The fields of this InteractionTypeDefinition.
        :type fields: List[PropertyDefinition]
        """

        self._fields = fields

    @property
    def instances_count(self):
        """Gets the instances_count of this InteractionTypeDefinition.

        The instance count.

        :return: The instances_count of this InteractionTypeDefinition.
        :rtype: int
        """
        return self._instances_count

    @instances_count.setter
    def instances_count(self, instances_count):
        """Sets the instances_count of this InteractionTypeDefinition.

        The instance count.

        :param instances_count: The instances_count of this InteractionTypeDefinition.
        :type instances_count: int
        """

        self._instances_count = instances_count

    @property
    def last_changed_utc(self):
        """Gets the last_changed_utc of this InteractionTypeDefinition.

        The last changed time for the type definition.

        :return: The last_changed_utc of this InteractionTypeDefinition.
        :rtype: datetime
        """
        return self._last_changed_utc

    @last_changed_utc.setter
    def last_changed_utc(self, last_changed_utc):
        """Sets the last_changed_utc of this InteractionTypeDefinition.

        The last changed time for the type definition.

        :param last_changed_utc: The last_changed_utc of this InteractionTypeDefinition.
        :type last_changed_utc: datetime
        """

        self._last_changed_utc = last_changed_utc

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this InteractionTypeDefinition.


        :return: The provisioning_state of this InteractionTypeDefinition.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this InteractionTypeDefinition.


        :param provisioning_state: The provisioning_state of this InteractionTypeDefinition.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def schema_item_type_link(self):
        """Gets the schema_item_type_link of this InteractionTypeDefinition.

        The schema org link. This helps ACI identify and suggest semantic models.

        :return: The schema_item_type_link of this InteractionTypeDefinition.
        :rtype: str
        """
        return self._schema_item_type_link

    @schema_item_type_link.setter
    def schema_item_type_link(self, schema_item_type_link):
        """Sets the schema_item_type_link of this InteractionTypeDefinition.

        The schema org link. This helps ACI identify and suggest semantic models.

        :param schema_item_type_link: The schema_item_type_link of this InteractionTypeDefinition.
        :type schema_item_type_link: str
        """

        self._schema_item_type_link = schema_item_type_link

    @property
    def tenant_id(self):
        """Gets the tenant_id of this InteractionTypeDefinition.

        The hub name.

        :return: The tenant_id of this InteractionTypeDefinition.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this InteractionTypeDefinition.

        The hub name.

        :param tenant_id: The tenant_id of this InteractionTypeDefinition.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def timestamp_field_name(self):
        """Gets the timestamp_field_name of this InteractionTypeDefinition.

        The timestamp property name. Represents the time when the interaction or profile update happened.

        :return: The timestamp_field_name of this InteractionTypeDefinition.
        :rtype: str
        """
        return self._timestamp_field_name

    @timestamp_field_name.setter
    def timestamp_field_name(self, timestamp_field_name):
        """Sets the timestamp_field_name of this InteractionTypeDefinition.

        The timestamp property name. Represents the time when the interaction or profile update happened.

        :param timestamp_field_name: The timestamp_field_name of this InteractionTypeDefinition.
        :type timestamp_field_name: str
        """

        self._timestamp_field_name = timestamp_field_name

    @property
    def type_name(self):
        """Gets the type_name of this InteractionTypeDefinition.

        The name of the entity.

        :return: The type_name of this InteractionTypeDefinition.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this InteractionTypeDefinition.

        The name of the entity.

        :param type_name: The type_name of this InteractionTypeDefinition.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def attributes(self):
        """Gets the attributes of this InteractionTypeDefinition.

        The attributes for the Type.

        :return: The attributes of this InteractionTypeDefinition.
        :rtype: Dict[str, List[str]]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this InteractionTypeDefinition.

        The attributes for the Type.

        :param attributes: The attributes of this InteractionTypeDefinition.
        :type attributes: Dict[str, List[str]]
        """

        self._attributes = attributes

    @property
    def description(self):
        """Gets the description of this InteractionTypeDefinition.

        Localized descriptions for the property.

        :return: The description of this InteractionTypeDefinition.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InteractionTypeDefinition.

        Localized descriptions for the property.

        :param description: The description of this InteractionTypeDefinition.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this InteractionTypeDefinition.

        Localized display names for the property.

        :return: The display_name of this InteractionTypeDefinition.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InteractionTypeDefinition.

        Localized display names for the property.

        :param display_name: The display_name of this InteractionTypeDefinition.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def large_image(self):
        """Gets the large_image of this InteractionTypeDefinition.

        Large Image associated with the Property or EntityType.

        :return: The large_image of this InteractionTypeDefinition.
        :rtype: str
        """
        return self._large_image

    @large_image.setter
    def large_image(self, large_image):
        """Sets the large_image of this InteractionTypeDefinition.

        Large Image associated with the Property or EntityType.

        :param large_image: The large_image of this InteractionTypeDefinition.
        :type large_image: str
        """

        self._large_image = large_image

    @property
    def localized_attributes(self):
        """Gets the localized_attributes of this InteractionTypeDefinition.

        Any custom localized attributes for the Type.

        :return: The localized_attributes of this InteractionTypeDefinition.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._localized_attributes

    @localized_attributes.setter
    def localized_attributes(self, localized_attributes):
        """Sets the localized_attributes of this InteractionTypeDefinition.

        Any custom localized attributes for the Type.

        :param localized_attributes: The localized_attributes of this InteractionTypeDefinition.
        :type localized_attributes: Dict[str, Dict[str, str]]
        """

        self._localized_attributes = localized_attributes

    @property
    def medium_image(self):
        """Gets the medium_image of this InteractionTypeDefinition.

        Medium Image associated with the Property or EntityType.

        :return: The medium_image of this InteractionTypeDefinition.
        :rtype: str
        """
        return self._medium_image

    @medium_image.setter
    def medium_image(self, medium_image):
        """Sets the medium_image of this InteractionTypeDefinition.

        Medium Image associated with the Property or EntityType.

        :param medium_image: The medium_image of this InteractionTypeDefinition.
        :type medium_image: str
        """

        self._medium_image = medium_image

    @property
    def small_image(self):
        """Gets the small_image of this InteractionTypeDefinition.

        Small Image associated with the Property or EntityType.

        :return: The small_image of this InteractionTypeDefinition.
        :rtype: str
        """
        return self._small_image

    @small_image.setter
    def small_image(self, small_image):
        """Sets the small_image of this InteractionTypeDefinition.

        Small Image associated with the Property or EntityType.

        :param small_image: The small_image of this InteractionTypeDefinition.
        :type small_image: str
        """

        self._small_image = small_image
