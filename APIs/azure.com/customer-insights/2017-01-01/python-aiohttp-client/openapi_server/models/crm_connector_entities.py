# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CrmConnectorEntities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, is_profile: bool=None, logical_name: str=None):
        """CrmConnectorEntities - a model defined in OpenAPI

        :param display_name: The display_name of this CrmConnectorEntities.
        :param is_profile: The is_profile of this CrmConnectorEntities.
        :param logical_name: The logical_name of this CrmConnectorEntities.
        """
        self.openapi_types = {
            'display_name': str,
            'is_profile': bool,
            'logical_name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'is_profile': 'isProfile',
            'logical_name': 'logicalName'
        }

        self._display_name = display_name
        self._is_profile = is_profile
        self._logical_name = logical_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrmConnectorEntities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrmConnectorEntities of this CrmConnectorEntities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this CrmConnectorEntities.

        The display name.

        :return: The display_name of this CrmConnectorEntities.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CrmConnectorEntities.

        The display name.

        :param display_name: The display_name of this CrmConnectorEntities.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def is_profile(self):
        """Gets the is_profile of this CrmConnectorEntities.

        Indicating whether this is profile.

        :return: The is_profile of this CrmConnectorEntities.
        :rtype: bool
        """
        return self._is_profile

    @is_profile.setter
    def is_profile(self, is_profile):
        """Sets the is_profile of this CrmConnectorEntities.

        Indicating whether this is profile.

        :param is_profile: The is_profile of this CrmConnectorEntities.
        :type is_profile: bool
        """

        self._is_profile = is_profile

    @property
    def logical_name(self):
        """Gets the logical_name of this CrmConnectorEntities.

        The logical name.

        :return: The logical_name of this CrmConnectorEntities.
        :rtype: str
        """
        return self._logical_name

    @logical_name.setter
    def logical_name(self, logical_name):
        """Sets the logical_name of this CrmConnectorEntities.

        The logical name.

        :param logical_name: The logical_name of this CrmConnectorEntities.
        :type logical_name: str
        """
        if logical_name is None:
            raise ValueError("Invalid value for `logical_name`, must not be `None`")

        self._logical_name = logical_name
