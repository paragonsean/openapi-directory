# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relationship_type_field_mapping import RelationshipTypeFieldMapping
from openapi_server import util


class RelationshipTypeMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_mappings: List[RelationshipTypeFieldMapping]=None):
        """RelationshipTypeMapping - a model defined in OpenAPI

        :param field_mappings: The field_mappings of this RelationshipTypeMapping.
        """
        self.openapi_types = {
            'field_mappings': List[RelationshipTypeFieldMapping]
        }

        self.attribute_map = {
            'field_mappings': 'fieldMappings'
        }

        self._field_mappings = field_mappings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationshipTypeMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationshipTypeMapping of this RelationshipTypeMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_mappings(self):
        """Gets the field_mappings of this RelationshipTypeMapping.

        Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.

        :return: The field_mappings of this RelationshipTypeMapping.
        :rtype: List[RelationshipTypeFieldMapping]
        """
        return self._field_mappings

    @field_mappings.setter
    def field_mappings(self, field_mappings):
        """Sets the field_mappings of this RelationshipTypeMapping.

        Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well.

        :param field_mappings: The field_mappings of this RelationshipTypeMapping.
        :type field_mappings: List[RelationshipTypeFieldMapping]
        """
        if field_mappings is None:
            raise ValueError("Invalid value for `field_mappings`, must not be `None`")

        self._field_mappings = field_mappings
