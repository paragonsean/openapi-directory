# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StrongId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: Dict[str, str]=None, display_name: Dict[str, str]=None, key_property_names: List[str]=None, strong_id_name: str=None):
        """StrongId - a model defined in OpenAPI

        :param description: The description of this StrongId.
        :param display_name: The display_name of this StrongId.
        :param key_property_names: The key_property_names of this StrongId.
        :param strong_id_name: The strong_id_name of this StrongId.
        """
        self.openapi_types = {
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'key_property_names': List[str],
            'strong_id_name': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'key_property_names': 'keyPropertyNames',
            'strong_id_name': 'strongIdName'
        }

        self._description = description
        self._display_name = display_name
        self._key_property_names = key_property_names
        self._strong_id_name = strong_id_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StrongId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StrongId of this StrongId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this StrongId.

        Localized descriptions.

        :return: The description of this StrongId.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StrongId.

        Localized descriptions.

        :param description: The description of this StrongId.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this StrongId.

        Localized display name.

        :return: The display_name of this StrongId.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this StrongId.

        Localized display name.

        :param display_name: The display_name of this StrongId.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def key_property_names(self):
        """Gets the key_property_names of this StrongId.

        The properties which make up the unique ID.

        :return: The key_property_names of this StrongId.
        :rtype: List[str]
        """
        return self._key_property_names

    @key_property_names.setter
    def key_property_names(self, key_property_names):
        """Sets the key_property_names of this StrongId.

        The properties which make up the unique ID.

        :param key_property_names: The key_property_names of this StrongId.
        :type key_property_names: List[str]
        """
        if key_property_names is None:
            raise ValueError("Invalid value for `key_property_names`, must not be `None`")

        self._key_property_names = key_property_names

    @property
    def strong_id_name(self):
        """Gets the strong_id_name of this StrongId.

        The Name identifying the strong ID.

        :return: The strong_id_name of this StrongId.
        :rtype: str
        """
        return self._strong_id_name

    @strong_id_name.setter
    def strong_id_name(self, strong_id_name):
        """Sets the strong_id_name of this StrongId.

        The Name identifying the strong ID.

        :param strong_id_name: The strong_id_name of this StrongId.
        :type strong_id_name: str
        """
        if strong_id_name is None:
            raise ValueError("Invalid value for `strong_id_name`, must not be `None`")

        self._strong_id_name = strong_id_name
