# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment_principal import AssignmentPrincipal
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server.models.resource_set_description import ResourceSetDescription
from openapi_server import util


class RoleAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignment_name: str=None, conflation_policies: ResourceSetDescription=None, connectors: ResourceSetDescription=None, description: Dict[str, str]=None, display_name: Dict[str, str]=None, interactions: ResourceSetDescription=None, kpis: ResourceSetDescription=None, links: ResourceSetDescription=None, principals: List[AssignmentPrincipal]=None, profiles: ResourceSetDescription=None, provisioning_state: ProvisioningState=None, relationship_links: ResourceSetDescription=None, relationships: ResourceSetDescription=None, role: str=None, role_assignments: ResourceSetDescription=None, sas_policies: ResourceSetDescription=None, segments: ResourceSetDescription=None, tenant_id: str=None, views: ResourceSetDescription=None, widget_types: ResourceSetDescription=None):
        """RoleAssignment - a model defined in OpenAPI

        :param assignment_name: The assignment_name of this RoleAssignment.
        :param conflation_policies: The conflation_policies of this RoleAssignment.
        :param connectors: The connectors of this RoleAssignment.
        :param description: The description of this RoleAssignment.
        :param display_name: The display_name of this RoleAssignment.
        :param interactions: The interactions of this RoleAssignment.
        :param kpis: The kpis of this RoleAssignment.
        :param links: The links of this RoleAssignment.
        :param principals: The principals of this RoleAssignment.
        :param profiles: The profiles of this RoleAssignment.
        :param provisioning_state: The provisioning_state of this RoleAssignment.
        :param relationship_links: The relationship_links of this RoleAssignment.
        :param relationships: The relationships of this RoleAssignment.
        :param role: The role of this RoleAssignment.
        :param role_assignments: The role_assignments of this RoleAssignment.
        :param sas_policies: The sas_policies of this RoleAssignment.
        :param segments: The segments of this RoleAssignment.
        :param tenant_id: The tenant_id of this RoleAssignment.
        :param views: The views of this RoleAssignment.
        :param widget_types: The widget_types of this RoleAssignment.
        """
        self.openapi_types = {
            'assignment_name': str,
            'conflation_policies': ResourceSetDescription,
            'connectors': ResourceSetDescription,
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'interactions': ResourceSetDescription,
            'kpis': ResourceSetDescription,
            'links': ResourceSetDescription,
            'principals': List[AssignmentPrincipal],
            'profiles': ResourceSetDescription,
            'provisioning_state': ProvisioningState,
            'relationship_links': ResourceSetDescription,
            'relationships': ResourceSetDescription,
            'role': str,
            'role_assignments': ResourceSetDescription,
            'sas_policies': ResourceSetDescription,
            'segments': ResourceSetDescription,
            'tenant_id': str,
            'views': ResourceSetDescription,
            'widget_types': ResourceSetDescription
        }

        self.attribute_map = {
            'assignment_name': 'assignmentName',
            'conflation_policies': 'conflationPolicies',
            'connectors': 'connectors',
            'description': 'description',
            'display_name': 'displayName',
            'interactions': 'interactions',
            'kpis': 'kpis',
            'links': 'links',
            'principals': 'principals',
            'profiles': 'profiles',
            'provisioning_state': 'provisioningState',
            'relationship_links': 'relationshipLinks',
            'relationships': 'relationships',
            'role': 'role',
            'role_assignments': 'roleAssignments',
            'sas_policies': 'sasPolicies',
            'segments': 'segments',
            'tenant_id': 'tenantId',
            'views': 'views',
            'widget_types': 'widgetTypes'
        }

        self._assignment_name = assignment_name
        self._conflation_policies = conflation_policies
        self._connectors = connectors
        self._description = description
        self._display_name = display_name
        self._interactions = interactions
        self._kpis = kpis
        self._links = links
        self._principals = principals
        self._profiles = profiles
        self._provisioning_state = provisioning_state
        self._relationship_links = relationship_links
        self._relationships = relationships
        self._role = role
        self._role_assignments = role_assignments
        self._sas_policies = sas_policies
        self._segments = segments
        self._tenant_id = tenant_id
        self._views = views
        self._widget_types = widget_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleAssignment of this RoleAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignment_name(self):
        """Gets the assignment_name of this RoleAssignment.

        The name of the metadata object.

        :return: The assignment_name of this RoleAssignment.
        :rtype: str
        """
        return self._assignment_name

    @assignment_name.setter
    def assignment_name(self, assignment_name):
        """Sets the assignment_name of this RoleAssignment.

        The name of the metadata object.

        :param assignment_name: The assignment_name of this RoleAssignment.
        :type assignment_name: str
        """

        self._assignment_name = assignment_name

    @property
    def conflation_policies(self):
        """Gets the conflation_policies of this RoleAssignment.


        :return: The conflation_policies of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._conflation_policies

    @conflation_policies.setter
    def conflation_policies(self, conflation_policies):
        """Sets the conflation_policies of this RoleAssignment.


        :param conflation_policies: The conflation_policies of this RoleAssignment.
        :type conflation_policies: ResourceSetDescription
        """

        self._conflation_policies = conflation_policies

    @property
    def connectors(self):
        """Gets the connectors of this RoleAssignment.


        :return: The connectors of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._connectors

    @connectors.setter
    def connectors(self, connectors):
        """Sets the connectors of this RoleAssignment.


        :param connectors: The connectors of this RoleAssignment.
        :type connectors: ResourceSetDescription
        """

        self._connectors = connectors

    @property
    def description(self):
        """Gets the description of this RoleAssignment.

        Localized description for the metadata.

        :return: The description of this RoleAssignment.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoleAssignment.

        Localized description for the metadata.

        :param description: The description of this RoleAssignment.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this RoleAssignment.

        Localized display names for the metadata.

        :return: The display_name of this RoleAssignment.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RoleAssignment.

        Localized display names for the metadata.

        :param display_name: The display_name of this RoleAssignment.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def interactions(self):
        """Gets the interactions of this RoleAssignment.


        :return: The interactions of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._interactions

    @interactions.setter
    def interactions(self, interactions):
        """Sets the interactions of this RoleAssignment.


        :param interactions: The interactions of this RoleAssignment.
        :type interactions: ResourceSetDescription
        """

        self._interactions = interactions

    @property
    def kpis(self):
        """Gets the kpis of this RoleAssignment.


        :return: The kpis of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._kpis

    @kpis.setter
    def kpis(self, kpis):
        """Sets the kpis of this RoleAssignment.


        :param kpis: The kpis of this RoleAssignment.
        :type kpis: ResourceSetDescription
        """

        self._kpis = kpis

    @property
    def links(self):
        """Gets the links of this RoleAssignment.


        :return: The links of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RoleAssignment.


        :param links: The links of this RoleAssignment.
        :type links: ResourceSetDescription
        """

        self._links = links

    @property
    def principals(self):
        """Gets the principals of this RoleAssignment.

        The principals being assigned to.

        :return: The principals of this RoleAssignment.
        :rtype: List[AssignmentPrincipal]
        """
        return self._principals

    @principals.setter
    def principals(self, principals):
        """Sets the principals of this RoleAssignment.

        The principals being assigned to.

        :param principals: The principals of this RoleAssignment.
        :type principals: List[AssignmentPrincipal]
        """
        if principals is None:
            raise ValueError("Invalid value for `principals`, must not be `None`")

        self._principals = principals

    @property
    def profiles(self):
        """Gets the profiles of this RoleAssignment.


        :return: The profiles of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this RoleAssignment.


        :param profiles: The profiles of this RoleAssignment.
        :type profiles: ResourceSetDescription
        """

        self._profiles = profiles

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RoleAssignment.


        :return: The provisioning_state of this RoleAssignment.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RoleAssignment.


        :param provisioning_state: The provisioning_state of this RoleAssignment.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def relationship_links(self):
        """Gets the relationship_links of this RoleAssignment.


        :return: The relationship_links of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._relationship_links

    @relationship_links.setter
    def relationship_links(self, relationship_links):
        """Sets the relationship_links of this RoleAssignment.


        :param relationship_links: The relationship_links of this RoleAssignment.
        :type relationship_links: ResourceSetDescription
        """

        self._relationship_links = relationship_links

    @property
    def relationships(self):
        """Gets the relationships of this RoleAssignment.


        :return: The relationships of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this RoleAssignment.


        :param relationships: The relationships of this RoleAssignment.
        :type relationships: ResourceSetDescription
        """

        self._relationships = relationships

    @property
    def role(self):
        """Gets the role of this RoleAssignment.

        Type of roles.

        :return: The role of this RoleAssignment.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RoleAssignment.

        Type of roles.

        :param role: The role of this RoleAssignment.
        :type role: str
        """
        allowed_values = ["Admin", "Reader", "ManageAdmin", "ManageReader", "DataAdmin", "DataReader"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def role_assignments(self):
        """Gets the role_assignments of this RoleAssignment.


        :return: The role_assignments of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._role_assignments

    @role_assignments.setter
    def role_assignments(self, role_assignments):
        """Sets the role_assignments of this RoleAssignment.


        :param role_assignments: The role_assignments of this RoleAssignment.
        :type role_assignments: ResourceSetDescription
        """

        self._role_assignments = role_assignments

    @property
    def sas_policies(self):
        """Gets the sas_policies of this RoleAssignment.


        :return: The sas_policies of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._sas_policies

    @sas_policies.setter
    def sas_policies(self, sas_policies):
        """Sets the sas_policies of this RoleAssignment.


        :param sas_policies: The sas_policies of this RoleAssignment.
        :type sas_policies: ResourceSetDescription
        """

        self._sas_policies = sas_policies

    @property
    def segments(self):
        """Gets the segments of this RoleAssignment.


        :return: The segments of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this RoleAssignment.


        :param segments: The segments of this RoleAssignment.
        :type segments: ResourceSetDescription
        """

        self._segments = segments

    @property
    def tenant_id(self):
        """Gets the tenant_id of this RoleAssignment.

        The hub name.

        :return: The tenant_id of this RoleAssignment.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this RoleAssignment.

        The hub name.

        :param tenant_id: The tenant_id of this RoleAssignment.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def views(self):
        """Gets the views of this RoleAssignment.


        :return: The views of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this RoleAssignment.


        :param views: The views of this RoleAssignment.
        :type views: ResourceSetDescription
        """

        self._views = views

    @property
    def widget_types(self):
        """Gets the widget_types of this RoleAssignment.


        :return: The widget_types of this RoleAssignment.
        :rtype: ResourceSetDescription
        """
        return self._widget_types

    @widget_types.setter
    def widget_types(self, widget_types):
        """Sets the widget_types of this RoleAssignment.


        :param widget_types: The widget_types of this RoleAssignment.
        :type widget_types: ResourceSetDescription
        """

        self._widget_types = widget_types
