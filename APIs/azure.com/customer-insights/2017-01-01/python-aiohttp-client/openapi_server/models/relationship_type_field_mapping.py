# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelationshipTypeFieldMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_field_name: str=None, related_profile_key_property: str=None):
        """RelationshipTypeFieldMapping - a model defined in OpenAPI

        :param profile_field_name: The profile_field_name of this RelationshipTypeFieldMapping.
        :param related_profile_key_property: The related_profile_key_property of this RelationshipTypeFieldMapping.
        """
        self.openapi_types = {
            'profile_field_name': str,
            'related_profile_key_property': str
        }

        self.attribute_map = {
            'profile_field_name': 'profileFieldName',
            'related_profile_key_property': 'relatedProfileKeyProperty'
        }

        self._profile_field_name = profile_field_name
        self._related_profile_key_property = related_profile_key_property

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelationshipTypeFieldMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelationshipTypeFieldMapping of this RelationshipTypeFieldMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_field_name(self):
        """Gets the profile_field_name of this RelationshipTypeFieldMapping.

        Specifies the fieldName in profile.

        :return: The profile_field_name of this RelationshipTypeFieldMapping.
        :rtype: str
        """
        return self._profile_field_name

    @profile_field_name.setter
    def profile_field_name(self, profile_field_name):
        """Sets the profile_field_name of this RelationshipTypeFieldMapping.

        Specifies the fieldName in profile.

        :param profile_field_name: The profile_field_name of this RelationshipTypeFieldMapping.
        :type profile_field_name: str
        """
        if profile_field_name is None:
            raise ValueError("Invalid value for `profile_field_name`, must not be `None`")

        self._profile_field_name = profile_field_name

    @property
    def related_profile_key_property(self):
        """Gets the related_profile_key_property of this RelationshipTypeFieldMapping.

        Specifies the KeyProperty (from StrongId) of the related profile.

        :return: The related_profile_key_property of this RelationshipTypeFieldMapping.
        :rtype: str
        """
        return self._related_profile_key_property

    @related_profile_key_property.setter
    def related_profile_key_property(self, related_profile_key_property):
        """Sets the related_profile_key_property of this RelationshipTypeFieldMapping.

        Specifies the KeyProperty (from StrongId) of the related profile.

        :param related_profile_key_property: The related_profile_key_property of this RelationshipTypeFieldMapping.
        :type related_profile_key_property: str
        """
        if related_profile_key_property is None:
            raise ValueError("Invalid value for `related_profile_key_property`, must not be `None`")

        self._related_profile_key_property = related_profile_key_property
