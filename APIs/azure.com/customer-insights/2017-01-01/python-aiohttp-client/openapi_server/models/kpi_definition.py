# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kpi_alias import KpiAlias
from openapi_server.models.kpi_extract import KpiExtract
from openapi_server.models.kpi_group_by_metadata import KpiGroupByMetadata
from openapi_server.models.kpi_participant_profiles_metadata import KpiParticipantProfilesMetadata
from openapi_server.models.kpi_thresholds import KpiThresholds
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server import util


class KpiDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aliases: List[KpiAlias]=None, calculation_window: str=None, calculation_window_field_name: str=None, description: Dict[str, str]=None, display_name: Dict[str, str]=None, entity_type: str=None, entity_type_name: str=None, expression: str=None, extracts: List[KpiExtract]=None, filter: str=None, function: str=None, group_by: List[str]=None, group_by_metadata: List[KpiGroupByMetadata]=None, kpi_name: str=None, participant_profiles_metadata: List[KpiParticipantProfilesMetadata]=None, provisioning_state: ProvisioningState=None, tenant_id: str=None, thres_holds: KpiThresholds=None, unit: str=None):
        """KpiDefinition - a model defined in OpenAPI

        :param aliases: The aliases of this KpiDefinition.
        :param calculation_window: The calculation_window of this KpiDefinition.
        :param calculation_window_field_name: The calculation_window_field_name of this KpiDefinition.
        :param description: The description of this KpiDefinition.
        :param display_name: The display_name of this KpiDefinition.
        :param entity_type: The entity_type of this KpiDefinition.
        :param entity_type_name: The entity_type_name of this KpiDefinition.
        :param expression: The expression of this KpiDefinition.
        :param extracts: The extracts of this KpiDefinition.
        :param filter: The filter of this KpiDefinition.
        :param function: The function of this KpiDefinition.
        :param group_by: The group_by of this KpiDefinition.
        :param group_by_metadata: The group_by_metadata of this KpiDefinition.
        :param kpi_name: The kpi_name of this KpiDefinition.
        :param participant_profiles_metadata: The participant_profiles_metadata of this KpiDefinition.
        :param provisioning_state: The provisioning_state of this KpiDefinition.
        :param tenant_id: The tenant_id of this KpiDefinition.
        :param thres_holds: The thres_holds of this KpiDefinition.
        :param unit: The unit of this KpiDefinition.
        """
        self.openapi_types = {
            'aliases': List[KpiAlias],
            'calculation_window': str,
            'calculation_window_field_name': str,
            'description': Dict[str, str],
            'display_name': Dict[str, str],
            'entity_type': str,
            'entity_type_name': str,
            'expression': str,
            'extracts': List[KpiExtract],
            'filter': str,
            'function': str,
            'group_by': List[str],
            'group_by_metadata': List[KpiGroupByMetadata],
            'kpi_name': str,
            'participant_profiles_metadata': List[KpiParticipantProfilesMetadata],
            'provisioning_state': ProvisioningState,
            'tenant_id': str,
            'thres_holds': KpiThresholds,
            'unit': str
        }

        self.attribute_map = {
            'aliases': 'aliases',
            'calculation_window': 'calculationWindow',
            'calculation_window_field_name': 'calculationWindowFieldName',
            'description': 'description',
            'display_name': 'displayName',
            'entity_type': 'entityType',
            'entity_type_name': 'entityTypeName',
            'expression': 'expression',
            'extracts': 'extracts',
            'filter': 'filter',
            'function': 'function',
            'group_by': 'groupBy',
            'group_by_metadata': 'groupByMetadata',
            'kpi_name': 'kpiName',
            'participant_profiles_metadata': 'participantProfilesMetadata',
            'provisioning_state': 'provisioningState',
            'tenant_id': 'tenantId',
            'thres_holds': 'thresHolds',
            'unit': 'unit'
        }

        self._aliases = aliases
        self._calculation_window = calculation_window
        self._calculation_window_field_name = calculation_window_field_name
        self._description = description
        self._display_name = display_name
        self._entity_type = entity_type
        self._entity_type_name = entity_type_name
        self._expression = expression
        self._extracts = extracts
        self._filter = filter
        self._function = function
        self._group_by = group_by
        self._group_by_metadata = group_by_metadata
        self._kpi_name = kpi_name
        self._participant_profiles_metadata = participant_profiles_metadata
        self._provisioning_state = provisioning_state
        self._tenant_id = tenant_id
        self._thres_holds = thres_holds
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KpiDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KpiDefinition of this KpiDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aliases(self):
        """Gets the aliases of this KpiDefinition.

        The aliases.

        :return: The aliases of this KpiDefinition.
        :rtype: List[KpiAlias]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this KpiDefinition.

        The aliases.

        :param aliases: The aliases of this KpiDefinition.
        :type aliases: List[KpiAlias]
        """

        self._aliases = aliases

    @property
    def calculation_window(self):
        """Gets the calculation_window of this KpiDefinition.

        The calculation window.

        :return: The calculation_window of this KpiDefinition.
        :rtype: str
        """
        return self._calculation_window

    @calculation_window.setter
    def calculation_window(self, calculation_window):
        """Sets the calculation_window of this KpiDefinition.

        The calculation window.

        :param calculation_window: The calculation_window of this KpiDefinition.
        :type calculation_window: str
        """
        allowed_values = ["Lifetime", "Hour", "Day", "Week", "Month"]  # noqa: E501
        if calculation_window not in allowed_values:
            raise ValueError(
                "Invalid value for `calculation_window` ({0}), must be one of {1}"
                .format(calculation_window, allowed_values)
            )

        self._calculation_window = calculation_window

    @property
    def calculation_window_field_name(self):
        """Gets the calculation_window_field_name of this KpiDefinition.

        Name of calculation window field.

        :return: The calculation_window_field_name of this KpiDefinition.
        :rtype: str
        """
        return self._calculation_window_field_name

    @calculation_window_field_name.setter
    def calculation_window_field_name(self, calculation_window_field_name):
        """Sets the calculation_window_field_name of this KpiDefinition.

        Name of calculation window field.

        :param calculation_window_field_name: The calculation_window_field_name of this KpiDefinition.
        :type calculation_window_field_name: str
        """

        self._calculation_window_field_name = calculation_window_field_name

    @property
    def description(self):
        """Gets the description of this KpiDefinition.

        Localized description for the KPI.

        :return: The description of this KpiDefinition.
        :rtype: Dict[str, str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this KpiDefinition.

        Localized description for the KPI.

        :param description: The description of this KpiDefinition.
        :type description: Dict[str, str]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this KpiDefinition.

        Localized display name for the KPI.

        :return: The display_name of this KpiDefinition.
        :rtype: Dict[str, str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this KpiDefinition.

        Localized display name for the KPI.

        :param display_name: The display_name of this KpiDefinition.
        :type display_name: Dict[str, str]
        """

        self._display_name = display_name

    @property
    def entity_type(self):
        """Gets the entity_type of this KpiDefinition.

        The mapping entity type.

        :return: The entity_type of this KpiDefinition.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this KpiDefinition.

        The mapping entity type.

        :param entity_type: The entity_type of this KpiDefinition.
        :type entity_type: str
        """
        allowed_values = ["None", "Profile", "Interaction", "Relationship"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def entity_type_name(self):
        """Gets the entity_type_name of this KpiDefinition.

        The mapping entity name.

        :return: The entity_type_name of this KpiDefinition.
        :rtype: str
        """
        return self._entity_type_name

    @entity_type_name.setter
    def entity_type_name(self, entity_type_name):
        """Sets the entity_type_name of this KpiDefinition.

        The mapping entity name.

        :param entity_type_name: The entity_type_name of this KpiDefinition.
        :type entity_type_name: str
        """
        if entity_type_name is None:
            raise ValueError("Invalid value for `entity_type_name`, must not be `None`")

        self._entity_type_name = entity_type_name

    @property
    def expression(self):
        """Gets the expression of this KpiDefinition.

        The computation expression for the KPI.

        :return: The expression of this KpiDefinition.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this KpiDefinition.

        The computation expression for the KPI.

        :param expression: The expression of this KpiDefinition.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def extracts(self):
        """Gets the extracts of this KpiDefinition.

        The KPI extracts.

        :return: The extracts of this KpiDefinition.
        :rtype: List[KpiExtract]
        """
        return self._extracts

    @extracts.setter
    def extracts(self, extracts):
        """Sets the extracts of this KpiDefinition.

        The KPI extracts.

        :param extracts: The extracts of this KpiDefinition.
        :type extracts: List[KpiExtract]
        """

        self._extracts = extracts

    @property
    def filter(self):
        """Gets the filter of this KpiDefinition.

        The filter expression for the KPI.

        :return: The filter of this KpiDefinition.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this KpiDefinition.

        The filter expression for the KPI.

        :param filter: The filter of this KpiDefinition.
        :type filter: str
        """

        self._filter = filter

    @property
    def function(self):
        """Gets the function of this KpiDefinition.

        The computation function for the KPI.

        :return: The function of this KpiDefinition.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this KpiDefinition.

        The computation function for the KPI.

        :param function: The function of this KpiDefinition.
        :type function: str
        """
        allowed_values = ["Sum", "Avg", "Min", "Max", "Last", "Count", "None", "CountDistinct"]  # noqa: E501
        if function not in allowed_values:
            raise ValueError(
                "Invalid value for `function` ({0}), must be one of {1}"
                .format(function, allowed_values)
            )

        self._function = function

    @property
    def group_by(self):
        """Gets the group_by of this KpiDefinition.

        the group by properties for the KPI.

        :return: The group_by of this KpiDefinition.
        :rtype: List[str]
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this KpiDefinition.

        the group by properties for the KPI.

        :param group_by: The group_by of this KpiDefinition.
        :type group_by: List[str]
        """

        self._group_by = group_by

    @property
    def group_by_metadata(self):
        """Gets the group_by_metadata of this KpiDefinition.

        The KPI GroupByMetadata.

        :return: The group_by_metadata of this KpiDefinition.
        :rtype: List[KpiGroupByMetadata]
        """
        return self._group_by_metadata

    @group_by_metadata.setter
    def group_by_metadata(self, group_by_metadata):
        """Sets the group_by_metadata of this KpiDefinition.

        The KPI GroupByMetadata.

        :param group_by_metadata: The group_by_metadata of this KpiDefinition.
        :type group_by_metadata: List[KpiGroupByMetadata]
        """

        self._group_by_metadata = group_by_metadata

    @property
    def kpi_name(self):
        """Gets the kpi_name of this KpiDefinition.

        The KPI name.

        :return: The kpi_name of this KpiDefinition.
        :rtype: str
        """
        return self._kpi_name

    @kpi_name.setter
    def kpi_name(self, kpi_name):
        """Sets the kpi_name of this KpiDefinition.

        The KPI name.

        :param kpi_name: The kpi_name of this KpiDefinition.
        :type kpi_name: str
        """

        self._kpi_name = kpi_name

    @property
    def participant_profiles_metadata(self):
        """Gets the participant_profiles_metadata of this KpiDefinition.

        The participant profiles.

        :return: The participant_profiles_metadata of this KpiDefinition.
        :rtype: List[KpiParticipantProfilesMetadata]
        """
        return self._participant_profiles_metadata

    @participant_profiles_metadata.setter
    def participant_profiles_metadata(self, participant_profiles_metadata):
        """Sets the participant_profiles_metadata of this KpiDefinition.

        The participant profiles.

        :param participant_profiles_metadata: The participant_profiles_metadata of this KpiDefinition.
        :type participant_profiles_metadata: List[KpiParticipantProfilesMetadata]
        """

        self._participant_profiles_metadata = participant_profiles_metadata

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this KpiDefinition.


        :return: The provisioning_state of this KpiDefinition.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this KpiDefinition.


        :param provisioning_state: The provisioning_state of this KpiDefinition.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def tenant_id(self):
        """Gets the tenant_id of this KpiDefinition.

        The hub name.

        :return: The tenant_id of this KpiDefinition.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this KpiDefinition.

        The hub name.

        :param tenant_id: The tenant_id of this KpiDefinition.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def thres_holds(self):
        """Gets the thres_holds of this KpiDefinition.


        :return: The thres_holds of this KpiDefinition.
        :rtype: KpiThresholds
        """
        return self._thres_holds

    @thres_holds.setter
    def thres_holds(self, thres_holds):
        """Sets the thres_holds of this KpiDefinition.


        :param thres_holds: The thres_holds of this KpiDefinition.
        :type thres_holds: KpiThresholds
        """

        self._thres_holds = thres_holds

    @property
    def unit(self):
        """Gets the unit of this KpiDefinition.

        The unit of measurement for the KPI.

        :return: The unit of this KpiDefinition.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this KpiDefinition.

        The unit of measurement for the KPI.

        :param unit: The unit of this KpiDefinition.
        :type unit: str
        """

        self._unit = unit
