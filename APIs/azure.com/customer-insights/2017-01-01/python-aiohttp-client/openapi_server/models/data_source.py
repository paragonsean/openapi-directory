# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_reference_id: str=None, data_source_type: str=None, id: int=None, name: str=None, status: str=None):
        """DataSource - a model defined in OpenAPI

        :param data_source_reference_id: The data_source_reference_id of this DataSource.
        :param data_source_type: The data_source_type of this DataSource.
        :param id: The id of this DataSource.
        :param name: The name of this DataSource.
        :param status: The status of this DataSource.
        """
        self.openapi_types = {
            'data_source_reference_id': str,
            'data_source_type': str,
            'id': int,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'data_source_reference_id': 'dataSourceReferenceId',
            'data_source_type': 'dataSourceType',
            'id': 'id',
            'name': 'name',
            'status': 'status'
        }

        self._data_source_reference_id = data_source_reference_id
        self._data_source_type = data_source_type
        self._id = id
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSource of this DataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_reference_id(self):
        """Gets the data_source_reference_id of this DataSource.

        The data source reference id.

        :return: The data_source_reference_id of this DataSource.
        :rtype: str
        """
        return self._data_source_reference_id

    @data_source_reference_id.setter
    def data_source_reference_id(self, data_source_reference_id):
        """Sets the data_source_reference_id of this DataSource.

        The data source reference id.

        :param data_source_reference_id: The data_source_reference_id of this DataSource.
        :type data_source_reference_id: str
        """

        self._data_source_reference_id = data_source_reference_id

    @property
    def data_source_type(self):
        """Gets the data_source_type of this DataSource.

        The data source type.

        :return: The data_source_type of this DataSource.
        :rtype: str
        """
        return self._data_source_type

    @data_source_type.setter
    def data_source_type(self, data_source_type):
        """Sets the data_source_type of this DataSource.

        The data source type.

        :param data_source_type: The data_source_type of this DataSource.
        :type data_source_type: str
        """
        allowed_values = ["Connector", "LinkInteraction", "SystemDefault"]  # noqa: E501
        if data_source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_source_type` ({0}), must be one of {1}"
                .format(data_source_type, allowed_values)
            )

        self._data_source_type = data_source_type

    @property
    def id(self):
        """Gets the id of this DataSource.

        The data source ID.

        :return: The id of this DataSource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataSource.

        The data source ID.

        :param id: The id of this DataSource.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataSource.

        The data source name

        :return: The name of this DataSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSource.

        The data source name

        :param name: The name of this DataSource.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this DataSource.

        The data source status.

        :return: The status of this DataSource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataSource.

        The data source status.

        :param status: The status of this DataSource.
        :type status: str
        """
        allowed_values = ["None", "Active", "Deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
