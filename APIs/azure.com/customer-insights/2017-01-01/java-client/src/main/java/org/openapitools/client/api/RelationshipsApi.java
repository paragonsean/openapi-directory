/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RelationshipListResult;
import org.openapitools.client.model.RelationshipResourceFormat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RelationshipsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RelationshipsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RelationshipsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for relationshipsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the Relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Relationship operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the relationship. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create relationship operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call relationshipsCreateOrUpdateCall(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, RelationshipResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships/{relationshipName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "relationshipName" + "}", localVarApiClient.escapeString(relationshipName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call relationshipsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, RelationshipResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling relationshipsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling relationshipsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'relationshipName' is set
        if (relationshipName == null) {
            throw new ApiException("Missing the required parameter 'relationshipName' when calling relationshipsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling relationshipsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling relationshipsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling relationshipsCreateOrUpdate(Async)");
        }

        return relationshipsCreateOrUpdateCall(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates a relationship or updates an existing relationship within a hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the Relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Relationship operation. (required)
     * @return RelationshipResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the relationship. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create relationship operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipResourceFormat relationshipsCreateOrUpdate(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, RelationshipResourceFormat parameters) throws ApiException {
        ApiResponse<RelationshipResourceFormat> localVarResp = relationshipsCreateOrUpdateWithHttpInfo(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a relationship or updates an existing relationship within a hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the Relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Relationship operation. (required)
     * @return ApiResponse&lt;RelationshipResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the relationship. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create relationship operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipResourceFormat> relationshipsCreateOrUpdateWithHttpInfo(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, RelationshipResourceFormat parameters) throws ApiException {
        okhttp3.Call localVarCall = relationshipsCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<RelationshipResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a relationship or updates an existing relationship within a hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the Relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Relationship operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the relationship. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create relationship operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call relationshipsCreateOrUpdateAsync(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, RelationshipResourceFormat parameters, final ApiCallback<RelationshipResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = relationshipsCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<RelationshipResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for relationshipsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The relationship is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call relationshipsDeleteCall(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships/{relationshipName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "relationshipName" + "}", localVarApiClient.escapeString(relationshipName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call relationshipsDeleteValidateBeforeCall(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling relationshipsDelete(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling relationshipsDelete(Async)");
        }

        // verify the required parameter 'relationshipName' is set
        if (relationshipName == null) {
            throw new ApiException("Missing the required parameter 'relationshipName' when calling relationshipsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling relationshipsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling relationshipsDelete(Async)");
        }

        return relationshipsDeleteCall(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a relationship within a hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The relationship is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public void relationshipsDelete(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId) throws ApiException {
        relationshipsDeleteWithHttpInfo(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a relationship within a hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The relationship is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> relationshipsDeleteWithHttpInfo(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = relationshipsDeleteValidateBeforeCall(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a relationship within a hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The relationship is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call relationshipsDeleteAsync(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = relationshipsDeleteValidateBeforeCall(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for relationshipsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the relationship. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call relationshipsGetCall(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships/{relationshipName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "relationshipName" + "}", localVarApiClient.escapeString(relationshipName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call relationshipsGetValidateBeforeCall(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling relationshipsGet(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling relationshipsGet(Async)");
        }

        // verify the required parameter 'relationshipName' is set
        if (relationshipName == null) {
            throw new ApiException("Missing the required parameter 'relationshipName' when calling relationshipsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling relationshipsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling relationshipsGet(Async)");
        }

        return relationshipsGetCall(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets information about the specified relationship.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return RelationshipResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the relationship. </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipResourceFormat relationshipsGet(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<RelationshipResourceFormat> localVarResp = relationshipsGetWithHttpInfo(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the specified relationship.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;RelationshipResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the relationship. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipResourceFormat> relationshipsGetWithHttpInfo(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = relationshipsGetValidateBeforeCall(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<RelationshipResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the specified relationship.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param relationshipName The name of the relationship. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the relationship. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call relationshipsGetAsync(String resourceGroupName, String hubName, String relationshipName, String apiVersion, String subscriptionId, final ApiCallback<RelationshipResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = relationshipsGetValidateBeforeCall(resourceGroupName, hubName, relationshipName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<RelationshipResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for relationshipsListByHub
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the relationships in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call relationshipsListByHubCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/relationships"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call relationshipsListByHubValidateBeforeCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling relationshipsListByHub(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling relationshipsListByHub(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling relationshipsListByHub(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling relationshipsListByHub(Async)");
        }

        return relationshipsListByHubCall(resourceGroupName, hubName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all relationships in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return RelationshipListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the relationships in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipListResult relationshipsListByHub(String resourceGroupName, String hubName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<RelationshipListResult> localVarResp = relationshipsListByHubWithHttpInfo(resourceGroupName, hubName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all relationships in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;RelationshipListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the relationships in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipListResult> relationshipsListByHubWithHttpInfo(String resourceGroupName, String hubName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = relationshipsListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<RelationshipListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all relationships in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the relationships in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call relationshipsListByHubAsync(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, final ApiCallback<RelationshipListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = relationshipsListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<RelationshipListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
