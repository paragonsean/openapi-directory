/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The fields mapping for Relationships.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelationshipLinkFieldMapping {
  public static final String SERIALIZED_NAME_INTERACTION_FIELD_NAME = "interactionFieldName";
  @SerializedName(SERIALIZED_NAME_INTERACTION_FIELD_NAME)
  private String interactionFieldName;

  /**
   * Link type.
   */
  @JsonAdapter(LinkTypeEnum.Adapter.class)
  public enum LinkTypeEnum {
    UPDATE_ALWAYS("UpdateAlways"),
    
    COPY_IF_NULL("CopyIfNull");

    private String value;

    LinkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinkTypeEnum fromValue(String value) {
      for (LinkTypeEnum b : LinkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINK_TYPE = "linkType";
  @SerializedName(SERIALIZED_NAME_LINK_TYPE)
  private LinkTypeEnum linkType;

  public static final String SERIALIZED_NAME_RELATIONSHIP_FIELD_NAME = "relationshipFieldName";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_FIELD_NAME)
  private String relationshipFieldName;

  public RelationshipLinkFieldMapping() {
  }

  public RelationshipLinkFieldMapping interactionFieldName(String interactionFieldName) {
    this.interactionFieldName = interactionFieldName;
    return this;
  }

  /**
   * The field name on the Interaction Type.
   * @return interactionFieldName
   */
  @javax.annotation.Nonnull
  public String getInteractionFieldName() {
    return interactionFieldName;
  }

  public void setInteractionFieldName(String interactionFieldName) {
    this.interactionFieldName = interactionFieldName;
  }


  public RelationshipLinkFieldMapping linkType(LinkTypeEnum linkType) {
    this.linkType = linkType;
    return this;
  }

  /**
   * Link type.
   * @return linkType
   */
  @javax.annotation.Nullable
  public LinkTypeEnum getLinkType() {
    return linkType;
  }

  public void setLinkType(LinkTypeEnum linkType) {
    this.linkType = linkType;
  }


  public RelationshipLinkFieldMapping relationshipFieldName(String relationshipFieldName) {
    this.relationshipFieldName = relationshipFieldName;
    return this;
  }

  /**
   * The field name on the Relationship metadata.
   * @return relationshipFieldName
   */
  @javax.annotation.Nonnull
  public String getRelationshipFieldName() {
    return relationshipFieldName;
  }

  public void setRelationshipFieldName(String relationshipFieldName) {
    this.relationshipFieldName = relationshipFieldName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationshipLinkFieldMapping relationshipLinkFieldMapping = (RelationshipLinkFieldMapping) o;
    return Objects.equals(this.interactionFieldName, relationshipLinkFieldMapping.interactionFieldName) &&
        Objects.equals(this.linkType, relationshipLinkFieldMapping.linkType) &&
        Objects.equals(this.relationshipFieldName, relationshipLinkFieldMapping.relationshipFieldName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interactionFieldName, linkType, relationshipFieldName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationshipLinkFieldMapping {\n");
    sb.append("    interactionFieldName: ").append(toIndentedString(interactionFieldName)).append("\n");
    sb.append("    linkType: ").append(toIndentedString(linkType)).append("\n");
    sb.append("    relationshipFieldName: ").append(toIndentedString(relationshipFieldName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interactionFieldName");
    openapiFields.add("linkType");
    openapiFields.add("relationshipFieldName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("interactionFieldName");
    openapiRequiredFields.add("relationshipFieldName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelationshipLinkFieldMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelationshipLinkFieldMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelationshipLinkFieldMapping is not found in the empty JSON string", RelationshipLinkFieldMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelationshipLinkFieldMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelationshipLinkFieldMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RelationshipLinkFieldMapping.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("interactionFieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interactionFieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interactionFieldName").toString()));
      }
      if ((jsonObj.get("linkType") != null && !jsonObj.get("linkType").isJsonNull()) && !jsonObj.get("linkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkType").toString()));
      }
      // validate the optional field `linkType`
      if (jsonObj.get("linkType") != null && !jsonObj.get("linkType").isJsonNull()) {
        LinkTypeEnum.validateJsonElement(jsonObj.get("linkType"));
      }
      if (!jsonObj.get("relationshipFieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationshipFieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationshipFieldName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelationshipLinkFieldMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelationshipLinkFieldMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelationshipLinkFieldMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelationshipLinkFieldMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<RelationshipLinkFieldMapping>() {
           @Override
           public void write(JsonWriter out, RelationshipLinkFieldMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelationshipLinkFieldMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelationshipLinkFieldMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelationshipLinkFieldMapping
   * @throws IOException if the JSON string is invalid with respect to RelationshipLinkFieldMapping
   */
  public static RelationshipLinkFieldMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelationshipLinkFieldMapping.class);
  }

  /**
   * Convert an instance of RelationshipLinkFieldMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

