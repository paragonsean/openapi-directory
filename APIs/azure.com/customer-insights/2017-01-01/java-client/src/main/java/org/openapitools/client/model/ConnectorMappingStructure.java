/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Connector mapping property structure.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorMappingStructure {
  public static final String SERIALIZED_NAME_COLUMN_NAME = "columnName";
  @SerializedName(SERIALIZED_NAME_COLUMN_NAME)
  private String columnName;

  public static final String SERIALIZED_NAME_CUSTOM_FORMAT_SPECIFIER = "customFormatSpecifier";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FORMAT_SPECIFIER)
  private String customFormatSpecifier;

  public static final String SERIALIZED_NAME_IS_ENCRYPTED = "isEncrypted";
  @SerializedName(SERIALIZED_NAME_IS_ENCRYPTED)
  private Boolean isEncrypted;

  public static final String SERIALIZED_NAME_PROPERTY_NAME = "propertyName";
  @SerializedName(SERIALIZED_NAME_PROPERTY_NAME)
  private String propertyName;

  public ConnectorMappingStructure() {
  }

  public ConnectorMappingStructure columnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

  /**
   * The column name of the import file.
   * @return columnName
   */
  @javax.annotation.Nonnull
  public String getColumnName() {
    return columnName;
  }

  public void setColumnName(String columnName) {
    this.columnName = columnName;
  }


  public ConnectorMappingStructure customFormatSpecifier(String customFormatSpecifier) {
    this.customFormatSpecifier = customFormatSpecifier;
    return this;
  }

  /**
   * Custom format specifier for input parsing.
   * @return customFormatSpecifier
   */
  @javax.annotation.Nullable
  public String getCustomFormatSpecifier() {
    return customFormatSpecifier;
  }

  public void setCustomFormatSpecifier(String customFormatSpecifier) {
    this.customFormatSpecifier = customFormatSpecifier;
  }


  public ConnectorMappingStructure isEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
    return this;
  }

  /**
   * Indicates if the column is encrypted.
   * @return isEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getIsEncrypted() {
    return isEncrypted;
  }

  public void setIsEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
  }


  public ConnectorMappingStructure propertyName(String propertyName) {
    this.propertyName = propertyName;
    return this;
  }

  /**
   * The property name of the mapping entity.
   * @return propertyName
   */
  @javax.annotation.Nonnull
  public String getPropertyName() {
    return propertyName;
  }

  public void setPropertyName(String propertyName) {
    this.propertyName = propertyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorMappingStructure connectorMappingStructure = (ConnectorMappingStructure) o;
    return Objects.equals(this.columnName, connectorMappingStructure.columnName) &&
        Objects.equals(this.customFormatSpecifier, connectorMappingStructure.customFormatSpecifier) &&
        Objects.equals(this.isEncrypted, connectorMappingStructure.isEncrypted) &&
        Objects.equals(this.propertyName, connectorMappingStructure.propertyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnName, customFormatSpecifier, isEncrypted, propertyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorMappingStructure {\n");
    sb.append("    columnName: ").append(toIndentedString(columnName)).append("\n");
    sb.append("    customFormatSpecifier: ").append(toIndentedString(customFormatSpecifier)).append("\n");
    sb.append("    isEncrypted: ").append(toIndentedString(isEncrypted)).append("\n");
    sb.append("    propertyName: ").append(toIndentedString(propertyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnName");
    openapiFields.add("customFormatSpecifier");
    openapiFields.add("isEncrypted");
    openapiFields.add("propertyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("columnName");
    openapiRequiredFields.add("propertyName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorMappingStructure
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorMappingStructure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorMappingStructure is not found in the empty JSON string", ConnectorMappingStructure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorMappingStructure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorMappingStructure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectorMappingStructure.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("columnName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnName").toString()));
      }
      if ((jsonObj.get("customFormatSpecifier") != null && !jsonObj.get("customFormatSpecifier").isJsonNull()) && !jsonObj.get("customFormatSpecifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customFormatSpecifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customFormatSpecifier").toString()));
      }
      if (!jsonObj.get("propertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorMappingStructure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorMappingStructure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorMappingStructure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorMappingStructure.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorMappingStructure>() {
           @Override
           public void write(JsonWriter out, ConnectorMappingStructure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorMappingStructure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorMappingStructure given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorMappingStructure
   * @throws IOException if the JSON string is invalid with respect to ConnectorMappingStructure
   */
  public static ConnectorMappingStructure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorMappingStructure.class);
  }

  /**
   * Convert an instance of ConnectorMappingStructure to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

