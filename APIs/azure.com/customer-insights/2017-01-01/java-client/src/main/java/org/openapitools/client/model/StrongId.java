/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Property/Properties which represent a unique ID.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StrongId {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Map<String, String> description = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private Map<String, String> displayName = new HashMap<>();

  public static final String SERIALIZED_NAME_KEY_PROPERTY_NAMES = "keyPropertyNames";
  @SerializedName(SERIALIZED_NAME_KEY_PROPERTY_NAMES)
  private List<String> keyPropertyNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_STRONG_ID_NAME = "strongIdName";
  @SerializedName(SERIALIZED_NAME_STRONG_ID_NAME)
  private String strongIdName;

  public StrongId() {
  }

  public StrongId description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public StrongId putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

  /**
   * Localized descriptions.
   * @return description
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }


  public StrongId displayName(Map<String, String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public StrongId putDisplayNameItem(String key, String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new HashMap<>();
    }
    this.displayName.put(key, displayNameItem);
    return this;
  }

  /**
   * Localized display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(Map<String, String> displayName) {
    this.displayName = displayName;
  }


  public StrongId keyPropertyNames(List<String> keyPropertyNames) {
    this.keyPropertyNames = keyPropertyNames;
    return this;
  }

  public StrongId addKeyPropertyNamesItem(String keyPropertyNamesItem) {
    if (this.keyPropertyNames == null) {
      this.keyPropertyNames = new ArrayList<>();
    }
    this.keyPropertyNames.add(keyPropertyNamesItem);
    return this;
  }

  /**
   * The properties which make up the unique ID.
   * @return keyPropertyNames
   */
  @javax.annotation.Nonnull
  public List<String> getKeyPropertyNames() {
    return keyPropertyNames;
  }

  public void setKeyPropertyNames(List<String> keyPropertyNames) {
    this.keyPropertyNames = keyPropertyNames;
  }


  public StrongId strongIdName(String strongIdName) {
    this.strongIdName = strongIdName;
    return this;
  }

  /**
   * The Name identifying the strong ID.
   * @return strongIdName
   */
  @javax.annotation.Nonnull
  public String getStrongIdName() {
    return strongIdName;
  }

  public void setStrongIdName(String strongIdName) {
    this.strongIdName = strongIdName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StrongId strongId = (StrongId) o;
    return Objects.equals(this.description, strongId.description) &&
        Objects.equals(this.displayName, strongId.displayName) &&
        Objects.equals(this.keyPropertyNames, strongId.keyPropertyNames) &&
        Objects.equals(this.strongIdName, strongId.strongIdName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, keyPropertyNames, strongIdName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StrongId {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    keyPropertyNames: ").append(toIndentedString(keyPropertyNames)).append("\n");
    sb.append("    strongIdName: ").append(toIndentedString(strongIdName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("keyPropertyNames");
    openapiFields.add("strongIdName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyPropertyNames");
    openapiRequiredFields.add("strongIdName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StrongId
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StrongId.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StrongId is not found in the empty JSON string", StrongId.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StrongId.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StrongId` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StrongId.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("keyPropertyNames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("keyPropertyNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyPropertyNames` to be an array in the JSON string but got `%s`", jsonObj.get("keyPropertyNames").toString()));
      }
      if (!jsonObj.get("strongIdName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strongIdName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strongIdName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StrongId.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StrongId' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StrongId> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StrongId.class));

       return (TypeAdapter<T>) new TypeAdapter<StrongId>() {
           @Override
           public void write(JsonWriter out, StrongId value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StrongId read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StrongId given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StrongId
   * @throws IOException if the JSON string is invalid with respect to StrongId
   */
  public static StrongId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StrongId.class);
  }

  /**
   * Convert an instance of StrongId to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

