/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Metadata definition base.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetadataDefinitionBase {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map<String, List<String>> attributes = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Map<String, String> description = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private Map<String, String> displayName = new HashMap<>();

  public static final String SERIALIZED_NAME_LARGE_IMAGE = "largeImage";
  @SerializedName(SERIALIZED_NAME_LARGE_IMAGE)
  private String largeImage;

  public static final String SERIALIZED_NAME_LOCALIZED_ATTRIBUTES = "localizedAttributes";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_ATTRIBUTES)
  private Map<String, Map<String, String>> localizedAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_MEDIUM_IMAGE = "mediumImage";
  @SerializedName(SERIALIZED_NAME_MEDIUM_IMAGE)
  private String mediumImage;

  public static final String SERIALIZED_NAME_SMALL_IMAGE = "smallImage";
  @SerializedName(SERIALIZED_NAME_SMALL_IMAGE)
  private String smallImage;

  public MetadataDefinitionBase() {
  }

  public MetadataDefinitionBase attributes(Map<String, List<String>> attributes) {
    this.attributes = attributes;
    return this;
  }

  public MetadataDefinitionBase putAttributesItem(String key, List<String> attributesItem) {
    if (this.attributes == null) {
      this.attributes = new HashMap<>();
    }
    this.attributes.put(key, attributesItem);
    return this;
  }

  /**
   * The attributes for the Type.
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getAttributes() {
    return attributes;
  }

  public void setAttributes(Map<String, List<String>> attributes) {
    this.attributes = attributes;
  }


  public MetadataDefinitionBase description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public MetadataDefinitionBase putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

  /**
   * Localized descriptions for the property.
   * @return description
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }


  public MetadataDefinitionBase displayName(Map<String, String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public MetadataDefinitionBase putDisplayNameItem(String key, String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new HashMap<>();
    }
    this.displayName.put(key, displayNameItem);
    return this;
  }

  /**
   * Localized display names for the property.
   * @return displayName
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(Map<String, String> displayName) {
    this.displayName = displayName;
  }


  public MetadataDefinitionBase largeImage(String largeImage) {
    this.largeImage = largeImage;
    return this;
  }

  /**
   * Large Image associated with the Property or EntityType.
   * @return largeImage
   */
  @javax.annotation.Nullable
  public String getLargeImage() {
    return largeImage;
  }

  public void setLargeImage(String largeImage) {
    this.largeImage = largeImage;
  }


  public MetadataDefinitionBase localizedAttributes(Map<String, Map<String, String>> localizedAttributes) {
    this.localizedAttributes = localizedAttributes;
    return this;
  }

  public MetadataDefinitionBase putLocalizedAttributesItem(String key, Map<String, String> localizedAttributesItem) {
    if (this.localizedAttributes == null) {
      this.localizedAttributes = new HashMap<>();
    }
    this.localizedAttributes.put(key, localizedAttributesItem);
    return this;
  }

  /**
   * Any custom localized attributes for the Type.
   * @return localizedAttributes
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, String>> getLocalizedAttributes() {
    return localizedAttributes;
  }

  public void setLocalizedAttributes(Map<String, Map<String, String>> localizedAttributes) {
    this.localizedAttributes = localizedAttributes;
  }


  public MetadataDefinitionBase mediumImage(String mediumImage) {
    this.mediumImage = mediumImage;
    return this;
  }

  /**
   * Medium Image associated with the Property or EntityType.
   * @return mediumImage
   */
  @javax.annotation.Nullable
  public String getMediumImage() {
    return mediumImage;
  }

  public void setMediumImage(String mediumImage) {
    this.mediumImage = mediumImage;
  }


  public MetadataDefinitionBase smallImage(String smallImage) {
    this.smallImage = smallImage;
    return this;
  }

  /**
   * Small Image associated with the Property or EntityType.
   * @return smallImage
   */
  @javax.annotation.Nullable
  public String getSmallImage() {
    return smallImage;
  }

  public void setSmallImage(String smallImage) {
    this.smallImage = smallImage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataDefinitionBase metadataDefinitionBase = (MetadataDefinitionBase) o;
    return Objects.equals(this.attributes, metadataDefinitionBase.attributes) &&
        Objects.equals(this.description, metadataDefinitionBase.description) &&
        Objects.equals(this.displayName, metadataDefinitionBase.displayName) &&
        Objects.equals(this.largeImage, metadataDefinitionBase.largeImage) &&
        Objects.equals(this.localizedAttributes, metadataDefinitionBase.localizedAttributes) &&
        Objects.equals(this.mediumImage, metadataDefinitionBase.mediumImage) &&
        Objects.equals(this.smallImage, metadataDefinitionBase.smallImage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, description, displayName, largeImage, localizedAttributes, mediumImage, smallImage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataDefinitionBase {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    largeImage: ").append(toIndentedString(largeImage)).append("\n");
    sb.append("    localizedAttributes: ").append(toIndentedString(localizedAttributes)).append("\n");
    sb.append("    mediumImage: ").append(toIndentedString(mediumImage)).append("\n");
    sb.append("    smallImage: ").append(toIndentedString(smallImage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("largeImage");
    openapiFields.add("localizedAttributes");
    openapiFields.add("mediumImage");
    openapiFields.add("smallImage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetadataDefinitionBase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetadataDefinitionBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetadataDefinitionBase is not found in the empty JSON string", MetadataDefinitionBase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetadataDefinitionBase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetadataDefinitionBase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("largeImage") != null && !jsonObj.get("largeImage").isJsonNull()) && !jsonObj.get("largeImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largeImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largeImage").toString()));
      }
      if ((jsonObj.get("mediumImage") != null && !jsonObj.get("mediumImage").isJsonNull()) && !jsonObj.get("mediumImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediumImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediumImage").toString()));
      }
      if ((jsonObj.get("smallImage") != null && !jsonObj.get("smallImage").isJsonNull()) && !jsonObj.get("smallImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallImage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetadataDefinitionBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetadataDefinitionBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetadataDefinitionBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetadataDefinitionBase.class));

       return (TypeAdapter<T>) new TypeAdapter<MetadataDefinitionBase>() {
           @Override
           public void write(JsonWriter out, MetadataDefinitionBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetadataDefinitionBase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetadataDefinitionBase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetadataDefinitionBase
   * @throws IOException if the JSON string is invalid with respect to MetadataDefinitionBase
   */
  public static MetadataDefinitionBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetadataDefinitionBase.class);
  }

  /**
   * Convert an instance of MetadataDefinitionBase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

