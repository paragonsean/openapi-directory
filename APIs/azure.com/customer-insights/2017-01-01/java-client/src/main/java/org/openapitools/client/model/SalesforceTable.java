/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Salesforce table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesforceTable {
  public static final String SERIALIZED_NAME_IS_PROFILE = "isProfile";
  @SerializedName(SERIALIZED_NAME_IS_PROFILE)
  private String isProfile;

  public static final String SERIALIZED_NAME_TABLE_CATEGORY = "tableCategory";
  @SerializedName(SERIALIZED_NAME_TABLE_CATEGORY)
  private String tableCategory;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_TABLE_REMARKS = "tableRemarks";
  @SerializedName(SERIALIZED_NAME_TABLE_REMARKS)
  private String tableRemarks;

  public static final String SERIALIZED_NAME_TABLE_SCHEMA = "tableSchema";
  @SerializedName(SERIALIZED_NAME_TABLE_SCHEMA)
  private String tableSchema;

  public SalesforceTable() {
  }

  public SalesforceTable isProfile(String isProfile) {
    this.isProfile = isProfile;
    return this;
  }

  /**
   * Indicating whether this instance is profile.
   * @return isProfile
   */
  @javax.annotation.Nullable
  public String getIsProfile() {
    return isProfile;
  }

  public void setIsProfile(String isProfile) {
    this.isProfile = isProfile;
  }


  public SalesforceTable tableCategory(String tableCategory) {
    this.tableCategory = tableCategory;
    return this;
  }

  /**
   * The table category.
   * @return tableCategory
   */
  @javax.annotation.Nonnull
  public String getTableCategory() {
    return tableCategory;
  }

  public void setTableCategory(String tableCategory) {
    this.tableCategory = tableCategory;
  }


  public SalesforceTable tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The name of the table.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public SalesforceTable tableRemarks(String tableRemarks) {
    this.tableRemarks = tableRemarks;
    return this;
  }

  /**
   * The table remarks.
   * @return tableRemarks
   */
  @javax.annotation.Nullable
  public String getTableRemarks() {
    return tableRemarks;
  }

  public void setTableRemarks(String tableRemarks) {
    this.tableRemarks = tableRemarks;
  }


  public SalesforceTable tableSchema(String tableSchema) {
    this.tableSchema = tableSchema;
    return this;
  }

  /**
   * The table schema.
   * @return tableSchema
   */
  @javax.annotation.Nonnull
  public String getTableSchema() {
    return tableSchema;
  }

  public void setTableSchema(String tableSchema) {
    this.tableSchema = tableSchema;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesforceTable salesforceTable = (SalesforceTable) o;
    return Objects.equals(this.isProfile, salesforceTable.isProfile) &&
        Objects.equals(this.tableCategory, salesforceTable.tableCategory) &&
        Objects.equals(this.tableName, salesforceTable.tableName) &&
        Objects.equals(this.tableRemarks, salesforceTable.tableRemarks) &&
        Objects.equals(this.tableSchema, salesforceTable.tableSchema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isProfile, tableCategory, tableName, tableRemarks, tableSchema);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesforceTable {\n");
    sb.append("    isProfile: ").append(toIndentedString(isProfile)).append("\n");
    sb.append("    tableCategory: ").append(toIndentedString(tableCategory)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    tableRemarks: ").append(toIndentedString(tableRemarks)).append("\n");
    sb.append("    tableSchema: ").append(toIndentedString(tableSchema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isProfile");
    openapiFields.add("tableCategory");
    openapiFields.add("tableName");
    openapiFields.add("tableRemarks");
    openapiFields.add("tableSchema");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tableCategory");
    openapiRequiredFields.add("tableName");
    openapiRequiredFields.add("tableSchema");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesforceTable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesforceTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesforceTable is not found in the empty JSON string", SalesforceTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesforceTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesforceTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SalesforceTable.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("isProfile") != null && !jsonObj.get("isProfile").isJsonNull()) && !jsonObj.get("isProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isProfile").toString()));
      }
      if (!jsonObj.get("tableCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableCategory").toString()));
      }
      if (!jsonObj.get("tableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableName").toString()));
      }
      if ((jsonObj.get("tableRemarks") != null && !jsonObj.get("tableRemarks").isJsonNull()) && !jsonObj.get("tableRemarks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableRemarks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableRemarks").toString()));
      }
      if (!jsonObj.get("tableSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableSchema").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesforceTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesforceTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesforceTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesforceTable.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesforceTable>() {
           @Override
           public void write(JsonWriter out, SalesforceTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesforceTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesforceTable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesforceTable
   * @throws IOException if the JSON string is invalid with respect to SalesforceTable
   */
  public static SalesforceTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesforceTable.class);
  }

  /**
   * Convert an instance of SalesforceTable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

