/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ParticipantPropertyReference;
import org.openapitools.client.model.ProvisioningState;
import org.openapitools.client.model.RelationshipLinkFieldMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of relationship link.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelationshipLinkDefinition {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Map<String, String> description = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private Map<String, String> displayName = new HashMap<>();

  public static final String SERIALIZED_NAME_INTERACTION_TYPE = "interactionType";
  @SerializedName(SERIALIZED_NAME_INTERACTION_TYPE)
  private String interactionType;

  public static final String SERIALIZED_NAME_LINK_NAME = "linkName";
  @SerializedName(SERIALIZED_NAME_LINK_NAME)
  private String linkName;

  public static final String SERIALIZED_NAME_MAPPINGS = "mappings";
  @SerializedName(SERIALIZED_NAME_MAPPINGS)
  private List<RelationshipLinkFieldMapping> mappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILE_PROPERTY_REFERENCES = "profilePropertyReferences";
  @SerializedName(SERIALIZED_NAME_PROFILE_PROPERTY_REFERENCES)
  private List<ParticipantPropertyReference> profilePropertyReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_RELATED_PROFILE_PROPERTY_REFERENCES = "relatedProfilePropertyReferences";
  @SerializedName(SERIALIZED_NAME_RELATED_PROFILE_PROPERTY_REFERENCES)
  private List<ParticipantPropertyReference> relatedProfilePropertyReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATIONSHIP_GUID_ID = "relationshipGuidId";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_GUID_ID)
  private String relationshipGuidId;

  public static final String SERIALIZED_NAME_RELATIONSHIP_NAME = "relationshipName";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_NAME)
  private String relationshipName;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public RelationshipLinkDefinition() {
  }

  public RelationshipLinkDefinition(
     String linkName, 
     String relationshipGuidId, 
     String tenantId
  ) {
    this();
    this.linkName = linkName;
    this.relationshipGuidId = relationshipGuidId;
    this.tenantId = tenantId;
  }

  public RelationshipLinkDefinition description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public RelationshipLinkDefinition putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

  /**
   * Localized descriptions for the Relationship Link.
   * @return description
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }


  public RelationshipLinkDefinition displayName(Map<String, String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public RelationshipLinkDefinition putDisplayNameItem(String key, String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new HashMap<>();
    }
    this.displayName.put(key, displayNameItem);
    return this;
  }

  /**
   * Localized display name for the Relationship Link.
   * @return displayName
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(Map<String, String> displayName) {
    this.displayName = displayName;
  }


  public RelationshipLinkDefinition interactionType(String interactionType) {
    this.interactionType = interactionType;
    return this;
  }

  /**
   * The InteractionType associated with the Relationship Link.
   * @return interactionType
   */
  @javax.annotation.Nonnull
  public String getInteractionType() {
    return interactionType;
  }

  public void setInteractionType(String interactionType) {
    this.interactionType = interactionType;
  }


  /**
   * The name of the Relationship Link.
   * @return linkName
   */
  @javax.annotation.Nullable
  public String getLinkName() {
    return linkName;
  }



  public RelationshipLinkDefinition mappings(List<RelationshipLinkFieldMapping> mappings) {
    this.mappings = mappings;
    return this;
  }

  public RelationshipLinkDefinition addMappingsItem(RelationshipLinkFieldMapping mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new ArrayList<>();
    }
    this.mappings.add(mappingsItem);
    return this;
  }

  /**
   * The mappings between Interaction and Relationship fields.
   * @return mappings
   */
  @javax.annotation.Nullable
  public List<RelationshipLinkFieldMapping> getMappings() {
    return mappings;
  }

  public void setMappings(List<RelationshipLinkFieldMapping> mappings) {
    this.mappings = mappings;
  }


  public RelationshipLinkDefinition profilePropertyReferences(List<ParticipantPropertyReference> profilePropertyReferences) {
    this.profilePropertyReferences = profilePropertyReferences;
    return this;
  }

  public RelationshipLinkDefinition addProfilePropertyReferencesItem(ParticipantPropertyReference profilePropertyReferencesItem) {
    if (this.profilePropertyReferences == null) {
      this.profilePropertyReferences = new ArrayList<>();
    }
    this.profilePropertyReferences.add(profilePropertyReferencesItem);
    return this;
  }

  /**
   * The property references for the Profile of the Relationship.
   * @return profilePropertyReferences
   */
  @javax.annotation.Nonnull
  public List<ParticipantPropertyReference> getProfilePropertyReferences() {
    return profilePropertyReferences;
  }

  public void setProfilePropertyReferences(List<ParticipantPropertyReference> profilePropertyReferences) {
    this.profilePropertyReferences = profilePropertyReferences;
  }


  public RelationshipLinkDefinition provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public RelationshipLinkDefinition relatedProfilePropertyReferences(List<ParticipantPropertyReference> relatedProfilePropertyReferences) {
    this.relatedProfilePropertyReferences = relatedProfilePropertyReferences;
    return this;
  }

  public RelationshipLinkDefinition addRelatedProfilePropertyReferencesItem(ParticipantPropertyReference relatedProfilePropertyReferencesItem) {
    if (this.relatedProfilePropertyReferences == null) {
      this.relatedProfilePropertyReferences = new ArrayList<>();
    }
    this.relatedProfilePropertyReferences.add(relatedProfilePropertyReferencesItem);
    return this;
  }

  /**
   * The property references for the Related Profile of the Relationship.
   * @return relatedProfilePropertyReferences
   */
  @javax.annotation.Nonnull
  public List<ParticipantPropertyReference> getRelatedProfilePropertyReferences() {
    return relatedProfilePropertyReferences;
  }

  public void setRelatedProfilePropertyReferences(List<ParticipantPropertyReference> relatedProfilePropertyReferences) {
    this.relatedProfilePropertyReferences = relatedProfilePropertyReferences;
  }


  /**
   * The relationship guid id.
   * @return relationshipGuidId
   */
  @javax.annotation.Nullable
  public String getRelationshipGuidId() {
    return relationshipGuidId;
  }



  public RelationshipLinkDefinition relationshipName(String relationshipName) {
    this.relationshipName = relationshipName;
    return this;
  }

  /**
   * The Relationship associated with the Link.
   * @return relationshipName
   */
  @javax.annotation.Nonnull
  public String getRelationshipName() {
    return relationshipName;
  }

  public void setRelationshipName(String relationshipName) {
    this.relationshipName = relationshipName;
  }


  /**
   * The hub name.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationshipLinkDefinition relationshipLinkDefinition = (RelationshipLinkDefinition) o;
    return Objects.equals(this.description, relationshipLinkDefinition.description) &&
        Objects.equals(this.displayName, relationshipLinkDefinition.displayName) &&
        Objects.equals(this.interactionType, relationshipLinkDefinition.interactionType) &&
        Objects.equals(this.linkName, relationshipLinkDefinition.linkName) &&
        Objects.equals(this.mappings, relationshipLinkDefinition.mappings) &&
        Objects.equals(this.profilePropertyReferences, relationshipLinkDefinition.profilePropertyReferences) &&
        Objects.equals(this.provisioningState, relationshipLinkDefinition.provisioningState) &&
        Objects.equals(this.relatedProfilePropertyReferences, relationshipLinkDefinition.relatedProfilePropertyReferences) &&
        Objects.equals(this.relationshipGuidId, relationshipLinkDefinition.relationshipGuidId) &&
        Objects.equals(this.relationshipName, relationshipLinkDefinition.relationshipName) &&
        Objects.equals(this.tenantId, relationshipLinkDefinition.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, interactionType, linkName, mappings, profilePropertyReferences, provisioningState, relatedProfilePropertyReferences, relationshipGuidId, relationshipName, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationshipLinkDefinition {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    interactionType: ").append(toIndentedString(interactionType)).append("\n");
    sb.append("    linkName: ").append(toIndentedString(linkName)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    profilePropertyReferences: ").append(toIndentedString(profilePropertyReferences)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    relatedProfilePropertyReferences: ").append(toIndentedString(relatedProfilePropertyReferences)).append("\n");
    sb.append("    relationshipGuidId: ").append(toIndentedString(relationshipGuidId)).append("\n");
    sb.append("    relationshipName: ").append(toIndentedString(relationshipName)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("interactionType");
    openapiFields.add("linkName");
    openapiFields.add("mappings");
    openapiFields.add("profilePropertyReferences");
    openapiFields.add("provisioningState");
    openapiFields.add("relatedProfilePropertyReferences");
    openapiFields.add("relationshipGuidId");
    openapiFields.add("relationshipName");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("interactionType");
    openapiRequiredFields.add("profilePropertyReferences");
    openapiRequiredFields.add("relatedProfilePropertyReferences");
    openapiRequiredFields.add("relationshipName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelationshipLinkDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelationshipLinkDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelationshipLinkDefinition is not found in the empty JSON string", RelationshipLinkDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelationshipLinkDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelationshipLinkDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RelationshipLinkDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("interactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interactionType").toString()));
      }
      if ((jsonObj.get("linkName") != null && !jsonObj.get("linkName").isJsonNull()) && !jsonObj.get("linkName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkName").toString()));
      }
      if (jsonObj.get("mappings") != null && !jsonObj.get("mappings").isJsonNull()) {
        JsonArray jsonArraymappings = jsonObj.getAsJsonArray("mappings");
        if (jsonArraymappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mappings` to be an array in the JSON string but got `%s`", jsonObj.get("mappings").toString()));
          }

          // validate the optional field `mappings` (array)
          for (int i = 0; i < jsonArraymappings.size(); i++) {
            RelationshipLinkFieldMapping.validateJsonElement(jsonArraymappings.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("profilePropertyReferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `profilePropertyReferences` to be an array in the JSON string but got `%s`", jsonObj.get("profilePropertyReferences").toString()));
      }

      JsonArray jsonArrayprofilePropertyReferences = jsonObj.getAsJsonArray("profilePropertyReferences");
      // validate the required field `profilePropertyReferences` (array)
      for (int i = 0; i < jsonArrayprofilePropertyReferences.size(); i++) {
        ParticipantPropertyReference.validateJsonElement(jsonArrayprofilePropertyReferences.get(i));
      };
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("relatedProfilePropertyReferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedProfilePropertyReferences` to be an array in the JSON string but got `%s`", jsonObj.get("relatedProfilePropertyReferences").toString()));
      }

      JsonArray jsonArrayrelatedProfilePropertyReferences = jsonObj.getAsJsonArray("relatedProfilePropertyReferences");
      // validate the required field `relatedProfilePropertyReferences` (array)
      for (int i = 0; i < jsonArrayrelatedProfilePropertyReferences.size(); i++) {
        ParticipantPropertyReference.validateJsonElement(jsonArrayrelatedProfilePropertyReferences.get(i));
      };
      if ((jsonObj.get("relationshipGuidId") != null && !jsonObj.get("relationshipGuidId").isJsonNull()) && !jsonObj.get("relationshipGuidId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationshipGuidId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationshipGuidId").toString()));
      }
      if (!jsonObj.get("relationshipName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationshipName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationshipName").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelationshipLinkDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelationshipLinkDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelationshipLinkDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelationshipLinkDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<RelationshipLinkDefinition>() {
           @Override
           public void write(JsonWriter out, RelationshipLinkDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelationshipLinkDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelationshipLinkDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelationshipLinkDefinition
   * @throws IOException if the JSON string is invalid with respect to RelationshipLinkDefinition
   */
  public static RelationshipLinkDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelationshipLinkDefinition.class);
  }

  /**
   * Convert an instance of RelationshipLinkDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

