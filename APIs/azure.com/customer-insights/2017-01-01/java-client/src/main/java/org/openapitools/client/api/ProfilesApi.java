/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.KpiDefinition;
import org.openapitools.client.model.ProfileListResult;
import org.openapitools.client.model.ProfileResourceFormat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProfilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProfilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for profilesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/delete Profile type operation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the profile. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create profile operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesCreateOrUpdateCall(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, ProfileResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, ProfileResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling profilesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling profilesCreateOrUpdate(Async)");
        }

        return profilesCreateOrUpdateCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates a profile within a Hub, or updates an existing profile.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/delete Profile type operation (required)
     * @return ProfileResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the profile. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create profile operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResourceFormat profilesCreateOrUpdate(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, ProfileResourceFormat parameters) throws ApiException {
        ApiResponse<ProfileResourceFormat> localVarResp = profilesCreateOrUpdateWithHttpInfo(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a profile within a Hub, or updates an existing profile.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/delete Profile type operation (required)
     * @return ApiResponse&lt;ProfileResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the profile. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create profile operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResourceFormat> profilesCreateOrUpdateWithHttpInfo(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, ProfileResourceFormat parameters) throws ApiException {
        okhttp3.Call localVarCall = profilesCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ProfileResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a profile within a Hub, or updates an existing profile.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create/delete Profile type operation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the profile. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The create profile operation is accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesCreateOrUpdateAsync(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, ProfileResourceFormat parameters, final ApiCallback<ProfileResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ProfileResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The profile is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesDeleteCall(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (localeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale-code", localeCode));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesDeleteValidateBeforeCall(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesDelete(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling profilesDelete(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesDelete(Async)");
        }

        return profilesDeleteCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, localeCode, _callback);

    }

    /**
     * 
     * Deletes a profile within a hub
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The profile is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public void profilesDelete(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, String localeCode) throws ApiException {
        profilesDeleteWithHttpInfo(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, localeCode);
    }

    /**
     * 
     * Deletes a profile within a hub
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The profile is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> profilesDeleteWithHttpInfo(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, String localeCode) throws ApiException {
        okhttp3.Call localVarCall = profilesDeleteValidateBeforeCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, localeCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a profile within a hub
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The profile is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The delete operation is accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesDeleteAsync(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesDeleteValidateBeforeCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, localeCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the profile. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetCall(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (localeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale-code", localeCode));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesGetValidateBeforeCall(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesGet(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling profilesGet(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesGet(Async)");
        }

        return profilesGetCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, localeCode, _callback);

    }

    /**
     * 
     * Gets information about the specified profile.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @return ProfileResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the profile. </td><td>  -  </td></tr>
     </table>
     */
    public ProfileResourceFormat profilesGet(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, String localeCode) throws ApiException {
        ApiResponse<ProfileResourceFormat> localVarResp = profilesGetWithHttpInfo(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, localeCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the specified profile.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @return ApiResponse&lt;ProfileResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the profile. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileResourceFormat> profilesGetWithHttpInfo(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, String localeCode) throws ApiException {
        okhttp3.Call localVarCall = profilesGetValidateBeforeCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, localeCode, null);
        Type localVarReturnType = new TypeToken<ProfileResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the specified profile.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the profile. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetAsync(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback<ProfileResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesGetValidateBeforeCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, localeCode, _callback);
        Type localVarReturnType = new TypeToken<ProfileResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesGetEnrichingKpis
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the enriching KPIs. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetEnrichingKpisCall(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles/{profileName}/getEnrichingKpis"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "profileName" + "}", localVarApiClient.escapeString(profileName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesGetEnrichingKpisValidateBeforeCall(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesGetEnrichingKpis(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling profilesGetEnrichingKpis(Async)");
        }

        // verify the required parameter 'profileName' is set
        if (profileName == null) {
            throw new ApiException("Missing the required parameter 'profileName' when calling profilesGetEnrichingKpis(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesGetEnrichingKpis(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesGetEnrichingKpis(Async)");
        }

        return profilesGetEnrichingKpisCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the KPIs that enrich the profile Type identified by the supplied name. Enrichment happens through participants of the Interaction on an Interaction KPI and through Relationships for Profile KPIs.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return List&lt;KpiDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the enriching KPIs. </td><td>  -  </td></tr>
     </table>
     */
    public List<KpiDefinition> profilesGetEnrichingKpis(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<List<KpiDefinition>> localVarResp = profilesGetEnrichingKpisWithHttpInfo(resourceGroupName, hubName, profileName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the KPIs that enrich the profile Type identified by the supplied name. Enrichment happens through participants of the Interaction on an Interaction KPI and through Relationships for Profile KPIs.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;List&lt;KpiDefinition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the enriching KPIs. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<KpiDefinition>> profilesGetEnrichingKpisWithHttpInfo(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = profilesGetEnrichingKpisValidateBeforeCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<List<KpiDefinition>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the KPIs that enrich the profile Type identified by the supplied name. Enrichment happens through participants of the Interaction on an Interaction KPI and through Relationships for Profile KPIs.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param profileName The name of the profile. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the enriching KPIs. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesGetEnrichingKpisAsync(String resourceGroupName, String hubName, String profileName, String apiVersion, String subscriptionId, final ApiCallback<List<KpiDefinition>> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesGetEnrichingKpisValidateBeforeCall(resourceGroupName, hubName, profileName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<List<KpiDefinition>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for profilesListByHub
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the profiles in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListByHubCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/profiles"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (localeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale-code", localeCode));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call profilesListByHubValidateBeforeCall(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling profilesListByHub(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling profilesListByHub(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling profilesListByHub(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling profilesListByHub(Async)");
        }

        return profilesListByHubCall(resourceGroupName, hubName, apiVersion, subscriptionId, localeCode, _callback);

    }

    /**
     * 
     * Gets all profile in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @return ProfileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the profiles in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public ProfileListResult profilesListByHub(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, String localeCode) throws ApiException {
        ApiResponse<ProfileListResult> localVarResp = profilesListByHubWithHttpInfo(resourceGroupName, hubName, apiVersion, subscriptionId, localeCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all profile in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @return ApiResponse&lt;ProfileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the profiles in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileListResult> profilesListByHubWithHttpInfo(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, String localeCode) throws ApiException {
        okhttp3.Call localVarCall = profilesListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, localeCode, null);
        Type localVarReturnType = new TypeToken<ProfileListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all profile in the hub.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param localeCode Locale of profile to retrieve, default is en-us. (optional, default to en-us)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the profiles in the hub. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call profilesListByHubAsync(String resourceGroupName, String hubName, String apiVersion, String subscriptionId, String localeCode, final ApiCallback<ProfileListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = profilesListByHubValidateBeforeCall(resourceGroupName, hubName, apiVersion, subscriptionId, localeCode, _callback);
        Type localVarReturnType = new TypeToken<ProfileListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
