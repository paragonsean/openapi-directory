/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The participant property reference.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParticipantPropertyReference {
  public static final String SERIALIZED_NAME_INTERACTION_PROPERTY_NAME = "interactionPropertyName";
  @SerializedName(SERIALIZED_NAME_INTERACTION_PROPERTY_NAME)
  private String interactionPropertyName;

  public static final String SERIALIZED_NAME_PROFILE_PROPERTY_NAME = "profilePropertyName";
  @SerializedName(SERIALIZED_NAME_PROFILE_PROPERTY_NAME)
  private String profilePropertyName;

  public ParticipantPropertyReference() {
  }

  public ParticipantPropertyReference interactionPropertyName(String interactionPropertyName) {
    this.interactionPropertyName = interactionPropertyName;
    return this;
  }

  /**
   * The interaction property that maps to the profile property.
   * @return interactionPropertyName
   */
  @javax.annotation.Nonnull
  public String getInteractionPropertyName() {
    return interactionPropertyName;
  }

  public void setInteractionPropertyName(String interactionPropertyName) {
    this.interactionPropertyName = interactionPropertyName;
  }


  public ParticipantPropertyReference profilePropertyName(String profilePropertyName) {
    this.profilePropertyName = profilePropertyName;
    return this;
  }

  /**
   * The profile property that maps to the interaction property.
   * @return profilePropertyName
   */
  @javax.annotation.Nonnull
  public String getProfilePropertyName() {
    return profilePropertyName;
  }

  public void setProfilePropertyName(String profilePropertyName) {
    this.profilePropertyName = profilePropertyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParticipantPropertyReference participantPropertyReference = (ParticipantPropertyReference) o;
    return Objects.equals(this.interactionPropertyName, participantPropertyReference.interactionPropertyName) &&
        Objects.equals(this.profilePropertyName, participantPropertyReference.profilePropertyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interactionPropertyName, profilePropertyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParticipantPropertyReference {\n");
    sb.append("    interactionPropertyName: ").append(toIndentedString(interactionPropertyName)).append("\n");
    sb.append("    profilePropertyName: ").append(toIndentedString(profilePropertyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interactionPropertyName");
    openapiFields.add("profilePropertyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("interactionPropertyName");
    openapiRequiredFields.add("profilePropertyName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParticipantPropertyReference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParticipantPropertyReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParticipantPropertyReference is not found in the empty JSON string", ParticipantPropertyReference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParticipantPropertyReference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParticipantPropertyReference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ParticipantPropertyReference.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("interactionPropertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interactionPropertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interactionPropertyName").toString()));
      }
      if (!jsonObj.get("profilePropertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profilePropertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profilePropertyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParticipantPropertyReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParticipantPropertyReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParticipantPropertyReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParticipantPropertyReference.class));

       return (TypeAdapter<T>) new TypeAdapter<ParticipantPropertyReference>() {
           @Override
           public void write(JsonWriter out, ParticipantPropertyReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParticipantPropertyReference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParticipantPropertyReference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParticipantPropertyReference
   * @throws IOException if the JSON string is invalid with respect to ParticipantPropertyReference
   */
  public static ParticipantPropertyReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParticipantPropertyReference.class);
  }

  /**
   * Convert an instance of ParticipantPropertyReference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

