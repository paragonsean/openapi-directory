/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CrmConnectorEntities;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The CRM connector properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrmConnectorProperties {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_CONNECTION_STRING = "connectionString";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STRING)
  private String connectionString;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<CrmConnectorEntities> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public static final String SERIALIZED_NAME_ORGANIZATION_URL = "organizationUrl";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_URL)
  private String organizationUrl;

  public CrmConnectorProperties() {
  }

  public CrmConnectorProperties accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * The access token.
   * @return accessToken
   */
  @javax.annotation.Nullable
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  public CrmConnectorProperties connectionString(String connectionString) {
    this.connectionString = connectionString;
    return this;
  }

  /**
   * The connection string.
   * @return connectionString
   */
  @javax.annotation.Nullable
  public String getConnectionString() {
    return connectionString;
  }

  public void setConnectionString(String connectionString) {
    this.connectionString = connectionString;
  }


  public CrmConnectorProperties entities(List<CrmConnectorEntities> entities) {
    this.entities = entities;
    return this;
  }

  public CrmConnectorProperties addEntitiesItem(CrmConnectorEntities entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * The entities like account, contact, opportunity.
   * @return entities
   */
  @javax.annotation.Nonnull
  public List<CrmConnectorEntities> getEntities() {
    return entities;
  }

  public void setEntities(List<CrmConnectorEntities> entities) {
    this.entities = entities;
  }


  public CrmConnectorProperties organizationId(String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * The organization ID.
   * @return organizationId
   */
  @javax.annotation.Nonnull
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }


  public CrmConnectorProperties organizationUrl(String organizationUrl) {
    this.organizationUrl = organizationUrl;
    return this;
  }

  /**
   * The organization URL.
   * @return organizationUrl
   */
  @javax.annotation.Nonnull
  public String getOrganizationUrl() {
    return organizationUrl;
  }

  public void setOrganizationUrl(String organizationUrl) {
    this.organizationUrl = organizationUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrmConnectorProperties crmConnectorProperties = (CrmConnectorProperties) o;
    return Objects.equals(this.accessToken, crmConnectorProperties.accessToken) &&
        Objects.equals(this.connectionString, crmConnectorProperties.connectionString) &&
        Objects.equals(this.entities, crmConnectorProperties.entities) &&
        Objects.equals(this.organizationId, crmConnectorProperties.organizationId) &&
        Objects.equals(this.organizationUrl, crmConnectorProperties.organizationUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, connectionString, entities, organizationId, organizationUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrmConnectorProperties {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    connectionString: ").append(toIndentedString(connectionString)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    organizationUrl: ").append(toIndentedString(organizationUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessToken");
    openapiFields.add("connectionString");
    openapiFields.add("entities");
    openapiFields.add("organizationId");
    openapiFields.add("organizationUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("entities");
    openapiRequiredFields.add("organizationId");
    openapiRequiredFields.add("organizationUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrmConnectorProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrmConnectorProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrmConnectorProperties is not found in the empty JSON string", CrmConnectorProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrmConnectorProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrmConnectorProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CrmConnectorProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessToken") != null && !jsonObj.get("accessToken").isJsonNull()) && !jsonObj.get("accessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessToken").toString()));
      }
      if ((jsonObj.get("connectionString") != null && !jsonObj.get("connectionString").isJsonNull()) && !jsonObj.get("connectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionString").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("entities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
      }

      JsonArray jsonArrayentities = jsonObj.getAsJsonArray("entities");
      // validate the required field `entities` (array)
      for (int i = 0; i < jsonArrayentities.size(); i++) {
        CrmConnectorEntities.validateJsonElement(jsonArrayentities.get(i));
      };
      if (!jsonObj.get("organizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationId").toString()));
      }
      if (!jsonObj.get("organizationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrmConnectorProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrmConnectorProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrmConnectorProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrmConnectorProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CrmConnectorProperties>() {
           @Override
           public void write(JsonWriter out, CrmConnectorProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrmConnectorProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrmConnectorProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrmConnectorProperties
   * @throws IOException if the JSON string is invalid with respect to CrmConnectorProperties
   */
  public static CrmConnectorProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrmConnectorProperties.class);
  }

  /**
   * Convert an instance of CrmConnectorProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

