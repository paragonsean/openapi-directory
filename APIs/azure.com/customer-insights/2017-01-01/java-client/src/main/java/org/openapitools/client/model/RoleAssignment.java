/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AssignmentPrincipal;
import org.openapitools.client.model.ProvisioningState;
import org.openapitools.client.model.ResourceSetDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Role Assignment definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoleAssignment {
  public static final String SERIALIZED_NAME_ASSIGNMENT_NAME = "assignmentName";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_NAME)
  private String assignmentName;

  public static final String SERIALIZED_NAME_CONFLATION_POLICIES = "conflationPolicies";
  @SerializedName(SERIALIZED_NAME_CONFLATION_POLICIES)
  private ResourceSetDescription conflationPolicies;

  public static final String SERIALIZED_NAME_CONNECTORS = "connectors";
  @SerializedName(SERIALIZED_NAME_CONNECTORS)
  private ResourceSetDescription connectors;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Map<String, String> description = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private Map<String, String> displayName = new HashMap<>();

  public static final String SERIALIZED_NAME_INTERACTIONS = "interactions";
  @SerializedName(SERIALIZED_NAME_INTERACTIONS)
  private ResourceSetDescription interactions;

  public static final String SERIALIZED_NAME_KPIS = "kpis";
  @SerializedName(SERIALIZED_NAME_KPIS)
  private ResourceSetDescription kpis;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private ResourceSetDescription links;

  public static final String SERIALIZED_NAME_PRINCIPALS = "principals";
  @SerializedName(SERIALIZED_NAME_PRINCIPALS)
  private List<AssignmentPrincipal> principals = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROFILES = "profiles";
  @SerializedName(SERIALIZED_NAME_PROFILES)
  private ResourceSetDescription profiles;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_RELATIONSHIP_LINKS = "relationshipLinks";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_LINKS)
  private ResourceSetDescription relationshipLinks;

  public static final String SERIALIZED_NAME_RELATIONSHIPS = "relationships";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIPS)
  private ResourceSetDescription relationships;

  /**
   * Type of roles.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    ADMIN("Admin"),
    
    READER("Reader"),
    
    MANAGE_ADMIN("ManageAdmin"),
    
    MANAGE_READER("ManageReader"),
    
    DATA_ADMIN("DataAdmin"),
    
    DATA_READER("DataReader");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  public static final String SERIALIZED_NAME_ROLE_ASSIGNMENTS = "roleAssignments";
  @SerializedName(SERIALIZED_NAME_ROLE_ASSIGNMENTS)
  private ResourceSetDescription roleAssignments;

  public static final String SERIALIZED_NAME_SAS_POLICIES = "sasPolicies";
  @SerializedName(SERIALIZED_NAME_SAS_POLICIES)
  private ResourceSetDescription sasPolicies;

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private ResourceSetDescription segments;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_VIEWS = "views";
  @SerializedName(SERIALIZED_NAME_VIEWS)
  private ResourceSetDescription views;

  public static final String SERIALIZED_NAME_WIDGET_TYPES = "widgetTypes";
  @SerializedName(SERIALIZED_NAME_WIDGET_TYPES)
  private ResourceSetDescription widgetTypes;

  public RoleAssignment() {
  }

  public RoleAssignment(
     String assignmentName, 
     String tenantId
  ) {
    this();
    this.assignmentName = assignmentName;
    this.tenantId = tenantId;
  }

  /**
   * The name of the metadata object.
   * @return assignmentName
   */
  @javax.annotation.Nullable
  public String getAssignmentName() {
    return assignmentName;
  }



  public RoleAssignment conflationPolicies(ResourceSetDescription conflationPolicies) {
    this.conflationPolicies = conflationPolicies;
    return this;
  }

  /**
   * Get conflationPolicies
   * @return conflationPolicies
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getConflationPolicies() {
    return conflationPolicies;
  }

  public void setConflationPolicies(ResourceSetDescription conflationPolicies) {
    this.conflationPolicies = conflationPolicies;
  }


  public RoleAssignment connectors(ResourceSetDescription connectors) {
    this.connectors = connectors;
    return this;
  }

  /**
   * Get connectors
   * @return connectors
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getConnectors() {
    return connectors;
  }

  public void setConnectors(ResourceSetDescription connectors) {
    this.connectors = connectors;
  }


  public RoleAssignment description(Map<String, String> description) {
    this.description = description;
    return this;
  }

  public RoleAssignment putDescriptionItem(String key, String descriptionItem) {
    if (this.description == null) {
      this.description = new HashMap<>();
    }
    this.description.put(key, descriptionItem);
    return this;
  }

  /**
   * Localized description for the metadata.
   * @return description
   */
  @javax.annotation.Nullable
  public Map<String, String> getDescription() {
    return description;
  }

  public void setDescription(Map<String, String> description) {
    this.description = description;
  }


  public RoleAssignment displayName(Map<String, String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public RoleAssignment putDisplayNameItem(String key, String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new HashMap<>();
    }
    this.displayName.put(key, displayNameItem);
    return this;
  }

  /**
   * Localized display names for the metadata.
   * @return displayName
   */
  @javax.annotation.Nullable
  public Map<String, String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(Map<String, String> displayName) {
    this.displayName = displayName;
  }


  public RoleAssignment interactions(ResourceSetDescription interactions) {
    this.interactions = interactions;
    return this;
  }

  /**
   * Get interactions
   * @return interactions
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getInteractions() {
    return interactions;
  }

  public void setInteractions(ResourceSetDescription interactions) {
    this.interactions = interactions;
  }


  public RoleAssignment kpis(ResourceSetDescription kpis) {
    this.kpis = kpis;
    return this;
  }

  /**
   * Get kpis
   * @return kpis
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getKpis() {
    return kpis;
  }

  public void setKpis(ResourceSetDescription kpis) {
    this.kpis = kpis;
  }


  public RoleAssignment links(ResourceSetDescription links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getLinks() {
    return links;
  }

  public void setLinks(ResourceSetDescription links) {
    this.links = links;
  }


  public RoleAssignment principals(List<AssignmentPrincipal> principals) {
    this.principals = principals;
    return this;
  }

  public RoleAssignment addPrincipalsItem(AssignmentPrincipal principalsItem) {
    if (this.principals == null) {
      this.principals = new ArrayList<>();
    }
    this.principals.add(principalsItem);
    return this;
  }

  /**
   * The principals being assigned to.
   * @return principals
   */
  @javax.annotation.Nonnull
  public List<AssignmentPrincipal> getPrincipals() {
    return principals;
  }

  public void setPrincipals(List<AssignmentPrincipal> principals) {
    this.principals = principals;
  }


  public RoleAssignment profiles(ResourceSetDescription profiles) {
    this.profiles = profiles;
    return this;
  }

  /**
   * Get profiles
   * @return profiles
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getProfiles() {
    return profiles;
  }

  public void setProfiles(ResourceSetDescription profiles) {
    this.profiles = profiles;
  }


  public RoleAssignment provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public RoleAssignment relationshipLinks(ResourceSetDescription relationshipLinks) {
    this.relationshipLinks = relationshipLinks;
    return this;
  }

  /**
   * Get relationshipLinks
   * @return relationshipLinks
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getRelationshipLinks() {
    return relationshipLinks;
  }

  public void setRelationshipLinks(ResourceSetDescription relationshipLinks) {
    this.relationshipLinks = relationshipLinks;
  }


  public RoleAssignment relationships(ResourceSetDescription relationships) {
    this.relationships = relationships;
    return this;
  }

  /**
   * Get relationships
   * @return relationships
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getRelationships() {
    return relationships;
  }

  public void setRelationships(ResourceSetDescription relationships) {
    this.relationships = relationships;
  }


  public RoleAssignment role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * Type of roles.
   * @return role
   */
  @javax.annotation.Nonnull
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public RoleAssignment roleAssignments(ResourceSetDescription roleAssignments) {
    this.roleAssignments = roleAssignments;
    return this;
  }

  /**
   * Get roleAssignments
   * @return roleAssignments
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getRoleAssignments() {
    return roleAssignments;
  }

  public void setRoleAssignments(ResourceSetDescription roleAssignments) {
    this.roleAssignments = roleAssignments;
  }


  public RoleAssignment sasPolicies(ResourceSetDescription sasPolicies) {
    this.sasPolicies = sasPolicies;
    return this;
  }

  /**
   * Get sasPolicies
   * @return sasPolicies
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getSasPolicies() {
    return sasPolicies;
  }

  public void setSasPolicies(ResourceSetDescription sasPolicies) {
    this.sasPolicies = sasPolicies;
  }


  public RoleAssignment segments(ResourceSetDescription segments) {
    this.segments = segments;
    return this;
  }

  /**
   * Get segments
   * @return segments
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getSegments() {
    return segments;
  }

  public void setSegments(ResourceSetDescription segments) {
    this.segments = segments;
  }


  /**
   * The hub name.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }



  public RoleAssignment views(ResourceSetDescription views) {
    this.views = views;
    return this;
  }

  /**
   * Get views
   * @return views
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getViews() {
    return views;
  }

  public void setViews(ResourceSetDescription views) {
    this.views = views;
  }


  public RoleAssignment widgetTypes(ResourceSetDescription widgetTypes) {
    this.widgetTypes = widgetTypes;
    return this;
  }

  /**
   * Get widgetTypes
   * @return widgetTypes
   */
  @javax.annotation.Nullable
  public ResourceSetDescription getWidgetTypes() {
    return widgetTypes;
  }

  public void setWidgetTypes(ResourceSetDescription widgetTypes) {
    this.widgetTypes = widgetTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoleAssignment roleAssignment = (RoleAssignment) o;
    return Objects.equals(this.assignmentName, roleAssignment.assignmentName) &&
        Objects.equals(this.conflationPolicies, roleAssignment.conflationPolicies) &&
        Objects.equals(this.connectors, roleAssignment.connectors) &&
        Objects.equals(this.description, roleAssignment.description) &&
        Objects.equals(this.displayName, roleAssignment.displayName) &&
        Objects.equals(this.interactions, roleAssignment.interactions) &&
        Objects.equals(this.kpis, roleAssignment.kpis) &&
        Objects.equals(this.links, roleAssignment.links) &&
        Objects.equals(this.principals, roleAssignment.principals) &&
        Objects.equals(this.profiles, roleAssignment.profiles) &&
        Objects.equals(this.provisioningState, roleAssignment.provisioningState) &&
        Objects.equals(this.relationshipLinks, roleAssignment.relationshipLinks) &&
        Objects.equals(this.relationships, roleAssignment.relationships) &&
        Objects.equals(this.role, roleAssignment.role) &&
        Objects.equals(this.roleAssignments, roleAssignment.roleAssignments) &&
        Objects.equals(this.sasPolicies, roleAssignment.sasPolicies) &&
        Objects.equals(this.segments, roleAssignment.segments) &&
        Objects.equals(this.tenantId, roleAssignment.tenantId) &&
        Objects.equals(this.views, roleAssignment.views) &&
        Objects.equals(this.widgetTypes, roleAssignment.widgetTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignmentName, conflationPolicies, connectors, description, displayName, interactions, kpis, links, principals, profiles, provisioningState, relationshipLinks, relationships, role, roleAssignments, sasPolicies, segments, tenantId, views, widgetTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoleAssignment {\n");
    sb.append("    assignmentName: ").append(toIndentedString(assignmentName)).append("\n");
    sb.append("    conflationPolicies: ").append(toIndentedString(conflationPolicies)).append("\n");
    sb.append("    connectors: ").append(toIndentedString(connectors)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    interactions: ").append(toIndentedString(interactions)).append("\n");
    sb.append("    kpis: ").append(toIndentedString(kpis)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    principals: ").append(toIndentedString(principals)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    relationshipLinks: ").append(toIndentedString(relationshipLinks)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    roleAssignments: ").append(toIndentedString(roleAssignments)).append("\n");
    sb.append("    sasPolicies: ").append(toIndentedString(sasPolicies)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    views: ").append(toIndentedString(views)).append("\n");
    sb.append("    widgetTypes: ").append(toIndentedString(widgetTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignmentName");
    openapiFields.add("conflationPolicies");
    openapiFields.add("connectors");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("interactions");
    openapiFields.add("kpis");
    openapiFields.add("links");
    openapiFields.add("principals");
    openapiFields.add("profiles");
    openapiFields.add("provisioningState");
    openapiFields.add("relationshipLinks");
    openapiFields.add("relationships");
    openapiFields.add("role");
    openapiFields.add("roleAssignments");
    openapiFields.add("sasPolicies");
    openapiFields.add("segments");
    openapiFields.add("tenantId");
    openapiFields.add("views");
    openapiFields.add("widgetTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("principals");
    openapiRequiredFields.add("role");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoleAssignment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoleAssignment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoleAssignment is not found in the empty JSON string", RoleAssignment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoleAssignment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoleAssignment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoleAssignment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assignmentName") != null && !jsonObj.get("assignmentName").isJsonNull()) && !jsonObj.get("assignmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignmentName").toString()));
      }
      // validate the optional field `conflationPolicies`
      if (jsonObj.get("conflationPolicies") != null && !jsonObj.get("conflationPolicies").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("conflationPolicies"));
      }
      // validate the optional field `connectors`
      if (jsonObj.get("connectors") != null && !jsonObj.get("connectors").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("connectors"));
      }
      // validate the optional field `interactions`
      if (jsonObj.get("interactions") != null && !jsonObj.get("interactions").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("interactions"));
      }
      // validate the optional field `kpis`
      if (jsonObj.get("kpis") != null && !jsonObj.get("kpis").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("kpis"));
      }
      // validate the optional field `links`
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("links"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("principals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `principals` to be an array in the JSON string but got `%s`", jsonObj.get("principals").toString()));
      }

      JsonArray jsonArrayprincipals = jsonObj.getAsJsonArray("principals");
      // validate the required field `principals` (array)
      for (int i = 0; i < jsonArrayprincipals.size(); i++) {
        AssignmentPrincipal.validateJsonElement(jsonArrayprincipals.get(i));
      };
      // validate the optional field `profiles`
      if (jsonObj.get("profiles") != null && !jsonObj.get("profiles").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("profiles"));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `relationshipLinks`
      if (jsonObj.get("relationshipLinks") != null && !jsonObj.get("relationshipLinks").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("relationshipLinks"));
      }
      // validate the optional field `relationships`
      if (jsonObj.get("relationships") != null && !jsonObj.get("relationships").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("relationships"));
      }
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the required field `role`
      RoleEnum.validateJsonElement(jsonObj.get("role"));
      // validate the optional field `roleAssignments`
      if (jsonObj.get("roleAssignments") != null && !jsonObj.get("roleAssignments").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("roleAssignments"));
      }
      // validate the optional field `sasPolicies`
      if (jsonObj.get("sasPolicies") != null && !jsonObj.get("sasPolicies").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("sasPolicies"));
      }
      // validate the optional field `segments`
      if (jsonObj.get("segments") != null && !jsonObj.get("segments").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("segments"));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      // validate the optional field `views`
      if (jsonObj.get("views") != null && !jsonObj.get("views").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("views"));
      }
      // validate the optional field `widgetTypes`
      if (jsonObj.get("widgetTypes") != null && !jsonObj.get("widgetTypes").isJsonNull()) {
        ResourceSetDescription.validateJsonElement(jsonObj.get("widgetTypes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoleAssignment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoleAssignment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoleAssignment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoleAssignment.class));

       return (TypeAdapter<T>) new TypeAdapter<RoleAssignment>() {
           @Override
           public void write(JsonWriter out, RoleAssignment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoleAssignment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoleAssignment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoleAssignment
   * @throws IOException if the JSON string is invalid with respect to RoleAssignment
   */
  public static RoleAssignment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoleAssignment.class);
  }

  /**
   * Convert an instance of RoleAssignment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

