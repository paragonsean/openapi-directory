/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RelationshipsLookup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response of suggest relationship links operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuggestRelationshipLinksResponse {
  public static final String SERIALIZED_NAME_INTERACTION_NAME = "interactionName";
  @SerializedName(SERIALIZED_NAME_INTERACTION_NAME)
  private String interactionName;

  public static final String SERIALIZED_NAME_SUGGESTED_RELATIONSHIPS = "suggestedRelationships";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_RELATIONSHIPS)
  private List<RelationshipsLookup> suggestedRelationships = new ArrayList<>();

  public SuggestRelationshipLinksResponse() {
  }

  public SuggestRelationshipLinksResponse(
     String interactionName, 
     List<RelationshipsLookup> suggestedRelationships
  ) {
    this();
    this.interactionName = interactionName;
    this.suggestedRelationships = suggestedRelationships;
  }

  /**
   * The interaction name.
   * @return interactionName
   */
  @javax.annotation.Nullable
  public String getInteractionName() {
    return interactionName;
  }



  /**
   * Suggested relationships for the type.
   * @return suggestedRelationships
   */
  @javax.annotation.Nullable
  public List<RelationshipsLookup> getSuggestedRelationships() {
    return suggestedRelationships;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestRelationshipLinksResponse suggestRelationshipLinksResponse = (SuggestRelationshipLinksResponse) o;
    return Objects.equals(this.interactionName, suggestRelationshipLinksResponse.interactionName) &&
        Objects.equals(this.suggestedRelationships, suggestRelationshipLinksResponse.suggestedRelationships);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interactionName, suggestedRelationships);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestRelationshipLinksResponse {\n");
    sb.append("    interactionName: ").append(toIndentedString(interactionName)).append("\n");
    sb.append("    suggestedRelationships: ").append(toIndentedString(suggestedRelationships)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interactionName");
    openapiFields.add("suggestedRelationships");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuggestRelationshipLinksResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestRelationshipLinksResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestRelationshipLinksResponse is not found in the empty JSON string", SuggestRelationshipLinksResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestRelationshipLinksResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestRelationshipLinksResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("interactionName") != null && !jsonObj.get("interactionName").isJsonNull()) && !jsonObj.get("interactionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interactionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interactionName").toString()));
      }
      if (jsonObj.get("suggestedRelationships") != null && !jsonObj.get("suggestedRelationships").isJsonNull()) {
        JsonArray jsonArraysuggestedRelationships = jsonObj.getAsJsonArray("suggestedRelationships");
        if (jsonArraysuggestedRelationships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("suggestedRelationships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `suggestedRelationships` to be an array in the JSON string but got `%s`", jsonObj.get("suggestedRelationships").toString()));
          }

          // validate the optional field `suggestedRelationships` (array)
          for (int i = 0; i < jsonArraysuggestedRelationships.size(); i++) {
            RelationshipsLookup.validateJsonElement(jsonArraysuggestedRelationships.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestRelationshipLinksResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestRelationshipLinksResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestRelationshipLinksResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestRelationshipLinksResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestRelationshipLinksResponse>() {
           @Override
           public void write(JsonWriter out, SuggestRelationshipLinksResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestRelationshipLinksResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuggestRelationshipLinksResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuggestRelationshipLinksResponse
   * @throws IOException if the JSON string is invalid with respect to SuggestRelationshipLinksResponse
   */
  public static SuggestRelationshipLinksResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestRelationshipLinksResponse.class);
  }

  /**
   * Convert an instance of SuggestRelationshipLinksResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

