/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Salesforce discover setting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SalesforceDiscoverSetting {
  public static final String SERIALIZED_NAME_SALESFORCE_CONNECTION_STRING_SECRET_URL = "salesforceConnectionStringSecretUrl";
  @SerializedName(SERIALIZED_NAME_SALESFORCE_CONNECTION_STRING_SECRET_URL)
  private String salesforceConnectionStringSecretUrl;

  public SalesforceDiscoverSetting() {
  }

  public SalesforceDiscoverSetting salesforceConnectionStringSecretUrl(String salesforceConnectionStringSecretUrl) {
    this.salesforceConnectionStringSecretUrl = salesforceConnectionStringSecretUrl;
    return this;
  }

  /**
   * The salesforce connection string secret URL.
   * @return salesforceConnectionStringSecretUrl
   */
  @javax.annotation.Nonnull
  public String getSalesforceConnectionStringSecretUrl() {
    return salesforceConnectionStringSecretUrl;
  }

  public void setSalesforceConnectionStringSecretUrl(String salesforceConnectionStringSecretUrl) {
    this.salesforceConnectionStringSecretUrl = salesforceConnectionStringSecretUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalesforceDiscoverSetting salesforceDiscoverSetting = (SalesforceDiscoverSetting) o;
    return Objects.equals(this.salesforceConnectionStringSecretUrl, salesforceDiscoverSetting.salesforceConnectionStringSecretUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(salesforceConnectionStringSecretUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalesforceDiscoverSetting {\n");
    sb.append("    salesforceConnectionStringSecretUrl: ").append(toIndentedString(salesforceConnectionStringSecretUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("salesforceConnectionStringSecretUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("salesforceConnectionStringSecretUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SalesforceDiscoverSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SalesforceDiscoverSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SalesforceDiscoverSetting is not found in the empty JSON string", SalesforceDiscoverSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SalesforceDiscoverSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SalesforceDiscoverSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SalesforceDiscoverSetting.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("salesforceConnectionStringSecretUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesforceConnectionStringSecretUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesforceConnectionStringSecretUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SalesforceDiscoverSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SalesforceDiscoverSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SalesforceDiscoverSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SalesforceDiscoverSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<SalesforceDiscoverSetting>() {
           @Override
           public void write(JsonWriter out, SalesforceDiscoverSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SalesforceDiscoverSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SalesforceDiscoverSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SalesforceDiscoverSetting
   * @throws IOException if the JSON string is invalid with respect to SalesforceDiscoverSetting
   */
  public static SalesforceDiscoverSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SalesforceDiscoverSetting.class);
  }

  /**
   * Convert an instance of SalesforceDiscoverSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

