/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The image definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageDefinition {
  public static final String SERIALIZED_NAME_CONTENT_URL = "contentUrl";
  @SerializedName(SERIALIZED_NAME_CONTENT_URL)
  private String contentUrl;

  public static final String SERIALIZED_NAME_IMAGE_EXISTS = "imageExists";
  @SerializedName(SERIALIZED_NAME_IMAGE_EXISTS)
  private Boolean imageExists;

  public static final String SERIALIZED_NAME_RELATIVE_PATH = "relativePath";
  @SerializedName(SERIALIZED_NAME_RELATIVE_PATH)
  private String relativePath;

  public ImageDefinition() {
  }

  public ImageDefinition contentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
    return this;
  }

  /**
   * Content URL for the image blob.
   * @return contentUrl
   */
  @javax.annotation.Nullable
  public String getContentUrl() {
    return contentUrl;
  }

  public void setContentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
  }


  public ImageDefinition imageExists(Boolean imageExists) {
    this.imageExists = imageExists;
    return this;
  }

  /**
   * Whether image exists already.
   * @return imageExists
   */
  @javax.annotation.Nullable
  public Boolean getImageExists() {
    return imageExists;
  }

  public void setImageExists(Boolean imageExists) {
    this.imageExists = imageExists;
  }


  public ImageDefinition relativePath(String relativePath) {
    this.relativePath = relativePath;
    return this;
  }

  /**
   * Relative path of the image.
   * @return relativePath
   */
  @javax.annotation.Nullable
  public String getRelativePath() {
    return relativePath;
  }

  public void setRelativePath(String relativePath) {
    this.relativePath = relativePath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageDefinition imageDefinition = (ImageDefinition) o;
    return Objects.equals(this.contentUrl, imageDefinition.contentUrl) &&
        Objects.equals(this.imageExists, imageDefinition.imageExists) &&
        Objects.equals(this.relativePath, imageDefinition.relativePath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentUrl, imageExists, relativePath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageDefinition {\n");
    sb.append("    contentUrl: ").append(toIndentedString(contentUrl)).append("\n");
    sb.append("    imageExists: ").append(toIndentedString(imageExists)).append("\n");
    sb.append("    relativePath: ").append(toIndentedString(relativePath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentUrl");
    openapiFields.add("imageExists");
    openapiFields.add("relativePath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageDefinition is not found in the empty JSON string", ImageDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentUrl") != null && !jsonObj.get("contentUrl").isJsonNull()) && !jsonObj.get("contentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentUrl").toString()));
      }
      if ((jsonObj.get("relativePath") != null && !jsonObj.get("relativePath").isJsonNull()) && !jsonObj.get("relativePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageDefinition>() {
           @Override
           public void write(JsonWriter out, ImageDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageDefinition
   * @throws IOException if the JSON string is invalid with respect to ImageDefinition
   */
  public static ImageDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageDefinition.class);
  }

  /**
   * Convert an instance of ImageDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

