/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConnectorMappingListResult;
import org.openapitools.client.model.ConnectorMappingResourceFormat;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectorMappingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectorMappingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectorMappingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for connectorMappingsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the connector mapping. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A new connector mapping is created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectorMappingsCreateOrUpdateCall(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, ConnectorMappingResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "connectorName" + "}", localVarApiClient.escapeString(connectorName.toString()))
            .replace("{" + "mappingName" + "}", localVarApiClient.escapeString(mappingName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectorMappingsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, ConnectorMappingResourceFormat parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectorMappingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling connectorMappingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'connectorName' is set
        if (connectorName == null) {
            throw new ApiException("Missing the required parameter 'connectorName' when calling connectorMappingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'mappingName' is set
        if (mappingName == null) {
            throw new ApiException("Missing the required parameter 'mappingName' when calling connectorMappingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectorMappingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectorMappingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling connectorMappingsCreateOrUpdate(Async)");
        }

        return connectorMappingsCreateOrUpdateCall(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates a connector mapping or updates an existing connector mapping in the connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation. (required)
     * @return ConnectorMappingResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the connector mapping. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A new connector mapping is created. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectorMappingResourceFormat connectorMappingsCreateOrUpdate(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, ConnectorMappingResourceFormat parameters) throws ApiException {
        ApiResponse<ConnectorMappingResourceFormat> localVarResp = connectorMappingsCreateOrUpdateWithHttpInfo(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a connector mapping or updates an existing connector mapping in the connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation. (required)
     * @return ApiResponse&lt;ConnectorMappingResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the connector mapping. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A new connector mapping is created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectorMappingResourceFormat> connectorMappingsCreateOrUpdateWithHttpInfo(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, ConnectorMappingResourceFormat parameters) throws ApiException {
        okhttp3.Call localVarCall = connectorMappingsCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ConnectorMappingResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a connector mapping or updates an existing connector mapping in the connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully created the connector mapping. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. A new connector mapping is created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectorMappingsCreateOrUpdateAsync(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, ConnectorMappingResourceFormat parameters, final ApiCallback<ConnectorMappingResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectorMappingsCreateOrUpdateValidateBeforeCall(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectorMappingResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectorMappingsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The connector mapping is deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectorMappingsDeleteCall(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "connectorName" + "}", localVarApiClient.escapeString(connectorName.toString()))
            .replace("{" + "mappingName" + "}", localVarApiClient.escapeString(mappingName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectorMappingsDeleteValidateBeforeCall(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectorMappingsDelete(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling connectorMappingsDelete(Async)");
        }

        // verify the required parameter 'connectorName' is set
        if (connectorName == null) {
            throw new ApiException("Missing the required parameter 'connectorName' when calling connectorMappingsDelete(Async)");
        }

        // verify the required parameter 'mappingName' is set
        if (mappingName == null) {
            throw new ApiException("Missing the required parameter 'mappingName' when calling connectorMappingsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectorMappingsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectorMappingsDelete(Async)");
        }

        return connectorMappingsDeleteCall(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The connector mapping is deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public void connectorMappingsDelete(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId) throws ApiException {
        connectorMappingsDeleteWithHttpInfo(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The connector mapping is deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> connectorMappingsDeleteWithHttpInfo(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = connectorMappingsDeleteValidateBeforeCall(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The connector mapping is deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent. Successfully requested delete operation, but the response is intentionally empty. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectorMappingsDeleteAsync(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectorMappingsDeleteValidateBeforeCall(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectorMappingsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the connector mapping. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectorMappingsGetCall(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "connectorName" + "}", localVarApiClient.escapeString(connectorName.toString()))
            .replace("{" + "mappingName" + "}", localVarApiClient.escapeString(mappingName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectorMappingsGetValidateBeforeCall(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectorMappingsGet(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling connectorMappingsGet(Async)");
        }

        // verify the required parameter 'connectorName' is set
        if (connectorName == null) {
            throw new ApiException("Missing the required parameter 'connectorName' when calling connectorMappingsGet(Async)");
        }

        // verify the required parameter 'mappingName' is set
        if (mappingName == null) {
            throw new ApiException("Missing the required parameter 'mappingName' when calling connectorMappingsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectorMappingsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectorMappingsGet(Async)");
        }

        return connectorMappingsGetCall(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ConnectorMappingResourceFormat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the connector mapping. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectorMappingResourceFormat connectorMappingsGet(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConnectorMappingResourceFormat> localVarResp = connectorMappingsGetWithHttpInfo(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ConnectorMappingResourceFormat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the connector mapping. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectorMappingResourceFormat> connectorMappingsGetWithHttpInfo(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = connectorMappingsGetValidateBeforeCall(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConnectorMappingResourceFormat>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a connector mapping in the connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param mappingName The name of the connector mapping. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get the connector mapping. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectorMappingsGetAsync(String resourceGroupName, String hubName, String connectorName, String mappingName, String apiVersion, String subscriptionId, final ApiCallback<ConnectorMappingResourceFormat> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectorMappingsGetValidateBeforeCall(resourceGroupName, hubName, connectorName, mappingName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectorMappingResourceFormat>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectorMappingsListByConnector
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the connector mappings in the connector. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectorMappingsListByConnectorCall(String resourceGroupName, String hubName, String connectorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hubName" + "}", localVarApiClient.escapeString(hubName.toString()))
            .replace("{" + "connectorName" + "}", localVarApiClient.escapeString(connectorName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectorMappingsListByConnectorValidateBeforeCall(String resourceGroupName, String hubName, String connectorName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectorMappingsListByConnector(Async)");
        }

        // verify the required parameter 'hubName' is set
        if (hubName == null) {
            throw new ApiException("Missing the required parameter 'hubName' when calling connectorMappingsListByConnector(Async)");
        }

        // verify the required parameter 'connectorName' is set
        if (connectorName == null) {
            throw new ApiException("Missing the required parameter 'connectorName' when calling connectorMappingsListByConnector(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectorMappingsListByConnector(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectorMappingsListByConnector(Async)");
        }

        return connectorMappingsListByConnectorCall(resourceGroupName, hubName, connectorName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the connector mappings in the specified connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ConnectorMappingListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the connector mappings in the connector. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectorMappingListResult connectorMappingsListByConnector(String resourceGroupName, String hubName, String connectorName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ConnectorMappingListResult> localVarResp = connectorMappingsListByConnectorWithHttpInfo(resourceGroupName, hubName, connectorName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the connector mappings in the specified connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ConnectorMappingListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the connector mappings in the connector. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectorMappingListResult> connectorMappingsListByConnectorWithHttpInfo(String resourceGroupName, String hubName, String connectorName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = connectorMappingsListByConnectorValidateBeforeCall(resourceGroupName, hubName, connectorName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ConnectorMappingListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the connector mappings in the specified connector.
     * @param resourceGroupName The name of the resource group. (required)
     * @param hubName The name of the hub. (required)
     * @param connectorName The name of the connector. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully get all the connector mappings in the connector. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectorMappingsListByConnectorAsync(String resourceGroupName, String hubName, String connectorName, String apiVersion, String subscriptionId, final ApiCallback<ConnectorMappingListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectorMappingsListByConnectorValidateBeforeCall(resourceGroupName, hubName, connectorName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ConnectorMappingListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
