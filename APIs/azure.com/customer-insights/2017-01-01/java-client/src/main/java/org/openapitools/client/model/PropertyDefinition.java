/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataSourcePrecedence;
import org.openapitools.client.model.ProfileEnumValidValuesFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Property definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PropertyDefinition {
  public static final String SERIALIZED_NAME_ARRAY_VALUE_SEPARATOR = "arrayValueSeparator";
  @SerializedName(SERIALIZED_NAME_ARRAY_VALUE_SEPARATOR)
  private String arrayValueSeparator;

  public static final String SERIALIZED_NAME_DATA_SOURCE_PRECEDENCE_RULES = "dataSourcePrecedenceRules";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_PRECEDENCE_RULES)
  private List<DataSourcePrecedence> dataSourcePrecedenceRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENUM_VALID_VALUES = "enumValidValues";
  @SerializedName(SERIALIZED_NAME_ENUM_VALID_VALUES)
  private List<ProfileEnumValidValuesFormat> enumValidValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_FIELD_TYPE = "fieldType";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private String fieldType;

  public static final String SERIALIZED_NAME_IS_ARRAY = "isArray";
  @SerializedName(SERIALIZED_NAME_IS_ARRAY)
  private Boolean isArray;

  public static final String SERIALIZED_NAME_IS_AVAILABLE_IN_GRAPH = "isAvailableInGraph";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE_IN_GRAPH)
  private Boolean isAvailableInGraph;

  public static final String SERIALIZED_NAME_IS_ENUM = "isEnum";
  @SerializedName(SERIALIZED_NAME_IS_ENUM)
  private Boolean isEnum;

  public static final String SERIALIZED_NAME_IS_FLAG_ENUM = "isFlagEnum";
  @SerializedName(SERIALIZED_NAME_IS_FLAG_ENUM)
  private Boolean isFlagEnum;

  public static final String SERIALIZED_NAME_IS_IMAGE = "isImage";
  @SerializedName(SERIALIZED_NAME_IS_IMAGE)
  private Boolean isImage;

  public static final String SERIALIZED_NAME_IS_LOCALIZED_STRING = "isLocalizedString";
  @SerializedName(SERIALIZED_NAME_IS_LOCALIZED_STRING)
  private Boolean isLocalizedString;

  public static final String SERIALIZED_NAME_IS_NAME = "isName";
  @SerializedName(SERIALIZED_NAME_IS_NAME)
  private Boolean isName;

  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_MAX_LENGTH = "maxLength";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH)
  private Integer maxLength;

  public static final String SERIALIZED_NAME_PROPERTY_ID = "propertyId";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ID)
  private String propertyId;

  public static final String SERIALIZED_NAME_SCHEMA_ITEM_PROP_LINK = "schemaItemPropLink";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ITEM_PROP_LINK)
  private String schemaItemPropLink;

  public PropertyDefinition() {
  }

  public PropertyDefinition(
     List<DataSourcePrecedence> dataSourcePrecedenceRules
  ) {
    this();
    this.dataSourcePrecedenceRules = dataSourcePrecedenceRules;
  }

  public PropertyDefinition arrayValueSeparator(String arrayValueSeparator) {
    this.arrayValueSeparator = arrayValueSeparator;
    return this;
  }

  /**
   * Array value separator for properties with isArray set.
   * @return arrayValueSeparator
   */
  @javax.annotation.Nullable
  public String getArrayValueSeparator() {
    return arrayValueSeparator;
  }

  public void setArrayValueSeparator(String arrayValueSeparator) {
    this.arrayValueSeparator = arrayValueSeparator;
  }


  /**
   * This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
   * @return dataSourcePrecedenceRules
   */
  @javax.annotation.Nullable
  public List<DataSourcePrecedence> getDataSourcePrecedenceRules() {
    return dataSourcePrecedenceRules;
  }



  public PropertyDefinition enumValidValues(List<ProfileEnumValidValuesFormat> enumValidValues) {
    this.enumValidValues = enumValidValues;
    return this;
  }

  public PropertyDefinition addEnumValidValuesItem(ProfileEnumValidValuesFormat enumValidValuesItem) {
    if (this.enumValidValues == null) {
      this.enumValidValues = new ArrayList<>();
    }
    this.enumValidValues.add(enumValidValuesItem);
    return this;
  }

  /**
   * Describes valid values for an enum property.
   * @return enumValidValues
   */
  @javax.annotation.Nullable
  public List<ProfileEnumValidValuesFormat> getEnumValidValues() {
    return enumValidValues;
  }

  public void setEnumValidValues(List<ProfileEnumValidValuesFormat> enumValidValues) {
    this.enumValidValues = enumValidValues;
  }


  public PropertyDefinition fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * Name of the property.
   * @return fieldName
   */
  @javax.annotation.Nonnull
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public PropertyDefinition fieldType(String fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Type of the property.
   * @return fieldType
   */
  @javax.annotation.Nonnull
  public String getFieldType() {
    return fieldType;
  }

  public void setFieldType(String fieldType) {
    this.fieldType = fieldType;
  }


  public PropertyDefinition isArray(Boolean isArray) {
    this.isArray = isArray;
    return this;
  }

  /**
   * Indicates if the property is actually an array of the fieldType above on the data api.
   * @return isArray
   */
  @javax.annotation.Nullable
  public Boolean getIsArray() {
    return isArray;
  }

  public void setIsArray(Boolean isArray) {
    this.isArray = isArray;
  }


  public PropertyDefinition isAvailableInGraph(Boolean isAvailableInGraph) {
    this.isAvailableInGraph = isAvailableInGraph;
    return this;
  }

  /**
   * Whether property is available in graph or not.
   * @return isAvailableInGraph
   */
  @javax.annotation.Nullable
  public Boolean getIsAvailableInGraph() {
    return isAvailableInGraph;
  }

  public void setIsAvailableInGraph(Boolean isAvailableInGraph) {
    this.isAvailableInGraph = isAvailableInGraph;
  }


  public PropertyDefinition isEnum(Boolean isEnum) {
    this.isEnum = isEnum;
    return this;
  }

  /**
   * Indicates if the property is an enum.
   * @return isEnum
   */
  @javax.annotation.Nullable
  public Boolean getIsEnum() {
    return isEnum;
  }

  public void setIsEnum(Boolean isEnum) {
    this.isEnum = isEnum;
  }


  public PropertyDefinition isFlagEnum(Boolean isFlagEnum) {
    this.isFlagEnum = isFlagEnum;
    return this;
  }

  /**
   * Indicates if the property is an flag enum.
   * @return isFlagEnum
   */
  @javax.annotation.Nullable
  public Boolean getIsFlagEnum() {
    return isFlagEnum;
  }

  public void setIsFlagEnum(Boolean isFlagEnum) {
    this.isFlagEnum = isFlagEnum;
  }


  public PropertyDefinition isImage(Boolean isImage) {
    this.isImage = isImage;
    return this;
  }

  /**
   * Whether the property is an Image.
   * @return isImage
   */
  @javax.annotation.Nullable
  public Boolean getIsImage() {
    return isImage;
  }

  public void setIsImage(Boolean isImage) {
    this.isImage = isImage;
  }


  public PropertyDefinition isLocalizedString(Boolean isLocalizedString) {
    this.isLocalizedString = isLocalizedString;
    return this;
  }

  /**
   * Whether the property is a localized string.
   * @return isLocalizedString
   */
  @javax.annotation.Nullable
  public Boolean getIsLocalizedString() {
    return isLocalizedString;
  }

  public void setIsLocalizedString(Boolean isLocalizedString) {
    this.isLocalizedString = isLocalizedString;
  }


  public PropertyDefinition isName(Boolean isName) {
    this.isName = isName;
    return this;
  }

  /**
   * Whether the property is a name or a part of name.
   * @return isName
   */
  @javax.annotation.Nullable
  public Boolean getIsName() {
    return isName;
  }

  public void setIsName(Boolean isName) {
    this.isName = isName;
  }


  public PropertyDefinition isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
   * @return isRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public PropertyDefinition maxLength(Integer maxLength) {
    this.maxLength = maxLength;
    return this;
  }

  /**
   * Max length of string. Used only if type is string.
   * @return maxLength
   */
  @javax.annotation.Nullable
  public Integer getMaxLength() {
    return maxLength;
  }

  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }


  public PropertyDefinition propertyId(String propertyId) {
    this.propertyId = propertyId;
    return this;
  }

  /**
   * The ID associated with the property.
   * @return propertyId
   */
  @javax.annotation.Nullable
  public String getPropertyId() {
    return propertyId;
  }

  public void setPropertyId(String propertyId) {
    this.propertyId = propertyId;
  }


  public PropertyDefinition schemaItemPropLink(String schemaItemPropLink) {
    this.schemaItemPropLink = schemaItemPropLink;
    return this;
  }

  /**
   * URL encoded schema.org item prop link for the property.
   * @return schemaItemPropLink
   */
  @javax.annotation.Nullable
  public String getSchemaItemPropLink() {
    return schemaItemPropLink;
  }

  public void setSchemaItemPropLink(String schemaItemPropLink) {
    this.schemaItemPropLink = schemaItemPropLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyDefinition propertyDefinition = (PropertyDefinition) o;
    return Objects.equals(this.arrayValueSeparator, propertyDefinition.arrayValueSeparator) &&
        Objects.equals(this.dataSourcePrecedenceRules, propertyDefinition.dataSourcePrecedenceRules) &&
        Objects.equals(this.enumValidValues, propertyDefinition.enumValidValues) &&
        Objects.equals(this.fieldName, propertyDefinition.fieldName) &&
        Objects.equals(this.fieldType, propertyDefinition.fieldType) &&
        Objects.equals(this.isArray, propertyDefinition.isArray) &&
        Objects.equals(this.isAvailableInGraph, propertyDefinition.isAvailableInGraph) &&
        Objects.equals(this.isEnum, propertyDefinition.isEnum) &&
        Objects.equals(this.isFlagEnum, propertyDefinition.isFlagEnum) &&
        Objects.equals(this.isImage, propertyDefinition.isImage) &&
        Objects.equals(this.isLocalizedString, propertyDefinition.isLocalizedString) &&
        Objects.equals(this.isName, propertyDefinition.isName) &&
        Objects.equals(this.isRequired, propertyDefinition.isRequired) &&
        Objects.equals(this.maxLength, propertyDefinition.maxLength) &&
        Objects.equals(this.propertyId, propertyDefinition.propertyId) &&
        Objects.equals(this.schemaItemPropLink, propertyDefinition.schemaItemPropLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayValueSeparator, dataSourcePrecedenceRules, enumValidValues, fieldName, fieldType, isArray, isAvailableInGraph, isEnum, isFlagEnum, isImage, isLocalizedString, isName, isRequired, maxLength, propertyId, schemaItemPropLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyDefinition {\n");
    sb.append("    arrayValueSeparator: ").append(toIndentedString(arrayValueSeparator)).append("\n");
    sb.append("    dataSourcePrecedenceRules: ").append(toIndentedString(dataSourcePrecedenceRules)).append("\n");
    sb.append("    enumValidValues: ").append(toIndentedString(enumValidValues)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    isArray: ").append(toIndentedString(isArray)).append("\n");
    sb.append("    isAvailableInGraph: ").append(toIndentedString(isAvailableInGraph)).append("\n");
    sb.append("    isEnum: ").append(toIndentedString(isEnum)).append("\n");
    sb.append("    isFlagEnum: ").append(toIndentedString(isFlagEnum)).append("\n");
    sb.append("    isImage: ").append(toIndentedString(isImage)).append("\n");
    sb.append("    isLocalizedString: ").append(toIndentedString(isLocalizedString)).append("\n");
    sb.append("    isName: ").append(toIndentedString(isName)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    schemaItemPropLink: ").append(toIndentedString(schemaItemPropLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrayValueSeparator");
    openapiFields.add("dataSourcePrecedenceRules");
    openapiFields.add("enumValidValues");
    openapiFields.add("fieldName");
    openapiFields.add("fieldType");
    openapiFields.add("isArray");
    openapiFields.add("isAvailableInGraph");
    openapiFields.add("isEnum");
    openapiFields.add("isFlagEnum");
    openapiFields.add("isImage");
    openapiFields.add("isLocalizedString");
    openapiFields.add("isName");
    openapiFields.add("isRequired");
    openapiFields.add("maxLength");
    openapiFields.add("propertyId");
    openapiFields.add("schemaItemPropLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldName");
    openapiRequiredFields.add("fieldType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyDefinition is not found in the empty JSON string", PropertyDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PropertyDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("arrayValueSeparator") != null && !jsonObj.get("arrayValueSeparator").isJsonNull()) && !jsonObj.get("arrayValueSeparator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `arrayValueSeparator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("arrayValueSeparator").toString()));
      }
      if (jsonObj.get("dataSourcePrecedenceRules") != null && !jsonObj.get("dataSourcePrecedenceRules").isJsonNull()) {
        JsonArray jsonArraydataSourcePrecedenceRules = jsonObj.getAsJsonArray("dataSourcePrecedenceRules");
        if (jsonArraydataSourcePrecedenceRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataSourcePrecedenceRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataSourcePrecedenceRules` to be an array in the JSON string but got `%s`", jsonObj.get("dataSourcePrecedenceRules").toString()));
          }

          // validate the optional field `dataSourcePrecedenceRules` (array)
          for (int i = 0; i < jsonArraydataSourcePrecedenceRules.size(); i++) {
            DataSourcePrecedence.validateJsonElement(jsonArraydataSourcePrecedenceRules.get(i));
          };
        }
      }
      if (jsonObj.get("enumValidValues") != null && !jsonObj.get("enumValidValues").isJsonNull()) {
        JsonArray jsonArrayenumValidValues = jsonObj.getAsJsonArray("enumValidValues");
        if (jsonArrayenumValidValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enumValidValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enumValidValues` to be an array in the JSON string but got `%s`", jsonObj.get("enumValidValues").toString()));
          }

          // validate the optional field `enumValidValues` (array)
          for (int i = 0; i < jsonArrayenumValidValues.size(); i++) {
            ProfileEnumValidValuesFormat.validateJsonElement(jsonArrayenumValidValues.get(i));
          };
        }
      }
      if (!jsonObj.get("fieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldName").toString()));
      }
      if (!jsonObj.get("fieldType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldType").toString()));
      }
      if ((jsonObj.get("propertyId") != null && !jsonObj.get("propertyId").isJsonNull()) && !jsonObj.get("propertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyId").toString()));
      }
      if ((jsonObj.get("schemaItemPropLink") != null && !jsonObj.get("schemaItemPropLink").isJsonNull()) && !jsonObj.get("schemaItemPropLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaItemPropLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaItemPropLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyDefinition>() {
           @Override
           public void write(JsonWriter out, PropertyDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyDefinition
   * @throws IOException if the JSON string is invalid with respect to PropertyDefinition
   */
  public static PropertyDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyDefinition.class);
  }

  /**
   * Convert an instance of PropertyDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

