/*
 * CustomerInsightsManagementClient
 * The Azure Customer Insights management API provides a RESTful set of web services that interact with Azure Customer Insights service to manage your resources. The API has entities that capture the relationship between an end user and the Azure Customer Insights service.
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for a Link&#39;s property mapping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:50.727819-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TypePropertiesMapping {
  public static final String SERIALIZED_NAME_INTERACTION_TYPE_PROPERTY_NAME = "interactionTypePropertyName";
  @SerializedName(SERIALIZED_NAME_INTERACTION_TYPE_PROPERTY_NAME)
  private String interactionTypePropertyName;

  public static final String SERIALIZED_NAME_IS_PROFILE_TYPE_ID = "isProfileTypeId";
  @SerializedName(SERIALIZED_NAME_IS_PROFILE_TYPE_ID)
  private Boolean isProfileTypeId;

  /**
   * Link type.
   */
  @JsonAdapter(LinkTypeEnum.Adapter.class)
  public enum LinkTypeEnum {
    UPDATE_ALWAYS("UpdateAlways"),
    
    COPY_IF_NULL("CopyIfNull");

    private String value;

    LinkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinkTypeEnum fromValue(String value) {
      for (LinkTypeEnum b : LinkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LinkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LinkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LinkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LINK_TYPE = "linkType";
  @SerializedName(SERIALIZED_NAME_LINK_TYPE)
  private LinkTypeEnum linkType;

  public static final String SERIALIZED_NAME_PROFILE_TYPE_PROPERTY_NAME = "profileTypePropertyName";
  @SerializedName(SERIALIZED_NAME_PROFILE_TYPE_PROPERTY_NAME)
  private String profileTypePropertyName;

  public TypePropertiesMapping() {
  }

  public TypePropertiesMapping interactionTypePropertyName(String interactionTypePropertyName) {
    this.interactionTypePropertyName = interactionTypePropertyName;
    return this;
  }

  /**
   *  Property name on the source Interaction Type.
   * @return interactionTypePropertyName
   */
  @javax.annotation.Nonnull
  public String getInteractionTypePropertyName() {
    return interactionTypePropertyName;
  }

  public void setInteractionTypePropertyName(String interactionTypePropertyName) {
    this.interactionTypePropertyName = interactionTypePropertyName;
  }


  public TypePropertiesMapping isProfileTypeId(Boolean isProfileTypeId) {
    this.isProfileTypeId = isProfileTypeId;
    return this;
  }

  /**
   * Flag to indicate whether the Profile Type property is an id on the Profile Type.
   * @return isProfileTypeId
   */
  @javax.annotation.Nullable
  public Boolean getIsProfileTypeId() {
    return isProfileTypeId;
  }

  public void setIsProfileTypeId(Boolean isProfileTypeId) {
    this.isProfileTypeId = isProfileTypeId;
  }


  public TypePropertiesMapping linkType(LinkTypeEnum linkType) {
    this.linkType = linkType;
    return this;
  }

  /**
   * Link type.
   * @return linkType
   */
  @javax.annotation.Nullable
  public LinkTypeEnum getLinkType() {
    return linkType;
  }

  public void setLinkType(LinkTypeEnum linkType) {
    this.linkType = linkType;
  }


  public TypePropertiesMapping profileTypePropertyName(String profileTypePropertyName) {
    this.profileTypePropertyName = profileTypePropertyName;
    return this;
  }

  /**
   * Property name on the target Profile Type.
   * @return profileTypePropertyName
   */
  @javax.annotation.Nonnull
  public String getProfileTypePropertyName() {
    return profileTypePropertyName;
  }

  public void setProfileTypePropertyName(String profileTypePropertyName) {
    this.profileTypePropertyName = profileTypePropertyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypePropertiesMapping typePropertiesMapping = (TypePropertiesMapping) o;
    return Objects.equals(this.interactionTypePropertyName, typePropertiesMapping.interactionTypePropertyName) &&
        Objects.equals(this.isProfileTypeId, typePropertiesMapping.isProfileTypeId) &&
        Objects.equals(this.linkType, typePropertiesMapping.linkType) &&
        Objects.equals(this.profileTypePropertyName, typePropertiesMapping.profileTypePropertyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interactionTypePropertyName, isProfileTypeId, linkType, profileTypePropertyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypePropertiesMapping {\n");
    sb.append("    interactionTypePropertyName: ").append(toIndentedString(interactionTypePropertyName)).append("\n");
    sb.append("    isProfileTypeId: ").append(toIndentedString(isProfileTypeId)).append("\n");
    sb.append("    linkType: ").append(toIndentedString(linkType)).append("\n");
    sb.append("    profileTypePropertyName: ").append(toIndentedString(profileTypePropertyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interactionTypePropertyName");
    openapiFields.add("isProfileTypeId");
    openapiFields.add("linkType");
    openapiFields.add("profileTypePropertyName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("interactionTypePropertyName");
    openapiRequiredFields.add("profileTypePropertyName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TypePropertiesMapping
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TypePropertiesMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TypePropertiesMapping is not found in the empty JSON string", TypePropertiesMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TypePropertiesMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TypePropertiesMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TypePropertiesMapping.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("interactionTypePropertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interactionTypePropertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interactionTypePropertyName").toString()));
      }
      if ((jsonObj.get("linkType") != null && !jsonObj.get("linkType").isJsonNull()) && !jsonObj.get("linkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkType").toString()));
      }
      // validate the optional field `linkType`
      if (jsonObj.get("linkType") != null && !jsonObj.get("linkType").isJsonNull()) {
        LinkTypeEnum.validateJsonElement(jsonObj.get("linkType"));
      }
      if (!jsonObj.get("profileTypePropertyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileTypePropertyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileTypePropertyName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TypePropertiesMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TypePropertiesMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TypePropertiesMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TypePropertiesMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<TypePropertiesMapping>() {
           @Override
           public void write(JsonWriter out, TypePropertiesMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TypePropertiesMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TypePropertiesMapping given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TypePropertiesMapping
   * @throws IOException if the JSON string is invalid with respect to TypePropertiesMapping
   */
  public static TypePropertiesMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TypePropertiesMapping.class);
  }

  /**
   * Convert an instance of TypePropertiesMapping to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

