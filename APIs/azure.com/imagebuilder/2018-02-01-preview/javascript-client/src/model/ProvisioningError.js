/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProvisioningError model module.
 * @module model/ProvisioningError
 * @version 2018-02-01-preview
 */
class ProvisioningError {
    /**
     * Constructs a new <code>ProvisioningError</code>.
     * @alias module:model/ProvisioningError
     */
    constructor() { 
        
        ProvisioningError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProvisioningError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProvisioningError} obj Optional instance to populate.
     * @return {module:model/ProvisioningError} The populated <code>ProvisioningError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProvisioningError();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('provisioningErrorCode')) {
                obj['provisioningErrorCode'] = ApiClient.convertToType(data['provisioningErrorCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProvisioningError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProvisioningError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['provisioningErrorCode'] && !(typeof data['provisioningErrorCode'] === 'string' || data['provisioningErrorCode'] instanceof String)) {
            throw new Error("Expected the field `provisioningErrorCode` to be a primitive type in the JSON string but got " + data['provisioningErrorCode']);
        }

        return true;
    }


}



/**
 * Verbose error message about the provisioning failure
 * @member {String} message
 */
ProvisioningError.prototype['message'] = undefined;

/**
 * Error code of the provisioning failure
 * @member {module:model/ProvisioningError.ProvisioningErrorCodeEnum} provisioningErrorCode
 */
ProvisioningError.prototype['provisioningErrorCode'] = undefined;





/**
 * Allowed values for the <code>provisioningErrorCode</code> property.
 * @enum {String}
 * @readonly
 */
ProvisioningError['ProvisioningErrorCodeEnum'] = {

    /**
     * value: "BadSourceType"
     * @const
     */
    "BadSourceType": "BadSourceType",

    /**
     * value: "BadPIRSource"
     * @const
     */
    "BadPIRSource": "BadPIRSource",

    /**
     * value: "BadISOSource"
     * @const
     */
    "BadISOSource": "BadISOSource",

    /**
     * value: "BadCustomizerType"
     * @const
     */
    "BadCustomizerType": "BadCustomizerType",

    /**
     * value: "NoCustomizerShellScript"
     * @const
     */
    "NoCustomizerShellScript": "NoCustomizerShellScript",

    /**
     * value: "ServerError"
     * @const
     */
    "ServerError": "ServerError",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};



export default ProvisioningError;

