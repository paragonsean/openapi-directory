/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageTemplateCustomizer from './ImageTemplateCustomizer';

/**
 * The ImageTemplateShellCustomizer model module.
 * @module model/ImageTemplateShellCustomizer
 * @version 2018-02-01-preview
 */
class ImageTemplateShellCustomizer {
    /**
     * Constructs a new <code>ImageTemplateShellCustomizer</code>.
     * Runs a shell script during the customization phase
     * @alias module:model/ImageTemplateShellCustomizer
     * @extends module:model/ImageTemplateCustomizer
     * @implements module:model/ImageTemplateCustomizer
     * @param type {String} The type of customization tool you want to use on the Image. For example, \"shell\" can be shellCustomizer
     */
    constructor(type) { 
        ImageTemplateCustomizer.initialize(this, type);
        ImageTemplateShellCustomizer.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>ImageTemplateShellCustomizer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageTemplateShellCustomizer} obj Optional instance to populate.
     * @return {module:model/ImageTemplateShellCustomizer} The populated <code>ImageTemplateShellCustomizer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageTemplateShellCustomizer();
            ImageTemplateCustomizer.constructFromObject(data, obj);
            ImageTemplateCustomizer.constructFromObject(data, obj);

            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageTemplateShellCustomizer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageTemplateShellCustomizer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageTemplateShellCustomizer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['script'] && !(typeof data['script'] === 'string' || data['script'] instanceof String)) {
            throw new Error("Expected the field `script` to be a primitive type in the JSON string but got " + data['script']);
        }

        return true;
    }


}

ImageTemplateShellCustomizer.RequiredProperties = ["type"];

/**
 * The shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
 * @member {String} script
 */
ImageTemplateShellCustomizer.prototype['script'] = undefined;


// Implement ImageTemplateCustomizer interface:
/**
 * Friendly Name to provide context on what this customization step does
 * @member {String} name
 */
ImageTemplateCustomizer.prototype['name'] = undefined;
/**
 * The type of customization tool you want to use on the Image. For example, \"shell\" can be shellCustomizer
 * @member {String} type
 */
ImageTemplateCustomizer.prototype['type'] = undefined;




export default ImageTemplateShellCustomizer;

