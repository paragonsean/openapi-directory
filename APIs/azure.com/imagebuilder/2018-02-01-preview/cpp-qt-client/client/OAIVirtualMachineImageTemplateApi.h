/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualMachineImageTemplateApi_H
#define OAI_OAIVirtualMachineImageTemplateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIImageTemplate.h"
#include "OAIImageTemplateListResult.h"
#include "OAIImageTemplateUpdateParameters.h"
#include "OAIRunOutput.h"
#include "OAIRunOutputCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualMachineImageTemplateApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualMachineImageTemplateApi(const int timeOut = 0);
    ~OAIVirtualMachineImageTemplateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    * @param[in]  parameters OAIImageTemplate [required]
    */
    virtual void virtualMachineImageTemplateCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name, const OAIImageTemplate &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    */
    virtual void virtualMachineImageTemplateDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    */
    virtual void virtualMachineImageTemplateGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    * @param[in]  run_output_name QString [required]
    */
    virtual void virtualMachineImageTemplateGetRunOutput(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name, const QString &run_output_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachineImageTemplateList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachineImageTemplateListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    */
    virtual void virtualMachineImageTemplateListRunOutputs(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    */
    virtual void virtualMachineImageTemplateRun(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIImageTemplateUpdateParameters [required]
    */
    virtual void virtualMachineImageTemplateUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name, const QString &api_version, const OAIImageTemplateUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualMachineImageTemplateCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplateDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplateGetCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplateGetRunOutputCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplateListCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplateListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplateListRunOutputsCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplateRunCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplateUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualMachineImageTemplateCreateOrUpdateSignal(OAIImageTemplate summary);
    void virtualMachineImageTemplateDeleteSignal();
    void virtualMachineImageTemplateGetSignal(OAIImageTemplate summary);
    void virtualMachineImageTemplateGetRunOutputSignal(OAIRunOutput summary);
    void virtualMachineImageTemplateListSignal(OAIImageTemplateListResult summary);
    void virtualMachineImageTemplateListByResourceGroupSignal(OAIImageTemplateListResult summary);
    void virtualMachineImageTemplateListRunOutputsSignal(OAIRunOutputCollection summary);
    void virtualMachineImageTemplateRunSignal();
    void virtualMachineImageTemplateUpdateSignal(OAIImageTemplate summary);


    void virtualMachineImageTemplateCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIImageTemplate summary);
    void virtualMachineImageTemplateDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplateGetSignalFull(OAIHttpRequestWorker *worker, OAIImageTemplate summary);
    void virtualMachineImageTemplateGetRunOutputSignalFull(OAIHttpRequestWorker *worker, OAIRunOutput summary);
    void virtualMachineImageTemplateListSignalFull(OAIHttpRequestWorker *worker, OAIImageTemplateListResult summary);
    void virtualMachineImageTemplateListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIImageTemplateListResult summary);
    void virtualMachineImageTemplateListRunOutputsSignalFull(OAIHttpRequestWorker *worker, OAIRunOutputCollection summary);
    void virtualMachineImageTemplateRunSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplateUpdateSignalFull(OAIHttpRequestWorker *worker, OAIImageTemplate summary);

    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateCreateOrUpdateSignalError() instead")
    void virtualMachineImageTemplateCreateOrUpdateSignalE(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateCreateOrUpdateSignalError(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateDeleteSignalError() instead")
    void virtualMachineImageTemplateDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateGetSignalError() instead")
    void virtualMachineImageTemplateGetSignalE(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateGetSignalError(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateGetRunOutputSignalError() instead")
    void virtualMachineImageTemplateGetRunOutputSignalE(OAIRunOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateGetRunOutputSignalError(OAIRunOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateListSignalError() instead")
    void virtualMachineImageTemplateListSignalE(OAIImageTemplateListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateListSignalError(OAIImageTemplateListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateListByResourceGroupSignalError() instead")
    void virtualMachineImageTemplateListByResourceGroupSignalE(OAIImageTemplateListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateListByResourceGroupSignalError(OAIImageTemplateListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateListRunOutputsSignalError() instead")
    void virtualMachineImageTemplateListRunOutputsSignalE(OAIRunOutputCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateListRunOutputsSignalError(OAIRunOutputCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateRunSignalError() instead")
    void virtualMachineImageTemplateRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateUpdateSignalError() instead")
    void virtualMachineImageTemplateUpdateSignalE(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateUpdateSignalError(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateCreateOrUpdateSignalErrorFull() instead")
    void virtualMachineImageTemplateCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateDeleteSignalErrorFull() instead")
    void virtualMachineImageTemplateDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateGetSignalErrorFull() instead")
    void virtualMachineImageTemplateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateGetRunOutputSignalErrorFull() instead")
    void virtualMachineImageTemplateGetRunOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateGetRunOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateListSignalErrorFull() instead")
    void virtualMachineImageTemplateListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateListByResourceGroupSignalErrorFull() instead")
    void virtualMachineImageTemplateListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateListRunOutputsSignalErrorFull() instead")
    void virtualMachineImageTemplateListRunOutputsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateListRunOutputsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateRunSignalErrorFull() instead")
    void virtualMachineImageTemplateRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplateUpdateSignalErrorFull() instead")
    void virtualMachineImageTemplateUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplateUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
