/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiError::OAIApiError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiError::OAIApiError() {
    this->initializeModel();
}

OAIApiError::~OAIApiError() {}

void OAIApiError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_inner_error_isSet = false;
    m_inner_error_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIApiError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_inner_error_isValid = ::OpenAPI::fromJsonValue(m_inner_error, json[QString("innerError")]);
    m_inner_error_isSet = !json[QString("innerError")].isNull() && m_inner_error_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIApiError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_inner_error.isSet()) {
        obj.insert(QString("innerError"), ::OpenAPI::toJsonValue(m_inner_error));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAIApiError::getCode() const {
    return m_code;
}
void OAIApiError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIApiError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIApiError::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIApiErrorBase> OAIApiError::getDetails() const {
    return m_details;
}
void OAIApiError::setDetails(const QList<OAIApiErrorBase> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIApiError::is_details_Set() const{
    return m_details_isSet;
}

bool OAIApiError::is_details_Valid() const{
    return m_details_isValid;
}

OAIInnerError OAIApiError::getInnerError() const {
    return m_inner_error;
}
void OAIApiError::setInnerError(const OAIInnerError &inner_error) {
    m_inner_error = inner_error;
    m_inner_error_isSet = true;
}

bool OAIApiError::is_inner_error_Set() const{
    return m_inner_error_isSet;
}

bool OAIApiError::is_inner_error_Valid() const{
    return m_inner_error_isValid;
}

QString OAIApiError::getMessage() const {
    return m_message;
}
void OAIApiError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIApiError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIApiError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIApiError::getTarget() const {
    return m_target;
}
void OAIApiError::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIApiError::is_target_Set() const{
    return m_target_isSet;
}

bool OAIApiError::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIApiError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inner_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
