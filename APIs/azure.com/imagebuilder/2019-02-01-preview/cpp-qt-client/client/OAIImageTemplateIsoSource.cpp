/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTemplateIsoSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTemplateIsoSource::OAIImageTemplateIsoSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTemplateIsoSource::OAIImageTemplateIsoSource() {
    this->initializeModel();
}

OAIImageTemplateIsoSource::~OAIImageTemplateIsoSource() {}

void OAIImageTemplateIsoSource::initializeModel() {

    m_sha256_checksum_isSet = false;
    m_sha256_checksum_isValid = false;

    m_source_uri_isSet = false;
    m_source_uri_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImageTemplateIsoSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTemplateIsoSource::fromJsonObject(QJsonObject json) {

    m_sha256_checksum_isValid = ::OpenAPI::fromJsonValue(m_sha256_checksum, json[QString("sha256Checksum")]);
    m_sha256_checksum_isSet = !json[QString("sha256Checksum")].isNull() && m_sha256_checksum_isValid;

    m_source_uri_isValid = ::OpenAPI::fromJsonValue(m_source_uri, json[QString("sourceURI")]);
    m_source_uri_isSet = !json[QString("sourceURI")].isNull() && m_source_uri_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImageTemplateIsoSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTemplateIsoSource::asJsonObject() const {
    QJsonObject obj;
    if (m_sha256_checksum_isSet) {
        obj.insert(QString("sha256Checksum"), ::OpenAPI::toJsonValue(m_sha256_checksum));
    }
    if (m_source_uri_isSet) {
        obj.insert(QString("sourceURI"), ::OpenAPI::toJsonValue(m_source_uri));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIImageTemplateIsoSource::getSha256Checksum() const {
    return m_sha256_checksum;
}
void OAIImageTemplateIsoSource::setSha256Checksum(const QString &sha256_checksum) {
    m_sha256_checksum = sha256_checksum;
    m_sha256_checksum_isSet = true;
}

bool OAIImageTemplateIsoSource::is_sha256_checksum_Set() const{
    return m_sha256_checksum_isSet;
}

bool OAIImageTemplateIsoSource::is_sha256_checksum_Valid() const{
    return m_sha256_checksum_isValid;
}

QString OAIImageTemplateIsoSource::getSourceUri() const {
    return m_source_uri;
}
void OAIImageTemplateIsoSource::setSourceUri(const QString &source_uri) {
    m_source_uri = source_uri;
    m_source_uri_isSet = true;
}

bool OAIImageTemplateIsoSource::is_source_uri_Set() const{
    return m_source_uri_isSet;
}

bool OAIImageTemplateIsoSource::is_source_uri_Valid() const{
    return m_source_uri_isValid;
}

QString OAIImageTemplateIsoSource::getType() const {
    return m_type;
}
void OAIImageTemplateIsoSource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImageTemplateIsoSource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImageTemplateIsoSource::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImageTemplateIsoSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sha256_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTemplateIsoSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sha256_checksum_isValid && m_source_uri_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
