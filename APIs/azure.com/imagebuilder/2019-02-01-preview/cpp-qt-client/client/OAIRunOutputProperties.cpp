/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunOutputProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunOutputProperties::OAIRunOutputProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunOutputProperties::OAIRunOutputProperties() {
    this->initializeModel();
}

OAIRunOutputProperties::~OAIRunOutputProperties() {}

void OAIRunOutputProperties::initializeModel() {

    m_artifact_id_isSet = false;
    m_artifact_id_isValid = false;

    m_artifact_uri_isSet = false;
    m_artifact_uri_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIRunOutputProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunOutputProperties::fromJsonObject(QJsonObject json) {

    m_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_artifact_id, json[QString("artifactId")]);
    m_artifact_id_isSet = !json[QString("artifactId")].isNull() && m_artifact_id_isValid;

    m_artifact_uri_isValid = ::OpenAPI::fromJsonValue(m_artifact_uri, json[QString("artifactUri")]);
    m_artifact_uri_isSet = !json[QString("artifactUri")].isNull() && m_artifact_uri_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIRunOutputProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunOutputProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_id_isSet) {
        obj.insert(QString("artifactId"), ::OpenAPI::toJsonValue(m_artifact_id));
    }
    if (m_artifact_uri_isSet) {
        obj.insert(QString("artifactUri"), ::OpenAPI::toJsonValue(m_artifact_uri));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIRunOutputProperties::getArtifactId() const {
    return m_artifact_id;
}
void OAIRunOutputProperties::setArtifactId(const QString &artifact_id) {
    m_artifact_id = artifact_id;
    m_artifact_id_isSet = true;
}

bool OAIRunOutputProperties::is_artifact_id_Set() const{
    return m_artifact_id_isSet;
}

bool OAIRunOutputProperties::is_artifact_id_Valid() const{
    return m_artifact_id_isValid;
}

QString OAIRunOutputProperties::getArtifactUri() const {
    return m_artifact_uri;
}
void OAIRunOutputProperties::setArtifactUri(const QString &artifact_uri) {
    m_artifact_uri = artifact_uri;
    m_artifact_uri_isSet = true;
}

bool OAIRunOutputProperties::is_artifact_uri_Set() const{
    return m_artifact_uri_isSet;
}

bool OAIRunOutputProperties::is_artifact_uri_Valid() const{
    return m_artifact_uri_isValid;
}

OAIProvisioningState OAIRunOutputProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRunOutputProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRunOutputProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRunOutputProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIRunOutputProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunOutputProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
