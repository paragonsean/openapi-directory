/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTemplatePowerShellCustomizer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTemplatePowerShellCustomizer::OAIImageTemplatePowerShellCustomizer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTemplatePowerShellCustomizer::OAIImageTemplatePowerShellCustomizer() {
    this->initializeModel();
}

OAIImageTemplatePowerShellCustomizer::~OAIImageTemplatePowerShellCustomizer() {}

void OAIImageTemplatePowerShellCustomizer::initializeModel() {

    m_r_inline_isSet = false;
    m_r_inline_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_valid_exit_codes_isSet = false;
    m_valid_exit_codes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImageTemplatePowerShellCustomizer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTemplatePowerShellCustomizer::fromJsonObject(QJsonObject json) {

    m_r_inline_isValid = ::OpenAPI::fromJsonValue(m_r_inline, json[QString("inline")]);
    m_r_inline_isSet = !json[QString("inline")].isNull() && m_r_inline_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_valid_exit_codes_isValid = ::OpenAPI::fromJsonValue(m_valid_exit_codes, json[QString("validExitCodes")]);
    m_valid_exit_codes_isSet = !json[QString("validExitCodes")].isNull() && m_valid_exit_codes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImageTemplatePowerShellCustomizer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTemplatePowerShellCustomizer::asJsonObject() const {
    QJsonObject obj;
    if (m_r_inline.size() > 0) {
        obj.insert(QString("inline"), ::OpenAPI::toJsonValue(m_r_inline));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_valid_exit_codes.size() > 0) {
        obj.insert(QString("validExitCodes"), ::OpenAPI::toJsonValue(m_valid_exit_codes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIImageTemplatePowerShellCustomizer::getRInline() const {
    return m_r_inline;
}
void OAIImageTemplatePowerShellCustomizer::setRInline(const QList<QString> &r_inline) {
    m_r_inline = r_inline;
    m_r_inline_isSet = true;
}

bool OAIImageTemplatePowerShellCustomizer::is_r_inline_Set() const{
    return m_r_inline_isSet;
}

bool OAIImageTemplatePowerShellCustomizer::is_r_inline_Valid() const{
    return m_r_inline_isValid;
}

QString OAIImageTemplatePowerShellCustomizer::getScript() const {
    return m_script;
}
void OAIImageTemplatePowerShellCustomizer::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIImageTemplatePowerShellCustomizer::is_script_Set() const{
    return m_script_isSet;
}

bool OAIImageTemplatePowerShellCustomizer::is_script_Valid() const{
    return m_script_isValid;
}

QList<qint32> OAIImageTemplatePowerShellCustomizer::getValidExitCodes() const {
    return m_valid_exit_codes;
}
void OAIImageTemplatePowerShellCustomizer::setValidExitCodes(const QList<qint32> &valid_exit_codes) {
    m_valid_exit_codes = valid_exit_codes;
    m_valid_exit_codes_isSet = true;
}

bool OAIImageTemplatePowerShellCustomizer::is_valid_exit_codes_Set() const{
    return m_valid_exit_codes_isSet;
}

bool OAIImageTemplatePowerShellCustomizer::is_valid_exit_codes_Valid() const{
    return m_valid_exit_codes_isValid;
}

QString OAIImageTemplatePowerShellCustomizer::getName() const {
    return m_name;
}
void OAIImageTemplatePowerShellCustomizer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageTemplatePowerShellCustomizer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageTemplatePowerShellCustomizer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageTemplatePowerShellCustomizer::getType() const {
    return m_type;
}
void OAIImageTemplatePowerShellCustomizer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImageTemplatePowerShellCustomizer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImageTemplatePowerShellCustomizer::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImageTemplatePowerShellCustomizer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_inline.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_exit_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTemplatePowerShellCustomizer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
