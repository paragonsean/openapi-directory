/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualMachineImageTemplateApi_H
#define OAI_OAIVirtualMachineImageTemplateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIImageTemplate.h"
#include "OAIImageTemplateListResult.h"
#include "OAIImageTemplateUpdateParameters.h"
#include "OAIRunOutput.h"
#include "OAIRunOutputCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualMachineImageTemplateApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualMachineImageTemplateApi(const int timeOut = 0);
    ~OAIVirtualMachineImageTemplateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    * @param[in]  parameters OAIImageTemplate [required]
    */
    virtual void virtualMachineImageTemplatesCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name, const OAIImageTemplate &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    */
    virtual void virtualMachineImageTemplatesDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    */
    virtual void virtualMachineImageTemplatesGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    * @param[in]  run_output_name QString [required]
    */
    virtual void virtualMachineImageTemplatesGetRunOutput(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name, const QString &run_output_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachineImageTemplatesList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void virtualMachineImageTemplatesListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    */
    virtual void virtualMachineImageTemplatesListRunOutputs(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    */
    virtual void virtualMachineImageTemplatesRun(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  image_template_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIImageTemplateUpdateParameters [required]
    */
    virtual void virtualMachineImageTemplatesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &image_template_name, const QString &api_version, const OAIImageTemplateUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualMachineImageTemplatesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplatesDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplatesGetCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplatesGetRunOutputCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplatesListCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplatesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplatesListRunOutputsCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplatesRunCallback(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplatesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualMachineImageTemplatesCreateOrUpdateSignal(OAIImageTemplate summary);
    void virtualMachineImageTemplatesDeleteSignal();
    void virtualMachineImageTemplatesGetSignal(OAIImageTemplate summary);
    void virtualMachineImageTemplatesGetRunOutputSignal(OAIRunOutput summary);
    void virtualMachineImageTemplatesListSignal(OAIImageTemplateListResult summary);
    void virtualMachineImageTemplatesListByResourceGroupSignal(OAIImageTemplateListResult summary);
    void virtualMachineImageTemplatesListRunOutputsSignal(OAIRunOutputCollection summary);
    void virtualMachineImageTemplatesRunSignal();
    void virtualMachineImageTemplatesUpdateSignal(OAIImageTemplate summary);


    void virtualMachineImageTemplatesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIImageTemplate summary);
    void virtualMachineImageTemplatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplatesGetSignalFull(OAIHttpRequestWorker *worker, OAIImageTemplate summary);
    void virtualMachineImageTemplatesGetRunOutputSignalFull(OAIHttpRequestWorker *worker, OAIRunOutput summary);
    void virtualMachineImageTemplatesListSignalFull(OAIHttpRequestWorker *worker, OAIImageTemplateListResult summary);
    void virtualMachineImageTemplatesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIImageTemplateListResult summary);
    void virtualMachineImageTemplatesListRunOutputsSignalFull(OAIHttpRequestWorker *worker, OAIRunOutputCollection summary);
    void virtualMachineImageTemplatesRunSignalFull(OAIHttpRequestWorker *worker);
    void virtualMachineImageTemplatesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIImageTemplate summary);

    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesCreateOrUpdateSignalError() instead")
    void virtualMachineImageTemplatesCreateOrUpdateSignalE(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesCreateOrUpdateSignalError(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesDeleteSignalError() instead")
    void virtualMachineImageTemplatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesGetSignalError() instead")
    void virtualMachineImageTemplatesGetSignalE(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesGetSignalError(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesGetRunOutputSignalError() instead")
    void virtualMachineImageTemplatesGetRunOutputSignalE(OAIRunOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesGetRunOutputSignalError(OAIRunOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesListSignalError() instead")
    void virtualMachineImageTemplatesListSignalE(OAIImageTemplateListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesListSignalError(OAIImageTemplateListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesListByResourceGroupSignalError() instead")
    void virtualMachineImageTemplatesListByResourceGroupSignalE(OAIImageTemplateListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesListByResourceGroupSignalError(OAIImageTemplateListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesListRunOutputsSignalError() instead")
    void virtualMachineImageTemplatesListRunOutputsSignalE(OAIRunOutputCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesListRunOutputsSignalError(OAIRunOutputCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesRunSignalError() instead")
    void virtualMachineImageTemplatesRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesUpdateSignalError() instead")
    void virtualMachineImageTemplatesUpdateSignalE(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesUpdateSignalError(OAIImageTemplate summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesCreateOrUpdateSignalErrorFull() instead")
    void virtualMachineImageTemplatesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesDeleteSignalErrorFull() instead")
    void virtualMachineImageTemplatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesGetSignalErrorFull() instead")
    void virtualMachineImageTemplatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesGetRunOutputSignalErrorFull() instead")
    void virtualMachineImageTemplatesGetRunOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesGetRunOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesListSignalErrorFull() instead")
    void virtualMachineImageTemplatesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesListByResourceGroupSignalErrorFull() instead")
    void virtualMachineImageTemplatesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesListRunOutputsSignalErrorFull() instead")
    void virtualMachineImageTemplatesListRunOutputsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesListRunOutputsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesRunSignalErrorFull() instead")
    void virtualMachineImageTemplatesRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualMachineImageTemplatesUpdateSignalErrorFull() instead")
    void virtualMachineImageTemplatesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualMachineImageTemplatesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
