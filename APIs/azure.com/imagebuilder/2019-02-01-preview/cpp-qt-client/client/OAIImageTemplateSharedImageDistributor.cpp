/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTemplateSharedImageDistributor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTemplateSharedImageDistributor::OAIImageTemplateSharedImageDistributor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTemplateSharedImageDistributor::OAIImageTemplateSharedImageDistributor() {
    this->initializeModel();
}

OAIImageTemplateSharedImageDistributor::~OAIImageTemplateSharedImageDistributor() {}

void OAIImageTemplateSharedImageDistributor::initializeModel() {

    m_gallery_image_id_isSet = false;
    m_gallery_image_id_isValid = false;

    m_replication_regions_isSet = false;
    m_replication_regions_isValid = false;

    m_artifact_tags_isSet = false;
    m_artifact_tags_isValid = false;

    m_run_output_name_isSet = false;
    m_run_output_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImageTemplateSharedImageDistributor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTemplateSharedImageDistributor::fromJsonObject(QJsonObject json) {

    m_gallery_image_id_isValid = ::OpenAPI::fromJsonValue(m_gallery_image_id, json[QString("galleryImageId")]);
    m_gallery_image_id_isSet = !json[QString("galleryImageId")].isNull() && m_gallery_image_id_isValid;

    m_replication_regions_isValid = ::OpenAPI::fromJsonValue(m_replication_regions, json[QString("replicationRegions")]);
    m_replication_regions_isSet = !json[QString("replicationRegions")].isNull() && m_replication_regions_isValid;

    m_artifact_tags_isValid = ::OpenAPI::fromJsonValue(m_artifact_tags, json[QString("artifactTags")]);
    m_artifact_tags_isSet = !json[QString("artifactTags")].isNull() && m_artifact_tags_isValid;

    m_run_output_name_isValid = ::OpenAPI::fromJsonValue(m_run_output_name, json[QString("runOutputName")]);
    m_run_output_name_isSet = !json[QString("runOutputName")].isNull() && m_run_output_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImageTemplateSharedImageDistributor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTemplateSharedImageDistributor::asJsonObject() const {
    QJsonObject obj;
    if (m_gallery_image_id_isSet) {
        obj.insert(QString("galleryImageId"), ::OpenAPI::toJsonValue(m_gallery_image_id));
    }
    if (m_replication_regions.size() > 0) {
        obj.insert(QString("replicationRegions"), ::OpenAPI::toJsonValue(m_replication_regions));
    }
    if (m_artifact_tags.size() > 0) {
        obj.insert(QString("artifactTags"), ::OpenAPI::toJsonValue(m_artifact_tags));
    }
    if (m_run_output_name_isSet) {
        obj.insert(QString("runOutputName"), ::OpenAPI::toJsonValue(m_run_output_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIImageTemplateSharedImageDistributor::getGalleryImageId() const {
    return m_gallery_image_id;
}
void OAIImageTemplateSharedImageDistributor::setGalleryImageId(const QString &gallery_image_id) {
    m_gallery_image_id = gallery_image_id;
    m_gallery_image_id_isSet = true;
}

bool OAIImageTemplateSharedImageDistributor::is_gallery_image_id_Set() const{
    return m_gallery_image_id_isSet;
}

bool OAIImageTemplateSharedImageDistributor::is_gallery_image_id_Valid() const{
    return m_gallery_image_id_isValid;
}

QList<QString> OAIImageTemplateSharedImageDistributor::getReplicationRegions() const {
    return m_replication_regions;
}
void OAIImageTemplateSharedImageDistributor::setReplicationRegions(const QList<QString> &replication_regions) {
    m_replication_regions = replication_regions;
    m_replication_regions_isSet = true;
}

bool OAIImageTemplateSharedImageDistributor::is_replication_regions_Set() const{
    return m_replication_regions_isSet;
}

bool OAIImageTemplateSharedImageDistributor::is_replication_regions_Valid() const{
    return m_replication_regions_isValid;
}

QMap<QString, QString> OAIImageTemplateSharedImageDistributor::getArtifactTags() const {
    return m_artifact_tags;
}
void OAIImageTemplateSharedImageDistributor::setArtifactTags(const QMap<QString, QString> &artifact_tags) {
    m_artifact_tags = artifact_tags;
    m_artifact_tags_isSet = true;
}

bool OAIImageTemplateSharedImageDistributor::is_artifact_tags_Set() const{
    return m_artifact_tags_isSet;
}

bool OAIImageTemplateSharedImageDistributor::is_artifact_tags_Valid() const{
    return m_artifact_tags_isValid;
}

QString OAIImageTemplateSharedImageDistributor::getRunOutputName() const {
    return m_run_output_name;
}
void OAIImageTemplateSharedImageDistributor::setRunOutputName(const QString &run_output_name) {
    m_run_output_name = run_output_name;
    m_run_output_name_isSet = true;
}

bool OAIImageTemplateSharedImageDistributor::is_run_output_name_Set() const{
    return m_run_output_name_isSet;
}

bool OAIImageTemplateSharedImageDistributor::is_run_output_name_Valid() const{
    return m_run_output_name_isValid;
}

QString OAIImageTemplateSharedImageDistributor::getType() const {
    return m_type;
}
void OAIImageTemplateSharedImageDistributor::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImageTemplateSharedImageDistributor::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImageTemplateSharedImageDistributor::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImageTemplateSharedImageDistributor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gallery_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_output_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTemplateSharedImageDistributor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gallery_image_id_isValid && m_replication_regions_isValid && m_run_output_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
