/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTemplateManagedImageDistributor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTemplateManagedImageDistributor::OAIImageTemplateManagedImageDistributor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTemplateManagedImageDistributor::OAIImageTemplateManagedImageDistributor() {
    this->initializeModel();
}

OAIImageTemplateManagedImageDistributor::~OAIImageTemplateManagedImageDistributor() {}

void OAIImageTemplateManagedImageDistributor::initializeModel() {

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_artifact_tags_isSet = false;
    m_artifact_tags_isValid = false;

    m_run_output_name_isSet = false;
    m_run_output_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImageTemplateManagedImageDistributor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTemplateManagedImageDistributor::fromJsonObject(QJsonObject json) {

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_artifact_tags_isValid = ::OpenAPI::fromJsonValue(m_artifact_tags, json[QString("artifactTags")]);
    m_artifact_tags_isSet = !json[QString("artifactTags")].isNull() && m_artifact_tags_isValid;

    m_run_output_name_isValid = ::OpenAPI::fromJsonValue(m_run_output_name, json[QString("runOutputName")]);
    m_run_output_name_isSet = !json[QString("runOutputName")].isNull() && m_run_output_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImageTemplateManagedImageDistributor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTemplateManagedImageDistributor::asJsonObject() const {
    QJsonObject obj;
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_artifact_tags.size() > 0) {
        obj.insert(QString("artifactTags"), ::OpenAPI::toJsonValue(m_artifact_tags));
    }
    if (m_run_output_name_isSet) {
        obj.insert(QString("runOutputName"), ::OpenAPI::toJsonValue(m_run_output_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIImageTemplateManagedImageDistributor::getImageId() const {
    return m_image_id;
}
void OAIImageTemplateManagedImageDistributor::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIImageTemplateManagedImageDistributor::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIImageTemplateManagedImageDistributor::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAIImageTemplateManagedImageDistributor::getLocation() const {
    return m_location;
}
void OAIImageTemplateManagedImageDistributor::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIImageTemplateManagedImageDistributor::is_location_Set() const{
    return m_location_isSet;
}

bool OAIImageTemplateManagedImageDistributor::is_location_Valid() const{
    return m_location_isValid;
}

QMap<QString, QString> OAIImageTemplateManagedImageDistributor::getArtifactTags() const {
    return m_artifact_tags;
}
void OAIImageTemplateManagedImageDistributor::setArtifactTags(const QMap<QString, QString> &artifact_tags) {
    m_artifact_tags = artifact_tags;
    m_artifact_tags_isSet = true;
}

bool OAIImageTemplateManagedImageDistributor::is_artifact_tags_Set() const{
    return m_artifact_tags_isSet;
}

bool OAIImageTemplateManagedImageDistributor::is_artifact_tags_Valid() const{
    return m_artifact_tags_isValid;
}

QString OAIImageTemplateManagedImageDistributor::getRunOutputName() const {
    return m_run_output_name;
}
void OAIImageTemplateManagedImageDistributor::setRunOutputName(const QString &run_output_name) {
    m_run_output_name = run_output_name;
    m_run_output_name_isSet = true;
}

bool OAIImageTemplateManagedImageDistributor::is_run_output_name_Set() const{
    return m_run_output_name_isSet;
}

bool OAIImageTemplateManagedImageDistributor::is_run_output_name_Valid() const{
    return m_run_output_name_isValid;
}

QString OAIImageTemplateManagedImageDistributor::getType() const {
    return m_type;
}
void OAIImageTemplateManagedImageDistributor::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImageTemplateManagedImageDistributor::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImageTemplateManagedImageDistributor::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImageTemplateManagedImageDistributor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_output_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTemplateManagedImageDistributor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_id_isValid && m_location_isValid && m_run_output_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
