/*
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageTemplateCustomizer;
import org.openapitools.client.model.ImageTemplateDistributor;
import org.openapitools.client.model.ImageTemplateLastRunStatus;
import org.openapitools.client.model.ImageTemplateSource;
import org.openapitools.client.model.ProvisioningError;
import org.openapitools.client.model.ProvisioningState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImageTemplateProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:43.767960-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageTemplateProperties {
  public static final String SERIALIZED_NAME_CUSTOMIZE = "customize";
  @SerializedName(SERIALIZED_NAME_CUSTOMIZE)
  private List<ImageTemplateCustomizer> customize = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISTRIBUTE = "distribute";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTE)
  private List<ImageTemplateDistributor> distribute = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_RUN_STATUS = "lastRunStatus";
  @SerializedName(SERIALIZED_NAME_LAST_RUN_STATUS)
  private ImageTemplateLastRunStatus lastRunStatus;

  public static final String SERIALIZED_NAME_PROVISIONING_ERROR = "provisioningError";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_ERROR)
  private ProvisioningError provisioningError;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ImageTemplateSource source;

  public ImageTemplateProperties() {
  }

  public ImageTemplateProperties customize(List<ImageTemplateCustomizer> customize) {
    this.customize = customize;
    return this;
  }

  public ImageTemplateProperties addCustomizeItem(ImageTemplateCustomizer customizeItem) {
    if (this.customize == null) {
      this.customize = new ArrayList<>();
    }
    this.customize.add(customizeItem);
    return this;
  }

  /**
   * Specifies the properties used to describe the customization steps of the image, like Image source etc
   * @return customize
   */
  @javax.annotation.Nullable
  public List<ImageTemplateCustomizer> getCustomize() {
    return customize;
  }

  public void setCustomize(List<ImageTemplateCustomizer> customize) {
    this.customize = customize;
  }


  public ImageTemplateProperties distribute(List<ImageTemplateDistributor> distribute) {
    this.distribute = distribute;
    return this;
  }

  public ImageTemplateProperties addDistributeItem(ImageTemplateDistributor distributeItem) {
    if (this.distribute == null) {
      this.distribute = new ArrayList<>();
    }
    this.distribute.add(distributeItem);
    return this;
  }

  /**
   * The distribution targets where the image output needs to go to.
   * @return distribute
   */
  @javax.annotation.Nonnull
  public List<ImageTemplateDistributor> getDistribute() {
    return distribute;
  }

  public void setDistribute(List<ImageTemplateDistributor> distribute) {
    this.distribute = distribute;
  }


  public ImageTemplateProperties lastRunStatus(ImageTemplateLastRunStatus lastRunStatus) {
    this.lastRunStatus = lastRunStatus;
    return this;
  }

  /**
   * Get lastRunStatus
   * @return lastRunStatus
   */
  @javax.annotation.Nullable
  public ImageTemplateLastRunStatus getLastRunStatus() {
    return lastRunStatus;
  }

  public void setLastRunStatus(ImageTemplateLastRunStatus lastRunStatus) {
    this.lastRunStatus = lastRunStatus;
  }


  public ImageTemplateProperties provisioningError(ProvisioningError provisioningError) {
    this.provisioningError = provisioningError;
    return this;
  }

  /**
   * Get provisioningError
   * @return provisioningError
   */
  @javax.annotation.Nullable
  public ProvisioningError getProvisioningError() {
    return provisioningError;
  }

  public void setProvisioningError(ProvisioningError provisioningError) {
    this.provisioningError = provisioningError;
  }


  public ImageTemplateProperties provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ImageTemplateProperties source(ImageTemplateSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public ImageTemplateSource getSource() {
    return source;
  }

  public void setSource(ImageTemplateSource source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageTemplateProperties imageTemplateProperties = (ImageTemplateProperties) o;
    return Objects.equals(this.customize, imageTemplateProperties.customize) &&
        Objects.equals(this.distribute, imageTemplateProperties.distribute) &&
        Objects.equals(this.lastRunStatus, imageTemplateProperties.lastRunStatus) &&
        Objects.equals(this.provisioningError, imageTemplateProperties.provisioningError) &&
        Objects.equals(this.provisioningState, imageTemplateProperties.provisioningState) &&
        Objects.equals(this.source, imageTemplateProperties.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customize, distribute, lastRunStatus, provisioningError, provisioningState, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageTemplateProperties {\n");
    sb.append("    customize: ").append(toIndentedString(customize)).append("\n");
    sb.append("    distribute: ").append(toIndentedString(distribute)).append("\n");
    sb.append("    lastRunStatus: ").append(toIndentedString(lastRunStatus)).append("\n");
    sb.append("    provisioningError: ").append(toIndentedString(provisioningError)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customize");
    openapiFields.add("distribute");
    openapiFields.add("lastRunStatus");
    openapiFields.add("provisioningError");
    openapiFields.add("provisioningState");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("distribute");
    openapiRequiredFields.add("source");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageTemplateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageTemplateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageTemplateProperties is not found in the empty JSON string", ImageTemplateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageTemplateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageTemplateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImageTemplateProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customize") != null && !jsonObj.get("customize").isJsonNull()) {
        JsonArray jsonArraycustomize = jsonObj.getAsJsonArray("customize");
        if (jsonArraycustomize != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customize").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customize` to be an array in the JSON string but got `%s`", jsonObj.get("customize").toString()));
          }

          // validate the optional field `customize` (array)
          for (int i = 0; i < jsonArraycustomize.size(); i++) {
            ImageTemplateCustomizer.validateJsonElement(jsonArraycustomize.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("distribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `distribute` to be an array in the JSON string but got `%s`", jsonObj.get("distribute").toString()));
      }

      JsonArray jsonArraydistribute = jsonObj.getAsJsonArray("distribute");
      // validate the required field `distribute` (array)
      for (int i = 0; i < jsonArraydistribute.size(); i++) {
        ImageTemplateDistributor.validateJsonElement(jsonArraydistribute.get(i));
      };
      // validate the optional field `lastRunStatus`
      if (jsonObj.get("lastRunStatus") != null && !jsonObj.get("lastRunStatus").isJsonNull()) {
        ImageTemplateLastRunStatus.validateJsonElement(jsonObj.get("lastRunStatus"));
      }
      // validate the optional field `provisioningError`
      if (jsonObj.get("provisioningError") != null && !jsonObj.get("provisioningError").isJsonNull()) {
        ProvisioningError.validateJsonElement(jsonObj.get("provisioningError"));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the required field `source`
      ImageTemplateSource.validateJsonElement(jsonObj.get("source"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageTemplateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageTemplateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageTemplateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageTemplateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageTemplateProperties>() {
           @Override
           public void write(JsonWriter out, ImageTemplateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageTemplateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageTemplateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageTemplateProperties
   * @throws IOException if the JSON string is invalid with respect to ImageTemplateProperties
   */
  public static ImageTemplateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageTemplateProperties.class);
  }

  /**
   * Convert an instance of ImageTemplateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

