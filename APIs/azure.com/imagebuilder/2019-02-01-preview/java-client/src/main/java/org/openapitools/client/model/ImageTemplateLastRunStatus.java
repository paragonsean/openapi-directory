/*
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImageTemplateLastRunStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:43.767960-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageTemplateLastRunStatus {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  /**
   * State of the last run
   */
  @JsonAdapter(RunStateEnum.Adapter.class)
  public enum RunStateEnum {
    RUNNING("Running"),
    
    SUCCEEDED("Succeeded"),
    
    PARTIALLY_SUCCEEDED("PartiallySucceeded"),
    
    FAILED("Failed");

    private String value;

    RunStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RunStateEnum fromValue(String value) {
      for (RunStateEnum b : RunStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RunStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RunStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RunStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RunStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RunStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RUN_STATE = "runState";
  @SerializedName(SERIALIZED_NAME_RUN_STATE)
  private RunStateEnum runState;

  /**
   * Sub-state of the last run
   */
  @JsonAdapter(RunSubStateEnum.Adapter.class)
  public enum RunSubStateEnum {
    QUEUED("Queued"),
    
    BUILDING("Building"),
    
    CUSTOMIZING("Customizing"),
    
    DISTRIBUTING("Distributing");

    private String value;

    RunSubStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RunSubStateEnum fromValue(String value) {
      for (RunSubStateEnum b : RunSubStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RunSubStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RunSubStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RunSubStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RunSubStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RunSubStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RUN_SUB_STATE = "runSubState";
  @SerializedName(SERIALIZED_NAME_RUN_SUB_STATE)
  private RunSubStateEnum runSubState;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public ImageTemplateLastRunStatus() {
  }

  public ImageTemplateLastRunStatus endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End time of the last run (UTC)
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ImageTemplateLastRunStatus message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Verbose information about the last run state
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ImageTemplateLastRunStatus runState(RunStateEnum runState) {
    this.runState = runState;
    return this;
  }

  /**
   * State of the last run
   * @return runState
   */
  @javax.annotation.Nullable
  public RunStateEnum getRunState() {
    return runState;
  }

  public void setRunState(RunStateEnum runState) {
    this.runState = runState;
  }


  public ImageTemplateLastRunStatus runSubState(RunSubStateEnum runSubState) {
    this.runSubState = runSubState;
    return this;
  }

  /**
   * Sub-state of the last run
   * @return runSubState
   */
  @javax.annotation.Nullable
  public RunSubStateEnum getRunSubState() {
    return runSubState;
  }

  public void setRunSubState(RunSubStateEnum runSubState) {
    this.runSubState = runSubState;
  }


  public ImageTemplateLastRunStatus startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time of the last run (UTC)
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageTemplateLastRunStatus imageTemplateLastRunStatus = (ImageTemplateLastRunStatus) o;
    return Objects.equals(this.endTime, imageTemplateLastRunStatus.endTime) &&
        Objects.equals(this.message, imageTemplateLastRunStatus.message) &&
        Objects.equals(this.runState, imageTemplateLastRunStatus.runState) &&
        Objects.equals(this.runSubState, imageTemplateLastRunStatus.runSubState) &&
        Objects.equals(this.startTime, imageTemplateLastRunStatus.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, message, runState, runSubState, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageTemplateLastRunStatus {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    runState: ").append(toIndentedString(runState)).append("\n");
    sb.append("    runSubState: ").append(toIndentedString(runSubState)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("message");
    openapiFields.add("runState");
    openapiFields.add("runSubState");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageTemplateLastRunStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageTemplateLastRunStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageTemplateLastRunStatus is not found in the empty JSON string", ImageTemplateLastRunStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageTemplateLastRunStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageTemplateLastRunStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("runState") != null && !jsonObj.get("runState").isJsonNull()) && !jsonObj.get("runState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runState").toString()));
      }
      // validate the optional field `runState`
      if (jsonObj.get("runState") != null && !jsonObj.get("runState").isJsonNull()) {
        RunStateEnum.validateJsonElement(jsonObj.get("runState"));
      }
      if ((jsonObj.get("runSubState") != null && !jsonObj.get("runSubState").isJsonNull()) && !jsonObj.get("runSubState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runSubState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runSubState").toString()));
      }
      // validate the optional field `runSubState`
      if (jsonObj.get("runSubState") != null && !jsonObj.get("runSubState").isJsonNull()) {
        RunSubStateEnum.validateJsonElement(jsonObj.get("runSubState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageTemplateLastRunStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageTemplateLastRunStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageTemplateLastRunStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageTemplateLastRunStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageTemplateLastRunStatus>() {
           @Override
           public void write(JsonWriter out, ImageTemplateLastRunStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageTemplateLastRunStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageTemplateLastRunStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageTemplateLastRunStatus
   * @throws IOException if the JSON string is invalid with respect to ImageTemplateLastRunStatus
   */
  public static ImageTemplateLastRunStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageTemplateLastRunStatus.class);
  }

  /**
   * Convert an instance of ImageTemplateLastRunStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

