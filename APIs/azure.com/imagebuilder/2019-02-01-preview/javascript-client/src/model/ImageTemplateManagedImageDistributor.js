/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageTemplateDistributor from './ImageTemplateDistributor';

/**
 * The ImageTemplateManagedImageDistributor model module.
 * @module model/ImageTemplateManagedImageDistributor
 * @version 2019-02-01-preview
 */
class ImageTemplateManagedImageDistributor {
    /**
     * Constructs a new <code>ImageTemplateManagedImageDistributor</code>.
     * Distribute as a Managed Disk Image.
     * @alias module:model/ImageTemplateManagedImageDistributor
     * @extends module:model/ImageTemplateDistributor
     * @implements module:model/ImageTemplateDistributor
     * @param runOutputName {String} The name to be used for the associated RunOutput.
     * @param type {String} Type of distribution.
     */
    constructor(runOutputName, type) { 
        ImageTemplateDistributor.initialize(this, runOutputName, type);
        ImageTemplateManagedImageDistributor.initialize(this, runOutputName, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, runOutputName, type) { 
        obj['imageId'] = imageId;
        obj['location'] = location;
    }

    /**
     * Constructs a <code>ImageTemplateManagedImageDistributor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageTemplateManagedImageDistributor} obj Optional instance to populate.
     * @return {module:model/ImageTemplateManagedImageDistributor} The populated <code>ImageTemplateManagedImageDistributor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageTemplateManagedImageDistributor();
            ImageTemplateDistributor.constructFromObject(data, obj);
            ImageTemplateDistributor.constructFromObject(data, obj);

            if (data.hasOwnProperty('imageId')) {
                obj['imageId'] = ApiClient.convertToType(data['imageId'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageTemplateManagedImageDistributor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageTemplateManagedImageDistributor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageTemplateManagedImageDistributor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['imageId'] && !(typeof data['imageId'] === 'string' || data['imageId'] instanceof String)) {
            throw new Error("Expected the field `imageId` to be a primitive type in the JSON string but got " + data['imageId']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }

        return true;
    }


}

ImageTemplateManagedImageDistributor.RequiredProperties = ["imageId", "location", "runOutputName", "type"];

/**
 * Resource Id of the Managed Disk Image
 * @member {String} imageId
 */
ImageTemplateManagedImageDistributor.prototype['imageId'] = undefined;

/**
 * Azure location for the image, should match if image already exists
 * @member {String} location
 */
ImageTemplateManagedImageDistributor.prototype['location'] = undefined;


// Implement ImageTemplateDistributor interface:
/**
 * Tags that will be applied to the artifact once it has been created/updated by the distributor.
 * @member {Object.<String, String>} artifactTags
 */
ImageTemplateDistributor.prototype['artifactTags'] = undefined;
/**
 * The name to be used for the associated RunOutput.
 * @member {String} runOutputName
 */
ImageTemplateDistributor.prototype['runOutputName'] = undefined;
/**
 * Type of distribution.
 * @member {String} type
 */
ImageTemplateDistributor.prototype['type'] = undefined;




export default ImageTemplateManagedImageDistributor;

