/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageTemplateSource from './ImageTemplateSource';

/**
 * The ImageTemplateManagedImageSource model module.
 * @module model/ImageTemplateManagedImageSource
 * @version 2019-02-01-preview
 */
class ImageTemplateManagedImageSource {
    /**
     * Constructs a new <code>ImageTemplateManagedImageSource</code>.
     * Describes an image source that is a managed image in customer subscription.
     * @alias module:model/ImageTemplateManagedImageSource
     * @extends module:model/ImageTemplateSource
     * @implements module:model/ImageTemplateSource
     * @param type {String} Specifies the type of source image you want to start with.
     */
    constructor(type) { 
        ImageTemplateSource.initialize(this, type);
        ImageTemplateManagedImageSource.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['imageId'] = imageId;
    }

    /**
     * Constructs a <code>ImageTemplateManagedImageSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageTemplateManagedImageSource} obj Optional instance to populate.
     * @return {module:model/ImageTemplateManagedImageSource} The populated <code>ImageTemplateManagedImageSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageTemplateManagedImageSource();
            ImageTemplateSource.constructFromObject(data, obj);
            ImageTemplateSource.constructFromObject(data, obj);

            if (data.hasOwnProperty('imageId')) {
                obj['imageId'] = ApiClient.convertToType(data['imageId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageTemplateManagedImageSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageTemplateManagedImageSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageTemplateManagedImageSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['imageId'] && !(typeof data['imageId'] === 'string' || data['imageId'] instanceof String)) {
            throw new Error("Expected the field `imageId` to be a primitive type in the JSON string but got " + data['imageId']);
        }

        return true;
    }


}

ImageTemplateManagedImageSource.RequiredProperties = ["imageId", "type"];

/**
 * ARM resource id of the managed image in customer subscription
 * @member {String} imageId
 */
ImageTemplateManagedImageSource.prototype['imageId'] = undefined;


// Implement ImageTemplateSource interface:
/**
 * Specifies the type of source image you want to start with.
 * @member {String} type
 */
ImageTemplateSource.prototype['type'] = undefined;




export default ImageTemplateManagedImageSource;

