# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ImageTemplateDistributor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_tags: Dict[str, str]=None, run_output_name: str=None, type: str=None):
        """ImageTemplateDistributor - a model defined in OpenAPI

        :param artifact_tags: The artifact_tags of this ImageTemplateDistributor.
        :param run_output_name: The run_output_name of this ImageTemplateDistributor.
        :param type: The type of this ImageTemplateDistributor.
        """
        self.openapi_types = {
            'artifact_tags': Dict[str, str],
            'run_output_name': str,
            'type': str
        }

        self.attribute_map = {
            'artifact_tags': 'artifactTags',
            'run_output_name': 'runOutputName',
            'type': 'type'
        }

        self._artifact_tags = artifact_tags
        self._run_output_name = run_output_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageTemplateDistributor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageTemplateDistributor of this ImageTemplateDistributor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_tags(self):
        """Gets the artifact_tags of this ImageTemplateDistributor.

        Tags that will be applied to the artifact once it has been created/updated by the distributor.

        :return: The artifact_tags of this ImageTemplateDistributor.
        :rtype: Dict[str, str]
        """
        return self._artifact_tags

    @artifact_tags.setter
    def artifact_tags(self, artifact_tags):
        """Sets the artifact_tags of this ImageTemplateDistributor.

        Tags that will be applied to the artifact once it has been created/updated by the distributor.

        :param artifact_tags: The artifact_tags of this ImageTemplateDistributor.
        :type artifact_tags: Dict[str, str]
        """

        self._artifact_tags = artifact_tags

    @property
    def run_output_name(self):
        """Gets the run_output_name of this ImageTemplateDistributor.

        The name to be used for the associated RunOutput.

        :return: The run_output_name of this ImageTemplateDistributor.
        :rtype: str
        """
        return self._run_output_name

    @run_output_name.setter
    def run_output_name(self, run_output_name):
        """Sets the run_output_name of this ImageTemplateDistributor.

        The name to be used for the associated RunOutput.

        :param run_output_name: The run_output_name of this ImageTemplateDistributor.
        :type run_output_name: str
        """
        if run_output_name is None:
            raise ValueError("Invalid value for `run_output_name`, must not be `None`")
        if run_output_name is not None and not re.search(r'^[A-Za-z0-9-_]{1,64}$', run_output_name):
            raise ValueError("Invalid value for `run_output_name`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{1,64}$/`")

        self._run_output_name = run_output_name

    @property
    def type(self):
        """Gets the type of this ImageTemplateDistributor.

        Type of distribution.

        :return: The type of this ImageTemplateDistributor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageTemplateDistributor.

        Type of distribution.

        :param type: The type of this ImageTemplateDistributor.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
