# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_template_distributor import ImageTemplateDistributor
import re
from openapi_server import util


class ImageTemplateManagedImageDistributor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_id: str=None, location: str=None, artifact_tags: Dict[str, str]=None, run_output_name: str=None, type: str=None):
        """ImageTemplateManagedImageDistributor - a model defined in OpenAPI

        :param image_id: The image_id of this ImageTemplateManagedImageDistributor.
        :param location: The location of this ImageTemplateManagedImageDistributor.
        :param artifact_tags: The artifact_tags of this ImageTemplateManagedImageDistributor.
        :param run_output_name: The run_output_name of this ImageTemplateManagedImageDistributor.
        :param type: The type of this ImageTemplateManagedImageDistributor.
        """
        self.openapi_types = {
            'image_id': str,
            'location': str,
            'artifact_tags': Dict[str, str],
            'run_output_name': str,
            'type': str
        }

        self.attribute_map = {
            'image_id': 'imageId',
            'location': 'location',
            'artifact_tags': 'artifactTags',
            'run_output_name': 'runOutputName',
            'type': 'type'
        }

        self._image_id = image_id
        self._location = location
        self._artifact_tags = artifact_tags
        self._run_output_name = run_output_name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageTemplateManagedImageDistributor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageTemplateManagedImageDistributor of this ImageTemplateManagedImageDistributor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_id(self):
        """Gets the image_id of this ImageTemplateManagedImageDistributor.

        Resource Id of the Managed Disk Image

        :return: The image_id of this ImageTemplateManagedImageDistributor.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ImageTemplateManagedImageDistributor.

        Resource Id of the Managed Disk Image

        :param image_id: The image_id of this ImageTemplateManagedImageDistributor.
        :type image_id: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")

        self._image_id = image_id

    @property
    def location(self):
        """Gets the location of this ImageTemplateManagedImageDistributor.

        Azure location for the image, should match if image already exists

        :return: The location of this ImageTemplateManagedImageDistributor.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ImageTemplateManagedImageDistributor.

        Azure location for the image, should match if image already exists

        :param location: The location of this ImageTemplateManagedImageDistributor.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def artifact_tags(self):
        """Gets the artifact_tags of this ImageTemplateManagedImageDistributor.

        Tags that will be applied to the artifact once it has been created/updated by the distributor.

        :return: The artifact_tags of this ImageTemplateManagedImageDistributor.
        :rtype: Dict[str, str]
        """
        return self._artifact_tags

    @artifact_tags.setter
    def artifact_tags(self, artifact_tags):
        """Sets the artifact_tags of this ImageTemplateManagedImageDistributor.

        Tags that will be applied to the artifact once it has been created/updated by the distributor.

        :param artifact_tags: The artifact_tags of this ImageTemplateManagedImageDistributor.
        :type artifact_tags: Dict[str, str]
        """

        self._artifact_tags = artifact_tags

    @property
    def run_output_name(self):
        """Gets the run_output_name of this ImageTemplateManagedImageDistributor.

        The name to be used for the associated RunOutput.

        :return: The run_output_name of this ImageTemplateManagedImageDistributor.
        :rtype: str
        """
        return self._run_output_name

    @run_output_name.setter
    def run_output_name(self, run_output_name):
        """Sets the run_output_name of this ImageTemplateManagedImageDistributor.

        The name to be used for the associated RunOutput.

        :param run_output_name: The run_output_name of this ImageTemplateManagedImageDistributor.
        :type run_output_name: str
        """
        if run_output_name is None:
            raise ValueError("Invalid value for `run_output_name`, must not be `None`")
        if run_output_name is not None and not re.search(r'^[A-Za-z0-9-_]{1,64}$', run_output_name):
            raise ValueError("Invalid value for `run_output_name`, must be a follow pattern or equal to `/^[A-Za-z0-9-_]{1,64}$/`")

        self._run_output_name = run_output_name

    @property
    def type(self):
        """Gets the type of this ImageTemplateManagedImageDistributor.

        Type of distribution.

        :return: The type of this ImageTemplateManagedImageDistributor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageTemplateManagedImageDistributor.

        Type of distribution.

        :param type: The type of this ImageTemplateManagedImageDistributor.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
