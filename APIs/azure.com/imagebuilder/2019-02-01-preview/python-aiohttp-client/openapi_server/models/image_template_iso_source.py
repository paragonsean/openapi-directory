# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_template_source import ImageTemplateSource
from openapi_server import util


class ImageTemplateIsoSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sha256_checksum: str=None, source_uri: str=None, type: str=None):
        """ImageTemplateIsoSource - a model defined in OpenAPI

        :param sha256_checksum: The sha256_checksum of this ImageTemplateIsoSource.
        :param source_uri: The source_uri of this ImageTemplateIsoSource.
        :param type: The type of this ImageTemplateIsoSource.
        """
        self.openapi_types = {
            'sha256_checksum': str,
            'source_uri': str,
            'type': str
        }

        self.attribute_map = {
            'sha256_checksum': 'sha256Checksum',
            'source_uri': 'sourceURI',
            'type': 'type'
        }

        self._sha256_checksum = sha256_checksum
        self._source_uri = source_uri
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageTemplateIsoSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageTemplateIsoSource of this ImageTemplateIsoSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sha256_checksum(self):
        """Gets the sha256_checksum of this ImageTemplateIsoSource.

        SHA256 Checksum of the ISO image.

        :return: The sha256_checksum of this ImageTemplateIsoSource.
        :rtype: str
        """
        return self._sha256_checksum

    @sha256_checksum.setter
    def sha256_checksum(self, sha256_checksum):
        """Sets the sha256_checksum of this ImageTemplateIsoSource.

        SHA256 Checksum of the ISO image.

        :param sha256_checksum: The sha256_checksum of this ImageTemplateIsoSource.
        :type sha256_checksum: str
        """
        if sha256_checksum is None:
            raise ValueError("Invalid value for `sha256_checksum`, must not be `None`")

        self._sha256_checksum = sha256_checksum

    @property
    def source_uri(self):
        """Gets the source_uri of this ImageTemplateIsoSource.

        URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.

        :return: The source_uri of this ImageTemplateIsoSource.
        :rtype: str
        """
        return self._source_uri

    @source_uri.setter
    def source_uri(self, source_uri):
        """Sets the source_uri of this ImageTemplateIsoSource.

        URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.

        :param source_uri: The source_uri of this ImageTemplateIsoSource.
        :type source_uri: str
        """
        if source_uri is None:
            raise ValueError("Invalid value for `source_uri`, must not be `None`")

        self._source_uri = source_uri

    @property
    def type(self):
        """Gets the type of this ImageTemplateIsoSource.

        Specifies the type of source image you want to start with.

        :return: The type of this ImageTemplateIsoSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageTemplateIsoSource.

        Specifies the type of source image you want to start with.

        :param type: The type of this ImageTemplateIsoSource.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
