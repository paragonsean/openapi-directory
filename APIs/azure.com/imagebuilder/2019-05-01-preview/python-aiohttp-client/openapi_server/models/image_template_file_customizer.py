# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_template_customizer import ImageTemplateCustomizer
from openapi_server import util


class ImageTemplateFileCustomizer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: str=None, sha256_checksum: str=None, source_uri: str=None, name: str=None, type: str=None):
        """ImageTemplateFileCustomizer - a model defined in OpenAPI

        :param destination: The destination of this ImageTemplateFileCustomizer.
        :param sha256_checksum: The sha256_checksum of this ImageTemplateFileCustomizer.
        :param source_uri: The source_uri of this ImageTemplateFileCustomizer.
        :param name: The name of this ImageTemplateFileCustomizer.
        :param type: The type of this ImageTemplateFileCustomizer.
        """
        self.openapi_types = {
            'destination': str,
            'sha256_checksum': str,
            'source_uri': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'destination': 'destination',
            'sha256_checksum': 'sha256Checksum',
            'source_uri': 'sourceUri',
            'name': 'name',
            'type': 'type'
        }

        self._destination = destination
        self._sha256_checksum = sha256_checksum
        self._source_uri = source_uri
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageTemplateFileCustomizer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageTemplateFileCustomizer of this ImageTemplateFileCustomizer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this ImageTemplateFileCustomizer.

        The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM

        :return: The destination of this ImageTemplateFileCustomizer.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ImageTemplateFileCustomizer.

        The absolute path to a file (with nested directory structures already created) where the file (from sourceUri) will be uploaded to in the VM

        :param destination: The destination of this ImageTemplateFileCustomizer.
        :type destination: str
        """

        self._destination = destination

    @property
    def sha256_checksum(self):
        """Gets the sha256_checksum of this ImageTemplateFileCustomizer.

        SHA256 checksum of the file provided in the sourceUri field above

        :return: The sha256_checksum of this ImageTemplateFileCustomizer.
        :rtype: str
        """
        return self._sha256_checksum

    @sha256_checksum.setter
    def sha256_checksum(self, sha256_checksum):
        """Sets the sha256_checksum of this ImageTemplateFileCustomizer.

        SHA256 checksum of the file provided in the sourceUri field above

        :param sha256_checksum: The sha256_checksum of this ImageTemplateFileCustomizer.
        :type sha256_checksum: str
        """

        self._sha256_checksum = sha256_checksum

    @property
    def source_uri(self):
        """Gets the source_uri of this ImageTemplateFileCustomizer.

        The URI of the file to be uploaded for customizing the VM. It can be a github link, SAS URI for Azure Storage, etc

        :return: The source_uri of this ImageTemplateFileCustomizer.
        :rtype: str
        """
        return self._source_uri

    @source_uri.setter
    def source_uri(self, source_uri):
        """Sets the source_uri of this ImageTemplateFileCustomizer.

        The URI of the file to be uploaded for customizing the VM. It can be a github link, SAS URI for Azure Storage, etc

        :param source_uri: The source_uri of this ImageTemplateFileCustomizer.
        :type source_uri: str
        """

        self._source_uri = source_uri

    @property
    def name(self):
        """Gets the name of this ImageTemplateFileCustomizer.

        Friendly Name to provide context on what this customization step does

        :return: The name of this ImageTemplateFileCustomizer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageTemplateFileCustomizer.

        Friendly Name to provide context on what this customization step does

        :param name: The name of this ImageTemplateFileCustomizer.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ImageTemplateFileCustomizer.

        The type of customization tool you want to use on the Image. For example, \"Shell\" can be shell customizer

        :return: The type of this ImageTemplateFileCustomizer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageTemplateFileCustomizer.

        The type of customization tool you want to use on the Image. For example, \"Shell\" can be shell customizer

        :param type: The type of this ImageTemplateFileCustomizer.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
