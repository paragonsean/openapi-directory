# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_template_customizer import ImageTemplateCustomizer
from openapi_server import util


class ImageTemplateRestartCustomizer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, restart_check_command: str=None, restart_command: str=None, restart_timeout: str=None, name: str=None, type: str=None):
        """ImageTemplateRestartCustomizer - a model defined in OpenAPI

        :param restart_check_command: The restart_check_command of this ImageTemplateRestartCustomizer.
        :param restart_command: The restart_command of this ImageTemplateRestartCustomizer.
        :param restart_timeout: The restart_timeout of this ImageTemplateRestartCustomizer.
        :param name: The name of this ImageTemplateRestartCustomizer.
        :param type: The type of this ImageTemplateRestartCustomizer.
        """
        self.openapi_types = {
            'restart_check_command': str,
            'restart_command': str,
            'restart_timeout': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'restart_check_command': 'restartCheckCommand',
            'restart_command': 'restartCommand',
            'restart_timeout': 'restartTimeout',
            'name': 'name',
            'type': 'type'
        }

        self._restart_check_command = restart_check_command
        self._restart_command = restart_command
        self._restart_timeout = restart_timeout
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageTemplateRestartCustomizer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageTemplateRestartCustomizer of this ImageTemplateRestartCustomizer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def restart_check_command(self):
        """Gets the restart_check_command of this ImageTemplateRestartCustomizer.

        Command to check if restart succeeded [Default: '']

        :return: The restart_check_command of this ImageTemplateRestartCustomizer.
        :rtype: str
        """
        return self._restart_check_command

    @restart_check_command.setter
    def restart_check_command(self, restart_check_command):
        """Sets the restart_check_command of this ImageTemplateRestartCustomizer.

        Command to check if restart succeeded [Default: '']

        :param restart_check_command: The restart_check_command of this ImageTemplateRestartCustomizer.
        :type restart_check_command: str
        """

        self._restart_check_command = restart_check_command

    @property
    def restart_command(self):
        """Gets the restart_command of this ImageTemplateRestartCustomizer.

        Command to execute the restart [Default: 'shutdown /r /f /t 0 /c \"packer restart\"']

        :return: The restart_command of this ImageTemplateRestartCustomizer.
        :rtype: str
        """
        return self._restart_command

    @restart_command.setter
    def restart_command(self, restart_command):
        """Sets the restart_command of this ImageTemplateRestartCustomizer.

        Command to execute the restart [Default: 'shutdown /r /f /t 0 /c \"packer restart\"']

        :param restart_command: The restart_command of this ImageTemplateRestartCustomizer.
        :type restart_command: str
        """

        self._restart_command = restart_command

    @property
    def restart_timeout(self):
        """Gets the restart_timeout of this ImageTemplateRestartCustomizer.

        Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']

        :return: The restart_timeout of this ImageTemplateRestartCustomizer.
        :rtype: str
        """
        return self._restart_timeout

    @restart_timeout.setter
    def restart_timeout(self, restart_timeout):
        """Sets the restart_timeout of this ImageTemplateRestartCustomizer.

        Restart timeout specified as a string of magnitude and unit, e.g. '5m' (5 minutes) or '2h' (2 hours) [Default: '5m']

        :param restart_timeout: The restart_timeout of this ImageTemplateRestartCustomizer.
        :type restart_timeout: str
        """

        self._restart_timeout = restart_timeout

    @property
    def name(self):
        """Gets the name of this ImageTemplateRestartCustomizer.

        Friendly Name to provide context on what this customization step does

        :return: The name of this ImageTemplateRestartCustomizer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImageTemplateRestartCustomizer.

        Friendly Name to provide context on what this customization step does

        :param name: The name of this ImageTemplateRestartCustomizer.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ImageTemplateRestartCustomizer.

        The type of customization tool you want to use on the Image. For example, \"Shell\" can be shell customizer

        :return: The type of this ImageTemplateRestartCustomizer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageTemplateRestartCustomizer.

        The type of customization tool you want to use on the Image. For example, \"Shell\" can be shell customizer

        :param type: The type of this ImageTemplateRestartCustomizer.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
