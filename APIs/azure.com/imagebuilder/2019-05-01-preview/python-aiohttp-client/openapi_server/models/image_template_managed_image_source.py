# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_template_source import ImageTemplateSource
from openapi_server import util


class ImageTemplateManagedImageSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_id: str=None, type: str=None):
        """ImageTemplateManagedImageSource - a model defined in OpenAPI

        :param image_id: The image_id of this ImageTemplateManagedImageSource.
        :param type: The type of this ImageTemplateManagedImageSource.
        """
        self.openapi_types = {
            'image_id': str,
            'type': str
        }

        self.attribute_map = {
            'image_id': 'imageId',
            'type': 'type'
        }

        self._image_id = image_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageTemplateManagedImageSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageTemplateManagedImageSource of this ImageTemplateManagedImageSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_id(self):
        """Gets the image_id of this ImageTemplateManagedImageSource.

        ARM resource id of the managed image in customer subscription

        :return: The image_id of this ImageTemplateManagedImageSource.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this ImageTemplateManagedImageSource.

        ARM resource id of the managed image in customer subscription

        :param image_id: The image_id of this ImageTemplateManagedImageSource.
        :type image_id: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")

        self._image_id = image_id

    @property
    def type(self):
        """Gets the type of this ImageTemplateManagedImageSource.

        Specifies the type of source image you want to start with.

        :return: The type of this ImageTemplateManagedImageSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageTemplateManagedImageSource.

        Specifies the type of source image you want to start with.

        :param type: The type of this ImageTemplateManagedImageSource.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
