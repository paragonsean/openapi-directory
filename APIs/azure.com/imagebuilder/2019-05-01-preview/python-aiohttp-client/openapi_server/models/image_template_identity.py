# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_template_identity_user_assigned_identities_value import ImageTemplateIdentityUserAssignedIdentitiesValue
from openapi_server import util


class ImageTemplateIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, user_assigned_identities: Dict[str, ImageTemplateIdentityUserAssignedIdentitiesValue]=None):
        """ImageTemplateIdentity - a model defined in OpenAPI

        :param type: The type of this ImageTemplateIdentity.
        :param user_assigned_identities: The user_assigned_identities of this ImageTemplateIdentity.
        """
        self.openapi_types = {
            'type': str,
            'user_assigned_identities': Dict[str, ImageTemplateIdentityUserAssignedIdentitiesValue]
        }

        self.attribute_map = {
            'type': 'type',
            'user_assigned_identities': 'userAssignedIdentities'
        }

        self._type = type
        self._user_assigned_identities = user_assigned_identities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageTemplateIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageTemplateIdentity of this ImageTemplateIdentity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ImageTemplateIdentity.

        The type of identity used for the image template. The type 'None' will remove any identities from the image template.

        :return: The type of this ImageTemplateIdentity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImageTemplateIdentity.

        The type of identity used for the image template. The type 'None' will remove any identities from the image template.

        :param type: The type of this ImageTemplateIdentity.
        :type type: str
        """
        allowed_values = ["UserAssigned", "None"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_assigned_identities(self):
        """Gets the user_assigned_identities of this ImageTemplateIdentity.

        The list of user identities associated with the image template. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.

        :return: The user_assigned_identities of this ImageTemplateIdentity.
        :rtype: Dict[str, ImageTemplateIdentityUserAssignedIdentitiesValue]
        """
        return self._user_assigned_identities

    @user_assigned_identities.setter
    def user_assigned_identities(self, user_assigned_identities):
        """Sets the user_assigned_identities of this ImageTemplateIdentity.

        The list of user identities associated with the image template. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.

        :param user_assigned_identities: The user_assigned_identities of this ImageTemplateIdentity.
        :type user_assigned_identities: Dict[str, ImageTemplateIdentityUserAssignedIdentitiesValue]
        """

        self._user_assigned_identities = user_assigned_identities
