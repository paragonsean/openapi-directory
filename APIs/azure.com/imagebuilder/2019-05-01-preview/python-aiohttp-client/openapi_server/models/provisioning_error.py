# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProvisioningError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, provisioning_error_code: str=None):
        """ProvisioningError - a model defined in OpenAPI

        :param message: The message of this ProvisioningError.
        :param provisioning_error_code: The provisioning_error_code of this ProvisioningError.
        """
        self.openapi_types = {
            'message': str,
            'provisioning_error_code': str
        }

        self.attribute_map = {
            'message': 'message',
            'provisioning_error_code': 'provisioningErrorCode'
        }

        self._message = message
        self._provisioning_error_code = provisioning_error_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisioningError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvisioningError of this ProvisioningError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ProvisioningError.

        Verbose error message about the provisioning failure

        :return: The message of this ProvisioningError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ProvisioningError.

        Verbose error message about the provisioning failure

        :param message: The message of this ProvisioningError.
        :type message: str
        """

        self._message = message

    @property
    def provisioning_error_code(self):
        """Gets the provisioning_error_code of this ProvisioningError.

        Error code of the provisioning failure

        :return: The provisioning_error_code of this ProvisioningError.
        :rtype: str
        """
        return self._provisioning_error_code

    @provisioning_error_code.setter
    def provisioning_error_code(self, provisioning_error_code):
        """Sets the provisioning_error_code of this ProvisioningError.

        Error code of the provisioning failure

        :param provisioning_error_code: The provisioning_error_code of this ProvisioningError.
        :type provisioning_error_code: str
        """
        allowed_values = ["BadSourceType", "BadPIRSource", "BadISOSource", "BadManagedImageSource", "BadSharedImageVersionSource", "BadCustomizerType", "UnsupportedCustomizerType", "NoCustomizerScript", "BadDistributeType", "BadSharedImageDistribute", "ServerError", "Other"]  # noqa: E501
        if provisioning_error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_error_code` ({0}), must be one of {1}"
                .format(provisioning_error_code, allowed_values)
            )

        self._provisioning_error_code = provisioning_error_code
