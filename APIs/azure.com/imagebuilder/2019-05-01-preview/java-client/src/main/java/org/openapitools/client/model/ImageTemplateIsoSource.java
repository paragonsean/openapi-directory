/*
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageTemplateSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO&#39;s.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:45.323003-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageTemplateIsoSource extends ImageTemplateSource {
  public static final String SERIALIZED_NAME_SHA256_CHECKSUM = "sha256Checksum";
  @SerializedName(SERIALIZED_NAME_SHA256_CHECKSUM)
  private String sha256Checksum;

  public static final String SERIALIZED_NAME_SOURCE_URI = "sourceUri";
  @SerializedName(SERIALIZED_NAME_SOURCE_URI)
  private String sourceUri;

  public ImageTemplateIsoSource() {
    this.type = this.getClass().getSimpleName();
  }

  public ImageTemplateIsoSource sha256Checksum(String sha256Checksum) {
    this.sha256Checksum = sha256Checksum;
    return this;
  }

  /**
   * SHA256 Checksum of the ISO image.
   * @return sha256Checksum
   */
  @javax.annotation.Nonnull
  public String getSha256Checksum() {
    return sha256Checksum;
  }

  public void setSha256Checksum(String sha256Checksum) {
    this.sha256Checksum = sha256Checksum;
  }


  public ImageTemplateIsoSource sourceUri(String sourceUri) {
    this.sourceUri = sourceUri;
    return this;
  }

  /**
   * URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
   * @return sourceUri
   */
  @javax.annotation.Nonnull
  public String getSourceUri() {
    return sourceUri;
  }

  public void setSourceUri(String sourceUri) {
    this.sourceUri = sourceUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageTemplateIsoSource imageTemplateIsoSource = (ImageTemplateIsoSource) o;
    return Objects.equals(this.sha256Checksum, imageTemplateIsoSource.sha256Checksum) &&
        Objects.equals(this.sourceUri, imageTemplateIsoSource.sourceUri) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sha256Checksum, sourceUri, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageTemplateIsoSource {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    sha256Checksum: ").append(toIndentedString(sha256Checksum)).append("\n");
    sb.append("    sourceUri: ").append(toIndentedString(sourceUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sha256Checksum");
    openapiRequiredFields.add("sourceUri");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageTemplateIsoSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageTemplateIsoSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageTemplateIsoSource is not found in the empty JSON string", ImageTemplateIsoSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageTemplateIsoSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageTemplateIsoSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImageTemplateIsoSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageTemplateIsoSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageTemplateIsoSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageTemplateIsoSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageTemplateIsoSource.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageTemplateIsoSource>() {
           @Override
           public void write(JsonWriter out, ImageTemplateIsoSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageTemplateIsoSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageTemplateIsoSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageTemplateIsoSource
   * @throws IOException if the JSON string is invalid with respect to ImageTemplateIsoSource
   */
  public static ImageTemplateIsoSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageTemplateIsoSource.class);
  }

  /**
   * Convert an instance of ImageTemplateIsoSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

