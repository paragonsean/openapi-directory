/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageTemplateSource from './ImageTemplateSource';

/**
 * The ImageTemplateIsoSource model module.
 * @module model/ImageTemplateIsoSource
 * @version 2019-05-01-preview
 */
class ImageTemplateIsoSource {
    /**
     * Constructs a new <code>ImageTemplateIsoSource</code>.
     * Describes an image source that is an installation ISO. Currently only supports Red Hat Enterprise Linux 7.2-7.5 ISO&#39;s.
     * @alias module:model/ImageTemplateIsoSource
     * @extends module:model/ImageTemplateSource
     * @implements module:model/ImageTemplateSource
     * @param type {String} Specifies the type of source image you want to start with.
     */
    constructor(type) { 
        ImageTemplateSource.initialize(this, type);
        ImageTemplateIsoSource.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['sha256Checksum'] = sha256Checksum;
        obj['sourceUri'] = sourceUri;
    }

    /**
     * Constructs a <code>ImageTemplateIsoSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageTemplateIsoSource} obj Optional instance to populate.
     * @return {module:model/ImageTemplateIsoSource} The populated <code>ImageTemplateIsoSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageTemplateIsoSource();
            ImageTemplateSource.constructFromObject(data, obj);
            ImageTemplateSource.constructFromObject(data, obj);

            if (data.hasOwnProperty('sha256Checksum')) {
                obj['sha256Checksum'] = ApiClient.convertToType(data['sha256Checksum'], 'String');
            }
            if (data.hasOwnProperty('sourceUri')) {
                obj['sourceUri'] = ApiClient.convertToType(data['sourceUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageTemplateIsoSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageTemplateIsoSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageTemplateIsoSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['sha256Checksum'] && !(typeof data['sha256Checksum'] === 'string' || data['sha256Checksum'] instanceof String)) {
            throw new Error("Expected the field `sha256Checksum` to be a primitive type in the JSON string but got " + data['sha256Checksum']);
        }
        // ensure the json data is a string
        if (data['sourceUri'] && !(typeof data['sourceUri'] === 'string' || data['sourceUri'] instanceof String)) {
            throw new Error("Expected the field `sourceUri` to be a primitive type in the JSON string but got " + data['sourceUri']);
        }

        return true;
    }


}

ImageTemplateIsoSource.RequiredProperties = ["sha256Checksum", "sourceUri", "type"];

/**
 * SHA256 Checksum of the ISO image.
 * @member {String} sha256Checksum
 */
ImageTemplateIsoSource.prototype['sha256Checksum'] = undefined;

/**
 * URI to get the ISO image. This URI has to be accessible to the resource provider at the time of the image template creation.
 * @member {String} sourceUri
 */
ImageTemplateIsoSource.prototype['sourceUri'] = undefined;


// Implement ImageTemplateSource interface:
/**
 * Specifies the type of source image you want to start with.
 * @member {String} type
 */
ImageTemplateSource.prototype['type'] = undefined;




export default ImageTemplateIsoSource;

