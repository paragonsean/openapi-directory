/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageTemplateIdentityUserAssignedIdentitiesValue from './ImageTemplateIdentityUserAssignedIdentitiesValue';

/**
 * The ImageTemplateIdentity model module.
 * @module model/ImageTemplateIdentity
 * @version 2019-05-01-preview
 */
class ImageTemplateIdentity {
    /**
     * Constructs a new <code>ImageTemplateIdentity</code>.
     * Identity for the image template.
     * @alias module:model/ImageTemplateIdentity
     */
    constructor() { 
        
        ImageTemplateIdentity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageTemplateIdentity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageTemplateIdentity} obj Optional instance to populate.
     * @return {module:model/ImageTemplateIdentity} The populated <code>ImageTemplateIdentity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageTemplateIdentity();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userAssignedIdentities')) {
                obj['userAssignedIdentities'] = ApiClient.convertToType(data['userAssignedIdentities'], {'String': ImageTemplateIdentityUserAssignedIdentitiesValue});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageTemplateIdentity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageTemplateIdentity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The type of identity used for the image template. The type 'None' will remove any identities from the image template.
 * @member {module:model/ImageTemplateIdentity.TypeEnum} type
 */
ImageTemplateIdentity.prototype['type'] = undefined;

/**
 * The list of user identities associated with the image template. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
 * @member {Object.<String, module:model/ImageTemplateIdentityUserAssignedIdentitiesValue>} userAssignedIdentities
 */
ImageTemplateIdentity.prototype['userAssignedIdentities'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ImageTemplateIdentity['TypeEnum'] = {

    /**
     * value: "UserAssigned"
     * @const
     */
    "UserAssigned": "UserAssigned",

    /**
     * value: "None"
     * @const
     */
    "None": "None"
};



export default ImageTemplateIdentity;

