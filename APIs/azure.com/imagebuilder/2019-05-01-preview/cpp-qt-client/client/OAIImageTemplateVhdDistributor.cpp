/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTemplateVhdDistributor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTemplateVhdDistributor::OAIImageTemplateVhdDistributor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTemplateVhdDistributor::OAIImageTemplateVhdDistributor() {
    this->initializeModel();
}

OAIImageTemplateVhdDistributor::~OAIImageTemplateVhdDistributor() {}

void OAIImageTemplateVhdDistributor::initializeModel() {

    m_artifact_tags_isSet = false;
    m_artifact_tags_isValid = false;

    m_run_output_name_isSet = false;
    m_run_output_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImageTemplateVhdDistributor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTemplateVhdDistributor::fromJsonObject(QJsonObject json) {

    m_artifact_tags_isValid = ::OpenAPI::fromJsonValue(m_artifact_tags, json[QString("artifactTags")]);
    m_artifact_tags_isSet = !json[QString("artifactTags")].isNull() && m_artifact_tags_isValid;

    m_run_output_name_isValid = ::OpenAPI::fromJsonValue(m_run_output_name, json[QString("runOutputName")]);
    m_run_output_name_isSet = !json[QString("runOutputName")].isNull() && m_run_output_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImageTemplateVhdDistributor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTemplateVhdDistributor::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_tags.size() > 0) {
        obj.insert(QString("artifactTags"), ::OpenAPI::toJsonValue(m_artifact_tags));
    }
    if (m_run_output_name_isSet) {
        obj.insert(QString("runOutputName"), ::OpenAPI::toJsonValue(m_run_output_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QMap<QString, QString> OAIImageTemplateVhdDistributor::getArtifactTags() const {
    return m_artifact_tags;
}
void OAIImageTemplateVhdDistributor::setArtifactTags(const QMap<QString, QString> &artifact_tags) {
    m_artifact_tags = artifact_tags;
    m_artifact_tags_isSet = true;
}

bool OAIImageTemplateVhdDistributor::is_artifact_tags_Set() const{
    return m_artifact_tags_isSet;
}

bool OAIImageTemplateVhdDistributor::is_artifact_tags_Valid() const{
    return m_artifact_tags_isValid;
}

QString OAIImageTemplateVhdDistributor::getRunOutputName() const {
    return m_run_output_name;
}
void OAIImageTemplateVhdDistributor::setRunOutputName(const QString &run_output_name) {
    m_run_output_name = run_output_name;
    m_run_output_name_isSet = true;
}

bool OAIImageTemplateVhdDistributor::is_run_output_name_Set() const{
    return m_run_output_name_isSet;
}

bool OAIImageTemplateVhdDistributor::is_run_output_name_Valid() const{
    return m_run_output_name_isValid;
}

QString OAIImageTemplateVhdDistributor::getType() const {
    return m_type;
}
void OAIImageTemplateVhdDistributor::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImageTemplateVhdDistributor::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImageTemplateVhdDistributor::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImageTemplateVhdDistributor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_output_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTemplateVhdDistributor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_run_output_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
