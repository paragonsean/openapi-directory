/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTemplateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTemplateProperties::OAIImageTemplateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTemplateProperties::OAIImageTemplateProperties() {
    this->initializeModel();
}

OAIImageTemplateProperties::~OAIImageTemplateProperties() {}

void OAIImageTemplateProperties::initializeModel() {

    m_build_timeout_in_minutes_isSet = false;
    m_build_timeout_in_minutes_isValid = false;

    m_customize_isSet = false;
    m_customize_isValid = false;

    m_distribute_isSet = false;
    m_distribute_isValid = false;

    m_last_run_status_isSet = false;
    m_last_run_status_isValid = false;

    m_provisioning_error_isSet = false;
    m_provisioning_error_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_vm_profile_isSet = false;
    m_vm_profile_isValid = false;
}

void OAIImageTemplateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTemplateProperties::fromJsonObject(QJsonObject json) {

    m_build_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_build_timeout_in_minutes, json[QString("buildTimeoutInMinutes")]);
    m_build_timeout_in_minutes_isSet = !json[QString("buildTimeoutInMinutes")].isNull() && m_build_timeout_in_minutes_isValid;

    m_customize_isValid = ::OpenAPI::fromJsonValue(m_customize, json[QString("customize")]);
    m_customize_isSet = !json[QString("customize")].isNull() && m_customize_isValid;

    m_distribute_isValid = ::OpenAPI::fromJsonValue(m_distribute, json[QString("distribute")]);
    m_distribute_isSet = !json[QString("distribute")].isNull() && m_distribute_isValid;

    m_last_run_status_isValid = ::OpenAPI::fromJsonValue(m_last_run_status, json[QString("lastRunStatus")]);
    m_last_run_status_isSet = !json[QString("lastRunStatus")].isNull() && m_last_run_status_isValid;

    m_provisioning_error_isValid = ::OpenAPI::fromJsonValue(m_provisioning_error, json[QString("provisioningError")]);
    m_provisioning_error_isSet = !json[QString("provisioningError")].isNull() && m_provisioning_error_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_vm_profile_isValid = ::OpenAPI::fromJsonValue(m_vm_profile, json[QString("vmProfile")]);
    m_vm_profile_isSet = !json[QString("vmProfile")].isNull() && m_vm_profile_isValid;
}

QString OAIImageTemplateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTemplateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_build_timeout_in_minutes_isSet) {
        obj.insert(QString("buildTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_build_timeout_in_minutes));
    }
    if (m_customize.size() > 0) {
        obj.insert(QString("customize"), ::OpenAPI::toJsonValue(m_customize));
    }
    if (m_distribute.size() > 0) {
        obj.insert(QString("distribute"), ::OpenAPI::toJsonValue(m_distribute));
    }
    if (m_last_run_status.isSet()) {
        obj.insert(QString("lastRunStatus"), ::OpenAPI::toJsonValue(m_last_run_status));
    }
    if (m_provisioning_error.isSet()) {
        obj.insert(QString("provisioningError"), ::OpenAPI::toJsonValue(m_provisioning_error));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_vm_profile.isSet()) {
        obj.insert(QString("vmProfile"), ::OpenAPI::toJsonValue(m_vm_profile));
    }
    return obj;
}

qint32 OAIImageTemplateProperties::getBuildTimeoutInMinutes() const {
    return m_build_timeout_in_minutes;
}
void OAIImageTemplateProperties::setBuildTimeoutInMinutes(const qint32 &build_timeout_in_minutes) {
    m_build_timeout_in_minutes = build_timeout_in_minutes;
    m_build_timeout_in_minutes_isSet = true;
}

bool OAIImageTemplateProperties::is_build_timeout_in_minutes_Set() const{
    return m_build_timeout_in_minutes_isSet;
}

bool OAIImageTemplateProperties::is_build_timeout_in_minutes_Valid() const{
    return m_build_timeout_in_minutes_isValid;
}

QList<OAIImageTemplateCustomizer> OAIImageTemplateProperties::getCustomize() const {
    return m_customize;
}
void OAIImageTemplateProperties::setCustomize(const QList<OAIImageTemplateCustomizer> &customize) {
    m_customize = customize;
    m_customize_isSet = true;
}

bool OAIImageTemplateProperties::is_customize_Set() const{
    return m_customize_isSet;
}

bool OAIImageTemplateProperties::is_customize_Valid() const{
    return m_customize_isValid;
}

QList<OAIImageTemplateDistributor> OAIImageTemplateProperties::getDistribute() const {
    return m_distribute;
}
void OAIImageTemplateProperties::setDistribute(const QList<OAIImageTemplateDistributor> &distribute) {
    m_distribute = distribute;
    m_distribute_isSet = true;
}

bool OAIImageTemplateProperties::is_distribute_Set() const{
    return m_distribute_isSet;
}

bool OAIImageTemplateProperties::is_distribute_Valid() const{
    return m_distribute_isValid;
}

OAIImageTemplateLastRunStatus OAIImageTemplateProperties::getLastRunStatus() const {
    return m_last_run_status;
}
void OAIImageTemplateProperties::setLastRunStatus(const OAIImageTemplateLastRunStatus &last_run_status) {
    m_last_run_status = last_run_status;
    m_last_run_status_isSet = true;
}

bool OAIImageTemplateProperties::is_last_run_status_Set() const{
    return m_last_run_status_isSet;
}

bool OAIImageTemplateProperties::is_last_run_status_Valid() const{
    return m_last_run_status_isValid;
}

OAIProvisioningError OAIImageTemplateProperties::getProvisioningError() const {
    return m_provisioning_error;
}
void OAIImageTemplateProperties::setProvisioningError(const OAIProvisioningError &provisioning_error) {
    m_provisioning_error = provisioning_error;
    m_provisioning_error_isSet = true;
}

bool OAIImageTemplateProperties::is_provisioning_error_Set() const{
    return m_provisioning_error_isSet;
}

bool OAIImageTemplateProperties::is_provisioning_error_Valid() const{
    return m_provisioning_error_isValid;
}

OAIProvisioningState OAIImageTemplateProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIImageTemplateProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIImageTemplateProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIImageTemplateProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIImageTemplateSource OAIImageTemplateProperties::getSource() const {
    return m_source;
}
void OAIImageTemplateProperties::setSource(const OAIImageTemplateSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIImageTemplateProperties::is_source_Set() const{
    return m_source_isSet;
}

bool OAIImageTemplateProperties::is_source_Valid() const{
    return m_source_isValid;
}

OAIImageTemplateVmProfile OAIImageTemplateProperties::getVmProfile() const {
    return m_vm_profile;
}
void OAIImageTemplateProperties::setVmProfile(const OAIImageTemplateVmProfile &vm_profile) {
    m_vm_profile = vm_profile;
    m_vm_profile_isSet = true;
}

bool OAIImageTemplateProperties::is_vm_profile_Set() const{
    return m_vm_profile_isSet;
}

bool OAIImageTemplateProperties::is_vm_profile_Valid() const{
    return m_vm_profile_isValid;
}

bool OAIImageTemplateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customize.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribute.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTemplateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_distribute_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
