/**
 * VirtualMachineImageTemplate
 * Virtual Machine Image Template
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTemplateRestartCustomizer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTemplateRestartCustomizer::OAIImageTemplateRestartCustomizer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTemplateRestartCustomizer::OAIImageTemplateRestartCustomizer() {
    this->initializeModel();
}

OAIImageTemplateRestartCustomizer::~OAIImageTemplateRestartCustomizer() {}

void OAIImageTemplateRestartCustomizer::initializeModel() {

    m_restart_check_command_isSet = false;
    m_restart_check_command_isValid = false;

    m_restart_command_isSet = false;
    m_restart_command_isValid = false;

    m_restart_timeout_isSet = false;
    m_restart_timeout_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImageTemplateRestartCustomizer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTemplateRestartCustomizer::fromJsonObject(QJsonObject json) {

    m_restart_check_command_isValid = ::OpenAPI::fromJsonValue(m_restart_check_command, json[QString("restartCheckCommand")]);
    m_restart_check_command_isSet = !json[QString("restartCheckCommand")].isNull() && m_restart_check_command_isValid;

    m_restart_command_isValid = ::OpenAPI::fromJsonValue(m_restart_command, json[QString("restartCommand")]);
    m_restart_command_isSet = !json[QString("restartCommand")].isNull() && m_restart_command_isValid;

    m_restart_timeout_isValid = ::OpenAPI::fromJsonValue(m_restart_timeout, json[QString("restartTimeout")]);
    m_restart_timeout_isSet = !json[QString("restartTimeout")].isNull() && m_restart_timeout_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImageTemplateRestartCustomizer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTemplateRestartCustomizer::asJsonObject() const {
    QJsonObject obj;
    if (m_restart_check_command_isSet) {
        obj.insert(QString("restartCheckCommand"), ::OpenAPI::toJsonValue(m_restart_check_command));
    }
    if (m_restart_command_isSet) {
        obj.insert(QString("restartCommand"), ::OpenAPI::toJsonValue(m_restart_command));
    }
    if (m_restart_timeout_isSet) {
        obj.insert(QString("restartTimeout"), ::OpenAPI::toJsonValue(m_restart_timeout));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIImageTemplateRestartCustomizer::getRestartCheckCommand() const {
    return m_restart_check_command;
}
void OAIImageTemplateRestartCustomizer::setRestartCheckCommand(const QString &restart_check_command) {
    m_restart_check_command = restart_check_command;
    m_restart_check_command_isSet = true;
}

bool OAIImageTemplateRestartCustomizer::is_restart_check_command_Set() const{
    return m_restart_check_command_isSet;
}

bool OAIImageTemplateRestartCustomizer::is_restart_check_command_Valid() const{
    return m_restart_check_command_isValid;
}

QString OAIImageTemplateRestartCustomizer::getRestartCommand() const {
    return m_restart_command;
}
void OAIImageTemplateRestartCustomizer::setRestartCommand(const QString &restart_command) {
    m_restart_command = restart_command;
    m_restart_command_isSet = true;
}

bool OAIImageTemplateRestartCustomizer::is_restart_command_Set() const{
    return m_restart_command_isSet;
}

bool OAIImageTemplateRestartCustomizer::is_restart_command_Valid() const{
    return m_restart_command_isValid;
}

QString OAIImageTemplateRestartCustomizer::getRestartTimeout() const {
    return m_restart_timeout;
}
void OAIImageTemplateRestartCustomizer::setRestartTimeout(const QString &restart_timeout) {
    m_restart_timeout = restart_timeout;
    m_restart_timeout_isSet = true;
}

bool OAIImageTemplateRestartCustomizer::is_restart_timeout_Set() const{
    return m_restart_timeout_isSet;
}

bool OAIImageTemplateRestartCustomizer::is_restart_timeout_Valid() const{
    return m_restart_timeout_isValid;
}

QString OAIImageTemplateRestartCustomizer::getName() const {
    return m_name;
}
void OAIImageTemplateRestartCustomizer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageTemplateRestartCustomizer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageTemplateRestartCustomizer::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageTemplateRestartCustomizer::getType() const {
    return m_type;
}
void OAIImageTemplateRestartCustomizer::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImageTemplateRestartCustomizer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImageTemplateRestartCustomizer::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImageTemplateRestartCustomizer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_restart_check_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restart_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restart_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTemplateRestartCustomizer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
