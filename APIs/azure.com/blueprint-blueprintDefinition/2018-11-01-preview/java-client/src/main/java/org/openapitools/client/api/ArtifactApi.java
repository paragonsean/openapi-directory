/*
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Artifact;
import org.openapitools.client.model.ArtifactList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArtifactApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArtifactApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArtifactApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for artifactsCreateOrUpdate
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @param artifact Blueprint artifact to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created -- blueprint artifact created/updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsCreateOrUpdateCall(String apiVersion, String scope, String blueprintName, String artifactName, Artifact artifact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = artifact;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "blueprintName" + "}", localVarApiClient.escapeString(blueprintName.toString()))
            .replace("{" + "artifactName" + "}", localVarApiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsCreateOrUpdateValidateBeforeCall(String apiVersion, String scope, String blueprintName, String artifactName, Artifact artifact, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling artifactsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling artifactsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'blueprintName' is set
        if (blueprintName == null) {
            throw new ApiException("Missing the required parameter 'blueprintName' when calling artifactsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'artifact' is set
        if (artifact == null) {
            throw new ApiException("Missing the required parameter 'artifact' when calling artifactsCreateOrUpdate(Async)");
        }

        return artifactsCreateOrUpdateCall(apiVersion, scope, blueprintName, artifactName, artifact, _callback);

    }

    /**
     * 
     * Create or update blueprint artifact.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @param artifact Blueprint artifact to create or update. (required)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created -- blueprint artifact created/updated. </td><td>  -  </td></tr>
     </table>
     */
    public Artifact artifactsCreateOrUpdate(String apiVersion, String scope, String blueprintName, String artifactName, Artifact artifact) throws ApiException {
        ApiResponse<Artifact> localVarResp = artifactsCreateOrUpdateWithHttpInfo(apiVersion, scope, blueprintName, artifactName, artifact);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update blueprint artifact.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @param artifact Blueprint artifact to create or update. (required)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created -- blueprint artifact created/updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Artifact> artifactsCreateOrUpdateWithHttpInfo(String apiVersion, String scope, String blueprintName, String artifactName, Artifact artifact) throws ApiException {
        okhttp3.Call localVarCall = artifactsCreateOrUpdateValidateBeforeCall(apiVersion, scope, blueprintName, artifactName, artifact, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update blueprint artifact.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @param artifact Blueprint artifact to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created -- blueprint artifact created/updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsCreateOrUpdateAsync(String apiVersion, String scope, String blueprintName, String artifactName, Artifact artifact, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsCreateOrUpdateValidateBeforeCall(apiVersion, scope, blueprintName, artifactName, artifact, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsDelete
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifact deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsDeleteCall(String apiVersion, String scope, String blueprintName, String artifactName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "blueprintName" + "}", localVarApiClient.escapeString(blueprintName.toString()))
            .replace("{" + "artifactName" + "}", localVarApiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsDeleteValidateBeforeCall(String apiVersion, String scope, String blueprintName, String artifactName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling artifactsDelete(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling artifactsDelete(Async)");
        }

        // verify the required parameter 'blueprintName' is set
        if (blueprintName == null) {
            throw new ApiException("Missing the required parameter 'blueprintName' when calling artifactsDelete(Async)");
        }

        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactsDelete(Async)");
        }

        return artifactsDeleteCall(apiVersion, scope, blueprintName, artifactName, _callback);

    }

    /**
     * 
     * Delete a blueprint artifact.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifact deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public Artifact artifactsDelete(String apiVersion, String scope, String blueprintName, String artifactName) throws ApiException {
        ApiResponse<Artifact> localVarResp = artifactsDeleteWithHttpInfo(apiVersion, scope, blueprintName, artifactName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a blueprint artifact.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifact deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Artifact> artifactsDeleteWithHttpInfo(String apiVersion, String scope, String blueprintName, String artifactName) throws ApiException {
        okhttp3.Call localVarCall = artifactsDeleteValidateBeforeCall(apiVersion, scope, blueprintName, artifactName, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a blueprint artifact.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifact deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsDeleteAsync(String apiVersion, String scope, String blueprintName, String artifactName, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsDeleteValidateBeforeCall(apiVersion, scope, blueprintName, artifactName, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsGet
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifact retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsGetCall(String apiVersion, String scope, String blueprintName, String artifactName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "blueprintName" + "}", localVarApiClient.escapeString(blueprintName.toString()))
            .replace("{" + "artifactName" + "}", localVarApiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsGetValidateBeforeCall(String apiVersion, String scope, String blueprintName, String artifactName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling artifactsGet(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling artifactsGet(Async)");
        }

        // verify the required parameter 'blueprintName' is set
        if (blueprintName == null) {
            throw new ApiException("Missing the required parameter 'blueprintName' when calling artifactsGet(Async)");
        }

        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactsGet(Async)");
        }

        return artifactsGetCall(apiVersion, scope, blueprintName, artifactName, _callback);

    }

    /**
     * 
     * Get a blueprint artifact.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @return Artifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifact retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public Artifact artifactsGet(String apiVersion, String scope, String blueprintName, String artifactName) throws ApiException {
        ApiResponse<Artifact> localVarResp = artifactsGetWithHttpInfo(apiVersion, scope, blueprintName, artifactName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a blueprint artifact.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @return ApiResponse&lt;Artifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifact retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Artifact> artifactsGetWithHttpInfo(String apiVersion, String scope, String blueprintName, String artifactName) throws ApiException {
        okhttp3.Call localVarCall = artifactsGetValidateBeforeCall(apiVersion, scope, blueprintName, artifactName, null);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a blueprint artifact.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param artifactName Name of the blueprint artifact. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifact retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsGetAsync(String apiVersion, String scope, String blueprintName, String artifactName, final ApiCallback<Artifact> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsGetValidateBeforeCall(apiVersion, scope, blueprintName, artifactName, _callback);
        Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactsList
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifacts retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsListCall(String apiVersion, String scope, String blueprintName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "blueprintName" + "}", localVarApiClient.escapeString(blueprintName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactsListValidateBeforeCall(String apiVersion, String scope, String blueprintName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling artifactsList(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling artifactsList(Async)");
        }

        // verify the required parameter 'blueprintName' is set
        if (blueprintName == null) {
            throw new ApiException("Missing the required parameter 'blueprintName' when calling artifactsList(Async)");
        }

        return artifactsListCall(apiVersion, scope, blueprintName, _callback);

    }

    /**
     * 
     * List artifacts for a given blueprint definition.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @return ArtifactList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifacts retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ArtifactList artifactsList(String apiVersion, String scope, String blueprintName) throws ApiException {
        ApiResponse<ArtifactList> localVarResp = artifactsListWithHttpInfo(apiVersion, scope, blueprintName);
        return localVarResp.getData();
    }

    /**
     * 
     * List artifacts for a given blueprint definition.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @return ApiResponse&lt;ArtifactList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifacts retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ArtifactList> artifactsListWithHttpInfo(String apiVersion, String scope, String blueprintName) throws ApiException {
        okhttp3.Call localVarCall = artifactsListValidateBeforeCall(apiVersion, scope, blueprintName, null);
        Type localVarReturnType = new TypeToken<ArtifactList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List artifacts for a given blueprint definition.
     * @param apiVersion Client API Version. (required)
     * @param scope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;). For blueprint assignments management group scope is reserved for future use. (required)
     * @param blueprintName Name of the blueprint definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- blueprint artifacts retrieved. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactsListAsync(String apiVersion, String scope, String blueprintName, final ApiCallback<ArtifactList> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactsListValidateBeforeCall(apiVersion, scope, blueprintName, _callback);
        Type localVarReturnType = new TypeToken<ArtifactList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
