/*
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.BlueprintStatus;
import org.openapitools.client.model.ParameterDefinition;
import org.openapitools.client.model.ResourceGroupDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schema for published blueprint definition properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:09.338091-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublishedBlueprintProperties {
  public static final String SERIALIZED_NAME_BLUEPRINT_NAME = "blueprintName";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_NAME)
  private String blueprintName;

  public static final String SERIALIZED_NAME_CHANGE_NOTES = "changeNotes";
  @SerializedName(SERIALIZED_NAME_CHANGE_NOTES)
  private String changeNotes;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, ParameterDefinition> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOURCE_GROUPS = "resourceGroups";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUPS)
  private Map<String, ResourceGroupDefinition> resourceGroups = new HashMap<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BlueprintStatus status;

  /**
   * The scope where this blueprint definition can be assigned.
   */
  @JsonAdapter(TargetScopeEnum.Adapter.class)
  public enum TargetScopeEnum {
    SUBSCRIPTION("subscription"),
    
    MANAGEMENT_GROUP("managementGroup");

    private String value;

    TargetScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetScopeEnum fromValue(String value) {
      for (TargetScopeEnum b : TargetScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_SCOPE = "targetScope";
  @SerializedName(SERIALIZED_NAME_TARGET_SCOPE)
  private TargetScopeEnum targetScope;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public PublishedBlueprintProperties() {
  }

  public PublishedBlueprintProperties blueprintName(String blueprintName) {
    this.blueprintName = blueprintName;
    return this;
  }

  /**
   * Name of the published blueprint definition.
   * @return blueprintName
   */
  @javax.annotation.Nullable
  public String getBlueprintName() {
    return blueprintName;
  }

  public void setBlueprintName(String blueprintName) {
    this.blueprintName = blueprintName;
  }


  public PublishedBlueprintProperties changeNotes(String changeNotes) {
    this.changeNotes = changeNotes;
    return this;
  }

  /**
   * Version-specific change notes.
   * @return changeNotes
   */
  @javax.annotation.Nullable
  public String getChangeNotes() {
    return changeNotes;
  }

  public void setChangeNotes(String changeNotes) {
    this.changeNotes = changeNotes;
  }


  public PublishedBlueprintProperties parameters(Map<String, ParameterDefinition> parameters) {
    this.parameters = parameters;
    return this;
  }

  public PublishedBlueprintProperties putParametersItem(String key, ParameterDefinition parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * A dictionary hold parameter name and its metadata.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, ParameterDefinition> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, ParameterDefinition> parameters) {
    this.parameters = parameters;
  }


  public PublishedBlueprintProperties resourceGroups(Map<String, ResourceGroupDefinition> resourceGroups) {
    this.resourceGroups = resourceGroups;
    return this;
  }

  public PublishedBlueprintProperties putResourceGroupsItem(String key, ResourceGroupDefinition resourceGroupsItem) {
    if (this.resourceGroups == null) {
      this.resourceGroups = new HashMap<>();
    }
    this.resourceGroups.put(key, resourceGroupsItem);
    return this;
  }

  /**
   * A dictionary which maps resource group placeholders to the resource groups which will be created.
   * @return resourceGroups
   */
  @javax.annotation.Nullable
  public Map<String, ResourceGroupDefinition> getResourceGroups() {
    return resourceGroups;
  }

  public void setResourceGroups(Map<String, ResourceGroupDefinition> resourceGroups) {
    this.resourceGroups = resourceGroups;
  }


  public PublishedBlueprintProperties status(BlueprintStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public BlueprintStatus getStatus() {
    return status;
  }

  public void setStatus(BlueprintStatus status) {
    this.status = status;
  }


  public PublishedBlueprintProperties targetScope(TargetScopeEnum targetScope) {
    this.targetScope = targetScope;
    return this;
  }

  /**
   * The scope where this blueprint definition can be assigned.
   * @return targetScope
   */
  @javax.annotation.Nullable
  public TargetScopeEnum getTargetScope() {
    return targetScope;
  }

  public void setTargetScope(TargetScopeEnum targetScope) {
    this.targetScope = targetScope;
  }


  public PublishedBlueprintProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Multi-line explain this resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PublishedBlueprintProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * One-liner string explain this resource.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishedBlueprintProperties publishedBlueprintProperties = (PublishedBlueprintProperties) o;
    return Objects.equals(this.blueprintName, publishedBlueprintProperties.blueprintName) &&
        Objects.equals(this.changeNotes, publishedBlueprintProperties.changeNotes) &&
        Objects.equals(this.parameters, publishedBlueprintProperties.parameters) &&
        Objects.equals(this.resourceGroups, publishedBlueprintProperties.resourceGroups) &&
        Objects.equals(this.status, publishedBlueprintProperties.status) &&
        Objects.equals(this.targetScope, publishedBlueprintProperties.targetScope) &&
        Objects.equals(this.description, publishedBlueprintProperties.description) &&
        Objects.equals(this.displayName, publishedBlueprintProperties.displayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blueprintName, changeNotes, parameters, resourceGroups, status, targetScope, description, displayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishedBlueprintProperties {\n");
    sb.append("    blueprintName: ").append(toIndentedString(blueprintName)).append("\n");
    sb.append("    changeNotes: ").append(toIndentedString(changeNotes)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    resourceGroups: ").append(toIndentedString(resourceGroups)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetScope: ").append(toIndentedString(targetScope)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("parameters");
    openapiFields.add("resourceGroups");
    openapiFields.add("status");
    openapiFields.add("targetScope");
    openapiFields.add("description");
    openapiFields.add("displayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublishedBlueprintProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublishedBlueprintProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublishedBlueprintProperties is not found in the empty JSON string", PublishedBlueprintProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublishedBlueprintProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishedBlueprintProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blueprintName") != null && !jsonObj.get("blueprintName").isJsonNull()) && !jsonObj.get("blueprintName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blueprintName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blueprintName").toString()));
      }
      if ((jsonObj.get("changeNotes") != null && !jsonObj.get("changeNotes").isJsonNull()) && !jsonObj.get("changeNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeNotes").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        BlueprintStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("targetScope") != null && !jsonObj.get("targetScope").isJsonNull()) && !jsonObj.get("targetScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetScope").toString()));
      }
      // validate the optional field `targetScope`
      if (jsonObj.get("targetScope") != null && !jsonObj.get("targetScope").isJsonNull()) {
        TargetScopeEnum.validateJsonElement(jsonObj.get("targetScope"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublishedBlueprintProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublishedBlueprintProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublishedBlueprintProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublishedBlueprintProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PublishedBlueprintProperties>() {
           @Override
           public void write(JsonWriter out, PublishedBlueprintProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublishedBlueprintProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublishedBlueprintProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublishedBlueprintProperties
   * @throws IOException if the JSON string is invalid with respect to PublishedBlueprintProperties
   */
  public static PublishedBlueprintProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublishedBlueprintProperties.class);
  }

  /**
   * Convert an instance of PublishedBlueprintProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

