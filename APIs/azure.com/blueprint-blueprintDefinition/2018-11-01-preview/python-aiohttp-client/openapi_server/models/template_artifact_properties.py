# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_value import ParameterValue
from openapi_server import util


class TemplateArtifactProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: Dict[str, ParameterValue]=None, resource_group: str=None, template: object=None, description: str=None, display_name: str=None, depends_on: List[str]=None):
        """TemplateArtifactProperties - a model defined in OpenAPI

        :param parameters: The parameters of this TemplateArtifactProperties.
        :param resource_group: The resource_group of this TemplateArtifactProperties.
        :param template: The template of this TemplateArtifactProperties.
        :param description: The description of this TemplateArtifactProperties.
        :param display_name: The display_name of this TemplateArtifactProperties.
        :param depends_on: The depends_on of this TemplateArtifactProperties.
        """
        self.openapi_types = {
            'parameters': Dict[str, ParameterValue],
            'resource_group': str,
            'template': object,
            'description': str,
            'display_name': str,
            'depends_on': List[str]
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'resource_group': 'resourceGroup',
            'template': 'template',
            'description': 'description',
            'display_name': 'displayName',
            'depends_on': 'dependsOn'
        }

        self._parameters = parameters
        self._resource_group = resource_group
        self._template = template
        self._description = description
        self._display_name = display_name
        self._depends_on = depends_on

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateArtifactProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateArtifactProperties of this TemplateArtifactProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this TemplateArtifactProperties.

        A dictionary for parameters and their corresponding values.

        :return: The parameters of this TemplateArtifactProperties.
        :rtype: Dict[str, ParameterValue]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TemplateArtifactProperties.

        A dictionary for parameters and their corresponding values.

        :param parameters: The parameters of this TemplateArtifactProperties.
        :type parameters: Dict[str, ParameterValue]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def resource_group(self):
        """Gets the resource_group of this TemplateArtifactProperties.

        If applicable, the name of the resource group placeholder to which the Resource Manager template blueprint artifact will be deployed.

        :return: The resource_group of this TemplateArtifactProperties.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this TemplateArtifactProperties.

        If applicable, the name of the resource group placeholder to which the Resource Manager template blueprint artifact will be deployed.

        :param resource_group: The resource_group of this TemplateArtifactProperties.
        :type resource_group: str
        """

        self._resource_group = resource_group

    @property
    def template(self):
        """Gets the template of this TemplateArtifactProperties.

        The Resource Manager template blueprint artifact body.

        :return: The template of this TemplateArtifactProperties.
        :rtype: object
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this TemplateArtifactProperties.

        The Resource Manager template blueprint artifact body.

        :param template: The template of this TemplateArtifactProperties.
        :type template: object
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")

        self._template = template

    @property
    def description(self):
        """Gets the description of this TemplateArtifactProperties.

        Multi-line explain this resource.

        :return: The description of this TemplateArtifactProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplateArtifactProperties.

        Multi-line explain this resource.

        :param description: The description of this TemplateArtifactProperties.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this TemplateArtifactProperties.

        One-liner string explain this resource.

        :return: The display_name of this TemplateArtifactProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TemplateArtifactProperties.

        One-liner string explain this resource.

        :param display_name: The display_name of this TemplateArtifactProperties.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 256:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `256`")

        self._display_name = display_name

    @property
    def depends_on(self):
        """Gets the depends_on of this TemplateArtifactProperties.

        Artifacts which need to be deployed before the specified artifact.

        :return: The depends_on of this TemplateArtifactProperties.
        :rtype: List[str]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this TemplateArtifactProperties.

        Artifacts which need to be deployed before the specified artifact.

        :param depends_on: The depends_on of this TemplateArtifactProperties.
        :type depends_on: List[str]
        """

        self._depends_on = depends_on
