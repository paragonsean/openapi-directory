/**
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlueprintProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlueprintProperties::OAIBlueprintProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlueprintProperties::OAIBlueprintProperties() {
    this->initializeModel();
}

OAIBlueprintProperties::~OAIBlueprintProperties() {}

void OAIBlueprintProperties::initializeModel() {

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_resource_groups_isSet = false;
    m_resource_groups_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_scope_isSet = false;
    m_target_scope_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;
}

void OAIBlueprintProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlueprintProperties::fromJsonObject(QJsonObject json) {

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_resource_groups_isValid = ::OpenAPI::fromJsonValue(m_resource_groups, json[QString("resourceGroups")]);
    m_resource_groups_isSet = !json[QString("resourceGroups")].isNull() && m_resource_groups_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_scope_isValid = ::OpenAPI::fromJsonValue(m_target_scope, json[QString("targetScope")]);
    m_target_scope_isSet = !json[QString("targetScope")].isNull() && m_target_scope_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;
}

QString OAIBlueprintProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlueprintProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_layout_isSet) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_versions_isSet) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_resource_groups.size() > 0) {
        obj.insert(QString("resourceGroups"), ::OpenAPI::toJsonValue(m_resource_groups));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_scope_isSet) {
        obj.insert(QString("targetScope"), ::OpenAPI::toJsonValue(m_target_scope));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    return obj;
}

OAIObject OAIBlueprintProperties::getLayout() const {
    return m_layout;
}
void OAIBlueprintProperties::setLayout(const OAIObject &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIBlueprintProperties::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIBlueprintProperties::is_layout_Valid() const{
    return m_layout_isValid;
}

OAIObject OAIBlueprintProperties::getVersions() const {
    return m_versions;
}
void OAIBlueprintProperties::setVersions(const OAIObject &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAIBlueprintProperties::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAIBlueprintProperties::is_versions_Valid() const{
    return m_versions_isValid;
}

QMap<QString, OAIParameterDefinition> OAIBlueprintProperties::getParameters() const {
    return m_parameters;
}
void OAIBlueprintProperties::setParameters(const QMap<QString, OAIParameterDefinition> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIBlueprintProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIBlueprintProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QMap<QString, OAIResourceGroupDefinition> OAIBlueprintProperties::getResourceGroups() const {
    return m_resource_groups;
}
void OAIBlueprintProperties::setResourceGroups(const QMap<QString, OAIResourceGroupDefinition> &resource_groups) {
    m_resource_groups = resource_groups;
    m_resource_groups_isSet = true;
}

bool OAIBlueprintProperties::is_resource_groups_Set() const{
    return m_resource_groups_isSet;
}

bool OAIBlueprintProperties::is_resource_groups_Valid() const{
    return m_resource_groups_isValid;
}

OAIBlueprintStatus OAIBlueprintProperties::getStatus() const {
    return m_status;
}
void OAIBlueprintProperties::setStatus(const OAIBlueprintStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBlueprintProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBlueprintProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBlueprintProperties::getTargetScope() const {
    return m_target_scope;
}
void OAIBlueprintProperties::setTargetScope(const QString &target_scope) {
    m_target_scope = target_scope;
    m_target_scope_isSet = true;
}

bool OAIBlueprintProperties::is_target_scope_Set() const{
    return m_target_scope_isSet;
}

bool OAIBlueprintProperties::is_target_scope_Valid() const{
    return m_target_scope_isValid;
}

QString OAIBlueprintProperties::getDescription() const {
    return m_description;
}
void OAIBlueprintProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBlueprintProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBlueprintProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBlueprintProperties::getDisplayName() const {
    return m_display_name;
}
void OAIBlueprintProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIBlueprintProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIBlueprintProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIBlueprintProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlueprintProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
