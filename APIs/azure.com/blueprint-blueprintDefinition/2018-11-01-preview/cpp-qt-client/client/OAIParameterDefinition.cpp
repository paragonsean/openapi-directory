/**
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterDefinition::OAIParameterDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterDefinition::OAIParameterDefinition() {
    this->initializeModel();
}

OAIParameterDefinition::~OAIParameterDefinition() {}

void OAIParameterDefinition::initializeModel() {

    m_allowed_values_isSet = false;
    m_allowed_values_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIParameterDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterDefinition::fromJsonObject(QJsonObject json) {

    m_allowed_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_values, json[QString("allowedValues")]);
    m_allowed_values_isSet = !json[QString("allowedValues")].isNull() && m_allowed_values_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIParameterDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_values.size() > 0) {
        obj.insert(QString("allowedValues"), ::OpenAPI::toJsonValue(m_allowed_values));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIObject> OAIParameterDefinition::getAllowedValues() const {
    return m_allowed_values;
}
void OAIParameterDefinition::setAllowedValues(const QList<OAIObject> &allowed_values) {
    m_allowed_values = allowed_values;
    m_allowed_values_isSet = true;
}

bool OAIParameterDefinition::is_allowed_values_Set() const{
    return m_allowed_values_isSet;
}

bool OAIParameterDefinition::is_allowed_values_Valid() const{
    return m_allowed_values_isValid;
}

OAIObject OAIParameterDefinition::getDefaultValue() const {
    return m_default_value;
}
void OAIParameterDefinition::setDefaultValue(const OAIObject &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIParameterDefinition::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIParameterDefinition::is_default_value_Valid() const{
    return m_default_value_isValid;
}

OAIParameterDefinitionMetadata OAIParameterDefinition::getMetadata() const {
    return m_metadata;
}
void OAIParameterDefinition::setMetadata(const OAIParameterDefinitionMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIParameterDefinition::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIParameterDefinition::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIParameterDefinition::getType() const {
    return m_type;
}
void OAIParameterDefinition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIParameterDefinition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIParameterDefinition::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIParameterDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
