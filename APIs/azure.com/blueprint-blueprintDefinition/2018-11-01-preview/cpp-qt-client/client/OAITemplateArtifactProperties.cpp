/**
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITemplateArtifactProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITemplateArtifactProperties::OAITemplateArtifactProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITemplateArtifactProperties::OAITemplateArtifactProperties() {
    this->initializeModel();
}

OAITemplateArtifactProperties::~OAITemplateArtifactProperties() {}

void OAITemplateArtifactProperties::initializeModel() {

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;
}

void OAITemplateArtifactProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITemplateArtifactProperties::fromJsonObject(QJsonObject json) {

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("dependsOn")]);
    m_depends_on_isSet = !json[QString("dependsOn")].isNull() && m_depends_on_isValid;
}

QString OAITemplateArtifactProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITemplateArtifactProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_depends_on.size() > 0) {
        obj.insert(QString("dependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    return obj;
}

QMap<QString, OAIParameterValue> OAITemplateArtifactProperties::getParameters() const {
    return m_parameters;
}
void OAITemplateArtifactProperties::setParameters(const QMap<QString, OAIParameterValue> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAITemplateArtifactProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAITemplateArtifactProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAITemplateArtifactProperties::getResourceGroup() const {
    return m_resource_group;
}
void OAITemplateArtifactProperties::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAITemplateArtifactProperties::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAITemplateArtifactProperties::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

OAIObject OAITemplateArtifactProperties::getRTemplate() const {
    return m_r_template;
}
void OAITemplateArtifactProperties::setRTemplate(const OAIObject &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAITemplateArtifactProperties::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAITemplateArtifactProperties::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAITemplateArtifactProperties::getDescription() const {
    return m_description;
}
void OAITemplateArtifactProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITemplateArtifactProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAITemplateArtifactProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITemplateArtifactProperties::getDisplayName() const {
    return m_display_name;
}
void OAITemplateArtifactProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITemplateArtifactProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITemplateArtifactProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAITemplateArtifactProperties::getDependsOn() const {
    return m_depends_on;
}
void OAITemplateArtifactProperties::setDependsOn(const QList<QString> &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAITemplateArtifactProperties::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAITemplateArtifactProperties::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

bool OAITemplateArtifactProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITemplateArtifactProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameters_isValid && m_r_template_isValid && true;
}

} // namespace OpenAPI
