/**
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceGroupDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceGroupDefinition::OAIResourceGroupDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceGroupDefinition::OAIResourceGroupDefinition() {
    this->initializeModel();
}

OAIResourceGroupDefinition::~OAIResourceGroupDefinition() {}

void OAIResourceGroupDefinition::initializeModel() {

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIResourceGroupDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceGroupDefinition::fromJsonObject(QJsonObject json) {

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("dependsOn")]);
    m_depends_on_isSet = !json[QString("dependsOn")].isNull() && m_depends_on_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIResourceGroupDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceGroupDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_depends_on.size() > 0) {
        obj.insert(QString("dependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<QString> OAIResourceGroupDefinition::getDependsOn() const {
    return m_depends_on;
}
void OAIResourceGroupDefinition::setDependsOn(const QList<QString> &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAIResourceGroupDefinition::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAIResourceGroupDefinition::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

QString OAIResourceGroupDefinition::getLocation() const {
    return m_location;
}
void OAIResourceGroupDefinition::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIResourceGroupDefinition::is_location_Set() const{
    return m_location_isSet;
}

bool OAIResourceGroupDefinition::is_location_Valid() const{
    return m_location_isValid;
}

OAIParameterDefinitionMetadata OAIResourceGroupDefinition::getMetadata() const {
    return m_metadata;
}
void OAIResourceGroupDefinition::setMetadata(const OAIParameterDefinitionMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIResourceGroupDefinition::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIResourceGroupDefinition::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIResourceGroupDefinition::getName() const {
    return m_name;
}
void OAIResourceGroupDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceGroupDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceGroupDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAIResourceGroupDefinition::getTags() const {
    return m_tags;
}
void OAIResourceGroupDefinition::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIResourceGroupDefinition::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIResourceGroupDefinition::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIResourceGroupDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_depends_on.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceGroupDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
