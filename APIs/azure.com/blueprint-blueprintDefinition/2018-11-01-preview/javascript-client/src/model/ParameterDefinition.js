/**
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParameterDefinitionMetadata from './ParameterDefinitionMetadata';

/**
 * The ParameterDefinition model module.
 * @module model/ParameterDefinition
 * @version 2018-11-01-preview
 */
class ParameterDefinition {
    /**
     * Constructs a new <code>ParameterDefinition</code>.
     * Represent a parameter with constrains and metadata.
     * @alias module:model/ParameterDefinition
     * @param type {module:model/ParameterDefinition.TypeEnum} Allowed data types for Resource Manager template parameters.
     */
    constructor(type) { 
        
        ParameterDefinition.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ParameterDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParameterDefinition} obj Optional instance to populate.
     * @return {module:model/ParameterDefinition} The populated <code>ParameterDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParameterDefinition();

            if (data.hasOwnProperty('allowedValues')) {
                obj['allowedValues'] = ApiClient.convertToType(data['allowedValues'], [Object]);
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], Object);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ParameterDefinitionMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParameterDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParameterDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ParameterDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowedValues'])) {
            throw new Error("Expected the field `allowedValues` to be an array in the JSON data but got " + data['allowedValues']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          ParameterDefinitionMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ParameterDefinition.RequiredProperties = ["type"];

/**
 * Array of allowed values for this parameter.
 * @member {Array.<Object>} allowedValues
 */
ParameterDefinition.prototype['allowedValues'] = undefined;

/**
 * Default Value for this parameter.
 * @member {Object} defaultValue
 */
ParameterDefinition.prototype['defaultValue'] = undefined;

/**
 * @member {module:model/ParameterDefinitionMetadata} metadata
 */
ParameterDefinition.prototype['metadata'] = undefined;

/**
 * Allowed data types for Resource Manager template parameters.
 * @member {module:model/ParameterDefinition.TypeEnum} type
 */
ParameterDefinition.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ParameterDefinition['TypeEnum'] = {

    /**
     * value: "string"
     * @const
     */
    "string": "string",

    /**
     * value: "array"
     * @const
     */
    "array": "array",

    /**
     * value: "bool"
     * @const
     */
    "bool": "bool",

    /**
     * value: "int"
     * @const
     */
    "int": "int",

    /**
     * value: "object"
     * @const
     */
    "object": "object",

    /**
     * value: "secureObject"
     * @const
     */
    "secureObject": "secureObject",

    /**
     * value: "secureString"
     * @const
     */
    "secureString": "secureString"
};



export default ParameterDefinition;

