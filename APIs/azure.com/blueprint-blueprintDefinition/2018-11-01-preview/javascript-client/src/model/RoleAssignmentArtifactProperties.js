/**
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArtifactPropertiesBase from './ArtifactPropertiesBase';
import BlueprintResourcePropertiesBase from './BlueprintResourcePropertiesBase';

/**
 * The RoleAssignmentArtifactProperties model module.
 * @module model/RoleAssignmentArtifactProperties
 * @version 2018-11-01-preview
 */
class RoleAssignmentArtifactProperties {
    /**
     * Constructs a new <code>RoleAssignmentArtifactProperties</code>.
     * Properties of a Role assignment blueprint artifact.
     * @alias module:model/RoleAssignmentArtifactProperties
     * @implements module:model/BlueprintResourcePropertiesBase
     * @implements module:model/ArtifactPropertiesBase
     */
    constructor() { 
        BlueprintResourcePropertiesBase.initialize(this);ArtifactPropertiesBase.initialize(this);
        RoleAssignmentArtifactProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['principalIds'] = principalIds;
        obj['roleDefinitionId'] = roleDefinitionId;
    }

    /**
     * Constructs a <code>RoleAssignmentArtifactProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoleAssignmentArtifactProperties} obj Optional instance to populate.
     * @return {module:model/RoleAssignmentArtifactProperties} The populated <code>RoleAssignmentArtifactProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoleAssignmentArtifactProperties();
            BlueprintResourcePropertiesBase.constructFromObject(data, obj);
            ArtifactPropertiesBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('principalIds')) {
                obj['principalIds'] = ApiClient.convertToType(data['principalIds'], Object);
            }
            if (data.hasOwnProperty('resourceGroup')) {
                obj['resourceGroup'] = ApiClient.convertToType(data['resourceGroup'], 'String');
            }
            if (data.hasOwnProperty('roleDefinitionId')) {
                obj['roleDefinitionId'] = ApiClient.convertToType(data['roleDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('dependsOn')) {
                obj['dependsOn'] = ApiClient.convertToType(data['dependsOn'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoleAssignmentArtifactProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoleAssignmentArtifactProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RoleAssignmentArtifactProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['resourceGroup'] && !(typeof data['resourceGroup'] === 'string' || data['resourceGroup'] instanceof String)) {
            throw new Error("Expected the field `resourceGroup` to be a primitive type in the JSON string but got " + data['resourceGroup']);
        }
        // ensure the json data is a string
        if (data['roleDefinitionId'] && !(typeof data['roleDefinitionId'] === 'string' || data['roleDefinitionId'] instanceof String)) {
            throw new Error("Expected the field `roleDefinitionId` to be a primitive type in the JSON string but got " + data['roleDefinitionId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dependsOn'])) {
            throw new Error("Expected the field `dependsOn` to be an array in the JSON data but got " + data['dependsOn']);
        }

        return true;
    }


}

RoleAssignmentArtifactProperties.RequiredProperties = ["principalIds", "roleDefinitionId"];

/**
 * Array of user or group identities in Azure Active Directory. The roleDefinition will apply to each identity.
 * @member {Object} principalIds
 */
RoleAssignmentArtifactProperties.prototype['principalIds'] = undefined;

/**
 * RoleAssignment will be scope to this resourceGroup. If empty, it scopes to the subscription.
 * @member {String} resourceGroup
 */
RoleAssignmentArtifactProperties.prototype['resourceGroup'] = undefined;

/**
 * Azure resource ID of the RoleDefinition.
 * @member {String} roleDefinitionId
 */
RoleAssignmentArtifactProperties.prototype['roleDefinitionId'] = undefined;

/**
 * Multi-line explain this resource.
 * @member {String} description
 */
RoleAssignmentArtifactProperties.prototype['description'] = undefined;

/**
 * One-liner string explain this resource.
 * @member {String} displayName
 */
RoleAssignmentArtifactProperties.prototype['displayName'] = undefined;

/**
 * Artifacts which need to be deployed before the specified artifact.
 * @member {Array.<String>} dependsOn
 */
RoleAssignmentArtifactProperties.prototype['dependsOn'] = undefined;


// Implement BlueprintResourcePropertiesBase interface:
/**
 * Multi-line explain this resource.
 * @member {String} description
 */
BlueprintResourcePropertiesBase.prototype['description'] = undefined;
/**
 * One-liner string explain this resource.
 * @member {String} displayName
 */
BlueprintResourcePropertiesBase.prototype['displayName'] = undefined;
// Implement ArtifactPropertiesBase interface:
/**
 * Artifacts which need to be deployed before the specified artifact.
 * @member {Array.<String>} dependsOn
 */
ArtifactPropertiesBase.prototype['dependsOn'] = undefined;




export default RoleAssignmentArtifactProperties;

