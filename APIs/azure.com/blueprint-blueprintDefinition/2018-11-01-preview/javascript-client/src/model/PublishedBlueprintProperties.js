/**
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlueprintStatus from './BlueprintStatus';
import ParameterDefinition from './ParameterDefinition';
import ResourceGroupDefinition from './ResourceGroupDefinition';
import SharedBlueprintProperties from './SharedBlueprintProperties';

/**
 * The PublishedBlueprintProperties model module.
 * @module model/PublishedBlueprintProperties
 * @version 2018-11-01-preview
 */
class PublishedBlueprintProperties {
    /**
     * Constructs a new <code>PublishedBlueprintProperties</code>.
     * Schema for published blueprint definition properties.
     * @alias module:model/PublishedBlueprintProperties
     * @implements module:model/SharedBlueprintProperties
     */
    constructor() { 
        SharedBlueprintProperties.initialize(this);
        PublishedBlueprintProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublishedBlueprintProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublishedBlueprintProperties} obj Optional instance to populate.
     * @return {module:model/PublishedBlueprintProperties} The populated <code>PublishedBlueprintProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublishedBlueprintProperties();
            SharedBlueprintProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('blueprintName')) {
                obj['blueprintName'] = ApiClient.convertToType(data['blueprintName'], 'String');
            }
            if (data.hasOwnProperty('changeNotes')) {
                obj['changeNotes'] = ApiClient.convertToType(data['changeNotes'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': ParameterDefinition});
            }
            if (data.hasOwnProperty('resourceGroups')) {
                obj['resourceGroups'] = ApiClient.convertToType(data['resourceGroups'], {'String': ResourceGroupDefinition});
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = BlueprintStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('targetScope')) {
                obj['targetScope'] = ApiClient.convertToType(data['targetScope'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublishedBlueprintProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublishedBlueprintProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blueprintName'] && !(typeof data['blueprintName'] === 'string' || data['blueprintName'] instanceof String)) {
            throw new Error("Expected the field `blueprintName` to be a primitive type in the JSON string but got " + data['blueprintName']);
        }
        // ensure the json data is a string
        if (data['changeNotes'] && !(typeof data['changeNotes'] === 'string' || data['changeNotes'] instanceof String)) {
            throw new Error("Expected the field `changeNotes` to be a primitive type in the JSON string but got " + data['changeNotes']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          BlueprintStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['targetScope'] && !(typeof data['targetScope'] === 'string' || data['targetScope'] instanceof String)) {
            throw new Error("Expected the field `targetScope` to be a primitive type in the JSON string but got " + data['targetScope']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }

        return true;
    }


}



/**
 * Name of the published blueprint definition.
 * @member {String} blueprintName
 */
PublishedBlueprintProperties.prototype['blueprintName'] = undefined;

/**
 * Version-specific change notes.
 * @member {String} changeNotes
 */
PublishedBlueprintProperties.prototype['changeNotes'] = undefined;

/**
 * A dictionary hold parameter name and its metadata.
 * @member {Object.<String, module:model/ParameterDefinition>} parameters
 */
PublishedBlueprintProperties.prototype['parameters'] = undefined;

/**
 * A dictionary which maps resource group placeholders to the resource groups which will be created.
 * @member {Object.<String, module:model/ResourceGroupDefinition>} resourceGroups
 */
PublishedBlueprintProperties.prototype['resourceGroups'] = undefined;

/**
 * @member {module:model/BlueprintStatus} status
 */
PublishedBlueprintProperties.prototype['status'] = undefined;

/**
 * The scope where this blueprint definition can be assigned.
 * @member {module:model/PublishedBlueprintProperties.TargetScopeEnum} targetScope
 */
PublishedBlueprintProperties.prototype['targetScope'] = undefined;

/**
 * Multi-line explain this resource.
 * @member {String} description
 */
PublishedBlueprintProperties.prototype['description'] = undefined;

/**
 * One-liner string explain this resource.
 * @member {String} displayName
 */
PublishedBlueprintProperties.prototype['displayName'] = undefined;


// Implement SharedBlueprintProperties interface:
/**
 * Multi-line explain this resource.
 * @member {String} description
 */
SharedBlueprintProperties.prototype['description'] = undefined;
/**
 * One-liner string explain this resource.
 * @member {String} displayName
 */
SharedBlueprintProperties.prototype['displayName'] = undefined;



/**
 * Allowed values for the <code>targetScope</code> property.
 * @enum {String}
 * @readonly
 */
PublishedBlueprintProperties['TargetScopeEnum'] = {

    /**
     * value: "subscription"
     * @const
     */
    "subscription": "subscription",

    /**
     * value: "managementGroup"
     * @const
     */
    "managementGroup": "managementGroup"
};



export default PublishedBlueprintProperties;

