/**
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Artifact from '../model/Artifact';
import ArtifactList from '../model/ArtifactList';

/**
* Artifact service.
* @module api/ArtifactApi
* @version 2018-11-01-preview
*/
export default class ArtifactApi {

    /**
    * Constructs a new ArtifactApi. 
    * @alias module:api/ArtifactApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the artifactsCreateOrUpdate operation.
     * @callback module:api/ArtifactApi~artifactsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update blueprint artifact.
     * @param {String} apiVersion Client API Version.
     * @param {String} scope The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.
     * @param {String} blueprintName Name of the blueprint definition.
     * @param {String} artifactName Name of the blueprint artifact.
     * @param {module:model/Artifact} artifact Blueprint artifact to create or update.
     * @param {module:api/ArtifactApi~artifactsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    artifactsCreateOrUpdate(apiVersion, scope, blueprintName, artifactName, artifact, callback) {
      let postBody = artifact;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling artifactsCreateOrUpdate");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling artifactsCreateOrUpdate");
      }
      // verify the required parameter 'blueprintName' is set
      if (blueprintName === undefined || blueprintName === null) {
        throw new Error("Missing the required parameter 'blueprintName' when calling artifactsCreateOrUpdate");
      }
      // verify the required parameter 'artifactName' is set
      if (artifactName === undefined || artifactName === null) {
        throw new Error("Missing the required parameter 'artifactName' when calling artifactsCreateOrUpdate");
      }
      // verify the required parameter 'artifact' is set
      if (artifact === undefined || artifact === null) {
        throw new Error("Missing the required parameter 'artifact' when calling artifactsCreateOrUpdate");
      }

      let pathParams = {
        'scope': scope,
        'blueprintName': blueprintName,
        'artifactName': artifactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsDelete operation.
     * @callback module:api/ArtifactApi~artifactsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a blueprint artifact.
     * @param {String} apiVersion Client API Version.
     * @param {String} scope The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.
     * @param {String} blueprintName Name of the blueprint definition.
     * @param {String} artifactName Name of the blueprint artifact.
     * @param {module:api/ArtifactApi~artifactsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    artifactsDelete(apiVersion, scope, blueprintName, artifactName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling artifactsDelete");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling artifactsDelete");
      }
      // verify the required parameter 'blueprintName' is set
      if (blueprintName === undefined || blueprintName === null) {
        throw new Error("Missing the required parameter 'blueprintName' when calling artifactsDelete");
      }
      // verify the required parameter 'artifactName' is set
      if (artifactName === undefined || artifactName === null) {
        throw new Error("Missing the required parameter 'artifactName' when calling artifactsDelete");
      }

      let pathParams = {
        'scope': scope,
        'blueprintName': blueprintName,
        'artifactName': artifactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsGet operation.
     * @callback module:api/ArtifactApi~artifactsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Artifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a blueprint artifact.
     * @param {String} apiVersion Client API Version.
     * @param {String} scope The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.
     * @param {String} blueprintName Name of the blueprint definition.
     * @param {String} artifactName Name of the blueprint artifact.
     * @param {module:api/ArtifactApi~artifactsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Artifact}
     */
    artifactsGet(apiVersion, scope, blueprintName, artifactName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling artifactsGet");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling artifactsGet");
      }
      // verify the required parameter 'blueprintName' is set
      if (blueprintName === undefined || blueprintName === null) {
        throw new Error("Missing the required parameter 'blueprintName' when calling artifactsGet");
      }
      // verify the required parameter 'artifactName' is set
      if (artifactName === undefined || artifactName === null) {
        throw new Error("Missing the required parameter 'artifactName' when calling artifactsGet");
      }

      let pathParams = {
        'scope': scope,
        'blueprintName': blueprintName,
        'artifactName': artifactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Artifact;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the artifactsList operation.
     * @callback module:api/ArtifactApi~artifactsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArtifactList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List artifacts for a given blueprint definition.
     * @param {String} apiVersion Client API Version.
     * @param {String} scope The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'). For blueprint assignments management group scope is reserved for future use.
     * @param {String} blueprintName Name of the blueprint definition.
     * @param {module:api/ArtifactApi~artifactsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArtifactList}
     */
    artifactsList(apiVersion, scope, blueprintName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling artifactsList");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling artifactsList");
      }
      // verify the required parameter 'blueprintName' is set
      if (blueprintName === undefined || blueprintName === null) {
        throw new Error("Missing the required parameter 'blueprintName' when calling artifactsList");
      }

      let pathParams = {
        'scope': scope,
        'blueprintName': blueprintName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArtifactList;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
